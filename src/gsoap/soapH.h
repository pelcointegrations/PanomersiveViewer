/* soapH.h
   Generated by gSOAP 2.8.31 for onvif.h

gSOAP XML Web services tools
Copyright (C) 2000-2016, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void *SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);
SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap*, int, int, void*, size_t, const void*, void**);

#ifndef SOAP_TYPE_byte_DEFINED
#define SOAP_TYPE_byte_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap*, char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

inline int soap_write_byte(struct soap *soap, char const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

inline int soap_read_byte(struct soap *soap, char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_byte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__IANA_IfTypes_DEFINED
#define SOAP_TYPE_tt__IANA_IfTypes_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__IANA_IfTypes(struct soap*, int *);

#define soap_tt__IANA_IfTypes2s soap_int2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IANA_IfTypes(struct soap*, const char*, int, const int *, const char*);

#define soap_s2tt__IANA_IfTypes soap_s2int

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_tt__IANA_IfTypes(struct soap*, const char*, int *, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__IANA_IfTypes(struct soap*, const int *, const char*, const char*);

inline int soap_write_tt__IANA_IfTypes(struct soap *soap, int const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_tt__IANA_IfTypes(soap, p, "tt:IANA-IfTypes", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 int * SOAP_FMAC4 soap_get_tt__IANA_IfTypes(struct soap*, int *, const char*, const char*);

inline int soap_read_tt__IANA_IfTypes(struct soap *soap, int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_tt__IANA_IfTypes(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_int_DEFINED
#define SOAP_TYPE_int_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap*, int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

inline int soap_write_int(struct soap *soap, int const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_int(soap, p, "int", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

inline int soap_read_int(struct soap *soap, int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_int(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__duration_DEFINED
#define SOAP_TYPE_xsd__duration_DEFINED
SOAP_FMAC1 void SOAP_FMAC2 soap_default_xsd__duration(struct soap*, LONG64 *);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_xsd__duration2s(struct soap*, LONG64);
SOAP_FMAC1 int SOAP_FMAC2 soap_out_xsd__duration(struct soap*, const char*, int, const LONG64 *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2xsd__duration(struct soap*, const char*, LONG64 *);
SOAP_FMAC1 LONG64 * SOAP_FMAC2 soap_in_xsd__duration(struct soap*, const char*, LONG64 *, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__duration(struct soap*, const LONG64 *, const char*, const char*);

inline int soap_write_xsd__duration(struct soap *soap, LONG64 const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_xsd__duration(soap, p, "xsd:duration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_get_xsd__duration(struct soap*, LONG64 *, const char*, const char*);

inline int soap_read_xsd__duration(struct soap *soap, LONG64 *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_xsd__duration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_float_DEFINED
#define SOAP_TYPE_float_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_float(struct soap*, float *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_float(struct soap*, const char*, int, const float *, const char*);
SOAP_FMAC3 float * SOAP_FMAC4 soap_in_float(struct soap*, const char*, float *, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_float(struct soap*, const float *, const char*, const char*);

inline int soap_write_float(struct soap *soap, float const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_float(soap, p, "float", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 float * SOAP_FMAC4 soap_get_float(struct soap*, float *, const char*, const char*);

inline int soap_read_float(struct soap *soap, float *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_float(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_unsignedByte_DEFINED
#define SOAP_TYPE_unsignedByte_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedByte(struct soap*, unsigned char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedByte(struct soap*, const char*, int, const unsigned char *, const char*);
SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_unsignedByte(struct soap*, const char*, unsigned char *, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedByte(struct soap*, const unsigned char *, const char*, const char*);

inline int soap_write_unsignedByte(struct soap *soap, unsigned char const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_unsignedByte(soap, p, "unsignedByte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_unsignedByte(struct soap*, unsigned char *, const char*, const char*);

inline int soap_read_unsignedByte(struct soap *soap, unsigned char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_unsignedByte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_unsignedInt_DEFINED
#define SOAP_TYPE_unsignedInt_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedInt(struct soap*, unsigned int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap*, const char*, int, const unsigned int *, const char*);
SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap*, const char*, unsigned int *, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap*, const unsigned int *, const char*, const char*);

inline int soap_write_unsignedInt(struct soap *soap, unsigned int const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_unsignedInt(soap, p, "unsignedInt", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap*, unsigned int *, const char*, const char*);

inline int soap_read_unsignedInt(struct soap *soap, unsigned int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_unsignedInt(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif
/* _wsa5__RetryAfter is a typedef synonym for ULONG64 */

#ifndef SOAP_TYPE__wsa5__RetryAfter_DEFINED
#define SOAP_TYPE__wsa5__RetryAfter_DEFINED

#define soap_default__wsa5__RetryAfter(soap, a) soap_default_ULONG64(soap, a)


#define soap__wsa5__RetryAfter2s soap_ULONG642s


#define soap_out__wsa5__RetryAfter soap_out_ULONG64


#define soap_s2_wsa5__RetryAfter soap_s2ULONG64


#define soap_in__wsa5__RetryAfter soap_in_ULONG64


#define soap_put__wsa5__RetryAfter soap_put_ULONG64


#define soap_write__wsa5__RetryAfter soap_write_ULONG64


#define soap_get__wsa5__RetryAfter soap_get_ULONG64


#define soap_read__wsa5__RetryAfter soap_read_ULONG64

#endif

#ifndef SOAP_TYPE_ULONG64_DEFINED
#define SOAP_TYPE_ULONG64_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ULONG64(struct soap*, ULONG64 *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ULONG64(struct soap*, const char*, int, const ULONG64 *, const char*);
SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_in_ULONG64(struct soap*, const char*, ULONG64 *, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ULONG64(struct soap*, const ULONG64 *, const char*, const char*);

inline int soap_write_ULONG64(struct soap *soap, ULONG64 const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ULONG64(soap, p, "unsignedLong", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_get_ULONG64(struct soap*, ULONG64 *, const char*, const char*);

inline int soap_read_ULONG64(struct soap *soap, ULONG64 *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ULONG64(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_dateTime_DEFINED
#define SOAP_TYPE_dateTime_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_dateTime(struct soap*, time_t *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_dateTime(struct soap*, const char*, int, const time_t *, const char*);
SOAP_FMAC3 time_t * SOAP_FMAC4 soap_in_dateTime(struct soap*, const char*, time_t *, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_dateTime(struct soap*, const time_t *, const char*, const char*);

inline int soap_write_dateTime(struct soap *soap, time_t const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_dateTime(soap, p, "dateTime", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 time_t * SOAP_FMAC4 soap_get_dateTime(struct soap*, time_t *, const char*, const char*);

inline int soap_read_dateTime(struct soap *soap, time_t *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_dateTime(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__OSDType_DEFINED
#define SOAP_TYPE_tt__OSDType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__OSDType(struct soap*, enum tt__OSDType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__OSDType(struct soap*, const char*, int, const enum tt__OSDType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__OSDType2s(struct soap*, enum tt__OSDType);
SOAP_FMAC3 enum tt__OSDType * SOAP_FMAC4 soap_in_tt__OSDType(struct soap*, const char*, enum tt__OSDType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__OSDType(struct soap*, const char*, enum tt__OSDType *);

inline enum tt__OSDType * soap_new_tt__OSDType(struct soap *soap, int n = -1)
{
	return static_cast<enum tt__OSDType *>(soap_malloc(soap, (n < 0 ? 1 : n) * sizeof(enum tt__OSDType)));
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__OSDType(struct soap*, const enum tt__OSDType *, const char*, const char*);

inline int soap_write_tt__OSDType(struct soap *soap, enum tt__OSDType const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_tt__OSDType(soap, p, "tt:OSDType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__OSDType * SOAP_FMAC4 soap_get_tt__OSDType(struct soap*, enum tt__OSDType *, const char*, const char*);

inline int soap_read_tt__OSDType(struct soap *soap, enum tt__OSDType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_tt__OSDType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__ModeOfOperation_DEFINED
#define SOAP_TYPE_tt__ModeOfOperation_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__ModeOfOperation(struct soap*, enum tt__ModeOfOperation *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ModeOfOperation(struct soap*, const char*, int, const enum tt__ModeOfOperation *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__ModeOfOperation2s(struct soap*, enum tt__ModeOfOperation);
SOAP_FMAC3 enum tt__ModeOfOperation * SOAP_FMAC4 soap_in_tt__ModeOfOperation(struct soap*, const char*, enum tt__ModeOfOperation *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__ModeOfOperation(struct soap*, const char*, enum tt__ModeOfOperation *);

inline enum tt__ModeOfOperation * soap_new_tt__ModeOfOperation(struct soap *soap, int n = -1)
{
	return static_cast<enum tt__ModeOfOperation *>(soap_malloc(soap, (n < 0 ? 1 : n) * sizeof(enum tt__ModeOfOperation)));
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__ModeOfOperation(struct soap*, const enum tt__ModeOfOperation *, const char*, const char*);

inline int soap_write_tt__ModeOfOperation(struct soap *soap, enum tt__ModeOfOperation const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_tt__ModeOfOperation(soap, p, "tt:ModeOfOperation", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__ModeOfOperation * SOAP_FMAC4 soap_get_tt__ModeOfOperation(struct soap*, enum tt__ModeOfOperation *, const char*, const char*);

inline int soap_read_tt__ModeOfOperation(struct soap *soap, enum tt__ModeOfOperation *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_tt__ModeOfOperation(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__TrackType_DEFINED
#define SOAP_TYPE_tt__TrackType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__TrackType(struct soap*, enum tt__TrackType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__TrackType(struct soap*, const char*, int, const enum tt__TrackType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__TrackType2s(struct soap*, enum tt__TrackType);
SOAP_FMAC3 enum tt__TrackType * SOAP_FMAC4 soap_in_tt__TrackType(struct soap*, const char*, enum tt__TrackType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__TrackType(struct soap*, const char*, enum tt__TrackType *);

inline enum tt__TrackType * soap_new_tt__TrackType(struct soap *soap, int n = -1)
{
	return static_cast<enum tt__TrackType *>(soap_malloc(soap, (n < 0 ? 1 : n) * sizeof(enum tt__TrackType)));
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__TrackType(struct soap*, const enum tt__TrackType *, const char*, const char*);

inline int soap_write_tt__TrackType(struct soap *soap, enum tt__TrackType const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_tt__TrackType(soap, p, "tt:TrackType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__TrackType * SOAP_FMAC4 soap_get_tt__TrackType(struct soap*, enum tt__TrackType *, const char*, const char*);

inline int soap_read_tt__TrackType(struct soap *soap, enum tt__TrackType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_tt__TrackType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__RecordingStatus_DEFINED
#define SOAP_TYPE_tt__RecordingStatus_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__RecordingStatus(struct soap*, enum tt__RecordingStatus *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RecordingStatus(struct soap*, const char*, int, const enum tt__RecordingStatus *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__RecordingStatus2s(struct soap*, enum tt__RecordingStatus);
SOAP_FMAC3 enum tt__RecordingStatus * SOAP_FMAC4 soap_in_tt__RecordingStatus(struct soap*, const char*, enum tt__RecordingStatus *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__RecordingStatus(struct soap*, const char*, enum tt__RecordingStatus *);

inline enum tt__RecordingStatus * soap_new_tt__RecordingStatus(struct soap *soap, int n = -1)
{
	return static_cast<enum tt__RecordingStatus *>(soap_malloc(soap, (n < 0 ? 1 : n) * sizeof(enum tt__RecordingStatus)));
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__RecordingStatus(struct soap*, const enum tt__RecordingStatus *, const char*, const char*);

inline int soap_write_tt__RecordingStatus(struct soap *soap, enum tt__RecordingStatus const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_tt__RecordingStatus(soap, p, "tt:RecordingStatus", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__RecordingStatus * SOAP_FMAC4 soap_get_tt__RecordingStatus(struct soap*, enum tt__RecordingStatus *, const char*, const char*);

inline int soap_read_tt__RecordingStatus(struct soap *soap, enum tt__RecordingStatus *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_tt__RecordingStatus(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__SearchState_DEFINED
#define SOAP_TYPE_tt__SearchState_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__SearchState(struct soap*, enum tt__SearchState *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__SearchState(struct soap*, const char*, int, const enum tt__SearchState *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__SearchState2s(struct soap*, enum tt__SearchState);
SOAP_FMAC3 enum tt__SearchState * SOAP_FMAC4 soap_in_tt__SearchState(struct soap*, const char*, enum tt__SearchState *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__SearchState(struct soap*, const char*, enum tt__SearchState *);

inline enum tt__SearchState * soap_new_tt__SearchState(struct soap *soap, int n = -1)
{
	return static_cast<enum tt__SearchState *>(soap_malloc(soap, (n < 0 ? 1 : n) * sizeof(enum tt__SearchState)));
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__SearchState(struct soap*, const enum tt__SearchState *, const char*, const char*);

inline int soap_write_tt__SearchState(struct soap *soap, enum tt__SearchState const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_tt__SearchState(soap, p, "tt:SearchState", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__SearchState * SOAP_FMAC4 soap_get_tt__SearchState(struct soap*, enum tt__SearchState *, const char*, const char*);

inline int soap_read_tt__SearchState(struct soap *soap, enum tt__SearchState *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_tt__SearchState(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__ReceiverState_DEFINED
#define SOAP_TYPE_tt__ReceiverState_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__ReceiverState(struct soap*, enum tt__ReceiverState *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ReceiverState(struct soap*, const char*, int, const enum tt__ReceiverState *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__ReceiverState2s(struct soap*, enum tt__ReceiverState);
SOAP_FMAC3 enum tt__ReceiverState * SOAP_FMAC4 soap_in_tt__ReceiverState(struct soap*, const char*, enum tt__ReceiverState *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__ReceiverState(struct soap*, const char*, enum tt__ReceiverState *);

inline enum tt__ReceiverState * soap_new_tt__ReceiverState(struct soap *soap, int n = -1)
{
	return static_cast<enum tt__ReceiverState *>(soap_malloc(soap, (n < 0 ? 1 : n) * sizeof(enum tt__ReceiverState)));
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__ReceiverState(struct soap*, const enum tt__ReceiverState *, const char*, const char*);

inline int soap_write_tt__ReceiverState(struct soap *soap, enum tt__ReceiverState const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_tt__ReceiverState(soap, p, "tt:ReceiverState", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__ReceiverState * SOAP_FMAC4 soap_get_tt__ReceiverState(struct soap*, enum tt__ReceiverState *, const char*, const char*);

inline int soap_read_tt__ReceiverState(struct soap *soap, enum tt__ReceiverState *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_tt__ReceiverState(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__ReceiverMode_DEFINED
#define SOAP_TYPE_tt__ReceiverMode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__ReceiverMode(struct soap*, enum tt__ReceiverMode *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ReceiverMode(struct soap*, const char*, int, const enum tt__ReceiverMode *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__ReceiverMode2s(struct soap*, enum tt__ReceiverMode);
SOAP_FMAC3 enum tt__ReceiverMode * SOAP_FMAC4 soap_in_tt__ReceiverMode(struct soap*, const char*, enum tt__ReceiverMode *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__ReceiverMode(struct soap*, const char*, enum tt__ReceiverMode *);

inline enum tt__ReceiverMode * soap_new_tt__ReceiverMode(struct soap *soap, int n = -1)
{
	return static_cast<enum tt__ReceiverMode *>(soap_malloc(soap, (n < 0 ? 1 : n) * sizeof(enum tt__ReceiverMode)));
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__ReceiverMode(struct soap*, const enum tt__ReceiverMode *, const char*, const char*);

inline int soap_write_tt__ReceiverMode(struct soap *soap, enum tt__ReceiverMode const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_tt__ReceiverMode(soap, p, "tt:ReceiverMode", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__ReceiverMode * SOAP_FMAC4 soap_get_tt__ReceiverMode(struct soap*, enum tt__ReceiverMode *, const char*, const char*);

inline int soap_read_tt__ReceiverMode(struct soap *soap, enum tt__ReceiverMode *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_tt__ReceiverMode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__ClassType_DEFINED
#define SOAP_TYPE_tt__ClassType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__ClassType(struct soap*, enum tt__ClassType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ClassType(struct soap*, const char*, int, const enum tt__ClassType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__ClassType2s(struct soap*, enum tt__ClassType);
SOAP_FMAC3 enum tt__ClassType * SOAP_FMAC4 soap_in_tt__ClassType(struct soap*, const char*, enum tt__ClassType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__ClassType(struct soap*, const char*, enum tt__ClassType *);

inline enum tt__ClassType * soap_new_tt__ClassType(struct soap *soap, int n = -1)
{
	return static_cast<enum tt__ClassType *>(soap_malloc(soap, (n < 0 ? 1 : n) * sizeof(enum tt__ClassType)));
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__ClassType(struct soap*, const enum tt__ClassType *, const char*, const char*);

inline int soap_write_tt__ClassType(struct soap *soap, enum tt__ClassType const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_tt__ClassType(soap, p, "tt:ClassType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__ClassType * SOAP_FMAC4 soap_get_tt__ClassType(struct soap*, enum tt__ClassType *, const char*, const char*);

inline int soap_read_tt__ClassType(struct soap *soap, enum tt__ClassType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_tt__ClassType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__Direction_DEFINED
#define SOAP_TYPE_tt__Direction_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__Direction(struct soap*, enum tt__Direction *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Direction(struct soap*, const char*, int, const enum tt__Direction *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__Direction2s(struct soap*, enum tt__Direction);
SOAP_FMAC3 enum tt__Direction * SOAP_FMAC4 soap_in_tt__Direction(struct soap*, const char*, enum tt__Direction *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__Direction(struct soap*, const char*, enum tt__Direction *);

inline enum tt__Direction * soap_new_tt__Direction(struct soap *soap, int n = -1)
{
	return static_cast<enum tt__Direction *>(soap_malloc(soap, (n < 0 ? 1 : n) * sizeof(enum tt__Direction)));
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__Direction(struct soap*, const enum tt__Direction *, const char*, const char*);

inline int soap_write_tt__Direction(struct soap *soap, enum tt__Direction const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_tt__Direction(soap, p, "tt:Direction", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__Direction * SOAP_FMAC4 soap_get_tt__Direction(struct soap*, enum tt__Direction *, const char*, const char*);

inline int soap_read_tt__Direction(struct soap *soap, enum tt__Direction *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_tt__Direction(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__PropertyOperation_DEFINED
#define SOAP_TYPE_tt__PropertyOperation_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__PropertyOperation(struct soap*, enum tt__PropertyOperation *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PropertyOperation(struct soap*, const char*, int, const enum tt__PropertyOperation *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__PropertyOperation2s(struct soap*, enum tt__PropertyOperation);
SOAP_FMAC3 enum tt__PropertyOperation * SOAP_FMAC4 soap_in_tt__PropertyOperation(struct soap*, const char*, enum tt__PropertyOperation *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__PropertyOperation(struct soap*, const char*, enum tt__PropertyOperation *);

inline enum tt__PropertyOperation * soap_new_tt__PropertyOperation(struct soap *soap, int n = -1)
{
	return static_cast<enum tt__PropertyOperation *>(soap_malloc(soap, (n < 0 ? 1 : n) * sizeof(enum tt__PropertyOperation)));
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__PropertyOperation(struct soap*, const enum tt__PropertyOperation *, const char*, const char*);

inline int soap_write_tt__PropertyOperation(struct soap *soap, enum tt__PropertyOperation const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_tt__PropertyOperation(soap, p, "tt:PropertyOperation", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__PropertyOperation * SOAP_FMAC4 soap_get_tt__PropertyOperation(struct soap*, enum tt__PropertyOperation *, const char*, const char*);

inline int soap_read_tt__PropertyOperation(struct soap *soap, enum tt__PropertyOperation *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_tt__PropertyOperation(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__DefoggingMode_DEFINED
#define SOAP_TYPE_tt__DefoggingMode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__DefoggingMode(struct soap*, enum tt__DefoggingMode *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__DefoggingMode(struct soap*, const char*, int, const enum tt__DefoggingMode *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__DefoggingMode2s(struct soap*, enum tt__DefoggingMode);
SOAP_FMAC3 enum tt__DefoggingMode * SOAP_FMAC4 soap_in_tt__DefoggingMode(struct soap*, const char*, enum tt__DefoggingMode *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__DefoggingMode(struct soap*, const char*, enum tt__DefoggingMode *);

inline enum tt__DefoggingMode * soap_new_tt__DefoggingMode(struct soap *soap, int n = -1)
{
	return static_cast<enum tt__DefoggingMode *>(soap_malloc(soap, (n < 0 ? 1 : n) * sizeof(enum tt__DefoggingMode)));
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__DefoggingMode(struct soap*, const enum tt__DefoggingMode *, const char*, const char*);

inline int soap_write_tt__DefoggingMode(struct soap *soap, enum tt__DefoggingMode const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_tt__DefoggingMode(soap, p, "tt:DefoggingMode", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__DefoggingMode * SOAP_FMAC4 soap_get_tt__DefoggingMode(struct soap*, enum tt__DefoggingMode *, const char*, const char*);

inline int soap_read_tt__DefoggingMode(struct soap *soap, enum tt__DefoggingMode *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_tt__DefoggingMode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__ToneCompensationMode_DEFINED
#define SOAP_TYPE_tt__ToneCompensationMode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__ToneCompensationMode(struct soap*, enum tt__ToneCompensationMode *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ToneCompensationMode(struct soap*, const char*, int, const enum tt__ToneCompensationMode *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__ToneCompensationMode2s(struct soap*, enum tt__ToneCompensationMode);
SOAP_FMAC3 enum tt__ToneCompensationMode * SOAP_FMAC4 soap_in_tt__ToneCompensationMode(struct soap*, const char*, enum tt__ToneCompensationMode *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__ToneCompensationMode(struct soap*, const char*, enum tt__ToneCompensationMode *);

inline enum tt__ToneCompensationMode * soap_new_tt__ToneCompensationMode(struct soap *soap, int n = -1)
{
	return static_cast<enum tt__ToneCompensationMode *>(soap_malloc(soap, (n < 0 ? 1 : n) * sizeof(enum tt__ToneCompensationMode)));
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__ToneCompensationMode(struct soap*, const enum tt__ToneCompensationMode *, const char*, const char*);

inline int soap_write_tt__ToneCompensationMode(struct soap *soap, enum tt__ToneCompensationMode const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_tt__ToneCompensationMode(soap, p, "tt:ToneCompensationMode", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__ToneCompensationMode * SOAP_FMAC4 soap_get_tt__ToneCompensationMode(struct soap*, enum tt__ToneCompensationMode *, const char*, const char*);

inline int soap_read_tt__ToneCompensationMode(struct soap *soap, enum tt__ToneCompensationMode *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_tt__ToneCompensationMode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__IrCutFilterAutoBoundaryType_DEFINED
#define SOAP_TYPE_tt__IrCutFilterAutoBoundaryType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__IrCutFilterAutoBoundaryType(struct soap*, enum tt__IrCutFilterAutoBoundaryType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IrCutFilterAutoBoundaryType(struct soap*, const char*, int, const enum tt__IrCutFilterAutoBoundaryType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__IrCutFilterAutoBoundaryType2s(struct soap*, enum tt__IrCutFilterAutoBoundaryType);
SOAP_FMAC3 enum tt__IrCutFilterAutoBoundaryType * SOAP_FMAC4 soap_in_tt__IrCutFilterAutoBoundaryType(struct soap*, const char*, enum tt__IrCutFilterAutoBoundaryType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__IrCutFilterAutoBoundaryType(struct soap*, const char*, enum tt__IrCutFilterAutoBoundaryType *);

inline enum tt__IrCutFilterAutoBoundaryType * soap_new_tt__IrCutFilterAutoBoundaryType(struct soap *soap, int n = -1)
{
	return static_cast<enum tt__IrCutFilterAutoBoundaryType *>(soap_malloc(soap, (n < 0 ? 1 : n) * sizeof(enum tt__IrCutFilterAutoBoundaryType)));
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__IrCutFilterAutoBoundaryType(struct soap*, const enum tt__IrCutFilterAutoBoundaryType *, const char*, const char*);

inline int soap_write_tt__IrCutFilterAutoBoundaryType(struct soap *soap, enum tt__IrCutFilterAutoBoundaryType const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_tt__IrCutFilterAutoBoundaryType(soap, p, "tt:IrCutFilterAutoBoundaryType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__IrCutFilterAutoBoundaryType * SOAP_FMAC4 soap_get_tt__IrCutFilterAutoBoundaryType(struct soap*, enum tt__IrCutFilterAutoBoundaryType *, const char*, const char*);

inline int soap_read_tt__IrCutFilterAutoBoundaryType(struct soap *soap, enum tt__IrCutFilterAutoBoundaryType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_tt__IrCutFilterAutoBoundaryType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__ImageStabilizationMode_DEFINED
#define SOAP_TYPE_tt__ImageStabilizationMode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__ImageStabilizationMode(struct soap*, enum tt__ImageStabilizationMode *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ImageStabilizationMode(struct soap*, const char*, int, const enum tt__ImageStabilizationMode *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__ImageStabilizationMode2s(struct soap*, enum tt__ImageStabilizationMode);
SOAP_FMAC3 enum tt__ImageStabilizationMode * SOAP_FMAC4 soap_in_tt__ImageStabilizationMode(struct soap*, const char*, enum tt__ImageStabilizationMode *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__ImageStabilizationMode(struct soap*, const char*, enum tt__ImageStabilizationMode *);

inline enum tt__ImageStabilizationMode * soap_new_tt__ImageStabilizationMode(struct soap *soap, int n = -1)
{
	return static_cast<enum tt__ImageStabilizationMode *>(soap_malloc(soap, (n < 0 ? 1 : n) * sizeof(enum tt__ImageStabilizationMode)));
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__ImageStabilizationMode(struct soap*, const enum tt__ImageStabilizationMode *, const char*, const char*);

inline int soap_write_tt__ImageStabilizationMode(struct soap *soap, enum tt__ImageStabilizationMode const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_tt__ImageStabilizationMode(soap, p, "tt:ImageStabilizationMode", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__ImageStabilizationMode * SOAP_FMAC4 soap_get_tt__ImageStabilizationMode(struct soap*, enum tt__ImageStabilizationMode *, const char*, const char*);

inline int soap_read_tt__ImageStabilizationMode(struct soap *soap, enum tt__ImageStabilizationMode *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_tt__ImageStabilizationMode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__IrCutFilterMode_DEFINED
#define SOAP_TYPE_tt__IrCutFilterMode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__IrCutFilterMode(struct soap*, enum tt__IrCutFilterMode *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IrCutFilterMode(struct soap*, const char*, int, const enum tt__IrCutFilterMode *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__IrCutFilterMode2s(struct soap*, enum tt__IrCutFilterMode);
SOAP_FMAC3 enum tt__IrCutFilterMode * SOAP_FMAC4 soap_in_tt__IrCutFilterMode(struct soap*, const char*, enum tt__IrCutFilterMode *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__IrCutFilterMode(struct soap*, const char*, enum tt__IrCutFilterMode *);

inline enum tt__IrCutFilterMode * soap_new_tt__IrCutFilterMode(struct soap *soap, int n = -1)
{
	return static_cast<enum tt__IrCutFilterMode *>(soap_malloc(soap, (n < 0 ? 1 : n) * sizeof(enum tt__IrCutFilterMode)));
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__IrCutFilterMode(struct soap*, const enum tt__IrCutFilterMode *, const char*, const char*);

inline int soap_write_tt__IrCutFilterMode(struct soap *soap, enum tt__IrCutFilterMode const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_tt__IrCutFilterMode(soap, p, "tt:IrCutFilterMode", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__IrCutFilterMode * SOAP_FMAC4 soap_get_tt__IrCutFilterMode(struct soap*, enum tt__IrCutFilterMode *, const char*, const char*);

inline int soap_read_tt__IrCutFilterMode(struct soap *soap, enum tt__IrCutFilterMode *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_tt__IrCutFilterMode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__WhiteBalanceMode_DEFINED
#define SOAP_TYPE_tt__WhiteBalanceMode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__WhiteBalanceMode(struct soap*, enum tt__WhiteBalanceMode *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__WhiteBalanceMode(struct soap*, const char*, int, const enum tt__WhiteBalanceMode *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__WhiteBalanceMode2s(struct soap*, enum tt__WhiteBalanceMode);
SOAP_FMAC3 enum tt__WhiteBalanceMode * SOAP_FMAC4 soap_in_tt__WhiteBalanceMode(struct soap*, const char*, enum tt__WhiteBalanceMode *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__WhiteBalanceMode(struct soap*, const char*, enum tt__WhiteBalanceMode *);

inline enum tt__WhiteBalanceMode * soap_new_tt__WhiteBalanceMode(struct soap *soap, int n = -1)
{
	return static_cast<enum tt__WhiteBalanceMode *>(soap_malloc(soap, (n < 0 ? 1 : n) * sizeof(enum tt__WhiteBalanceMode)));
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__WhiteBalanceMode(struct soap*, const enum tt__WhiteBalanceMode *, const char*, const char*);

inline int soap_write_tt__WhiteBalanceMode(struct soap *soap, enum tt__WhiteBalanceMode const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_tt__WhiteBalanceMode(soap, p, "tt:WhiteBalanceMode", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__WhiteBalanceMode * SOAP_FMAC4 soap_get_tt__WhiteBalanceMode(struct soap*, enum tt__WhiteBalanceMode *, const char*, const char*);

inline int soap_read_tt__WhiteBalanceMode(struct soap *soap, enum tt__WhiteBalanceMode *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_tt__WhiteBalanceMode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__Enabled_DEFINED
#define SOAP_TYPE_tt__Enabled_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__Enabled(struct soap*, enum tt__Enabled *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Enabled(struct soap*, const char*, int, const enum tt__Enabled *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__Enabled2s(struct soap*, enum tt__Enabled);
SOAP_FMAC3 enum tt__Enabled * SOAP_FMAC4 soap_in_tt__Enabled(struct soap*, const char*, enum tt__Enabled *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__Enabled(struct soap*, const char*, enum tt__Enabled *);

inline enum tt__Enabled * soap_new_tt__Enabled(struct soap *soap, int n = -1)
{
	return static_cast<enum tt__Enabled *>(soap_malloc(soap, (n < 0 ? 1 : n) * sizeof(enum tt__Enabled)));
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__Enabled(struct soap*, const enum tt__Enabled *, const char*, const char*);

inline int soap_write_tt__Enabled(struct soap *soap, enum tt__Enabled const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_tt__Enabled(soap, p, "tt:Enabled", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__Enabled * SOAP_FMAC4 soap_get_tt__Enabled(struct soap*, enum tt__Enabled *, const char*, const char*);

inline int soap_read_tt__Enabled(struct soap *soap, enum tt__Enabled *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_tt__Enabled(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__ExposureMode_DEFINED
#define SOAP_TYPE_tt__ExposureMode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__ExposureMode(struct soap*, enum tt__ExposureMode *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ExposureMode(struct soap*, const char*, int, const enum tt__ExposureMode *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__ExposureMode2s(struct soap*, enum tt__ExposureMode);
SOAP_FMAC3 enum tt__ExposureMode * SOAP_FMAC4 soap_in_tt__ExposureMode(struct soap*, const char*, enum tt__ExposureMode *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__ExposureMode(struct soap*, const char*, enum tt__ExposureMode *);

inline enum tt__ExposureMode * soap_new_tt__ExposureMode(struct soap *soap, int n = -1)
{
	return static_cast<enum tt__ExposureMode *>(soap_malloc(soap, (n < 0 ? 1 : n) * sizeof(enum tt__ExposureMode)));
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__ExposureMode(struct soap*, const enum tt__ExposureMode *, const char*, const char*);

inline int soap_write_tt__ExposureMode(struct soap *soap, enum tt__ExposureMode const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_tt__ExposureMode(soap, p, "tt:ExposureMode", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__ExposureMode * SOAP_FMAC4 soap_get_tt__ExposureMode(struct soap*, enum tt__ExposureMode *, const char*, const char*);

inline int soap_read_tt__ExposureMode(struct soap *soap, enum tt__ExposureMode *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_tt__ExposureMode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__ExposurePriority_DEFINED
#define SOAP_TYPE_tt__ExposurePriority_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__ExposurePriority(struct soap*, enum tt__ExposurePriority *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ExposurePriority(struct soap*, const char*, int, const enum tt__ExposurePriority *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__ExposurePriority2s(struct soap*, enum tt__ExposurePriority);
SOAP_FMAC3 enum tt__ExposurePriority * SOAP_FMAC4 soap_in_tt__ExposurePriority(struct soap*, const char*, enum tt__ExposurePriority *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__ExposurePriority(struct soap*, const char*, enum tt__ExposurePriority *);

inline enum tt__ExposurePriority * soap_new_tt__ExposurePriority(struct soap *soap, int n = -1)
{
	return static_cast<enum tt__ExposurePriority *>(soap_malloc(soap, (n < 0 ? 1 : n) * sizeof(enum tt__ExposurePriority)));
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__ExposurePriority(struct soap*, const enum tt__ExposurePriority *, const char*, const char*);

inline int soap_write_tt__ExposurePriority(struct soap *soap, enum tt__ExposurePriority const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_tt__ExposurePriority(soap, p, "tt:ExposurePriority", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__ExposurePriority * SOAP_FMAC4 soap_get_tt__ExposurePriority(struct soap*, enum tt__ExposurePriority *, const char*, const char*);

inline int soap_read_tt__ExposurePriority(struct soap *soap, enum tt__ExposurePriority *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_tt__ExposurePriority(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__BacklightCompensationMode_DEFINED
#define SOAP_TYPE_tt__BacklightCompensationMode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__BacklightCompensationMode(struct soap*, enum tt__BacklightCompensationMode *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__BacklightCompensationMode(struct soap*, const char*, int, const enum tt__BacklightCompensationMode *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__BacklightCompensationMode2s(struct soap*, enum tt__BacklightCompensationMode);
SOAP_FMAC3 enum tt__BacklightCompensationMode * SOAP_FMAC4 soap_in_tt__BacklightCompensationMode(struct soap*, const char*, enum tt__BacklightCompensationMode *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__BacklightCompensationMode(struct soap*, const char*, enum tt__BacklightCompensationMode *);

inline enum tt__BacklightCompensationMode * soap_new_tt__BacklightCompensationMode(struct soap *soap, int n = -1)
{
	return static_cast<enum tt__BacklightCompensationMode *>(soap_malloc(soap, (n < 0 ? 1 : n) * sizeof(enum tt__BacklightCompensationMode)));
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__BacklightCompensationMode(struct soap*, const enum tt__BacklightCompensationMode *, const char*, const char*);

inline int soap_write_tt__BacklightCompensationMode(struct soap *soap, enum tt__BacklightCompensationMode const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_tt__BacklightCompensationMode(soap, p, "tt:BacklightCompensationMode", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__BacklightCompensationMode * SOAP_FMAC4 soap_get_tt__BacklightCompensationMode(struct soap*, enum tt__BacklightCompensationMode *, const char*, const char*);

inline int soap_read_tt__BacklightCompensationMode(struct soap *soap, enum tt__BacklightCompensationMode *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_tt__BacklightCompensationMode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__WideDynamicMode_DEFINED
#define SOAP_TYPE_tt__WideDynamicMode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__WideDynamicMode(struct soap*, enum tt__WideDynamicMode *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__WideDynamicMode(struct soap*, const char*, int, const enum tt__WideDynamicMode *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__WideDynamicMode2s(struct soap*, enum tt__WideDynamicMode);
SOAP_FMAC3 enum tt__WideDynamicMode * SOAP_FMAC4 soap_in_tt__WideDynamicMode(struct soap*, const char*, enum tt__WideDynamicMode *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__WideDynamicMode(struct soap*, const char*, enum tt__WideDynamicMode *);

inline enum tt__WideDynamicMode * soap_new_tt__WideDynamicMode(struct soap *soap, int n = -1)
{
	return static_cast<enum tt__WideDynamicMode *>(soap_malloc(soap, (n < 0 ? 1 : n) * sizeof(enum tt__WideDynamicMode)));
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__WideDynamicMode(struct soap*, const enum tt__WideDynamicMode *, const char*, const char*);

inline int soap_write_tt__WideDynamicMode(struct soap *soap, enum tt__WideDynamicMode const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_tt__WideDynamicMode(soap, p, "tt:WideDynamicMode", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__WideDynamicMode * SOAP_FMAC4 soap_get_tt__WideDynamicMode(struct soap*, enum tt__WideDynamicMode *, const char*, const char*);

inline int soap_read_tt__WideDynamicMode(struct soap *soap, enum tt__WideDynamicMode *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_tt__WideDynamicMode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__AutoFocusMode_DEFINED
#define SOAP_TYPE_tt__AutoFocusMode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__AutoFocusMode(struct soap*, enum tt__AutoFocusMode *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AutoFocusMode(struct soap*, const char*, int, const enum tt__AutoFocusMode *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__AutoFocusMode2s(struct soap*, enum tt__AutoFocusMode);
SOAP_FMAC3 enum tt__AutoFocusMode * SOAP_FMAC4 soap_in_tt__AutoFocusMode(struct soap*, const char*, enum tt__AutoFocusMode *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__AutoFocusMode(struct soap*, const char*, enum tt__AutoFocusMode *);

inline enum tt__AutoFocusMode * soap_new_tt__AutoFocusMode(struct soap *soap, int n = -1)
{
	return static_cast<enum tt__AutoFocusMode *>(soap_malloc(soap, (n < 0 ? 1 : n) * sizeof(enum tt__AutoFocusMode)));
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__AutoFocusMode(struct soap*, const enum tt__AutoFocusMode *, const char*, const char*);

inline int soap_write_tt__AutoFocusMode(struct soap *soap, enum tt__AutoFocusMode const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_tt__AutoFocusMode(soap, p, "tt:AutoFocusMode", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__AutoFocusMode * SOAP_FMAC4 soap_get_tt__AutoFocusMode(struct soap*, enum tt__AutoFocusMode *, const char*, const char*);

inline int soap_read_tt__AutoFocusMode(struct soap *soap, enum tt__AutoFocusMode *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_tt__AutoFocusMode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourOperation_DEFINED
#define SOAP_TYPE_tt__PTZPresetTourOperation_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__PTZPresetTourOperation(struct soap*, enum tt__PTZPresetTourOperation *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourOperation(struct soap*, const char*, int, const enum tt__PTZPresetTourOperation *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__PTZPresetTourOperation2s(struct soap*, enum tt__PTZPresetTourOperation);
SOAP_FMAC3 enum tt__PTZPresetTourOperation * SOAP_FMAC4 soap_in_tt__PTZPresetTourOperation(struct soap*, const char*, enum tt__PTZPresetTourOperation *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__PTZPresetTourOperation(struct soap*, const char*, enum tt__PTZPresetTourOperation *);

inline enum tt__PTZPresetTourOperation * soap_new_tt__PTZPresetTourOperation(struct soap *soap, int n = -1)
{
	return static_cast<enum tt__PTZPresetTourOperation *>(soap_malloc(soap, (n < 0 ? 1 : n) * sizeof(enum tt__PTZPresetTourOperation)));
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__PTZPresetTourOperation(struct soap*, const enum tt__PTZPresetTourOperation *, const char*, const char*);

inline int soap_write_tt__PTZPresetTourOperation(struct soap *soap, enum tt__PTZPresetTourOperation const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_tt__PTZPresetTourOperation(soap, p, "tt:PTZPresetTourOperation", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__PTZPresetTourOperation * SOAP_FMAC4 soap_get_tt__PTZPresetTourOperation(struct soap*, enum tt__PTZPresetTourOperation *, const char*, const char*);

inline int soap_read_tt__PTZPresetTourOperation(struct soap *soap, enum tt__PTZPresetTourOperation *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_tt__PTZPresetTourOperation(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourDirection_DEFINED
#define SOAP_TYPE_tt__PTZPresetTourDirection_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__PTZPresetTourDirection(struct soap*, enum tt__PTZPresetTourDirection *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourDirection(struct soap*, const char*, int, const enum tt__PTZPresetTourDirection *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__PTZPresetTourDirection2s(struct soap*, enum tt__PTZPresetTourDirection);
SOAP_FMAC3 enum tt__PTZPresetTourDirection * SOAP_FMAC4 soap_in_tt__PTZPresetTourDirection(struct soap*, const char*, enum tt__PTZPresetTourDirection *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__PTZPresetTourDirection(struct soap*, const char*, enum tt__PTZPresetTourDirection *);

inline enum tt__PTZPresetTourDirection * soap_new_tt__PTZPresetTourDirection(struct soap *soap, int n = -1)
{
	return static_cast<enum tt__PTZPresetTourDirection *>(soap_malloc(soap, (n < 0 ? 1 : n) * sizeof(enum tt__PTZPresetTourDirection)));
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__PTZPresetTourDirection(struct soap*, const enum tt__PTZPresetTourDirection *, const char*, const char*);

inline int soap_write_tt__PTZPresetTourDirection(struct soap *soap, enum tt__PTZPresetTourDirection const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_tt__PTZPresetTourDirection(soap, p, "tt:PTZPresetTourDirection", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__PTZPresetTourDirection * SOAP_FMAC4 soap_get_tt__PTZPresetTourDirection(struct soap*, enum tt__PTZPresetTourDirection *, const char*, const char*);

inline int soap_read_tt__PTZPresetTourDirection(struct soap *soap, enum tt__PTZPresetTourDirection *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_tt__PTZPresetTourDirection(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourState_DEFINED
#define SOAP_TYPE_tt__PTZPresetTourState_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__PTZPresetTourState(struct soap*, enum tt__PTZPresetTourState *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourState(struct soap*, const char*, int, const enum tt__PTZPresetTourState *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__PTZPresetTourState2s(struct soap*, enum tt__PTZPresetTourState);
SOAP_FMAC3 enum tt__PTZPresetTourState * SOAP_FMAC4 soap_in_tt__PTZPresetTourState(struct soap*, const char*, enum tt__PTZPresetTourState *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__PTZPresetTourState(struct soap*, const char*, enum tt__PTZPresetTourState *);

inline enum tt__PTZPresetTourState * soap_new_tt__PTZPresetTourState(struct soap *soap, int n = -1)
{
	return static_cast<enum tt__PTZPresetTourState *>(soap_malloc(soap, (n < 0 ? 1 : n) * sizeof(enum tt__PTZPresetTourState)));
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__PTZPresetTourState(struct soap*, const enum tt__PTZPresetTourState *, const char*, const char*);

inline int soap_write_tt__PTZPresetTourState(struct soap *soap, enum tt__PTZPresetTourState const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_tt__PTZPresetTourState(soap, p, "tt:PTZPresetTourState", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__PTZPresetTourState * SOAP_FMAC4 soap_get_tt__PTZPresetTourState(struct soap*, enum tt__PTZPresetTourState *, const char*, const char*);

inline int soap_read_tt__PTZPresetTourState(struct soap *soap, enum tt__PTZPresetTourState *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_tt__PTZPresetTourState(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__MoveStatus_DEFINED
#define SOAP_TYPE_tt__MoveStatus_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__MoveStatus(struct soap*, enum tt__MoveStatus *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__MoveStatus(struct soap*, const char*, int, const enum tt__MoveStatus *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__MoveStatus2s(struct soap*, enum tt__MoveStatus);
SOAP_FMAC3 enum tt__MoveStatus * SOAP_FMAC4 soap_in_tt__MoveStatus(struct soap*, const char*, enum tt__MoveStatus *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__MoveStatus(struct soap*, const char*, enum tt__MoveStatus *);

inline enum tt__MoveStatus * soap_new_tt__MoveStatus(struct soap *soap, int n = -1)
{
	return static_cast<enum tt__MoveStatus *>(soap_malloc(soap, (n < 0 ? 1 : n) * sizeof(enum tt__MoveStatus)));
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__MoveStatus(struct soap*, const enum tt__MoveStatus *, const char*, const char*);

inline int soap_write_tt__MoveStatus(struct soap *soap, enum tt__MoveStatus const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_tt__MoveStatus(soap, p, "tt:MoveStatus", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__MoveStatus * SOAP_FMAC4 soap_get_tt__MoveStatus(struct soap*, enum tt__MoveStatus *, const char*, const char*);

inline int soap_read_tt__MoveStatus(struct soap *soap, enum tt__MoveStatus *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_tt__MoveStatus(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__ReverseMode_DEFINED
#define SOAP_TYPE_tt__ReverseMode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__ReverseMode(struct soap*, enum tt__ReverseMode *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ReverseMode(struct soap*, const char*, int, const enum tt__ReverseMode *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__ReverseMode2s(struct soap*, enum tt__ReverseMode);
SOAP_FMAC3 enum tt__ReverseMode * SOAP_FMAC4 soap_in_tt__ReverseMode(struct soap*, const char*, enum tt__ReverseMode *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__ReverseMode(struct soap*, const char*, enum tt__ReverseMode *);

inline enum tt__ReverseMode * soap_new_tt__ReverseMode(struct soap *soap, int n = -1)
{
	return static_cast<enum tt__ReverseMode *>(soap_malloc(soap, (n < 0 ? 1 : n) * sizeof(enum tt__ReverseMode)));
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__ReverseMode(struct soap*, const enum tt__ReverseMode *, const char*, const char*);

inline int soap_write_tt__ReverseMode(struct soap *soap, enum tt__ReverseMode const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_tt__ReverseMode(soap, p, "tt:ReverseMode", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__ReverseMode * SOAP_FMAC4 soap_get_tt__ReverseMode(struct soap*, enum tt__ReverseMode *, const char*, const char*);

inline int soap_read_tt__ReverseMode(struct soap *soap, enum tt__ReverseMode *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_tt__ReverseMode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__EFlipMode_DEFINED
#define SOAP_TYPE_tt__EFlipMode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__EFlipMode(struct soap*, enum tt__EFlipMode *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__EFlipMode(struct soap*, const char*, int, const enum tt__EFlipMode *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__EFlipMode2s(struct soap*, enum tt__EFlipMode);
SOAP_FMAC3 enum tt__EFlipMode * SOAP_FMAC4 soap_in_tt__EFlipMode(struct soap*, const char*, enum tt__EFlipMode *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__EFlipMode(struct soap*, const char*, enum tt__EFlipMode *);

inline enum tt__EFlipMode * soap_new_tt__EFlipMode(struct soap *soap, int n = -1)
{
	return static_cast<enum tt__EFlipMode *>(soap_malloc(soap, (n < 0 ? 1 : n) * sizeof(enum tt__EFlipMode)));
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__EFlipMode(struct soap*, const enum tt__EFlipMode *, const char*, const char*);

inline int soap_write_tt__EFlipMode(struct soap *soap, enum tt__EFlipMode const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_tt__EFlipMode(soap, p, "tt:EFlipMode", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__EFlipMode * SOAP_FMAC4 soap_get_tt__EFlipMode(struct soap*, enum tt__EFlipMode *, const char*, const char*);

inline int soap_read_tt__EFlipMode(struct soap *soap, enum tt__EFlipMode *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_tt__EFlipMode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__DigitalIdleState_DEFINED
#define SOAP_TYPE_tt__DigitalIdleState_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__DigitalIdleState(struct soap*, enum tt__DigitalIdleState *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__DigitalIdleState(struct soap*, const char*, int, const enum tt__DigitalIdleState *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__DigitalIdleState2s(struct soap*, enum tt__DigitalIdleState);
SOAP_FMAC3 enum tt__DigitalIdleState * SOAP_FMAC4 soap_in_tt__DigitalIdleState(struct soap*, const char*, enum tt__DigitalIdleState *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__DigitalIdleState(struct soap*, const char*, enum tt__DigitalIdleState *);

inline enum tt__DigitalIdleState * soap_new_tt__DigitalIdleState(struct soap *soap, int n = -1)
{
	return static_cast<enum tt__DigitalIdleState *>(soap_malloc(soap, (n < 0 ? 1 : n) * sizeof(enum tt__DigitalIdleState)));
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__DigitalIdleState(struct soap*, const enum tt__DigitalIdleState *, const char*, const char*);

inline int soap_write_tt__DigitalIdleState(struct soap *soap, enum tt__DigitalIdleState const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_tt__DigitalIdleState(soap, p, "tt:DigitalIdleState", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__DigitalIdleState * SOAP_FMAC4 soap_get_tt__DigitalIdleState(struct soap*, enum tt__DigitalIdleState *, const char*, const char*);

inline int soap_read_tt__DigitalIdleState(struct soap *soap, enum tt__DigitalIdleState *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_tt__DigitalIdleState(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__RelayMode_DEFINED
#define SOAP_TYPE_tt__RelayMode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__RelayMode(struct soap*, enum tt__RelayMode *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RelayMode(struct soap*, const char*, int, const enum tt__RelayMode *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__RelayMode2s(struct soap*, enum tt__RelayMode);
SOAP_FMAC3 enum tt__RelayMode * SOAP_FMAC4 soap_in_tt__RelayMode(struct soap*, const char*, enum tt__RelayMode *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__RelayMode(struct soap*, const char*, enum tt__RelayMode *);

inline enum tt__RelayMode * soap_new_tt__RelayMode(struct soap *soap, int n = -1)
{
	return static_cast<enum tt__RelayMode *>(soap_malloc(soap, (n < 0 ? 1 : n) * sizeof(enum tt__RelayMode)));
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__RelayMode(struct soap*, const enum tt__RelayMode *, const char*, const char*);

inline int soap_write_tt__RelayMode(struct soap *soap, enum tt__RelayMode const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_tt__RelayMode(soap, p, "tt:RelayMode", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__RelayMode * SOAP_FMAC4 soap_get_tt__RelayMode(struct soap*, enum tt__RelayMode *, const char*, const char*);

inline int soap_read_tt__RelayMode(struct soap *soap, enum tt__RelayMode *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_tt__RelayMode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__RelayIdleState_DEFINED
#define SOAP_TYPE_tt__RelayIdleState_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__RelayIdleState(struct soap*, enum tt__RelayIdleState *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RelayIdleState(struct soap*, const char*, int, const enum tt__RelayIdleState *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__RelayIdleState2s(struct soap*, enum tt__RelayIdleState);
SOAP_FMAC3 enum tt__RelayIdleState * SOAP_FMAC4 soap_in_tt__RelayIdleState(struct soap*, const char*, enum tt__RelayIdleState *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__RelayIdleState(struct soap*, const char*, enum tt__RelayIdleState *);

inline enum tt__RelayIdleState * soap_new_tt__RelayIdleState(struct soap *soap, int n = -1)
{
	return static_cast<enum tt__RelayIdleState *>(soap_malloc(soap, (n < 0 ? 1 : n) * sizeof(enum tt__RelayIdleState)));
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__RelayIdleState(struct soap*, const enum tt__RelayIdleState *, const char*, const char*);

inline int soap_write_tt__RelayIdleState(struct soap *soap, enum tt__RelayIdleState const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_tt__RelayIdleState(soap, p, "tt:RelayIdleState", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__RelayIdleState * SOAP_FMAC4 soap_get_tt__RelayIdleState(struct soap*, enum tt__RelayIdleState *, const char*, const char*);

inline int soap_read_tt__RelayIdleState(struct soap *soap, enum tt__RelayIdleState *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_tt__RelayIdleState(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__RelayLogicalState_DEFINED
#define SOAP_TYPE_tt__RelayLogicalState_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__RelayLogicalState(struct soap*, enum tt__RelayLogicalState *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RelayLogicalState(struct soap*, const char*, int, const enum tt__RelayLogicalState *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__RelayLogicalState2s(struct soap*, enum tt__RelayLogicalState);
SOAP_FMAC3 enum tt__RelayLogicalState * SOAP_FMAC4 soap_in_tt__RelayLogicalState(struct soap*, const char*, enum tt__RelayLogicalState *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__RelayLogicalState(struct soap*, const char*, enum tt__RelayLogicalState *);

inline enum tt__RelayLogicalState * soap_new_tt__RelayLogicalState(struct soap *soap, int n = -1)
{
	return static_cast<enum tt__RelayLogicalState *>(soap_malloc(soap, (n < 0 ? 1 : n) * sizeof(enum tt__RelayLogicalState)));
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__RelayLogicalState(struct soap*, const enum tt__RelayLogicalState *, const char*, const char*);

inline int soap_write_tt__RelayLogicalState(struct soap *soap, enum tt__RelayLogicalState const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_tt__RelayLogicalState(soap, p, "tt:RelayLogicalState", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__RelayLogicalState * SOAP_FMAC4 soap_get_tt__RelayLogicalState(struct soap*, enum tt__RelayLogicalState *, const char*, const char*);

inline int soap_read_tt__RelayLogicalState(struct soap *soap, enum tt__RelayLogicalState *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_tt__RelayLogicalState(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__UserLevel_DEFINED
#define SOAP_TYPE_tt__UserLevel_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__UserLevel(struct soap*, enum tt__UserLevel *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__UserLevel(struct soap*, const char*, int, const enum tt__UserLevel *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__UserLevel2s(struct soap*, enum tt__UserLevel);
SOAP_FMAC3 enum tt__UserLevel * SOAP_FMAC4 soap_in_tt__UserLevel(struct soap*, const char*, enum tt__UserLevel *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__UserLevel(struct soap*, const char*, enum tt__UserLevel *);

inline enum tt__UserLevel * soap_new_tt__UserLevel(struct soap *soap, int n = -1)
{
	return static_cast<enum tt__UserLevel *>(soap_malloc(soap, (n < 0 ? 1 : n) * sizeof(enum tt__UserLevel)));
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__UserLevel(struct soap*, const enum tt__UserLevel *, const char*, const char*);

inline int soap_write_tt__UserLevel(struct soap *soap, enum tt__UserLevel const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_tt__UserLevel(soap, p, "tt:UserLevel", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__UserLevel * SOAP_FMAC4 soap_get_tt__UserLevel(struct soap*, enum tt__UserLevel *, const char*, const char*);

inline int soap_read_tt__UserLevel(struct soap *soap, enum tt__UserLevel *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_tt__UserLevel(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__SetDateTimeType_DEFINED
#define SOAP_TYPE_tt__SetDateTimeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__SetDateTimeType(struct soap*, enum tt__SetDateTimeType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__SetDateTimeType(struct soap*, const char*, int, const enum tt__SetDateTimeType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__SetDateTimeType2s(struct soap*, enum tt__SetDateTimeType);
SOAP_FMAC3 enum tt__SetDateTimeType * SOAP_FMAC4 soap_in_tt__SetDateTimeType(struct soap*, const char*, enum tt__SetDateTimeType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__SetDateTimeType(struct soap*, const char*, enum tt__SetDateTimeType *);

inline enum tt__SetDateTimeType * soap_new_tt__SetDateTimeType(struct soap *soap, int n = -1)
{
	return static_cast<enum tt__SetDateTimeType *>(soap_malloc(soap, (n < 0 ? 1 : n) * sizeof(enum tt__SetDateTimeType)));
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__SetDateTimeType(struct soap*, const enum tt__SetDateTimeType *, const char*, const char*);

inline int soap_write_tt__SetDateTimeType(struct soap *soap, enum tt__SetDateTimeType const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_tt__SetDateTimeType(soap, p, "tt:SetDateTimeType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__SetDateTimeType * SOAP_FMAC4 soap_get_tt__SetDateTimeType(struct soap*, enum tt__SetDateTimeType *, const char*, const char*);

inline int soap_read_tt__SetDateTimeType(struct soap *soap, enum tt__SetDateTimeType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_tt__SetDateTimeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__FactoryDefaultType_DEFINED
#define SOAP_TYPE_tt__FactoryDefaultType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__FactoryDefaultType(struct soap*, enum tt__FactoryDefaultType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__FactoryDefaultType(struct soap*, const char*, int, const enum tt__FactoryDefaultType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__FactoryDefaultType2s(struct soap*, enum tt__FactoryDefaultType);
SOAP_FMAC3 enum tt__FactoryDefaultType * SOAP_FMAC4 soap_in_tt__FactoryDefaultType(struct soap*, const char*, enum tt__FactoryDefaultType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__FactoryDefaultType(struct soap*, const char*, enum tt__FactoryDefaultType *);

inline enum tt__FactoryDefaultType * soap_new_tt__FactoryDefaultType(struct soap *soap, int n = -1)
{
	return static_cast<enum tt__FactoryDefaultType *>(soap_malloc(soap, (n < 0 ? 1 : n) * sizeof(enum tt__FactoryDefaultType)));
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__FactoryDefaultType(struct soap*, const enum tt__FactoryDefaultType *, const char*, const char*);

inline int soap_write_tt__FactoryDefaultType(struct soap *soap, enum tt__FactoryDefaultType const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_tt__FactoryDefaultType(soap, p, "tt:FactoryDefaultType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__FactoryDefaultType * SOAP_FMAC4 soap_get_tt__FactoryDefaultType(struct soap*, enum tt__FactoryDefaultType *, const char*, const char*);

inline int soap_read_tt__FactoryDefaultType(struct soap *soap, enum tt__FactoryDefaultType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_tt__FactoryDefaultType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__SystemLogType_DEFINED
#define SOAP_TYPE_tt__SystemLogType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__SystemLogType(struct soap*, enum tt__SystemLogType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__SystemLogType(struct soap*, const char*, int, const enum tt__SystemLogType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__SystemLogType2s(struct soap*, enum tt__SystemLogType);
SOAP_FMAC3 enum tt__SystemLogType * SOAP_FMAC4 soap_in_tt__SystemLogType(struct soap*, const char*, enum tt__SystemLogType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__SystemLogType(struct soap*, const char*, enum tt__SystemLogType *);

inline enum tt__SystemLogType * soap_new_tt__SystemLogType(struct soap *soap, int n = -1)
{
	return static_cast<enum tt__SystemLogType *>(soap_malloc(soap, (n < 0 ? 1 : n) * sizeof(enum tt__SystemLogType)));
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__SystemLogType(struct soap*, const enum tt__SystemLogType *, const char*, const char*);

inline int soap_write_tt__SystemLogType(struct soap *soap, enum tt__SystemLogType const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_tt__SystemLogType(soap, p, "tt:SystemLogType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__SystemLogType * SOAP_FMAC4 soap_get_tt__SystemLogType(struct soap*, enum tt__SystemLogType *, const char*, const char*);

inline int soap_read_tt__SystemLogType(struct soap *soap, enum tt__SystemLogType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_tt__SystemLogType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__CapabilityCategory_DEFINED
#define SOAP_TYPE_tt__CapabilityCategory_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__CapabilityCategory(struct soap*, enum tt__CapabilityCategory *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__CapabilityCategory(struct soap*, const char*, int, const enum tt__CapabilityCategory *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__CapabilityCategory2s(struct soap*, enum tt__CapabilityCategory);
SOAP_FMAC3 enum tt__CapabilityCategory * SOAP_FMAC4 soap_in_tt__CapabilityCategory(struct soap*, const char*, enum tt__CapabilityCategory *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__CapabilityCategory(struct soap*, const char*, enum tt__CapabilityCategory *);

inline enum tt__CapabilityCategory * soap_new_tt__CapabilityCategory(struct soap *soap, int n = -1)
{
	return static_cast<enum tt__CapabilityCategory *>(soap_malloc(soap, (n < 0 ? 1 : n) * sizeof(enum tt__CapabilityCategory)));
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__CapabilityCategory(struct soap*, const enum tt__CapabilityCategory *, const char*, const char*);

inline int soap_write_tt__CapabilityCategory(struct soap *soap, enum tt__CapabilityCategory const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_tt__CapabilityCategory(soap, p, "tt:CapabilityCategory", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__CapabilityCategory * SOAP_FMAC4 soap_get_tt__CapabilityCategory(struct soap*, enum tt__CapabilityCategory *, const char*, const char*);

inline int soap_read_tt__CapabilityCategory(struct soap *soap, enum tt__CapabilityCategory *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_tt__CapabilityCategory(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__Dot11AuthAndMangementSuite_DEFINED
#define SOAP_TYPE_tt__Dot11AuthAndMangementSuite_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__Dot11AuthAndMangementSuite(struct soap*, enum tt__Dot11AuthAndMangementSuite *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Dot11AuthAndMangementSuite(struct soap*, const char*, int, const enum tt__Dot11AuthAndMangementSuite *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__Dot11AuthAndMangementSuite2s(struct soap*, enum tt__Dot11AuthAndMangementSuite);
SOAP_FMAC3 enum tt__Dot11AuthAndMangementSuite * SOAP_FMAC4 soap_in_tt__Dot11AuthAndMangementSuite(struct soap*, const char*, enum tt__Dot11AuthAndMangementSuite *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__Dot11AuthAndMangementSuite(struct soap*, const char*, enum tt__Dot11AuthAndMangementSuite *);

inline enum tt__Dot11AuthAndMangementSuite * soap_new_tt__Dot11AuthAndMangementSuite(struct soap *soap, int n = -1)
{
	return static_cast<enum tt__Dot11AuthAndMangementSuite *>(soap_malloc(soap, (n < 0 ? 1 : n) * sizeof(enum tt__Dot11AuthAndMangementSuite)));
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__Dot11AuthAndMangementSuite(struct soap*, const enum tt__Dot11AuthAndMangementSuite *, const char*, const char*);

inline int soap_write_tt__Dot11AuthAndMangementSuite(struct soap *soap, enum tt__Dot11AuthAndMangementSuite const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_tt__Dot11AuthAndMangementSuite(soap, p, "tt:Dot11AuthAndMangementSuite", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__Dot11AuthAndMangementSuite * SOAP_FMAC4 soap_get_tt__Dot11AuthAndMangementSuite(struct soap*, enum tt__Dot11AuthAndMangementSuite *, const char*, const char*);

inline int soap_read_tt__Dot11AuthAndMangementSuite(struct soap *soap, enum tt__Dot11AuthAndMangementSuite *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_tt__Dot11AuthAndMangementSuite(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__Dot11SignalStrength_DEFINED
#define SOAP_TYPE_tt__Dot11SignalStrength_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__Dot11SignalStrength(struct soap*, enum tt__Dot11SignalStrength *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Dot11SignalStrength(struct soap*, const char*, int, const enum tt__Dot11SignalStrength *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__Dot11SignalStrength2s(struct soap*, enum tt__Dot11SignalStrength);
SOAP_FMAC3 enum tt__Dot11SignalStrength * SOAP_FMAC4 soap_in_tt__Dot11SignalStrength(struct soap*, const char*, enum tt__Dot11SignalStrength *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__Dot11SignalStrength(struct soap*, const char*, enum tt__Dot11SignalStrength *);

inline enum tt__Dot11SignalStrength * soap_new_tt__Dot11SignalStrength(struct soap *soap, int n = -1)
{
	return static_cast<enum tt__Dot11SignalStrength *>(soap_malloc(soap, (n < 0 ? 1 : n) * sizeof(enum tt__Dot11SignalStrength)));
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__Dot11SignalStrength(struct soap*, const enum tt__Dot11SignalStrength *, const char*, const char*);

inline int soap_write_tt__Dot11SignalStrength(struct soap *soap, enum tt__Dot11SignalStrength const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_tt__Dot11SignalStrength(soap, p, "tt:Dot11SignalStrength", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__Dot11SignalStrength * SOAP_FMAC4 soap_get_tt__Dot11SignalStrength(struct soap*, enum tt__Dot11SignalStrength *, const char*, const char*);

inline int soap_read_tt__Dot11SignalStrength(struct soap *soap, enum tt__Dot11SignalStrength *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_tt__Dot11SignalStrength(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__Dot11Cipher_DEFINED
#define SOAP_TYPE_tt__Dot11Cipher_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__Dot11Cipher(struct soap*, enum tt__Dot11Cipher *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Dot11Cipher(struct soap*, const char*, int, const enum tt__Dot11Cipher *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__Dot11Cipher2s(struct soap*, enum tt__Dot11Cipher);
SOAP_FMAC3 enum tt__Dot11Cipher * SOAP_FMAC4 soap_in_tt__Dot11Cipher(struct soap*, const char*, enum tt__Dot11Cipher *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__Dot11Cipher(struct soap*, const char*, enum tt__Dot11Cipher *);

inline enum tt__Dot11Cipher * soap_new_tt__Dot11Cipher(struct soap *soap, int n = -1)
{
	return static_cast<enum tt__Dot11Cipher *>(soap_malloc(soap, (n < 0 ? 1 : n) * sizeof(enum tt__Dot11Cipher)));
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__Dot11Cipher(struct soap*, const enum tt__Dot11Cipher *, const char*, const char*);

inline int soap_write_tt__Dot11Cipher(struct soap *soap, enum tt__Dot11Cipher const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_tt__Dot11Cipher(soap, p, "tt:Dot11Cipher", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__Dot11Cipher * SOAP_FMAC4 soap_get_tt__Dot11Cipher(struct soap*, enum tt__Dot11Cipher *, const char*, const char*);

inline int soap_read_tt__Dot11Cipher(struct soap *soap, enum tt__Dot11Cipher *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_tt__Dot11Cipher(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__Dot11SecurityMode_DEFINED
#define SOAP_TYPE_tt__Dot11SecurityMode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__Dot11SecurityMode(struct soap*, enum tt__Dot11SecurityMode *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Dot11SecurityMode(struct soap*, const char*, int, const enum tt__Dot11SecurityMode *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__Dot11SecurityMode2s(struct soap*, enum tt__Dot11SecurityMode);
SOAP_FMAC3 enum tt__Dot11SecurityMode * SOAP_FMAC4 soap_in_tt__Dot11SecurityMode(struct soap*, const char*, enum tt__Dot11SecurityMode *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__Dot11SecurityMode(struct soap*, const char*, enum tt__Dot11SecurityMode *);

inline enum tt__Dot11SecurityMode * soap_new_tt__Dot11SecurityMode(struct soap *soap, int n = -1)
{
	return static_cast<enum tt__Dot11SecurityMode *>(soap_malloc(soap, (n < 0 ? 1 : n) * sizeof(enum tt__Dot11SecurityMode)));
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__Dot11SecurityMode(struct soap*, const enum tt__Dot11SecurityMode *, const char*, const char*);

inline int soap_write_tt__Dot11SecurityMode(struct soap *soap, enum tt__Dot11SecurityMode const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_tt__Dot11SecurityMode(soap, p, "tt:Dot11SecurityMode", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__Dot11SecurityMode * SOAP_FMAC4 soap_get_tt__Dot11SecurityMode(struct soap*, enum tt__Dot11SecurityMode *, const char*, const char*);

inline int soap_read_tt__Dot11SecurityMode(struct soap *soap, enum tt__Dot11SecurityMode *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_tt__Dot11SecurityMode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__Dot11StationMode_DEFINED
#define SOAP_TYPE_tt__Dot11StationMode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__Dot11StationMode(struct soap*, enum tt__Dot11StationMode *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Dot11StationMode(struct soap*, const char*, int, const enum tt__Dot11StationMode *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__Dot11StationMode2s(struct soap*, enum tt__Dot11StationMode);
SOAP_FMAC3 enum tt__Dot11StationMode * SOAP_FMAC4 soap_in_tt__Dot11StationMode(struct soap*, const char*, enum tt__Dot11StationMode *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__Dot11StationMode(struct soap*, const char*, enum tt__Dot11StationMode *);

inline enum tt__Dot11StationMode * soap_new_tt__Dot11StationMode(struct soap *soap, int n = -1)
{
	return static_cast<enum tt__Dot11StationMode *>(soap_malloc(soap, (n < 0 ? 1 : n) * sizeof(enum tt__Dot11StationMode)));
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__Dot11StationMode(struct soap*, const enum tt__Dot11StationMode *, const char*, const char*);

inline int soap_write_tt__Dot11StationMode(struct soap *soap, enum tt__Dot11StationMode const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_tt__Dot11StationMode(soap, p, "tt:Dot11StationMode", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__Dot11StationMode * SOAP_FMAC4 soap_get_tt__Dot11StationMode(struct soap*, enum tt__Dot11StationMode *, const char*, const char*);

inline int soap_read_tt__Dot11StationMode(struct soap *soap, enum tt__Dot11StationMode *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_tt__Dot11StationMode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__DynamicDNSType_DEFINED
#define SOAP_TYPE_tt__DynamicDNSType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__DynamicDNSType(struct soap*, enum tt__DynamicDNSType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__DynamicDNSType(struct soap*, const char*, int, const enum tt__DynamicDNSType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__DynamicDNSType2s(struct soap*, enum tt__DynamicDNSType);
SOAP_FMAC3 enum tt__DynamicDNSType * SOAP_FMAC4 soap_in_tt__DynamicDNSType(struct soap*, const char*, enum tt__DynamicDNSType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__DynamicDNSType(struct soap*, const char*, enum tt__DynamicDNSType *);

inline enum tt__DynamicDNSType * soap_new_tt__DynamicDNSType(struct soap *soap, int n = -1)
{
	return static_cast<enum tt__DynamicDNSType *>(soap_malloc(soap, (n < 0 ? 1 : n) * sizeof(enum tt__DynamicDNSType)));
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__DynamicDNSType(struct soap*, const enum tt__DynamicDNSType *, const char*, const char*);

inline int soap_write_tt__DynamicDNSType(struct soap *soap, enum tt__DynamicDNSType const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_tt__DynamicDNSType(soap, p, "tt:DynamicDNSType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__DynamicDNSType * SOAP_FMAC4 soap_get_tt__DynamicDNSType(struct soap*, enum tt__DynamicDNSType *, const char*, const char*);

inline int soap_read_tt__DynamicDNSType(struct soap *soap, enum tt__DynamicDNSType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_tt__DynamicDNSType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__IPAddressFilterType_DEFINED
#define SOAP_TYPE_tt__IPAddressFilterType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__IPAddressFilterType(struct soap*, enum tt__IPAddressFilterType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IPAddressFilterType(struct soap*, const char*, int, const enum tt__IPAddressFilterType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__IPAddressFilterType2s(struct soap*, enum tt__IPAddressFilterType);
SOAP_FMAC3 enum tt__IPAddressFilterType * SOAP_FMAC4 soap_in_tt__IPAddressFilterType(struct soap*, const char*, enum tt__IPAddressFilterType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__IPAddressFilterType(struct soap*, const char*, enum tt__IPAddressFilterType *);

inline enum tt__IPAddressFilterType * soap_new_tt__IPAddressFilterType(struct soap *soap, int n = -1)
{
	return static_cast<enum tt__IPAddressFilterType *>(soap_malloc(soap, (n < 0 ? 1 : n) * sizeof(enum tt__IPAddressFilterType)));
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__IPAddressFilterType(struct soap*, const enum tt__IPAddressFilterType *, const char*, const char*);

inline int soap_write_tt__IPAddressFilterType(struct soap *soap, enum tt__IPAddressFilterType const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_tt__IPAddressFilterType(soap, p, "tt:IPAddressFilterType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__IPAddressFilterType * SOAP_FMAC4 soap_get_tt__IPAddressFilterType(struct soap*, enum tt__IPAddressFilterType *, const char*, const char*);

inline int soap_read_tt__IPAddressFilterType(struct soap *soap, enum tt__IPAddressFilterType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_tt__IPAddressFilterType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__IPType_DEFINED
#define SOAP_TYPE_tt__IPType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__IPType(struct soap*, enum tt__IPType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IPType(struct soap*, const char*, int, const enum tt__IPType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__IPType2s(struct soap*, enum tt__IPType);
SOAP_FMAC3 enum tt__IPType * SOAP_FMAC4 soap_in_tt__IPType(struct soap*, const char*, enum tt__IPType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__IPType(struct soap*, const char*, enum tt__IPType *);

inline enum tt__IPType * soap_new_tt__IPType(struct soap *soap, int n = -1)
{
	return static_cast<enum tt__IPType *>(soap_malloc(soap, (n < 0 ? 1 : n) * sizeof(enum tt__IPType)));
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__IPType(struct soap*, const enum tt__IPType *, const char*, const char*);

inline int soap_write_tt__IPType(struct soap *soap, enum tt__IPType const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_tt__IPType(soap, p, "tt:IPType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__IPType * SOAP_FMAC4 soap_get_tt__IPType(struct soap*, enum tt__IPType *, const char*, const char*);

inline int soap_read_tt__IPType(struct soap *soap, enum tt__IPType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_tt__IPType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__NetworkHostType_DEFINED
#define SOAP_TYPE_tt__NetworkHostType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__NetworkHostType(struct soap*, enum tt__NetworkHostType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__NetworkHostType(struct soap*, const char*, int, const enum tt__NetworkHostType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__NetworkHostType2s(struct soap*, enum tt__NetworkHostType);
SOAP_FMAC3 enum tt__NetworkHostType * SOAP_FMAC4 soap_in_tt__NetworkHostType(struct soap*, const char*, enum tt__NetworkHostType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__NetworkHostType(struct soap*, const char*, enum tt__NetworkHostType *);

inline enum tt__NetworkHostType * soap_new_tt__NetworkHostType(struct soap *soap, int n = -1)
{
	return static_cast<enum tt__NetworkHostType *>(soap_malloc(soap, (n < 0 ? 1 : n) * sizeof(enum tt__NetworkHostType)));
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__NetworkHostType(struct soap*, const enum tt__NetworkHostType *, const char*, const char*);

inline int soap_write_tt__NetworkHostType(struct soap *soap, enum tt__NetworkHostType const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_tt__NetworkHostType(soap, p, "tt:NetworkHostType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__NetworkHostType * SOAP_FMAC4 soap_get_tt__NetworkHostType(struct soap*, enum tt__NetworkHostType *, const char*, const char*);

inline int soap_read_tt__NetworkHostType(struct soap *soap, enum tt__NetworkHostType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_tt__NetworkHostType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__NetworkProtocolType_DEFINED
#define SOAP_TYPE_tt__NetworkProtocolType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__NetworkProtocolType(struct soap*, enum tt__NetworkProtocolType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__NetworkProtocolType(struct soap*, const char*, int, const enum tt__NetworkProtocolType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__NetworkProtocolType2s(struct soap*, enum tt__NetworkProtocolType);
SOAP_FMAC3 enum tt__NetworkProtocolType * SOAP_FMAC4 soap_in_tt__NetworkProtocolType(struct soap*, const char*, enum tt__NetworkProtocolType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__NetworkProtocolType(struct soap*, const char*, enum tt__NetworkProtocolType *);

inline enum tt__NetworkProtocolType * soap_new_tt__NetworkProtocolType(struct soap *soap, int n = -1)
{
	return static_cast<enum tt__NetworkProtocolType *>(soap_malloc(soap, (n < 0 ? 1 : n) * sizeof(enum tt__NetworkProtocolType)));
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__NetworkProtocolType(struct soap*, const enum tt__NetworkProtocolType *, const char*, const char*);

inline int soap_write_tt__NetworkProtocolType(struct soap *soap, enum tt__NetworkProtocolType const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_tt__NetworkProtocolType(soap, p, "tt:NetworkProtocolType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__NetworkProtocolType * SOAP_FMAC4 soap_get_tt__NetworkProtocolType(struct soap*, enum tt__NetworkProtocolType *, const char*, const char*);

inline int soap_read_tt__NetworkProtocolType(struct soap *soap, enum tt__NetworkProtocolType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_tt__NetworkProtocolType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__IPv6DHCPConfiguration_DEFINED
#define SOAP_TYPE_tt__IPv6DHCPConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__IPv6DHCPConfiguration(struct soap*, enum tt__IPv6DHCPConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IPv6DHCPConfiguration(struct soap*, const char*, int, const enum tt__IPv6DHCPConfiguration *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__IPv6DHCPConfiguration2s(struct soap*, enum tt__IPv6DHCPConfiguration);
SOAP_FMAC3 enum tt__IPv6DHCPConfiguration * SOAP_FMAC4 soap_in_tt__IPv6DHCPConfiguration(struct soap*, const char*, enum tt__IPv6DHCPConfiguration *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__IPv6DHCPConfiguration(struct soap*, const char*, enum tt__IPv6DHCPConfiguration *);

inline enum tt__IPv6DHCPConfiguration * soap_new_tt__IPv6DHCPConfiguration(struct soap *soap, int n = -1)
{
	return static_cast<enum tt__IPv6DHCPConfiguration *>(soap_malloc(soap, (n < 0 ? 1 : n) * sizeof(enum tt__IPv6DHCPConfiguration)));
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__IPv6DHCPConfiguration(struct soap*, const enum tt__IPv6DHCPConfiguration *, const char*, const char*);

inline int soap_write_tt__IPv6DHCPConfiguration(struct soap *soap, enum tt__IPv6DHCPConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_tt__IPv6DHCPConfiguration(soap, p, "tt:IPv6DHCPConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__IPv6DHCPConfiguration * SOAP_FMAC4 soap_get_tt__IPv6DHCPConfiguration(struct soap*, enum tt__IPv6DHCPConfiguration *, const char*, const char*);

inline int soap_read_tt__IPv6DHCPConfiguration(struct soap *soap, enum tt__IPv6DHCPConfiguration *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_tt__IPv6DHCPConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__Duplex_DEFINED
#define SOAP_TYPE_tt__Duplex_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__Duplex(struct soap*, enum tt__Duplex *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Duplex(struct soap*, const char*, int, const enum tt__Duplex *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__Duplex2s(struct soap*, enum tt__Duplex);
SOAP_FMAC3 enum tt__Duplex * SOAP_FMAC4 soap_in_tt__Duplex(struct soap*, const char*, enum tt__Duplex *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__Duplex(struct soap*, const char*, enum tt__Duplex *);

inline enum tt__Duplex * soap_new_tt__Duplex(struct soap *soap, int n = -1)
{
	return static_cast<enum tt__Duplex *>(soap_malloc(soap, (n < 0 ? 1 : n) * sizeof(enum tt__Duplex)));
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__Duplex(struct soap*, const enum tt__Duplex *, const char*, const char*);

inline int soap_write_tt__Duplex(struct soap *soap, enum tt__Duplex const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_tt__Duplex(soap, p, "tt:Duplex", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__Duplex * SOAP_FMAC4 soap_get_tt__Duplex(struct soap*, enum tt__Duplex *, const char*, const char*);

inline int soap_read_tt__Duplex(struct soap *soap, enum tt__Duplex *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_tt__Duplex(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__DiscoveryMode_DEFINED
#define SOAP_TYPE_tt__DiscoveryMode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__DiscoveryMode(struct soap*, enum tt__DiscoveryMode *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__DiscoveryMode(struct soap*, const char*, int, const enum tt__DiscoveryMode *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__DiscoveryMode2s(struct soap*, enum tt__DiscoveryMode);
SOAP_FMAC3 enum tt__DiscoveryMode * SOAP_FMAC4 soap_in_tt__DiscoveryMode(struct soap*, const char*, enum tt__DiscoveryMode *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__DiscoveryMode(struct soap*, const char*, enum tt__DiscoveryMode *);

inline enum tt__DiscoveryMode * soap_new_tt__DiscoveryMode(struct soap *soap, int n = -1)
{
	return static_cast<enum tt__DiscoveryMode *>(soap_malloc(soap, (n < 0 ? 1 : n) * sizeof(enum tt__DiscoveryMode)));
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__DiscoveryMode(struct soap*, const enum tt__DiscoveryMode *, const char*, const char*);

inline int soap_write_tt__DiscoveryMode(struct soap *soap, enum tt__DiscoveryMode const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_tt__DiscoveryMode(soap, p, "tt:DiscoveryMode", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__DiscoveryMode * SOAP_FMAC4 soap_get_tt__DiscoveryMode(struct soap*, enum tt__DiscoveryMode *, const char*, const char*);

inline int soap_read_tt__DiscoveryMode(struct soap *soap, enum tt__DiscoveryMode *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_tt__DiscoveryMode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__ScopeDefinition_DEFINED
#define SOAP_TYPE_tt__ScopeDefinition_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__ScopeDefinition(struct soap*, enum tt__ScopeDefinition *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ScopeDefinition(struct soap*, const char*, int, const enum tt__ScopeDefinition *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__ScopeDefinition2s(struct soap*, enum tt__ScopeDefinition);
SOAP_FMAC3 enum tt__ScopeDefinition * SOAP_FMAC4 soap_in_tt__ScopeDefinition(struct soap*, const char*, enum tt__ScopeDefinition *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__ScopeDefinition(struct soap*, const char*, enum tt__ScopeDefinition *);

inline enum tt__ScopeDefinition * soap_new_tt__ScopeDefinition(struct soap *soap, int n = -1)
{
	return static_cast<enum tt__ScopeDefinition *>(soap_malloc(soap, (n < 0 ? 1 : n) * sizeof(enum tt__ScopeDefinition)));
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__ScopeDefinition(struct soap*, const enum tt__ScopeDefinition *, const char*, const char*);

inline int soap_write_tt__ScopeDefinition(struct soap *soap, enum tt__ScopeDefinition const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_tt__ScopeDefinition(soap, p, "tt:ScopeDefinition", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__ScopeDefinition * SOAP_FMAC4 soap_get_tt__ScopeDefinition(struct soap*, enum tt__ScopeDefinition *, const char*, const char*);

inline int soap_read_tt__ScopeDefinition(struct soap *soap, enum tt__ScopeDefinition *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_tt__ScopeDefinition(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__TransportProtocol_DEFINED
#define SOAP_TYPE_tt__TransportProtocol_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__TransportProtocol(struct soap*, enum tt__TransportProtocol *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__TransportProtocol(struct soap*, const char*, int, const enum tt__TransportProtocol *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__TransportProtocol2s(struct soap*, enum tt__TransportProtocol);
SOAP_FMAC3 enum tt__TransportProtocol * SOAP_FMAC4 soap_in_tt__TransportProtocol(struct soap*, const char*, enum tt__TransportProtocol *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__TransportProtocol(struct soap*, const char*, enum tt__TransportProtocol *);

inline enum tt__TransportProtocol * soap_new_tt__TransportProtocol(struct soap *soap, int n = -1)
{
	return static_cast<enum tt__TransportProtocol *>(soap_malloc(soap, (n < 0 ? 1 : n) * sizeof(enum tt__TransportProtocol)));
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__TransportProtocol(struct soap*, const enum tt__TransportProtocol *, const char*, const char*);

inline int soap_write_tt__TransportProtocol(struct soap *soap, enum tt__TransportProtocol const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_tt__TransportProtocol(soap, p, "tt:TransportProtocol", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__TransportProtocol * SOAP_FMAC4 soap_get_tt__TransportProtocol(struct soap*, enum tt__TransportProtocol *, const char*, const char*);

inline int soap_read_tt__TransportProtocol(struct soap *soap, enum tt__TransportProtocol *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_tt__TransportProtocol(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__StreamType_DEFINED
#define SOAP_TYPE_tt__StreamType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__StreamType(struct soap*, enum tt__StreamType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__StreamType(struct soap*, const char*, int, const enum tt__StreamType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__StreamType2s(struct soap*, enum tt__StreamType);
SOAP_FMAC3 enum tt__StreamType * SOAP_FMAC4 soap_in_tt__StreamType(struct soap*, const char*, enum tt__StreamType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__StreamType(struct soap*, const char*, enum tt__StreamType *);

inline enum tt__StreamType * soap_new_tt__StreamType(struct soap *soap, int n = -1)
{
	return static_cast<enum tt__StreamType *>(soap_malloc(soap, (n < 0 ? 1 : n) * sizeof(enum tt__StreamType)));
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__StreamType(struct soap*, const enum tt__StreamType *, const char*, const char*);

inline int soap_write_tt__StreamType(struct soap *soap, enum tt__StreamType const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_tt__StreamType(soap, p, "tt:StreamType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__StreamType * SOAP_FMAC4 soap_get_tt__StreamType(struct soap*, enum tt__StreamType *, const char*, const char*);

inline int soap_read_tt__StreamType(struct soap *soap, enum tt__StreamType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_tt__StreamType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__MetadataCompressionType_DEFINED
#define SOAP_TYPE_tt__MetadataCompressionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__MetadataCompressionType(struct soap*, enum tt__MetadataCompressionType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__MetadataCompressionType(struct soap*, const char*, int, const enum tt__MetadataCompressionType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__MetadataCompressionType2s(struct soap*, enum tt__MetadataCompressionType);
SOAP_FMAC3 enum tt__MetadataCompressionType * SOAP_FMAC4 soap_in_tt__MetadataCompressionType(struct soap*, const char*, enum tt__MetadataCompressionType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__MetadataCompressionType(struct soap*, const char*, enum tt__MetadataCompressionType *);

inline enum tt__MetadataCompressionType * soap_new_tt__MetadataCompressionType(struct soap *soap, int n = -1)
{
	return static_cast<enum tt__MetadataCompressionType *>(soap_malloc(soap, (n < 0 ? 1 : n) * sizeof(enum tt__MetadataCompressionType)));
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__MetadataCompressionType(struct soap*, const enum tt__MetadataCompressionType *, const char*, const char*);

inline int soap_write_tt__MetadataCompressionType(struct soap *soap, enum tt__MetadataCompressionType const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_tt__MetadataCompressionType(soap, p, "tt:MetadataCompressionType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__MetadataCompressionType * SOAP_FMAC4 soap_get_tt__MetadataCompressionType(struct soap*, enum tt__MetadataCompressionType *, const char*, const char*);

inline int soap_read_tt__MetadataCompressionType(struct soap *soap, enum tt__MetadataCompressionType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_tt__MetadataCompressionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__AudioEncodingMimeNames_DEFINED
#define SOAP_TYPE_tt__AudioEncodingMimeNames_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__AudioEncodingMimeNames(struct soap*, enum tt__AudioEncodingMimeNames *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AudioEncodingMimeNames(struct soap*, const char*, int, const enum tt__AudioEncodingMimeNames *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__AudioEncodingMimeNames2s(struct soap*, enum tt__AudioEncodingMimeNames);
SOAP_FMAC3 enum tt__AudioEncodingMimeNames * SOAP_FMAC4 soap_in_tt__AudioEncodingMimeNames(struct soap*, const char*, enum tt__AudioEncodingMimeNames *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__AudioEncodingMimeNames(struct soap*, const char*, enum tt__AudioEncodingMimeNames *);

inline enum tt__AudioEncodingMimeNames * soap_new_tt__AudioEncodingMimeNames(struct soap *soap, int n = -1)
{
	return static_cast<enum tt__AudioEncodingMimeNames *>(soap_malloc(soap, (n < 0 ? 1 : n) * sizeof(enum tt__AudioEncodingMimeNames)));
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__AudioEncodingMimeNames(struct soap*, const enum tt__AudioEncodingMimeNames *, const char*, const char*);

inline int soap_write_tt__AudioEncodingMimeNames(struct soap *soap, enum tt__AudioEncodingMimeNames const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_tt__AudioEncodingMimeNames(soap, p, "tt:AudioEncodingMimeNames", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__AudioEncodingMimeNames * SOAP_FMAC4 soap_get_tt__AudioEncodingMimeNames(struct soap*, enum tt__AudioEncodingMimeNames *, const char*, const char*);

inline int soap_read_tt__AudioEncodingMimeNames(struct soap *soap, enum tt__AudioEncodingMimeNames *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_tt__AudioEncodingMimeNames(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__AudioEncoding_DEFINED
#define SOAP_TYPE_tt__AudioEncoding_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__AudioEncoding(struct soap*, enum tt__AudioEncoding *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AudioEncoding(struct soap*, const char*, int, const enum tt__AudioEncoding *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__AudioEncoding2s(struct soap*, enum tt__AudioEncoding);
SOAP_FMAC3 enum tt__AudioEncoding * SOAP_FMAC4 soap_in_tt__AudioEncoding(struct soap*, const char*, enum tt__AudioEncoding *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__AudioEncoding(struct soap*, const char*, enum tt__AudioEncoding *);

inline enum tt__AudioEncoding * soap_new_tt__AudioEncoding(struct soap *soap, int n = -1)
{
	return static_cast<enum tt__AudioEncoding *>(soap_malloc(soap, (n < 0 ? 1 : n) * sizeof(enum tt__AudioEncoding)));
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__AudioEncoding(struct soap*, const enum tt__AudioEncoding *, const char*, const char*);

inline int soap_write_tt__AudioEncoding(struct soap *soap, enum tt__AudioEncoding const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_tt__AudioEncoding(soap, p, "tt:AudioEncoding", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__AudioEncoding * SOAP_FMAC4 soap_get_tt__AudioEncoding(struct soap*, enum tt__AudioEncoding *, const char*, const char*);

inline int soap_read_tt__AudioEncoding(struct soap *soap, enum tt__AudioEncoding *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_tt__AudioEncoding(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__VideoEncodingProfiles_DEFINED
#define SOAP_TYPE_tt__VideoEncodingProfiles_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__VideoEncodingProfiles(struct soap*, enum tt__VideoEncodingProfiles *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__VideoEncodingProfiles(struct soap*, const char*, int, const enum tt__VideoEncodingProfiles *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__VideoEncodingProfiles2s(struct soap*, enum tt__VideoEncodingProfiles);
SOAP_FMAC3 enum tt__VideoEncodingProfiles * SOAP_FMAC4 soap_in_tt__VideoEncodingProfiles(struct soap*, const char*, enum tt__VideoEncodingProfiles *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__VideoEncodingProfiles(struct soap*, const char*, enum tt__VideoEncodingProfiles *);

inline enum tt__VideoEncodingProfiles * soap_new_tt__VideoEncodingProfiles(struct soap *soap, int n = -1)
{
	return static_cast<enum tt__VideoEncodingProfiles *>(soap_malloc(soap, (n < 0 ? 1 : n) * sizeof(enum tt__VideoEncodingProfiles)));
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__VideoEncodingProfiles(struct soap*, const enum tt__VideoEncodingProfiles *, const char*, const char*);

inline int soap_write_tt__VideoEncodingProfiles(struct soap *soap, enum tt__VideoEncodingProfiles const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_tt__VideoEncodingProfiles(soap, p, "tt:VideoEncodingProfiles", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__VideoEncodingProfiles * SOAP_FMAC4 soap_get_tt__VideoEncodingProfiles(struct soap*, enum tt__VideoEncodingProfiles *, const char*, const char*);

inline int soap_read_tt__VideoEncodingProfiles(struct soap *soap, enum tt__VideoEncodingProfiles *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_tt__VideoEncodingProfiles(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__VideoEncodingMimeNames_DEFINED
#define SOAP_TYPE_tt__VideoEncodingMimeNames_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__VideoEncodingMimeNames(struct soap*, enum tt__VideoEncodingMimeNames *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__VideoEncodingMimeNames(struct soap*, const char*, int, const enum tt__VideoEncodingMimeNames *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__VideoEncodingMimeNames2s(struct soap*, enum tt__VideoEncodingMimeNames);
SOAP_FMAC3 enum tt__VideoEncodingMimeNames * SOAP_FMAC4 soap_in_tt__VideoEncodingMimeNames(struct soap*, const char*, enum tt__VideoEncodingMimeNames *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__VideoEncodingMimeNames(struct soap*, const char*, enum tt__VideoEncodingMimeNames *);

inline enum tt__VideoEncodingMimeNames * soap_new_tt__VideoEncodingMimeNames(struct soap *soap, int n = -1)
{
	return static_cast<enum tt__VideoEncodingMimeNames *>(soap_malloc(soap, (n < 0 ? 1 : n) * sizeof(enum tt__VideoEncodingMimeNames)));
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__VideoEncodingMimeNames(struct soap*, const enum tt__VideoEncodingMimeNames *, const char*, const char*);

inline int soap_write_tt__VideoEncodingMimeNames(struct soap *soap, enum tt__VideoEncodingMimeNames const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_tt__VideoEncodingMimeNames(soap, p, "tt:VideoEncodingMimeNames", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__VideoEncodingMimeNames * SOAP_FMAC4 soap_get_tt__VideoEncodingMimeNames(struct soap*, enum tt__VideoEncodingMimeNames *, const char*, const char*);

inline int soap_read_tt__VideoEncodingMimeNames(struct soap *soap, enum tt__VideoEncodingMimeNames *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_tt__VideoEncodingMimeNames(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__H264Profile_DEFINED
#define SOAP_TYPE_tt__H264Profile_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__H264Profile(struct soap*, enum tt__H264Profile *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__H264Profile(struct soap*, const char*, int, const enum tt__H264Profile *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__H264Profile2s(struct soap*, enum tt__H264Profile);
SOAP_FMAC3 enum tt__H264Profile * SOAP_FMAC4 soap_in_tt__H264Profile(struct soap*, const char*, enum tt__H264Profile *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__H264Profile(struct soap*, const char*, enum tt__H264Profile *);

inline enum tt__H264Profile * soap_new_tt__H264Profile(struct soap *soap, int n = -1)
{
	return static_cast<enum tt__H264Profile *>(soap_malloc(soap, (n < 0 ? 1 : n) * sizeof(enum tt__H264Profile)));
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__H264Profile(struct soap*, const enum tt__H264Profile *, const char*, const char*);

inline int soap_write_tt__H264Profile(struct soap *soap, enum tt__H264Profile const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_tt__H264Profile(soap, p, "tt:H264Profile", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__H264Profile * SOAP_FMAC4 soap_get_tt__H264Profile(struct soap*, enum tt__H264Profile *, const char*, const char*);

inline int soap_read_tt__H264Profile(struct soap *soap, enum tt__H264Profile *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_tt__H264Profile(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__Mpeg4Profile_DEFINED
#define SOAP_TYPE_tt__Mpeg4Profile_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__Mpeg4Profile(struct soap*, enum tt__Mpeg4Profile *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Mpeg4Profile(struct soap*, const char*, int, const enum tt__Mpeg4Profile *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__Mpeg4Profile2s(struct soap*, enum tt__Mpeg4Profile);
SOAP_FMAC3 enum tt__Mpeg4Profile * SOAP_FMAC4 soap_in_tt__Mpeg4Profile(struct soap*, const char*, enum tt__Mpeg4Profile *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__Mpeg4Profile(struct soap*, const char*, enum tt__Mpeg4Profile *);

inline enum tt__Mpeg4Profile * soap_new_tt__Mpeg4Profile(struct soap *soap, int n = -1)
{
	return static_cast<enum tt__Mpeg4Profile *>(soap_malloc(soap, (n < 0 ? 1 : n) * sizeof(enum tt__Mpeg4Profile)));
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__Mpeg4Profile(struct soap*, const enum tt__Mpeg4Profile *, const char*, const char*);

inline int soap_write_tt__Mpeg4Profile(struct soap *soap, enum tt__Mpeg4Profile const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_tt__Mpeg4Profile(soap, p, "tt:Mpeg4Profile", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__Mpeg4Profile * SOAP_FMAC4 soap_get_tt__Mpeg4Profile(struct soap*, enum tt__Mpeg4Profile *, const char*, const char*);

inline int soap_read_tt__Mpeg4Profile(struct soap *soap, enum tt__Mpeg4Profile *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_tt__Mpeg4Profile(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__VideoEncoding_DEFINED
#define SOAP_TYPE_tt__VideoEncoding_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__VideoEncoding(struct soap*, enum tt__VideoEncoding *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__VideoEncoding(struct soap*, const char*, int, const enum tt__VideoEncoding *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__VideoEncoding2s(struct soap*, enum tt__VideoEncoding);
SOAP_FMAC3 enum tt__VideoEncoding * SOAP_FMAC4 soap_in_tt__VideoEncoding(struct soap*, const char*, enum tt__VideoEncoding *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__VideoEncoding(struct soap*, const char*, enum tt__VideoEncoding *);

inline enum tt__VideoEncoding * soap_new_tt__VideoEncoding(struct soap *soap, int n = -1)
{
	return static_cast<enum tt__VideoEncoding *>(soap_malloc(soap, (n < 0 ? 1 : n) * sizeof(enum tt__VideoEncoding)));
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__VideoEncoding(struct soap*, const enum tt__VideoEncoding *, const char*, const char*);

inline int soap_write_tt__VideoEncoding(struct soap *soap, enum tt__VideoEncoding const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_tt__VideoEncoding(soap, p, "tt:VideoEncoding", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__VideoEncoding * SOAP_FMAC4 soap_get_tt__VideoEncoding(struct soap*, enum tt__VideoEncoding *, const char*, const char*);

inline int soap_read_tt__VideoEncoding(struct soap *soap, enum tt__VideoEncoding *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_tt__VideoEncoding(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__RotateMode_DEFINED
#define SOAP_TYPE_tt__RotateMode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__RotateMode(struct soap*, enum tt__RotateMode *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RotateMode(struct soap*, const char*, int, const enum tt__RotateMode *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__RotateMode2s(struct soap*, enum tt__RotateMode);
SOAP_FMAC3 enum tt__RotateMode * SOAP_FMAC4 soap_in_tt__RotateMode(struct soap*, const char*, enum tt__RotateMode *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__RotateMode(struct soap*, const char*, enum tt__RotateMode *);

inline enum tt__RotateMode * soap_new_tt__RotateMode(struct soap *soap, int n = -1)
{
	return static_cast<enum tt__RotateMode *>(soap_malloc(soap, (n < 0 ? 1 : n) * sizeof(enum tt__RotateMode)));
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__RotateMode(struct soap*, const enum tt__RotateMode *, const char*, const char*);

inline int soap_write_tt__RotateMode(struct soap *soap, enum tt__RotateMode const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_tt__RotateMode(soap, p, "tt:RotateMode", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__RotateMode * SOAP_FMAC4 soap_get_tt__RotateMode(struct soap*, enum tt__RotateMode *, const char*, const char*);

inline int soap_read_tt__RotateMode(struct soap *soap, enum tt__RotateMode *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_tt__RotateMode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tds__StorageType_DEFINED
#define SOAP_TYPE_tds__StorageType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tds__StorageType(struct soap*, enum tds__StorageType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tds__StorageType(struct soap*, const char*, int, const enum tds__StorageType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tds__StorageType2s(struct soap*, enum tds__StorageType);
SOAP_FMAC3 enum tds__StorageType * SOAP_FMAC4 soap_in_tds__StorageType(struct soap*, const char*, enum tds__StorageType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tds__StorageType(struct soap*, const char*, enum tds__StorageType *);

inline enum tds__StorageType * soap_new_tds__StorageType(struct soap *soap, int n = -1)
{
	return static_cast<enum tds__StorageType *>(soap_malloc(soap, (n < 0 ? 1 : n) * sizeof(enum tds__StorageType)));
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tds__StorageType(struct soap*, const enum tds__StorageType *, const char*, const char*);

inline int soap_write_tds__StorageType(struct soap *soap, enum tds__StorageType const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_tds__StorageType(soap, p, "tds:StorageType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 enum tds__StorageType * SOAP_FMAC4 soap_get_tds__StorageType(struct soap*, enum tds__StorageType *, const char*, const char*);

inline int soap_read_tds__StorageType(struct soap *soap, enum tds__StorageType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_tds__StorageType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_bool_DEFINED
#define SOAP_TYPE_bool_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_bool(struct soap*, bool *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap*, const char*, int, const bool *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap*, bool);
SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap*, const char*, bool *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap*, const char*, bool *);

inline bool * soap_new_bool(struct soap *soap, int n = -1)
{
	return static_cast<bool *>(soap_malloc(soap, (n < 0 ? 1 : n) * sizeof(bool)));
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap*, const bool *, const char*, const char*);

inline int soap_write_bool(struct soap *soap, bool const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap*, bool *, const char*, const char*);

inline int soap_read_bool(struct soap *soap, bool *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_bool(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__wsa5__IsReferenceParameter_DEFINED
#define SOAP_TYPE__wsa5__IsReferenceParameter_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default__wsa5__IsReferenceParameter(struct soap*, enum _wsa5__IsReferenceParameter *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsa5__IsReferenceParameter(struct soap*, const char*, int, const enum _wsa5__IsReferenceParameter *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__wsa5__IsReferenceParameter2s(struct soap*, enum _wsa5__IsReferenceParameter);
SOAP_FMAC3 enum _wsa5__IsReferenceParameter * SOAP_FMAC4 soap_in__wsa5__IsReferenceParameter(struct soap*, const char*, enum _wsa5__IsReferenceParameter *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_wsa5__IsReferenceParameter(struct soap*, const char*, enum _wsa5__IsReferenceParameter *);

inline enum _wsa5__IsReferenceParameter * soap_new__wsa5__IsReferenceParameter(struct soap *soap, int n = -1)
{
	return static_cast<enum _wsa5__IsReferenceParameter *>(soap_malloc(soap, (n < 0 ? 1 : n) * sizeof(enum _wsa5__IsReferenceParameter)));
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__IsReferenceParameter(struct soap*, const enum _wsa5__IsReferenceParameter *, const char*, const char*);

inline int soap_write__wsa5__IsReferenceParameter(struct soap *soap, enum _wsa5__IsReferenceParameter const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put__wsa5__IsReferenceParameter(soap, p, "wsa5:IsReferenceParameter", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 enum _wsa5__IsReferenceParameter * SOAP_FMAC4 soap_get__wsa5__IsReferenceParameter(struct soap*, enum _wsa5__IsReferenceParameter *, const char*, const char*);

inline int soap_read__wsa5__IsReferenceParameter(struct soap *soap, enum _wsa5__IsReferenceParameter *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get__wsa5__IsReferenceParameter(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_wsa5__FaultCodesType_DEFINED
#define SOAP_TYPE_wsa5__FaultCodesType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsa5__FaultCodesType(struct soap*, enum wsa5__FaultCodesType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__FaultCodesType(struct soap*, const char*, int, const enum wsa5__FaultCodesType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_wsa5__FaultCodesType2s(struct soap*, enum wsa5__FaultCodesType);
SOAP_FMAC3 enum wsa5__FaultCodesType * SOAP_FMAC4 soap_in_wsa5__FaultCodesType(struct soap*, const char*, enum wsa5__FaultCodesType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2wsa5__FaultCodesType(struct soap*, const char*, enum wsa5__FaultCodesType *);

inline enum wsa5__FaultCodesType * soap_new_wsa5__FaultCodesType(struct soap *soap, int n = -1)
{
	return static_cast<enum wsa5__FaultCodesType *>(soap_malloc(soap, (n < 0 ? 1 : n) * sizeof(enum wsa5__FaultCodesType)));
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__FaultCodesType(struct soap*, const enum wsa5__FaultCodesType *, const char*, const char*);

inline int soap_write_wsa5__FaultCodesType(struct soap *soap, enum wsa5__FaultCodesType const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_wsa5__FaultCodesType(soap, p, "wsa5:FaultCodesType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 enum wsa5__FaultCodesType * SOAP_FMAC4 soap_get_wsa5__FaultCodesType(struct soap*, enum wsa5__FaultCodesType *, const char*, const char*);

inline int soap_read_wsa5__FaultCodesType(struct soap *soap, enum wsa5__FaultCodesType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_wsa5__FaultCodesType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_wsa5__RelationshipType_DEFINED
#define SOAP_TYPE_wsa5__RelationshipType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsa5__RelationshipType(struct soap*, enum wsa5__RelationshipType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__RelationshipType(struct soap*, const char*, int, const enum wsa5__RelationshipType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_wsa5__RelationshipType2s(struct soap*, enum wsa5__RelationshipType);
SOAP_FMAC3 enum wsa5__RelationshipType * SOAP_FMAC4 soap_in_wsa5__RelationshipType(struct soap*, const char*, enum wsa5__RelationshipType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2wsa5__RelationshipType(struct soap*, const char*, enum wsa5__RelationshipType *);

inline enum wsa5__RelationshipType * soap_new_wsa5__RelationshipType(struct soap *soap, int n = -1)
{
	return static_cast<enum wsa5__RelationshipType *>(soap_malloc(soap, (n < 0 ? 1 : n) * sizeof(enum wsa5__RelationshipType)));
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__RelationshipType(struct soap*, const enum wsa5__RelationshipType *, const char*, const char*);

inline int soap_write_wsa5__RelationshipType(struct soap *soap, enum wsa5__RelationshipType const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_wsa5__RelationshipType(soap, p, "wsa5:RelationshipType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 enum wsa5__RelationshipType * SOAP_FMAC4 soap_get_wsa5__RelationshipType(struct soap*, enum wsa5__RelationshipType *, const char*, const char*);

inline int soap_read_wsa5__RelationshipType(struct soap *soap, enum wsa5__RelationshipType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_wsa5__RelationshipType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__wstop__TopicNamespaceType_Topic_DEFINED
#define SOAP_TYPE__wstop__TopicNamespaceType_Topic_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wstop__TopicNamespaceType_Topic(struct soap*, const char*, int, const _wstop__TopicNamespaceType_Topic *, const char*);
SOAP_FMAC3 _wstop__TopicNamespaceType_Topic * SOAP_FMAC4 soap_in__wstop__TopicNamespaceType_Topic(struct soap*, const char*, _wstop__TopicNamespaceType_Topic *, const char*);
SOAP_FMAC1 _wstop__TopicNamespaceType_Topic * SOAP_FMAC2 soap_instantiate__wstop__TopicNamespaceType_Topic(struct soap*, int, const char*, const char*, size_t*);

inline _wstop__TopicNamespaceType_Topic * soap_new__wstop__TopicNamespaceType_Topic(struct soap *soap, int n = -1)
{
	return soap_instantiate__wstop__TopicNamespaceType_Topic(soap, n, NULL, NULL, NULL);
}

inline _wstop__TopicNamespaceType_Topic * soap_new_req__wstop__TopicNamespaceType_Topic(
	struct soap *soap,
	const std::string& name)
{
	_wstop__TopicNamespaceType_Topic *_p = soap_new__wstop__TopicNamespaceType_Topic(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_wstop__TopicNamespaceType_Topic::name = name;
	}
	return _p;
}

inline _wstop__TopicNamespaceType_Topic * soap_new_set__wstop__TopicNamespaceType_Topic(
	struct soap *soap,
	wstop__Documentation *documentation,
	char *__anyAttribute,
	wstop__QueryExpressionType *MessagePattern,
	const std::vector<wstop__TopicType *> & Topic,
	const std::vector<char *> & __any,
	const std::string& name,
	std::string *messageTypes,
	bool final_,
	std::string *parent)
{
	_wstop__TopicNamespaceType_Topic *_p = soap_new__wstop__TopicNamespaceType_Topic(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_wstop__TopicNamespaceType_Topic::documentation = documentation;
		_p->_wstop__TopicNamespaceType_Topic::__anyAttribute = __anyAttribute;
		_p->_wstop__TopicNamespaceType_Topic::MessagePattern = MessagePattern;
		_p->_wstop__TopicNamespaceType_Topic::Topic = Topic;
		_p->_wstop__TopicNamespaceType_Topic::__any = __any;
		_p->_wstop__TopicNamespaceType_Topic::name = name;
		_p->_wstop__TopicNamespaceType_Topic::messageTypes = messageTypes;
		_p->_wstop__TopicNamespaceType_Topic::final_ = final_;
		_p->_wstop__TopicNamespaceType_Topic::parent = parent;
	}
	return _p;
}

inline int soap_write__wstop__TopicNamespaceType_Topic(struct soap *soap, _wstop__TopicNamespaceType_Topic const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wstop:TopicNamespaceType-Topic", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _wstop__TopicNamespaceType_Topic * SOAP_FMAC4 soap_get__wstop__TopicNamespaceType_Topic(struct soap*, _wstop__TopicNamespaceType_Topic *, const char*, const char*);

inline int soap_read__wstop__TopicNamespaceType_Topic(struct soap *soap, _wstop__TopicNamespaceType_Topic *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__wstop__TopicNamespaceType_Topic(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tptz__SetConfigurationResponse_sequence_DEFINED
#define SOAP_TYPE___tptz__SetConfigurationResponse_sequence_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__SetConfigurationResponse_sequence(struct soap*, const char*, int, const __tptz__SetConfigurationResponse_sequence *, const char*);
SOAP_FMAC3 __tptz__SetConfigurationResponse_sequence * SOAP_FMAC4 soap_in___tptz__SetConfigurationResponse_sequence(struct soap*, const char*, __tptz__SetConfigurationResponse_sequence *, const char*);
SOAP_FMAC1 __tptz__SetConfigurationResponse_sequence * SOAP_FMAC2 soap_instantiate___tptz__SetConfigurationResponse_sequence(struct soap*, int, const char*, const char*, size_t*);

inline __tptz__SetConfigurationResponse_sequence * soap_new___tptz__SetConfigurationResponse_sequence(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__SetConfigurationResponse_sequence(soap, n, NULL, NULL, NULL);
}

inline __tptz__SetConfigurationResponse_sequence * soap_new_req___tptz__SetConfigurationResponse_sequence(
	struct soap *soap)
{
	__tptz__SetConfigurationResponse_sequence *_p = soap_new___tptz__SetConfigurationResponse_sequence(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline __tptz__SetConfigurationResponse_sequence * soap_new_set___tptz__SetConfigurationResponse_sequence(
	struct soap *soap)
{
	__tptz__SetConfigurationResponse_sequence *_p = soap_new___tptz__SetConfigurationResponse_sequence(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write___tptz__SetConfigurationResponse_sequence(struct soap *soap, __tptz__SetConfigurationResponse_sequence const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-tptz:SetConfigurationResponse-sequence", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 __tptz__SetConfigurationResponse_sequence * SOAP_FMAC4 soap_get___tptz__SetConfigurationResponse_sequence(struct soap*, __tptz__SetConfigurationResponse_sequence *, const char*, const char*);

inline int soap_read___tptz__SetConfigurationResponse_sequence(struct soap *soap, __tptz__SetConfigurationResponse_sequence *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get___tptz__SetConfigurationResponse_sequence(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__wsrfbf__BaseFaultType_FaultCause_DEFINED
#define SOAP_TYPE__wsrfbf__BaseFaultType_FaultCause_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsrfbf__BaseFaultType_FaultCause(struct soap*, const char*, int, const _wsrfbf__BaseFaultType_FaultCause *, const char*);
SOAP_FMAC3 _wsrfbf__BaseFaultType_FaultCause * SOAP_FMAC4 soap_in__wsrfbf__BaseFaultType_FaultCause(struct soap*, const char*, _wsrfbf__BaseFaultType_FaultCause *, const char*);
SOAP_FMAC1 _wsrfbf__BaseFaultType_FaultCause * SOAP_FMAC2 soap_instantiate__wsrfbf__BaseFaultType_FaultCause(struct soap*, int, const char*, const char*, size_t*);

inline _wsrfbf__BaseFaultType_FaultCause * soap_new__wsrfbf__BaseFaultType_FaultCause(struct soap *soap, int n = -1)
{
	return soap_instantiate__wsrfbf__BaseFaultType_FaultCause(soap, n, NULL, NULL, NULL);
}

inline _wsrfbf__BaseFaultType_FaultCause * soap_new_req__wsrfbf__BaseFaultType_FaultCause(
	struct soap *soap)
{
	_wsrfbf__BaseFaultType_FaultCause *_p = soap_new__wsrfbf__BaseFaultType_FaultCause(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _wsrfbf__BaseFaultType_FaultCause * soap_new_set__wsrfbf__BaseFaultType_FaultCause(
	struct soap *soap,
	char *__any)
{
	_wsrfbf__BaseFaultType_FaultCause *_p = soap_new__wsrfbf__BaseFaultType_FaultCause(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_wsrfbf__BaseFaultType_FaultCause::__any = __any;
	}
	return _p;
}

inline int soap_write__wsrfbf__BaseFaultType_FaultCause(struct soap *soap, _wsrfbf__BaseFaultType_FaultCause const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsrfbf:BaseFaultType-FaultCause", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _wsrfbf__BaseFaultType_FaultCause * SOAP_FMAC4 soap_get__wsrfbf__BaseFaultType_FaultCause(struct soap*, _wsrfbf__BaseFaultType_FaultCause *, const char*, const char*);

inline int soap_read__wsrfbf__BaseFaultType_FaultCause(struct soap *soap, _wsrfbf__BaseFaultType_FaultCause *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__wsrfbf__BaseFaultType_FaultCause(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__wsrfbf__BaseFaultType_Description_DEFINED
#define SOAP_TYPE__wsrfbf__BaseFaultType_Description_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsrfbf__BaseFaultType_Description(struct soap*, const char*, int, const _wsrfbf__BaseFaultType_Description *, const char*);
SOAP_FMAC3 _wsrfbf__BaseFaultType_Description * SOAP_FMAC4 soap_in__wsrfbf__BaseFaultType_Description(struct soap*, const char*, _wsrfbf__BaseFaultType_Description *, const char*);
SOAP_FMAC1 _wsrfbf__BaseFaultType_Description * SOAP_FMAC2 soap_instantiate__wsrfbf__BaseFaultType_Description(struct soap*, int, const char*, const char*, size_t*);

inline _wsrfbf__BaseFaultType_Description * soap_new__wsrfbf__BaseFaultType_Description(struct soap *soap, int n = -1)
{
	return soap_instantiate__wsrfbf__BaseFaultType_Description(soap, n, NULL, NULL, NULL);
}

inline _wsrfbf__BaseFaultType_Description * soap_new_req__wsrfbf__BaseFaultType_Description(
	struct soap *soap,
	const std::string& __item)
{
	_wsrfbf__BaseFaultType_Description *_p = soap_new__wsrfbf__BaseFaultType_Description(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_wsrfbf__BaseFaultType_Description::__item = __item;
	}
	return _p;
}

inline _wsrfbf__BaseFaultType_Description * soap_new_set__wsrfbf__BaseFaultType_Description(
	struct soap *soap,
	const std::string& __item,
	std::string *xml__lang)
{
	_wsrfbf__BaseFaultType_Description *_p = soap_new__wsrfbf__BaseFaultType_Description(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_wsrfbf__BaseFaultType_Description::__item = __item;
		_p->_wsrfbf__BaseFaultType_Description::xml__lang = xml__lang;
	}
	return _p;
}

inline int soap_write__wsrfbf__BaseFaultType_Description(struct soap *soap, _wsrfbf__BaseFaultType_Description const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsrfbf:BaseFaultType-Description", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _wsrfbf__BaseFaultType_Description * SOAP_FMAC4 soap_get__wsrfbf__BaseFaultType_Description(struct soap*, _wsrfbf__BaseFaultType_Description *, const char*, const char*);

inline int soap_read__wsrfbf__BaseFaultType_Description(struct soap *soap, _wsrfbf__BaseFaultType_Description *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__wsrfbf__BaseFaultType_Description(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__wsrfbf__BaseFaultType_ErrorCode_DEFINED
#define SOAP_TYPE__wsrfbf__BaseFaultType_ErrorCode_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsrfbf__BaseFaultType_ErrorCode(struct soap*, const char*, int, const _wsrfbf__BaseFaultType_ErrorCode *, const char*);
SOAP_FMAC3 _wsrfbf__BaseFaultType_ErrorCode * SOAP_FMAC4 soap_in__wsrfbf__BaseFaultType_ErrorCode(struct soap*, const char*, _wsrfbf__BaseFaultType_ErrorCode *, const char*);
SOAP_FMAC1 _wsrfbf__BaseFaultType_ErrorCode * SOAP_FMAC2 soap_instantiate__wsrfbf__BaseFaultType_ErrorCode(struct soap*, int, const char*, const char*, size_t*);

inline _wsrfbf__BaseFaultType_ErrorCode * soap_new__wsrfbf__BaseFaultType_ErrorCode(struct soap *soap, int n = -1)
{
	return soap_instantiate__wsrfbf__BaseFaultType_ErrorCode(soap, n, NULL, NULL, NULL);
}

inline _wsrfbf__BaseFaultType_ErrorCode * soap_new_req__wsrfbf__BaseFaultType_ErrorCode(
	struct soap *soap,
	const std::string& dialect)
{
	_wsrfbf__BaseFaultType_ErrorCode *_p = soap_new__wsrfbf__BaseFaultType_ErrorCode(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_wsrfbf__BaseFaultType_ErrorCode::dialect = dialect;
	}
	return _p;
}

inline _wsrfbf__BaseFaultType_ErrorCode * soap_new_set__wsrfbf__BaseFaultType_ErrorCode(
	struct soap *soap,
	const std::string& dialect,
	char *__mixed)
{
	_wsrfbf__BaseFaultType_ErrorCode *_p = soap_new__wsrfbf__BaseFaultType_ErrorCode(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_wsrfbf__BaseFaultType_ErrorCode::dialect = dialect;
		_p->_wsrfbf__BaseFaultType_ErrorCode::__mixed = __mixed;
	}
	return _p;
}

inline int soap_write__wsrfbf__BaseFaultType_ErrorCode(struct soap *soap, _wsrfbf__BaseFaultType_ErrorCode const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsrfbf:BaseFaultType-ErrorCode", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _wsrfbf__BaseFaultType_ErrorCode * SOAP_FMAC4 soap_get__wsrfbf__BaseFaultType_ErrorCode(struct soap*, _wsrfbf__BaseFaultType_ErrorCode *, const char*, const char*);

inline int soap_read__wsrfbf__BaseFaultType_ErrorCode(struct soap *soap, _wsrfbf__BaseFaultType_ErrorCode *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__wsrfbf__BaseFaultType_ErrorCode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__wsnt__Subscribe_SubscriptionPolicy_DEFINED
#define SOAP_TYPE__wsnt__Subscribe_SubscriptionPolicy_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__Subscribe_SubscriptionPolicy(struct soap*, const char*, int, const _wsnt__Subscribe_SubscriptionPolicy *, const char*);
SOAP_FMAC3 _wsnt__Subscribe_SubscriptionPolicy * SOAP_FMAC4 soap_in__wsnt__Subscribe_SubscriptionPolicy(struct soap*, const char*, _wsnt__Subscribe_SubscriptionPolicy *, const char*);
SOAP_FMAC1 _wsnt__Subscribe_SubscriptionPolicy * SOAP_FMAC2 soap_instantiate__wsnt__Subscribe_SubscriptionPolicy(struct soap*, int, const char*, const char*, size_t*);

inline _wsnt__Subscribe_SubscriptionPolicy * soap_new__wsnt__Subscribe_SubscriptionPolicy(struct soap *soap, int n = -1)
{
	return soap_instantiate__wsnt__Subscribe_SubscriptionPolicy(soap, n, NULL, NULL, NULL);
}

inline _wsnt__Subscribe_SubscriptionPolicy * soap_new_req__wsnt__Subscribe_SubscriptionPolicy(
	struct soap *soap)
{
	_wsnt__Subscribe_SubscriptionPolicy *_p = soap_new__wsnt__Subscribe_SubscriptionPolicy(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _wsnt__Subscribe_SubscriptionPolicy * soap_new_set__wsnt__Subscribe_SubscriptionPolicy(
	struct soap *soap,
	const std::vector<char *> & __any)
{
	_wsnt__Subscribe_SubscriptionPolicy *_p = soap_new__wsnt__Subscribe_SubscriptionPolicy(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_wsnt__Subscribe_SubscriptionPolicy::__any = __any;
	}
	return _p;
}

inline int soap_write__wsnt__Subscribe_SubscriptionPolicy(struct soap *soap, _wsnt__Subscribe_SubscriptionPolicy const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:Subscribe-SubscriptionPolicy", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _wsnt__Subscribe_SubscriptionPolicy * SOAP_FMAC4 soap_get__wsnt__Subscribe_SubscriptionPolicy(struct soap*, _wsnt__Subscribe_SubscriptionPolicy *, const char*, const char*);

inline int soap_read__wsnt__Subscribe_SubscriptionPolicy(struct soap *soap, _wsnt__Subscribe_SubscriptionPolicy *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__wsnt__Subscribe_SubscriptionPolicy(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__wsnt__NotificationMessageHolderType_Message_DEFINED
#define SOAP_TYPE__wsnt__NotificationMessageHolderType_Message_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__NotificationMessageHolderType_Message(struct soap*, const char*, int, const _wsnt__NotificationMessageHolderType_Message *, const char*);
SOAP_FMAC3 _wsnt__NotificationMessageHolderType_Message * SOAP_FMAC4 soap_in__wsnt__NotificationMessageHolderType_Message(struct soap*, const char*, _wsnt__NotificationMessageHolderType_Message *, const char*);
SOAP_FMAC1 _wsnt__NotificationMessageHolderType_Message * SOAP_FMAC2 soap_instantiate__wsnt__NotificationMessageHolderType_Message(struct soap*, int, const char*, const char*, size_t*);

inline _wsnt__NotificationMessageHolderType_Message * soap_new__wsnt__NotificationMessageHolderType_Message(struct soap *soap, int n = -1)
{
	return soap_instantiate__wsnt__NotificationMessageHolderType_Message(soap, n, NULL, NULL, NULL);
}

inline _wsnt__NotificationMessageHolderType_Message * soap_new_req__wsnt__NotificationMessageHolderType_Message(
	struct soap *soap)
{
	_wsnt__NotificationMessageHolderType_Message *_p = soap_new__wsnt__NotificationMessageHolderType_Message(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _wsnt__NotificationMessageHolderType_Message * soap_new_set__wsnt__NotificationMessageHolderType_Message(
	struct soap *soap,
	char *__any)
{
	_wsnt__NotificationMessageHolderType_Message *_p = soap_new__wsnt__NotificationMessageHolderType_Message(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_wsnt__NotificationMessageHolderType_Message::__any = __any;
	}
	return _p;
}

inline int soap_write__wsnt__NotificationMessageHolderType_Message(struct soap *soap, _wsnt__NotificationMessageHolderType_Message const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:NotificationMessageHolderType-Message", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _wsnt__NotificationMessageHolderType_Message * SOAP_FMAC4 soap_get__wsnt__NotificationMessageHolderType_Message(struct soap*, _wsnt__NotificationMessageHolderType_Message *, const char*, const char*);

inline int soap_read__wsnt__NotificationMessageHolderType_Message(struct soap *soap, _wsnt__NotificationMessageHolderType_Message *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__wsnt__NotificationMessageHolderType_Message(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tt__union_EventStream_DEFINED
#define SOAP_TYPE___tt__union_EventStream_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tt__union_EventStream(struct soap*, const char*, int, const __tt__union_EventStream *, const char*);
SOAP_FMAC3 __tt__union_EventStream * SOAP_FMAC4 soap_in___tt__union_EventStream(struct soap*, const char*, __tt__union_EventStream *, const char*);
SOAP_FMAC1 __tt__union_EventStream * SOAP_FMAC2 soap_instantiate___tt__union_EventStream(struct soap*, int, const char*, const char*, size_t*);

inline __tt__union_EventStream * soap_new___tt__union_EventStream(struct soap *soap, int n = -1)
{
	return soap_instantiate___tt__union_EventStream(soap, n, NULL, NULL, NULL);
}

inline __tt__union_EventStream * soap_new_req___tt__union_EventStream(
	struct soap *soap,
	const union _tt__union_EventStream& union_EventStream)
{
	__tt__union_EventStream *_p = soap_new___tt__union_EventStream(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->__tt__union_EventStream::union_EventStream = union_EventStream;
	}
	return _p;
}

inline __tt__union_EventStream * soap_new_set___tt__union_EventStream(
	struct soap *soap,
	int __union_EventStream,
	const union _tt__union_EventStream& union_EventStream)
{
	__tt__union_EventStream *_p = soap_new___tt__union_EventStream(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->__tt__union_EventStream::__union_EventStream = __union_EventStream;
		_p->__tt__union_EventStream::union_EventStream = union_EventStream;
	}
	return _p;
}

inline int soap_write___tt__union_EventStream(struct soap *soap, __tt__union_EventStream const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-tt:union-EventStream", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 __tt__union_EventStream * SOAP_FMAC4 soap_get___tt__union_EventStream(struct soap*, __tt__union_EventStream *, const char*, const char*);

inline int soap_read___tt__union_EventStream(struct soap *soap, __tt__union_EventStream *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get___tt__union_EventStream(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tt__union_PTZStream_DEFINED
#define SOAP_TYPE___tt__union_PTZStream_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tt__union_PTZStream(struct soap*, const char*, int, const __tt__union_PTZStream *, const char*);
SOAP_FMAC3 __tt__union_PTZStream * SOAP_FMAC4 soap_in___tt__union_PTZStream(struct soap*, const char*, __tt__union_PTZStream *, const char*);
SOAP_FMAC1 __tt__union_PTZStream * SOAP_FMAC2 soap_instantiate___tt__union_PTZStream(struct soap*, int, const char*, const char*, size_t*);

inline __tt__union_PTZStream * soap_new___tt__union_PTZStream(struct soap *soap, int n = -1)
{
	return soap_instantiate___tt__union_PTZStream(soap, n, NULL, NULL, NULL);
}

inline __tt__union_PTZStream * soap_new_req___tt__union_PTZStream(
	struct soap *soap,
	const union _tt__union_PTZStream& union_PTZStream)
{
	__tt__union_PTZStream *_p = soap_new___tt__union_PTZStream(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->__tt__union_PTZStream::union_PTZStream = union_PTZStream;
	}
	return _p;
}

inline __tt__union_PTZStream * soap_new_set___tt__union_PTZStream(
	struct soap *soap,
	int __union_PTZStream,
	const union _tt__union_PTZStream& union_PTZStream)
{
	__tt__union_PTZStream *_p = soap_new___tt__union_PTZStream(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->__tt__union_PTZStream::__union_PTZStream = __union_PTZStream;
		_p->__tt__union_PTZStream::union_PTZStream = union_PTZStream;
	}
	return _p;
}

inline int soap_write___tt__union_PTZStream(struct soap *soap, __tt__union_PTZStream const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-tt:union-PTZStream", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 __tt__union_PTZStream * SOAP_FMAC4 soap_get___tt__union_PTZStream(struct soap*, __tt__union_PTZStream *, const char*, const char*);

inline int soap_read___tt__union_PTZStream(struct soap *soap, __tt__union_PTZStream *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get___tt__union_PTZStream(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tt__union_VideoAnalyticsStream_DEFINED
#define SOAP_TYPE___tt__union_VideoAnalyticsStream_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tt__union_VideoAnalyticsStream(struct soap*, const char*, int, const __tt__union_VideoAnalyticsStream *, const char*);
SOAP_FMAC3 __tt__union_VideoAnalyticsStream * SOAP_FMAC4 soap_in___tt__union_VideoAnalyticsStream(struct soap*, const char*, __tt__union_VideoAnalyticsStream *, const char*);
SOAP_FMAC1 __tt__union_VideoAnalyticsStream * SOAP_FMAC2 soap_instantiate___tt__union_VideoAnalyticsStream(struct soap*, int, const char*, const char*, size_t*);

inline __tt__union_VideoAnalyticsStream * soap_new___tt__union_VideoAnalyticsStream(struct soap *soap, int n = -1)
{
	return soap_instantiate___tt__union_VideoAnalyticsStream(soap, n, NULL, NULL, NULL);
}

inline __tt__union_VideoAnalyticsStream * soap_new_req___tt__union_VideoAnalyticsStream(
	struct soap *soap,
	const union _tt__union_VideoAnalyticsStream& union_VideoAnalyticsStream)
{
	__tt__union_VideoAnalyticsStream *_p = soap_new___tt__union_VideoAnalyticsStream(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->__tt__union_VideoAnalyticsStream::union_VideoAnalyticsStream = union_VideoAnalyticsStream;
	}
	return _p;
}

inline __tt__union_VideoAnalyticsStream * soap_new_set___tt__union_VideoAnalyticsStream(
	struct soap *soap,
	int __union_VideoAnalyticsStream,
	const union _tt__union_VideoAnalyticsStream& union_VideoAnalyticsStream)
{
	__tt__union_VideoAnalyticsStream *_p = soap_new___tt__union_VideoAnalyticsStream(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->__tt__union_VideoAnalyticsStream::__union_VideoAnalyticsStream = __union_VideoAnalyticsStream;
		_p->__tt__union_VideoAnalyticsStream::union_VideoAnalyticsStream = union_VideoAnalyticsStream;
	}
	return _p;
}

inline int soap_write___tt__union_VideoAnalyticsStream(struct soap *soap, __tt__union_VideoAnalyticsStream const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-tt:union-VideoAnalyticsStream", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 __tt__union_VideoAnalyticsStream * SOAP_FMAC4 soap_get___tt__union_VideoAnalyticsStream(struct soap*, __tt__union_VideoAnalyticsStream *, const char*, const char*);

inline int soap_read___tt__union_VideoAnalyticsStream(struct soap *soap, __tt__union_VideoAnalyticsStream *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get___tt__union_VideoAnalyticsStream(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tt__union_MetadataStream_DEFINED
#define SOAP_TYPE___tt__union_MetadataStream_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tt__union_MetadataStream(struct soap*, const char*, int, const __tt__union_MetadataStream *, const char*);
SOAP_FMAC3 __tt__union_MetadataStream * SOAP_FMAC4 soap_in___tt__union_MetadataStream(struct soap*, const char*, __tt__union_MetadataStream *, const char*);
SOAP_FMAC1 __tt__union_MetadataStream * SOAP_FMAC2 soap_instantiate___tt__union_MetadataStream(struct soap*, int, const char*, const char*, size_t*);

inline __tt__union_MetadataStream * soap_new___tt__union_MetadataStream(struct soap *soap, int n = -1)
{
	return soap_instantiate___tt__union_MetadataStream(soap, n, NULL, NULL, NULL);
}

inline __tt__union_MetadataStream * soap_new_req___tt__union_MetadataStream(
	struct soap *soap,
	const union _tt__union_MetadataStream& union_MetadataStream)
{
	__tt__union_MetadataStream *_p = soap_new___tt__union_MetadataStream(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->__tt__union_MetadataStream::union_MetadataStream = union_MetadataStream;
	}
	return _p;
}

inline __tt__union_MetadataStream * soap_new_set___tt__union_MetadataStream(
	struct soap *soap,
	int __union_MetadataStream,
	const union _tt__union_MetadataStream& union_MetadataStream)
{
	__tt__union_MetadataStream *_p = soap_new___tt__union_MetadataStream(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->__tt__union_MetadataStream::__union_MetadataStream = __union_MetadataStream;
		_p->__tt__union_MetadataStream::union_MetadataStream = union_MetadataStream;
	}
	return _p;
}

inline int soap_write___tt__union_MetadataStream(struct soap *soap, __tt__union_MetadataStream const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-tt:union-MetadataStream", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 __tt__union_MetadataStream * SOAP_FMAC4 soap_get___tt__union_MetadataStream(struct soap*, __tt__union_MetadataStream *, const char*, const char*);

inline int soap_read___tt__union_MetadataStream(struct soap *soap, __tt__union_MetadataStream *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get___tt__union_MetadataStream(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tt__ConfigDescription_Messages_DEFINED
#define SOAP_TYPE__tt__ConfigDescription_Messages_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tt__ConfigDescription_Messages(struct soap*, const char*, int, const _tt__ConfigDescription_Messages *, const char*);
SOAP_FMAC3 _tt__ConfigDescription_Messages * SOAP_FMAC4 soap_in__tt__ConfigDescription_Messages(struct soap*, const char*, _tt__ConfigDescription_Messages *, const char*);
SOAP_FMAC1 _tt__ConfigDescription_Messages * SOAP_FMAC2 soap_instantiate__tt__ConfigDescription_Messages(struct soap*, int, const char*, const char*, size_t*);

inline _tt__ConfigDescription_Messages * soap_new__tt__ConfigDescription_Messages(struct soap *soap, int n = -1)
{
	return soap_instantiate__tt__ConfigDescription_Messages(soap, n, NULL, NULL, NULL);
}

inline _tt__ConfigDescription_Messages * soap_new_req__tt__ConfigDescription_Messages(
	struct soap *soap,
	const std::string& ParentTopic)
{
	_tt__ConfigDescription_Messages *_p = soap_new__tt__ConfigDescription_Messages(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tt__ConfigDescription_Messages::ParentTopic = ParentTopic;
	}
	return _p;
}

inline _tt__ConfigDescription_Messages * soap_new_set__tt__ConfigDescription_Messages(
	struct soap *soap,
	tt__ItemListDescription *Source,
	tt__ItemListDescription *Key,
	tt__ItemListDescription *Data,
	tt__MessageDescriptionExtension *Extension,
	bool *IsProperty,
	char *__anyAttribute,
	const std::string& ParentTopic)
{
	_tt__ConfigDescription_Messages *_p = soap_new__tt__ConfigDescription_Messages(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tt__ConfigDescription_Messages::Source = Source;
		_p->_tt__ConfigDescription_Messages::Key = Key;
		_p->_tt__ConfigDescription_Messages::Data = Data;
		_p->_tt__ConfigDescription_Messages::Extension = Extension;
		_p->_tt__ConfigDescription_Messages::IsProperty = IsProperty;
		_p->_tt__ConfigDescription_Messages::__anyAttribute = __anyAttribute;
		_p->_tt__ConfigDescription_Messages::ParentTopic = ParentTopic;
	}
	return _p;
}

inline int soap_write__tt__ConfigDescription_Messages(struct soap *soap, _tt__ConfigDescription_Messages const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ConfigDescription-Messages", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tt__ConfigDescription_Messages * SOAP_FMAC4 soap_get__tt__ConfigDescription_Messages(struct soap*, _tt__ConfigDescription_Messages *, const char*, const char*);

inline int soap_read__tt__ConfigDescription_Messages(struct soap *soap, _tt__ConfigDescription_Messages *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tt__ConfigDescription_Messages(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tt__Behaviour_Idle_DEFINED
#define SOAP_TYPE__tt__Behaviour_Idle_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tt__Behaviour_Idle(struct soap*, const char*, int, const _tt__Behaviour_Idle *, const char*);
SOAP_FMAC3 _tt__Behaviour_Idle * SOAP_FMAC4 soap_in__tt__Behaviour_Idle(struct soap*, const char*, _tt__Behaviour_Idle *, const char*);
SOAP_FMAC1 _tt__Behaviour_Idle * SOAP_FMAC2 soap_instantiate__tt__Behaviour_Idle(struct soap*, int, const char*, const char*, size_t*);

inline _tt__Behaviour_Idle * soap_new__tt__Behaviour_Idle(struct soap *soap, int n = -1)
{
	return soap_instantiate__tt__Behaviour_Idle(soap, n, NULL, NULL, NULL);
}

inline _tt__Behaviour_Idle * soap_new_req__tt__Behaviour_Idle(
	struct soap *soap)
{
	_tt__Behaviour_Idle *_p = soap_new__tt__Behaviour_Idle(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tt__Behaviour_Idle * soap_new_set__tt__Behaviour_Idle(
	struct soap *soap,
	const std::vector<char *> & __any)
{
	_tt__Behaviour_Idle *_p = soap_new__tt__Behaviour_Idle(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tt__Behaviour_Idle::__any = __any;
	}
	return _p;
}

inline int soap_write__tt__Behaviour_Idle(struct soap *soap, _tt__Behaviour_Idle const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Behaviour-Idle", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tt__Behaviour_Idle * SOAP_FMAC4 soap_get__tt__Behaviour_Idle(struct soap*, _tt__Behaviour_Idle *, const char*, const char*);

inline int soap_read__tt__Behaviour_Idle(struct soap *soap, _tt__Behaviour_Idle *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tt__Behaviour_Idle(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tt__Behaviour_Removed_DEFINED
#define SOAP_TYPE__tt__Behaviour_Removed_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tt__Behaviour_Removed(struct soap*, const char*, int, const _tt__Behaviour_Removed *, const char*);
SOAP_FMAC3 _tt__Behaviour_Removed * SOAP_FMAC4 soap_in__tt__Behaviour_Removed(struct soap*, const char*, _tt__Behaviour_Removed *, const char*);
SOAP_FMAC1 _tt__Behaviour_Removed * SOAP_FMAC2 soap_instantiate__tt__Behaviour_Removed(struct soap*, int, const char*, const char*, size_t*);

inline _tt__Behaviour_Removed * soap_new__tt__Behaviour_Removed(struct soap *soap, int n = -1)
{
	return soap_instantiate__tt__Behaviour_Removed(soap, n, NULL, NULL, NULL);
}

inline _tt__Behaviour_Removed * soap_new_req__tt__Behaviour_Removed(
	struct soap *soap)
{
	_tt__Behaviour_Removed *_p = soap_new__tt__Behaviour_Removed(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tt__Behaviour_Removed * soap_new_set__tt__Behaviour_Removed(
	struct soap *soap,
	const std::vector<char *> & __any)
{
	_tt__Behaviour_Removed *_p = soap_new__tt__Behaviour_Removed(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tt__Behaviour_Removed::__any = __any;
	}
	return _p;
}

inline int soap_write__tt__Behaviour_Removed(struct soap *soap, _tt__Behaviour_Removed const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Behaviour-Removed", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tt__Behaviour_Removed * SOAP_FMAC4 soap_get__tt__Behaviour_Removed(struct soap*, _tt__Behaviour_Removed *, const char*, const char*);

inline int soap_read__tt__Behaviour_Removed(struct soap *soap, _tt__Behaviour_Removed *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tt__Behaviour_Removed(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tt__ClassDescriptor_ClassCandidate_DEFINED
#define SOAP_TYPE__tt__ClassDescriptor_ClassCandidate_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tt__ClassDescriptor_ClassCandidate(struct soap*, const char*, int, const _tt__ClassDescriptor_ClassCandidate *, const char*);
SOAP_FMAC3 _tt__ClassDescriptor_ClassCandidate * SOAP_FMAC4 soap_in__tt__ClassDescriptor_ClassCandidate(struct soap*, const char*, _tt__ClassDescriptor_ClassCandidate *, const char*);
SOAP_FMAC1 _tt__ClassDescriptor_ClassCandidate * SOAP_FMAC2 soap_instantiate__tt__ClassDescriptor_ClassCandidate(struct soap*, int, const char*, const char*, size_t*);

inline _tt__ClassDescriptor_ClassCandidate * soap_new__tt__ClassDescriptor_ClassCandidate(struct soap *soap, int n = -1)
{
	return soap_instantiate__tt__ClassDescriptor_ClassCandidate(soap, n, NULL, NULL, NULL);
}

inline _tt__ClassDescriptor_ClassCandidate * soap_new_req__tt__ClassDescriptor_ClassCandidate(
	struct soap *soap,
	enum tt__ClassType Type,
	float Likelihood)
{
	_tt__ClassDescriptor_ClassCandidate *_p = soap_new__tt__ClassDescriptor_ClassCandidate(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tt__ClassDescriptor_ClassCandidate::Type = Type;
		_p->_tt__ClassDescriptor_ClassCandidate::Likelihood = Likelihood;
	}
	return _p;
}

inline _tt__ClassDescriptor_ClassCandidate * soap_new_set__tt__ClassDescriptor_ClassCandidate(
	struct soap *soap,
	enum tt__ClassType Type,
	float Likelihood)
{
	_tt__ClassDescriptor_ClassCandidate *_p = soap_new__tt__ClassDescriptor_ClassCandidate(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tt__ClassDescriptor_ClassCandidate::Type = Type;
		_p->_tt__ClassDescriptor_ClassCandidate::Likelihood = Likelihood;
	}
	return _p;
}

inline int soap_write__tt__ClassDescriptor_ClassCandidate(struct soap *soap, _tt__ClassDescriptor_ClassCandidate const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ClassDescriptor-ClassCandidate", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tt__ClassDescriptor_ClassCandidate * SOAP_FMAC4 soap_get__tt__ClassDescriptor_ClassCandidate(struct soap*, _tt__ClassDescriptor_ClassCandidate *, const char*, const char*);

inline int soap_read__tt__ClassDescriptor_ClassCandidate(struct soap *soap, _tt__ClassDescriptor_ClassCandidate *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tt__ClassDescriptor_ClassCandidate(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tt__ColorDescriptor_ColorCluster_DEFINED
#define SOAP_TYPE__tt__ColorDescriptor_ColorCluster_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tt__ColorDescriptor_ColorCluster(struct soap*, const char*, int, const _tt__ColorDescriptor_ColorCluster *, const char*);
SOAP_FMAC3 _tt__ColorDescriptor_ColorCluster * SOAP_FMAC4 soap_in__tt__ColorDescriptor_ColorCluster(struct soap*, const char*, _tt__ColorDescriptor_ColorCluster *, const char*);
SOAP_FMAC1 _tt__ColorDescriptor_ColorCluster * SOAP_FMAC2 soap_instantiate__tt__ColorDescriptor_ColorCluster(struct soap*, int, const char*, const char*, size_t*);

inline _tt__ColorDescriptor_ColorCluster * soap_new__tt__ColorDescriptor_ColorCluster(struct soap *soap, int n = -1)
{
	return soap_instantiate__tt__ColorDescriptor_ColorCluster(soap, n, NULL, NULL, NULL);
}

inline _tt__ColorDescriptor_ColorCluster * soap_new_req__tt__ColorDescriptor_ColorCluster(
	struct soap *soap,
	tt__Color *Color)
{
	_tt__ColorDescriptor_ColorCluster *_p = soap_new__tt__ColorDescriptor_ColorCluster(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tt__ColorDescriptor_ColorCluster::Color = Color;
	}
	return _p;
}

inline _tt__ColorDescriptor_ColorCluster * soap_new_set__tt__ColorDescriptor_ColorCluster(
	struct soap *soap,
	tt__Color *Color,
	float *Weight,
	tt__ColorCovariance *Covariance)
{
	_tt__ColorDescriptor_ColorCluster *_p = soap_new__tt__ColorDescriptor_ColorCluster(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tt__ColorDescriptor_ColorCluster::Color = Color;
		_p->_tt__ColorDescriptor_ColorCluster::Weight = Weight;
		_p->_tt__ColorDescriptor_ColorCluster::Covariance = Covariance;
	}
	return _p;
}

inline int soap_write__tt__ColorDescriptor_ColorCluster(struct soap *soap, _tt__ColorDescriptor_ColorCluster const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ColorDescriptor-ColorCluster", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tt__ColorDescriptor_ColorCluster * SOAP_FMAC4 soap_get__tt__ColorDescriptor_ColorCluster(struct soap*, _tt__ColorDescriptor_ColorCluster *, const char*, const char*);

inline int soap_read__tt__ColorDescriptor_ColorCluster(struct soap *soap, _tt__ColorDescriptor_ColorCluster *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tt__ColorDescriptor_ColorCluster(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tt__ItemListDescription_ElementItemDescription_DEFINED
#define SOAP_TYPE__tt__ItemListDescription_ElementItemDescription_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tt__ItemListDescription_ElementItemDescription(struct soap*, const char*, int, const _tt__ItemListDescription_ElementItemDescription *, const char*);
SOAP_FMAC3 _tt__ItemListDescription_ElementItemDescription * SOAP_FMAC4 soap_in__tt__ItemListDescription_ElementItemDescription(struct soap*, const char*, _tt__ItemListDescription_ElementItemDescription *, const char*);
SOAP_FMAC1 _tt__ItemListDescription_ElementItemDescription * SOAP_FMAC2 soap_instantiate__tt__ItemListDescription_ElementItemDescription(struct soap*, int, const char*, const char*, size_t*);

inline _tt__ItemListDescription_ElementItemDescription * soap_new__tt__ItemListDescription_ElementItemDescription(struct soap *soap, int n = -1)
{
	return soap_instantiate__tt__ItemListDescription_ElementItemDescription(soap, n, NULL, NULL, NULL);
}

inline _tt__ItemListDescription_ElementItemDescription * soap_new_req__tt__ItemListDescription_ElementItemDescription(
	struct soap *soap,
	const std::string& Name,
	const std::string& Type)
{
	_tt__ItemListDescription_ElementItemDescription *_p = soap_new__tt__ItemListDescription_ElementItemDescription(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tt__ItemListDescription_ElementItemDescription::Name = Name;
		_p->_tt__ItemListDescription_ElementItemDescription::Type = Type;
	}
	return _p;
}

inline _tt__ItemListDescription_ElementItemDescription * soap_new_set__tt__ItemListDescription_ElementItemDescription(
	struct soap *soap,
	const std::string& Name,
	const std::string& Type)
{
	_tt__ItemListDescription_ElementItemDescription *_p = soap_new__tt__ItemListDescription_ElementItemDescription(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tt__ItemListDescription_ElementItemDescription::Name = Name;
		_p->_tt__ItemListDescription_ElementItemDescription::Type = Type;
	}
	return _p;
}

inline int soap_write__tt__ItemListDescription_ElementItemDescription(struct soap *soap, _tt__ItemListDescription_ElementItemDescription const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ItemListDescription-ElementItemDescription", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tt__ItemListDescription_ElementItemDescription * SOAP_FMAC4 soap_get__tt__ItemListDescription_ElementItemDescription(struct soap*, _tt__ItemListDescription_ElementItemDescription *, const char*, const char*);

inline int soap_read__tt__ItemListDescription_ElementItemDescription(struct soap *soap, _tt__ItemListDescription_ElementItemDescription *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tt__ItemListDescription_ElementItemDescription(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tt__ItemListDescription_SimpleItemDescription_DEFINED
#define SOAP_TYPE__tt__ItemListDescription_SimpleItemDescription_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tt__ItemListDescription_SimpleItemDescription(struct soap*, const char*, int, const _tt__ItemListDescription_SimpleItemDescription *, const char*);
SOAP_FMAC3 _tt__ItemListDescription_SimpleItemDescription * SOAP_FMAC4 soap_in__tt__ItemListDescription_SimpleItemDescription(struct soap*, const char*, _tt__ItemListDescription_SimpleItemDescription *, const char*);
SOAP_FMAC1 _tt__ItemListDescription_SimpleItemDescription * SOAP_FMAC2 soap_instantiate__tt__ItemListDescription_SimpleItemDescription(struct soap*, int, const char*, const char*, size_t*);

inline _tt__ItemListDescription_SimpleItemDescription * soap_new__tt__ItemListDescription_SimpleItemDescription(struct soap *soap, int n = -1)
{
	return soap_instantiate__tt__ItemListDescription_SimpleItemDescription(soap, n, NULL, NULL, NULL);
}

inline _tt__ItemListDescription_SimpleItemDescription * soap_new_req__tt__ItemListDescription_SimpleItemDescription(
	struct soap *soap,
	const std::string& Name,
	const std::string& Type)
{
	_tt__ItemListDescription_SimpleItemDescription *_p = soap_new__tt__ItemListDescription_SimpleItemDescription(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tt__ItemListDescription_SimpleItemDescription::Name = Name;
		_p->_tt__ItemListDescription_SimpleItemDescription::Type = Type;
	}
	return _p;
}

inline _tt__ItemListDescription_SimpleItemDescription * soap_new_set__tt__ItemListDescription_SimpleItemDescription(
	struct soap *soap,
	const std::string& Name,
	const std::string& Type)
{
	_tt__ItemListDescription_SimpleItemDescription *_p = soap_new__tt__ItemListDescription_SimpleItemDescription(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tt__ItemListDescription_SimpleItemDescription::Name = Name;
		_p->_tt__ItemListDescription_SimpleItemDescription::Type = Type;
	}
	return _p;
}

inline int soap_write__tt__ItemListDescription_SimpleItemDescription(struct soap *soap, _tt__ItemListDescription_SimpleItemDescription const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ItemListDescription-SimpleItemDescription", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tt__ItemListDescription_SimpleItemDescription * SOAP_FMAC4 soap_get__tt__ItemListDescription_SimpleItemDescription(struct soap*, _tt__ItemListDescription_SimpleItemDescription *, const char*, const char*);

inline int soap_read__tt__ItemListDescription_SimpleItemDescription(struct soap *soap, _tt__ItemListDescription_SimpleItemDescription *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tt__ItemListDescription_SimpleItemDescription(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tt__ItemList_ElementItem_DEFINED
#define SOAP_TYPE__tt__ItemList_ElementItem_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tt__ItemList_ElementItem(struct soap*, const char*, int, const _tt__ItemList_ElementItem *, const char*);
SOAP_FMAC3 _tt__ItemList_ElementItem * SOAP_FMAC4 soap_in__tt__ItemList_ElementItem(struct soap*, const char*, _tt__ItemList_ElementItem *, const char*);
SOAP_FMAC1 _tt__ItemList_ElementItem * SOAP_FMAC2 soap_instantiate__tt__ItemList_ElementItem(struct soap*, int, const char*, const char*, size_t*);

inline _tt__ItemList_ElementItem * soap_new__tt__ItemList_ElementItem(struct soap *soap, int n = -1)
{
	return soap_instantiate__tt__ItemList_ElementItem(soap, n, NULL, NULL, NULL);
}

inline _tt__ItemList_ElementItem * soap_new_req__tt__ItemList_ElementItem(
	struct soap *soap,
	const std::string& Name)
{
	_tt__ItemList_ElementItem *_p = soap_new__tt__ItemList_ElementItem(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tt__ItemList_ElementItem::Name = Name;
	}
	return _p;
}

inline _tt__ItemList_ElementItem * soap_new_set__tt__ItemList_ElementItem(
	struct soap *soap,
	const std::vector<char *> & __any,
	const std::string& Name)
{
	_tt__ItemList_ElementItem *_p = soap_new__tt__ItemList_ElementItem(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tt__ItemList_ElementItem::__any = __any;
		_p->_tt__ItemList_ElementItem::Name = Name;
	}
	return _p;
}

inline int soap_write__tt__ItemList_ElementItem(struct soap *soap, _tt__ItemList_ElementItem const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ItemList-ElementItem", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tt__ItemList_ElementItem * SOAP_FMAC4 soap_get__tt__ItemList_ElementItem(struct soap*, _tt__ItemList_ElementItem *, const char*, const char*);

inline int soap_read__tt__ItemList_ElementItem(struct soap *soap, _tt__ItemList_ElementItem *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tt__ItemList_ElementItem(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tt__ItemList_SimpleItem_DEFINED
#define SOAP_TYPE__tt__ItemList_SimpleItem_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tt__ItemList_SimpleItem(struct soap*, const char*, int, const _tt__ItemList_SimpleItem *, const char*);
SOAP_FMAC3 _tt__ItemList_SimpleItem * SOAP_FMAC4 soap_in__tt__ItemList_SimpleItem(struct soap*, const char*, _tt__ItemList_SimpleItem *, const char*);
SOAP_FMAC1 _tt__ItemList_SimpleItem * SOAP_FMAC2 soap_instantiate__tt__ItemList_SimpleItem(struct soap*, int, const char*, const char*, size_t*);

inline _tt__ItemList_SimpleItem * soap_new__tt__ItemList_SimpleItem(struct soap *soap, int n = -1)
{
	return soap_instantiate__tt__ItemList_SimpleItem(soap, n, NULL, NULL, NULL);
}

inline _tt__ItemList_SimpleItem * soap_new_req__tt__ItemList_SimpleItem(
	struct soap *soap,
	const std::string& Name,
	const std::string& Value)
{
	_tt__ItemList_SimpleItem *_p = soap_new__tt__ItemList_SimpleItem(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tt__ItemList_SimpleItem::Name = Name;
		_p->_tt__ItemList_SimpleItem::Value = Value;
	}
	return _p;
}

inline _tt__ItemList_SimpleItem * soap_new_set__tt__ItemList_SimpleItem(
	struct soap *soap,
	const std::string& Name,
	const std::string& Value)
{
	_tt__ItemList_SimpleItem *_p = soap_new__tt__ItemList_SimpleItem(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tt__ItemList_SimpleItem::Name = Name;
		_p->_tt__ItemList_SimpleItem::Value = Value;
	}
	return _p;
}

inline int soap_write__tt__ItemList_SimpleItem(struct soap *soap, _tt__ItemList_SimpleItem const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ItemList-SimpleItem", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tt__ItemList_SimpleItem * SOAP_FMAC4 soap_get__tt__ItemList_SimpleItem(struct soap*, _tt__ItemList_SimpleItem *, const char*, const char*);

inline int soap_read__tt__ItemList_SimpleItem(struct soap *soap, _tt__ItemList_SimpleItem *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tt__ItemList_SimpleItem(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tt__EventSubscription_SubscriptionPolicy_DEFINED
#define SOAP_TYPE__tt__EventSubscription_SubscriptionPolicy_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tt__EventSubscription_SubscriptionPolicy(struct soap*, const char*, int, const _tt__EventSubscription_SubscriptionPolicy *, const char*);
SOAP_FMAC3 _tt__EventSubscription_SubscriptionPolicy * SOAP_FMAC4 soap_in__tt__EventSubscription_SubscriptionPolicy(struct soap*, const char*, _tt__EventSubscription_SubscriptionPolicy *, const char*);
SOAP_FMAC1 _tt__EventSubscription_SubscriptionPolicy * SOAP_FMAC2 soap_instantiate__tt__EventSubscription_SubscriptionPolicy(struct soap*, int, const char*, const char*, size_t*);

inline _tt__EventSubscription_SubscriptionPolicy * soap_new__tt__EventSubscription_SubscriptionPolicy(struct soap *soap, int n = -1)
{
	return soap_instantiate__tt__EventSubscription_SubscriptionPolicy(soap, n, NULL, NULL, NULL);
}

inline _tt__EventSubscription_SubscriptionPolicy * soap_new_req__tt__EventSubscription_SubscriptionPolicy(
	struct soap *soap)
{
	_tt__EventSubscription_SubscriptionPolicy *_p = soap_new__tt__EventSubscription_SubscriptionPolicy(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tt__EventSubscription_SubscriptionPolicy * soap_new_set__tt__EventSubscription_SubscriptionPolicy(
	struct soap *soap,
	const std::vector<char *> & __any)
{
	_tt__EventSubscription_SubscriptionPolicy *_p = soap_new__tt__EventSubscription_SubscriptionPolicy(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tt__EventSubscription_SubscriptionPolicy::__any = __any;
	}
	return _p;
}

inline int soap_write__tt__EventSubscription_SubscriptionPolicy(struct soap *soap, _tt__EventSubscription_SubscriptionPolicy const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:EventSubscription-SubscriptionPolicy", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tt__EventSubscription_SubscriptionPolicy * SOAP_FMAC4 soap_get__tt__EventSubscription_SubscriptionPolicy(struct soap*, _tt__EventSubscription_SubscriptionPolicy *, const char*, const char*);

inline int soap_read__tt__EventSubscription_SubscriptionPolicy(struct soap *soap, _tt__EventSubscription_SubscriptionPolicy *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tt__EventSubscription_SubscriptionPolicy(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__GetSystemUrisResponse_Extension_DEFINED
#define SOAP_TYPE__tds__GetSystemUrisResponse_Extension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetSystemUrisResponse_Extension(struct soap*, const char*, int, const _tds__GetSystemUrisResponse_Extension *, const char*);
SOAP_FMAC3 _tds__GetSystemUrisResponse_Extension * SOAP_FMAC4 soap_in__tds__GetSystemUrisResponse_Extension(struct soap*, const char*, _tds__GetSystemUrisResponse_Extension *, const char*);
SOAP_FMAC1 _tds__GetSystemUrisResponse_Extension * SOAP_FMAC2 soap_instantiate__tds__GetSystemUrisResponse_Extension(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetSystemUrisResponse_Extension * soap_new__tds__GetSystemUrisResponse_Extension(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetSystemUrisResponse_Extension(soap, n, NULL, NULL, NULL);
}

inline _tds__GetSystemUrisResponse_Extension * soap_new_req__tds__GetSystemUrisResponse_Extension(
	struct soap *soap)
{
	_tds__GetSystemUrisResponse_Extension *_p = soap_new__tds__GetSystemUrisResponse_Extension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__GetSystemUrisResponse_Extension * soap_new_set__tds__GetSystemUrisResponse_Extension(
	struct soap *soap,
	const std::vector<char *> & __any)
{
	_tds__GetSystemUrisResponse_Extension *_p = soap_new__tds__GetSystemUrisResponse_Extension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetSystemUrisResponse_Extension::__any = __any;
	}
	return _p;
}

inline int soap_write__tds__GetSystemUrisResponse_Extension(struct soap *soap, _tds__GetSystemUrisResponse_Extension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetSystemUrisResponse-Extension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetSystemUrisResponse_Extension * SOAP_FMAC4 soap_get__tds__GetSystemUrisResponse_Extension(struct soap*, _tds__GetSystemUrisResponse_Extension *, const char*, const char*);

inline int soap_read__tds__GetSystemUrisResponse_Extension(struct soap *soap, _tds__GetSystemUrisResponse_Extension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__GetSystemUrisResponse_Extension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__StorageConfigurationData_Extension_DEFINED
#define SOAP_TYPE__tds__StorageConfigurationData_Extension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__StorageConfigurationData_Extension(struct soap*, const char*, int, const _tds__StorageConfigurationData_Extension *, const char*);
SOAP_FMAC3 _tds__StorageConfigurationData_Extension * SOAP_FMAC4 soap_in__tds__StorageConfigurationData_Extension(struct soap*, const char*, _tds__StorageConfigurationData_Extension *, const char*);
SOAP_FMAC1 _tds__StorageConfigurationData_Extension * SOAP_FMAC2 soap_instantiate__tds__StorageConfigurationData_Extension(struct soap*, int, const char*, const char*, size_t*);

inline _tds__StorageConfigurationData_Extension * soap_new__tds__StorageConfigurationData_Extension(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__StorageConfigurationData_Extension(soap, n, NULL, NULL, NULL);
}

inline _tds__StorageConfigurationData_Extension * soap_new_req__tds__StorageConfigurationData_Extension(
	struct soap *soap)
{
	_tds__StorageConfigurationData_Extension *_p = soap_new__tds__StorageConfigurationData_Extension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__StorageConfigurationData_Extension * soap_new_set__tds__StorageConfigurationData_Extension(
	struct soap *soap,
	const std::vector<char *> & __any)
{
	_tds__StorageConfigurationData_Extension *_p = soap_new__tds__StorageConfigurationData_Extension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__StorageConfigurationData_Extension::__any = __any;
	}
	return _p;
}

inline int soap_write__tds__StorageConfigurationData_Extension(struct soap *soap, _tds__StorageConfigurationData_Extension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:StorageConfigurationData-Extension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__StorageConfigurationData_Extension * SOAP_FMAC4 soap_get__tds__StorageConfigurationData_Extension(struct soap*, _tds__StorageConfigurationData_Extension *, const char*, const char*);

inline int soap_read__tds__StorageConfigurationData_Extension(struct soap *soap, _tds__StorageConfigurationData_Extension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__StorageConfigurationData_Extension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__UserCredential_Extension_DEFINED
#define SOAP_TYPE__tds__UserCredential_Extension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__UserCredential_Extension(struct soap*, const char*, int, const _tds__UserCredential_Extension *, const char*);
SOAP_FMAC3 _tds__UserCredential_Extension * SOAP_FMAC4 soap_in__tds__UserCredential_Extension(struct soap*, const char*, _tds__UserCredential_Extension *, const char*);
SOAP_FMAC1 _tds__UserCredential_Extension * SOAP_FMAC2 soap_instantiate__tds__UserCredential_Extension(struct soap*, int, const char*, const char*, size_t*);

inline _tds__UserCredential_Extension * soap_new__tds__UserCredential_Extension(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__UserCredential_Extension(soap, n, NULL, NULL, NULL);
}

inline _tds__UserCredential_Extension * soap_new_req__tds__UserCredential_Extension(
	struct soap *soap)
{
	_tds__UserCredential_Extension *_p = soap_new__tds__UserCredential_Extension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__UserCredential_Extension * soap_new_set__tds__UserCredential_Extension(
	struct soap *soap,
	const std::vector<char *> & __any)
{
	_tds__UserCredential_Extension *_p = soap_new__tds__UserCredential_Extension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__UserCredential_Extension::__any = __any;
	}
	return _p;
}

inline int soap_write__tds__UserCredential_Extension(struct soap *soap, _tds__UserCredential_Extension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:UserCredential-Extension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__UserCredential_Extension * SOAP_FMAC4 soap_get__tds__UserCredential_Extension(struct soap*, _tds__UserCredential_Extension *, const char*, const char*);

inline int soap_read__tds__UserCredential_Extension(struct soap *soap, _tds__UserCredential_Extension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__UserCredential_Extension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__Service_Capabilities_DEFINED
#define SOAP_TYPE__tds__Service_Capabilities_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__Service_Capabilities(struct soap*, const char*, int, const _tds__Service_Capabilities *, const char*);
SOAP_FMAC3 _tds__Service_Capabilities * SOAP_FMAC4 soap_in__tds__Service_Capabilities(struct soap*, const char*, _tds__Service_Capabilities *, const char*);
SOAP_FMAC1 _tds__Service_Capabilities * SOAP_FMAC2 soap_instantiate__tds__Service_Capabilities(struct soap*, int, const char*, const char*, size_t*);

inline _tds__Service_Capabilities * soap_new__tds__Service_Capabilities(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__Service_Capabilities(soap, n, NULL, NULL, NULL);
}

inline _tds__Service_Capabilities * soap_new_req__tds__Service_Capabilities(
	struct soap *soap)
{
	_tds__Service_Capabilities *_p = soap_new__tds__Service_Capabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__Service_Capabilities * soap_new_set__tds__Service_Capabilities(
	struct soap *soap,
	char *__any)
{
	_tds__Service_Capabilities *_p = soap_new__tds__Service_Capabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__Service_Capabilities::__any = __any;
	}
	return _p;
}

inline int soap_write__tds__Service_Capabilities(struct soap *soap, _tds__Service_Capabilities const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:Service-Capabilities", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__Service_Capabilities * SOAP_FMAC4 soap_get__tds__Service_Capabilities(struct soap*, _tds__Service_Capabilities *, const char*, const char*);

inline int soap_read__tds__Service_Capabilities(struct soap *soap, _tds__Service_Capabilities *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__Service_Capabilities(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__RecordingJobReference___DEFINED
#define SOAP_TYPE_tt__RecordingJobReference___DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RecordingJobReference__(struct soap*, const char*, int, const tt__RecordingJobReference__ *, const char*);
SOAP_FMAC3 tt__RecordingJobReference__ * SOAP_FMAC4 soap_in_tt__RecordingJobReference__(struct soap*, const char*, tt__RecordingJobReference__ *, const char*);
SOAP_FMAC1 tt__RecordingJobReference__ * SOAP_FMAC2 soap_instantiate_tt__RecordingJobReference__(struct soap*, int, const char*, const char*, size_t*);

inline tt__RecordingJobReference__ * soap_new_tt__RecordingJobReference__(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__RecordingJobReference__(soap, n, NULL, NULL, NULL);
}

inline tt__RecordingJobReference__ * soap_new_req_tt__RecordingJobReference__(
	struct soap *soap,
	const std::string& __item)
{
	tt__RecordingJobReference__ *_p = soap_new_tt__RecordingJobReference__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__RecordingJobReference__::__item = __item;
	}
	return _p;
}

inline tt__RecordingJobReference__ * soap_new_set_tt__RecordingJobReference__(
	struct soap *soap,
	const std::string& __item,
	char *__item1)
{
	tt__RecordingJobReference__ *_p = soap_new_tt__RecordingJobReference__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__RecordingJobReference__::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__RecordingJobReference__(struct soap *soap, tt__RecordingJobReference__ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:RecordingJobReference", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__RecordingJobReference__ * SOAP_FMAC4 soap_get_tt__RecordingJobReference__(struct soap*, tt__RecordingJobReference__ *, const char*, const char*);

inline int soap_read_tt__RecordingJobReference__(struct soap *soap, tt__RecordingJobReference__ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__RecordingJobReference__(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif
/* tt__RecordingJobReference is a typedef synonym for tt__ReferenceToken */

#ifndef SOAP_TYPE_tt__RecordingJobReference_DEFINED
#define SOAP_TYPE_tt__RecordingJobReference_DEFINED

#define soap_default_tt__RecordingJobReference(soap, a) soap_default_tt__ReferenceToken(soap, a)


#define soap_serialize_tt__RecordingJobReference soap_serialize_tt__ReferenceToken


#define soap_tt__RecordingJobReference2s soap_tt__ReferenceToken2s


#define soap_out_tt__RecordingJobReference soap_out_tt__ReferenceToken


#define soap_s2tt__RecordingJobReference soap_s2tt__ReferenceToken


#define soap_in_tt__RecordingJobReference soap_in_tt__ReferenceToken


#define soap_instantiate_tt__RecordingJobReference soap_instantiate_tt__ReferenceToken


#define soap_new_tt__RecordingJobReference soap_new_tt__ReferenceToken


#define soap_put_tt__RecordingJobReference soap_put_tt__ReferenceToken


#define soap_write_tt__RecordingJobReference soap_write_tt__ReferenceToken


#define soap_get_tt__RecordingJobReference soap_get_tt__ReferenceToken


#define soap_read_tt__RecordingJobReference soap_read_tt__ReferenceToken

#endif

#ifndef SOAP_TYPE_tt__JobToken___DEFINED
#define SOAP_TYPE_tt__JobToken___DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__JobToken__(struct soap*, const char*, int, const tt__JobToken__ *, const char*);
SOAP_FMAC3 tt__JobToken__ * SOAP_FMAC4 soap_in_tt__JobToken__(struct soap*, const char*, tt__JobToken__ *, const char*);
SOAP_FMAC1 tt__JobToken__ * SOAP_FMAC2 soap_instantiate_tt__JobToken__(struct soap*, int, const char*, const char*, size_t*);

inline tt__JobToken__ * soap_new_tt__JobToken__(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__JobToken__(soap, n, NULL, NULL, NULL);
}

inline tt__JobToken__ * soap_new_req_tt__JobToken__(
	struct soap *soap,
	const std::string& __item)
{
	tt__JobToken__ *_p = soap_new_tt__JobToken__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__JobToken__::__item = __item;
	}
	return _p;
}

inline tt__JobToken__ * soap_new_set_tt__JobToken__(
	struct soap *soap,
	const std::string& __item,
	char *__item1)
{
	tt__JobToken__ *_p = soap_new_tt__JobToken__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__JobToken__::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__JobToken__(struct soap *soap, tt__JobToken__ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:JobToken", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__JobToken__ * SOAP_FMAC4 soap_get_tt__JobToken__(struct soap*, tt__JobToken__ *, const char*, const char*);

inline int soap_read_tt__JobToken__(struct soap *soap, tt__JobToken__ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__JobToken__(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif
/* tt__JobToken is a typedef synonym for tt__ReferenceToken */

#ifndef SOAP_TYPE_tt__JobToken_DEFINED
#define SOAP_TYPE_tt__JobToken_DEFINED

#define soap_default_tt__JobToken(soap, a) soap_default_tt__ReferenceToken(soap, a)


#define soap_serialize_tt__JobToken soap_serialize_tt__ReferenceToken


#define soap_tt__JobToken2s soap_tt__ReferenceToken2s


#define soap_out_tt__JobToken soap_out_tt__ReferenceToken


#define soap_s2tt__JobToken soap_s2tt__ReferenceToken


#define soap_in_tt__JobToken soap_in_tt__ReferenceToken


#define soap_instantiate_tt__JobToken soap_instantiate_tt__ReferenceToken


#define soap_new_tt__JobToken soap_new_tt__ReferenceToken


#define soap_put_tt__JobToken soap_put_tt__ReferenceToken


#define soap_write_tt__JobToken soap_write_tt__ReferenceToken


#define soap_get_tt__JobToken soap_get_tt__ReferenceToken


#define soap_read_tt__JobToken soap_read_tt__ReferenceToken

#endif

#ifndef SOAP_TYPE_tt__TrackReference___DEFINED
#define SOAP_TYPE_tt__TrackReference___DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__TrackReference__(struct soap*, const char*, int, const tt__TrackReference__ *, const char*);
SOAP_FMAC3 tt__TrackReference__ * SOAP_FMAC4 soap_in_tt__TrackReference__(struct soap*, const char*, tt__TrackReference__ *, const char*);
SOAP_FMAC1 tt__TrackReference__ * SOAP_FMAC2 soap_instantiate_tt__TrackReference__(struct soap*, int, const char*, const char*, size_t*);

inline tt__TrackReference__ * soap_new_tt__TrackReference__(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__TrackReference__(soap, n, NULL, NULL, NULL);
}

inline tt__TrackReference__ * soap_new_req_tt__TrackReference__(
	struct soap *soap,
	const std::string& __item)
{
	tt__TrackReference__ *_p = soap_new_tt__TrackReference__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__TrackReference__::__item = __item;
	}
	return _p;
}

inline tt__TrackReference__ * soap_new_set_tt__TrackReference__(
	struct soap *soap,
	const std::string& __item,
	char *__item1)
{
	tt__TrackReference__ *_p = soap_new_tt__TrackReference__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__TrackReference__::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__TrackReference__(struct soap *soap, tt__TrackReference__ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:TrackReference", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__TrackReference__ * SOAP_FMAC4 soap_get_tt__TrackReference__(struct soap*, tt__TrackReference__ *, const char*, const char*);

inline int soap_read_tt__TrackReference__(struct soap *soap, tt__TrackReference__ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__TrackReference__(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif
/* tt__TrackReference is a typedef synonym for tt__ReferenceToken */

#ifndef SOAP_TYPE_tt__TrackReference_DEFINED
#define SOAP_TYPE_tt__TrackReference_DEFINED

#define soap_default_tt__TrackReference(soap, a) soap_default_tt__ReferenceToken(soap, a)


#define soap_serialize_tt__TrackReference soap_serialize_tt__ReferenceToken


#define soap_tt__TrackReference2s soap_tt__ReferenceToken2s


#define soap_out_tt__TrackReference soap_out_tt__ReferenceToken


#define soap_s2tt__TrackReference soap_s2tt__ReferenceToken


#define soap_in_tt__TrackReference soap_in_tt__ReferenceToken


#define soap_instantiate_tt__TrackReference soap_instantiate_tt__ReferenceToken


#define soap_new_tt__TrackReference soap_new_tt__ReferenceToken


#define soap_put_tt__TrackReference soap_put_tt__ReferenceToken


#define soap_write_tt__TrackReference soap_write_tt__ReferenceToken


#define soap_get_tt__TrackReference soap_get_tt__ReferenceToken


#define soap_read_tt__TrackReference soap_read_tt__ReferenceToken

#endif

#ifndef SOAP_TYPE_tt__RecordingReference___DEFINED
#define SOAP_TYPE_tt__RecordingReference___DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RecordingReference__(struct soap*, const char*, int, const tt__RecordingReference__ *, const char*);
SOAP_FMAC3 tt__RecordingReference__ * SOAP_FMAC4 soap_in_tt__RecordingReference__(struct soap*, const char*, tt__RecordingReference__ *, const char*);
SOAP_FMAC1 tt__RecordingReference__ * SOAP_FMAC2 soap_instantiate_tt__RecordingReference__(struct soap*, int, const char*, const char*, size_t*);

inline tt__RecordingReference__ * soap_new_tt__RecordingReference__(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__RecordingReference__(soap, n, NULL, NULL, NULL);
}

inline tt__RecordingReference__ * soap_new_req_tt__RecordingReference__(
	struct soap *soap,
	const std::string& __item)
{
	tt__RecordingReference__ *_p = soap_new_tt__RecordingReference__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__RecordingReference__::__item = __item;
	}
	return _p;
}

inline tt__RecordingReference__ * soap_new_set_tt__RecordingReference__(
	struct soap *soap,
	const std::string& __item,
	char *__item1)
{
	tt__RecordingReference__ *_p = soap_new_tt__RecordingReference__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__RecordingReference__::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__RecordingReference__(struct soap *soap, tt__RecordingReference__ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:RecordingReference", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__RecordingReference__ * SOAP_FMAC4 soap_get_tt__RecordingReference__(struct soap*, tt__RecordingReference__ *, const char*, const char*);

inline int soap_read_tt__RecordingReference__(struct soap *soap, tt__RecordingReference__ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__RecordingReference__(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif
/* tt__RecordingReference is a typedef synonym for tt__ReferenceToken */

#ifndef SOAP_TYPE_tt__RecordingReference_DEFINED
#define SOAP_TYPE_tt__RecordingReference_DEFINED

#define soap_default_tt__RecordingReference(soap, a) soap_default_tt__ReferenceToken(soap, a)


#define soap_serialize_tt__RecordingReference soap_serialize_tt__ReferenceToken


#define soap_tt__RecordingReference2s soap_tt__ReferenceToken2s


#define soap_out_tt__RecordingReference soap_out_tt__ReferenceToken


#define soap_s2tt__RecordingReference soap_s2tt__ReferenceToken


#define soap_in_tt__RecordingReference soap_in_tt__ReferenceToken


#define soap_instantiate_tt__RecordingReference soap_instantiate_tt__ReferenceToken


#define soap_new_tt__RecordingReference soap_new_tt__ReferenceToken


#define soap_put_tt__RecordingReference soap_put_tt__ReferenceToken


#define soap_write_tt__RecordingReference soap_write_tt__ReferenceToken


#define soap_get_tt__RecordingReference soap_get_tt__ReferenceToken


#define soap_read_tt__RecordingReference soap_read_tt__ReferenceToken

#endif

#ifndef SOAP_TYPE_tt__ReceiverReference___DEFINED
#define SOAP_TYPE_tt__ReceiverReference___DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ReceiverReference__(struct soap*, const char*, int, const tt__ReceiverReference__ *, const char*);
SOAP_FMAC3 tt__ReceiverReference__ * SOAP_FMAC4 soap_in_tt__ReceiverReference__(struct soap*, const char*, tt__ReceiverReference__ *, const char*);
SOAP_FMAC1 tt__ReceiverReference__ * SOAP_FMAC2 soap_instantiate_tt__ReceiverReference__(struct soap*, int, const char*, const char*, size_t*);

inline tt__ReceiverReference__ * soap_new_tt__ReceiverReference__(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ReceiverReference__(soap, n, NULL, NULL, NULL);
}

inline tt__ReceiverReference__ * soap_new_req_tt__ReceiverReference__(
	struct soap *soap,
	const std::string& __item)
{
	tt__ReceiverReference__ *_p = soap_new_tt__ReceiverReference__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ReceiverReference__::__item = __item;
	}
	return _p;
}

inline tt__ReceiverReference__ * soap_new_set_tt__ReceiverReference__(
	struct soap *soap,
	const std::string& __item,
	char *__item1)
{
	tt__ReceiverReference__ *_p = soap_new_tt__ReceiverReference__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ReceiverReference__::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__ReceiverReference__(struct soap *soap, tt__ReceiverReference__ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ReceiverReference", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__ReceiverReference__ * SOAP_FMAC4 soap_get_tt__ReceiverReference__(struct soap*, tt__ReceiverReference__ *, const char*, const char*);

inline int soap_read_tt__ReceiverReference__(struct soap *soap, tt__ReceiverReference__ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__ReceiverReference__(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif
/* tt__ReceiverReference is a typedef synonym for tt__ReferenceToken */

#ifndef SOAP_TYPE_tt__ReceiverReference_DEFINED
#define SOAP_TYPE_tt__ReceiverReference_DEFINED

#define soap_default_tt__ReceiverReference(soap, a) soap_default_tt__ReferenceToken(soap, a)


#define soap_serialize_tt__ReceiverReference soap_serialize_tt__ReferenceToken


#define soap_tt__ReceiverReference2s soap_tt__ReferenceToken2s


#define soap_out_tt__ReceiverReference soap_out_tt__ReferenceToken


#define soap_s2tt__ReceiverReference soap_s2tt__ReferenceToken


#define soap_in_tt__ReceiverReference soap_in_tt__ReferenceToken


#define soap_instantiate_tt__ReceiverReference soap_instantiate_tt__ReferenceToken


#define soap_new_tt__ReceiverReference soap_new_tt__ReferenceToken


#define soap_put_tt__ReceiverReference soap_put_tt__ReferenceToken


#define soap_write_tt__ReceiverReference soap_write_tt__ReferenceToken


#define soap_get_tt__ReceiverReference soap_get_tt__ReferenceToken


#define soap_read_tt__ReceiverReference soap_read_tt__ReferenceToken

#endif

#ifndef SOAP_TYPE_wstop__SimpleTopicExpression___DEFINED
#define SOAP_TYPE_wstop__SimpleTopicExpression___DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wstop__SimpleTopicExpression__(struct soap*, const char*, int, const wstop__SimpleTopicExpression__ *, const char*);
SOAP_FMAC3 wstop__SimpleTopicExpression__ * SOAP_FMAC4 soap_in_wstop__SimpleTopicExpression__(struct soap*, const char*, wstop__SimpleTopicExpression__ *, const char*);
SOAP_FMAC1 wstop__SimpleTopicExpression__ * SOAP_FMAC2 soap_instantiate_wstop__SimpleTopicExpression__(struct soap*, int, const char*, const char*, size_t*);

inline wstop__SimpleTopicExpression__ * soap_new_wstop__SimpleTopicExpression__(struct soap *soap, int n = -1)
{
	return soap_instantiate_wstop__SimpleTopicExpression__(soap, n, NULL, NULL, NULL);
}

inline wstop__SimpleTopicExpression__ * soap_new_req_wstop__SimpleTopicExpression__(
	struct soap *soap,
	const std::string& __item)
{
	wstop__SimpleTopicExpression__ *_p = soap_new_wstop__SimpleTopicExpression__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wstop__SimpleTopicExpression__::__item = __item;
	}
	return _p;
}

inline wstop__SimpleTopicExpression__ * soap_new_set_wstop__SimpleTopicExpression__(
	struct soap *soap,
	const std::string& __item,
	char *__item1)
{
	wstop__SimpleTopicExpression__ *_p = soap_new_wstop__SimpleTopicExpression__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wstop__SimpleTopicExpression__::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_wstop__SimpleTopicExpression__(struct soap *soap, wstop__SimpleTopicExpression__ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wstop:SimpleTopicExpression", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 wstop__SimpleTopicExpression__ * SOAP_FMAC4 soap_get_wstop__SimpleTopicExpression__(struct soap*, wstop__SimpleTopicExpression__ *, const char*, const char*);

inline int soap_read_wstop__SimpleTopicExpression__(struct soap *soap, wstop__SimpleTopicExpression__ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_wstop__SimpleTopicExpression__(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif
/* wstop__SimpleTopicExpression is a typedef synonym for xsd__QName */

#ifndef SOAP_TYPE_wstop__SimpleTopicExpression_DEFINED
#define SOAP_TYPE_wstop__SimpleTopicExpression_DEFINED

#define soap_default_wstop__SimpleTopicExpression(soap, a) soap_default_xsd__QName(soap, a)


#define soap_serialize_wstop__SimpleTopicExpression soap_serialize_xsd__QName


#define soap_wstop__SimpleTopicExpression2s soap_xsd__QName2s


#define soap_out_wstop__SimpleTopicExpression soap_out_xsd__QName


#define soap_s2wstop__SimpleTopicExpression soap_s2xsd__QName


#define soap_in_wstop__SimpleTopicExpression soap_in_xsd__QName


#define soap_instantiate_wstop__SimpleTopicExpression soap_instantiate_xsd__QName


#define soap_new_wstop__SimpleTopicExpression soap_new_xsd__QName


#define soap_put_wstop__SimpleTopicExpression soap_put_xsd__QName


#define soap_write_wstop__SimpleTopicExpression soap_write_xsd__QName


#define soap_get_wstop__SimpleTopicExpression soap_get_xsd__QName


#define soap_read_wstop__SimpleTopicExpression soap_read_xsd__QName

#endif

#ifndef SOAP_TYPE_wstop__ConcreteTopicExpression___DEFINED
#define SOAP_TYPE_wstop__ConcreteTopicExpression___DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wstop__ConcreteTopicExpression__(struct soap*, const char*, int, const wstop__ConcreteTopicExpression__ *, const char*);
SOAP_FMAC3 wstop__ConcreteTopicExpression__ * SOAP_FMAC4 soap_in_wstop__ConcreteTopicExpression__(struct soap*, const char*, wstop__ConcreteTopicExpression__ *, const char*);
SOAP_FMAC1 wstop__ConcreteTopicExpression__ * SOAP_FMAC2 soap_instantiate_wstop__ConcreteTopicExpression__(struct soap*, int, const char*, const char*, size_t*);

inline wstop__ConcreteTopicExpression__ * soap_new_wstop__ConcreteTopicExpression__(struct soap *soap, int n = -1)
{
	return soap_instantiate_wstop__ConcreteTopicExpression__(soap, n, NULL, NULL, NULL);
}

inline wstop__ConcreteTopicExpression__ * soap_new_req_wstop__ConcreteTopicExpression__(
	struct soap *soap,
	const std::string& __item)
{
	wstop__ConcreteTopicExpression__ *_p = soap_new_wstop__ConcreteTopicExpression__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wstop__ConcreteTopicExpression__::__item = __item;
	}
	return _p;
}

inline wstop__ConcreteTopicExpression__ * soap_new_set_wstop__ConcreteTopicExpression__(
	struct soap *soap,
	const std::string& __item,
	char *__item1)
{
	wstop__ConcreteTopicExpression__ *_p = soap_new_wstop__ConcreteTopicExpression__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wstop__ConcreteTopicExpression__::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_wstop__ConcreteTopicExpression__(struct soap *soap, wstop__ConcreteTopicExpression__ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wstop:ConcreteTopicExpression", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 wstop__ConcreteTopicExpression__ * SOAP_FMAC4 soap_get_wstop__ConcreteTopicExpression__(struct soap*, wstop__ConcreteTopicExpression__ *, const char*, const char*);

inline int soap_read_wstop__ConcreteTopicExpression__(struct soap *soap, wstop__ConcreteTopicExpression__ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_wstop__ConcreteTopicExpression__(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_wstop__ConcreteTopicExpression_DEFINED
#define SOAP_TYPE_wstop__ConcreteTopicExpression_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wstop__ConcreteTopicExpression(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wstop__ConcreteTopicExpression(struct soap*, const std::string *);

#define soap_wstop__ConcreteTopicExpression2s soap_std__string2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wstop__ConcreteTopicExpression(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2wstop__ConcreteTopicExpression soap_s2std__string

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_wstop__ConcreteTopicExpression(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_wstop__ConcreteTopicExpression soap_instantiate_std__string


#define soap_new_wstop__ConcreteTopicExpression soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wstop__ConcreteTopicExpression(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_wstop__ConcreteTopicExpression(struct soap *soap, std::string const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_wstop__ConcreteTopicExpression(soap, p, "wstop:ConcreteTopicExpression", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_wstop__ConcreteTopicExpression(struct soap*, std::string *, const char*, const char*);

inline int soap_read_wstop__ConcreteTopicExpression(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_wstop__ConcreteTopicExpression(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_wstop__FullTopicExpression___DEFINED
#define SOAP_TYPE_wstop__FullTopicExpression___DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wstop__FullTopicExpression__(struct soap*, const char*, int, const wstop__FullTopicExpression__ *, const char*);
SOAP_FMAC3 wstop__FullTopicExpression__ * SOAP_FMAC4 soap_in_wstop__FullTopicExpression__(struct soap*, const char*, wstop__FullTopicExpression__ *, const char*);
SOAP_FMAC1 wstop__FullTopicExpression__ * SOAP_FMAC2 soap_instantiate_wstop__FullTopicExpression__(struct soap*, int, const char*, const char*, size_t*);

inline wstop__FullTopicExpression__ * soap_new_wstop__FullTopicExpression__(struct soap *soap, int n = -1)
{
	return soap_instantiate_wstop__FullTopicExpression__(soap, n, NULL, NULL, NULL);
}

inline wstop__FullTopicExpression__ * soap_new_req_wstop__FullTopicExpression__(
	struct soap *soap,
	const std::string& __item)
{
	wstop__FullTopicExpression__ *_p = soap_new_wstop__FullTopicExpression__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wstop__FullTopicExpression__::__item = __item;
	}
	return _p;
}

inline wstop__FullTopicExpression__ * soap_new_set_wstop__FullTopicExpression__(
	struct soap *soap,
	const std::string& __item,
	char *__item1)
{
	wstop__FullTopicExpression__ *_p = soap_new_wstop__FullTopicExpression__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wstop__FullTopicExpression__::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_wstop__FullTopicExpression__(struct soap *soap, wstop__FullTopicExpression__ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wstop:FullTopicExpression", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 wstop__FullTopicExpression__ * SOAP_FMAC4 soap_get_wstop__FullTopicExpression__(struct soap*, wstop__FullTopicExpression__ *, const char*, const char*);

inline int soap_read_wstop__FullTopicExpression__(struct soap *soap, wstop__FullTopicExpression__ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_wstop__FullTopicExpression__(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_wstop__FullTopicExpression_DEFINED
#define SOAP_TYPE_wstop__FullTopicExpression_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wstop__FullTopicExpression(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wstop__FullTopicExpression(struct soap*, const std::string *);

#define soap_wstop__FullTopicExpression2s soap_std__string2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wstop__FullTopicExpression(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2wstop__FullTopicExpression soap_s2std__string

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_wstop__FullTopicExpression(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_wstop__FullTopicExpression soap_instantiate_std__string


#define soap_new_wstop__FullTopicExpression soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wstop__FullTopicExpression(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_wstop__FullTopicExpression(struct soap *soap, std::string const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_wstop__FullTopicExpression(soap, p, "wstop:FullTopicExpression", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_wstop__FullTopicExpression(struct soap*, std::string *, const char*, const char*);

inline int soap_read_wstop__FullTopicExpression(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_wstop__FullTopicExpression(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__OSDType__DEFINED
#define SOAP_TYPE_tt__OSDType__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__OSDType_(struct soap*, const char*, int, const tt__OSDType_ *, const char*);
SOAP_FMAC3 tt__OSDType_ * SOAP_FMAC4 soap_in_tt__OSDType_(struct soap*, const char*, tt__OSDType_ *, const char*);
SOAP_FMAC1 tt__OSDType_ * SOAP_FMAC2 soap_instantiate_tt__OSDType_(struct soap*, int, const char*, const char*, size_t*);

inline tt__OSDType_ * soap_new_tt__OSDType_(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__OSDType_(soap, n, NULL, NULL, NULL);
}

inline tt__OSDType_ * soap_new_req_tt__OSDType_(
	struct soap *soap,
	enum tt__OSDType __item)
{
	tt__OSDType_ *_p = soap_new_tt__OSDType_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__OSDType_::__item = __item;
	}
	return _p;
}

inline tt__OSDType_ * soap_new_set_tt__OSDType_(
	struct soap *soap,
	enum tt__OSDType __item,
	char *__item1)
{
	tt__OSDType_ *_p = soap_new_tt__OSDType_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__OSDType_::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__OSDType_(struct soap *soap, tt__OSDType_ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:OSDType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__OSDType_ * SOAP_FMAC4 soap_get_tt__OSDType_(struct soap*, tt__OSDType_ *, const char*, const char*);

inline int soap_read_tt__OSDType_(struct soap *soap, tt__OSDType_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__OSDType_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__AudioClassType___DEFINED
#define SOAP_TYPE_tt__AudioClassType___DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AudioClassType__(struct soap*, const char*, int, const tt__AudioClassType__ *, const char*);
SOAP_FMAC3 tt__AudioClassType__ * SOAP_FMAC4 soap_in_tt__AudioClassType__(struct soap*, const char*, tt__AudioClassType__ *, const char*);
SOAP_FMAC1 tt__AudioClassType__ * SOAP_FMAC2 soap_instantiate_tt__AudioClassType__(struct soap*, int, const char*, const char*, size_t*);

inline tt__AudioClassType__ * soap_new_tt__AudioClassType__(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__AudioClassType__(soap, n, NULL, NULL, NULL);
}

inline tt__AudioClassType__ * soap_new_req_tt__AudioClassType__(
	struct soap *soap,
	const std::string& __item)
{
	tt__AudioClassType__ *_p = soap_new_tt__AudioClassType__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AudioClassType__::__item = __item;
	}
	return _p;
}

inline tt__AudioClassType__ * soap_new_set_tt__AudioClassType__(
	struct soap *soap,
	const std::string& __item,
	char *__item1)
{
	tt__AudioClassType__ *_p = soap_new_tt__AudioClassType__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AudioClassType__::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__AudioClassType__(struct soap *soap, tt__AudioClassType__ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AudioClassType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__AudioClassType__ * SOAP_FMAC4 soap_get_tt__AudioClassType__(struct soap*, tt__AudioClassType__ *, const char*, const char*);

inline int soap_read_tt__AudioClassType__(struct soap *soap, tt__AudioClassType__ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__AudioClassType__(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__AudioClassType_DEFINED
#define SOAP_TYPE_tt__AudioClassType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__AudioClassType(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_tt__AudioClassType(struct soap*, const std::string *);

#define soap_tt__AudioClassType2s soap_std__string2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AudioClassType(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2tt__AudioClassType soap_s2std__string

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_tt__AudioClassType(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_tt__AudioClassType soap_instantiate_std__string


#define soap_new_tt__AudioClassType soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__AudioClassType(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_tt__AudioClassType(struct soap *soap, std::string const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_tt__AudioClassType(soap, p, "tt:AudioClassType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_tt__AudioClassType(struct soap*, std::string *, const char*, const char*);

inline int soap_read_tt__AudioClassType(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_tt__AudioClassType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__ModeOfOperation__DEFINED
#define SOAP_TYPE_tt__ModeOfOperation__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ModeOfOperation_(struct soap*, const char*, int, const tt__ModeOfOperation_ *, const char*);
SOAP_FMAC3 tt__ModeOfOperation_ * SOAP_FMAC4 soap_in_tt__ModeOfOperation_(struct soap*, const char*, tt__ModeOfOperation_ *, const char*);
SOAP_FMAC1 tt__ModeOfOperation_ * SOAP_FMAC2 soap_instantiate_tt__ModeOfOperation_(struct soap*, int, const char*, const char*, size_t*);

inline tt__ModeOfOperation_ * soap_new_tt__ModeOfOperation_(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ModeOfOperation_(soap, n, NULL, NULL, NULL);
}

inline tt__ModeOfOperation_ * soap_new_req_tt__ModeOfOperation_(
	struct soap *soap,
	enum tt__ModeOfOperation __item)
{
	tt__ModeOfOperation_ *_p = soap_new_tt__ModeOfOperation_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ModeOfOperation_::__item = __item;
	}
	return _p;
}

inline tt__ModeOfOperation_ * soap_new_set_tt__ModeOfOperation_(
	struct soap *soap,
	enum tt__ModeOfOperation __item,
	char *__item1)
{
	tt__ModeOfOperation_ *_p = soap_new_tt__ModeOfOperation_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ModeOfOperation_::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__ModeOfOperation_(struct soap *soap, tt__ModeOfOperation_ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ModeOfOperation", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__ModeOfOperation_ * SOAP_FMAC4 soap_get_tt__ModeOfOperation_(struct soap*, tt__ModeOfOperation_ *, const char*, const char*);

inline int soap_read_tt__ModeOfOperation_(struct soap *soap, tt__ModeOfOperation_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__ModeOfOperation_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__RecordingJobState___DEFINED
#define SOAP_TYPE_tt__RecordingJobState___DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RecordingJobState__(struct soap*, const char*, int, const tt__RecordingJobState__ *, const char*);
SOAP_FMAC3 tt__RecordingJobState__ * SOAP_FMAC4 soap_in_tt__RecordingJobState__(struct soap*, const char*, tt__RecordingJobState__ *, const char*);
SOAP_FMAC1 tt__RecordingJobState__ * SOAP_FMAC2 soap_instantiate_tt__RecordingJobState__(struct soap*, int, const char*, const char*, size_t*);

inline tt__RecordingJobState__ * soap_new_tt__RecordingJobState__(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__RecordingJobState__(soap, n, NULL, NULL, NULL);
}

inline tt__RecordingJobState__ * soap_new_req_tt__RecordingJobState__(
	struct soap *soap,
	const std::string& __item)
{
	tt__RecordingJobState__ *_p = soap_new_tt__RecordingJobState__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__RecordingJobState__::__item = __item;
	}
	return _p;
}

inline tt__RecordingJobState__ * soap_new_set_tt__RecordingJobState__(
	struct soap *soap,
	const std::string& __item,
	char *__item1)
{
	tt__RecordingJobState__ *_p = soap_new_tt__RecordingJobState__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__RecordingJobState__::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__RecordingJobState__(struct soap *soap, tt__RecordingJobState__ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:RecordingJobState", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__RecordingJobState__ * SOAP_FMAC4 soap_get_tt__RecordingJobState__(struct soap*, tt__RecordingJobState__ *, const char*, const char*);

inline int soap_read_tt__RecordingJobState__(struct soap *soap, tt__RecordingJobState__ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__RecordingJobState__(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__RecordingJobState_DEFINED
#define SOAP_TYPE_tt__RecordingJobState_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__RecordingJobState(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_tt__RecordingJobState(struct soap*, const std::string *);

#define soap_tt__RecordingJobState2s soap_std__string2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RecordingJobState(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2tt__RecordingJobState soap_s2std__string

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_tt__RecordingJobState(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_tt__RecordingJobState soap_instantiate_std__string


#define soap_new_tt__RecordingJobState soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__RecordingJobState(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_tt__RecordingJobState(struct soap *soap, std::string const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_tt__RecordingJobState(soap, p, "tt:RecordingJobState", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_tt__RecordingJobState(struct soap*, std::string *, const char*, const char*);

inline int soap_read_tt__RecordingJobState(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_tt__RecordingJobState(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__RecordingJobMode___DEFINED
#define SOAP_TYPE_tt__RecordingJobMode___DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RecordingJobMode__(struct soap*, const char*, int, const tt__RecordingJobMode__ *, const char*);
SOAP_FMAC3 tt__RecordingJobMode__ * SOAP_FMAC4 soap_in_tt__RecordingJobMode__(struct soap*, const char*, tt__RecordingJobMode__ *, const char*);
SOAP_FMAC1 tt__RecordingJobMode__ * SOAP_FMAC2 soap_instantiate_tt__RecordingJobMode__(struct soap*, int, const char*, const char*, size_t*);

inline tt__RecordingJobMode__ * soap_new_tt__RecordingJobMode__(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__RecordingJobMode__(soap, n, NULL, NULL, NULL);
}

inline tt__RecordingJobMode__ * soap_new_req_tt__RecordingJobMode__(
	struct soap *soap,
	const std::string& __item)
{
	tt__RecordingJobMode__ *_p = soap_new_tt__RecordingJobMode__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__RecordingJobMode__::__item = __item;
	}
	return _p;
}

inline tt__RecordingJobMode__ * soap_new_set_tt__RecordingJobMode__(
	struct soap *soap,
	const std::string& __item,
	char *__item1)
{
	tt__RecordingJobMode__ *_p = soap_new_tt__RecordingJobMode__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__RecordingJobMode__::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__RecordingJobMode__(struct soap *soap, tt__RecordingJobMode__ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:RecordingJobMode", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__RecordingJobMode__ * SOAP_FMAC4 soap_get_tt__RecordingJobMode__(struct soap*, tt__RecordingJobMode__ *, const char*, const char*);

inline int soap_read_tt__RecordingJobMode__(struct soap *soap, tt__RecordingJobMode__ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__RecordingJobMode__(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__RecordingJobMode_DEFINED
#define SOAP_TYPE_tt__RecordingJobMode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__RecordingJobMode(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_tt__RecordingJobMode(struct soap*, const std::string *);

#define soap_tt__RecordingJobMode2s soap_std__string2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RecordingJobMode(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2tt__RecordingJobMode soap_s2std__string

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_tt__RecordingJobMode(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_tt__RecordingJobMode soap_instantiate_std__string


#define soap_new_tt__RecordingJobMode soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__RecordingJobMode(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_tt__RecordingJobMode(struct soap *soap, std::string const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_tt__RecordingJobMode(soap, p, "tt:RecordingJobMode", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_tt__RecordingJobMode(struct soap*, std::string *, const char*, const char*);

inline int soap_read_tt__RecordingJobMode(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_tt__RecordingJobMode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__TrackType__DEFINED
#define SOAP_TYPE_tt__TrackType__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__TrackType_(struct soap*, const char*, int, const tt__TrackType_ *, const char*);
SOAP_FMAC3 tt__TrackType_ * SOAP_FMAC4 soap_in_tt__TrackType_(struct soap*, const char*, tt__TrackType_ *, const char*);
SOAP_FMAC1 tt__TrackType_ * SOAP_FMAC2 soap_instantiate_tt__TrackType_(struct soap*, int, const char*, const char*, size_t*);

inline tt__TrackType_ * soap_new_tt__TrackType_(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__TrackType_(soap, n, NULL, NULL, NULL);
}

inline tt__TrackType_ * soap_new_req_tt__TrackType_(
	struct soap *soap,
	enum tt__TrackType __item)
{
	tt__TrackType_ *_p = soap_new_tt__TrackType_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__TrackType_::__item = __item;
	}
	return _p;
}

inline tt__TrackType_ * soap_new_set_tt__TrackType_(
	struct soap *soap,
	enum tt__TrackType __item,
	char *__item1)
{
	tt__TrackType_ *_p = soap_new_tt__TrackType_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__TrackType_::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__TrackType_(struct soap *soap, tt__TrackType_ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:TrackType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__TrackType_ * SOAP_FMAC4 soap_get_tt__TrackType_(struct soap*, tt__TrackType_ *, const char*, const char*);

inline int soap_read_tt__TrackType_(struct soap *soap, tt__TrackType_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__TrackType_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__RecordingStatus__DEFINED
#define SOAP_TYPE_tt__RecordingStatus__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RecordingStatus_(struct soap*, const char*, int, const tt__RecordingStatus_ *, const char*);
SOAP_FMAC3 tt__RecordingStatus_ * SOAP_FMAC4 soap_in_tt__RecordingStatus_(struct soap*, const char*, tt__RecordingStatus_ *, const char*);
SOAP_FMAC1 tt__RecordingStatus_ * SOAP_FMAC2 soap_instantiate_tt__RecordingStatus_(struct soap*, int, const char*, const char*, size_t*);

inline tt__RecordingStatus_ * soap_new_tt__RecordingStatus_(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__RecordingStatus_(soap, n, NULL, NULL, NULL);
}

inline tt__RecordingStatus_ * soap_new_req_tt__RecordingStatus_(
	struct soap *soap,
	enum tt__RecordingStatus __item)
{
	tt__RecordingStatus_ *_p = soap_new_tt__RecordingStatus_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__RecordingStatus_::__item = __item;
	}
	return _p;
}

inline tt__RecordingStatus_ * soap_new_set_tt__RecordingStatus_(
	struct soap *soap,
	enum tt__RecordingStatus __item,
	char *__item1)
{
	tt__RecordingStatus_ *_p = soap_new_tt__RecordingStatus_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__RecordingStatus_::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__RecordingStatus_(struct soap *soap, tt__RecordingStatus_ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:RecordingStatus", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__RecordingStatus_ * SOAP_FMAC4 soap_get_tt__RecordingStatus_(struct soap*, tt__RecordingStatus_ *, const char*, const char*);

inline int soap_read_tt__RecordingStatus_(struct soap *soap, tt__RecordingStatus_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__RecordingStatus_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__SearchState__DEFINED
#define SOAP_TYPE_tt__SearchState__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__SearchState_(struct soap*, const char*, int, const tt__SearchState_ *, const char*);
SOAP_FMAC3 tt__SearchState_ * SOAP_FMAC4 soap_in_tt__SearchState_(struct soap*, const char*, tt__SearchState_ *, const char*);
SOAP_FMAC1 tt__SearchState_ * SOAP_FMAC2 soap_instantiate_tt__SearchState_(struct soap*, int, const char*, const char*, size_t*);

inline tt__SearchState_ * soap_new_tt__SearchState_(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__SearchState_(soap, n, NULL, NULL, NULL);
}

inline tt__SearchState_ * soap_new_req_tt__SearchState_(
	struct soap *soap,
	enum tt__SearchState __item)
{
	tt__SearchState_ *_p = soap_new_tt__SearchState_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__SearchState_::__item = __item;
	}
	return _p;
}

inline tt__SearchState_ * soap_new_set_tt__SearchState_(
	struct soap *soap,
	enum tt__SearchState __item,
	char *__item1)
{
	tt__SearchState_ *_p = soap_new_tt__SearchState_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__SearchState_::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__SearchState_(struct soap *soap, tt__SearchState_ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:SearchState", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__SearchState_ * SOAP_FMAC4 soap_get_tt__SearchState_(struct soap*, tt__SearchState_ *, const char*, const char*);

inline int soap_read_tt__SearchState_(struct soap *soap, tt__SearchState_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__SearchState_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__XPathExpression___DEFINED
#define SOAP_TYPE_tt__XPathExpression___DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__XPathExpression__(struct soap*, const char*, int, const tt__XPathExpression__ *, const char*);
SOAP_FMAC3 tt__XPathExpression__ * SOAP_FMAC4 soap_in_tt__XPathExpression__(struct soap*, const char*, tt__XPathExpression__ *, const char*);
SOAP_FMAC1 tt__XPathExpression__ * SOAP_FMAC2 soap_instantiate_tt__XPathExpression__(struct soap*, int, const char*, const char*, size_t*);

inline tt__XPathExpression__ * soap_new_tt__XPathExpression__(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__XPathExpression__(soap, n, NULL, NULL, NULL);
}

inline tt__XPathExpression__ * soap_new_req_tt__XPathExpression__(
	struct soap *soap,
	const std::string& __item)
{
	tt__XPathExpression__ *_p = soap_new_tt__XPathExpression__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__XPathExpression__::__item = __item;
	}
	return _p;
}

inline tt__XPathExpression__ * soap_new_set_tt__XPathExpression__(
	struct soap *soap,
	const std::string& __item,
	char *__item1)
{
	tt__XPathExpression__ *_p = soap_new_tt__XPathExpression__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__XPathExpression__::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__XPathExpression__(struct soap *soap, tt__XPathExpression__ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:XPathExpression", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__XPathExpression__ * SOAP_FMAC4 soap_get_tt__XPathExpression__(struct soap*, tt__XPathExpression__ *, const char*, const char*);

inline int soap_read_tt__XPathExpression__(struct soap *soap, tt__XPathExpression__ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__XPathExpression__(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__XPathExpression_DEFINED
#define SOAP_TYPE_tt__XPathExpression_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__XPathExpression(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_tt__XPathExpression(struct soap*, const std::string *);

#define soap_tt__XPathExpression2s soap_std__string2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__XPathExpression(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2tt__XPathExpression soap_s2std__string

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_tt__XPathExpression(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_tt__XPathExpression soap_instantiate_std__string


#define soap_new_tt__XPathExpression soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__XPathExpression(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_tt__XPathExpression(struct soap *soap, std::string const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_tt__XPathExpression(soap, p, "tt:XPathExpression", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_tt__XPathExpression(struct soap*, std::string *, const char*, const char*);

inline int soap_read_tt__XPathExpression(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_tt__XPathExpression(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__Description___DEFINED
#define SOAP_TYPE_tt__Description___DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Description__(struct soap*, const char*, int, const tt__Description__ *, const char*);
SOAP_FMAC3 tt__Description__ * SOAP_FMAC4 soap_in_tt__Description__(struct soap*, const char*, tt__Description__ *, const char*);
SOAP_FMAC1 tt__Description__ * SOAP_FMAC2 soap_instantiate_tt__Description__(struct soap*, int, const char*, const char*, size_t*);

inline tt__Description__ * soap_new_tt__Description__(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Description__(soap, n, NULL, NULL, NULL);
}

inline tt__Description__ * soap_new_req_tt__Description__(
	struct soap *soap,
	const std::string& __item)
{
	tt__Description__ *_p = soap_new_tt__Description__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Description__::__item = __item;
	}
	return _p;
}

inline tt__Description__ * soap_new_set_tt__Description__(
	struct soap *soap,
	const std::string& __item,
	char *__item1)
{
	tt__Description__ *_p = soap_new_tt__Description__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Description__::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__Description__(struct soap *soap, tt__Description__ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Description", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__Description__ * SOAP_FMAC4 soap_get_tt__Description__(struct soap*, tt__Description__ *, const char*, const char*);

inline int soap_read_tt__Description__(struct soap *soap, tt__Description__ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__Description__(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__Description_DEFINED
#define SOAP_TYPE_tt__Description_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__Description(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_tt__Description(struct soap*, const std::string *);

#define soap_tt__Description2s soap_std__string2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Description(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2tt__Description soap_s2std__string

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_tt__Description(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_tt__Description soap_instantiate_std__string


#define soap_new_tt__Description soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__Description(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_tt__Description(struct soap *soap, std::string const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_tt__Description(soap, p, "tt:Description", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_tt__Description(struct soap*, std::string *, const char*, const char*);

inline int soap_read_tt__Description(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_tt__Description(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__ReceiverState__DEFINED
#define SOAP_TYPE_tt__ReceiverState__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ReceiverState_(struct soap*, const char*, int, const tt__ReceiverState_ *, const char*);
SOAP_FMAC3 tt__ReceiverState_ * SOAP_FMAC4 soap_in_tt__ReceiverState_(struct soap*, const char*, tt__ReceiverState_ *, const char*);
SOAP_FMAC1 tt__ReceiverState_ * SOAP_FMAC2 soap_instantiate_tt__ReceiverState_(struct soap*, int, const char*, const char*, size_t*);

inline tt__ReceiverState_ * soap_new_tt__ReceiverState_(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ReceiverState_(soap, n, NULL, NULL, NULL);
}

inline tt__ReceiverState_ * soap_new_req_tt__ReceiverState_(
	struct soap *soap,
	enum tt__ReceiverState __item)
{
	tt__ReceiverState_ *_p = soap_new_tt__ReceiverState_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ReceiverState_::__item = __item;
	}
	return _p;
}

inline tt__ReceiverState_ * soap_new_set_tt__ReceiverState_(
	struct soap *soap,
	enum tt__ReceiverState __item,
	char *__item1)
{
	tt__ReceiverState_ *_p = soap_new_tt__ReceiverState_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ReceiverState_::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__ReceiverState_(struct soap *soap, tt__ReceiverState_ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ReceiverState", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__ReceiverState_ * SOAP_FMAC4 soap_get_tt__ReceiverState_(struct soap*, tt__ReceiverState_ *, const char*, const char*);

inline int soap_read_tt__ReceiverState_(struct soap *soap, tt__ReceiverState_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__ReceiverState_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__ReceiverMode__DEFINED
#define SOAP_TYPE_tt__ReceiverMode__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ReceiverMode_(struct soap*, const char*, int, const tt__ReceiverMode_ *, const char*);
SOAP_FMAC3 tt__ReceiverMode_ * SOAP_FMAC4 soap_in_tt__ReceiverMode_(struct soap*, const char*, tt__ReceiverMode_ *, const char*);
SOAP_FMAC1 tt__ReceiverMode_ * SOAP_FMAC2 soap_instantiate_tt__ReceiverMode_(struct soap*, int, const char*, const char*, size_t*);

inline tt__ReceiverMode_ * soap_new_tt__ReceiverMode_(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ReceiverMode_(soap, n, NULL, NULL, NULL);
}

inline tt__ReceiverMode_ * soap_new_req_tt__ReceiverMode_(
	struct soap *soap,
	enum tt__ReceiverMode __item)
{
	tt__ReceiverMode_ *_p = soap_new_tt__ReceiverMode_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ReceiverMode_::__item = __item;
	}
	return _p;
}

inline tt__ReceiverMode_ * soap_new_set_tt__ReceiverMode_(
	struct soap *soap,
	enum tt__ReceiverMode __item,
	char *__item1)
{
	tt__ReceiverMode_ *_p = soap_new_tt__ReceiverMode_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ReceiverMode_::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__ReceiverMode_(struct soap *soap, tt__ReceiverMode_ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ReceiverMode", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__ReceiverMode_ * SOAP_FMAC4 soap_get_tt__ReceiverMode_(struct soap*, tt__ReceiverMode_ *, const char*, const char*);

inline int soap_read_tt__ReceiverMode_(struct soap *soap, tt__ReceiverMode_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__ReceiverMode_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__ClassType__DEFINED
#define SOAP_TYPE_tt__ClassType__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ClassType_(struct soap*, const char*, int, const tt__ClassType_ *, const char*);
SOAP_FMAC3 tt__ClassType_ * SOAP_FMAC4 soap_in_tt__ClassType_(struct soap*, const char*, tt__ClassType_ *, const char*);
SOAP_FMAC1 tt__ClassType_ * SOAP_FMAC2 soap_instantiate_tt__ClassType_(struct soap*, int, const char*, const char*, size_t*);

inline tt__ClassType_ * soap_new_tt__ClassType_(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ClassType_(soap, n, NULL, NULL, NULL);
}

inline tt__ClassType_ * soap_new_req_tt__ClassType_(
	struct soap *soap,
	enum tt__ClassType __item)
{
	tt__ClassType_ *_p = soap_new_tt__ClassType_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ClassType_::__item = __item;
	}
	return _p;
}

inline tt__ClassType_ * soap_new_set_tt__ClassType_(
	struct soap *soap,
	enum tt__ClassType __item,
	char *__item1)
{
	tt__ClassType_ *_p = soap_new_tt__ClassType_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ClassType_::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__ClassType_(struct soap *soap, tt__ClassType_ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ClassType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__ClassType_ * SOAP_FMAC4 soap_get_tt__ClassType_(struct soap*, tt__ClassType_ *, const char*, const char*);

inline int soap_read_tt__ClassType_(struct soap *soap, tt__ClassType_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__ClassType_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__Direction__DEFINED
#define SOAP_TYPE_tt__Direction__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Direction_(struct soap*, const char*, int, const tt__Direction_ *, const char*);
SOAP_FMAC3 tt__Direction_ * SOAP_FMAC4 soap_in_tt__Direction_(struct soap*, const char*, tt__Direction_ *, const char*);
SOAP_FMAC1 tt__Direction_ * SOAP_FMAC2 soap_instantiate_tt__Direction_(struct soap*, int, const char*, const char*, size_t*);

inline tt__Direction_ * soap_new_tt__Direction_(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Direction_(soap, n, NULL, NULL, NULL);
}

inline tt__Direction_ * soap_new_req_tt__Direction_(
	struct soap *soap,
	enum tt__Direction __item)
{
	tt__Direction_ *_p = soap_new_tt__Direction_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Direction_::__item = __item;
	}
	return _p;
}

inline tt__Direction_ * soap_new_set_tt__Direction_(
	struct soap *soap,
	enum tt__Direction __item,
	char *__item1)
{
	tt__Direction_ *_p = soap_new_tt__Direction_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Direction_::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__Direction_(struct soap *soap, tt__Direction_ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Direction", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__Direction_ * SOAP_FMAC4 soap_get_tt__Direction_(struct soap*, tt__Direction_ *, const char*, const char*);

inline int soap_read_tt__Direction_(struct soap *soap, tt__Direction_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__Direction_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__PropertyOperation__DEFINED
#define SOAP_TYPE_tt__PropertyOperation__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PropertyOperation_(struct soap*, const char*, int, const tt__PropertyOperation_ *, const char*);
SOAP_FMAC3 tt__PropertyOperation_ * SOAP_FMAC4 soap_in_tt__PropertyOperation_(struct soap*, const char*, tt__PropertyOperation_ *, const char*);
SOAP_FMAC1 tt__PropertyOperation_ * SOAP_FMAC2 soap_instantiate_tt__PropertyOperation_(struct soap*, int, const char*, const char*, size_t*);

inline tt__PropertyOperation_ * soap_new_tt__PropertyOperation_(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PropertyOperation_(soap, n, NULL, NULL, NULL);
}

inline tt__PropertyOperation_ * soap_new_req_tt__PropertyOperation_(
	struct soap *soap,
	enum tt__PropertyOperation __item)
{
	tt__PropertyOperation_ *_p = soap_new_tt__PropertyOperation_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PropertyOperation_::__item = __item;
	}
	return _p;
}

inline tt__PropertyOperation_ * soap_new_set_tt__PropertyOperation_(
	struct soap *soap,
	enum tt__PropertyOperation __item,
	char *__item1)
{
	tt__PropertyOperation_ *_p = soap_new_tt__PropertyOperation_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PropertyOperation_::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__PropertyOperation_(struct soap *soap, tt__PropertyOperation_ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PropertyOperation", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__PropertyOperation_ * SOAP_FMAC4 soap_get_tt__PropertyOperation_(struct soap*, tt__PropertyOperation_ *, const char*, const char*);

inline int soap_read_tt__PropertyOperation_(struct soap *soap, tt__PropertyOperation_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__PropertyOperation_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__TopicNamespaceLocation___DEFINED
#define SOAP_TYPE_tt__TopicNamespaceLocation___DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__TopicNamespaceLocation__(struct soap*, const char*, int, const tt__TopicNamespaceLocation__ *, const char*);
SOAP_FMAC3 tt__TopicNamespaceLocation__ * SOAP_FMAC4 soap_in_tt__TopicNamespaceLocation__(struct soap*, const char*, tt__TopicNamespaceLocation__ *, const char*);
SOAP_FMAC1 tt__TopicNamespaceLocation__ * SOAP_FMAC2 soap_instantiate_tt__TopicNamespaceLocation__(struct soap*, int, const char*, const char*, size_t*);

inline tt__TopicNamespaceLocation__ * soap_new_tt__TopicNamespaceLocation__(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__TopicNamespaceLocation__(soap, n, NULL, NULL, NULL);
}

inline tt__TopicNamespaceLocation__ * soap_new_req_tt__TopicNamespaceLocation__(
	struct soap *soap,
	const std::string& __item)
{
	tt__TopicNamespaceLocation__ *_p = soap_new_tt__TopicNamespaceLocation__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__TopicNamespaceLocation__::__item = __item;
	}
	return _p;
}

inline tt__TopicNamespaceLocation__ * soap_new_set_tt__TopicNamespaceLocation__(
	struct soap *soap,
	const std::string& __item,
	char *__item1)
{
	tt__TopicNamespaceLocation__ *_p = soap_new_tt__TopicNamespaceLocation__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__TopicNamespaceLocation__::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__TopicNamespaceLocation__(struct soap *soap, tt__TopicNamespaceLocation__ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:TopicNamespaceLocation", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__TopicNamespaceLocation__ * SOAP_FMAC4 soap_get_tt__TopicNamespaceLocation__(struct soap*, tt__TopicNamespaceLocation__ *, const char*, const char*);

inline int soap_read_tt__TopicNamespaceLocation__(struct soap *soap, tt__TopicNamespaceLocation__ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__TopicNamespaceLocation__(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif
/* tt__TopicNamespaceLocation is a typedef synonym for xsd__anyURI */

#ifndef SOAP_TYPE_tt__TopicNamespaceLocation_DEFINED
#define SOAP_TYPE_tt__TopicNamespaceLocation_DEFINED

#define soap_default_tt__TopicNamespaceLocation(soap, a) soap_default_xsd__anyURI(soap, a)


#define soap_serialize_tt__TopicNamespaceLocation soap_serialize_xsd__anyURI


#define soap_tt__TopicNamespaceLocation2s soap_xsd__anyURI2s


#define soap_out_tt__TopicNamespaceLocation soap_out_xsd__anyURI


#define soap_s2tt__TopicNamespaceLocation soap_s2xsd__anyURI


#define soap_in_tt__TopicNamespaceLocation soap_in_xsd__anyURI


#define soap_instantiate_tt__TopicNamespaceLocation soap_instantiate_xsd__anyURI


#define soap_new_tt__TopicNamespaceLocation soap_new_xsd__anyURI


#define soap_put_tt__TopicNamespaceLocation soap_put_xsd__anyURI


#define soap_write_tt__TopicNamespaceLocation soap_write_xsd__anyURI


#define soap_get_tt__TopicNamespaceLocation soap_get_xsd__anyURI


#define soap_read_tt__TopicNamespaceLocation soap_read_xsd__anyURI

#endif

#ifndef SOAP_TYPE_tt__DefoggingMode__DEFINED
#define SOAP_TYPE_tt__DefoggingMode__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__DefoggingMode_(struct soap*, const char*, int, const tt__DefoggingMode_ *, const char*);
SOAP_FMAC3 tt__DefoggingMode_ * SOAP_FMAC4 soap_in_tt__DefoggingMode_(struct soap*, const char*, tt__DefoggingMode_ *, const char*);
SOAP_FMAC1 tt__DefoggingMode_ * SOAP_FMAC2 soap_instantiate_tt__DefoggingMode_(struct soap*, int, const char*, const char*, size_t*);

inline tt__DefoggingMode_ * soap_new_tt__DefoggingMode_(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__DefoggingMode_(soap, n, NULL, NULL, NULL);
}

inline tt__DefoggingMode_ * soap_new_req_tt__DefoggingMode_(
	struct soap *soap,
	enum tt__DefoggingMode __item)
{
	tt__DefoggingMode_ *_p = soap_new_tt__DefoggingMode_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__DefoggingMode_::__item = __item;
	}
	return _p;
}

inline tt__DefoggingMode_ * soap_new_set_tt__DefoggingMode_(
	struct soap *soap,
	enum tt__DefoggingMode __item,
	char *__item1)
{
	tt__DefoggingMode_ *_p = soap_new_tt__DefoggingMode_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__DefoggingMode_::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__DefoggingMode_(struct soap *soap, tt__DefoggingMode_ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:DefoggingMode", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__DefoggingMode_ * SOAP_FMAC4 soap_get_tt__DefoggingMode_(struct soap*, tt__DefoggingMode_ *, const char*, const char*);

inline int soap_read_tt__DefoggingMode_(struct soap *soap, tt__DefoggingMode_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__DefoggingMode_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__ToneCompensationMode__DEFINED
#define SOAP_TYPE_tt__ToneCompensationMode__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ToneCompensationMode_(struct soap*, const char*, int, const tt__ToneCompensationMode_ *, const char*);
SOAP_FMAC3 tt__ToneCompensationMode_ * SOAP_FMAC4 soap_in_tt__ToneCompensationMode_(struct soap*, const char*, tt__ToneCompensationMode_ *, const char*);
SOAP_FMAC1 tt__ToneCompensationMode_ * SOAP_FMAC2 soap_instantiate_tt__ToneCompensationMode_(struct soap*, int, const char*, const char*, size_t*);

inline tt__ToneCompensationMode_ * soap_new_tt__ToneCompensationMode_(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ToneCompensationMode_(soap, n, NULL, NULL, NULL);
}

inline tt__ToneCompensationMode_ * soap_new_req_tt__ToneCompensationMode_(
	struct soap *soap,
	enum tt__ToneCompensationMode __item)
{
	tt__ToneCompensationMode_ *_p = soap_new_tt__ToneCompensationMode_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ToneCompensationMode_::__item = __item;
	}
	return _p;
}

inline tt__ToneCompensationMode_ * soap_new_set_tt__ToneCompensationMode_(
	struct soap *soap,
	enum tt__ToneCompensationMode __item,
	char *__item1)
{
	tt__ToneCompensationMode_ *_p = soap_new_tt__ToneCompensationMode_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ToneCompensationMode_::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__ToneCompensationMode_(struct soap *soap, tt__ToneCompensationMode_ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ToneCompensationMode", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__ToneCompensationMode_ * SOAP_FMAC4 soap_get_tt__ToneCompensationMode_(struct soap*, tt__ToneCompensationMode_ *, const char*, const char*);

inline int soap_read_tt__ToneCompensationMode_(struct soap *soap, tt__ToneCompensationMode_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__ToneCompensationMode_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__IrCutFilterAutoBoundaryType__DEFINED
#define SOAP_TYPE_tt__IrCutFilterAutoBoundaryType__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IrCutFilterAutoBoundaryType_(struct soap*, const char*, int, const tt__IrCutFilterAutoBoundaryType_ *, const char*);
SOAP_FMAC3 tt__IrCutFilterAutoBoundaryType_ * SOAP_FMAC4 soap_in_tt__IrCutFilterAutoBoundaryType_(struct soap*, const char*, tt__IrCutFilterAutoBoundaryType_ *, const char*);
SOAP_FMAC1 tt__IrCutFilterAutoBoundaryType_ * SOAP_FMAC2 soap_instantiate_tt__IrCutFilterAutoBoundaryType_(struct soap*, int, const char*, const char*, size_t*);

inline tt__IrCutFilterAutoBoundaryType_ * soap_new_tt__IrCutFilterAutoBoundaryType_(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__IrCutFilterAutoBoundaryType_(soap, n, NULL, NULL, NULL);
}

inline tt__IrCutFilterAutoBoundaryType_ * soap_new_req_tt__IrCutFilterAutoBoundaryType_(
	struct soap *soap,
	enum tt__IrCutFilterAutoBoundaryType __item)
{
	tt__IrCutFilterAutoBoundaryType_ *_p = soap_new_tt__IrCutFilterAutoBoundaryType_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__IrCutFilterAutoBoundaryType_::__item = __item;
	}
	return _p;
}

inline tt__IrCutFilterAutoBoundaryType_ * soap_new_set_tt__IrCutFilterAutoBoundaryType_(
	struct soap *soap,
	enum tt__IrCutFilterAutoBoundaryType __item,
	char *__item1)
{
	tt__IrCutFilterAutoBoundaryType_ *_p = soap_new_tt__IrCutFilterAutoBoundaryType_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__IrCutFilterAutoBoundaryType_::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__IrCutFilterAutoBoundaryType_(struct soap *soap, tt__IrCutFilterAutoBoundaryType_ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IrCutFilterAutoBoundaryType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__IrCutFilterAutoBoundaryType_ * SOAP_FMAC4 soap_get_tt__IrCutFilterAutoBoundaryType_(struct soap*, tt__IrCutFilterAutoBoundaryType_ *, const char*, const char*);

inline int soap_read_tt__IrCutFilterAutoBoundaryType_(struct soap *soap, tt__IrCutFilterAutoBoundaryType_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__IrCutFilterAutoBoundaryType_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__ImageStabilizationMode__DEFINED
#define SOAP_TYPE_tt__ImageStabilizationMode__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ImageStabilizationMode_(struct soap*, const char*, int, const tt__ImageStabilizationMode_ *, const char*);
SOAP_FMAC3 tt__ImageStabilizationMode_ * SOAP_FMAC4 soap_in_tt__ImageStabilizationMode_(struct soap*, const char*, tt__ImageStabilizationMode_ *, const char*);
SOAP_FMAC1 tt__ImageStabilizationMode_ * SOAP_FMAC2 soap_instantiate_tt__ImageStabilizationMode_(struct soap*, int, const char*, const char*, size_t*);

inline tt__ImageStabilizationMode_ * soap_new_tt__ImageStabilizationMode_(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ImageStabilizationMode_(soap, n, NULL, NULL, NULL);
}

inline tt__ImageStabilizationMode_ * soap_new_req_tt__ImageStabilizationMode_(
	struct soap *soap,
	enum tt__ImageStabilizationMode __item)
{
	tt__ImageStabilizationMode_ *_p = soap_new_tt__ImageStabilizationMode_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ImageStabilizationMode_::__item = __item;
	}
	return _p;
}

inline tt__ImageStabilizationMode_ * soap_new_set_tt__ImageStabilizationMode_(
	struct soap *soap,
	enum tt__ImageStabilizationMode __item,
	char *__item1)
{
	tt__ImageStabilizationMode_ *_p = soap_new_tt__ImageStabilizationMode_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ImageStabilizationMode_::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__ImageStabilizationMode_(struct soap *soap, tt__ImageStabilizationMode_ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ImageStabilizationMode", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__ImageStabilizationMode_ * SOAP_FMAC4 soap_get_tt__ImageStabilizationMode_(struct soap*, tt__ImageStabilizationMode_ *, const char*, const char*);

inline int soap_read_tt__ImageStabilizationMode_(struct soap *soap, tt__ImageStabilizationMode_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__ImageStabilizationMode_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__IrCutFilterMode__DEFINED
#define SOAP_TYPE_tt__IrCutFilterMode__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IrCutFilterMode_(struct soap*, const char*, int, const tt__IrCutFilterMode_ *, const char*);
SOAP_FMAC3 tt__IrCutFilterMode_ * SOAP_FMAC4 soap_in_tt__IrCutFilterMode_(struct soap*, const char*, tt__IrCutFilterMode_ *, const char*);
SOAP_FMAC1 tt__IrCutFilterMode_ * SOAP_FMAC2 soap_instantiate_tt__IrCutFilterMode_(struct soap*, int, const char*, const char*, size_t*);

inline tt__IrCutFilterMode_ * soap_new_tt__IrCutFilterMode_(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__IrCutFilterMode_(soap, n, NULL, NULL, NULL);
}

inline tt__IrCutFilterMode_ * soap_new_req_tt__IrCutFilterMode_(
	struct soap *soap,
	enum tt__IrCutFilterMode __item)
{
	tt__IrCutFilterMode_ *_p = soap_new_tt__IrCutFilterMode_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__IrCutFilterMode_::__item = __item;
	}
	return _p;
}

inline tt__IrCutFilterMode_ * soap_new_set_tt__IrCutFilterMode_(
	struct soap *soap,
	enum tt__IrCutFilterMode __item,
	char *__item1)
{
	tt__IrCutFilterMode_ *_p = soap_new_tt__IrCutFilterMode_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__IrCutFilterMode_::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__IrCutFilterMode_(struct soap *soap, tt__IrCutFilterMode_ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IrCutFilterMode", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__IrCutFilterMode_ * SOAP_FMAC4 soap_get_tt__IrCutFilterMode_(struct soap*, tt__IrCutFilterMode_ *, const char*, const char*);

inline int soap_read_tt__IrCutFilterMode_(struct soap *soap, tt__IrCutFilterMode_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__IrCutFilterMode_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__WhiteBalanceMode__DEFINED
#define SOAP_TYPE_tt__WhiteBalanceMode__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__WhiteBalanceMode_(struct soap*, const char*, int, const tt__WhiteBalanceMode_ *, const char*);
SOAP_FMAC3 tt__WhiteBalanceMode_ * SOAP_FMAC4 soap_in_tt__WhiteBalanceMode_(struct soap*, const char*, tt__WhiteBalanceMode_ *, const char*);
SOAP_FMAC1 tt__WhiteBalanceMode_ * SOAP_FMAC2 soap_instantiate_tt__WhiteBalanceMode_(struct soap*, int, const char*, const char*, size_t*);

inline tt__WhiteBalanceMode_ * soap_new_tt__WhiteBalanceMode_(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__WhiteBalanceMode_(soap, n, NULL, NULL, NULL);
}

inline tt__WhiteBalanceMode_ * soap_new_req_tt__WhiteBalanceMode_(
	struct soap *soap,
	enum tt__WhiteBalanceMode __item)
{
	tt__WhiteBalanceMode_ *_p = soap_new_tt__WhiteBalanceMode_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__WhiteBalanceMode_::__item = __item;
	}
	return _p;
}

inline tt__WhiteBalanceMode_ * soap_new_set_tt__WhiteBalanceMode_(
	struct soap *soap,
	enum tt__WhiteBalanceMode __item,
	char *__item1)
{
	tt__WhiteBalanceMode_ *_p = soap_new_tt__WhiteBalanceMode_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__WhiteBalanceMode_::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__WhiteBalanceMode_(struct soap *soap, tt__WhiteBalanceMode_ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:WhiteBalanceMode", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__WhiteBalanceMode_ * SOAP_FMAC4 soap_get_tt__WhiteBalanceMode_(struct soap*, tt__WhiteBalanceMode_ *, const char*, const char*);

inline int soap_read_tt__WhiteBalanceMode_(struct soap *soap, tt__WhiteBalanceMode_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__WhiteBalanceMode_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__Enabled__DEFINED
#define SOAP_TYPE_tt__Enabled__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Enabled_(struct soap*, const char*, int, const tt__Enabled_ *, const char*);
SOAP_FMAC3 tt__Enabled_ * SOAP_FMAC4 soap_in_tt__Enabled_(struct soap*, const char*, tt__Enabled_ *, const char*);
SOAP_FMAC1 tt__Enabled_ * SOAP_FMAC2 soap_instantiate_tt__Enabled_(struct soap*, int, const char*, const char*, size_t*);

inline tt__Enabled_ * soap_new_tt__Enabled_(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Enabled_(soap, n, NULL, NULL, NULL);
}

inline tt__Enabled_ * soap_new_req_tt__Enabled_(
	struct soap *soap,
	enum tt__Enabled __item)
{
	tt__Enabled_ *_p = soap_new_tt__Enabled_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Enabled_::__item = __item;
	}
	return _p;
}

inline tt__Enabled_ * soap_new_set_tt__Enabled_(
	struct soap *soap,
	enum tt__Enabled __item,
	char *__item1)
{
	tt__Enabled_ *_p = soap_new_tt__Enabled_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Enabled_::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__Enabled_(struct soap *soap, tt__Enabled_ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Enabled", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__Enabled_ * SOAP_FMAC4 soap_get_tt__Enabled_(struct soap*, tt__Enabled_ *, const char*, const char*);

inline int soap_read_tt__Enabled_(struct soap *soap, tt__Enabled_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__Enabled_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__ExposureMode__DEFINED
#define SOAP_TYPE_tt__ExposureMode__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ExposureMode_(struct soap*, const char*, int, const tt__ExposureMode_ *, const char*);
SOAP_FMAC3 tt__ExposureMode_ * SOAP_FMAC4 soap_in_tt__ExposureMode_(struct soap*, const char*, tt__ExposureMode_ *, const char*);
SOAP_FMAC1 tt__ExposureMode_ * SOAP_FMAC2 soap_instantiate_tt__ExposureMode_(struct soap*, int, const char*, const char*, size_t*);

inline tt__ExposureMode_ * soap_new_tt__ExposureMode_(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ExposureMode_(soap, n, NULL, NULL, NULL);
}

inline tt__ExposureMode_ * soap_new_req_tt__ExposureMode_(
	struct soap *soap,
	enum tt__ExposureMode __item)
{
	tt__ExposureMode_ *_p = soap_new_tt__ExposureMode_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ExposureMode_::__item = __item;
	}
	return _p;
}

inline tt__ExposureMode_ * soap_new_set_tt__ExposureMode_(
	struct soap *soap,
	enum tt__ExposureMode __item,
	char *__item1)
{
	tt__ExposureMode_ *_p = soap_new_tt__ExposureMode_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ExposureMode_::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__ExposureMode_(struct soap *soap, tt__ExposureMode_ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ExposureMode", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__ExposureMode_ * SOAP_FMAC4 soap_get_tt__ExposureMode_(struct soap*, tt__ExposureMode_ *, const char*, const char*);

inline int soap_read_tt__ExposureMode_(struct soap *soap, tt__ExposureMode_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__ExposureMode_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__ExposurePriority__DEFINED
#define SOAP_TYPE_tt__ExposurePriority__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ExposurePriority_(struct soap*, const char*, int, const tt__ExposurePriority_ *, const char*);
SOAP_FMAC3 tt__ExposurePriority_ * SOAP_FMAC4 soap_in_tt__ExposurePriority_(struct soap*, const char*, tt__ExposurePriority_ *, const char*);
SOAP_FMAC1 tt__ExposurePriority_ * SOAP_FMAC2 soap_instantiate_tt__ExposurePriority_(struct soap*, int, const char*, const char*, size_t*);

inline tt__ExposurePriority_ * soap_new_tt__ExposurePriority_(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ExposurePriority_(soap, n, NULL, NULL, NULL);
}

inline tt__ExposurePriority_ * soap_new_req_tt__ExposurePriority_(
	struct soap *soap,
	enum tt__ExposurePriority __item)
{
	tt__ExposurePriority_ *_p = soap_new_tt__ExposurePriority_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ExposurePriority_::__item = __item;
	}
	return _p;
}

inline tt__ExposurePriority_ * soap_new_set_tt__ExposurePriority_(
	struct soap *soap,
	enum tt__ExposurePriority __item,
	char *__item1)
{
	tt__ExposurePriority_ *_p = soap_new_tt__ExposurePriority_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ExposurePriority_::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__ExposurePriority_(struct soap *soap, tt__ExposurePriority_ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ExposurePriority", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__ExposurePriority_ * SOAP_FMAC4 soap_get_tt__ExposurePriority_(struct soap*, tt__ExposurePriority_ *, const char*, const char*);

inline int soap_read_tt__ExposurePriority_(struct soap *soap, tt__ExposurePriority_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__ExposurePriority_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__BacklightCompensationMode__DEFINED
#define SOAP_TYPE_tt__BacklightCompensationMode__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__BacklightCompensationMode_(struct soap*, const char*, int, const tt__BacklightCompensationMode_ *, const char*);
SOAP_FMAC3 tt__BacklightCompensationMode_ * SOAP_FMAC4 soap_in_tt__BacklightCompensationMode_(struct soap*, const char*, tt__BacklightCompensationMode_ *, const char*);
SOAP_FMAC1 tt__BacklightCompensationMode_ * SOAP_FMAC2 soap_instantiate_tt__BacklightCompensationMode_(struct soap*, int, const char*, const char*, size_t*);

inline tt__BacklightCompensationMode_ * soap_new_tt__BacklightCompensationMode_(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__BacklightCompensationMode_(soap, n, NULL, NULL, NULL);
}

inline tt__BacklightCompensationMode_ * soap_new_req_tt__BacklightCompensationMode_(
	struct soap *soap,
	enum tt__BacklightCompensationMode __item)
{
	tt__BacklightCompensationMode_ *_p = soap_new_tt__BacklightCompensationMode_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__BacklightCompensationMode_::__item = __item;
	}
	return _p;
}

inline tt__BacklightCompensationMode_ * soap_new_set_tt__BacklightCompensationMode_(
	struct soap *soap,
	enum tt__BacklightCompensationMode __item,
	char *__item1)
{
	tt__BacklightCompensationMode_ *_p = soap_new_tt__BacklightCompensationMode_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__BacklightCompensationMode_::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__BacklightCompensationMode_(struct soap *soap, tt__BacklightCompensationMode_ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:BacklightCompensationMode", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__BacklightCompensationMode_ * SOAP_FMAC4 soap_get_tt__BacklightCompensationMode_(struct soap*, tt__BacklightCompensationMode_ *, const char*, const char*);

inline int soap_read_tt__BacklightCompensationMode_(struct soap *soap, tt__BacklightCompensationMode_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__BacklightCompensationMode_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__WideDynamicMode__DEFINED
#define SOAP_TYPE_tt__WideDynamicMode__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__WideDynamicMode_(struct soap*, const char*, int, const tt__WideDynamicMode_ *, const char*);
SOAP_FMAC3 tt__WideDynamicMode_ * SOAP_FMAC4 soap_in_tt__WideDynamicMode_(struct soap*, const char*, tt__WideDynamicMode_ *, const char*);
SOAP_FMAC1 tt__WideDynamicMode_ * SOAP_FMAC2 soap_instantiate_tt__WideDynamicMode_(struct soap*, int, const char*, const char*, size_t*);

inline tt__WideDynamicMode_ * soap_new_tt__WideDynamicMode_(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__WideDynamicMode_(soap, n, NULL, NULL, NULL);
}

inline tt__WideDynamicMode_ * soap_new_req_tt__WideDynamicMode_(
	struct soap *soap,
	enum tt__WideDynamicMode __item)
{
	tt__WideDynamicMode_ *_p = soap_new_tt__WideDynamicMode_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__WideDynamicMode_::__item = __item;
	}
	return _p;
}

inline tt__WideDynamicMode_ * soap_new_set_tt__WideDynamicMode_(
	struct soap *soap,
	enum tt__WideDynamicMode __item,
	char *__item1)
{
	tt__WideDynamicMode_ *_p = soap_new_tt__WideDynamicMode_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__WideDynamicMode_::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__WideDynamicMode_(struct soap *soap, tt__WideDynamicMode_ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:WideDynamicMode", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__WideDynamicMode_ * SOAP_FMAC4 soap_get_tt__WideDynamicMode_(struct soap*, tt__WideDynamicMode_ *, const char*, const char*);

inline int soap_read_tt__WideDynamicMode_(struct soap *soap, tt__WideDynamicMode_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__WideDynamicMode_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__AutoFocusMode__DEFINED
#define SOAP_TYPE_tt__AutoFocusMode__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AutoFocusMode_(struct soap*, const char*, int, const tt__AutoFocusMode_ *, const char*);
SOAP_FMAC3 tt__AutoFocusMode_ * SOAP_FMAC4 soap_in_tt__AutoFocusMode_(struct soap*, const char*, tt__AutoFocusMode_ *, const char*);
SOAP_FMAC1 tt__AutoFocusMode_ * SOAP_FMAC2 soap_instantiate_tt__AutoFocusMode_(struct soap*, int, const char*, const char*, size_t*);

inline tt__AutoFocusMode_ * soap_new_tt__AutoFocusMode_(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__AutoFocusMode_(soap, n, NULL, NULL, NULL);
}

inline tt__AutoFocusMode_ * soap_new_req_tt__AutoFocusMode_(
	struct soap *soap,
	enum tt__AutoFocusMode __item)
{
	tt__AutoFocusMode_ *_p = soap_new_tt__AutoFocusMode_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AutoFocusMode_::__item = __item;
	}
	return _p;
}

inline tt__AutoFocusMode_ * soap_new_set_tt__AutoFocusMode_(
	struct soap *soap,
	enum tt__AutoFocusMode __item,
	char *__item1)
{
	tt__AutoFocusMode_ *_p = soap_new_tt__AutoFocusMode_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AutoFocusMode_::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__AutoFocusMode_(struct soap *soap, tt__AutoFocusMode_ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AutoFocusMode", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__AutoFocusMode_ * SOAP_FMAC4 soap_get_tt__AutoFocusMode_(struct soap*, tt__AutoFocusMode_ *, const char*, const char*);

inline int soap_read_tt__AutoFocusMode_(struct soap *soap, tt__AutoFocusMode_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__AutoFocusMode_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourOperation__DEFINED
#define SOAP_TYPE_tt__PTZPresetTourOperation__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourOperation_(struct soap*, const char*, int, const tt__PTZPresetTourOperation_ *, const char*);
SOAP_FMAC3 tt__PTZPresetTourOperation_ * SOAP_FMAC4 soap_in_tt__PTZPresetTourOperation_(struct soap*, const char*, tt__PTZPresetTourOperation_ *, const char*);
SOAP_FMAC1 tt__PTZPresetTourOperation_ * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourOperation_(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZPresetTourOperation_ * soap_new_tt__PTZPresetTourOperation_(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZPresetTourOperation_(soap, n, NULL, NULL, NULL);
}

inline tt__PTZPresetTourOperation_ * soap_new_req_tt__PTZPresetTourOperation_(
	struct soap *soap,
	enum tt__PTZPresetTourOperation __item)
{
	tt__PTZPresetTourOperation_ *_p = soap_new_tt__PTZPresetTourOperation_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZPresetTourOperation_::__item = __item;
	}
	return _p;
}

inline tt__PTZPresetTourOperation_ * soap_new_set_tt__PTZPresetTourOperation_(
	struct soap *soap,
	enum tt__PTZPresetTourOperation __item,
	char *__item1)
{
	tt__PTZPresetTourOperation_ *_p = soap_new_tt__PTZPresetTourOperation_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZPresetTourOperation_::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__PTZPresetTourOperation_(struct soap *soap, tt__PTZPresetTourOperation_ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourOperation", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZPresetTourOperation_ * SOAP_FMAC4 soap_get_tt__PTZPresetTourOperation_(struct soap*, tt__PTZPresetTourOperation_ *, const char*, const char*);

inline int soap_read_tt__PTZPresetTourOperation_(struct soap *soap, tt__PTZPresetTourOperation_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__PTZPresetTourOperation_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourDirection__DEFINED
#define SOAP_TYPE_tt__PTZPresetTourDirection__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourDirection_(struct soap*, const char*, int, const tt__PTZPresetTourDirection_ *, const char*);
SOAP_FMAC3 tt__PTZPresetTourDirection_ * SOAP_FMAC4 soap_in_tt__PTZPresetTourDirection_(struct soap*, const char*, tt__PTZPresetTourDirection_ *, const char*);
SOAP_FMAC1 tt__PTZPresetTourDirection_ * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourDirection_(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZPresetTourDirection_ * soap_new_tt__PTZPresetTourDirection_(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZPresetTourDirection_(soap, n, NULL, NULL, NULL);
}

inline tt__PTZPresetTourDirection_ * soap_new_req_tt__PTZPresetTourDirection_(
	struct soap *soap,
	enum tt__PTZPresetTourDirection __item)
{
	tt__PTZPresetTourDirection_ *_p = soap_new_tt__PTZPresetTourDirection_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZPresetTourDirection_::__item = __item;
	}
	return _p;
}

inline tt__PTZPresetTourDirection_ * soap_new_set_tt__PTZPresetTourDirection_(
	struct soap *soap,
	enum tt__PTZPresetTourDirection __item,
	char *__item1)
{
	tt__PTZPresetTourDirection_ *_p = soap_new_tt__PTZPresetTourDirection_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZPresetTourDirection_::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__PTZPresetTourDirection_(struct soap *soap, tt__PTZPresetTourDirection_ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourDirection", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZPresetTourDirection_ * SOAP_FMAC4 soap_get_tt__PTZPresetTourDirection_(struct soap*, tt__PTZPresetTourDirection_ *, const char*, const char*);

inline int soap_read_tt__PTZPresetTourDirection_(struct soap *soap, tt__PTZPresetTourDirection_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__PTZPresetTourDirection_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourState__DEFINED
#define SOAP_TYPE_tt__PTZPresetTourState__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourState_(struct soap*, const char*, int, const tt__PTZPresetTourState_ *, const char*);
SOAP_FMAC3 tt__PTZPresetTourState_ * SOAP_FMAC4 soap_in_tt__PTZPresetTourState_(struct soap*, const char*, tt__PTZPresetTourState_ *, const char*);
SOAP_FMAC1 tt__PTZPresetTourState_ * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourState_(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZPresetTourState_ * soap_new_tt__PTZPresetTourState_(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZPresetTourState_(soap, n, NULL, NULL, NULL);
}

inline tt__PTZPresetTourState_ * soap_new_req_tt__PTZPresetTourState_(
	struct soap *soap,
	enum tt__PTZPresetTourState __item)
{
	tt__PTZPresetTourState_ *_p = soap_new_tt__PTZPresetTourState_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZPresetTourState_::__item = __item;
	}
	return _p;
}

inline tt__PTZPresetTourState_ * soap_new_set_tt__PTZPresetTourState_(
	struct soap *soap,
	enum tt__PTZPresetTourState __item,
	char *__item1)
{
	tt__PTZPresetTourState_ *_p = soap_new_tt__PTZPresetTourState_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZPresetTourState_::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__PTZPresetTourState_(struct soap *soap, tt__PTZPresetTourState_ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourState", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZPresetTourState_ * SOAP_FMAC4 soap_get_tt__PTZPresetTourState_(struct soap*, tt__PTZPresetTourState_ *, const char*, const char*);

inline int soap_read_tt__PTZPresetTourState_(struct soap *soap, tt__PTZPresetTourState_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__PTZPresetTourState_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__MoveStatus__DEFINED
#define SOAP_TYPE_tt__MoveStatus__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__MoveStatus_(struct soap*, const char*, int, const tt__MoveStatus_ *, const char*);
SOAP_FMAC3 tt__MoveStatus_ * SOAP_FMAC4 soap_in_tt__MoveStatus_(struct soap*, const char*, tt__MoveStatus_ *, const char*);
SOAP_FMAC1 tt__MoveStatus_ * SOAP_FMAC2 soap_instantiate_tt__MoveStatus_(struct soap*, int, const char*, const char*, size_t*);

inline tt__MoveStatus_ * soap_new_tt__MoveStatus_(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__MoveStatus_(soap, n, NULL, NULL, NULL);
}

inline tt__MoveStatus_ * soap_new_req_tt__MoveStatus_(
	struct soap *soap,
	enum tt__MoveStatus __item)
{
	tt__MoveStatus_ *_p = soap_new_tt__MoveStatus_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__MoveStatus_::__item = __item;
	}
	return _p;
}

inline tt__MoveStatus_ * soap_new_set_tt__MoveStatus_(
	struct soap *soap,
	enum tt__MoveStatus __item,
	char *__item1)
{
	tt__MoveStatus_ *_p = soap_new_tt__MoveStatus_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__MoveStatus_::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__MoveStatus_(struct soap *soap, tt__MoveStatus_ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:MoveStatus", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__MoveStatus_ * SOAP_FMAC4 soap_get_tt__MoveStatus_(struct soap*, tt__MoveStatus_ *, const char*, const char*);

inline int soap_read_tt__MoveStatus_(struct soap *soap, tt__MoveStatus_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__MoveStatus_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__AuxiliaryData___DEFINED
#define SOAP_TYPE_tt__AuxiliaryData___DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AuxiliaryData__(struct soap*, const char*, int, const tt__AuxiliaryData__ *, const char*);
SOAP_FMAC3 tt__AuxiliaryData__ * SOAP_FMAC4 soap_in_tt__AuxiliaryData__(struct soap*, const char*, tt__AuxiliaryData__ *, const char*);
SOAP_FMAC1 tt__AuxiliaryData__ * SOAP_FMAC2 soap_instantiate_tt__AuxiliaryData__(struct soap*, int, const char*, const char*, size_t*);

inline tt__AuxiliaryData__ * soap_new_tt__AuxiliaryData__(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__AuxiliaryData__(soap, n, NULL, NULL, NULL);
}

inline tt__AuxiliaryData__ * soap_new_req_tt__AuxiliaryData__(
	struct soap *soap,
	const std::string& __item)
{
	tt__AuxiliaryData__ *_p = soap_new_tt__AuxiliaryData__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AuxiliaryData__::__item = __item;
	}
	return _p;
}

inline tt__AuxiliaryData__ * soap_new_set_tt__AuxiliaryData__(
	struct soap *soap,
	const std::string& __item,
	char *__item1)
{
	tt__AuxiliaryData__ *_p = soap_new_tt__AuxiliaryData__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AuxiliaryData__::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__AuxiliaryData__(struct soap *soap, tt__AuxiliaryData__ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AuxiliaryData", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__AuxiliaryData__ * SOAP_FMAC4 soap_get_tt__AuxiliaryData__(struct soap*, tt__AuxiliaryData__ *, const char*, const char*);

inline int soap_read_tt__AuxiliaryData__(struct soap *soap, tt__AuxiliaryData__ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__AuxiliaryData__(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__AuxiliaryData_DEFINED
#define SOAP_TYPE_tt__AuxiliaryData_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__AuxiliaryData(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_tt__AuxiliaryData(struct soap*, const std::string *);

#define soap_tt__AuxiliaryData2s soap_std__string2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AuxiliaryData(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2tt__AuxiliaryData soap_s2std__string

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_tt__AuxiliaryData(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_tt__AuxiliaryData soap_instantiate_std__string


#define soap_new_tt__AuxiliaryData soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__AuxiliaryData(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_tt__AuxiliaryData(struct soap *soap, std::string const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_tt__AuxiliaryData(soap, p, "tt:AuxiliaryData", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_tt__AuxiliaryData(struct soap*, std::string *, const char*, const char*);

inline int soap_read_tt__AuxiliaryData(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_tt__AuxiliaryData(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__ReverseMode__DEFINED
#define SOAP_TYPE_tt__ReverseMode__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ReverseMode_(struct soap*, const char*, int, const tt__ReverseMode_ *, const char*);
SOAP_FMAC3 tt__ReverseMode_ * SOAP_FMAC4 soap_in_tt__ReverseMode_(struct soap*, const char*, tt__ReverseMode_ *, const char*);
SOAP_FMAC1 tt__ReverseMode_ * SOAP_FMAC2 soap_instantiate_tt__ReverseMode_(struct soap*, int, const char*, const char*, size_t*);

inline tt__ReverseMode_ * soap_new_tt__ReverseMode_(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ReverseMode_(soap, n, NULL, NULL, NULL);
}

inline tt__ReverseMode_ * soap_new_req_tt__ReverseMode_(
	struct soap *soap,
	enum tt__ReverseMode __item)
{
	tt__ReverseMode_ *_p = soap_new_tt__ReverseMode_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ReverseMode_::__item = __item;
	}
	return _p;
}

inline tt__ReverseMode_ * soap_new_set_tt__ReverseMode_(
	struct soap *soap,
	enum tt__ReverseMode __item,
	char *__item1)
{
	tt__ReverseMode_ *_p = soap_new_tt__ReverseMode_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ReverseMode_::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__ReverseMode_(struct soap *soap, tt__ReverseMode_ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ReverseMode", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__ReverseMode_ * SOAP_FMAC4 soap_get_tt__ReverseMode_(struct soap*, tt__ReverseMode_ *, const char*, const char*);

inline int soap_read_tt__ReverseMode_(struct soap *soap, tt__ReverseMode_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__ReverseMode_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__EFlipMode__DEFINED
#define SOAP_TYPE_tt__EFlipMode__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__EFlipMode_(struct soap*, const char*, int, const tt__EFlipMode_ *, const char*);
SOAP_FMAC3 tt__EFlipMode_ * SOAP_FMAC4 soap_in_tt__EFlipMode_(struct soap*, const char*, tt__EFlipMode_ *, const char*);
SOAP_FMAC1 tt__EFlipMode_ * SOAP_FMAC2 soap_instantiate_tt__EFlipMode_(struct soap*, int, const char*, const char*, size_t*);

inline tt__EFlipMode_ * soap_new_tt__EFlipMode_(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__EFlipMode_(soap, n, NULL, NULL, NULL);
}

inline tt__EFlipMode_ * soap_new_req_tt__EFlipMode_(
	struct soap *soap,
	enum tt__EFlipMode __item)
{
	tt__EFlipMode_ *_p = soap_new_tt__EFlipMode_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__EFlipMode_::__item = __item;
	}
	return _p;
}

inline tt__EFlipMode_ * soap_new_set_tt__EFlipMode_(
	struct soap *soap,
	enum tt__EFlipMode __item,
	char *__item1)
{
	tt__EFlipMode_ *_p = soap_new_tt__EFlipMode_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__EFlipMode_::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__EFlipMode_(struct soap *soap, tt__EFlipMode_ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:EFlipMode", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__EFlipMode_ * SOAP_FMAC4 soap_get_tt__EFlipMode_(struct soap*, tt__EFlipMode_ *, const char*, const char*);

inline int soap_read_tt__EFlipMode_(struct soap *soap, tt__EFlipMode_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__EFlipMode_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__DigitalIdleState__DEFINED
#define SOAP_TYPE_tt__DigitalIdleState__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__DigitalIdleState_(struct soap*, const char*, int, const tt__DigitalIdleState_ *, const char*);
SOAP_FMAC3 tt__DigitalIdleState_ * SOAP_FMAC4 soap_in_tt__DigitalIdleState_(struct soap*, const char*, tt__DigitalIdleState_ *, const char*);
SOAP_FMAC1 tt__DigitalIdleState_ * SOAP_FMAC2 soap_instantiate_tt__DigitalIdleState_(struct soap*, int, const char*, const char*, size_t*);

inline tt__DigitalIdleState_ * soap_new_tt__DigitalIdleState_(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__DigitalIdleState_(soap, n, NULL, NULL, NULL);
}

inline tt__DigitalIdleState_ * soap_new_req_tt__DigitalIdleState_(
	struct soap *soap,
	enum tt__DigitalIdleState __item)
{
	tt__DigitalIdleState_ *_p = soap_new_tt__DigitalIdleState_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__DigitalIdleState_::__item = __item;
	}
	return _p;
}

inline tt__DigitalIdleState_ * soap_new_set_tt__DigitalIdleState_(
	struct soap *soap,
	enum tt__DigitalIdleState __item,
	char *__item1)
{
	tt__DigitalIdleState_ *_p = soap_new_tt__DigitalIdleState_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__DigitalIdleState_::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__DigitalIdleState_(struct soap *soap, tt__DigitalIdleState_ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:DigitalIdleState", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__DigitalIdleState_ * SOAP_FMAC4 soap_get_tt__DigitalIdleState_(struct soap*, tt__DigitalIdleState_ *, const char*, const char*);

inline int soap_read_tt__DigitalIdleState_(struct soap *soap, tt__DigitalIdleState_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__DigitalIdleState_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__RelayMode__DEFINED
#define SOAP_TYPE_tt__RelayMode__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RelayMode_(struct soap*, const char*, int, const tt__RelayMode_ *, const char*);
SOAP_FMAC3 tt__RelayMode_ * SOAP_FMAC4 soap_in_tt__RelayMode_(struct soap*, const char*, tt__RelayMode_ *, const char*);
SOAP_FMAC1 tt__RelayMode_ * SOAP_FMAC2 soap_instantiate_tt__RelayMode_(struct soap*, int, const char*, const char*, size_t*);

inline tt__RelayMode_ * soap_new_tt__RelayMode_(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__RelayMode_(soap, n, NULL, NULL, NULL);
}

inline tt__RelayMode_ * soap_new_req_tt__RelayMode_(
	struct soap *soap,
	enum tt__RelayMode __item)
{
	tt__RelayMode_ *_p = soap_new_tt__RelayMode_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__RelayMode_::__item = __item;
	}
	return _p;
}

inline tt__RelayMode_ * soap_new_set_tt__RelayMode_(
	struct soap *soap,
	enum tt__RelayMode __item,
	char *__item1)
{
	tt__RelayMode_ *_p = soap_new_tt__RelayMode_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__RelayMode_::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__RelayMode_(struct soap *soap, tt__RelayMode_ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:RelayMode", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__RelayMode_ * SOAP_FMAC4 soap_get_tt__RelayMode_(struct soap*, tt__RelayMode_ *, const char*, const char*);

inline int soap_read_tt__RelayMode_(struct soap *soap, tt__RelayMode_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__RelayMode_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__RelayIdleState__DEFINED
#define SOAP_TYPE_tt__RelayIdleState__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RelayIdleState_(struct soap*, const char*, int, const tt__RelayIdleState_ *, const char*);
SOAP_FMAC3 tt__RelayIdleState_ * SOAP_FMAC4 soap_in_tt__RelayIdleState_(struct soap*, const char*, tt__RelayIdleState_ *, const char*);
SOAP_FMAC1 tt__RelayIdleState_ * SOAP_FMAC2 soap_instantiate_tt__RelayIdleState_(struct soap*, int, const char*, const char*, size_t*);

inline tt__RelayIdleState_ * soap_new_tt__RelayIdleState_(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__RelayIdleState_(soap, n, NULL, NULL, NULL);
}

inline tt__RelayIdleState_ * soap_new_req_tt__RelayIdleState_(
	struct soap *soap,
	enum tt__RelayIdleState __item)
{
	tt__RelayIdleState_ *_p = soap_new_tt__RelayIdleState_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__RelayIdleState_::__item = __item;
	}
	return _p;
}

inline tt__RelayIdleState_ * soap_new_set_tt__RelayIdleState_(
	struct soap *soap,
	enum tt__RelayIdleState __item,
	char *__item1)
{
	tt__RelayIdleState_ *_p = soap_new_tt__RelayIdleState_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__RelayIdleState_::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__RelayIdleState_(struct soap *soap, tt__RelayIdleState_ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:RelayIdleState", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__RelayIdleState_ * SOAP_FMAC4 soap_get_tt__RelayIdleState_(struct soap*, tt__RelayIdleState_ *, const char*, const char*);

inline int soap_read_tt__RelayIdleState_(struct soap *soap, tt__RelayIdleState_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__RelayIdleState_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__RelayLogicalState__DEFINED
#define SOAP_TYPE_tt__RelayLogicalState__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RelayLogicalState_(struct soap*, const char*, int, const tt__RelayLogicalState_ *, const char*);
SOAP_FMAC3 tt__RelayLogicalState_ * SOAP_FMAC4 soap_in_tt__RelayLogicalState_(struct soap*, const char*, tt__RelayLogicalState_ *, const char*);
SOAP_FMAC1 tt__RelayLogicalState_ * SOAP_FMAC2 soap_instantiate_tt__RelayLogicalState_(struct soap*, int, const char*, const char*, size_t*);

inline tt__RelayLogicalState_ * soap_new_tt__RelayLogicalState_(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__RelayLogicalState_(soap, n, NULL, NULL, NULL);
}

inline tt__RelayLogicalState_ * soap_new_req_tt__RelayLogicalState_(
	struct soap *soap,
	enum tt__RelayLogicalState __item)
{
	tt__RelayLogicalState_ *_p = soap_new_tt__RelayLogicalState_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__RelayLogicalState_::__item = __item;
	}
	return _p;
}

inline tt__RelayLogicalState_ * soap_new_set_tt__RelayLogicalState_(
	struct soap *soap,
	enum tt__RelayLogicalState __item,
	char *__item1)
{
	tt__RelayLogicalState_ *_p = soap_new_tt__RelayLogicalState_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__RelayLogicalState_::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__RelayLogicalState_(struct soap *soap, tt__RelayLogicalState_ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:RelayLogicalState", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__RelayLogicalState_ * SOAP_FMAC4 soap_get_tt__RelayLogicalState_(struct soap*, tt__RelayLogicalState_ *, const char*, const char*);

inline int soap_read_tt__RelayLogicalState_(struct soap *soap, tt__RelayLogicalState_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__RelayLogicalState_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__UserLevel__DEFINED
#define SOAP_TYPE_tt__UserLevel__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__UserLevel_(struct soap*, const char*, int, const tt__UserLevel_ *, const char*);
SOAP_FMAC3 tt__UserLevel_ * SOAP_FMAC4 soap_in_tt__UserLevel_(struct soap*, const char*, tt__UserLevel_ *, const char*);
SOAP_FMAC1 tt__UserLevel_ * SOAP_FMAC2 soap_instantiate_tt__UserLevel_(struct soap*, int, const char*, const char*, size_t*);

inline tt__UserLevel_ * soap_new_tt__UserLevel_(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__UserLevel_(soap, n, NULL, NULL, NULL);
}

inline tt__UserLevel_ * soap_new_req_tt__UserLevel_(
	struct soap *soap,
	enum tt__UserLevel __item)
{
	tt__UserLevel_ *_p = soap_new_tt__UserLevel_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__UserLevel_::__item = __item;
	}
	return _p;
}

inline tt__UserLevel_ * soap_new_set_tt__UserLevel_(
	struct soap *soap,
	enum tt__UserLevel __item,
	char *__item1)
{
	tt__UserLevel_ *_p = soap_new_tt__UserLevel_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__UserLevel_::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__UserLevel_(struct soap *soap, tt__UserLevel_ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:UserLevel", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__UserLevel_ * SOAP_FMAC4 soap_get_tt__UserLevel_(struct soap*, tt__UserLevel_ *, const char*, const char*);

inline int soap_read_tt__UserLevel_(struct soap *soap, tt__UserLevel_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__UserLevel_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__SetDateTimeType__DEFINED
#define SOAP_TYPE_tt__SetDateTimeType__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__SetDateTimeType_(struct soap*, const char*, int, const tt__SetDateTimeType_ *, const char*);
SOAP_FMAC3 tt__SetDateTimeType_ * SOAP_FMAC4 soap_in_tt__SetDateTimeType_(struct soap*, const char*, tt__SetDateTimeType_ *, const char*);
SOAP_FMAC1 tt__SetDateTimeType_ * SOAP_FMAC2 soap_instantiate_tt__SetDateTimeType_(struct soap*, int, const char*, const char*, size_t*);

inline tt__SetDateTimeType_ * soap_new_tt__SetDateTimeType_(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__SetDateTimeType_(soap, n, NULL, NULL, NULL);
}

inline tt__SetDateTimeType_ * soap_new_req_tt__SetDateTimeType_(
	struct soap *soap,
	enum tt__SetDateTimeType __item)
{
	tt__SetDateTimeType_ *_p = soap_new_tt__SetDateTimeType_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__SetDateTimeType_::__item = __item;
	}
	return _p;
}

inline tt__SetDateTimeType_ * soap_new_set_tt__SetDateTimeType_(
	struct soap *soap,
	enum tt__SetDateTimeType __item,
	char *__item1)
{
	tt__SetDateTimeType_ *_p = soap_new_tt__SetDateTimeType_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__SetDateTimeType_::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__SetDateTimeType_(struct soap *soap, tt__SetDateTimeType_ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:SetDateTimeType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__SetDateTimeType_ * SOAP_FMAC4 soap_get_tt__SetDateTimeType_(struct soap*, tt__SetDateTimeType_ *, const char*, const char*);

inline int soap_read_tt__SetDateTimeType_(struct soap *soap, tt__SetDateTimeType_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__SetDateTimeType_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__FactoryDefaultType__DEFINED
#define SOAP_TYPE_tt__FactoryDefaultType__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__FactoryDefaultType_(struct soap*, const char*, int, const tt__FactoryDefaultType_ *, const char*);
SOAP_FMAC3 tt__FactoryDefaultType_ * SOAP_FMAC4 soap_in_tt__FactoryDefaultType_(struct soap*, const char*, tt__FactoryDefaultType_ *, const char*);
SOAP_FMAC1 tt__FactoryDefaultType_ * SOAP_FMAC2 soap_instantiate_tt__FactoryDefaultType_(struct soap*, int, const char*, const char*, size_t*);

inline tt__FactoryDefaultType_ * soap_new_tt__FactoryDefaultType_(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__FactoryDefaultType_(soap, n, NULL, NULL, NULL);
}

inline tt__FactoryDefaultType_ * soap_new_req_tt__FactoryDefaultType_(
	struct soap *soap,
	enum tt__FactoryDefaultType __item)
{
	tt__FactoryDefaultType_ *_p = soap_new_tt__FactoryDefaultType_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__FactoryDefaultType_::__item = __item;
	}
	return _p;
}

inline tt__FactoryDefaultType_ * soap_new_set_tt__FactoryDefaultType_(
	struct soap *soap,
	enum tt__FactoryDefaultType __item,
	char *__item1)
{
	tt__FactoryDefaultType_ *_p = soap_new_tt__FactoryDefaultType_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__FactoryDefaultType_::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__FactoryDefaultType_(struct soap *soap, tt__FactoryDefaultType_ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:FactoryDefaultType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__FactoryDefaultType_ * SOAP_FMAC4 soap_get_tt__FactoryDefaultType_(struct soap*, tt__FactoryDefaultType_ *, const char*, const char*);

inline int soap_read_tt__FactoryDefaultType_(struct soap *soap, tt__FactoryDefaultType_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__FactoryDefaultType_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__SystemLogType__DEFINED
#define SOAP_TYPE_tt__SystemLogType__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__SystemLogType_(struct soap*, const char*, int, const tt__SystemLogType_ *, const char*);
SOAP_FMAC3 tt__SystemLogType_ * SOAP_FMAC4 soap_in_tt__SystemLogType_(struct soap*, const char*, tt__SystemLogType_ *, const char*);
SOAP_FMAC1 tt__SystemLogType_ * SOAP_FMAC2 soap_instantiate_tt__SystemLogType_(struct soap*, int, const char*, const char*, size_t*);

inline tt__SystemLogType_ * soap_new_tt__SystemLogType_(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__SystemLogType_(soap, n, NULL, NULL, NULL);
}

inline tt__SystemLogType_ * soap_new_req_tt__SystemLogType_(
	struct soap *soap,
	enum tt__SystemLogType __item)
{
	tt__SystemLogType_ *_p = soap_new_tt__SystemLogType_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__SystemLogType_::__item = __item;
	}
	return _p;
}

inline tt__SystemLogType_ * soap_new_set_tt__SystemLogType_(
	struct soap *soap,
	enum tt__SystemLogType __item,
	char *__item1)
{
	tt__SystemLogType_ *_p = soap_new_tt__SystemLogType_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__SystemLogType_::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__SystemLogType_(struct soap *soap, tt__SystemLogType_ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:SystemLogType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__SystemLogType_ * SOAP_FMAC4 soap_get_tt__SystemLogType_(struct soap*, tt__SystemLogType_ *, const char*, const char*);

inline int soap_read_tt__SystemLogType_(struct soap *soap, tt__SystemLogType_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__SystemLogType_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__CapabilityCategory__DEFINED
#define SOAP_TYPE_tt__CapabilityCategory__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__CapabilityCategory_(struct soap*, const char*, int, const tt__CapabilityCategory_ *, const char*);
SOAP_FMAC3 tt__CapabilityCategory_ * SOAP_FMAC4 soap_in_tt__CapabilityCategory_(struct soap*, const char*, tt__CapabilityCategory_ *, const char*);
SOAP_FMAC1 tt__CapabilityCategory_ * SOAP_FMAC2 soap_instantiate_tt__CapabilityCategory_(struct soap*, int, const char*, const char*, size_t*);

inline tt__CapabilityCategory_ * soap_new_tt__CapabilityCategory_(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__CapabilityCategory_(soap, n, NULL, NULL, NULL);
}

inline tt__CapabilityCategory_ * soap_new_req_tt__CapabilityCategory_(
	struct soap *soap,
	enum tt__CapabilityCategory __item)
{
	tt__CapabilityCategory_ *_p = soap_new_tt__CapabilityCategory_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__CapabilityCategory_::__item = __item;
	}
	return _p;
}

inline tt__CapabilityCategory_ * soap_new_set_tt__CapabilityCategory_(
	struct soap *soap,
	enum tt__CapabilityCategory __item,
	char *__item1)
{
	tt__CapabilityCategory_ *_p = soap_new_tt__CapabilityCategory_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__CapabilityCategory_::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__CapabilityCategory_(struct soap *soap, tt__CapabilityCategory_ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:CapabilityCategory", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__CapabilityCategory_ * SOAP_FMAC4 soap_get_tt__CapabilityCategory_(struct soap*, tt__CapabilityCategory_ *, const char*, const char*);

inline int soap_read_tt__CapabilityCategory_(struct soap *soap, tt__CapabilityCategory_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__CapabilityCategory_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__Dot11AuthAndMangementSuite__DEFINED
#define SOAP_TYPE_tt__Dot11AuthAndMangementSuite__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Dot11AuthAndMangementSuite_(struct soap*, const char*, int, const tt__Dot11AuthAndMangementSuite_ *, const char*);
SOAP_FMAC3 tt__Dot11AuthAndMangementSuite_ * SOAP_FMAC4 soap_in_tt__Dot11AuthAndMangementSuite_(struct soap*, const char*, tt__Dot11AuthAndMangementSuite_ *, const char*);
SOAP_FMAC1 tt__Dot11AuthAndMangementSuite_ * SOAP_FMAC2 soap_instantiate_tt__Dot11AuthAndMangementSuite_(struct soap*, int, const char*, const char*, size_t*);

inline tt__Dot11AuthAndMangementSuite_ * soap_new_tt__Dot11AuthAndMangementSuite_(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Dot11AuthAndMangementSuite_(soap, n, NULL, NULL, NULL);
}

inline tt__Dot11AuthAndMangementSuite_ * soap_new_req_tt__Dot11AuthAndMangementSuite_(
	struct soap *soap,
	enum tt__Dot11AuthAndMangementSuite __item)
{
	tt__Dot11AuthAndMangementSuite_ *_p = soap_new_tt__Dot11AuthAndMangementSuite_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Dot11AuthAndMangementSuite_::__item = __item;
	}
	return _p;
}

inline tt__Dot11AuthAndMangementSuite_ * soap_new_set_tt__Dot11AuthAndMangementSuite_(
	struct soap *soap,
	enum tt__Dot11AuthAndMangementSuite __item,
	char *__item1)
{
	tt__Dot11AuthAndMangementSuite_ *_p = soap_new_tt__Dot11AuthAndMangementSuite_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Dot11AuthAndMangementSuite_::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__Dot11AuthAndMangementSuite_(struct soap *soap, tt__Dot11AuthAndMangementSuite_ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Dot11AuthAndMangementSuite", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__Dot11AuthAndMangementSuite_ * SOAP_FMAC4 soap_get_tt__Dot11AuthAndMangementSuite_(struct soap*, tt__Dot11AuthAndMangementSuite_ *, const char*, const char*);

inline int soap_read_tt__Dot11AuthAndMangementSuite_(struct soap *soap, tt__Dot11AuthAndMangementSuite_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__Dot11AuthAndMangementSuite_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__Dot11SignalStrength__DEFINED
#define SOAP_TYPE_tt__Dot11SignalStrength__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Dot11SignalStrength_(struct soap*, const char*, int, const tt__Dot11SignalStrength_ *, const char*);
SOAP_FMAC3 tt__Dot11SignalStrength_ * SOAP_FMAC4 soap_in_tt__Dot11SignalStrength_(struct soap*, const char*, tt__Dot11SignalStrength_ *, const char*);
SOAP_FMAC1 tt__Dot11SignalStrength_ * SOAP_FMAC2 soap_instantiate_tt__Dot11SignalStrength_(struct soap*, int, const char*, const char*, size_t*);

inline tt__Dot11SignalStrength_ * soap_new_tt__Dot11SignalStrength_(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Dot11SignalStrength_(soap, n, NULL, NULL, NULL);
}

inline tt__Dot11SignalStrength_ * soap_new_req_tt__Dot11SignalStrength_(
	struct soap *soap,
	enum tt__Dot11SignalStrength __item)
{
	tt__Dot11SignalStrength_ *_p = soap_new_tt__Dot11SignalStrength_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Dot11SignalStrength_::__item = __item;
	}
	return _p;
}

inline tt__Dot11SignalStrength_ * soap_new_set_tt__Dot11SignalStrength_(
	struct soap *soap,
	enum tt__Dot11SignalStrength __item,
	char *__item1)
{
	tt__Dot11SignalStrength_ *_p = soap_new_tt__Dot11SignalStrength_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Dot11SignalStrength_::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__Dot11SignalStrength_(struct soap *soap, tt__Dot11SignalStrength_ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Dot11SignalStrength", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__Dot11SignalStrength_ * SOAP_FMAC4 soap_get_tt__Dot11SignalStrength_(struct soap*, tt__Dot11SignalStrength_ *, const char*, const char*);

inline int soap_read_tt__Dot11SignalStrength_(struct soap *soap, tt__Dot11SignalStrength_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__Dot11SignalStrength_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__Dot11PSKPassphrase___DEFINED
#define SOAP_TYPE_tt__Dot11PSKPassphrase___DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Dot11PSKPassphrase__(struct soap*, const char*, int, const tt__Dot11PSKPassphrase__ *, const char*);
SOAP_FMAC3 tt__Dot11PSKPassphrase__ * SOAP_FMAC4 soap_in_tt__Dot11PSKPassphrase__(struct soap*, const char*, tt__Dot11PSKPassphrase__ *, const char*);
SOAP_FMAC1 tt__Dot11PSKPassphrase__ * SOAP_FMAC2 soap_instantiate_tt__Dot11PSKPassphrase__(struct soap*, int, const char*, const char*, size_t*);

inline tt__Dot11PSKPassphrase__ * soap_new_tt__Dot11PSKPassphrase__(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Dot11PSKPassphrase__(soap, n, NULL, NULL, NULL);
}

inline tt__Dot11PSKPassphrase__ * soap_new_req_tt__Dot11PSKPassphrase__(
	struct soap *soap,
	const std::string& __item)
{
	tt__Dot11PSKPassphrase__ *_p = soap_new_tt__Dot11PSKPassphrase__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Dot11PSKPassphrase__::__item = __item;
	}
	return _p;
}

inline tt__Dot11PSKPassphrase__ * soap_new_set_tt__Dot11PSKPassphrase__(
	struct soap *soap,
	const std::string& __item,
	char *__item1)
{
	tt__Dot11PSKPassphrase__ *_p = soap_new_tt__Dot11PSKPassphrase__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Dot11PSKPassphrase__::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__Dot11PSKPassphrase__(struct soap *soap, tt__Dot11PSKPassphrase__ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Dot11PSKPassphrase", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__Dot11PSKPassphrase__ * SOAP_FMAC4 soap_get_tt__Dot11PSKPassphrase__(struct soap*, tt__Dot11PSKPassphrase__ *, const char*, const char*);

inline int soap_read_tt__Dot11PSKPassphrase__(struct soap *soap, tt__Dot11PSKPassphrase__ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__Dot11PSKPassphrase__(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__Dot11PSKPassphrase_DEFINED
#define SOAP_TYPE_tt__Dot11PSKPassphrase_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__Dot11PSKPassphrase(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_tt__Dot11PSKPassphrase(struct soap*, const std::string *);

#define soap_tt__Dot11PSKPassphrase2s soap_std__string2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Dot11PSKPassphrase(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2tt__Dot11PSKPassphrase soap_s2std__string

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_tt__Dot11PSKPassphrase(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_tt__Dot11PSKPassphrase soap_instantiate_std__string


#define soap_new_tt__Dot11PSKPassphrase soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__Dot11PSKPassphrase(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_tt__Dot11PSKPassphrase(struct soap *soap, std::string const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_tt__Dot11PSKPassphrase(soap, p, "tt:Dot11PSKPassphrase", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_tt__Dot11PSKPassphrase(struct soap*, std::string *, const char*, const char*);

inline int soap_read_tt__Dot11PSKPassphrase(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_tt__Dot11PSKPassphrase(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__Dot11PSK___DEFINED
#define SOAP_TYPE_tt__Dot11PSK___DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Dot11PSK__(struct soap*, const char*, int, const tt__Dot11PSK__ *, const char*);
SOAP_FMAC3 tt__Dot11PSK__ * SOAP_FMAC4 soap_in_tt__Dot11PSK__(struct soap*, const char*, tt__Dot11PSK__ *, const char*);
SOAP_FMAC1 tt__Dot11PSK__ * SOAP_FMAC2 soap_instantiate_tt__Dot11PSK__(struct soap*, int, const char*, const char*, size_t*);

inline tt__Dot11PSK__ * soap_new_tt__Dot11PSK__(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Dot11PSK__(soap, n, NULL, NULL, NULL);
}

inline tt__Dot11PSK__ * soap_new_req_tt__Dot11PSK__(
	struct soap *soap,
	const xsd__hexBinary& __item)
{
	tt__Dot11PSK__ *_p = soap_new_tt__Dot11PSK__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Dot11PSK__::__item = __item;
	}
	return _p;
}

inline tt__Dot11PSK__ * soap_new_set_tt__Dot11PSK__(
	struct soap *soap,
	const xsd__hexBinary& __item,
	char *__item1)
{
	tt__Dot11PSK__ *_p = soap_new_tt__Dot11PSK__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Dot11PSK__::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__Dot11PSK__(struct soap *soap, tt__Dot11PSK__ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Dot11PSK", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__Dot11PSK__ * SOAP_FMAC4 soap_get_tt__Dot11PSK__(struct soap*, tt__Dot11PSK__ *, const char*, const char*);

inline int soap_read_tt__Dot11PSK__(struct soap *soap, tt__Dot11PSK__ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__Dot11PSK__(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__Dot11PSK_DEFINED
#define SOAP_TYPE_tt__Dot11PSK_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__Dot11PSK(struct soap*, xsd__hexBinary *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_tt__Dot11PSK(struct soap*, const xsd__hexBinary *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Dot11PSK(struct soap*, const char*, int, const xsd__hexBinary *, const char*);
SOAP_FMAC3 xsd__hexBinary * SOAP_FMAC4 soap_in_tt__Dot11PSK(struct soap*, const char*, xsd__hexBinary *, const char*);

#define soap_instantiate_tt__Dot11PSK soap_instantiate_xsd__hexBinary


#define soap_new_tt__Dot11PSK soap_new_xsd__hexBinary


#define soap_new_req_tt__Dot11PSK soap_new_req_xsd__hexBinary


#define soap_new_set_tt__Dot11PSK soap_new_set_xsd__hexBinary

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__Dot11PSK(struct soap*, const xsd__hexBinary *, const char*, const char*);

inline int soap_write_tt__Dot11PSK(struct soap *soap, xsd__hexBinary const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_tt__Dot11PSK(soap, p), 0) || soap_put_tt__Dot11PSK(soap, p, "tt:Dot11PSK", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 xsd__hexBinary * SOAP_FMAC4 soap_get_tt__Dot11PSK(struct soap*, xsd__hexBinary *, const char*, const char*);

inline int soap_read_tt__Dot11PSK(struct soap *soap, xsd__hexBinary *p)
{
	if (p)
	{	soap_default_tt__Dot11PSK(soap, p);
		if (soap_begin_recv(soap) || soap_get_tt__Dot11PSK(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__Dot11Cipher__DEFINED
#define SOAP_TYPE_tt__Dot11Cipher__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Dot11Cipher_(struct soap*, const char*, int, const tt__Dot11Cipher_ *, const char*);
SOAP_FMAC3 tt__Dot11Cipher_ * SOAP_FMAC4 soap_in_tt__Dot11Cipher_(struct soap*, const char*, tt__Dot11Cipher_ *, const char*);
SOAP_FMAC1 tt__Dot11Cipher_ * SOAP_FMAC2 soap_instantiate_tt__Dot11Cipher_(struct soap*, int, const char*, const char*, size_t*);

inline tt__Dot11Cipher_ * soap_new_tt__Dot11Cipher_(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Dot11Cipher_(soap, n, NULL, NULL, NULL);
}

inline tt__Dot11Cipher_ * soap_new_req_tt__Dot11Cipher_(
	struct soap *soap,
	enum tt__Dot11Cipher __item)
{
	tt__Dot11Cipher_ *_p = soap_new_tt__Dot11Cipher_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Dot11Cipher_::__item = __item;
	}
	return _p;
}

inline tt__Dot11Cipher_ * soap_new_set_tt__Dot11Cipher_(
	struct soap *soap,
	enum tt__Dot11Cipher __item,
	char *__item1)
{
	tt__Dot11Cipher_ *_p = soap_new_tt__Dot11Cipher_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Dot11Cipher_::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__Dot11Cipher_(struct soap *soap, tt__Dot11Cipher_ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Dot11Cipher", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__Dot11Cipher_ * SOAP_FMAC4 soap_get_tt__Dot11Cipher_(struct soap*, tt__Dot11Cipher_ *, const char*, const char*);

inline int soap_read_tt__Dot11Cipher_(struct soap *soap, tt__Dot11Cipher_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__Dot11Cipher_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__Dot11SecurityMode__DEFINED
#define SOAP_TYPE_tt__Dot11SecurityMode__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Dot11SecurityMode_(struct soap*, const char*, int, const tt__Dot11SecurityMode_ *, const char*);
SOAP_FMAC3 tt__Dot11SecurityMode_ * SOAP_FMAC4 soap_in_tt__Dot11SecurityMode_(struct soap*, const char*, tt__Dot11SecurityMode_ *, const char*);
SOAP_FMAC1 tt__Dot11SecurityMode_ * SOAP_FMAC2 soap_instantiate_tt__Dot11SecurityMode_(struct soap*, int, const char*, const char*, size_t*);

inline tt__Dot11SecurityMode_ * soap_new_tt__Dot11SecurityMode_(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Dot11SecurityMode_(soap, n, NULL, NULL, NULL);
}

inline tt__Dot11SecurityMode_ * soap_new_req_tt__Dot11SecurityMode_(
	struct soap *soap,
	enum tt__Dot11SecurityMode __item)
{
	tt__Dot11SecurityMode_ *_p = soap_new_tt__Dot11SecurityMode_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Dot11SecurityMode_::__item = __item;
	}
	return _p;
}

inline tt__Dot11SecurityMode_ * soap_new_set_tt__Dot11SecurityMode_(
	struct soap *soap,
	enum tt__Dot11SecurityMode __item,
	char *__item1)
{
	tt__Dot11SecurityMode_ *_p = soap_new_tt__Dot11SecurityMode_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Dot11SecurityMode_::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__Dot11SecurityMode_(struct soap *soap, tt__Dot11SecurityMode_ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Dot11SecurityMode", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__Dot11SecurityMode_ * SOAP_FMAC4 soap_get_tt__Dot11SecurityMode_(struct soap*, tt__Dot11SecurityMode_ *, const char*, const char*);

inline int soap_read_tt__Dot11SecurityMode_(struct soap *soap, tt__Dot11SecurityMode_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__Dot11SecurityMode_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__Dot11StationMode__DEFINED
#define SOAP_TYPE_tt__Dot11StationMode__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Dot11StationMode_(struct soap*, const char*, int, const tt__Dot11StationMode_ *, const char*);
SOAP_FMAC3 tt__Dot11StationMode_ * SOAP_FMAC4 soap_in_tt__Dot11StationMode_(struct soap*, const char*, tt__Dot11StationMode_ *, const char*);
SOAP_FMAC1 tt__Dot11StationMode_ * SOAP_FMAC2 soap_instantiate_tt__Dot11StationMode_(struct soap*, int, const char*, const char*, size_t*);

inline tt__Dot11StationMode_ * soap_new_tt__Dot11StationMode_(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Dot11StationMode_(soap, n, NULL, NULL, NULL);
}

inline tt__Dot11StationMode_ * soap_new_req_tt__Dot11StationMode_(
	struct soap *soap,
	enum tt__Dot11StationMode __item)
{
	tt__Dot11StationMode_ *_p = soap_new_tt__Dot11StationMode_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Dot11StationMode_::__item = __item;
	}
	return _p;
}

inline tt__Dot11StationMode_ * soap_new_set_tt__Dot11StationMode_(
	struct soap *soap,
	enum tt__Dot11StationMode __item,
	char *__item1)
{
	tt__Dot11StationMode_ *_p = soap_new_tt__Dot11StationMode_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Dot11StationMode_::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__Dot11StationMode_(struct soap *soap, tt__Dot11StationMode_ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Dot11StationMode", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__Dot11StationMode_ * SOAP_FMAC4 soap_get_tt__Dot11StationMode_(struct soap*, tt__Dot11StationMode_ *, const char*, const char*);

inline int soap_read_tt__Dot11StationMode_(struct soap *soap, tt__Dot11StationMode_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__Dot11StationMode_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__Dot11SSIDType___DEFINED
#define SOAP_TYPE_tt__Dot11SSIDType___DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Dot11SSIDType__(struct soap*, const char*, int, const tt__Dot11SSIDType__ *, const char*);
SOAP_FMAC3 tt__Dot11SSIDType__ * SOAP_FMAC4 soap_in_tt__Dot11SSIDType__(struct soap*, const char*, tt__Dot11SSIDType__ *, const char*);
SOAP_FMAC1 tt__Dot11SSIDType__ * SOAP_FMAC2 soap_instantiate_tt__Dot11SSIDType__(struct soap*, int, const char*, const char*, size_t*);

inline tt__Dot11SSIDType__ * soap_new_tt__Dot11SSIDType__(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Dot11SSIDType__(soap, n, NULL, NULL, NULL);
}

inline tt__Dot11SSIDType__ * soap_new_req_tt__Dot11SSIDType__(
	struct soap *soap,
	const xsd__hexBinary& __item)
{
	tt__Dot11SSIDType__ *_p = soap_new_tt__Dot11SSIDType__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Dot11SSIDType__::__item = __item;
	}
	return _p;
}

inline tt__Dot11SSIDType__ * soap_new_set_tt__Dot11SSIDType__(
	struct soap *soap,
	const xsd__hexBinary& __item,
	char *__item1)
{
	tt__Dot11SSIDType__ *_p = soap_new_tt__Dot11SSIDType__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Dot11SSIDType__::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__Dot11SSIDType__(struct soap *soap, tt__Dot11SSIDType__ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Dot11SSIDType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__Dot11SSIDType__ * SOAP_FMAC4 soap_get_tt__Dot11SSIDType__(struct soap*, tt__Dot11SSIDType__ *, const char*, const char*);

inline int soap_read_tt__Dot11SSIDType__(struct soap *soap, tt__Dot11SSIDType__ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__Dot11SSIDType__(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__Dot11SSIDType_DEFINED
#define SOAP_TYPE_tt__Dot11SSIDType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__Dot11SSIDType(struct soap*, xsd__hexBinary *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_tt__Dot11SSIDType(struct soap*, const xsd__hexBinary *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Dot11SSIDType(struct soap*, const char*, int, const xsd__hexBinary *, const char*);
SOAP_FMAC3 xsd__hexBinary * SOAP_FMAC4 soap_in_tt__Dot11SSIDType(struct soap*, const char*, xsd__hexBinary *, const char*);

#define soap_instantiate_tt__Dot11SSIDType soap_instantiate_xsd__hexBinary


#define soap_new_tt__Dot11SSIDType soap_new_xsd__hexBinary


#define soap_new_req_tt__Dot11SSIDType soap_new_req_xsd__hexBinary


#define soap_new_set_tt__Dot11SSIDType soap_new_set_xsd__hexBinary

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__Dot11SSIDType(struct soap*, const xsd__hexBinary *, const char*, const char*);

inline int soap_write_tt__Dot11SSIDType(struct soap *soap, xsd__hexBinary const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_tt__Dot11SSIDType(soap, p), 0) || soap_put_tt__Dot11SSIDType(soap, p, "tt:Dot11SSIDType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 xsd__hexBinary * SOAP_FMAC4 soap_get_tt__Dot11SSIDType(struct soap*, xsd__hexBinary *, const char*, const char*);

inline int soap_read_tt__Dot11SSIDType(struct soap *soap, xsd__hexBinary *p)
{
	if (p)
	{	soap_default_tt__Dot11SSIDType(soap, p);
		if (soap_begin_recv(soap) || soap_get_tt__Dot11SSIDType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__DynamicDNSType__DEFINED
#define SOAP_TYPE_tt__DynamicDNSType__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__DynamicDNSType_(struct soap*, const char*, int, const tt__DynamicDNSType_ *, const char*);
SOAP_FMAC3 tt__DynamicDNSType_ * SOAP_FMAC4 soap_in_tt__DynamicDNSType_(struct soap*, const char*, tt__DynamicDNSType_ *, const char*);
SOAP_FMAC1 tt__DynamicDNSType_ * SOAP_FMAC2 soap_instantiate_tt__DynamicDNSType_(struct soap*, int, const char*, const char*, size_t*);

inline tt__DynamicDNSType_ * soap_new_tt__DynamicDNSType_(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__DynamicDNSType_(soap, n, NULL, NULL, NULL);
}

inline tt__DynamicDNSType_ * soap_new_req_tt__DynamicDNSType_(
	struct soap *soap,
	enum tt__DynamicDNSType __item)
{
	tt__DynamicDNSType_ *_p = soap_new_tt__DynamicDNSType_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__DynamicDNSType_::__item = __item;
	}
	return _p;
}

inline tt__DynamicDNSType_ * soap_new_set_tt__DynamicDNSType_(
	struct soap *soap,
	enum tt__DynamicDNSType __item,
	char *__item1)
{
	tt__DynamicDNSType_ *_p = soap_new_tt__DynamicDNSType_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__DynamicDNSType_::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__DynamicDNSType_(struct soap *soap, tt__DynamicDNSType_ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:DynamicDNSType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__DynamicDNSType_ * SOAP_FMAC4 soap_get_tt__DynamicDNSType_(struct soap*, tt__DynamicDNSType_ *, const char*, const char*);

inline int soap_read_tt__DynamicDNSType_(struct soap *soap, tt__DynamicDNSType_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__DynamicDNSType_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__IPAddressFilterType__DEFINED
#define SOAP_TYPE_tt__IPAddressFilterType__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IPAddressFilterType_(struct soap*, const char*, int, const tt__IPAddressFilterType_ *, const char*);
SOAP_FMAC3 tt__IPAddressFilterType_ * SOAP_FMAC4 soap_in_tt__IPAddressFilterType_(struct soap*, const char*, tt__IPAddressFilterType_ *, const char*);
SOAP_FMAC1 tt__IPAddressFilterType_ * SOAP_FMAC2 soap_instantiate_tt__IPAddressFilterType_(struct soap*, int, const char*, const char*, size_t*);

inline tt__IPAddressFilterType_ * soap_new_tt__IPAddressFilterType_(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__IPAddressFilterType_(soap, n, NULL, NULL, NULL);
}

inline tt__IPAddressFilterType_ * soap_new_req_tt__IPAddressFilterType_(
	struct soap *soap,
	enum tt__IPAddressFilterType __item)
{
	tt__IPAddressFilterType_ *_p = soap_new_tt__IPAddressFilterType_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__IPAddressFilterType_::__item = __item;
	}
	return _p;
}

inline tt__IPAddressFilterType_ * soap_new_set_tt__IPAddressFilterType_(
	struct soap *soap,
	enum tt__IPAddressFilterType __item,
	char *__item1)
{
	tt__IPAddressFilterType_ *_p = soap_new_tt__IPAddressFilterType_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__IPAddressFilterType_::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__IPAddressFilterType_(struct soap *soap, tt__IPAddressFilterType_ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IPAddressFilterType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__IPAddressFilterType_ * SOAP_FMAC4 soap_get_tt__IPAddressFilterType_(struct soap*, tt__IPAddressFilterType_ *, const char*, const char*);

inline int soap_read_tt__IPAddressFilterType_(struct soap *soap, tt__IPAddressFilterType_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__IPAddressFilterType_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__Domain___DEFINED
#define SOAP_TYPE_tt__Domain___DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Domain__(struct soap*, const char*, int, const tt__Domain__ *, const char*);
SOAP_FMAC3 tt__Domain__ * SOAP_FMAC4 soap_in_tt__Domain__(struct soap*, const char*, tt__Domain__ *, const char*);
SOAP_FMAC1 tt__Domain__ * SOAP_FMAC2 soap_instantiate_tt__Domain__(struct soap*, int, const char*, const char*, size_t*);

inline tt__Domain__ * soap_new_tt__Domain__(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Domain__(soap, n, NULL, NULL, NULL);
}

inline tt__Domain__ * soap_new_req_tt__Domain__(
	struct soap *soap,
	const std::string& __item)
{
	tt__Domain__ *_p = soap_new_tt__Domain__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Domain__::__item = __item;
	}
	return _p;
}

inline tt__Domain__ * soap_new_set_tt__Domain__(
	struct soap *soap,
	const std::string& __item,
	char *__item1)
{
	tt__Domain__ *_p = soap_new_tt__Domain__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Domain__::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__Domain__(struct soap *soap, tt__Domain__ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Domain", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__Domain__ * SOAP_FMAC4 soap_get_tt__Domain__(struct soap*, tt__Domain__ *, const char*, const char*);

inline int soap_read_tt__Domain__(struct soap *soap, tt__Domain__ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__Domain__(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif
/* tt__Domain is a typedef synonym for xsd__token */

#ifndef SOAP_TYPE_tt__Domain_DEFINED
#define SOAP_TYPE_tt__Domain_DEFINED

#define soap_default_tt__Domain(soap, a) soap_default_xsd__token(soap, a)


#define soap_serialize_tt__Domain soap_serialize_xsd__token


#define soap_tt__Domain2s soap_xsd__token2s


#define soap_out_tt__Domain soap_out_xsd__token


#define soap_s2tt__Domain soap_s2xsd__token


#define soap_in_tt__Domain soap_in_xsd__token


#define soap_instantiate_tt__Domain soap_instantiate_xsd__token


#define soap_new_tt__Domain soap_new_xsd__token


#define soap_put_tt__Domain soap_put_xsd__token


#define soap_write_tt__Domain soap_write_xsd__token


#define soap_get_tt__Domain soap_get_xsd__token


#define soap_read_tt__Domain soap_read_xsd__token

#endif

#ifndef SOAP_TYPE_tt__DNSName___DEFINED
#define SOAP_TYPE_tt__DNSName___DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__DNSName__(struct soap*, const char*, int, const tt__DNSName__ *, const char*);
SOAP_FMAC3 tt__DNSName__ * SOAP_FMAC4 soap_in_tt__DNSName__(struct soap*, const char*, tt__DNSName__ *, const char*);
SOAP_FMAC1 tt__DNSName__ * SOAP_FMAC2 soap_instantiate_tt__DNSName__(struct soap*, int, const char*, const char*, size_t*);

inline tt__DNSName__ * soap_new_tt__DNSName__(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__DNSName__(soap, n, NULL, NULL, NULL);
}

inline tt__DNSName__ * soap_new_req_tt__DNSName__(
	struct soap *soap,
	const std::string& __item)
{
	tt__DNSName__ *_p = soap_new_tt__DNSName__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__DNSName__::__item = __item;
	}
	return _p;
}

inline tt__DNSName__ * soap_new_set_tt__DNSName__(
	struct soap *soap,
	const std::string& __item,
	char *__item1)
{
	tt__DNSName__ *_p = soap_new_tt__DNSName__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__DNSName__::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__DNSName__(struct soap *soap, tt__DNSName__ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:DNSName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__DNSName__ * SOAP_FMAC4 soap_get_tt__DNSName__(struct soap*, tt__DNSName__ *, const char*, const char*);

inline int soap_read_tt__DNSName__(struct soap *soap, tt__DNSName__ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__DNSName__(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif
/* tt__DNSName is a typedef synonym for xsd__token */

#ifndef SOAP_TYPE_tt__DNSName_DEFINED
#define SOAP_TYPE_tt__DNSName_DEFINED

#define soap_default_tt__DNSName(soap, a) soap_default_xsd__token(soap, a)


#define soap_serialize_tt__DNSName soap_serialize_xsd__token


#define soap_tt__DNSName2s soap_xsd__token2s


#define soap_out_tt__DNSName soap_out_xsd__token


#define soap_s2tt__DNSName soap_s2xsd__token


#define soap_in_tt__DNSName soap_in_xsd__token


#define soap_instantiate_tt__DNSName soap_instantiate_xsd__token


#define soap_new_tt__DNSName soap_new_xsd__token


#define soap_put_tt__DNSName soap_put_xsd__token


#define soap_write_tt__DNSName soap_write_xsd__token


#define soap_get_tt__DNSName soap_get_xsd__token


#define soap_read_tt__DNSName soap_read_xsd__token

#endif

#ifndef SOAP_TYPE_tt__IPType__DEFINED
#define SOAP_TYPE_tt__IPType__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IPType_(struct soap*, const char*, int, const tt__IPType_ *, const char*);
SOAP_FMAC3 tt__IPType_ * SOAP_FMAC4 soap_in_tt__IPType_(struct soap*, const char*, tt__IPType_ *, const char*);
SOAP_FMAC1 tt__IPType_ * SOAP_FMAC2 soap_instantiate_tt__IPType_(struct soap*, int, const char*, const char*, size_t*);

inline tt__IPType_ * soap_new_tt__IPType_(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__IPType_(soap, n, NULL, NULL, NULL);
}

inline tt__IPType_ * soap_new_req_tt__IPType_(
	struct soap *soap,
	enum tt__IPType __item)
{
	tt__IPType_ *_p = soap_new_tt__IPType_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__IPType_::__item = __item;
	}
	return _p;
}

inline tt__IPType_ * soap_new_set_tt__IPType_(
	struct soap *soap,
	enum tt__IPType __item,
	char *__item1)
{
	tt__IPType_ *_p = soap_new_tt__IPType_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__IPType_::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__IPType_(struct soap *soap, tt__IPType_ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IPType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__IPType_ * SOAP_FMAC4 soap_get_tt__IPType_(struct soap*, tt__IPType_ *, const char*, const char*);

inline int soap_read_tt__IPType_(struct soap *soap, tt__IPType_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__IPType_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__HwAddress___DEFINED
#define SOAP_TYPE_tt__HwAddress___DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__HwAddress__(struct soap*, const char*, int, const tt__HwAddress__ *, const char*);
SOAP_FMAC3 tt__HwAddress__ * SOAP_FMAC4 soap_in_tt__HwAddress__(struct soap*, const char*, tt__HwAddress__ *, const char*);
SOAP_FMAC1 tt__HwAddress__ * SOAP_FMAC2 soap_instantiate_tt__HwAddress__(struct soap*, int, const char*, const char*, size_t*);

inline tt__HwAddress__ * soap_new_tt__HwAddress__(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__HwAddress__(soap, n, NULL, NULL, NULL);
}

inline tt__HwAddress__ * soap_new_req_tt__HwAddress__(
	struct soap *soap,
	const std::string& __item)
{
	tt__HwAddress__ *_p = soap_new_tt__HwAddress__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__HwAddress__::__item = __item;
	}
	return _p;
}

inline tt__HwAddress__ * soap_new_set_tt__HwAddress__(
	struct soap *soap,
	const std::string& __item,
	char *__item1)
{
	tt__HwAddress__ *_p = soap_new_tt__HwAddress__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__HwAddress__::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__HwAddress__(struct soap *soap, tt__HwAddress__ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:HwAddress", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__HwAddress__ * SOAP_FMAC4 soap_get_tt__HwAddress__(struct soap*, tt__HwAddress__ *, const char*, const char*);

inline int soap_read_tt__HwAddress__(struct soap *soap, tt__HwAddress__ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__HwAddress__(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif
/* tt__HwAddress is a typedef synonym for xsd__token */

#ifndef SOAP_TYPE_tt__HwAddress_DEFINED
#define SOAP_TYPE_tt__HwAddress_DEFINED

#define soap_default_tt__HwAddress(soap, a) soap_default_xsd__token(soap, a)


#define soap_serialize_tt__HwAddress soap_serialize_xsd__token


#define soap_tt__HwAddress2s soap_xsd__token2s


#define soap_out_tt__HwAddress soap_out_xsd__token


#define soap_s2tt__HwAddress soap_s2xsd__token


#define soap_in_tt__HwAddress soap_in_xsd__token


#define soap_instantiate_tt__HwAddress soap_instantiate_xsd__token


#define soap_new_tt__HwAddress soap_new_xsd__token


#define soap_put_tt__HwAddress soap_put_xsd__token


#define soap_write_tt__HwAddress soap_write_xsd__token


#define soap_get_tt__HwAddress soap_get_xsd__token


#define soap_read_tt__HwAddress soap_read_xsd__token

#endif

#ifndef SOAP_TYPE_tt__IPv6Address___DEFINED
#define SOAP_TYPE_tt__IPv6Address___DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IPv6Address__(struct soap*, const char*, int, const tt__IPv6Address__ *, const char*);
SOAP_FMAC3 tt__IPv6Address__ * SOAP_FMAC4 soap_in_tt__IPv6Address__(struct soap*, const char*, tt__IPv6Address__ *, const char*);
SOAP_FMAC1 tt__IPv6Address__ * SOAP_FMAC2 soap_instantiate_tt__IPv6Address__(struct soap*, int, const char*, const char*, size_t*);

inline tt__IPv6Address__ * soap_new_tt__IPv6Address__(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__IPv6Address__(soap, n, NULL, NULL, NULL);
}

inline tt__IPv6Address__ * soap_new_req_tt__IPv6Address__(
	struct soap *soap,
	const std::string& __item)
{
	tt__IPv6Address__ *_p = soap_new_tt__IPv6Address__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__IPv6Address__::__item = __item;
	}
	return _p;
}

inline tt__IPv6Address__ * soap_new_set_tt__IPv6Address__(
	struct soap *soap,
	const std::string& __item,
	char *__item1)
{
	tt__IPv6Address__ *_p = soap_new_tt__IPv6Address__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__IPv6Address__::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__IPv6Address__(struct soap *soap, tt__IPv6Address__ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IPv6Address", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__IPv6Address__ * SOAP_FMAC4 soap_get_tt__IPv6Address__(struct soap*, tt__IPv6Address__ *, const char*, const char*);

inline int soap_read_tt__IPv6Address__(struct soap *soap, tt__IPv6Address__ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__IPv6Address__(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif
/* tt__IPv6Address is a typedef synonym for xsd__token */

#ifndef SOAP_TYPE_tt__IPv6Address_DEFINED
#define SOAP_TYPE_tt__IPv6Address_DEFINED

#define soap_default_tt__IPv6Address(soap, a) soap_default_xsd__token(soap, a)


#define soap_serialize_tt__IPv6Address soap_serialize_xsd__token


#define soap_tt__IPv6Address2s soap_xsd__token2s


#define soap_out_tt__IPv6Address soap_out_xsd__token


#define soap_s2tt__IPv6Address soap_s2xsd__token


#define soap_in_tt__IPv6Address soap_in_xsd__token


#define soap_instantiate_tt__IPv6Address soap_instantiate_xsd__token


#define soap_new_tt__IPv6Address soap_new_xsd__token


#define soap_put_tt__IPv6Address soap_put_xsd__token


#define soap_write_tt__IPv6Address soap_write_xsd__token


#define soap_get_tt__IPv6Address soap_get_xsd__token


#define soap_read_tt__IPv6Address soap_read_xsd__token

#endif

#ifndef SOAP_TYPE_tt__IPv4Address___DEFINED
#define SOAP_TYPE_tt__IPv4Address___DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IPv4Address__(struct soap*, const char*, int, const tt__IPv4Address__ *, const char*);
SOAP_FMAC3 tt__IPv4Address__ * SOAP_FMAC4 soap_in_tt__IPv4Address__(struct soap*, const char*, tt__IPv4Address__ *, const char*);
SOAP_FMAC1 tt__IPv4Address__ * SOAP_FMAC2 soap_instantiate_tt__IPv4Address__(struct soap*, int, const char*, const char*, size_t*);

inline tt__IPv4Address__ * soap_new_tt__IPv4Address__(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__IPv4Address__(soap, n, NULL, NULL, NULL);
}

inline tt__IPv4Address__ * soap_new_req_tt__IPv4Address__(
	struct soap *soap,
	const std::string& __item)
{
	tt__IPv4Address__ *_p = soap_new_tt__IPv4Address__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__IPv4Address__::__item = __item;
	}
	return _p;
}

inline tt__IPv4Address__ * soap_new_set_tt__IPv4Address__(
	struct soap *soap,
	const std::string& __item,
	char *__item1)
{
	tt__IPv4Address__ *_p = soap_new_tt__IPv4Address__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__IPv4Address__::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__IPv4Address__(struct soap *soap, tt__IPv4Address__ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IPv4Address", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__IPv4Address__ * SOAP_FMAC4 soap_get_tt__IPv4Address__(struct soap*, tt__IPv4Address__ *, const char*, const char*);

inline int soap_read_tt__IPv4Address__(struct soap *soap, tt__IPv4Address__ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__IPv4Address__(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif
/* tt__IPv4Address is a typedef synonym for xsd__token */

#ifndef SOAP_TYPE_tt__IPv4Address_DEFINED
#define SOAP_TYPE_tt__IPv4Address_DEFINED

#define soap_default_tt__IPv4Address(soap, a) soap_default_xsd__token(soap, a)


#define soap_serialize_tt__IPv4Address soap_serialize_xsd__token


#define soap_tt__IPv4Address2s soap_xsd__token2s


#define soap_out_tt__IPv4Address soap_out_xsd__token


#define soap_s2tt__IPv4Address soap_s2xsd__token


#define soap_in_tt__IPv4Address soap_in_xsd__token


#define soap_instantiate_tt__IPv4Address soap_instantiate_xsd__token


#define soap_new_tt__IPv4Address soap_new_xsd__token


#define soap_put_tt__IPv4Address soap_put_xsd__token


#define soap_write_tt__IPv4Address soap_write_xsd__token


#define soap_get_tt__IPv4Address soap_get_xsd__token


#define soap_read_tt__IPv4Address soap_read_xsd__token

#endif

#ifndef SOAP_TYPE_tt__NetworkHostType__DEFINED
#define SOAP_TYPE_tt__NetworkHostType__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__NetworkHostType_(struct soap*, const char*, int, const tt__NetworkHostType_ *, const char*);
SOAP_FMAC3 tt__NetworkHostType_ * SOAP_FMAC4 soap_in_tt__NetworkHostType_(struct soap*, const char*, tt__NetworkHostType_ *, const char*);
SOAP_FMAC1 tt__NetworkHostType_ * SOAP_FMAC2 soap_instantiate_tt__NetworkHostType_(struct soap*, int, const char*, const char*, size_t*);

inline tt__NetworkHostType_ * soap_new_tt__NetworkHostType_(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__NetworkHostType_(soap, n, NULL, NULL, NULL);
}

inline tt__NetworkHostType_ * soap_new_req_tt__NetworkHostType_(
	struct soap *soap,
	enum tt__NetworkHostType __item)
{
	tt__NetworkHostType_ *_p = soap_new_tt__NetworkHostType_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__NetworkHostType_::__item = __item;
	}
	return _p;
}

inline tt__NetworkHostType_ * soap_new_set_tt__NetworkHostType_(
	struct soap *soap,
	enum tt__NetworkHostType __item,
	char *__item1)
{
	tt__NetworkHostType_ *_p = soap_new_tt__NetworkHostType_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__NetworkHostType_::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__NetworkHostType_(struct soap *soap, tt__NetworkHostType_ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkHostType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__NetworkHostType_ * SOAP_FMAC4 soap_get_tt__NetworkHostType_(struct soap*, tt__NetworkHostType_ *, const char*, const char*);

inline int soap_read_tt__NetworkHostType_(struct soap *soap, tt__NetworkHostType_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__NetworkHostType_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__NetworkProtocolType__DEFINED
#define SOAP_TYPE_tt__NetworkProtocolType__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__NetworkProtocolType_(struct soap*, const char*, int, const tt__NetworkProtocolType_ *, const char*);
SOAP_FMAC3 tt__NetworkProtocolType_ * SOAP_FMAC4 soap_in_tt__NetworkProtocolType_(struct soap*, const char*, tt__NetworkProtocolType_ *, const char*);
SOAP_FMAC1 tt__NetworkProtocolType_ * SOAP_FMAC2 soap_instantiate_tt__NetworkProtocolType_(struct soap*, int, const char*, const char*, size_t*);

inline tt__NetworkProtocolType_ * soap_new_tt__NetworkProtocolType_(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__NetworkProtocolType_(soap, n, NULL, NULL, NULL);
}

inline tt__NetworkProtocolType_ * soap_new_req_tt__NetworkProtocolType_(
	struct soap *soap,
	enum tt__NetworkProtocolType __item)
{
	tt__NetworkProtocolType_ *_p = soap_new_tt__NetworkProtocolType_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__NetworkProtocolType_::__item = __item;
	}
	return _p;
}

inline tt__NetworkProtocolType_ * soap_new_set_tt__NetworkProtocolType_(
	struct soap *soap,
	enum tt__NetworkProtocolType __item,
	char *__item1)
{
	tt__NetworkProtocolType_ *_p = soap_new_tt__NetworkProtocolType_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__NetworkProtocolType_::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__NetworkProtocolType_(struct soap *soap, tt__NetworkProtocolType_ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkProtocolType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__NetworkProtocolType_ * SOAP_FMAC4 soap_get_tt__NetworkProtocolType_(struct soap*, tt__NetworkProtocolType_ *, const char*, const char*);

inline int soap_read_tt__NetworkProtocolType_(struct soap *soap, tt__NetworkProtocolType_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__NetworkProtocolType_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__IPv6DHCPConfiguration__DEFINED
#define SOAP_TYPE_tt__IPv6DHCPConfiguration__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IPv6DHCPConfiguration_(struct soap*, const char*, int, const tt__IPv6DHCPConfiguration_ *, const char*);
SOAP_FMAC3 tt__IPv6DHCPConfiguration_ * SOAP_FMAC4 soap_in_tt__IPv6DHCPConfiguration_(struct soap*, const char*, tt__IPv6DHCPConfiguration_ *, const char*);
SOAP_FMAC1 tt__IPv6DHCPConfiguration_ * SOAP_FMAC2 soap_instantiate_tt__IPv6DHCPConfiguration_(struct soap*, int, const char*, const char*, size_t*);

inline tt__IPv6DHCPConfiguration_ * soap_new_tt__IPv6DHCPConfiguration_(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__IPv6DHCPConfiguration_(soap, n, NULL, NULL, NULL);
}

inline tt__IPv6DHCPConfiguration_ * soap_new_req_tt__IPv6DHCPConfiguration_(
	struct soap *soap,
	enum tt__IPv6DHCPConfiguration __item)
{
	tt__IPv6DHCPConfiguration_ *_p = soap_new_tt__IPv6DHCPConfiguration_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__IPv6DHCPConfiguration_::__item = __item;
	}
	return _p;
}

inline tt__IPv6DHCPConfiguration_ * soap_new_set_tt__IPv6DHCPConfiguration_(
	struct soap *soap,
	enum tt__IPv6DHCPConfiguration __item,
	char *__item1)
{
	tt__IPv6DHCPConfiguration_ *_p = soap_new_tt__IPv6DHCPConfiguration_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__IPv6DHCPConfiguration_::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__IPv6DHCPConfiguration_(struct soap *soap, tt__IPv6DHCPConfiguration_ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IPv6DHCPConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__IPv6DHCPConfiguration_ * SOAP_FMAC4 soap_get_tt__IPv6DHCPConfiguration_(struct soap*, tt__IPv6DHCPConfiguration_ *, const char*, const char*);

inline int soap_read_tt__IPv6DHCPConfiguration_(struct soap *soap, tt__IPv6DHCPConfiguration_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__IPv6DHCPConfiguration_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__IANA_IfTypes___DEFINED
#define SOAP_TYPE_tt__IANA_IfTypes___DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IANA_IfTypes__(struct soap*, const char*, int, const tt__IANA_IfTypes__ *, const char*);
SOAP_FMAC3 tt__IANA_IfTypes__ * SOAP_FMAC4 soap_in_tt__IANA_IfTypes__(struct soap*, const char*, tt__IANA_IfTypes__ *, const char*);
SOAP_FMAC1 tt__IANA_IfTypes__ * SOAP_FMAC2 soap_instantiate_tt__IANA_IfTypes__(struct soap*, int, const char*, const char*, size_t*);

inline tt__IANA_IfTypes__ * soap_new_tt__IANA_IfTypes__(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__IANA_IfTypes__(soap, n, NULL, NULL, NULL);
}

inline tt__IANA_IfTypes__ * soap_new_req_tt__IANA_IfTypes__(
	struct soap *soap,
	int __item)
{
	tt__IANA_IfTypes__ *_p = soap_new_tt__IANA_IfTypes__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__IANA_IfTypes__::__item = __item;
	}
	return _p;
}

inline tt__IANA_IfTypes__ * soap_new_set_tt__IANA_IfTypes__(
	struct soap *soap,
	int __item,
	char *__item1)
{
	tt__IANA_IfTypes__ *_p = soap_new_tt__IANA_IfTypes__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__IANA_IfTypes__::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__IANA_IfTypes__(struct soap *soap, tt__IANA_IfTypes__ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IANA-IfTypes", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__IANA_IfTypes__ * SOAP_FMAC4 soap_get_tt__IANA_IfTypes__(struct soap*, tt__IANA_IfTypes__ *, const char*, const char*);

inline int soap_read_tt__IANA_IfTypes__(struct soap *soap, tt__IANA_IfTypes__ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__IANA_IfTypes__(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__Duplex__DEFINED
#define SOAP_TYPE_tt__Duplex__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Duplex_(struct soap*, const char*, int, const tt__Duplex_ *, const char*);
SOAP_FMAC3 tt__Duplex_ * SOAP_FMAC4 soap_in_tt__Duplex_(struct soap*, const char*, tt__Duplex_ *, const char*);
SOAP_FMAC1 tt__Duplex_ * SOAP_FMAC2 soap_instantiate_tt__Duplex_(struct soap*, int, const char*, const char*, size_t*);

inline tt__Duplex_ * soap_new_tt__Duplex_(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Duplex_(soap, n, NULL, NULL, NULL);
}

inline tt__Duplex_ * soap_new_req_tt__Duplex_(
	struct soap *soap,
	enum tt__Duplex __item)
{
	tt__Duplex_ *_p = soap_new_tt__Duplex_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Duplex_::__item = __item;
	}
	return _p;
}

inline tt__Duplex_ * soap_new_set_tt__Duplex_(
	struct soap *soap,
	enum tt__Duplex __item,
	char *__item1)
{
	tt__Duplex_ *_p = soap_new_tt__Duplex_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Duplex_::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__Duplex_(struct soap *soap, tt__Duplex_ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Duplex", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__Duplex_ * SOAP_FMAC4 soap_get_tt__Duplex_(struct soap*, tt__Duplex_ *, const char*, const char*);

inline int soap_read_tt__Duplex_(struct soap *soap, tt__Duplex_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__Duplex_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__NetworkInterfaceConfigPriority___DEFINED
#define SOAP_TYPE_tt__NetworkInterfaceConfigPriority___DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__NetworkInterfaceConfigPriority__(struct soap*, const char*, int, const tt__NetworkInterfaceConfigPriority__ *, const char*);
SOAP_FMAC3 tt__NetworkInterfaceConfigPriority__ * SOAP_FMAC4 soap_in_tt__NetworkInterfaceConfigPriority__(struct soap*, const char*, tt__NetworkInterfaceConfigPriority__ *, const char*);
SOAP_FMAC1 tt__NetworkInterfaceConfigPriority__ * SOAP_FMAC2 soap_instantiate_tt__NetworkInterfaceConfigPriority__(struct soap*, int, const char*, const char*, size_t*);

inline tt__NetworkInterfaceConfigPriority__ * soap_new_tt__NetworkInterfaceConfigPriority__(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__NetworkInterfaceConfigPriority__(soap, n, NULL, NULL, NULL);
}

inline tt__NetworkInterfaceConfigPriority__ * soap_new_req_tt__NetworkInterfaceConfigPriority__(
	struct soap *soap,
	const std::string& __item)
{
	tt__NetworkInterfaceConfigPriority__ *_p = soap_new_tt__NetworkInterfaceConfigPriority__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__NetworkInterfaceConfigPriority__::__item = __item;
	}
	return _p;
}

inline tt__NetworkInterfaceConfigPriority__ * soap_new_set_tt__NetworkInterfaceConfigPriority__(
	struct soap *soap,
	const std::string& __item,
	char *__item1)
{
	tt__NetworkInterfaceConfigPriority__ *_p = soap_new_tt__NetworkInterfaceConfigPriority__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__NetworkInterfaceConfigPriority__::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__NetworkInterfaceConfigPriority__(struct soap *soap, tt__NetworkInterfaceConfigPriority__ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkInterfaceConfigPriority", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__NetworkInterfaceConfigPriority__ * SOAP_FMAC4 soap_get_tt__NetworkInterfaceConfigPriority__(struct soap*, tt__NetworkInterfaceConfigPriority__ *, const char*, const char*);

inline int soap_read_tt__NetworkInterfaceConfigPriority__(struct soap *soap, tt__NetworkInterfaceConfigPriority__ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__NetworkInterfaceConfigPriority__(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif
/* tt__NetworkInterfaceConfigPriority is a typedef synonym for xsd__integer */

#ifndef SOAP_TYPE_tt__NetworkInterfaceConfigPriority_DEFINED
#define SOAP_TYPE_tt__NetworkInterfaceConfigPriority_DEFINED

#define soap_default_tt__NetworkInterfaceConfigPriority(soap, a) soap_default_xsd__integer(soap, a)


#define soap_serialize_tt__NetworkInterfaceConfigPriority soap_serialize_xsd__integer


#define soap_tt__NetworkInterfaceConfigPriority2s soap_xsd__integer2s


#define soap_out_tt__NetworkInterfaceConfigPriority soap_out_xsd__integer


#define soap_s2tt__NetworkInterfaceConfigPriority soap_s2xsd__integer


#define soap_in_tt__NetworkInterfaceConfigPriority soap_in_xsd__integer


#define soap_instantiate_tt__NetworkInterfaceConfigPriority soap_instantiate_xsd__integer


#define soap_new_tt__NetworkInterfaceConfigPriority soap_new_xsd__integer


#define soap_put_tt__NetworkInterfaceConfigPriority soap_put_xsd__integer


#define soap_write_tt__NetworkInterfaceConfigPriority soap_write_xsd__integer


#define soap_get_tt__NetworkInterfaceConfigPriority soap_get_xsd__integer


#define soap_read_tt__NetworkInterfaceConfigPriority soap_read_xsd__integer

#endif

#ifndef SOAP_TYPE_tt__DiscoveryMode__DEFINED
#define SOAP_TYPE_tt__DiscoveryMode__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__DiscoveryMode_(struct soap*, const char*, int, const tt__DiscoveryMode_ *, const char*);
SOAP_FMAC3 tt__DiscoveryMode_ * SOAP_FMAC4 soap_in_tt__DiscoveryMode_(struct soap*, const char*, tt__DiscoveryMode_ *, const char*);
SOAP_FMAC1 tt__DiscoveryMode_ * SOAP_FMAC2 soap_instantiate_tt__DiscoveryMode_(struct soap*, int, const char*, const char*, size_t*);

inline tt__DiscoveryMode_ * soap_new_tt__DiscoveryMode_(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__DiscoveryMode_(soap, n, NULL, NULL, NULL);
}

inline tt__DiscoveryMode_ * soap_new_req_tt__DiscoveryMode_(
	struct soap *soap,
	enum tt__DiscoveryMode __item)
{
	tt__DiscoveryMode_ *_p = soap_new_tt__DiscoveryMode_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__DiscoveryMode_::__item = __item;
	}
	return _p;
}

inline tt__DiscoveryMode_ * soap_new_set_tt__DiscoveryMode_(
	struct soap *soap,
	enum tt__DiscoveryMode __item,
	char *__item1)
{
	tt__DiscoveryMode_ *_p = soap_new_tt__DiscoveryMode_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__DiscoveryMode_::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__DiscoveryMode_(struct soap *soap, tt__DiscoveryMode_ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:DiscoveryMode", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__DiscoveryMode_ * SOAP_FMAC4 soap_get_tt__DiscoveryMode_(struct soap*, tt__DiscoveryMode_ *, const char*, const char*);

inline int soap_read_tt__DiscoveryMode_(struct soap *soap, tt__DiscoveryMode_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__DiscoveryMode_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__ScopeDefinition__DEFINED
#define SOAP_TYPE_tt__ScopeDefinition__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ScopeDefinition_(struct soap*, const char*, int, const tt__ScopeDefinition_ *, const char*);
SOAP_FMAC3 tt__ScopeDefinition_ * SOAP_FMAC4 soap_in_tt__ScopeDefinition_(struct soap*, const char*, tt__ScopeDefinition_ *, const char*);
SOAP_FMAC1 tt__ScopeDefinition_ * SOAP_FMAC2 soap_instantiate_tt__ScopeDefinition_(struct soap*, int, const char*, const char*, size_t*);

inline tt__ScopeDefinition_ * soap_new_tt__ScopeDefinition_(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ScopeDefinition_(soap, n, NULL, NULL, NULL);
}

inline tt__ScopeDefinition_ * soap_new_req_tt__ScopeDefinition_(
	struct soap *soap,
	enum tt__ScopeDefinition __item)
{
	tt__ScopeDefinition_ *_p = soap_new_tt__ScopeDefinition_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ScopeDefinition_::__item = __item;
	}
	return _p;
}

inline tt__ScopeDefinition_ * soap_new_set_tt__ScopeDefinition_(
	struct soap *soap,
	enum tt__ScopeDefinition __item,
	char *__item1)
{
	tt__ScopeDefinition_ *_p = soap_new_tt__ScopeDefinition_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ScopeDefinition_::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__ScopeDefinition_(struct soap *soap, tt__ScopeDefinition_ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ScopeDefinition", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__ScopeDefinition_ * SOAP_FMAC4 soap_get_tt__ScopeDefinition_(struct soap*, tt__ScopeDefinition_ *, const char*, const char*);

inline int soap_read_tt__ScopeDefinition_(struct soap *soap, tt__ScopeDefinition_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__ScopeDefinition_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__TransportProtocol__DEFINED
#define SOAP_TYPE_tt__TransportProtocol__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__TransportProtocol_(struct soap*, const char*, int, const tt__TransportProtocol_ *, const char*);
SOAP_FMAC3 tt__TransportProtocol_ * SOAP_FMAC4 soap_in_tt__TransportProtocol_(struct soap*, const char*, tt__TransportProtocol_ *, const char*);
SOAP_FMAC1 tt__TransportProtocol_ * SOAP_FMAC2 soap_instantiate_tt__TransportProtocol_(struct soap*, int, const char*, const char*, size_t*);

inline tt__TransportProtocol_ * soap_new_tt__TransportProtocol_(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__TransportProtocol_(soap, n, NULL, NULL, NULL);
}

inline tt__TransportProtocol_ * soap_new_req_tt__TransportProtocol_(
	struct soap *soap,
	enum tt__TransportProtocol __item)
{
	tt__TransportProtocol_ *_p = soap_new_tt__TransportProtocol_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__TransportProtocol_::__item = __item;
	}
	return _p;
}

inline tt__TransportProtocol_ * soap_new_set_tt__TransportProtocol_(
	struct soap *soap,
	enum tt__TransportProtocol __item,
	char *__item1)
{
	tt__TransportProtocol_ *_p = soap_new_tt__TransportProtocol_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__TransportProtocol_::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__TransportProtocol_(struct soap *soap, tt__TransportProtocol_ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:TransportProtocol", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__TransportProtocol_ * SOAP_FMAC4 soap_get_tt__TransportProtocol_(struct soap*, tt__TransportProtocol_ *, const char*, const char*);

inline int soap_read_tt__TransportProtocol_(struct soap *soap, tt__TransportProtocol_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__TransportProtocol_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__StreamType__DEFINED
#define SOAP_TYPE_tt__StreamType__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__StreamType_(struct soap*, const char*, int, const tt__StreamType_ *, const char*);
SOAP_FMAC3 tt__StreamType_ * SOAP_FMAC4 soap_in_tt__StreamType_(struct soap*, const char*, tt__StreamType_ *, const char*);
SOAP_FMAC1 tt__StreamType_ * SOAP_FMAC2 soap_instantiate_tt__StreamType_(struct soap*, int, const char*, const char*, size_t*);

inline tt__StreamType_ * soap_new_tt__StreamType_(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__StreamType_(soap, n, NULL, NULL, NULL);
}

inline tt__StreamType_ * soap_new_req_tt__StreamType_(
	struct soap *soap,
	enum tt__StreamType __item)
{
	tt__StreamType_ *_p = soap_new_tt__StreamType_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__StreamType_::__item = __item;
	}
	return _p;
}

inline tt__StreamType_ * soap_new_set_tt__StreamType_(
	struct soap *soap,
	enum tt__StreamType __item,
	char *__item1)
{
	tt__StreamType_ *_p = soap_new_tt__StreamType_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__StreamType_::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__StreamType_(struct soap *soap, tt__StreamType_ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:StreamType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__StreamType_ * SOAP_FMAC4 soap_get_tt__StreamType_(struct soap*, tt__StreamType_ *, const char*, const char*);

inline int soap_read_tt__StreamType_(struct soap *soap, tt__StreamType_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__StreamType_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__MetadataCompressionType__DEFINED
#define SOAP_TYPE_tt__MetadataCompressionType__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__MetadataCompressionType_(struct soap*, const char*, int, const tt__MetadataCompressionType_ *, const char*);
SOAP_FMAC3 tt__MetadataCompressionType_ * SOAP_FMAC4 soap_in_tt__MetadataCompressionType_(struct soap*, const char*, tt__MetadataCompressionType_ *, const char*);
SOAP_FMAC1 tt__MetadataCompressionType_ * SOAP_FMAC2 soap_instantiate_tt__MetadataCompressionType_(struct soap*, int, const char*, const char*, size_t*);

inline tt__MetadataCompressionType_ * soap_new_tt__MetadataCompressionType_(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__MetadataCompressionType_(soap, n, NULL, NULL, NULL);
}

inline tt__MetadataCompressionType_ * soap_new_req_tt__MetadataCompressionType_(
	struct soap *soap,
	enum tt__MetadataCompressionType __item)
{
	tt__MetadataCompressionType_ *_p = soap_new_tt__MetadataCompressionType_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__MetadataCompressionType_::__item = __item;
	}
	return _p;
}

inline tt__MetadataCompressionType_ * soap_new_set_tt__MetadataCompressionType_(
	struct soap *soap,
	enum tt__MetadataCompressionType __item,
	char *__item1)
{
	tt__MetadataCompressionType_ *_p = soap_new_tt__MetadataCompressionType_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__MetadataCompressionType_::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__MetadataCompressionType_(struct soap *soap, tt__MetadataCompressionType_ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:MetadataCompressionType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__MetadataCompressionType_ * SOAP_FMAC4 soap_get_tt__MetadataCompressionType_(struct soap*, tt__MetadataCompressionType_ *, const char*, const char*);

inline int soap_read_tt__MetadataCompressionType_(struct soap *soap, tt__MetadataCompressionType_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__MetadataCompressionType_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__AudioEncodingMimeNames__DEFINED
#define SOAP_TYPE_tt__AudioEncodingMimeNames__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AudioEncodingMimeNames_(struct soap*, const char*, int, const tt__AudioEncodingMimeNames_ *, const char*);
SOAP_FMAC3 tt__AudioEncodingMimeNames_ * SOAP_FMAC4 soap_in_tt__AudioEncodingMimeNames_(struct soap*, const char*, tt__AudioEncodingMimeNames_ *, const char*);
SOAP_FMAC1 tt__AudioEncodingMimeNames_ * SOAP_FMAC2 soap_instantiate_tt__AudioEncodingMimeNames_(struct soap*, int, const char*, const char*, size_t*);

inline tt__AudioEncodingMimeNames_ * soap_new_tt__AudioEncodingMimeNames_(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__AudioEncodingMimeNames_(soap, n, NULL, NULL, NULL);
}

inline tt__AudioEncodingMimeNames_ * soap_new_req_tt__AudioEncodingMimeNames_(
	struct soap *soap,
	enum tt__AudioEncodingMimeNames __item)
{
	tt__AudioEncodingMimeNames_ *_p = soap_new_tt__AudioEncodingMimeNames_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AudioEncodingMimeNames_::__item = __item;
	}
	return _p;
}

inline tt__AudioEncodingMimeNames_ * soap_new_set_tt__AudioEncodingMimeNames_(
	struct soap *soap,
	enum tt__AudioEncodingMimeNames __item,
	char *__item1)
{
	tt__AudioEncodingMimeNames_ *_p = soap_new_tt__AudioEncodingMimeNames_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AudioEncodingMimeNames_::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__AudioEncodingMimeNames_(struct soap *soap, tt__AudioEncodingMimeNames_ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AudioEncodingMimeNames", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__AudioEncodingMimeNames_ * SOAP_FMAC4 soap_get_tt__AudioEncodingMimeNames_(struct soap*, tt__AudioEncodingMimeNames_ *, const char*, const char*);

inline int soap_read_tt__AudioEncodingMimeNames_(struct soap *soap, tt__AudioEncodingMimeNames_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__AudioEncodingMimeNames_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__AudioEncoding__DEFINED
#define SOAP_TYPE_tt__AudioEncoding__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AudioEncoding_(struct soap*, const char*, int, const tt__AudioEncoding_ *, const char*);
SOAP_FMAC3 tt__AudioEncoding_ * SOAP_FMAC4 soap_in_tt__AudioEncoding_(struct soap*, const char*, tt__AudioEncoding_ *, const char*);
SOAP_FMAC1 tt__AudioEncoding_ * SOAP_FMAC2 soap_instantiate_tt__AudioEncoding_(struct soap*, int, const char*, const char*, size_t*);

inline tt__AudioEncoding_ * soap_new_tt__AudioEncoding_(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__AudioEncoding_(soap, n, NULL, NULL, NULL);
}

inline tt__AudioEncoding_ * soap_new_req_tt__AudioEncoding_(
	struct soap *soap,
	enum tt__AudioEncoding __item)
{
	tt__AudioEncoding_ *_p = soap_new_tt__AudioEncoding_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AudioEncoding_::__item = __item;
	}
	return _p;
}

inline tt__AudioEncoding_ * soap_new_set_tt__AudioEncoding_(
	struct soap *soap,
	enum tt__AudioEncoding __item,
	char *__item1)
{
	tt__AudioEncoding_ *_p = soap_new_tt__AudioEncoding_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AudioEncoding_::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__AudioEncoding_(struct soap *soap, tt__AudioEncoding_ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AudioEncoding", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__AudioEncoding_ * SOAP_FMAC4 soap_get_tt__AudioEncoding_(struct soap*, tt__AudioEncoding_ *, const char*, const char*);

inline int soap_read_tt__AudioEncoding_(struct soap *soap, tt__AudioEncoding_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__AudioEncoding_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__VideoEncodingProfiles__DEFINED
#define SOAP_TYPE_tt__VideoEncodingProfiles__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__VideoEncodingProfiles_(struct soap*, const char*, int, const tt__VideoEncodingProfiles_ *, const char*);
SOAP_FMAC3 tt__VideoEncodingProfiles_ * SOAP_FMAC4 soap_in_tt__VideoEncodingProfiles_(struct soap*, const char*, tt__VideoEncodingProfiles_ *, const char*);
SOAP_FMAC1 tt__VideoEncodingProfiles_ * SOAP_FMAC2 soap_instantiate_tt__VideoEncodingProfiles_(struct soap*, int, const char*, const char*, size_t*);

inline tt__VideoEncodingProfiles_ * soap_new_tt__VideoEncodingProfiles_(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__VideoEncodingProfiles_(soap, n, NULL, NULL, NULL);
}

inline tt__VideoEncodingProfiles_ * soap_new_req_tt__VideoEncodingProfiles_(
	struct soap *soap,
	enum tt__VideoEncodingProfiles __item)
{
	tt__VideoEncodingProfiles_ *_p = soap_new_tt__VideoEncodingProfiles_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__VideoEncodingProfiles_::__item = __item;
	}
	return _p;
}

inline tt__VideoEncodingProfiles_ * soap_new_set_tt__VideoEncodingProfiles_(
	struct soap *soap,
	enum tt__VideoEncodingProfiles __item,
	char *__item1)
{
	tt__VideoEncodingProfiles_ *_p = soap_new_tt__VideoEncodingProfiles_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__VideoEncodingProfiles_::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__VideoEncodingProfiles_(struct soap *soap, tt__VideoEncodingProfiles_ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:VideoEncodingProfiles", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__VideoEncodingProfiles_ * SOAP_FMAC4 soap_get_tt__VideoEncodingProfiles_(struct soap*, tt__VideoEncodingProfiles_ *, const char*, const char*);

inline int soap_read_tt__VideoEncodingProfiles_(struct soap *soap, tt__VideoEncodingProfiles_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__VideoEncodingProfiles_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__VideoEncodingMimeNames__DEFINED
#define SOAP_TYPE_tt__VideoEncodingMimeNames__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__VideoEncodingMimeNames_(struct soap*, const char*, int, const tt__VideoEncodingMimeNames_ *, const char*);
SOAP_FMAC3 tt__VideoEncodingMimeNames_ * SOAP_FMAC4 soap_in_tt__VideoEncodingMimeNames_(struct soap*, const char*, tt__VideoEncodingMimeNames_ *, const char*);
SOAP_FMAC1 tt__VideoEncodingMimeNames_ * SOAP_FMAC2 soap_instantiate_tt__VideoEncodingMimeNames_(struct soap*, int, const char*, const char*, size_t*);

inline tt__VideoEncodingMimeNames_ * soap_new_tt__VideoEncodingMimeNames_(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__VideoEncodingMimeNames_(soap, n, NULL, NULL, NULL);
}

inline tt__VideoEncodingMimeNames_ * soap_new_req_tt__VideoEncodingMimeNames_(
	struct soap *soap,
	enum tt__VideoEncodingMimeNames __item)
{
	tt__VideoEncodingMimeNames_ *_p = soap_new_tt__VideoEncodingMimeNames_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__VideoEncodingMimeNames_::__item = __item;
	}
	return _p;
}

inline tt__VideoEncodingMimeNames_ * soap_new_set_tt__VideoEncodingMimeNames_(
	struct soap *soap,
	enum tt__VideoEncodingMimeNames __item,
	char *__item1)
{
	tt__VideoEncodingMimeNames_ *_p = soap_new_tt__VideoEncodingMimeNames_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__VideoEncodingMimeNames_::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__VideoEncodingMimeNames_(struct soap *soap, tt__VideoEncodingMimeNames_ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:VideoEncodingMimeNames", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__VideoEncodingMimeNames_ * SOAP_FMAC4 soap_get_tt__VideoEncodingMimeNames_(struct soap*, tt__VideoEncodingMimeNames_ *, const char*, const char*);

inline int soap_read_tt__VideoEncodingMimeNames_(struct soap *soap, tt__VideoEncodingMimeNames_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__VideoEncodingMimeNames_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__H264Profile__DEFINED
#define SOAP_TYPE_tt__H264Profile__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__H264Profile_(struct soap*, const char*, int, const tt__H264Profile_ *, const char*);
SOAP_FMAC3 tt__H264Profile_ * SOAP_FMAC4 soap_in_tt__H264Profile_(struct soap*, const char*, tt__H264Profile_ *, const char*);
SOAP_FMAC1 tt__H264Profile_ * SOAP_FMAC2 soap_instantiate_tt__H264Profile_(struct soap*, int, const char*, const char*, size_t*);

inline tt__H264Profile_ * soap_new_tt__H264Profile_(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__H264Profile_(soap, n, NULL, NULL, NULL);
}

inline tt__H264Profile_ * soap_new_req_tt__H264Profile_(
	struct soap *soap,
	enum tt__H264Profile __item)
{
	tt__H264Profile_ *_p = soap_new_tt__H264Profile_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__H264Profile_::__item = __item;
	}
	return _p;
}

inline tt__H264Profile_ * soap_new_set_tt__H264Profile_(
	struct soap *soap,
	enum tt__H264Profile __item,
	char *__item1)
{
	tt__H264Profile_ *_p = soap_new_tt__H264Profile_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__H264Profile_::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__H264Profile_(struct soap *soap, tt__H264Profile_ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:H264Profile", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__H264Profile_ * SOAP_FMAC4 soap_get_tt__H264Profile_(struct soap*, tt__H264Profile_ *, const char*, const char*);

inline int soap_read_tt__H264Profile_(struct soap *soap, tt__H264Profile_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__H264Profile_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__Mpeg4Profile__DEFINED
#define SOAP_TYPE_tt__Mpeg4Profile__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Mpeg4Profile_(struct soap*, const char*, int, const tt__Mpeg4Profile_ *, const char*);
SOAP_FMAC3 tt__Mpeg4Profile_ * SOAP_FMAC4 soap_in_tt__Mpeg4Profile_(struct soap*, const char*, tt__Mpeg4Profile_ *, const char*);
SOAP_FMAC1 tt__Mpeg4Profile_ * SOAP_FMAC2 soap_instantiate_tt__Mpeg4Profile_(struct soap*, int, const char*, const char*, size_t*);

inline tt__Mpeg4Profile_ * soap_new_tt__Mpeg4Profile_(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Mpeg4Profile_(soap, n, NULL, NULL, NULL);
}

inline tt__Mpeg4Profile_ * soap_new_req_tt__Mpeg4Profile_(
	struct soap *soap,
	enum tt__Mpeg4Profile __item)
{
	tt__Mpeg4Profile_ *_p = soap_new_tt__Mpeg4Profile_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Mpeg4Profile_::__item = __item;
	}
	return _p;
}

inline tt__Mpeg4Profile_ * soap_new_set_tt__Mpeg4Profile_(
	struct soap *soap,
	enum tt__Mpeg4Profile __item,
	char *__item1)
{
	tt__Mpeg4Profile_ *_p = soap_new_tt__Mpeg4Profile_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Mpeg4Profile_::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__Mpeg4Profile_(struct soap *soap, tt__Mpeg4Profile_ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Mpeg4Profile", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__Mpeg4Profile_ * SOAP_FMAC4 soap_get_tt__Mpeg4Profile_(struct soap*, tt__Mpeg4Profile_ *, const char*, const char*);

inline int soap_read_tt__Mpeg4Profile_(struct soap *soap, tt__Mpeg4Profile_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__Mpeg4Profile_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__VideoEncoding__DEFINED
#define SOAP_TYPE_tt__VideoEncoding__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__VideoEncoding_(struct soap*, const char*, int, const tt__VideoEncoding_ *, const char*);
SOAP_FMAC3 tt__VideoEncoding_ * SOAP_FMAC4 soap_in_tt__VideoEncoding_(struct soap*, const char*, tt__VideoEncoding_ *, const char*);
SOAP_FMAC1 tt__VideoEncoding_ * SOAP_FMAC2 soap_instantiate_tt__VideoEncoding_(struct soap*, int, const char*, const char*, size_t*);

inline tt__VideoEncoding_ * soap_new_tt__VideoEncoding_(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__VideoEncoding_(soap, n, NULL, NULL, NULL);
}

inline tt__VideoEncoding_ * soap_new_req_tt__VideoEncoding_(
	struct soap *soap,
	enum tt__VideoEncoding __item)
{
	tt__VideoEncoding_ *_p = soap_new_tt__VideoEncoding_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__VideoEncoding_::__item = __item;
	}
	return _p;
}

inline tt__VideoEncoding_ * soap_new_set_tt__VideoEncoding_(
	struct soap *soap,
	enum tt__VideoEncoding __item,
	char *__item1)
{
	tt__VideoEncoding_ *_p = soap_new_tt__VideoEncoding_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__VideoEncoding_::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__VideoEncoding_(struct soap *soap, tt__VideoEncoding_ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:VideoEncoding", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__VideoEncoding_ * SOAP_FMAC4 soap_get_tt__VideoEncoding_(struct soap*, tt__VideoEncoding_ *, const char*, const char*);

inline int soap_read_tt__VideoEncoding_(struct soap *soap, tt__VideoEncoding_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__VideoEncoding_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__RotateMode__DEFINED
#define SOAP_TYPE_tt__RotateMode__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RotateMode_(struct soap*, const char*, int, const tt__RotateMode_ *, const char*);
SOAP_FMAC3 tt__RotateMode_ * SOAP_FMAC4 soap_in_tt__RotateMode_(struct soap*, const char*, tt__RotateMode_ *, const char*);
SOAP_FMAC1 tt__RotateMode_ * SOAP_FMAC2 soap_instantiate_tt__RotateMode_(struct soap*, int, const char*, const char*, size_t*);

inline tt__RotateMode_ * soap_new_tt__RotateMode_(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__RotateMode_(soap, n, NULL, NULL, NULL);
}

inline tt__RotateMode_ * soap_new_req_tt__RotateMode_(
	struct soap *soap,
	enum tt__RotateMode __item)
{
	tt__RotateMode_ *_p = soap_new_tt__RotateMode_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__RotateMode_::__item = __item;
	}
	return _p;
}

inline tt__RotateMode_ * soap_new_set_tt__RotateMode_(
	struct soap *soap,
	enum tt__RotateMode __item,
	char *__item1)
{
	tt__RotateMode_ *_p = soap_new_tt__RotateMode_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__RotateMode_::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__RotateMode_(struct soap *soap, tt__RotateMode_ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:RotateMode", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__RotateMode_ * SOAP_FMAC4 soap_get_tt__RotateMode_(struct soap*, tt__RotateMode_ *, const char*, const char*);

inline int soap_read_tt__RotateMode_(struct soap *soap, tt__RotateMode_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__RotateMode_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__Name___DEFINED
#define SOAP_TYPE_tt__Name___DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Name__(struct soap*, const char*, int, const tt__Name__ *, const char*);
SOAP_FMAC3 tt__Name__ * SOAP_FMAC4 soap_in_tt__Name__(struct soap*, const char*, tt__Name__ *, const char*);
SOAP_FMAC1 tt__Name__ * SOAP_FMAC2 soap_instantiate_tt__Name__(struct soap*, int, const char*, const char*, size_t*);

inline tt__Name__ * soap_new_tt__Name__(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Name__(soap, n, NULL, NULL, NULL);
}

inline tt__Name__ * soap_new_req_tt__Name__(
	struct soap *soap,
	const std::string& __item)
{
	tt__Name__ *_p = soap_new_tt__Name__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Name__::__item = __item;
	}
	return _p;
}

inline tt__Name__ * soap_new_set_tt__Name__(
	struct soap *soap,
	const std::string& __item,
	char *__item1)
{
	tt__Name__ *_p = soap_new_tt__Name__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Name__::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__Name__(struct soap *soap, tt__Name__ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Name", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__Name__ * SOAP_FMAC4 soap_get_tt__Name__(struct soap*, tt__Name__ *, const char*, const char*);

inline int soap_read_tt__Name__(struct soap *soap, tt__Name__ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__Name__(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__Name_DEFINED
#define SOAP_TYPE_tt__Name_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__Name(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_tt__Name(struct soap*, const std::string *);

#define soap_tt__Name2s soap_std__string2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Name(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2tt__Name soap_s2std__string

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_tt__Name(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_tt__Name soap_instantiate_std__string


#define soap_new_tt__Name soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__Name(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_tt__Name(struct soap *soap, std::string const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_tt__Name(soap, p, "tt:Name", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_tt__Name(struct soap*, std::string *, const char*, const char*);

inline int soap_read_tt__Name(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_tt__Name(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__ReferenceToken___DEFINED
#define SOAP_TYPE_tt__ReferenceToken___DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ReferenceToken__(struct soap*, const char*, int, const tt__ReferenceToken__ *, const char*);
SOAP_FMAC3 tt__ReferenceToken__ * SOAP_FMAC4 soap_in_tt__ReferenceToken__(struct soap*, const char*, tt__ReferenceToken__ *, const char*);
SOAP_FMAC1 tt__ReferenceToken__ * SOAP_FMAC2 soap_instantiate_tt__ReferenceToken__(struct soap*, int, const char*, const char*, size_t*);

inline tt__ReferenceToken__ * soap_new_tt__ReferenceToken__(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ReferenceToken__(soap, n, NULL, NULL, NULL);
}

inline tt__ReferenceToken__ * soap_new_req_tt__ReferenceToken__(
	struct soap *soap,
	const std::string& __item)
{
	tt__ReferenceToken__ *_p = soap_new_tt__ReferenceToken__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ReferenceToken__::__item = __item;
	}
	return _p;
}

inline tt__ReferenceToken__ * soap_new_set_tt__ReferenceToken__(
	struct soap *soap,
	const std::string& __item,
	char *__item1)
{
	tt__ReferenceToken__ *_p = soap_new_tt__ReferenceToken__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ReferenceToken__::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__ReferenceToken__(struct soap *soap, tt__ReferenceToken__ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ReferenceToken", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__ReferenceToken__ * SOAP_FMAC4 soap_get_tt__ReferenceToken__(struct soap*, tt__ReferenceToken__ *, const char*, const char*);

inline int soap_read_tt__ReferenceToken__(struct soap *soap, tt__ReferenceToken__ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__ReferenceToken__(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__ReferenceToken_DEFINED
#define SOAP_TYPE_tt__ReferenceToken_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__ReferenceToken(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_tt__ReferenceToken(struct soap*, const std::string *);

#define soap_tt__ReferenceToken2s soap_std__string2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ReferenceToken(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2tt__ReferenceToken soap_s2std__string

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_tt__ReferenceToken(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_tt__ReferenceToken soap_instantiate_std__string


#define soap_new_tt__ReferenceToken soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__ReferenceToken(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_tt__ReferenceToken(struct soap *soap, std::string const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_tt__ReferenceToken(soap, p, "tt:ReferenceToken", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_tt__ReferenceToken(struct soap*, std::string *, const char*, const char*);

inline int soap_read_tt__ReferenceToken(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_tt__ReferenceToken(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tds__StorageType__DEFINED
#define SOAP_TYPE_tds__StorageType__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tds__StorageType_(struct soap*, const char*, int, const tds__StorageType_ *, const char*);
SOAP_FMAC3 tds__StorageType_ * SOAP_FMAC4 soap_in_tds__StorageType_(struct soap*, const char*, tds__StorageType_ *, const char*);
SOAP_FMAC1 tds__StorageType_ * SOAP_FMAC2 soap_instantiate_tds__StorageType_(struct soap*, int, const char*, const char*, size_t*);

inline tds__StorageType_ * soap_new_tds__StorageType_(struct soap *soap, int n = -1)
{
	return soap_instantiate_tds__StorageType_(soap, n, NULL, NULL, NULL);
}

inline tds__StorageType_ * soap_new_req_tds__StorageType_(
	struct soap *soap,
	enum tds__StorageType __item)
{
	tds__StorageType_ *_p = soap_new_tds__StorageType_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tds__StorageType_::__item = __item;
	}
	return _p;
}

inline tds__StorageType_ * soap_new_set_tds__StorageType_(
	struct soap *soap,
	enum tds__StorageType __item,
	char *__item1)
{
	tds__StorageType_ *_p = soap_new_tds__StorageType_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tds__StorageType_::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tds__StorageType_(struct soap *soap, tds__StorageType_ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:StorageType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tds__StorageType_ * SOAP_FMAC4 soap_get_tds__StorageType_(struct soap*, tds__StorageType_ *, const char*, const char*);

inline int soap_read_tds__StorageType_(struct soap *soap, tds__StorageType_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tds__StorageType_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_trt__EncodingTypes_DEFINED
#define SOAP_TYPE_trt__EncodingTypes_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_trt__EncodingTypes(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_trt__EncodingTypes(struct soap*, const std::string *);

#define soap_trt__EncodingTypes2s soap_std__string2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_trt__EncodingTypes(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2trt__EncodingTypes soap_s2std__string

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_trt__EncodingTypes(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_trt__EncodingTypes soap_instantiate_std__string


#define soap_new_trt__EncodingTypes soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_trt__EncodingTypes(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_trt__EncodingTypes(struct soap *soap, std::string const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_trt__EncodingTypes(soap, p, "trt:EncodingTypes", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_trt__EncodingTypes(struct soap*, std::string *, const char*, const char*);

inline int soap_read_trt__EncodingTypes(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_trt__EncodingTypes(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_wsnt__AbsoluteOrRelativeTimeType_DEFINED
#define SOAP_TYPE_wsnt__AbsoluteOrRelativeTimeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsnt__AbsoluteOrRelativeTimeType(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsnt__AbsoluteOrRelativeTimeType(struct soap*, const std::string *);

#define soap_wsnt__AbsoluteOrRelativeTimeType2s soap_std__string2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__AbsoluteOrRelativeTimeType(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2wsnt__AbsoluteOrRelativeTimeType soap_s2std__string

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_wsnt__AbsoluteOrRelativeTimeType(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_wsnt__AbsoluteOrRelativeTimeType soap_instantiate_std__string


#define soap_new_wsnt__AbsoluteOrRelativeTimeType soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsnt__AbsoluteOrRelativeTimeType(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_wsnt__AbsoluteOrRelativeTimeType(struct soap *soap, std::string const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_wsnt__AbsoluteOrRelativeTimeType(soap, p, "wsnt:AbsoluteOrRelativeTimeType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_wsnt__AbsoluteOrRelativeTimeType(struct soap*, std::string *, const char*, const char*);

inline int soap_read_wsnt__AbsoluteOrRelativeTimeType(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_wsnt__AbsoluteOrRelativeTimeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__ReferenceTokenList_DEFINED
#define SOAP_TYPE_tt__ReferenceTokenList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__ReferenceTokenList(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_tt__ReferenceTokenList(struct soap*, const std::string *);

#define soap_tt__ReferenceTokenList2s soap_std__string2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ReferenceTokenList(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2tt__ReferenceTokenList soap_s2std__string

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_tt__ReferenceTokenList(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_tt__ReferenceTokenList soap_instantiate_std__string


#define soap_new_tt__ReferenceTokenList soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__ReferenceTokenList(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_tt__ReferenceTokenList(struct soap *soap, std::string const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_tt__ReferenceTokenList(soap, p, "tt:ReferenceTokenList", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_tt__ReferenceTokenList(struct soap*, std::string *, const char*, const char*);

inline int soap_read_tt__ReferenceTokenList(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_tt__ReferenceTokenList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__StringAttrList_DEFINED
#define SOAP_TYPE_tt__StringAttrList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__StringAttrList(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_tt__StringAttrList(struct soap*, const std::string *);

#define soap_tt__StringAttrList2s soap_std__string2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__StringAttrList(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2tt__StringAttrList soap_s2std__string

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_tt__StringAttrList(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_tt__StringAttrList soap_instantiate_std__string


#define soap_new_tt__StringAttrList soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__StringAttrList(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_tt__StringAttrList(struct soap *soap, std::string const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_tt__StringAttrList(soap, p, "tt:StringAttrList", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_tt__StringAttrList(struct soap*, std::string *, const char*, const char*);

inline int soap_read_tt__StringAttrList(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_tt__StringAttrList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__FloatAttrList_DEFINED
#define SOAP_TYPE_tt__FloatAttrList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__FloatAttrList(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_tt__FloatAttrList(struct soap*, const std::string *);

#define soap_tt__FloatAttrList2s soap_std__string2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__FloatAttrList(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2tt__FloatAttrList soap_s2std__string

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_tt__FloatAttrList(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_tt__FloatAttrList soap_instantiate_std__string


#define soap_new_tt__FloatAttrList soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__FloatAttrList(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_tt__FloatAttrList(struct soap *soap, std::string const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_tt__FloatAttrList(soap, p, "tt:FloatAttrList", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_tt__FloatAttrList(struct soap*, std::string *, const char*, const char*);

inline int soap_read_tt__FloatAttrList(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_tt__FloatAttrList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__IntAttrList_DEFINED
#define SOAP_TYPE_tt__IntAttrList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__IntAttrList(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_tt__IntAttrList(struct soap*, const std::string *);

#define soap_tt__IntAttrList2s soap_std__string2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IntAttrList(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2tt__IntAttrList soap_s2std__string

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_tt__IntAttrList(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_tt__IntAttrList soap_instantiate_std__string


#define soap_new_tt__IntAttrList soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__IntAttrList(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_tt__IntAttrList(struct soap *soap, std::string const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_tt__IntAttrList(soap, p, "tt:IntAttrList", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_tt__IntAttrList(struct soap*, std::string *, const char*, const char*);

inline int soap_read_tt__IntAttrList(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_tt__IntAttrList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tds__EAPMethodTypes_DEFINED
#define SOAP_TYPE_tds__EAPMethodTypes_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tds__EAPMethodTypes(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_tds__EAPMethodTypes(struct soap*, const std::string *);

#define soap_tds__EAPMethodTypes2s soap_std__string2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tds__EAPMethodTypes(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2tds__EAPMethodTypes soap_s2std__string

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_tds__EAPMethodTypes(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_tds__EAPMethodTypes soap_instantiate_std__string


#define soap_new_tds__EAPMethodTypes soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tds__EAPMethodTypes(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_tds__EAPMethodTypes(struct soap *soap, std::string const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_tds__EAPMethodTypes(soap, p, "tds:EAPMethodTypes", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_tds__EAPMethodTypes(struct soap*, std::string *, const char*, const char*);

inline int soap_read_tds__EAPMethodTypes(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_tds__EAPMethodTypes(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tptz__GetCompatibleConfigurationsResponse_DEFINED
#define SOAP_TYPE__tptz__GetCompatibleConfigurationsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GetCompatibleConfigurationsResponse(struct soap*, const char*, int, const _tptz__GetCompatibleConfigurationsResponse *, const char*);
SOAP_FMAC3 _tptz__GetCompatibleConfigurationsResponse * SOAP_FMAC4 soap_in__tptz__GetCompatibleConfigurationsResponse(struct soap*, const char*, _tptz__GetCompatibleConfigurationsResponse *, const char*);
SOAP_FMAC1 _tptz__GetCompatibleConfigurationsResponse * SOAP_FMAC2 soap_instantiate__tptz__GetCompatibleConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GetCompatibleConfigurationsResponse * soap_new__tptz__GetCompatibleConfigurationsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GetCompatibleConfigurationsResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__GetCompatibleConfigurationsResponse * soap_new_req__tptz__GetCompatibleConfigurationsResponse(
	struct soap *soap)
{
	_tptz__GetCompatibleConfigurationsResponse *_p = soap_new__tptz__GetCompatibleConfigurationsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tptz__GetCompatibleConfigurationsResponse * soap_new_set__tptz__GetCompatibleConfigurationsResponse(
	struct soap *soap,
	const std::vector<tt__PTZConfiguration *> & PTZConfiguration)
{
	_tptz__GetCompatibleConfigurationsResponse *_p = soap_new__tptz__GetCompatibleConfigurationsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetCompatibleConfigurationsResponse::PTZConfiguration = PTZConfiguration;
	}
	return _p;
}

inline int soap_write__tptz__GetCompatibleConfigurationsResponse(struct soap *soap, _tptz__GetCompatibleConfigurationsResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetCompatibleConfigurationsResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GetCompatibleConfigurationsResponse * SOAP_FMAC4 soap_get__tptz__GetCompatibleConfigurationsResponse(struct soap*, _tptz__GetCompatibleConfigurationsResponse *, const char*, const char*);

inline int soap_read__tptz__GetCompatibleConfigurationsResponse(struct soap *soap, _tptz__GetCompatibleConfigurationsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tptz__GetCompatibleConfigurationsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tptz__GetCompatibleConfigurations_DEFINED
#define SOAP_TYPE__tptz__GetCompatibleConfigurations_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GetCompatibleConfigurations(struct soap*, const char*, int, const _tptz__GetCompatibleConfigurations *, const char*);
SOAP_FMAC3 _tptz__GetCompatibleConfigurations * SOAP_FMAC4 soap_in__tptz__GetCompatibleConfigurations(struct soap*, const char*, _tptz__GetCompatibleConfigurations *, const char*);
SOAP_FMAC1 _tptz__GetCompatibleConfigurations * SOAP_FMAC2 soap_instantiate__tptz__GetCompatibleConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GetCompatibleConfigurations * soap_new__tptz__GetCompatibleConfigurations(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GetCompatibleConfigurations(soap, n, NULL, NULL, NULL);
}

inline _tptz__GetCompatibleConfigurations * soap_new_req__tptz__GetCompatibleConfigurations(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_tptz__GetCompatibleConfigurations *_p = soap_new__tptz__GetCompatibleConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetCompatibleConfigurations::ProfileToken = ProfileToken;
	}
	return _p;
}

inline _tptz__GetCompatibleConfigurations * soap_new_set__tptz__GetCompatibleConfigurations(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_tptz__GetCompatibleConfigurations *_p = soap_new__tptz__GetCompatibleConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetCompatibleConfigurations::ProfileToken = ProfileToken;
	}
	return _p;
}

inline int soap_write__tptz__GetCompatibleConfigurations(struct soap *soap, _tptz__GetCompatibleConfigurations const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetCompatibleConfigurations", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GetCompatibleConfigurations * SOAP_FMAC4 soap_get__tptz__GetCompatibleConfigurations(struct soap*, _tptz__GetCompatibleConfigurations *, const char*, const char*);

inline int soap_read__tptz__GetCompatibleConfigurations(struct soap *soap, _tptz__GetCompatibleConfigurations *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tptz__GetCompatibleConfigurations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tptz__RemovePresetTourResponse_DEFINED
#define SOAP_TYPE__tptz__RemovePresetTourResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__RemovePresetTourResponse(struct soap*, const char*, int, const _tptz__RemovePresetTourResponse *, const char*);
SOAP_FMAC3 _tptz__RemovePresetTourResponse * SOAP_FMAC4 soap_in__tptz__RemovePresetTourResponse(struct soap*, const char*, _tptz__RemovePresetTourResponse *, const char*);
SOAP_FMAC1 _tptz__RemovePresetTourResponse * SOAP_FMAC2 soap_instantiate__tptz__RemovePresetTourResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__RemovePresetTourResponse * soap_new__tptz__RemovePresetTourResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__RemovePresetTourResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__RemovePresetTourResponse * soap_new_req__tptz__RemovePresetTourResponse(
	struct soap *soap)
{
	_tptz__RemovePresetTourResponse *_p = soap_new__tptz__RemovePresetTourResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tptz__RemovePresetTourResponse * soap_new_set__tptz__RemovePresetTourResponse(
	struct soap *soap)
{
	_tptz__RemovePresetTourResponse *_p = soap_new__tptz__RemovePresetTourResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tptz__RemovePresetTourResponse(struct soap *soap, _tptz__RemovePresetTourResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:RemovePresetTourResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__RemovePresetTourResponse * SOAP_FMAC4 soap_get__tptz__RemovePresetTourResponse(struct soap*, _tptz__RemovePresetTourResponse *, const char*, const char*);

inline int soap_read__tptz__RemovePresetTourResponse(struct soap *soap, _tptz__RemovePresetTourResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tptz__RemovePresetTourResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tptz__RemovePresetTour_DEFINED
#define SOAP_TYPE__tptz__RemovePresetTour_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__RemovePresetTour(struct soap*, const char*, int, const _tptz__RemovePresetTour *, const char*);
SOAP_FMAC3 _tptz__RemovePresetTour * SOAP_FMAC4 soap_in__tptz__RemovePresetTour(struct soap*, const char*, _tptz__RemovePresetTour *, const char*);
SOAP_FMAC1 _tptz__RemovePresetTour * SOAP_FMAC2 soap_instantiate__tptz__RemovePresetTour(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__RemovePresetTour * soap_new__tptz__RemovePresetTour(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__RemovePresetTour(soap, n, NULL, NULL, NULL);
}

inline _tptz__RemovePresetTour * soap_new_req__tptz__RemovePresetTour(
	struct soap *soap,
	const std::string& ProfileToken,
	const std::string& PresetTourToken)
{
	_tptz__RemovePresetTour *_p = soap_new__tptz__RemovePresetTour(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__RemovePresetTour::ProfileToken = ProfileToken;
		_p->_tptz__RemovePresetTour::PresetTourToken = PresetTourToken;
	}
	return _p;
}

inline _tptz__RemovePresetTour * soap_new_set__tptz__RemovePresetTour(
	struct soap *soap,
	const std::string& ProfileToken,
	const std::string& PresetTourToken)
{
	_tptz__RemovePresetTour *_p = soap_new__tptz__RemovePresetTour(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__RemovePresetTour::ProfileToken = ProfileToken;
		_p->_tptz__RemovePresetTour::PresetTourToken = PresetTourToken;
	}
	return _p;
}

inline int soap_write__tptz__RemovePresetTour(struct soap *soap, _tptz__RemovePresetTour const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:RemovePresetTour", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__RemovePresetTour * SOAP_FMAC4 soap_get__tptz__RemovePresetTour(struct soap*, _tptz__RemovePresetTour *, const char*, const char*);

inline int soap_read__tptz__RemovePresetTour(struct soap *soap, _tptz__RemovePresetTour *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tptz__RemovePresetTour(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tptz__OperatePresetTourResponse_DEFINED
#define SOAP_TYPE__tptz__OperatePresetTourResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__OperatePresetTourResponse(struct soap*, const char*, int, const _tptz__OperatePresetTourResponse *, const char*);
SOAP_FMAC3 _tptz__OperatePresetTourResponse * SOAP_FMAC4 soap_in__tptz__OperatePresetTourResponse(struct soap*, const char*, _tptz__OperatePresetTourResponse *, const char*);
SOAP_FMAC1 _tptz__OperatePresetTourResponse * SOAP_FMAC2 soap_instantiate__tptz__OperatePresetTourResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__OperatePresetTourResponse * soap_new__tptz__OperatePresetTourResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__OperatePresetTourResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__OperatePresetTourResponse * soap_new_req__tptz__OperatePresetTourResponse(
	struct soap *soap)
{
	_tptz__OperatePresetTourResponse *_p = soap_new__tptz__OperatePresetTourResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tptz__OperatePresetTourResponse * soap_new_set__tptz__OperatePresetTourResponse(
	struct soap *soap)
{
	_tptz__OperatePresetTourResponse *_p = soap_new__tptz__OperatePresetTourResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tptz__OperatePresetTourResponse(struct soap *soap, _tptz__OperatePresetTourResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:OperatePresetTourResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__OperatePresetTourResponse * SOAP_FMAC4 soap_get__tptz__OperatePresetTourResponse(struct soap*, _tptz__OperatePresetTourResponse *, const char*, const char*);

inline int soap_read__tptz__OperatePresetTourResponse(struct soap *soap, _tptz__OperatePresetTourResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tptz__OperatePresetTourResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tptz__OperatePresetTour_DEFINED
#define SOAP_TYPE__tptz__OperatePresetTour_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__OperatePresetTour(struct soap*, const char*, int, const _tptz__OperatePresetTour *, const char*);
SOAP_FMAC3 _tptz__OperatePresetTour * SOAP_FMAC4 soap_in__tptz__OperatePresetTour(struct soap*, const char*, _tptz__OperatePresetTour *, const char*);
SOAP_FMAC1 _tptz__OperatePresetTour * SOAP_FMAC2 soap_instantiate__tptz__OperatePresetTour(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__OperatePresetTour * soap_new__tptz__OperatePresetTour(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__OperatePresetTour(soap, n, NULL, NULL, NULL);
}

inline _tptz__OperatePresetTour * soap_new_req__tptz__OperatePresetTour(
	struct soap *soap,
	const std::string& ProfileToken,
	const std::string& PresetTourToken,
	enum tt__PTZPresetTourOperation Operation)
{
	_tptz__OperatePresetTour *_p = soap_new__tptz__OperatePresetTour(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__OperatePresetTour::ProfileToken = ProfileToken;
		_p->_tptz__OperatePresetTour::PresetTourToken = PresetTourToken;
		_p->_tptz__OperatePresetTour::Operation = Operation;
	}
	return _p;
}

inline _tptz__OperatePresetTour * soap_new_set__tptz__OperatePresetTour(
	struct soap *soap,
	const std::string& ProfileToken,
	const std::string& PresetTourToken,
	enum tt__PTZPresetTourOperation Operation)
{
	_tptz__OperatePresetTour *_p = soap_new__tptz__OperatePresetTour(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__OperatePresetTour::ProfileToken = ProfileToken;
		_p->_tptz__OperatePresetTour::PresetTourToken = PresetTourToken;
		_p->_tptz__OperatePresetTour::Operation = Operation;
	}
	return _p;
}

inline int soap_write__tptz__OperatePresetTour(struct soap *soap, _tptz__OperatePresetTour const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:OperatePresetTour", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__OperatePresetTour * SOAP_FMAC4 soap_get__tptz__OperatePresetTour(struct soap*, _tptz__OperatePresetTour *, const char*, const char*);

inline int soap_read__tptz__OperatePresetTour(struct soap *soap, _tptz__OperatePresetTour *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tptz__OperatePresetTour(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tptz__ModifyPresetTourResponse_DEFINED
#define SOAP_TYPE__tptz__ModifyPresetTourResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__ModifyPresetTourResponse(struct soap*, const char*, int, const _tptz__ModifyPresetTourResponse *, const char*);
SOAP_FMAC3 _tptz__ModifyPresetTourResponse * SOAP_FMAC4 soap_in__tptz__ModifyPresetTourResponse(struct soap*, const char*, _tptz__ModifyPresetTourResponse *, const char*);
SOAP_FMAC1 _tptz__ModifyPresetTourResponse * SOAP_FMAC2 soap_instantiate__tptz__ModifyPresetTourResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__ModifyPresetTourResponse * soap_new__tptz__ModifyPresetTourResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__ModifyPresetTourResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__ModifyPresetTourResponse * soap_new_req__tptz__ModifyPresetTourResponse(
	struct soap *soap)
{
	_tptz__ModifyPresetTourResponse *_p = soap_new__tptz__ModifyPresetTourResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tptz__ModifyPresetTourResponse * soap_new_set__tptz__ModifyPresetTourResponse(
	struct soap *soap)
{
	_tptz__ModifyPresetTourResponse *_p = soap_new__tptz__ModifyPresetTourResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tptz__ModifyPresetTourResponse(struct soap *soap, _tptz__ModifyPresetTourResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:ModifyPresetTourResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__ModifyPresetTourResponse * SOAP_FMAC4 soap_get__tptz__ModifyPresetTourResponse(struct soap*, _tptz__ModifyPresetTourResponse *, const char*, const char*);

inline int soap_read__tptz__ModifyPresetTourResponse(struct soap *soap, _tptz__ModifyPresetTourResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tptz__ModifyPresetTourResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tptz__ModifyPresetTour_DEFINED
#define SOAP_TYPE__tptz__ModifyPresetTour_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__ModifyPresetTour(struct soap*, const char*, int, const _tptz__ModifyPresetTour *, const char*);
SOAP_FMAC3 _tptz__ModifyPresetTour * SOAP_FMAC4 soap_in__tptz__ModifyPresetTour(struct soap*, const char*, _tptz__ModifyPresetTour *, const char*);
SOAP_FMAC1 _tptz__ModifyPresetTour * SOAP_FMAC2 soap_instantiate__tptz__ModifyPresetTour(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__ModifyPresetTour * soap_new__tptz__ModifyPresetTour(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__ModifyPresetTour(soap, n, NULL, NULL, NULL);
}

inline _tptz__ModifyPresetTour * soap_new_req__tptz__ModifyPresetTour(
	struct soap *soap,
	const std::string& ProfileToken,
	tt__PresetTour *PresetTour)
{
	_tptz__ModifyPresetTour *_p = soap_new__tptz__ModifyPresetTour(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__ModifyPresetTour::ProfileToken = ProfileToken;
		_p->_tptz__ModifyPresetTour::PresetTour = PresetTour;
	}
	return _p;
}

inline _tptz__ModifyPresetTour * soap_new_set__tptz__ModifyPresetTour(
	struct soap *soap,
	const std::string& ProfileToken,
	tt__PresetTour *PresetTour)
{
	_tptz__ModifyPresetTour *_p = soap_new__tptz__ModifyPresetTour(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__ModifyPresetTour::ProfileToken = ProfileToken;
		_p->_tptz__ModifyPresetTour::PresetTour = PresetTour;
	}
	return _p;
}

inline int soap_write__tptz__ModifyPresetTour(struct soap *soap, _tptz__ModifyPresetTour const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:ModifyPresetTour", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__ModifyPresetTour * SOAP_FMAC4 soap_get__tptz__ModifyPresetTour(struct soap*, _tptz__ModifyPresetTour *, const char*, const char*);

inline int soap_read__tptz__ModifyPresetTour(struct soap *soap, _tptz__ModifyPresetTour *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tptz__ModifyPresetTour(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tptz__CreatePresetTourResponse_DEFINED
#define SOAP_TYPE__tptz__CreatePresetTourResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__CreatePresetTourResponse(struct soap*, const char*, int, const _tptz__CreatePresetTourResponse *, const char*);
SOAP_FMAC3 _tptz__CreatePresetTourResponse * SOAP_FMAC4 soap_in__tptz__CreatePresetTourResponse(struct soap*, const char*, _tptz__CreatePresetTourResponse *, const char*);
SOAP_FMAC1 _tptz__CreatePresetTourResponse * SOAP_FMAC2 soap_instantiate__tptz__CreatePresetTourResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__CreatePresetTourResponse * soap_new__tptz__CreatePresetTourResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__CreatePresetTourResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__CreatePresetTourResponse * soap_new_req__tptz__CreatePresetTourResponse(
	struct soap *soap,
	const std::string& PresetTourToken)
{
	_tptz__CreatePresetTourResponse *_p = soap_new__tptz__CreatePresetTourResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__CreatePresetTourResponse::PresetTourToken = PresetTourToken;
	}
	return _p;
}

inline _tptz__CreatePresetTourResponse * soap_new_set__tptz__CreatePresetTourResponse(
	struct soap *soap,
	const std::string& PresetTourToken)
{
	_tptz__CreatePresetTourResponse *_p = soap_new__tptz__CreatePresetTourResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__CreatePresetTourResponse::PresetTourToken = PresetTourToken;
	}
	return _p;
}

inline int soap_write__tptz__CreatePresetTourResponse(struct soap *soap, _tptz__CreatePresetTourResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:CreatePresetTourResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__CreatePresetTourResponse * SOAP_FMAC4 soap_get__tptz__CreatePresetTourResponse(struct soap*, _tptz__CreatePresetTourResponse *, const char*, const char*);

inline int soap_read__tptz__CreatePresetTourResponse(struct soap *soap, _tptz__CreatePresetTourResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tptz__CreatePresetTourResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tptz__CreatePresetTour_DEFINED
#define SOAP_TYPE__tptz__CreatePresetTour_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__CreatePresetTour(struct soap*, const char*, int, const _tptz__CreatePresetTour *, const char*);
SOAP_FMAC3 _tptz__CreatePresetTour * SOAP_FMAC4 soap_in__tptz__CreatePresetTour(struct soap*, const char*, _tptz__CreatePresetTour *, const char*);
SOAP_FMAC1 _tptz__CreatePresetTour * SOAP_FMAC2 soap_instantiate__tptz__CreatePresetTour(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__CreatePresetTour * soap_new__tptz__CreatePresetTour(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__CreatePresetTour(soap, n, NULL, NULL, NULL);
}

inline _tptz__CreatePresetTour * soap_new_req__tptz__CreatePresetTour(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_tptz__CreatePresetTour *_p = soap_new__tptz__CreatePresetTour(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__CreatePresetTour::ProfileToken = ProfileToken;
	}
	return _p;
}

inline _tptz__CreatePresetTour * soap_new_set__tptz__CreatePresetTour(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_tptz__CreatePresetTour *_p = soap_new__tptz__CreatePresetTour(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__CreatePresetTour::ProfileToken = ProfileToken;
	}
	return _p;
}

inline int soap_write__tptz__CreatePresetTour(struct soap *soap, _tptz__CreatePresetTour const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:CreatePresetTour", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__CreatePresetTour * SOAP_FMAC4 soap_get__tptz__CreatePresetTour(struct soap*, _tptz__CreatePresetTour *, const char*, const char*);

inline int soap_read__tptz__CreatePresetTour(struct soap *soap, _tptz__CreatePresetTour *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tptz__CreatePresetTour(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tptz__GetPresetTourOptionsResponse_DEFINED
#define SOAP_TYPE__tptz__GetPresetTourOptionsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GetPresetTourOptionsResponse(struct soap*, const char*, int, const _tptz__GetPresetTourOptionsResponse *, const char*);
SOAP_FMAC3 _tptz__GetPresetTourOptionsResponse * SOAP_FMAC4 soap_in__tptz__GetPresetTourOptionsResponse(struct soap*, const char*, _tptz__GetPresetTourOptionsResponse *, const char*);
SOAP_FMAC1 _tptz__GetPresetTourOptionsResponse * SOAP_FMAC2 soap_instantiate__tptz__GetPresetTourOptionsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GetPresetTourOptionsResponse * soap_new__tptz__GetPresetTourOptionsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GetPresetTourOptionsResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__GetPresetTourOptionsResponse * soap_new_req__tptz__GetPresetTourOptionsResponse(
	struct soap *soap,
	tt__PTZPresetTourOptions *Options)
{
	_tptz__GetPresetTourOptionsResponse *_p = soap_new__tptz__GetPresetTourOptionsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetPresetTourOptionsResponse::Options = Options;
	}
	return _p;
}

inline _tptz__GetPresetTourOptionsResponse * soap_new_set__tptz__GetPresetTourOptionsResponse(
	struct soap *soap,
	tt__PTZPresetTourOptions *Options)
{
	_tptz__GetPresetTourOptionsResponse *_p = soap_new__tptz__GetPresetTourOptionsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetPresetTourOptionsResponse::Options = Options;
	}
	return _p;
}

inline int soap_write__tptz__GetPresetTourOptionsResponse(struct soap *soap, _tptz__GetPresetTourOptionsResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresetTourOptionsResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GetPresetTourOptionsResponse * SOAP_FMAC4 soap_get__tptz__GetPresetTourOptionsResponse(struct soap*, _tptz__GetPresetTourOptionsResponse *, const char*, const char*);

inline int soap_read__tptz__GetPresetTourOptionsResponse(struct soap *soap, _tptz__GetPresetTourOptionsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tptz__GetPresetTourOptionsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tptz__GetPresetTourOptions_DEFINED
#define SOAP_TYPE__tptz__GetPresetTourOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GetPresetTourOptions(struct soap*, const char*, int, const _tptz__GetPresetTourOptions *, const char*);
SOAP_FMAC3 _tptz__GetPresetTourOptions * SOAP_FMAC4 soap_in__tptz__GetPresetTourOptions(struct soap*, const char*, _tptz__GetPresetTourOptions *, const char*);
SOAP_FMAC1 _tptz__GetPresetTourOptions * SOAP_FMAC2 soap_instantiate__tptz__GetPresetTourOptions(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GetPresetTourOptions * soap_new__tptz__GetPresetTourOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GetPresetTourOptions(soap, n, NULL, NULL, NULL);
}

inline _tptz__GetPresetTourOptions * soap_new_req__tptz__GetPresetTourOptions(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_tptz__GetPresetTourOptions *_p = soap_new__tptz__GetPresetTourOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetPresetTourOptions::ProfileToken = ProfileToken;
	}
	return _p;
}

inline _tptz__GetPresetTourOptions * soap_new_set__tptz__GetPresetTourOptions(
	struct soap *soap,
	const std::string& ProfileToken,
	std::string *PresetTourToken)
{
	_tptz__GetPresetTourOptions *_p = soap_new__tptz__GetPresetTourOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetPresetTourOptions::ProfileToken = ProfileToken;
		_p->_tptz__GetPresetTourOptions::PresetTourToken = PresetTourToken;
	}
	return _p;
}

inline int soap_write__tptz__GetPresetTourOptions(struct soap *soap, _tptz__GetPresetTourOptions const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresetTourOptions", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GetPresetTourOptions * SOAP_FMAC4 soap_get__tptz__GetPresetTourOptions(struct soap*, _tptz__GetPresetTourOptions *, const char*, const char*);

inline int soap_read__tptz__GetPresetTourOptions(struct soap *soap, _tptz__GetPresetTourOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tptz__GetPresetTourOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tptz__GetPresetTourResponse_DEFINED
#define SOAP_TYPE__tptz__GetPresetTourResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GetPresetTourResponse(struct soap*, const char*, int, const _tptz__GetPresetTourResponse *, const char*);
SOAP_FMAC3 _tptz__GetPresetTourResponse * SOAP_FMAC4 soap_in__tptz__GetPresetTourResponse(struct soap*, const char*, _tptz__GetPresetTourResponse *, const char*);
SOAP_FMAC1 _tptz__GetPresetTourResponse * SOAP_FMAC2 soap_instantiate__tptz__GetPresetTourResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GetPresetTourResponse * soap_new__tptz__GetPresetTourResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GetPresetTourResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__GetPresetTourResponse * soap_new_req__tptz__GetPresetTourResponse(
	struct soap *soap,
	tt__PresetTour *PresetTour)
{
	_tptz__GetPresetTourResponse *_p = soap_new__tptz__GetPresetTourResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetPresetTourResponse::PresetTour = PresetTour;
	}
	return _p;
}

inline _tptz__GetPresetTourResponse * soap_new_set__tptz__GetPresetTourResponse(
	struct soap *soap,
	tt__PresetTour *PresetTour)
{
	_tptz__GetPresetTourResponse *_p = soap_new__tptz__GetPresetTourResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetPresetTourResponse::PresetTour = PresetTour;
	}
	return _p;
}

inline int soap_write__tptz__GetPresetTourResponse(struct soap *soap, _tptz__GetPresetTourResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresetTourResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GetPresetTourResponse * SOAP_FMAC4 soap_get__tptz__GetPresetTourResponse(struct soap*, _tptz__GetPresetTourResponse *, const char*, const char*);

inline int soap_read__tptz__GetPresetTourResponse(struct soap *soap, _tptz__GetPresetTourResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tptz__GetPresetTourResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tptz__GetPresetTour_DEFINED
#define SOAP_TYPE__tptz__GetPresetTour_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GetPresetTour(struct soap*, const char*, int, const _tptz__GetPresetTour *, const char*);
SOAP_FMAC3 _tptz__GetPresetTour * SOAP_FMAC4 soap_in__tptz__GetPresetTour(struct soap*, const char*, _tptz__GetPresetTour *, const char*);
SOAP_FMAC1 _tptz__GetPresetTour * SOAP_FMAC2 soap_instantiate__tptz__GetPresetTour(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GetPresetTour * soap_new__tptz__GetPresetTour(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GetPresetTour(soap, n, NULL, NULL, NULL);
}

inline _tptz__GetPresetTour * soap_new_req__tptz__GetPresetTour(
	struct soap *soap,
	const std::string& ProfileToken,
	const std::string& PresetTourToken)
{
	_tptz__GetPresetTour *_p = soap_new__tptz__GetPresetTour(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetPresetTour::ProfileToken = ProfileToken;
		_p->_tptz__GetPresetTour::PresetTourToken = PresetTourToken;
	}
	return _p;
}

inline _tptz__GetPresetTour * soap_new_set__tptz__GetPresetTour(
	struct soap *soap,
	const std::string& ProfileToken,
	const std::string& PresetTourToken)
{
	_tptz__GetPresetTour *_p = soap_new__tptz__GetPresetTour(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetPresetTour::ProfileToken = ProfileToken;
		_p->_tptz__GetPresetTour::PresetTourToken = PresetTourToken;
	}
	return _p;
}

inline int soap_write__tptz__GetPresetTour(struct soap *soap, _tptz__GetPresetTour const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresetTour", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GetPresetTour * SOAP_FMAC4 soap_get__tptz__GetPresetTour(struct soap*, _tptz__GetPresetTour *, const char*, const char*);

inline int soap_read__tptz__GetPresetTour(struct soap *soap, _tptz__GetPresetTour *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tptz__GetPresetTour(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tptz__GetPresetToursResponse_DEFINED
#define SOAP_TYPE__tptz__GetPresetToursResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GetPresetToursResponse(struct soap*, const char*, int, const _tptz__GetPresetToursResponse *, const char*);
SOAP_FMAC3 _tptz__GetPresetToursResponse * SOAP_FMAC4 soap_in__tptz__GetPresetToursResponse(struct soap*, const char*, _tptz__GetPresetToursResponse *, const char*);
SOAP_FMAC1 _tptz__GetPresetToursResponse * SOAP_FMAC2 soap_instantiate__tptz__GetPresetToursResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GetPresetToursResponse * soap_new__tptz__GetPresetToursResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GetPresetToursResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__GetPresetToursResponse * soap_new_req__tptz__GetPresetToursResponse(
	struct soap *soap)
{
	_tptz__GetPresetToursResponse *_p = soap_new__tptz__GetPresetToursResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tptz__GetPresetToursResponse * soap_new_set__tptz__GetPresetToursResponse(
	struct soap *soap,
	const std::vector<tt__PresetTour *> & PresetTour)
{
	_tptz__GetPresetToursResponse *_p = soap_new__tptz__GetPresetToursResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetPresetToursResponse::PresetTour = PresetTour;
	}
	return _p;
}

inline int soap_write__tptz__GetPresetToursResponse(struct soap *soap, _tptz__GetPresetToursResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresetToursResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GetPresetToursResponse * SOAP_FMAC4 soap_get__tptz__GetPresetToursResponse(struct soap*, _tptz__GetPresetToursResponse *, const char*, const char*);

inline int soap_read__tptz__GetPresetToursResponse(struct soap *soap, _tptz__GetPresetToursResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tptz__GetPresetToursResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tptz__GetPresetTours_DEFINED
#define SOAP_TYPE__tptz__GetPresetTours_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GetPresetTours(struct soap*, const char*, int, const _tptz__GetPresetTours *, const char*);
SOAP_FMAC3 _tptz__GetPresetTours * SOAP_FMAC4 soap_in__tptz__GetPresetTours(struct soap*, const char*, _tptz__GetPresetTours *, const char*);
SOAP_FMAC1 _tptz__GetPresetTours * SOAP_FMAC2 soap_instantiate__tptz__GetPresetTours(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GetPresetTours * soap_new__tptz__GetPresetTours(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GetPresetTours(soap, n, NULL, NULL, NULL);
}

inline _tptz__GetPresetTours * soap_new_req__tptz__GetPresetTours(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_tptz__GetPresetTours *_p = soap_new__tptz__GetPresetTours(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetPresetTours::ProfileToken = ProfileToken;
	}
	return _p;
}

inline _tptz__GetPresetTours * soap_new_set__tptz__GetPresetTours(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_tptz__GetPresetTours *_p = soap_new__tptz__GetPresetTours(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetPresetTours::ProfileToken = ProfileToken;
	}
	return _p;
}

inline int soap_write__tptz__GetPresetTours(struct soap *soap, _tptz__GetPresetTours const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresetTours", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GetPresetTours * SOAP_FMAC4 soap_get__tptz__GetPresetTours(struct soap*, _tptz__GetPresetTours *, const char*, const char*);

inline int soap_read__tptz__GetPresetTours(struct soap *soap, _tptz__GetPresetTours *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tptz__GetPresetTours(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tptz__StopResponse_DEFINED
#define SOAP_TYPE__tptz__StopResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__StopResponse(struct soap*, const char*, int, const _tptz__StopResponse *, const char*);
SOAP_FMAC3 _tptz__StopResponse * SOAP_FMAC4 soap_in__tptz__StopResponse(struct soap*, const char*, _tptz__StopResponse *, const char*);
SOAP_FMAC1 _tptz__StopResponse * SOAP_FMAC2 soap_instantiate__tptz__StopResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__StopResponse * soap_new__tptz__StopResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__StopResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__StopResponse * soap_new_req__tptz__StopResponse(
	struct soap *soap)
{
	_tptz__StopResponse *_p = soap_new__tptz__StopResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tptz__StopResponse * soap_new_set__tptz__StopResponse(
	struct soap *soap)
{
	_tptz__StopResponse *_p = soap_new__tptz__StopResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tptz__StopResponse(struct soap *soap, _tptz__StopResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:StopResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__StopResponse * SOAP_FMAC4 soap_get__tptz__StopResponse(struct soap*, _tptz__StopResponse *, const char*, const char*);

inline int soap_read__tptz__StopResponse(struct soap *soap, _tptz__StopResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tptz__StopResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tptz__Stop_DEFINED
#define SOAP_TYPE__tptz__Stop_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__Stop(struct soap*, const char*, int, const _tptz__Stop *, const char*);
SOAP_FMAC3 _tptz__Stop * SOAP_FMAC4 soap_in__tptz__Stop(struct soap*, const char*, _tptz__Stop *, const char*);
SOAP_FMAC1 _tptz__Stop * SOAP_FMAC2 soap_instantiate__tptz__Stop(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__Stop * soap_new__tptz__Stop(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__Stop(soap, n, NULL, NULL, NULL);
}

inline _tptz__Stop * soap_new_req__tptz__Stop(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_tptz__Stop *_p = soap_new__tptz__Stop(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__Stop::ProfileToken = ProfileToken;
	}
	return _p;
}

inline _tptz__Stop * soap_new_set__tptz__Stop(
	struct soap *soap,
	const std::string& ProfileToken,
	bool *PanTilt,
	bool *Zoom)
{
	_tptz__Stop *_p = soap_new__tptz__Stop(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__Stop::ProfileToken = ProfileToken;
		_p->_tptz__Stop::PanTilt = PanTilt;
		_p->_tptz__Stop::Zoom = Zoom;
	}
	return _p;
}

inline int soap_write__tptz__Stop(struct soap *soap, _tptz__Stop const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:Stop", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__Stop * SOAP_FMAC4 soap_get__tptz__Stop(struct soap*, _tptz__Stop *, const char*, const char*);

inline int soap_read__tptz__Stop(struct soap *soap, _tptz__Stop *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tptz__Stop(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tptz__AbsoluteMoveResponse_DEFINED
#define SOAP_TYPE__tptz__AbsoluteMoveResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__AbsoluteMoveResponse(struct soap*, const char*, int, const _tptz__AbsoluteMoveResponse *, const char*);
SOAP_FMAC3 _tptz__AbsoluteMoveResponse * SOAP_FMAC4 soap_in__tptz__AbsoluteMoveResponse(struct soap*, const char*, _tptz__AbsoluteMoveResponse *, const char*);
SOAP_FMAC1 _tptz__AbsoluteMoveResponse * SOAP_FMAC2 soap_instantiate__tptz__AbsoluteMoveResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__AbsoluteMoveResponse * soap_new__tptz__AbsoluteMoveResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__AbsoluteMoveResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__AbsoluteMoveResponse * soap_new_req__tptz__AbsoluteMoveResponse(
	struct soap *soap)
{
	_tptz__AbsoluteMoveResponse *_p = soap_new__tptz__AbsoluteMoveResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tptz__AbsoluteMoveResponse * soap_new_set__tptz__AbsoluteMoveResponse(
	struct soap *soap)
{
	_tptz__AbsoluteMoveResponse *_p = soap_new__tptz__AbsoluteMoveResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tptz__AbsoluteMoveResponse(struct soap *soap, _tptz__AbsoluteMoveResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:AbsoluteMoveResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__AbsoluteMoveResponse * SOAP_FMAC4 soap_get__tptz__AbsoluteMoveResponse(struct soap*, _tptz__AbsoluteMoveResponse *, const char*, const char*);

inline int soap_read__tptz__AbsoluteMoveResponse(struct soap *soap, _tptz__AbsoluteMoveResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tptz__AbsoluteMoveResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tptz__AbsoluteMove_DEFINED
#define SOAP_TYPE__tptz__AbsoluteMove_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__AbsoluteMove(struct soap*, const char*, int, const _tptz__AbsoluteMove *, const char*);
SOAP_FMAC3 _tptz__AbsoluteMove * SOAP_FMAC4 soap_in__tptz__AbsoluteMove(struct soap*, const char*, _tptz__AbsoluteMove *, const char*);
SOAP_FMAC1 _tptz__AbsoluteMove * SOAP_FMAC2 soap_instantiate__tptz__AbsoluteMove(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__AbsoluteMove * soap_new__tptz__AbsoluteMove(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__AbsoluteMove(soap, n, NULL, NULL, NULL);
}

inline _tptz__AbsoluteMove * soap_new_req__tptz__AbsoluteMove(
	struct soap *soap,
	const std::string& ProfileToken,
	tt__PTZVector *Position)
{
	_tptz__AbsoluteMove *_p = soap_new__tptz__AbsoluteMove(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__AbsoluteMove::ProfileToken = ProfileToken;
		_p->_tptz__AbsoluteMove::Position = Position;
	}
	return _p;
}

inline _tptz__AbsoluteMove * soap_new_set__tptz__AbsoluteMove(
	struct soap *soap,
	const std::string& ProfileToken,
	tt__PTZVector *Position,
	tt__PTZSpeed *Speed)
{
	_tptz__AbsoluteMove *_p = soap_new__tptz__AbsoluteMove(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__AbsoluteMove::ProfileToken = ProfileToken;
		_p->_tptz__AbsoluteMove::Position = Position;
		_p->_tptz__AbsoluteMove::Speed = Speed;
	}
	return _p;
}

inline int soap_write__tptz__AbsoluteMove(struct soap *soap, _tptz__AbsoluteMove const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:AbsoluteMove", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__AbsoluteMove * SOAP_FMAC4 soap_get__tptz__AbsoluteMove(struct soap*, _tptz__AbsoluteMove *, const char*, const char*);

inline int soap_read__tptz__AbsoluteMove(struct soap *soap, _tptz__AbsoluteMove *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tptz__AbsoluteMove(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tptz__RelativeMoveResponse_DEFINED
#define SOAP_TYPE__tptz__RelativeMoveResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__RelativeMoveResponse(struct soap*, const char*, int, const _tptz__RelativeMoveResponse *, const char*);
SOAP_FMAC3 _tptz__RelativeMoveResponse * SOAP_FMAC4 soap_in__tptz__RelativeMoveResponse(struct soap*, const char*, _tptz__RelativeMoveResponse *, const char*);
SOAP_FMAC1 _tptz__RelativeMoveResponse * SOAP_FMAC2 soap_instantiate__tptz__RelativeMoveResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__RelativeMoveResponse * soap_new__tptz__RelativeMoveResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__RelativeMoveResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__RelativeMoveResponse * soap_new_req__tptz__RelativeMoveResponse(
	struct soap *soap)
{
	_tptz__RelativeMoveResponse *_p = soap_new__tptz__RelativeMoveResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tptz__RelativeMoveResponse * soap_new_set__tptz__RelativeMoveResponse(
	struct soap *soap)
{
	_tptz__RelativeMoveResponse *_p = soap_new__tptz__RelativeMoveResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tptz__RelativeMoveResponse(struct soap *soap, _tptz__RelativeMoveResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:RelativeMoveResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__RelativeMoveResponse * SOAP_FMAC4 soap_get__tptz__RelativeMoveResponse(struct soap*, _tptz__RelativeMoveResponse *, const char*, const char*);

inline int soap_read__tptz__RelativeMoveResponse(struct soap *soap, _tptz__RelativeMoveResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tptz__RelativeMoveResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tptz__RelativeMove_DEFINED
#define SOAP_TYPE__tptz__RelativeMove_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__RelativeMove(struct soap*, const char*, int, const _tptz__RelativeMove *, const char*);
SOAP_FMAC3 _tptz__RelativeMove * SOAP_FMAC4 soap_in__tptz__RelativeMove(struct soap*, const char*, _tptz__RelativeMove *, const char*);
SOAP_FMAC1 _tptz__RelativeMove * SOAP_FMAC2 soap_instantiate__tptz__RelativeMove(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__RelativeMove * soap_new__tptz__RelativeMove(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__RelativeMove(soap, n, NULL, NULL, NULL);
}

inline _tptz__RelativeMove * soap_new_req__tptz__RelativeMove(
	struct soap *soap,
	const std::string& ProfileToken,
	tt__PTZVector *Translation)
{
	_tptz__RelativeMove *_p = soap_new__tptz__RelativeMove(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__RelativeMove::ProfileToken = ProfileToken;
		_p->_tptz__RelativeMove::Translation = Translation;
	}
	return _p;
}

inline _tptz__RelativeMove * soap_new_set__tptz__RelativeMove(
	struct soap *soap,
	const std::string& ProfileToken,
	tt__PTZVector *Translation,
	tt__PTZSpeed *Speed)
{
	_tptz__RelativeMove *_p = soap_new__tptz__RelativeMove(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__RelativeMove::ProfileToken = ProfileToken;
		_p->_tptz__RelativeMove::Translation = Translation;
		_p->_tptz__RelativeMove::Speed = Speed;
	}
	return _p;
}

inline int soap_write__tptz__RelativeMove(struct soap *soap, _tptz__RelativeMove const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:RelativeMove", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__RelativeMove * SOAP_FMAC4 soap_get__tptz__RelativeMove(struct soap*, _tptz__RelativeMove *, const char*, const char*);

inline int soap_read__tptz__RelativeMove(struct soap *soap, _tptz__RelativeMove *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tptz__RelativeMove(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tptz__ContinuousMoveResponse_DEFINED
#define SOAP_TYPE__tptz__ContinuousMoveResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__ContinuousMoveResponse(struct soap*, const char*, int, const _tptz__ContinuousMoveResponse *, const char*);
SOAP_FMAC3 _tptz__ContinuousMoveResponse * SOAP_FMAC4 soap_in__tptz__ContinuousMoveResponse(struct soap*, const char*, _tptz__ContinuousMoveResponse *, const char*);
SOAP_FMAC1 _tptz__ContinuousMoveResponse * SOAP_FMAC2 soap_instantiate__tptz__ContinuousMoveResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__ContinuousMoveResponse * soap_new__tptz__ContinuousMoveResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__ContinuousMoveResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__ContinuousMoveResponse * soap_new_req__tptz__ContinuousMoveResponse(
	struct soap *soap)
{
	_tptz__ContinuousMoveResponse *_p = soap_new__tptz__ContinuousMoveResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tptz__ContinuousMoveResponse * soap_new_set__tptz__ContinuousMoveResponse(
	struct soap *soap)
{
	_tptz__ContinuousMoveResponse *_p = soap_new__tptz__ContinuousMoveResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tptz__ContinuousMoveResponse(struct soap *soap, _tptz__ContinuousMoveResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:ContinuousMoveResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__ContinuousMoveResponse * SOAP_FMAC4 soap_get__tptz__ContinuousMoveResponse(struct soap*, _tptz__ContinuousMoveResponse *, const char*, const char*);

inline int soap_read__tptz__ContinuousMoveResponse(struct soap *soap, _tptz__ContinuousMoveResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tptz__ContinuousMoveResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tptz__ContinuousMove_DEFINED
#define SOAP_TYPE__tptz__ContinuousMove_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__ContinuousMove(struct soap*, const char*, int, const _tptz__ContinuousMove *, const char*);
SOAP_FMAC3 _tptz__ContinuousMove * SOAP_FMAC4 soap_in__tptz__ContinuousMove(struct soap*, const char*, _tptz__ContinuousMove *, const char*);
SOAP_FMAC1 _tptz__ContinuousMove * SOAP_FMAC2 soap_instantiate__tptz__ContinuousMove(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__ContinuousMove * soap_new__tptz__ContinuousMove(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__ContinuousMove(soap, n, NULL, NULL, NULL);
}

inline _tptz__ContinuousMove * soap_new_req__tptz__ContinuousMove(
	struct soap *soap,
	const std::string& ProfileToken,
	tt__PTZSpeed *Velocity)
{
	_tptz__ContinuousMove *_p = soap_new__tptz__ContinuousMove(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__ContinuousMove::ProfileToken = ProfileToken;
		_p->_tptz__ContinuousMove::Velocity = Velocity;
	}
	return _p;
}

inline _tptz__ContinuousMove * soap_new_set__tptz__ContinuousMove(
	struct soap *soap,
	const std::string& ProfileToken,
	tt__PTZSpeed *Velocity,
	LONG64 *Timeout)
{
	_tptz__ContinuousMove *_p = soap_new__tptz__ContinuousMove(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__ContinuousMove::ProfileToken = ProfileToken;
		_p->_tptz__ContinuousMove::Velocity = Velocity;
		_p->_tptz__ContinuousMove::Timeout = Timeout;
	}
	return _p;
}

inline int soap_write__tptz__ContinuousMove(struct soap *soap, _tptz__ContinuousMove const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:ContinuousMove", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__ContinuousMove * SOAP_FMAC4 soap_get__tptz__ContinuousMove(struct soap*, _tptz__ContinuousMove *, const char*, const char*);

inline int soap_read__tptz__ContinuousMove(struct soap *soap, _tptz__ContinuousMove *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tptz__ContinuousMove(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tptz__SetHomePositionResponse_DEFINED
#define SOAP_TYPE__tptz__SetHomePositionResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__SetHomePositionResponse(struct soap*, const char*, int, const _tptz__SetHomePositionResponse *, const char*);
SOAP_FMAC3 _tptz__SetHomePositionResponse * SOAP_FMAC4 soap_in__tptz__SetHomePositionResponse(struct soap*, const char*, _tptz__SetHomePositionResponse *, const char*);
SOAP_FMAC1 _tptz__SetHomePositionResponse * SOAP_FMAC2 soap_instantiate__tptz__SetHomePositionResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__SetHomePositionResponse * soap_new__tptz__SetHomePositionResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__SetHomePositionResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__SetHomePositionResponse * soap_new_req__tptz__SetHomePositionResponse(
	struct soap *soap)
{
	_tptz__SetHomePositionResponse *_p = soap_new__tptz__SetHomePositionResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tptz__SetHomePositionResponse * soap_new_set__tptz__SetHomePositionResponse(
	struct soap *soap)
{
	_tptz__SetHomePositionResponse *_p = soap_new__tptz__SetHomePositionResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tptz__SetHomePositionResponse(struct soap *soap, _tptz__SetHomePositionResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SetHomePositionResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__SetHomePositionResponse * SOAP_FMAC4 soap_get__tptz__SetHomePositionResponse(struct soap*, _tptz__SetHomePositionResponse *, const char*, const char*);

inline int soap_read__tptz__SetHomePositionResponse(struct soap *soap, _tptz__SetHomePositionResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tptz__SetHomePositionResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tptz__SetHomePosition_DEFINED
#define SOAP_TYPE__tptz__SetHomePosition_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__SetHomePosition(struct soap*, const char*, int, const _tptz__SetHomePosition *, const char*);
SOAP_FMAC3 _tptz__SetHomePosition * SOAP_FMAC4 soap_in__tptz__SetHomePosition(struct soap*, const char*, _tptz__SetHomePosition *, const char*);
SOAP_FMAC1 _tptz__SetHomePosition * SOAP_FMAC2 soap_instantiate__tptz__SetHomePosition(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__SetHomePosition * soap_new__tptz__SetHomePosition(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__SetHomePosition(soap, n, NULL, NULL, NULL);
}

inline _tptz__SetHomePosition * soap_new_req__tptz__SetHomePosition(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_tptz__SetHomePosition *_p = soap_new__tptz__SetHomePosition(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__SetHomePosition::ProfileToken = ProfileToken;
	}
	return _p;
}

inline _tptz__SetHomePosition * soap_new_set__tptz__SetHomePosition(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_tptz__SetHomePosition *_p = soap_new__tptz__SetHomePosition(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__SetHomePosition::ProfileToken = ProfileToken;
	}
	return _p;
}

inline int soap_write__tptz__SetHomePosition(struct soap *soap, _tptz__SetHomePosition const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SetHomePosition", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__SetHomePosition * SOAP_FMAC4 soap_get__tptz__SetHomePosition(struct soap*, _tptz__SetHomePosition *, const char*, const char*);

inline int soap_read__tptz__SetHomePosition(struct soap *soap, _tptz__SetHomePosition *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tptz__SetHomePosition(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tptz__GotoHomePositionResponse_DEFINED
#define SOAP_TYPE__tptz__GotoHomePositionResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GotoHomePositionResponse(struct soap*, const char*, int, const _tptz__GotoHomePositionResponse *, const char*);
SOAP_FMAC3 _tptz__GotoHomePositionResponse * SOAP_FMAC4 soap_in__tptz__GotoHomePositionResponse(struct soap*, const char*, _tptz__GotoHomePositionResponse *, const char*);
SOAP_FMAC1 _tptz__GotoHomePositionResponse * SOAP_FMAC2 soap_instantiate__tptz__GotoHomePositionResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GotoHomePositionResponse * soap_new__tptz__GotoHomePositionResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GotoHomePositionResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__GotoHomePositionResponse * soap_new_req__tptz__GotoHomePositionResponse(
	struct soap *soap)
{
	_tptz__GotoHomePositionResponse *_p = soap_new__tptz__GotoHomePositionResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tptz__GotoHomePositionResponse * soap_new_set__tptz__GotoHomePositionResponse(
	struct soap *soap)
{
	_tptz__GotoHomePositionResponse *_p = soap_new__tptz__GotoHomePositionResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tptz__GotoHomePositionResponse(struct soap *soap, _tptz__GotoHomePositionResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GotoHomePositionResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GotoHomePositionResponse * SOAP_FMAC4 soap_get__tptz__GotoHomePositionResponse(struct soap*, _tptz__GotoHomePositionResponse *, const char*, const char*);

inline int soap_read__tptz__GotoHomePositionResponse(struct soap *soap, _tptz__GotoHomePositionResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tptz__GotoHomePositionResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tptz__GotoHomePosition_DEFINED
#define SOAP_TYPE__tptz__GotoHomePosition_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GotoHomePosition(struct soap*, const char*, int, const _tptz__GotoHomePosition *, const char*);
SOAP_FMAC3 _tptz__GotoHomePosition * SOAP_FMAC4 soap_in__tptz__GotoHomePosition(struct soap*, const char*, _tptz__GotoHomePosition *, const char*);
SOAP_FMAC1 _tptz__GotoHomePosition * SOAP_FMAC2 soap_instantiate__tptz__GotoHomePosition(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GotoHomePosition * soap_new__tptz__GotoHomePosition(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GotoHomePosition(soap, n, NULL, NULL, NULL);
}

inline _tptz__GotoHomePosition * soap_new_req__tptz__GotoHomePosition(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_tptz__GotoHomePosition *_p = soap_new__tptz__GotoHomePosition(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GotoHomePosition::ProfileToken = ProfileToken;
	}
	return _p;
}

inline _tptz__GotoHomePosition * soap_new_set__tptz__GotoHomePosition(
	struct soap *soap,
	const std::string& ProfileToken,
	tt__PTZSpeed *Speed)
{
	_tptz__GotoHomePosition *_p = soap_new__tptz__GotoHomePosition(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GotoHomePosition::ProfileToken = ProfileToken;
		_p->_tptz__GotoHomePosition::Speed = Speed;
	}
	return _p;
}

inline int soap_write__tptz__GotoHomePosition(struct soap *soap, _tptz__GotoHomePosition const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GotoHomePosition", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GotoHomePosition * SOAP_FMAC4 soap_get__tptz__GotoHomePosition(struct soap*, _tptz__GotoHomePosition *, const char*, const char*);

inline int soap_read__tptz__GotoHomePosition(struct soap *soap, _tptz__GotoHomePosition *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tptz__GotoHomePosition(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tptz__GetStatusResponse_DEFINED
#define SOAP_TYPE__tptz__GetStatusResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GetStatusResponse(struct soap*, const char*, int, const _tptz__GetStatusResponse *, const char*);
SOAP_FMAC3 _tptz__GetStatusResponse * SOAP_FMAC4 soap_in__tptz__GetStatusResponse(struct soap*, const char*, _tptz__GetStatusResponse *, const char*);
SOAP_FMAC1 _tptz__GetStatusResponse * SOAP_FMAC2 soap_instantiate__tptz__GetStatusResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GetStatusResponse * soap_new__tptz__GetStatusResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GetStatusResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__GetStatusResponse * soap_new_req__tptz__GetStatusResponse(
	struct soap *soap,
	tt__PTZStatus *PTZStatus)
{
	_tptz__GetStatusResponse *_p = soap_new__tptz__GetStatusResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetStatusResponse::PTZStatus = PTZStatus;
	}
	return _p;
}

inline _tptz__GetStatusResponse * soap_new_set__tptz__GetStatusResponse(
	struct soap *soap,
	tt__PTZStatus *PTZStatus)
{
	_tptz__GetStatusResponse *_p = soap_new__tptz__GetStatusResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetStatusResponse::PTZStatus = PTZStatus;
	}
	return _p;
}

inline int soap_write__tptz__GetStatusResponse(struct soap *soap, _tptz__GetStatusResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetStatusResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GetStatusResponse * SOAP_FMAC4 soap_get__tptz__GetStatusResponse(struct soap*, _tptz__GetStatusResponse *, const char*, const char*);

inline int soap_read__tptz__GetStatusResponse(struct soap *soap, _tptz__GetStatusResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tptz__GetStatusResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tptz__GetStatus_DEFINED
#define SOAP_TYPE__tptz__GetStatus_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GetStatus(struct soap*, const char*, int, const _tptz__GetStatus *, const char*);
SOAP_FMAC3 _tptz__GetStatus * SOAP_FMAC4 soap_in__tptz__GetStatus(struct soap*, const char*, _tptz__GetStatus *, const char*);
SOAP_FMAC1 _tptz__GetStatus * SOAP_FMAC2 soap_instantiate__tptz__GetStatus(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GetStatus * soap_new__tptz__GetStatus(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GetStatus(soap, n, NULL, NULL, NULL);
}

inline _tptz__GetStatus * soap_new_req__tptz__GetStatus(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_tptz__GetStatus *_p = soap_new__tptz__GetStatus(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetStatus::ProfileToken = ProfileToken;
	}
	return _p;
}

inline _tptz__GetStatus * soap_new_set__tptz__GetStatus(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_tptz__GetStatus *_p = soap_new__tptz__GetStatus(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetStatus::ProfileToken = ProfileToken;
	}
	return _p;
}

inline int soap_write__tptz__GetStatus(struct soap *soap, _tptz__GetStatus const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetStatus", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GetStatus * SOAP_FMAC4 soap_get__tptz__GetStatus(struct soap*, _tptz__GetStatus *, const char*, const char*);

inline int soap_read__tptz__GetStatus(struct soap *soap, _tptz__GetStatus *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tptz__GetStatus(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tptz__GotoPresetResponse_DEFINED
#define SOAP_TYPE__tptz__GotoPresetResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GotoPresetResponse(struct soap*, const char*, int, const _tptz__GotoPresetResponse *, const char*);
SOAP_FMAC3 _tptz__GotoPresetResponse * SOAP_FMAC4 soap_in__tptz__GotoPresetResponse(struct soap*, const char*, _tptz__GotoPresetResponse *, const char*);
SOAP_FMAC1 _tptz__GotoPresetResponse * SOAP_FMAC2 soap_instantiate__tptz__GotoPresetResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GotoPresetResponse * soap_new__tptz__GotoPresetResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GotoPresetResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__GotoPresetResponse * soap_new_req__tptz__GotoPresetResponse(
	struct soap *soap)
{
	_tptz__GotoPresetResponse *_p = soap_new__tptz__GotoPresetResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tptz__GotoPresetResponse * soap_new_set__tptz__GotoPresetResponse(
	struct soap *soap)
{
	_tptz__GotoPresetResponse *_p = soap_new__tptz__GotoPresetResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tptz__GotoPresetResponse(struct soap *soap, _tptz__GotoPresetResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GotoPresetResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GotoPresetResponse * SOAP_FMAC4 soap_get__tptz__GotoPresetResponse(struct soap*, _tptz__GotoPresetResponse *, const char*, const char*);

inline int soap_read__tptz__GotoPresetResponse(struct soap *soap, _tptz__GotoPresetResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tptz__GotoPresetResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tptz__GotoPreset_DEFINED
#define SOAP_TYPE__tptz__GotoPreset_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GotoPreset(struct soap*, const char*, int, const _tptz__GotoPreset *, const char*);
SOAP_FMAC3 _tptz__GotoPreset * SOAP_FMAC4 soap_in__tptz__GotoPreset(struct soap*, const char*, _tptz__GotoPreset *, const char*);
SOAP_FMAC1 _tptz__GotoPreset * SOAP_FMAC2 soap_instantiate__tptz__GotoPreset(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GotoPreset * soap_new__tptz__GotoPreset(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GotoPreset(soap, n, NULL, NULL, NULL);
}

inline _tptz__GotoPreset * soap_new_req__tptz__GotoPreset(
	struct soap *soap,
	const std::string& ProfileToken,
	const std::string& PresetToken)
{
	_tptz__GotoPreset *_p = soap_new__tptz__GotoPreset(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GotoPreset::ProfileToken = ProfileToken;
		_p->_tptz__GotoPreset::PresetToken = PresetToken;
	}
	return _p;
}

inline _tptz__GotoPreset * soap_new_set__tptz__GotoPreset(
	struct soap *soap,
	const std::string& ProfileToken,
	const std::string& PresetToken,
	tt__PTZSpeed *Speed)
{
	_tptz__GotoPreset *_p = soap_new__tptz__GotoPreset(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GotoPreset::ProfileToken = ProfileToken;
		_p->_tptz__GotoPreset::PresetToken = PresetToken;
		_p->_tptz__GotoPreset::Speed = Speed;
	}
	return _p;
}

inline int soap_write__tptz__GotoPreset(struct soap *soap, _tptz__GotoPreset const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GotoPreset", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GotoPreset * SOAP_FMAC4 soap_get__tptz__GotoPreset(struct soap*, _tptz__GotoPreset *, const char*, const char*);

inline int soap_read__tptz__GotoPreset(struct soap *soap, _tptz__GotoPreset *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tptz__GotoPreset(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tptz__RemovePresetResponse_DEFINED
#define SOAP_TYPE__tptz__RemovePresetResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__RemovePresetResponse(struct soap*, const char*, int, const _tptz__RemovePresetResponse *, const char*);
SOAP_FMAC3 _tptz__RemovePresetResponse * SOAP_FMAC4 soap_in__tptz__RemovePresetResponse(struct soap*, const char*, _tptz__RemovePresetResponse *, const char*);
SOAP_FMAC1 _tptz__RemovePresetResponse * SOAP_FMAC2 soap_instantiate__tptz__RemovePresetResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__RemovePresetResponse * soap_new__tptz__RemovePresetResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__RemovePresetResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__RemovePresetResponse * soap_new_req__tptz__RemovePresetResponse(
	struct soap *soap)
{
	_tptz__RemovePresetResponse *_p = soap_new__tptz__RemovePresetResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tptz__RemovePresetResponse * soap_new_set__tptz__RemovePresetResponse(
	struct soap *soap)
{
	_tptz__RemovePresetResponse *_p = soap_new__tptz__RemovePresetResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tptz__RemovePresetResponse(struct soap *soap, _tptz__RemovePresetResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:RemovePresetResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__RemovePresetResponse * SOAP_FMAC4 soap_get__tptz__RemovePresetResponse(struct soap*, _tptz__RemovePresetResponse *, const char*, const char*);

inline int soap_read__tptz__RemovePresetResponse(struct soap *soap, _tptz__RemovePresetResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tptz__RemovePresetResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tptz__RemovePreset_DEFINED
#define SOAP_TYPE__tptz__RemovePreset_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__RemovePreset(struct soap*, const char*, int, const _tptz__RemovePreset *, const char*);
SOAP_FMAC3 _tptz__RemovePreset * SOAP_FMAC4 soap_in__tptz__RemovePreset(struct soap*, const char*, _tptz__RemovePreset *, const char*);
SOAP_FMAC1 _tptz__RemovePreset * SOAP_FMAC2 soap_instantiate__tptz__RemovePreset(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__RemovePreset * soap_new__tptz__RemovePreset(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__RemovePreset(soap, n, NULL, NULL, NULL);
}

inline _tptz__RemovePreset * soap_new_req__tptz__RemovePreset(
	struct soap *soap,
	const std::string& ProfileToken,
	const std::string& PresetToken)
{
	_tptz__RemovePreset *_p = soap_new__tptz__RemovePreset(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__RemovePreset::ProfileToken = ProfileToken;
		_p->_tptz__RemovePreset::PresetToken = PresetToken;
	}
	return _p;
}

inline _tptz__RemovePreset * soap_new_set__tptz__RemovePreset(
	struct soap *soap,
	const std::string& ProfileToken,
	const std::string& PresetToken)
{
	_tptz__RemovePreset *_p = soap_new__tptz__RemovePreset(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__RemovePreset::ProfileToken = ProfileToken;
		_p->_tptz__RemovePreset::PresetToken = PresetToken;
	}
	return _p;
}

inline int soap_write__tptz__RemovePreset(struct soap *soap, _tptz__RemovePreset const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:RemovePreset", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__RemovePreset * SOAP_FMAC4 soap_get__tptz__RemovePreset(struct soap*, _tptz__RemovePreset *, const char*, const char*);

inline int soap_read__tptz__RemovePreset(struct soap *soap, _tptz__RemovePreset *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tptz__RemovePreset(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tptz__SetPresetResponse_DEFINED
#define SOAP_TYPE__tptz__SetPresetResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__SetPresetResponse(struct soap*, const char*, int, const _tptz__SetPresetResponse *, const char*);
SOAP_FMAC3 _tptz__SetPresetResponse * SOAP_FMAC4 soap_in__tptz__SetPresetResponse(struct soap*, const char*, _tptz__SetPresetResponse *, const char*);
SOAP_FMAC1 _tptz__SetPresetResponse * SOAP_FMAC2 soap_instantiate__tptz__SetPresetResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__SetPresetResponse * soap_new__tptz__SetPresetResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__SetPresetResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__SetPresetResponse * soap_new_req__tptz__SetPresetResponse(
	struct soap *soap,
	const std::string& PresetToken)
{
	_tptz__SetPresetResponse *_p = soap_new__tptz__SetPresetResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__SetPresetResponse::PresetToken = PresetToken;
	}
	return _p;
}

inline _tptz__SetPresetResponse * soap_new_set__tptz__SetPresetResponse(
	struct soap *soap,
	const std::string& PresetToken)
{
	_tptz__SetPresetResponse *_p = soap_new__tptz__SetPresetResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__SetPresetResponse::PresetToken = PresetToken;
	}
	return _p;
}

inline int soap_write__tptz__SetPresetResponse(struct soap *soap, _tptz__SetPresetResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SetPresetResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__SetPresetResponse * SOAP_FMAC4 soap_get__tptz__SetPresetResponse(struct soap*, _tptz__SetPresetResponse *, const char*, const char*);

inline int soap_read__tptz__SetPresetResponse(struct soap *soap, _tptz__SetPresetResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tptz__SetPresetResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tptz__SetPreset_DEFINED
#define SOAP_TYPE__tptz__SetPreset_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__SetPreset(struct soap*, const char*, int, const _tptz__SetPreset *, const char*);
SOAP_FMAC3 _tptz__SetPreset * SOAP_FMAC4 soap_in__tptz__SetPreset(struct soap*, const char*, _tptz__SetPreset *, const char*);
SOAP_FMAC1 _tptz__SetPreset * SOAP_FMAC2 soap_instantiate__tptz__SetPreset(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__SetPreset * soap_new__tptz__SetPreset(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__SetPreset(soap, n, NULL, NULL, NULL);
}

inline _tptz__SetPreset * soap_new_req__tptz__SetPreset(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_tptz__SetPreset *_p = soap_new__tptz__SetPreset(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__SetPreset::ProfileToken = ProfileToken;
	}
	return _p;
}

inline _tptz__SetPreset * soap_new_set__tptz__SetPreset(
	struct soap *soap,
	const std::string& ProfileToken,
	std::string *PresetName,
	std::string *PresetToken)
{
	_tptz__SetPreset *_p = soap_new__tptz__SetPreset(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__SetPreset::ProfileToken = ProfileToken;
		_p->_tptz__SetPreset::PresetName = PresetName;
		_p->_tptz__SetPreset::PresetToken = PresetToken;
	}
	return _p;
}

inline int soap_write__tptz__SetPreset(struct soap *soap, _tptz__SetPreset const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SetPreset", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__SetPreset * SOAP_FMAC4 soap_get__tptz__SetPreset(struct soap*, _tptz__SetPreset *, const char*, const char*);

inline int soap_read__tptz__SetPreset(struct soap *soap, _tptz__SetPreset *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tptz__SetPreset(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tptz__GetPresetsResponse_DEFINED
#define SOAP_TYPE__tptz__GetPresetsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GetPresetsResponse(struct soap*, const char*, int, const _tptz__GetPresetsResponse *, const char*);
SOAP_FMAC3 _tptz__GetPresetsResponse * SOAP_FMAC4 soap_in__tptz__GetPresetsResponse(struct soap*, const char*, _tptz__GetPresetsResponse *, const char*);
SOAP_FMAC1 _tptz__GetPresetsResponse * SOAP_FMAC2 soap_instantiate__tptz__GetPresetsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GetPresetsResponse * soap_new__tptz__GetPresetsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GetPresetsResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__GetPresetsResponse * soap_new_req__tptz__GetPresetsResponse(
	struct soap *soap)
{
	_tptz__GetPresetsResponse *_p = soap_new__tptz__GetPresetsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tptz__GetPresetsResponse * soap_new_set__tptz__GetPresetsResponse(
	struct soap *soap,
	const std::vector<tt__PTZPreset *> & Preset)
{
	_tptz__GetPresetsResponse *_p = soap_new__tptz__GetPresetsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetPresetsResponse::Preset = Preset;
	}
	return _p;
}

inline int soap_write__tptz__GetPresetsResponse(struct soap *soap, _tptz__GetPresetsResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresetsResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GetPresetsResponse * SOAP_FMAC4 soap_get__tptz__GetPresetsResponse(struct soap*, _tptz__GetPresetsResponse *, const char*, const char*);

inline int soap_read__tptz__GetPresetsResponse(struct soap *soap, _tptz__GetPresetsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tptz__GetPresetsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tptz__GetPresets_DEFINED
#define SOAP_TYPE__tptz__GetPresets_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GetPresets(struct soap*, const char*, int, const _tptz__GetPresets *, const char*);
SOAP_FMAC3 _tptz__GetPresets * SOAP_FMAC4 soap_in__tptz__GetPresets(struct soap*, const char*, _tptz__GetPresets *, const char*);
SOAP_FMAC1 _tptz__GetPresets * SOAP_FMAC2 soap_instantiate__tptz__GetPresets(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GetPresets * soap_new__tptz__GetPresets(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GetPresets(soap, n, NULL, NULL, NULL);
}

inline _tptz__GetPresets * soap_new_req__tptz__GetPresets(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_tptz__GetPresets *_p = soap_new__tptz__GetPresets(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetPresets::ProfileToken = ProfileToken;
	}
	return _p;
}

inline _tptz__GetPresets * soap_new_set__tptz__GetPresets(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_tptz__GetPresets *_p = soap_new__tptz__GetPresets(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetPresets::ProfileToken = ProfileToken;
	}
	return _p;
}

inline int soap_write__tptz__GetPresets(struct soap *soap, _tptz__GetPresets const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresets", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GetPresets * SOAP_FMAC4 soap_get__tptz__GetPresets(struct soap*, _tptz__GetPresets *, const char*, const char*);

inline int soap_read__tptz__GetPresets(struct soap *soap, _tptz__GetPresets *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tptz__GetPresets(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tptz__SendAuxiliaryCommandResponse_DEFINED
#define SOAP_TYPE__tptz__SendAuxiliaryCommandResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__SendAuxiliaryCommandResponse(struct soap*, const char*, int, const _tptz__SendAuxiliaryCommandResponse *, const char*);
SOAP_FMAC3 _tptz__SendAuxiliaryCommandResponse * SOAP_FMAC4 soap_in__tptz__SendAuxiliaryCommandResponse(struct soap*, const char*, _tptz__SendAuxiliaryCommandResponse *, const char*);
SOAP_FMAC1 _tptz__SendAuxiliaryCommandResponse * SOAP_FMAC2 soap_instantiate__tptz__SendAuxiliaryCommandResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__SendAuxiliaryCommandResponse * soap_new__tptz__SendAuxiliaryCommandResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__SendAuxiliaryCommandResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__SendAuxiliaryCommandResponse * soap_new_req__tptz__SendAuxiliaryCommandResponse(
	struct soap *soap,
	const std::string& AuxiliaryResponse)
{
	_tptz__SendAuxiliaryCommandResponse *_p = soap_new__tptz__SendAuxiliaryCommandResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__SendAuxiliaryCommandResponse::AuxiliaryResponse = AuxiliaryResponse;
	}
	return _p;
}

inline _tptz__SendAuxiliaryCommandResponse * soap_new_set__tptz__SendAuxiliaryCommandResponse(
	struct soap *soap,
	const std::string& AuxiliaryResponse)
{
	_tptz__SendAuxiliaryCommandResponse *_p = soap_new__tptz__SendAuxiliaryCommandResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__SendAuxiliaryCommandResponse::AuxiliaryResponse = AuxiliaryResponse;
	}
	return _p;
}

inline int soap_write__tptz__SendAuxiliaryCommandResponse(struct soap *soap, _tptz__SendAuxiliaryCommandResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SendAuxiliaryCommandResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__SendAuxiliaryCommandResponse * SOAP_FMAC4 soap_get__tptz__SendAuxiliaryCommandResponse(struct soap*, _tptz__SendAuxiliaryCommandResponse *, const char*, const char*);

inline int soap_read__tptz__SendAuxiliaryCommandResponse(struct soap *soap, _tptz__SendAuxiliaryCommandResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tptz__SendAuxiliaryCommandResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tptz__SendAuxiliaryCommand_DEFINED
#define SOAP_TYPE__tptz__SendAuxiliaryCommand_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__SendAuxiliaryCommand(struct soap*, const char*, int, const _tptz__SendAuxiliaryCommand *, const char*);
SOAP_FMAC3 _tptz__SendAuxiliaryCommand * SOAP_FMAC4 soap_in__tptz__SendAuxiliaryCommand(struct soap*, const char*, _tptz__SendAuxiliaryCommand *, const char*);
SOAP_FMAC1 _tptz__SendAuxiliaryCommand * SOAP_FMAC2 soap_instantiate__tptz__SendAuxiliaryCommand(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__SendAuxiliaryCommand * soap_new__tptz__SendAuxiliaryCommand(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__SendAuxiliaryCommand(soap, n, NULL, NULL, NULL);
}

inline _tptz__SendAuxiliaryCommand * soap_new_req__tptz__SendAuxiliaryCommand(
	struct soap *soap,
	const std::string& ProfileToken,
	const std::string& AuxiliaryData)
{
	_tptz__SendAuxiliaryCommand *_p = soap_new__tptz__SendAuxiliaryCommand(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__SendAuxiliaryCommand::ProfileToken = ProfileToken;
		_p->_tptz__SendAuxiliaryCommand::AuxiliaryData = AuxiliaryData;
	}
	return _p;
}

inline _tptz__SendAuxiliaryCommand * soap_new_set__tptz__SendAuxiliaryCommand(
	struct soap *soap,
	const std::string& ProfileToken,
	const std::string& AuxiliaryData)
{
	_tptz__SendAuxiliaryCommand *_p = soap_new__tptz__SendAuxiliaryCommand(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__SendAuxiliaryCommand::ProfileToken = ProfileToken;
		_p->_tptz__SendAuxiliaryCommand::AuxiliaryData = AuxiliaryData;
	}
	return _p;
}

inline int soap_write__tptz__SendAuxiliaryCommand(struct soap *soap, _tptz__SendAuxiliaryCommand const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SendAuxiliaryCommand", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__SendAuxiliaryCommand * SOAP_FMAC4 soap_get__tptz__SendAuxiliaryCommand(struct soap*, _tptz__SendAuxiliaryCommand *, const char*, const char*);

inline int soap_read__tptz__SendAuxiliaryCommand(struct soap *soap, _tptz__SendAuxiliaryCommand *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tptz__SendAuxiliaryCommand(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tptz__GetConfigurationOptionsResponse_DEFINED
#define SOAP_TYPE__tptz__GetConfigurationOptionsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GetConfigurationOptionsResponse(struct soap*, const char*, int, const _tptz__GetConfigurationOptionsResponse *, const char*);
SOAP_FMAC3 _tptz__GetConfigurationOptionsResponse * SOAP_FMAC4 soap_in__tptz__GetConfigurationOptionsResponse(struct soap*, const char*, _tptz__GetConfigurationOptionsResponse *, const char*);
SOAP_FMAC1 _tptz__GetConfigurationOptionsResponse * SOAP_FMAC2 soap_instantiate__tptz__GetConfigurationOptionsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GetConfigurationOptionsResponse * soap_new__tptz__GetConfigurationOptionsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GetConfigurationOptionsResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__GetConfigurationOptionsResponse * soap_new_req__tptz__GetConfigurationOptionsResponse(
	struct soap *soap,
	tt__PTZConfigurationOptions *PTZConfigurationOptions)
{
	_tptz__GetConfigurationOptionsResponse *_p = soap_new__tptz__GetConfigurationOptionsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetConfigurationOptionsResponse::PTZConfigurationOptions = PTZConfigurationOptions;
	}
	return _p;
}

inline _tptz__GetConfigurationOptionsResponse * soap_new_set__tptz__GetConfigurationOptionsResponse(
	struct soap *soap,
	tt__PTZConfigurationOptions *PTZConfigurationOptions)
{
	_tptz__GetConfigurationOptionsResponse *_p = soap_new__tptz__GetConfigurationOptionsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetConfigurationOptionsResponse::PTZConfigurationOptions = PTZConfigurationOptions;
	}
	return _p;
}

inline int soap_write__tptz__GetConfigurationOptionsResponse(struct soap *soap, _tptz__GetConfigurationOptionsResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetConfigurationOptionsResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GetConfigurationOptionsResponse * SOAP_FMAC4 soap_get__tptz__GetConfigurationOptionsResponse(struct soap*, _tptz__GetConfigurationOptionsResponse *, const char*, const char*);

inline int soap_read__tptz__GetConfigurationOptionsResponse(struct soap *soap, _tptz__GetConfigurationOptionsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tptz__GetConfigurationOptionsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tptz__GetConfigurationOptions_DEFINED
#define SOAP_TYPE__tptz__GetConfigurationOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GetConfigurationOptions(struct soap*, const char*, int, const _tptz__GetConfigurationOptions *, const char*);
SOAP_FMAC3 _tptz__GetConfigurationOptions * SOAP_FMAC4 soap_in__tptz__GetConfigurationOptions(struct soap*, const char*, _tptz__GetConfigurationOptions *, const char*);
SOAP_FMAC1 _tptz__GetConfigurationOptions * SOAP_FMAC2 soap_instantiate__tptz__GetConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GetConfigurationOptions * soap_new__tptz__GetConfigurationOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GetConfigurationOptions(soap, n, NULL, NULL, NULL);
}

inline _tptz__GetConfigurationOptions * soap_new_req__tptz__GetConfigurationOptions(
	struct soap *soap,
	const std::string& ConfigurationToken)
{
	_tptz__GetConfigurationOptions *_p = soap_new__tptz__GetConfigurationOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetConfigurationOptions::ConfigurationToken = ConfigurationToken;
	}
	return _p;
}

inline _tptz__GetConfigurationOptions * soap_new_set__tptz__GetConfigurationOptions(
	struct soap *soap,
	const std::string& ConfigurationToken)
{
	_tptz__GetConfigurationOptions *_p = soap_new__tptz__GetConfigurationOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetConfigurationOptions::ConfigurationToken = ConfigurationToken;
	}
	return _p;
}

inline int soap_write__tptz__GetConfigurationOptions(struct soap *soap, _tptz__GetConfigurationOptions const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetConfigurationOptions", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GetConfigurationOptions * SOAP_FMAC4 soap_get__tptz__GetConfigurationOptions(struct soap*, _tptz__GetConfigurationOptions *, const char*, const char*);

inline int soap_read__tptz__GetConfigurationOptions(struct soap *soap, _tptz__GetConfigurationOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tptz__GetConfigurationOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tptz__SetConfigurationResponse_DEFINED
#define SOAP_TYPE__tptz__SetConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__SetConfigurationResponse(struct soap*, const char*, int, const _tptz__SetConfigurationResponse *, const char*);
SOAP_FMAC3 _tptz__SetConfigurationResponse * SOAP_FMAC4 soap_in__tptz__SetConfigurationResponse(struct soap*, const char*, _tptz__SetConfigurationResponse *, const char*);
SOAP_FMAC1 _tptz__SetConfigurationResponse * SOAP_FMAC2 soap_instantiate__tptz__SetConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__SetConfigurationResponse * soap_new__tptz__SetConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__SetConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__SetConfigurationResponse * soap_new_req__tptz__SetConfigurationResponse(
	struct soap *soap)
{
	_tptz__SetConfigurationResponse *_p = soap_new__tptz__SetConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tptz__SetConfigurationResponse * soap_new_set__tptz__SetConfigurationResponse(
	struct soap *soap,
	__tptz__SetConfigurationResponse_sequence *__SetConfigurationResponse_sequence)
{
	_tptz__SetConfigurationResponse *_p = soap_new__tptz__SetConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__SetConfigurationResponse::__SetConfigurationResponse_sequence = __SetConfigurationResponse_sequence;
	}
	return _p;
}

inline int soap_write__tptz__SetConfigurationResponse(struct soap *soap, _tptz__SetConfigurationResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SetConfigurationResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__SetConfigurationResponse * SOAP_FMAC4 soap_get__tptz__SetConfigurationResponse(struct soap*, _tptz__SetConfigurationResponse *, const char*, const char*);

inline int soap_read__tptz__SetConfigurationResponse(struct soap *soap, _tptz__SetConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tptz__SetConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tptz__SetConfiguration_DEFINED
#define SOAP_TYPE__tptz__SetConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__SetConfiguration(struct soap*, const char*, int, const _tptz__SetConfiguration *, const char*);
SOAP_FMAC3 _tptz__SetConfiguration * SOAP_FMAC4 soap_in__tptz__SetConfiguration(struct soap*, const char*, _tptz__SetConfiguration *, const char*);
SOAP_FMAC1 _tptz__SetConfiguration * SOAP_FMAC2 soap_instantiate__tptz__SetConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__SetConfiguration * soap_new__tptz__SetConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__SetConfiguration(soap, n, NULL, NULL, NULL);
}

inline _tptz__SetConfiguration * soap_new_req__tptz__SetConfiguration(
	struct soap *soap,
	tt__PTZConfiguration *PTZConfiguration,
	bool ForcePersistence)
{
	_tptz__SetConfiguration *_p = soap_new__tptz__SetConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__SetConfiguration::PTZConfiguration = PTZConfiguration;
		_p->_tptz__SetConfiguration::ForcePersistence = ForcePersistence;
	}
	return _p;
}

inline _tptz__SetConfiguration * soap_new_set__tptz__SetConfiguration(
	struct soap *soap,
	tt__PTZConfiguration *PTZConfiguration,
	bool ForcePersistence)
{
	_tptz__SetConfiguration *_p = soap_new__tptz__SetConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__SetConfiguration::PTZConfiguration = PTZConfiguration;
		_p->_tptz__SetConfiguration::ForcePersistence = ForcePersistence;
	}
	return _p;
}

inline int soap_write__tptz__SetConfiguration(struct soap *soap, _tptz__SetConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SetConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__SetConfiguration * SOAP_FMAC4 soap_get__tptz__SetConfiguration(struct soap*, _tptz__SetConfiguration *, const char*, const char*);

inline int soap_read__tptz__SetConfiguration(struct soap *soap, _tptz__SetConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tptz__SetConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tptz__GetConfigurationResponse_DEFINED
#define SOAP_TYPE__tptz__GetConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GetConfigurationResponse(struct soap*, const char*, int, const _tptz__GetConfigurationResponse *, const char*);
SOAP_FMAC3 _tptz__GetConfigurationResponse * SOAP_FMAC4 soap_in__tptz__GetConfigurationResponse(struct soap*, const char*, _tptz__GetConfigurationResponse *, const char*);
SOAP_FMAC1 _tptz__GetConfigurationResponse * SOAP_FMAC2 soap_instantiate__tptz__GetConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GetConfigurationResponse * soap_new__tptz__GetConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GetConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__GetConfigurationResponse * soap_new_req__tptz__GetConfigurationResponse(
	struct soap *soap,
	tt__PTZConfiguration *PTZConfiguration)
{
	_tptz__GetConfigurationResponse *_p = soap_new__tptz__GetConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetConfigurationResponse::PTZConfiguration = PTZConfiguration;
	}
	return _p;
}

inline _tptz__GetConfigurationResponse * soap_new_set__tptz__GetConfigurationResponse(
	struct soap *soap,
	tt__PTZConfiguration *PTZConfiguration)
{
	_tptz__GetConfigurationResponse *_p = soap_new__tptz__GetConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetConfigurationResponse::PTZConfiguration = PTZConfiguration;
	}
	return _p;
}

inline int soap_write__tptz__GetConfigurationResponse(struct soap *soap, _tptz__GetConfigurationResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetConfigurationResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GetConfigurationResponse * SOAP_FMAC4 soap_get__tptz__GetConfigurationResponse(struct soap*, _tptz__GetConfigurationResponse *, const char*, const char*);

inline int soap_read__tptz__GetConfigurationResponse(struct soap *soap, _tptz__GetConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tptz__GetConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tptz__GetConfiguration_DEFINED
#define SOAP_TYPE__tptz__GetConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GetConfiguration(struct soap*, const char*, int, const _tptz__GetConfiguration *, const char*);
SOAP_FMAC3 _tptz__GetConfiguration * SOAP_FMAC4 soap_in__tptz__GetConfiguration(struct soap*, const char*, _tptz__GetConfiguration *, const char*);
SOAP_FMAC1 _tptz__GetConfiguration * SOAP_FMAC2 soap_instantiate__tptz__GetConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GetConfiguration * soap_new__tptz__GetConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GetConfiguration(soap, n, NULL, NULL, NULL);
}

inline _tptz__GetConfiguration * soap_new_req__tptz__GetConfiguration(
	struct soap *soap,
	const std::string& PTZConfigurationToken)
{
	_tptz__GetConfiguration *_p = soap_new__tptz__GetConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetConfiguration::PTZConfigurationToken = PTZConfigurationToken;
	}
	return _p;
}

inline _tptz__GetConfiguration * soap_new_set__tptz__GetConfiguration(
	struct soap *soap,
	const std::string& PTZConfigurationToken)
{
	_tptz__GetConfiguration *_p = soap_new__tptz__GetConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetConfiguration::PTZConfigurationToken = PTZConfigurationToken;
	}
	return _p;
}

inline int soap_write__tptz__GetConfiguration(struct soap *soap, _tptz__GetConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GetConfiguration * SOAP_FMAC4 soap_get__tptz__GetConfiguration(struct soap*, _tptz__GetConfiguration *, const char*, const char*);

inline int soap_read__tptz__GetConfiguration(struct soap *soap, _tptz__GetConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tptz__GetConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tptz__GetConfigurationsResponse_DEFINED
#define SOAP_TYPE__tptz__GetConfigurationsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GetConfigurationsResponse(struct soap*, const char*, int, const _tptz__GetConfigurationsResponse *, const char*);
SOAP_FMAC3 _tptz__GetConfigurationsResponse * SOAP_FMAC4 soap_in__tptz__GetConfigurationsResponse(struct soap*, const char*, _tptz__GetConfigurationsResponse *, const char*);
SOAP_FMAC1 _tptz__GetConfigurationsResponse * SOAP_FMAC2 soap_instantiate__tptz__GetConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GetConfigurationsResponse * soap_new__tptz__GetConfigurationsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GetConfigurationsResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__GetConfigurationsResponse * soap_new_req__tptz__GetConfigurationsResponse(
	struct soap *soap)
{
	_tptz__GetConfigurationsResponse *_p = soap_new__tptz__GetConfigurationsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tptz__GetConfigurationsResponse * soap_new_set__tptz__GetConfigurationsResponse(
	struct soap *soap,
	const std::vector<tt__PTZConfiguration *> & PTZConfiguration)
{
	_tptz__GetConfigurationsResponse *_p = soap_new__tptz__GetConfigurationsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetConfigurationsResponse::PTZConfiguration = PTZConfiguration;
	}
	return _p;
}

inline int soap_write__tptz__GetConfigurationsResponse(struct soap *soap, _tptz__GetConfigurationsResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetConfigurationsResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GetConfigurationsResponse * SOAP_FMAC4 soap_get__tptz__GetConfigurationsResponse(struct soap*, _tptz__GetConfigurationsResponse *, const char*, const char*);

inline int soap_read__tptz__GetConfigurationsResponse(struct soap *soap, _tptz__GetConfigurationsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tptz__GetConfigurationsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tptz__GetConfigurations_DEFINED
#define SOAP_TYPE__tptz__GetConfigurations_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GetConfigurations(struct soap*, const char*, int, const _tptz__GetConfigurations *, const char*);
SOAP_FMAC3 _tptz__GetConfigurations * SOAP_FMAC4 soap_in__tptz__GetConfigurations(struct soap*, const char*, _tptz__GetConfigurations *, const char*);
SOAP_FMAC1 _tptz__GetConfigurations * SOAP_FMAC2 soap_instantiate__tptz__GetConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GetConfigurations * soap_new__tptz__GetConfigurations(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GetConfigurations(soap, n, NULL, NULL, NULL);
}

inline _tptz__GetConfigurations * soap_new_req__tptz__GetConfigurations(
	struct soap *soap)
{
	_tptz__GetConfigurations *_p = soap_new__tptz__GetConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tptz__GetConfigurations * soap_new_set__tptz__GetConfigurations(
	struct soap *soap)
{
	_tptz__GetConfigurations *_p = soap_new__tptz__GetConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tptz__GetConfigurations(struct soap *soap, _tptz__GetConfigurations const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetConfigurations", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GetConfigurations * SOAP_FMAC4 soap_get__tptz__GetConfigurations(struct soap*, _tptz__GetConfigurations *, const char*, const char*);

inline int soap_read__tptz__GetConfigurations(struct soap *soap, _tptz__GetConfigurations *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tptz__GetConfigurations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tptz__GetNodeResponse_DEFINED
#define SOAP_TYPE__tptz__GetNodeResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GetNodeResponse(struct soap*, const char*, int, const _tptz__GetNodeResponse *, const char*);
SOAP_FMAC3 _tptz__GetNodeResponse * SOAP_FMAC4 soap_in__tptz__GetNodeResponse(struct soap*, const char*, _tptz__GetNodeResponse *, const char*);
SOAP_FMAC1 _tptz__GetNodeResponse * SOAP_FMAC2 soap_instantiate__tptz__GetNodeResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GetNodeResponse * soap_new__tptz__GetNodeResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GetNodeResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__GetNodeResponse * soap_new_req__tptz__GetNodeResponse(
	struct soap *soap,
	tt__PTZNode *PTZNode)
{
	_tptz__GetNodeResponse *_p = soap_new__tptz__GetNodeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetNodeResponse::PTZNode = PTZNode;
	}
	return _p;
}

inline _tptz__GetNodeResponse * soap_new_set__tptz__GetNodeResponse(
	struct soap *soap,
	tt__PTZNode *PTZNode)
{
	_tptz__GetNodeResponse *_p = soap_new__tptz__GetNodeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetNodeResponse::PTZNode = PTZNode;
	}
	return _p;
}

inline int soap_write__tptz__GetNodeResponse(struct soap *soap, _tptz__GetNodeResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetNodeResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GetNodeResponse * SOAP_FMAC4 soap_get__tptz__GetNodeResponse(struct soap*, _tptz__GetNodeResponse *, const char*, const char*);

inline int soap_read__tptz__GetNodeResponse(struct soap *soap, _tptz__GetNodeResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tptz__GetNodeResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tptz__GetNode_DEFINED
#define SOAP_TYPE__tptz__GetNode_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GetNode(struct soap*, const char*, int, const _tptz__GetNode *, const char*);
SOAP_FMAC3 _tptz__GetNode * SOAP_FMAC4 soap_in__tptz__GetNode(struct soap*, const char*, _tptz__GetNode *, const char*);
SOAP_FMAC1 _tptz__GetNode * SOAP_FMAC2 soap_instantiate__tptz__GetNode(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GetNode * soap_new__tptz__GetNode(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GetNode(soap, n, NULL, NULL, NULL);
}

inline _tptz__GetNode * soap_new_req__tptz__GetNode(
	struct soap *soap,
	const std::string& NodeToken)
{
	_tptz__GetNode *_p = soap_new__tptz__GetNode(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetNode::NodeToken = NodeToken;
	}
	return _p;
}

inline _tptz__GetNode * soap_new_set__tptz__GetNode(
	struct soap *soap,
	const std::string& NodeToken)
{
	_tptz__GetNode *_p = soap_new__tptz__GetNode(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetNode::NodeToken = NodeToken;
	}
	return _p;
}

inline int soap_write__tptz__GetNode(struct soap *soap, _tptz__GetNode const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetNode", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GetNode * SOAP_FMAC4 soap_get__tptz__GetNode(struct soap*, _tptz__GetNode *, const char*, const char*);

inline int soap_read__tptz__GetNode(struct soap *soap, _tptz__GetNode *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tptz__GetNode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tptz__GetNodesResponse_DEFINED
#define SOAP_TYPE__tptz__GetNodesResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GetNodesResponse(struct soap*, const char*, int, const _tptz__GetNodesResponse *, const char*);
SOAP_FMAC3 _tptz__GetNodesResponse * SOAP_FMAC4 soap_in__tptz__GetNodesResponse(struct soap*, const char*, _tptz__GetNodesResponse *, const char*);
SOAP_FMAC1 _tptz__GetNodesResponse * SOAP_FMAC2 soap_instantiate__tptz__GetNodesResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GetNodesResponse * soap_new__tptz__GetNodesResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GetNodesResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__GetNodesResponse * soap_new_req__tptz__GetNodesResponse(
	struct soap *soap)
{
	_tptz__GetNodesResponse *_p = soap_new__tptz__GetNodesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tptz__GetNodesResponse * soap_new_set__tptz__GetNodesResponse(
	struct soap *soap,
	const std::vector<tt__PTZNode *> & PTZNode)
{
	_tptz__GetNodesResponse *_p = soap_new__tptz__GetNodesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetNodesResponse::PTZNode = PTZNode;
	}
	return _p;
}

inline int soap_write__tptz__GetNodesResponse(struct soap *soap, _tptz__GetNodesResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetNodesResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GetNodesResponse * SOAP_FMAC4 soap_get__tptz__GetNodesResponse(struct soap*, _tptz__GetNodesResponse *, const char*, const char*);

inline int soap_read__tptz__GetNodesResponse(struct soap *soap, _tptz__GetNodesResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tptz__GetNodesResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tptz__GetNodes_DEFINED
#define SOAP_TYPE__tptz__GetNodes_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GetNodes(struct soap*, const char*, int, const _tptz__GetNodes *, const char*);
SOAP_FMAC3 _tptz__GetNodes * SOAP_FMAC4 soap_in__tptz__GetNodes(struct soap*, const char*, _tptz__GetNodes *, const char*);
SOAP_FMAC1 _tptz__GetNodes * SOAP_FMAC2 soap_instantiate__tptz__GetNodes(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GetNodes * soap_new__tptz__GetNodes(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GetNodes(soap, n, NULL, NULL, NULL);
}

inline _tptz__GetNodes * soap_new_req__tptz__GetNodes(
	struct soap *soap)
{
	_tptz__GetNodes *_p = soap_new__tptz__GetNodes(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tptz__GetNodes * soap_new_set__tptz__GetNodes(
	struct soap *soap)
{
	_tptz__GetNodes *_p = soap_new__tptz__GetNodes(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tptz__GetNodes(struct soap *soap, _tptz__GetNodes const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetNodes", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GetNodes * SOAP_FMAC4 soap_get__tptz__GetNodes(struct soap*, _tptz__GetNodes *, const char*, const char*);

inline int soap_read__tptz__GetNodes(struct soap *soap, _tptz__GetNodes *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tptz__GetNodes(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tptz__GetServiceCapabilitiesResponse_DEFINED
#define SOAP_TYPE__tptz__GetServiceCapabilitiesResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GetServiceCapabilitiesResponse(struct soap*, const char*, int, const _tptz__GetServiceCapabilitiesResponse *, const char*);
SOAP_FMAC3 _tptz__GetServiceCapabilitiesResponse * SOAP_FMAC4 soap_in__tptz__GetServiceCapabilitiesResponse(struct soap*, const char*, _tptz__GetServiceCapabilitiesResponse *, const char*);
SOAP_FMAC1 _tptz__GetServiceCapabilitiesResponse * SOAP_FMAC2 soap_instantiate__tptz__GetServiceCapabilitiesResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GetServiceCapabilitiesResponse * soap_new__tptz__GetServiceCapabilitiesResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GetServiceCapabilitiesResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__GetServiceCapabilitiesResponse * soap_new_req__tptz__GetServiceCapabilitiesResponse(
	struct soap *soap,
	tptz__Capabilities *Capabilities)
{
	_tptz__GetServiceCapabilitiesResponse *_p = soap_new__tptz__GetServiceCapabilitiesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetServiceCapabilitiesResponse::Capabilities = Capabilities;
	}
	return _p;
}

inline _tptz__GetServiceCapabilitiesResponse * soap_new_set__tptz__GetServiceCapabilitiesResponse(
	struct soap *soap,
	tptz__Capabilities *Capabilities)
{
	_tptz__GetServiceCapabilitiesResponse *_p = soap_new__tptz__GetServiceCapabilitiesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetServiceCapabilitiesResponse::Capabilities = Capabilities;
	}
	return _p;
}

inline int soap_write__tptz__GetServiceCapabilitiesResponse(struct soap *soap, _tptz__GetServiceCapabilitiesResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetServiceCapabilitiesResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GetServiceCapabilitiesResponse * SOAP_FMAC4 soap_get__tptz__GetServiceCapabilitiesResponse(struct soap*, _tptz__GetServiceCapabilitiesResponse *, const char*, const char*);

inline int soap_read__tptz__GetServiceCapabilitiesResponse(struct soap *soap, _tptz__GetServiceCapabilitiesResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tptz__GetServiceCapabilitiesResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tptz__GetServiceCapabilities_DEFINED
#define SOAP_TYPE__tptz__GetServiceCapabilities_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GetServiceCapabilities(struct soap*, const char*, int, const _tptz__GetServiceCapabilities *, const char*);
SOAP_FMAC3 _tptz__GetServiceCapabilities * SOAP_FMAC4 soap_in__tptz__GetServiceCapabilities(struct soap*, const char*, _tptz__GetServiceCapabilities *, const char*);
SOAP_FMAC1 _tptz__GetServiceCapabilities * SOAP_FMAC2 soap_instantiate__tptz__GetServiceCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GetServiceCapabilities * soap_new__tptz__GetServiceCapabilities(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GetServiceCapabilities(soap, n, NULL, NULL, NULL);
}

inline _tptz__GetServiceCapabilities * soap_new_req__tptz__GetServiceCapabilities(
	struct soap *soap)
{
	_tptz__GetServiceCapabilities *_p = soap_new__tptz__GetServiceCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tptz__GetServiceCapabilities * soap_new_set__tptz__GetServiceCapabilities(
	struct soap *soap)
{
	_tptz__GetServiceCapabilities *_p = soap_new__tptz__GetServiceCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tptz__GetServiceCapabilities(struct soap *soap, _tptz__GetServiceCapabilities const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetServiceCapabilities", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GetServiceCapabilities * SOAP_FMAC4 soap_get__tptz__GetServiceCapabilities(struct soap*, _tptz__GetServiceCapabilities *, const char*, const char*);

inline int soap_read__tptz__GetServiceCapabilities(struct soap *soap, _tptz__GetServiceCapabilities *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tptz__GetServiceCapabilities(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tptz__Capabilities_DEFINED
#define SOAP_TYPE_tptz__Capabilities_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tptz__Capabilities(struct soap*, const char*, int, const tptz__Capabilities *, const char*);
SOAP_FMAC3 tptz__Capabilities * SOAP_FMAC4 soap_in_tptz__Capabilities(struct soap*, const char*, tptz__Capabilities *, const char*);
SOAP_FMAC1 tptz__Capabilities * SOAP_FMAC2 soap_instantiate_tptz__Capabilities(struct soap*, int, const char*, const char*, size_t*);

inline tptz__Capabilities * soap_new_tptz__Capabilities(struct soap *soap, int n = -1)
{
	return soap_instantiate_tptz__Capabilities(soap, n, NULL, NULL, NULL);
}

inline tptz__Capabilities * soap_new_req_tptz__Capabilities(
	struct soap *soap)
{
	tptz__Capabilities *_p = soap_new_tptz__Capabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tptz__Capabilities * soap_new_set_tptz__Capabilities(
	struct soap *soap,
	const std::vector<char *> & __any,
	bool *EFlip,
	bool *Reverse,
	bool *GetCompatibleConfigurations,
	bool *MoveStatus,
	bool *StatusPosition,
	char *__anyAttribute,
	char *__item1)
{
	tptz__Capabilities *_p = soap_new_tptz__Capabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tptz__Capabilities::__any = __any;
		_p->tptz__Capabilities::EFlip = EFlip;
		_p->tptz__Capabilities::Reverse = Reverse;
		_p->tptz__Capabilities::GetCompatibleConfigurations = GetCompatibleConfigurations;
		_p->tptz__Capabilities::MoveStatus = MoveStatus;
		_p->tptz__Capabilities::StatusPosition = StatusPosition;
		_p->tptz__Capabilities::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tptz__Capabilities(struct soap *soap, tptz__Capabilities const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:Capabilities", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tptz__Capabilities * SOAP_FMAC4 soap_get_tptz__Capabilities(struct soap*, tptz__Capabilities *, const char*, const char*);

inline int soap_read_tptz__Capabilities(struct soap *soap, tptz__Capabilities *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tptz__Capabilities(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__DeleteOSDResponse_DEFINED
#define SOAP_TYPE__trt__DeleteOSDResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__DeleteOSDResponse(struct soap*, const char*, int, const _trt__DeleteOSDResponse *, const char*);
SOAP_FMAC3 _trt__DeleteOSDResponse * SOAP_FMAC4 soap_in__trt__DeleteOSDResponse(struct soap*, const char*, _trt__DeleteOSDResponse *, const char*);
SOAP_FMAC1 _trt__DeleteOSDResponse * SOAP_FMAC2 soap_instantiate__trt__DeleteOSDResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__DeleteOSDResponse * soap_new__trt__DeleteOSDResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__DeleteOSDResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__DeleteOSDResponse * soap_new_req__trt__DeleteOSDResponse(
	struct soap *soap)
{
	_trt__DeleteOSDResponse *_p = soap_new__trt__DeleteOSDResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__DeleteOSDResponse * soap_new_set__trt__DeleteOSDResponse(
	struct soap *soap,
	const std::vector<char *> & __any)
{
	_trt__DeleteOSDResponse *_p = soap_new__trt__DeleteOSDResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__DeleteOSDResponse::__any = __any;
	}
	return _p;
}

inline int soap_write__trt__DeleteOSDResponse(struct soap *soap, _trt__DeleteOSDResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:DeleteOSDResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__DeleteOSDResponse * SOAP_FMAC4 soap_get__trt__DeleteOSDResponse(struct soap*, _trt__DeleteOSDResponse *, const char*, const char*);

inline int soap_read__trt__DeleteOSDResponse(struct soap *soap, _trt__DeleteOSDResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__DeleteOSDResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__DeleteOSD_DEFINED
#define SOAP_TYPE__trt__DeleteOSD_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__DeleteOSD(struct soap*, const char*, int, const _trt__DeleteOSD *, const char*);
SOAP_FMAC3 _trt__DeleteOSD * SOAP_FMAC4 soap_in__trt__DeleteOSD(struct soap*, const char*, _trt__DeleteOSD *, const char*);
SOAP_FMAC1 _trt__DeleteOSD * SOAP_FMAC2 soap_instantiate__trt__DeleteOSD(struct soap*, int, const char*, const char*, size_t*);

inline _trt__DeleteOSD * soap_new__trt__DeleteOSD(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__DeleteOSD(soap, n, NULL, NULL, NULL);
}

inline _trt__DeleteOSD * soap_new_req__trt__DeleteOSD(
	struct soap *soap,
	const std::string& OSDToken)
{
	_trt__DeleteOSD *_p = soap_new__trt__DeleteOSD(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__DeleteOSD::OSDToken = OSDToken;
	}
	return _p;
}

inline _trt__DeleteOSD * soap_new_set__trt__DeleteOSD(
	struct soap *soap,
	const std::string& OSDToken,
	const std::vector<char *> & __any)
{
	_trt__DeleteOSD *_p = soap_new__trt__DeleteOSD(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__DeleteOSD::OSDToken = OSDToken;
		_p->_trt__DeleteOSD::__any = __any;
	}
	return _p;
}

inline int soap_write__trt__DeleteOSD(struct soap *soap, _trt__DeleteOSD const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:DeleteOSD", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__DeleteOSD * SOAP_FMAC4 soap_get__trt__DeleteOSD(struct soap*, _trt__DeleteOSD *, const char*, const char*);

inline int soap_read__trt__DeleteOSD(struct soap *soap, _trt__DeleteOSD *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__DeleteOSD(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__CreateOSDResponse_DEFINED
#define SOAP_TYPE__trt__CreateOSDResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__CreateOSDResponse(struct soap*, const char*, int, const _trt__CreateOSDResponse *, const char*);
SOAP_FMAC3 _trt__CreateOSDResponse * SOAP_FMAC4 soap_in__trt__CreateOSDResponse(struct soap*, const char*, _trt__CreateOSDResponse *, const char*);
SOAP_FMAC1 _trt__CreateOSDResponse * SOAP_FMAC2 soap_instantiate__trt__CreateOSDResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__CreateOSDResponse * soap_new__trt__CreateOSDResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__CreateOSDResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__CreateOSDResponse * soap_new_req__trt__CreateOSDResponse(
	struct soap *soap,
	const std::string& OSDToken)
{
	_trt__CreateOSDResponse *_p = soap_new__trt__CreateOSDResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__CreateOSDResponse::OSDToken = OSDToken;
	}
	return _p;
}

inline _trt__CreateOSDResponse * soap_new_set__trt__CreateOSDResponse(
	struct soap *soap,
	const std::string& OSDToken,
	const std::vector<char *> & __any)
{
	_trt__CreateOSDResponse *_p = soap_new__trt__CreateOSDResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__CreateOSDResponse::OSDToken = OSDToken;
		_p->_trt__CreateOSDResponse::__any = __any;
	}
	return _p;
}

inline int soap_write__trt__CreateOSDResponse(struct soap *soap, _trt__CreateOSDResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:CreateOSDResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__CreateOSDResponse * SOAP_FMAC4 soap_get__trt__CreateOSDResponse(struct soap*, _trt__CreateOSDResponse *, const char*, const char*);

inline int soap_read__trt__CreateOSDResponse(struct soap *soap, _trt__CreateOSDResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__CreateOSDResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__CreateOSD_DEFINED
#define SOAP_TYPE__trt__CreateOSD_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__CreateOSD(struct soap*, const char*, int, const _trt__CreateOSD *, const char*);
SOAP_FMAC3 _trt__CreateOSD * SOAP_FMAC4 soap_in__trt__CreateOSD(struct soap*, const char*, _trt__CreateOSD *, const char*);
SOAP_FMAC1 _trt__CreateOSD * SOAP_FMAC2 soap_instantiate__trt__CreateOSD(struct soap*, int, const char*, const char*, size_t*);

inline _trt__CreateOSD * soap_new__trt__CreateOSD(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__CreateOSD(soap, n, NULL, NULL, NULL);
}

inline _trt__CreateOSD * soap_new_req__trt__CreateOSD(
	struct soap *soap,
	tt__OSDConfiguration *OSD)
{
	_trt__CreateOSD *_p = soap_new__trt__CreateOSD(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__CreateOSD::OSD = OSD;
	}
	return _p;
}

inline _trt__CreateOSD * soap_new_set__trt__CreateOSD(
	struct soap *soap,
	tt__OSDConfiguration *OSD,
	const std::vector<char *> & __any)
{
	_trt__CreateOSD *_p = soap_new__trt__CreateOSD(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__CreateOSD::OSD = OSD;
		_p->_trt__CreateOSD::__any = __any;
	}
	return _p;
}

inline int soap_write__trt__CreateOSD(struct soap *soap, _trt__CreateOSD const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:CreateOSD", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__CreateOSD * SOAP_FMAC4 soap_get__trt__CreateOSD(struct soap*, _trt__CreateOSD *, const char*, const char*);

inline int soap_read__trt__CreateOSD(struct soap *soap, _trt__CreateOSD *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__CreateOSD(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__GetOSDOptionsResponse_DEFINED
#define SOAP_TYPE__trt__GetOSDOptionsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetOSDOptionsResponse(struct soap*, const char*, int, const _trt__GetOSDOptionsResponse *, const char*);
SOAP_FMAC3 _trt__GetOSDOptionsResponse * SOAP_FMAC4 soap_in__trt__GetOSDOptionsResponse(struct soap*, const char*, _trt__GetOSDOptionsResponse *, const char*);
SOAP_FMAC1 _trt__GetOSDOptionsResponse * SOAP_FMAC2 soap_instantiate__trt__GetOSDOptionsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetOSDOptionsResponse * soap_new__trt__GetOSDOptionsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetOSDOptionsResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__GetOSDOptionsResponse * soap_new_req__trt__GetOSDOptionsResponse(
	struct soap *soap,
	tt__OSDConfigurationOptions *OSDOptions)
{
	_trt__GetOSDOptionsResponse *_p = soap_new__trt__GetOSDOptionsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetOSDOptionsResponse::OSDOptions = OSDOptions;
	}
	return _p;
}

inline _trt__GetOSDOptionsResponse * soap_new_set__trt__GetOSDOptionsResponse(
	struct soap *soap,
	tt__OSDConfigurationOptions *OSDOptions,
	const std::vector<char *> & __any)
{
	_trt__GetOSDOptionsResponse *_p = soap_new__trt__GetOSDOptionsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetOSDOptionsResponse::OSDOptions = OSDOptions;
		_p->_trt__GetOSDOptionsResponse::__any = __any;
	}
	return _p;
}

inline int soap_write__trt__GetOSDOptionsResponse(struct soap *soap, _trt__GetOSDOptionsResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetOSDOptionsResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetOSDOptionsResponse * SOAP_FMAC4 soap_get__trt__GetOSDOptionsResponse(struct soap*, _trt__GetOSDOptionsResponse *, const char*, const char*);

inline int soap_read__trt__GetOSDOptionsResponse(struct soap *soap, _trt__GetOSDOptionsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__GetOSDOptionsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__GetOSDOptions_DEFINED
#define SOAP_TYPE__trt__GetOSDOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetOSDOptions(struct soap*, const char*, int, const _trt__GetOSDOptions *, const char*);
SOAP_FMAC3 _trt__GetOSDOptions * SOAP_FMAC4 soap_in__trt__GetOSDOptions(struct soap*, const char*, _trt__GetOSDOptions *, const char*);
SOAP_FMAC1 _trt__GetOSDOptions * SOAP_FMAC2 soap_instantiate__trt__GetOSDOptions(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetOSDOptions * soap_new__trt__GetOSDOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetOSDOptions(soap, n, NULL, NULL, NULL);
}

inline _trt__GetOSDOptions * soap_new_req__trt__GetOSDOptions(
	struct soap *soap,
	const std::string& ConfigurationToken)
{
	_trt__GetOSDOptions *_p = soap_new__trt__GetOSDOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetOSDOptions::ConfigurationToken = ConfigurationToken;
	}
	return _p;
}

inline _trt__GetOSDOptions * soap_new_set__trt__GetOSDOptions(
	struct soap *soap,
	const std::string& ConfigurationToken,
	const std::vector<char *> & __any)
{
	_trt__GetOSDOptions *_p = soap_new__trt__GetOSDOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetOSDOptions::ConfigurationToken = ConfigurationToken;
		_p->_trt__GetOSDOptions::__any = __any;
	}
	return _p;
}

inline int soap_write__trt__GetOSDOptions(struct soap *soap, _trt__GetOSDOptions const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetOSDOptions", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetOSDOptions * SOAP_FMAC4 soap_get__trt__GetOSDOptions(struct soap*, _trt__GetOSDOptions *, const char*, const char*);

inline int soap_read__trt__GetOSDOptions(struct soap *soap, _trt__GetOSDOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__GetOSDOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__SetOSDResponse_DEFINED
#define SOAP_TYPE__trt__SetOSDResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__SetOSDResponse(struct soap*, const char*, int, const _trt__SetOSDResponse *, const char*);
SOAP_FMAC3 _trt__SetOSDResponse * SOAP_FMAC4 soap_in__trt__SetOSDResponse(struct soap*, const char*, _trt__SetOSDResponse *, const char*);
SOAP_FMAC1 _trt__SetOSDResponse * SOAP_FMAC2 soap_instantiate__trt__SetOSDResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__SetOSDResponse * soap_new__trt__SetOSDResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__SetOSDResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__SetOSDResponse * soap_new_req__trt__SetOSDResponse(
	struct soap *soap)
{
	_trt__SetOSDResponse *_p = soap_new__trt__SetOSDResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__SetOSDResponse * soap_new_set__trt__SetOSDResponse(
	struct soap *soap,
	const std::vector<char *> & __any)
{
	_trt__SetOSDResponse *_p = soap_new__trt__SetOSDResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__SetOSDResponse::__any = __any;
	}
	return _p;
}

inline int soap_write__trt__SetOSDResponse(struct soap *soap, _trt__SetOSDResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetOSDResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__SetOSDResponse * SOAP_FMAC4 soap_get__trt__SetOSDResponse(struct soap*, _trt__SetOSDResponse *, const char*, const char*);

inline int soap_read__trt__SetOSDResponse(struct soap *soap, _trt__SetOSDResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__SetOSDResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__SetOSD_DEFINED
#define SOAP_TYPE__trt__SetOSD_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__SetOSD(struct soap*, const char*, int, const _trt__SetOSD *, const char*);
SOAP_FMAC3 _trt__SetOSD * SOAP_FMAC4 soap_in__trt__SetOSD(struct soap*, const char*, _trt__SetOSD *, const char*);
SOAP_FMAC1 _trt__SetOSD * SOAP_FMAC2 soap_instantiate__trt__SetOSD(struct soap*, int, const char*, const char*, size_t*);

inline _trt__SetOSD * soap_new__trt__SetOSD(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__SetOSD(soap, n, NULL, NULL, NULL);
}

inline _trt__SetOSD * soap_new_req__trt__SetOSD(
	struct soap *soap,
	tt__OSDConfiguration *OSD)
{
	_trt__SetOSD *_p = soap_new__trt__SetOSD(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__SetOSD::OSD = OSD;
	}
	return _p;
}

inline _trt__SetOSD * soap_new_set__trt__SetOSD(
	struct soap *soap,
	tt__OSDConfiguration *OSD,
	const std::vector<char *> & __any)
{
	_trt__SetOSD *_p = soap_new__trt__SetOSD(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__SetOSD::OSD = OSD;
		_p->_trt__SetOSD::__any = __any;
	}
	return _p;
}

inline int soap_write__trt__SetOSD(struct soap *soap, _trt__SetOSD const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetOSD", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__SetOSD * SOAP_FMAC4 soap_get__trt__SetOSD(struct soap*, _trt__SetOSD *, const char*, const char*);

inline int soap_read__trt__SetOSD(struct soap *soap, _trt__SetOSD *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__SetOSD(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__GetOSDResponse_DEFINED
#define SOAP_TYPE__trt__GetOSDResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetOSDResponse(struct soap*, const char*, int, const _trt__GetOSDResponse *, const char*);
SOAP_FMAC3 _trt__GetOSDResponse * SOAP_FMAC4 soap_in__trt__GetOSDResponse(struct soap*, const char*, _trt__GetOSDResponse *, const char*);
SOAP_FMAC1 _trt__GetOSDResponse * SOAP_FMAC2 soap_instantiate__trt__GetOSDResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetOSDResponse * soap_new__trt__GetOSDResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetOSDResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__GetOSDResponse * soap_new_req__trt__GetOSDResponse(
	struct soap *soap,
	tt__OSDConfiguration *OSD)
{
	_trt__GetOSDResponse *_p = soap_new__trt__GetOSDResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetOSDResponse::OSD = OSD;
	}
	return _p;
}

inline _trt__GetOSDResponse * soap_new_set__trt__GetOSDResponse(
	struct soap *soap,
	tt__OSDConfiguration *OSD,
	const std::vector<char *> & __any)
{
	_trt__GetOSDResponse *_p = soap_new__trt__GetOSDResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetOSDResponse::OSD = OSD;
		_p->_trt__GetOSDResponse::__any = __any;
	}
	return _p;
}

inline int soap_write__trt__GetOSDResponse(struct soap *soap, _trt__GetOSDResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetOSDResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetOSDResponse * SOAP_FMAC4 soap_get__trt__GetOSDResponse(struct soap*, _trt__GetOSDResponse *, const char*, const char*);

inline int soap_read__trt__GetOSDResponse(struct soap *soap, _trt__GetOSDResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__GetOSDResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__GetOSD_DEFINED
#define SOAP_TYPE__trt__GetOSD_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetOSD(struct soap*, const char*, int, const _trt__GetOSD *, const char*);
SOAP_FMAC3 _trt__GetOSD * SOAP_FMAC4 soap_in__trt__GetOSD(struct soap*, const char*, _trt__GetOSD *, const char*);
SOAP_FMAC1 _trt__GetOSD * SOAP_FMAC2 soap_instantiate__trt__GetOSD(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetOSD * soap_new__trt__GetOSD(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetOSD(soap, n, NULL, NULL, NULL);
}

inline _trt__GetOSD * soap_new_req__trt__GetOSD(
	struct soap *soap,
	const std::string& OSDToken)
{
	_trt__GetOSD *_p = soap_new__trt__GetOSD(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetOSD::OSDToken = OSDToken;
	}
	return _p;
}

inline _trt__GetOSD * soap_new_set__trt__GetOSD(
	struct soap *soap,
	const std::string& OSDToken,
	const std::vector<char *> & __any)
{
	_trt__GetOSD *_p = soap_new__trt__GetOSD(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetOSD::OSDToken = OSDToken;
		_p->_trt__GetOSD::__any = __any;
	}
	return _p;
}

inline int soap_write__trt__GetOSD(struct soap *soap, _trt__GetOSD const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetOSD", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetOSD * SOAP_FMAC4 soap_get__trt__GetOSD(struct soap*, _trt__GetOSD *, const char*, const char*);

inline int soap_read__trt__GetOSD(struct soap *soap, _trt__GetOSD *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__GetOSD(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__GetOSDsResponse_DEFINED
#define SOAP_TYPE__trt__GetOSDsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetOSDsResponse(struct soap*, const char*, int, const _trt__GetOSDsResponse *, const char*);
SOAP_FMAC3 _trt__GetOSDsResponse * SOAP_FMAC4 soap_in__trt__GetOSDsResponse(struct soap*, const char*, _trt__GetOSDsResponse *, const char*);
SOAP_FMAC1 _trt__GetOSDsResponse * SOAP_FMAC2 soap_instantiate__trt__GetOSDsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetOSDsResponse * soap_new__trt__GetOSDsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetOSDsResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__GetOSDsResponse * soap_new_req__trt__GetOSDsResponse(
	struct soap *soap)
{
	_trt__GetOSDsResponse *_p = soap_new__trt__GetOSDsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__GetOSDsResponse * soap_new_set__trt__GetOSDsResponse(
	struct soap *soap,
	const std::vector<tt__OSDConfiguration *> & OSDs)
{
	_trt__GetOSDsResponse *_p = soap_new__trt__GetOSDsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetOSDsResponse::OSDs = OSDs;
	}
	return _p;
}

inline int soap_write__trt__GetOSDsResponse(struct soap *soap, _trt__GetOSDsResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetOSDsResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetOSDsResponse * SOAP_FMAC4 soap_get__trt__GetOSDsResponse(struct soap*, _trt__GetOSDsResponse *, const char*, const char*);

inline int soap_read__trt__GetOSDsResponse(struct soap *soap, _trt__GetOSDsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__GetOSDsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__GetOSDs_DEFINED
#define SOAP_TYPE__trt__GetOSDs_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetOSDs(struct soap*, const char*, int, const _trt__GetOSDs *, const char*);
SOAP_FMAC3 _trt__GetOSDs * SOAP_FMAC4 soap_in__trt__GetOSDs(struct soap*, const char*, _trt__GetOSDs *, const char*);
SOAP_FMAC1 _trt__GetOSDs * SOAP_FMAC2 soap_instantiate__trt__GetOSDs(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetOSDs * soap_new__trt__GetOSDs(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetOSDs(soap, n, NULL, NULL, NULL);
}

inline _trt__GetOSDs * soap_new_req__trt__GetOSDs(
	struct soap *soap)
{
	_trt__GetOSDs *_p = soap_new__trt__GetOSDs(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__GetOSDs * soap_new_set__trt__GetOSDs(
	struct soap *soap,
	std::string *ConfigurationToken)
{
	_trt__GetOSDs *_p = soap_new__trt__GetOSDs(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetOSDs::ConfigurationToken = ConfigurationToken;
	}
	return _p;
}

inline int soap_write__trt__GetOSDs(struct soap *soap, _trt__GetOSDs const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetOSDs", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetOSDs * SOAP_FMAC4 soap_get__trt__GetOSDs(struct soap*, _trt__GetOSDs *, const char*, const char*);

inline int soap_read__trt__GetOSDs(struct soap *soap, _trt__GetOSDs *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__GetOSDs(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__SetVideoSourceModeResponse_DEFINED
#define SOAP_TYPE__trt__SetVideoSourceModeResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__SetVideoSourceModeResponse(struct soap*, const char*, int, const _trt__SetVideoSourceModeResponse *, const char*);
SOAP_FMAC3 _trt__SetVideoSourceModeResponse * SOAP_FMAC4 soap_in__trt__SetVideoSourceModeResponse(struct soap*, const char*, _trt__SetVideoSourceModeResponse *, const char*);
SOAP_FMAC1 _trt__SetVideoSourceModeResponse * SOAP_FMAC2 soap_instantiate__trt__SetVideoSourceModeResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__SetVideoSourceModeResponse * soap_new__trt__SetVideoSourceModeResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__SetVideoSourceModeResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__SetVideoSourceModeResponse * soap_new_req__trt__SetVideoSourceModeResponse(
	struct soap *soap,
	bool Reboot)
{
	_trt__SetVideoSourceModeResponse *_p = soap_new__trt__SetVideoSourceModeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__SetVideoSourceModeResponse::Reboot = Reboot;
	}
	return _p;
}

inline _trt__SetVideoSourceModeResponse * soap_new_set__trt__SetVideoSourceModeResponse(
	struct soap *soap,
	bool Reboot)
{
	_trt__SetVideoSourceModeResponse *_p = soap_new__trt__SetVideoSourceModeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__SetVideoSourceModeResponse::Reboot = Reboot;
	}
	return _p;
}

inline int soap_write__trt__SetVideoSourceModeResponse(struct soap *soap, _trt__SetVideoSourceModeResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetVideoSourceModeResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__SetVideoSourceModeResponse * SOAP_FMAC4 soap_get__trt__SetVideoSourceModeResponse(struct soap*, _trt__SetVideoSourceModeResponse *, const char*, const char*);

inline int soap_read__trt__SetVideoSourceModeResponse(struct soap *soap, _trt__SetVideoSourceModeResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__SetVideoSourceModeResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__SetVideoSourceMode_DEFINED
#define SOAP_TYPE__trt__SetVideoSourceMode_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__SetVideoSourceMode(struct soap*, const char*, int, const _trt__SetVideoSourceMode *, const char*);
SOAP_FMAC3 _trt__SetVideoSourceMode * SOAP_FMAC4 soap_in__trt__SetVideoSourceMode(struct soap*, const char*, _trt__SetVideoSourceMode *, const char*);
SOAP_FMAC1 _trt__SetVideoSourceMode * SOAP_FMAC2 soap_instantiate__trt__SetVideoSourceMode(struct soap*, int, const char*, const char*, size_t*);

inline _trt__SetVideoSourceMode * soap_new__trt__SetVideoSourceMode(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__SetVideoSourceMode(soap, n, NULL, NULL, NULL);
}

inline _trt__SetVideoSourceMode * soap_new_req__trt__SetVideoSourceMode(
	struct soap *soap,
	const std::string& VideoSourceToken,
	const std::string& VideoSourceModeToken)
{
	_trt__SetVideoSourceMode *_p = soap_new__trt__SetVideoSourceMode(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__SetVideoSourceMode::VideoSourceToken = VideoSourceToken;
		_p->_trt__SetVideoSourceMode::VideoSourceModeToken = VideoSourceModeToken;
	}
	return _p;
}

inline _trt__SetVideoSourceMode * soap_new_set__trt__SetVideoSourceMode(
	struct soap *soap,
	const std::string& VideoSourceToken,
	const std::string& VideoSourceModeToken)
{
	_trt__SetVideoSourceMode *_p = soap_new__trt__SetVideoSourceMode(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__SetVideoSourceMode::VideoSourceToken = VideoSourceToken;
		_p->_trt__SetVideoSourceMode::VideoSourceModeToken = VideoSourceModeToken;
	}
	return _p;
}

inline int soap_write__trt__SetVideoSourceMode(struct soap *soap, _trt__SetVideoSourceMode const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetVideoSourceMode", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__SetVideoSourceMode * SOAP_FMAC4 soap_get__trt__SetVideoSourceMode(struct soap*, _trt__SetVideoSourceMode *, const char*, const char*);

inline int soap_read__trt__SetVideoSourceMode(struct soap *soap, _trt__SetVideoSourceMode *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__SetVideoSourceMode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__GetVideoSourceModesResponse_DEFINED
#define SOAP_TYPE__trt__GetVideoSourceModesResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetVideoSourceModesResponse(struct soap*, const char*, int, const _trt__GetVideoSourceModesResponse *, const char*);
SOAP_FMAC3 _trt__GetVideoSourceModesResponse * SOAP_FMAC4 soap_in__trt__GetVideoSourceModesResponse(struct soap*, const char*, _trt__GetVideoSourceModesResponse *, const char*);
SOAP_FMAC1 _trt__GetVideoSourceModesResponse * SOAP_FMAC2 soap_instantiate__trt__GetVideoSourceModesResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetVideoSourceModesResponse * soap_new__trt__GetVideoSourceModesResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetVideoSourceModesResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__GetVideoSourceModesResponse * soap_new_req__trt__GetVideoSourceModesResponse(
	struct soap *soap,
	const std::vector<trt__VideoSourceMode *> & VideoSourceModes)
{
	_trt__GetVideoSourceModesResponse *_p = soap_new__trt__GetVideoSourceModesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetVideoSourceModesResponse::VideoSourceModes = VideoSourceModes;
	}
	return _p;
}

inline _trt__GetVideoSourceModesResponse * soap_new_set__trt__GetVideoSourceModesResponse(
	struct soap *soap,
	const std::vector<trt__VideoSourceMode *> & VideoSourceModes)
{
	_trt__GetVideoSourceModesResponse *_p = soap_new__trt__GetVideoSourceModesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetVideoSourceModesResponse::VideoSourceModes = VideoSourceModes;
	}
	return _p;
}

inline int soap_write__trt__GetVideoSourceModesResponse(struct soap *soap, _trt__GetVideoSourceModesResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetVideoSourceModesResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetVideoSourceModesResponse * SOAP_FMAC4 soap_get__trt__GetVideoSourceModesResponse(struct soap*, _trt__GetVideoSourceModesResponse *, const char*, const char*);

inline int soap_read__trt__GetVideoSourceModesResponse(struct soap *soap, _trt__GetVideoSourceModesResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__GetVideoSourceModesResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__GetVideoSourceModes_DEFINED
#define SOAP_TYPE__trt__GetVideoSourceModes_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetVideoSourceModes(struct soap*, const char*, int, const _trt__GetVideoSourceModes *, const char*);
SOAP_FMAC3 _trt__GetVideoSourceModes * SOAP_FMAC4 soap_in__trt__GetVideoSourceModes(struct soap*, const char*, _trt__GetVideoSourceModes *, const char*);
SOAP_FMAC1 _trt__GetVideoSourceModes * SOAP_FMAC2 soap_instantiate__trt__GetVideoSourceModes(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetVideoSourceModes * soap_new__trt__GetVideoSourceModes(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetVideoSourceModes(soap, n, NULL, NULL, NULL);
}

inline _trt__GetVideoSourceModes * soap_new_req__trt__GetVideoSourceModes(
	struct soap *soap,
	const std::string& VideoSourceToken)
{
	_trt__GetVideoSourceModes *_p = soap_new__trt__GetVideoSourceModes(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetVideoSourceModes::VideoSourceToken = VideoSourceToken;
	}
	return _p;
}

inline _trt__GetVideoSourceModes * soap_new_set__trt__GetVideoSourceModes(
	struct soap *soap,
	const std::string& VideoSourceToken)
{
	_trt__GetVideoSourceModes *_p = soap_new__trt__GetVideoSourceModes(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetVideoSourceModes::VideoSourceToken = VideoSourceToken;
	}
	return _p;
}

inline int soap_write__trt__GetVideoSourceModes(struct soap *soap, _trt__GetVideoSourceModes const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetVideoSourceModes", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetVideoSourceModes * SOAP_FMAC4 soap_get__trt__GetVideoSourceModes(struct soap*, _trt__GetVideoSourceModes *, const char*, const char*);

inline int soap_read__trt__GetVideoSourceModes(struct soap *soap, _trt__GetVideoSourceModes *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__GetVideoSourceModes(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__GetSnapshotUriResponse_DEFINED
#define SOAP_TYPE__trt__GetSnapshotUriResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetSnapshotUriResponse(struct soap*, const char*, int, const _trt__GetSnapshotUriResponse *, const char*);
SOAP_FMAC3 _trt__GetSnapshotUriResponse * SOAP_FMAC4 soap_in__trt__GetSnapshotUriResponse(struct soap*, const char*, _trt__GetSnapshotUriResponse *, const char*);
SOAP_FMAC1 _trt__GetSnapshotUriResponse * SOAP_FMAC2 soap_instantiate__trt__GetSnapshotUriResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetSnapshotUriResponse * soap_new__trt__GetSnapshotUriResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetSnapshotUriResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__GetSnapshotUriResponse * soap_new_req__trt__GetSnapshotUriResponse(
	struct soap *soap,
	tt__MediaUri *MediaUri)
{
	_trt__GetSnapshotUriResponse *_p = soap_new__trt__GetSnapshotUriResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetSnapshotUriResponse::MediaUri = MediaUri;
	}
	return _p;
}

inline _trt__GetSnapshotUriResponse * soap_new_set__trt__GetSnapshotUriResponse(
	struct soap *soap,
	tt__MediaUri *MediaUri)
{
	_trt__GetSnapshotUriResponse *_p = soap_new__trt__GetSnapshotUriResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetSnapshotUriResponse::MediaUri = MediaUri;
	}
	return _p;
}

inline int soap_write__trt__GetSnapshotUriResponse(struct soap *soap, _trt__GetSnapshotUriResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetSnapshotUriResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetSnapshotUriResponse * SOAP_FMAC4 soap_get__trt__GetSnapshotUriResponse(struct soap*, _trt__GetSnapshotUriResponse *, const char*, const char*);

inline int soap_read__trt__GetSnapshotUriResponse(struct soap *soap, _trt__GetSnapshotUriResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__GetSnapshotUriResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__GetSnapshotUri_DEFINED
#define SOAP_TYPE__trt__GetSnapshotUri_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetSnapshotUri(struct soap*, const char*, int, const _trt__GetSnapshotUri *, const char*);
SOAP_FMAC3 _trt__GetSnapshotUri * SOAP_FMAC4 soap_in__trt__GetSnapshotUri(struct soap*, const char*, _trt__GetSnapshotUri *, const char*);
SOAP_FMAC1 _trt__GetSnapshotUri * SOAP_FMAC2 soap_instantiate__trt__GetSnapshotUri(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetSnapshotUri * soap_new__trt__GetSnapshotUri(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetSnapshotUri(soap, n, NULL, NULL, NULL);
}

inline _trt__GetSnapshotUri * soap_new_req__trt__GetSnapshotUri(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_trt__GetSnapshotUri *_p = soap_new__trt__GetSnapshotUri(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetSnapshotUri::ProfileToken = ProfileToken;
	}
	return _p;
}

inline _trt__GetSnapshotUri * soap_new_set__trt__GetSnapshotUri(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_trt__GetSnapshotUri *_p = soap_new__trt__GetSnapshotUri(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetSnapshotUri::ProfileToken = ProfileToken;
	}
	return _p;
}

inline int soap_write__trt__GetSnapshotUri(struct soap *soap, _trt__GetSnapshotUri const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetSnapshotUri", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetSnapshotUri * SOAP_FMAC4 soap_get__trt__GetSnapshotUri(struct soap*, _trt__GetSnapshotUri *, const char*, const char*);

inline int soap_read__trt__GetSnapshotUri(struct soap *soap, _trt__GetSnapshotUri *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__GetSnapshotUri(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__SetSynchronizationPointResponse_DEFINED
#define SOAP_TYPE__trt__SetSynchronizationPointResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__SetSynchronizationPointResponse(struct soap*, const char*, int, const _trt__SetSynchronizationPointResponse *, const char*);
SOAP_FMAC3 _trt__SetSynchronizationPointResponse * SOAP_FMAC4 soap_in__trt__SetSynchronizationPointResponse(struct soap*, const char*, _trt__SetSynchronizationPointResponse *, const char*);
SOAP_FMAC1 _trt__SetSynchronizationPointResponse * SOAP_FMAC2 soap_instantiate__trt__SetSynchronizationPointResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__SetSynchronizationPointResponse * soap_new__trt__SetSynchronizationPointResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__SetSynchronizationPointResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__SetSynchronizationPointResponse * soap_new_req__trt__SetSynchronizationPointResponse(
	struct soap *soap)
{
	_trt__SetSynchronizationPointResponse *_p = soap_new__trt__SetSynchronizationPointResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__SetSynchronizationPointResponse * soap_new_set__trt__SetSynchronizationPointResponse(
	struct soap *soap)
{
	_trt__SetSynchronizationPointResponse *_p = soap_new__trt__SetSynchronizationPointResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__trt__SetSynchronizationPointResponse(struct soap *soap, _trt__SetSynchronizationPointResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetSynchronizationPointResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__SetSynchronizationPointResponse * SOAP_FMAC4 soap_get__trt__SetSynchronizationPointResponse(struct soap*, _trt__SetSynchronizationPointResponse *, const char*, const char*);

inline int soap_read__trt__SetSynchronizationPointResponse(struct soap *soap, _trt__SetSynchronizationPointResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__SetSynchronizationPointResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__SetSynchronizationPoint_DEFINED
#define SOAP_TYPE__trt__SetSynchronizationPoint_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__SetSynchronizationPoint(struct soap*, const char*, int, const _trt__SetSynchronizationPoint *, const char*);
SOAP_FMAC3 _trt__SetSynchronizationPoint * SOAP_FMAC4 soap_in__trt__SetSynchronizationPoint(struct soap*, const char*, _trt__SetSynchronizationPoint *, const char*);
SOAP_FMAC1 _trt__SetSynchronizationPoint * SOAP_FMAC2 soap_instantiate__trt__SetSynchronizationPoint(struct soap*, int, const char*, const char*, size_t*);

inline _trt__SetSynchronizationPoint * soap_new__trt__SetSynchronizationPoint(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__SetSynchronizationPoint(soap, n, NULL, NULL, NULL);
}

inline _trt__SetSynchronizationPoint * soap_new_req__trt__SetSynchronizationPoint(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_trt__SetSynchronizationPoint *_p = soap_new__trt__SetSynchronizationPoint(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__SetSynchronizationPoint::ProfileToken = ProfileToken;
	}
	return _p;
}

inline _trt__SetSynchronizationPoint * soap_new_set__trt__SetSynchronizationPoint(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_trt__SetSynchronizationPoint *_p = soap_new__trt__SetSynchronizationPoint(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__SetSynchronizationPoint::ProfileToken = ProfileToken;
	}
	return _p;
}

inline int soap_write__trt__SetSynchronizationPoint(struct soap *soap, _trt__SetSynchronizationPoint const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetSynchronizationPoint", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__SetSynchronizationPoint * SOAP_FMAC4 soap_get__trt__SetSynchronizationPoint(struct soap*, _trt__SetSynchronizationPoint *, const char*, const char*);

inline int soap_read__trt__SetSynchronizationPoint(struct soap *soap, _trt__SetSynchronizationPoint *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__SetSynchronizationPoint(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__StopMulticastStreamingResponse_DEFINED
#define SOAP_TYPE__trt__StopMulticastStreamingResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__StopMulticastStreamingResponse(struct soap*, const char*, int, const _trt__StopMulticastStreamingResponse *, const char*);
SOAP_FMAC3 _trt__StopMulticastStreamingResponse * SOAP_FMAC4 soap_in__trt__StopMulticastStreamingResponse(struct soap*, const char*, _trt__StopMulticastStreamingResponse *, const char*);
SOAP_FMAC1 _trt__StopMulticastStreamingResponse * SOAP_FMAC2 soap_instantiate__trt__StopMulticastStreamingResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__StopMulticastStreamingResponse * soap_new__trt__StopMulticastStreamingResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__StopMulticastStreamingResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__StopMulticastStreamingResponse * soap_new_req__trt__StopMulticastStreamingResponse(
	struct soap *soap)
{
	_trt__StopMulticastStreamingResponse *_p = soap_new__trt__StopMulticastStreamingResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__StopMulticastStreamingResponse * soap_new_set__trt__StopMulticastStreamingResponse(
	struct soap *soap)
{
	_trt__StopMulticastStreamingResponse *_p = soap_new__trt__StopMulticastStreamingResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__trt__StopMulticastStreamingResponse(struct soap *soap, _trt__StopMulticastStreamingResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:StopMulticastStreamingResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__StopMulticastStreamingResponse * SOAP_FMAC4 soap_get__trt__StopMulticastStreamingResponse(struct soap*, _trt__StopMulticastStreamingResponse *, const char*, const char*);

inline int soap_read__trt__StopMulticastStreamingResponse(struct soap *soap, _trt__StopMulticastStreamingResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__StopMulticastStreamingResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__StopMulticastStreaming_DEFINED
#define SOAP_TYPE__trt__StopMulticastStreaming_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__StopMulticastStreaming(struct soap*, const char*, int, const _trt__StopMulticastStreaming *, const char*);
SOAP_FMAC3 _trt__StopMulticastStreaming * SOAP_FMAC4 soap_in__trt__StopMulticastStreaming(struct soap*, const char*, _trt__StopMulticastStreaming *, const char*);
SOAP_FMAC1 _trt__StopMulticastStreaming * SOAP_FMAC2 soap_instantiate__trt__StopMulticastStreaming(struct soap*, int, const char*, const char*, size_t*);

inline _trt__StopMulticastStreaming * soap_new__trt__StopMulticastStreaming(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__StopMulticastStreaming(soap, n, NULL, NULL, NULL);
}

inline _trt__StopMulticastStreaming * soap_new_req__trt__StopMulticastStreaming(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_trt__StopMulticastStreaming *_p = soap_new__trt__StopMulticastStreaming(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__StopMulticastStreaming::ProfileToken = ProfileToken;
	}
	return _p;
}

inline _trt__StopMulticastStreaming * soap_new_set__trt__StopMulticastStreaming(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_trt__StopMulticastStreaming *_p = soap_new__trt__StopMulticastStreaming(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__StopMulticastStreaming::ProfileToken = ProfileToken;
	}
	return _p;
}

inline int soap_write__trt__StopMulticastStreaming(struct soap *soap, _trt__StopMulticastStreaming const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:StopMulticastStreaming", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__StopMulticastStreaming * SOAP_FMAC4 soap_get__trt__StopMulticastStreaming(struct soap*, _trt__StopMulticastStreaming *, const char*, const char*);

inline int soap_read__trt__StopMulticastStreaming(struct soap *soap, _trt__StopMulticastStreaming *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__StopMulticastStreaming(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__StartMulticastStreamingResponse_DEFINED
#define SOAP_TYPE__trt__StartMulticastStreamingResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__StartMulticastStreamingResponse(struct soap*, const char*, int, const _trt__StartMulticastStreamingResponse *, const char*);
SOAP_FMAC3 _trt__StartMulticastStreamingResponse * SOAP_FMAC4 soap_in__trt__StartMulticastStreamingResponse(struct soap*, const char*, _trt__StartMulticastStreamingResponse *, const char*);
SOAP_FMAC1 _trt__StartMulticastStreamingResponse * SOAP_FMAC2 soap_instantiate__trt__StartMulticastStreamingResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__StartMulticastStreamingResponse * soap_new__trt__StartMulticastStreamingResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__StartMulticastStreamingResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__StartMulticastStreamingResponse * soap_new_req__trt__StartMulticastStreamingResponse(
	struct soap *soap)
{
	_trt__StartMulticastStreamingResponse *_p = soap_new__trt__StartMulticastStreamingResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__StartMulticastStreamingResponse * soap_new_set__trt__StartMulticastStreamingResponse(
	struct soap *soap)
{
	_trt__StartMulticastStreamingResponse *_p = soap_new__trt__StartMulticastStreamingResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__trt__StartMulticastStreamingResponse(struct soap *soap, _trt__StartMulticastStreamingResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:StartMulticastStreamingResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__StartMulticastStreamingResponse * SOAP_FMAC4 soap_get__trt__StartMulticastStreamingResponse(struct soap*, _trt__StartMulticastStreamingResponse *, const char*, const char*);

inline int soap_read__trt__StartMulticastStreamingResponse(struct soap *soap, _trt__StartMulticastStreamingResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__StartMulticastStreamingResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__StartMulticastStreaming_DEFINED
#define SOAP_TYPE__trt__StartMulticastStreaming_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__StartMulticastStreaming(struct soap*, const char*, int, const _trt__StartMulticastStreaming *, const char*);
SOAP_FMAC3 _trt__StartMulticastStreaming * SOAP_FMAC4 soap_in__trt__StartMulticastStreaming(struct soap*, const char*, _trt__StartMulticastStreaming *, const char*);
SOAP_FMAC1 _trt__StartMulticastStreaming * SOAP_FMAC2 soap_instantiate__trt__StartMulticastStreaming(struct soap*, int, const char*, const char*, size_t*);

inline _trt__StartMulticastStreaming * soap_new__trt__StartMulticastStreaming(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__StartMulticastStreaming(soap, n, NULL, NULL, NULL);
}

inline _trt__StartMulticastStreaming * soap_new_req__trt__StartMulticastStreaming(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_trt__StartMulticastStreaming *_p = soap_new__trt__StartMulticastStreaming(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__StartMulticastStreaming::ProfileToken = ProfileToken;
	}
	return _p;
}

inline _trt__StartMulticastStreaming * soap_new_set__trt__StartMulticastStreaming(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_trt__StartMulticastStreaming *_p = soap_new__trt__StartMulticastStreaming(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__StartMulticastStreaming::ProfileToken = ProfileToken;
	}
	return _p;
}

inline int soap_write__trt__StartMulticastStreaming(struct soap *soap, _trt__StartMulticastStreaming const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:StartMulticastStreaming", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__StartMulticastStreaming * SOAP_FMAC4 soap_get__trt__StartMulticastStreaming(struct soap*, _trt__StartMulticastStreaming *, const char*, const char*);

inline int soap_read__trt__StartMulticastStreaming(struct soap *soap, _trt__StartMulticastStreaming *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__StartMulticastStreaming(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__GetStreamUriResponse_DEFINED
#define SOAP_TYPE__trt__GetStreamUriResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetStreamUriResponse(struct soap*, const char*, int, const _trt__GetStreamUriResponse *, const char*);
SOAP_FMAC3 _trt__GetStreamUriResponse * SOAP_FMAC4 soap_in__trt__GetStreamUriResponse(struct soap*, const char*, _trt__GetStreamUriResponse *, const char*);
SOAP_FMAC1 _trt__GetStreamUriResponse * SOAP_FMAC2 soap_instantiate__trt__GetStreamUriResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetStreamUriResponse * soap_new__trt__GetStreamUriResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetStreamUriResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__GetStreamUriResponse * soap_new_req__trt__GetStreamUriResponse(
	struct soap *soap,
	tt__MediaUri *MediaUri)
{
	_trt__GetStreamUriResponse *_p = soap_new__trt__GetStreamUriResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetStreamUriResponse::MediaUri = MediaUri;
	}
	return _p;
}

inline _trt__GetStreamUriResponse * soap_new_set__trt__GetStreamUriResponse(
	struct soap *soap,
	tt__MediaUri *MediaUri)
{
	_trt__GetStreamUriResponse *_p = soap_new__trt__GetStreamUriResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetStreamUriResponse::MediaUri = MediaUri;
	}
	return _p;
}

inline int soap_write__trt__GetStreamUriResponse(struct soap *soap, _trt__GetStreamUriResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetStreamUriResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetStreamUriResponse * SOAP_FMAC4 soap_get__trt__GetStreamUriResponse(struct soap*, _trt__GetStreamUriResponse *, const char*, const char*);

inline int soap_read__trt__GetStreamUriResponse(struct soap *soap, _trt__GetStreamUriResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__GetStreamUriResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__GetStreamUri_DEFINED
#define SOAP_TYPE__trt__GetStreamUri_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetStreamUri(struct soap*, const char*, int, const _trt__GetStreamUri *, const char*);
SOAP_FMAC3 _trt__GetStreamUri * SOAP_FMAC4 soap_in__trt__GetStreamUri(struct soap*, const char*, _trt__GetStreamUri *, const char*);
SOAP_FMAC1 _trt__GetStreamUri * SOAP_FMAC2 soap_instantiate__trt__GetStreamUri(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetStreamUri * soap_new__trt__GetStreamUri(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetStreamUri(soap, n, NULL, NULL, NULL);
}

inline _trt__GetStreamUri * soap_new_req__trt__GetStreamUri(
	struct soap *soap,
	tt__StreamSetup *StreamSetup,
	const std::string& ProfileToken)
{
	_trt__GetStreamUri *_p = soap_new__trt__GetStreamUri(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetStreamUri::StreamSetup = StreamSetup;
		_p->_trt__GetStreamUri::ProfileToken = ProfileToken;
	}
	return _p;
}

inline _trt__GetStreamUri * soap_new_set__trt__GetStreamUri(
	struct soap *soap,
	tt__StreamSetup *StreamSetup,
	const std::string& ProfileToken)
{
	_trt__GetStreamUri *_p = soap_new__trt__GetStreamUri(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetStreamUri::StreamSetup = StreamSetup;
		_p->_trt__GetStreamUri::ProfileToken = ProfileToken;
	}
	return _p;
}

inline int soap_write__trt__GetStreamUri(struct soap *soap, _trt__GetStreamUri const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetStreamUri", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetStreamUri * SOAP_FMAC4 soap_get__trt__GetStreamUri(struct soap*, _trt__GetStreamUri *, const char*, const char*);

inline int soap_read__trt__GetStreamUri(struct soap *soap, _trt__GetStreamUri *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__GetStreamUri(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse_DEFINED
#define SOAP_TYPE__trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse(struct soap*, const char*, int, const _trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse *, const char*);
SOAP_FMAC3 _trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse * SOAP_FMAC4 soap_in__trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse(struct soap*, const char*, _trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse *, const char*);
SOAP_FMAC1 _trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse * SOAP_FMAC2 soap_instantiate__trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse * soap_new__trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse * soap_new_req__trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse(
	struct soap *soap,
	int TotalNumber)
{
	_trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse *_p = soap_new__trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse::TotalNumber = TotalNumber;
	}
	return _p;
}

inline _trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse * soap_new_set__trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse(
	struct soap *soap,
	int TotalNumber,
	int *JPEG,
	int *H264,
	int *MPEG4)
{
	_trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse *_p = soap_new__trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse::TotalNumber = TotalNumber;
		_p->_trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse::JPEG = JPEG;
		_p->_trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse::H264 = H264;
		_p->_trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse::MPEG4 = MPEG4;
	}
	return _p;
}

inline int soap_write__trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse(struct soap *soap, _trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetGuaranteedNumberOfVideoEncoderInstancesResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse * SOAP_FMAC4 soap_get__trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse(struct soap*, _trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse *, const char*, const char*);

inline int soap_read__trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse(struct soap *soap, _trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__GetGuaranteedNumberOfVideoEncoderInstances_DEFINED
#define SOAP_TYPE__trt__GetGuaranteedNumberOfVideoEncoderInstances_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetGuaranteedNumberOfVideoEncoderInstances(struct soap*, const char*, int, const _trt__GetGuaranteedNumberOfVideoEncoderInstances *, const char*);
SOAP_FMAC3 _trt__GetGuaranteedNumberOfVideoEncoderInstances * SOAP_FMAC4 soap_in__trt__GetGuaranteedNumberOfVideoEncoderInstances(struct soap*, const char*, _trt__GetGuaranteedNumberOfVideoEncoderInstances *, const char*);
SOAP_FMAC1 _trt__GetGuaranteedNumberOfVideoEncoderInstances * SOAP_FMAC2 soap_instantiate__trt__GetGuaranteedNumberOfVideoEncoderInstances(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetGuaranteedNumberOfVideoEncoderInstances * soap_new__trt__GetGuaranteedNumberOfVideoEncoderInstances(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetGuaranteedNumberOfVideoEncoderInstances(soap, n, NULL, NULL, NULL);
}

inline _trt__GetGuaranteedNumberOfVideoEncoderInstances * soap_new_req__trt__GetGuaranteedNumberOfVideoEncoderInstances(
	struct soap *soap,
	const std::string& ConfigurationToken)
{
	_trt__GetGuaranteedNumberOfVideoEncoderInstances *_p = soap_new__trt__GetGuaranteedNumberOfVideoEncoderInstances(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetGuaranteedNumberOfVideoEncoderInstances::ConfigurationToken = ConfigurationToken;
	}
	return _p;
}

inline _trt__GetGuaranteedNumberOfVideoEncoderInstances * soap_new_set__trt__GetGuaranteedNumberOfVideoEncoderInstances(
	struct soap *soap,
	const std::string& ConfigurationToken)
{
	_trt__GetGuaranteedNumberOfVideoEncoderInstances *_p = soap_new__trt__GetGuaranteedNumberOfVideoEncoderInstances(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetGuaranteedNumberOfVideoEncoderInstances::ConfigurationToken = ConfigurationToken;
	}
	return _p;
}

inline int soap_write__trt__GetGuaranteedNumberOfVideoEncoderInstances(struct soap *soap, _trt__GetGuaranteedNumberOfVideoEncoderInstances const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetGuaranteedNumberOfVideoEncoderInstances", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetGuaranteedNumberOfVideoEncoderInstances * SOAP_FMAC4 soap_get__trt__GetGuaranteedNumberOfVideoEncoderInstances(struct soap*, _trt__GetGuaranteedNumberOfVideoEncoderInstances *, const char*, const char*);

inline int soap_read__trt__GetGuaranteedNumberOfVideoEncoderInstances(struct soap *soap, _trt__GetGuaranteedNumberOfVideoEncoderInstances *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__GetGuaranteedNumberOfVideoEncoderInstances(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__GetAudioDecoderConfigurationOptionsResponse_DEFINED
#define SOAP_TYPE__trt__GetAudioDecoderConfigurationOptionsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetAudioDecoderConfigurationOptionsResponse(struct soap*, const char*, int, const _trt__GetAudioDecoderConfigurationOptionsResponse *, const char*);
SOAP_FMAC3 _trt__GetAudioDecoderConfigurationOptionsResponse * SOAP_FMAC4 soap_in__trt__GetAudioDecoderConfigurationOptionsResponse(struct soap*, const char*, _trt__GetAudioDecoderConfigurationOptionsResponse *, const char*);
SOAP_FMAC1 _trt__GetAudioDecoderConfigurationOptionsResponse * SOAP_FMAC2 soap_instantiate__trt__GetAudioDecoderConfigurationOptionsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetAudioDecoderConfigurationOptionsResponse * soap_new__trt__GetAudioDecoderConfigurationOptionsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetAudioDecoderConfigurationOptionsResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__GetAudioDecoderConfigurationOptionsResponse * soap_new_req__trt__GetAudioDecoderConfigurationOptionsResponse(
	struct soap *soap,
	tt__AudioDecoderConfigurationOptions *Options)
{
	_trt__GetAudioDecoderConfigurationOptionsResponse *_p = soap_new__trt__GetAudioDecoderConfigurationOptionsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetAudioDecoderConfigurationOptionsResponse::Options = Options;
	}
	return _p;
}

inline _trt__GetAudioDecoderConfigurationOptionsResponse * soap_new_set__trt__GetAudioDecoderConfigurationOptionsResponse(
	struct soap *soap,
	tt__AudioDecoderConfigurationOptions *Options)
{
	_trt__GetAudioDecoderConfigurationOptionsResponse *_p = soap_new__trt__GetAudioDecoderConfigurationOptionsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetAudioDecoderConfigurationOptionsResponse::Options = Options;
	}
	return _p;
}

inline int soap_write__trt__GetAudioDecoderConfigurationOptionsResponse(struct soap *soap, _trt__GetAudioDecoderConfigurationOptionsResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioDecoderConfigurationOptionsResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetAudioDecoderConfigurationOptionsResponse * SOAP_FMAC4 soap_get__trt__GetAudioDecoderConfigurationOptionsResponse(struct soap*, _trt__GetAudioDecoderConfigurationOptionsResponse *, const char*, const char*);

inline int soap_read__trt__GetAudioDecoderConfigurationOptionsResponse(struct soap *soap, _trt__GetAudioDecoderConfigurationOptionsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__GetAudioDecoderConfigurationOptionsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__GetAudioDecoderConfigurationOptions_DEFINED
#define SOAP_TYPE__trt__GetAudioDecoderConfigurationOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetAudioDecoderConfigurationOptions(struct soap*, const char*, int, const _trt__GetAudioDecoderConfigurationOptions *, const char*);
SOAP_FMAC3 _trt__GetAudioDecoderConfigurationOptions * SOAP_FMAC4 soap_in__trt__GetAudioDecoderConfigurationOptions(struct soap*, const char*, _trt__GetAudioDecoderConfigurationOptions *, const char*);
SOAP_FMAC1 _trt__GetAudioDecoderConfigurationOptions * SOAP_FMAC2 soap_instantiate__trt__GetAudioDecoderConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetAudioDecoderConfigurationOptions * soap_new__trt__GetAudioDecoderConfigurationOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetAudioDecoderConfigurationOptions(soap, n, NULL, NULL, NULL);
}

inline _trt__GetAudioDecoderConfigurationOptions * soap_new_req__trt__GetAudioDecoderConfigurationOptions(
	struct soap *soap)
{
	_trt__GetAudioDecoderConfigurationOptions *_p = soap_new__trt__GetAudioDecoderConfigurationOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__GetAudioDecoderConfigurationOptions * soap_new_set__trt__GetAudioDecoderConfigurationOptions(
	struct soap *soap,
	std::string *ConfigurationToken,
	std::string *ProfileToken)
{
	_trt__GetAudioDecoderConfigurationOptions *_p = soap_new__trt__GetAudioDecoderConfigurationOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetAudioDecoderConfigurationOptions::ConfigurationToken = ConfigurationToken;
		_p->_trt__GetAudioDecoderConfigurationOptions::ProfileToken = ProfileToken;
	}
	return _p;
}

inline int soap_write__trt__GetAudioDecoderConfigurationOptions(struct soap *soap, _trt__GetAudioDecoderConfigurationOptions const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioDecoderConfigurationOptions", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetAudioDecoderConfigurationOptions * SOAP_FMAC4 soap_get__trt__GetAudioDecoderConfigurationOptions(struct soap*, _trt__GetAudioDecoderConfigurationOptions *, const char*, const char*);

inline int soap_read__trt__GetAudioDecoderConfigurationOptions(struct soap *soap, _trt__GetAudioDecoderConfigurationOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__GetAudioDecoderConfigurationOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__GetAudioOutputConfigurationOptionsResponse_DEFINED
#define SOAP_TYPE__trt__GetAudioOutputConfigurationOptionsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetAudioOutputConfigurationOptionsResponse(struct soap*, const char*, int, const _trt__GetAudioOutputConfigurationOptionsResponse *, const char*);
SOAP_FMAC3 _trt__GetAudioOutputConfigurationOptionsResponse * SOAP_FMAC4 soap_in__trt__GetAudioOutputConfigurationOptionsResponse(struct soap*, const char*, _trt__GetAudioOutputConfigurationOptionsResponse *, const char*);
SOAP_FMAC1 _trt__GetAudioOutputConfigurationOptionsResponse * SOAP_FMAC2 soap_instantiate__trt__GetAudioOutputConfigurationOptionsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetAudioOutputConfigurationOptionsResponse * soap_new__trt__GetAudioOutputConfigurationOptionsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetAudioOutputConfigurationOptionsResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__GetAudioOutputConfigurationOptionsResponse * soap_new_req__trt__GetAudioOutputConfigurationOptionsResponse(
	struct soap *soap,
	tt__AudioOutputConfigurationOptions *Options)
{
	_trt__GetAudioOutputConfigurationOptionsResponse *_p = soap_new__trt__GetAudioOutputConfigurationOptionsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetAudioOutputConfigurationOptionsResponse::Options = Options;
	}
	return _p;
}

inline _trt__GetAudioOutputConfigurationOptionsResponse * soap_new_set__trt__GetAudioOutputConfigurationOptionsResponse(
	struct soap *soap,
	tt__AudioOutputConfigurationOptions *Options)
{
	_trt__GetAudioOutputConfigurationOptionsResponse *_p = soap_new__trt__GetAudioOutputConfigurationOptionsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetAudioOutputConfigurationOptionsResponse::Options = Options;
	}
	return _p;
}

inline int soap_write__trt__GetAudioOutputConfigurationOptionsResponse(struct soap *soap, _trt__GetAudioOutputConfigurationOptionsResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioOutputConfigurationOptionsResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetAudioOutputConfigurationOptionsResponse * SOAP_FMAC4 soap_get__trt__GetAudioOutputConfigurationOptionsResponse(struct soap*, _trt__GetAudioOutputConfigurationOptionsResponse *, const char*, const char*);

inline int soap_read__trt__GetAudioOutputConfigurationOptionsResponse(struct soap *soap, _trt__GetAudioOutputConfigurationOptionsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__GetAudioOutputConfigurationOptionsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__GetAudioOutputConfigurationOptions_DEFINED
#define SOAP_TYPE__trt__GetAudioOutputConfigurationOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetAudioOutputConfigurationOptions(struct soap*, const char*, int, const _trt__GetAudioOutputConfigurationOptions *, const char*);
SOAP_FMAC3 _trt__GetAudioOutputConfigurationOptions * SOAP_FMAC4 soap_in__trt__GetAudioOutputConfigurationOptions(struct soap*, const char*, _trt__GetAudioOutputConfigurationOptions *, const char*);
SOAP_FMAC1 _trt__GetAudioOutputConfigurationOptions * SOAP_FMAC2 soap_instantiate__trt__GetAudioOutputConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetAudioOutputConfigurationOptions * soap_new__trt__GetAudioOutputConfigurationOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetAudioOutputConfigurationOptions(soap, n, NULL, NULL, NULL);
}

inline _trt__GetAudioOutputConfigurationOptions * soap_new_req__trt__GetAudioOutputConfigurationOptions(
	struct soap *soap)
{
	_trt__GetAudioOutputConfigurationOptions *_p = soap_new__trt__GetAudioOutputConfigurationOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__GetAudioOutputConfigurationOptions * soap_new_set__trt__GetAudioOutputConfigurationOptions(
	struct soap *soap,
	std::string *ConfigurationToken,
	std::string *ProfileToken)
{
	_trt__GetAudioOutputConfigurationOptions *_p = soap_new__trt__GetAudioOutputConfigurationOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetAudioOutputConfigurationOptions::ConfigurationToken = ConfigurationToken;
		_p->_trt__GetAudioOutputConfigurationOptions::ProfileToken = ProfileToken;
	}
	return _p;
}

inline int soap_write__trt__GetAudioOutputConfigurationOptions(struct soap *soap, _trt__GetAudioOutputConfigurationOptions const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioOutputConfigurationOptions", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetAudioOutputConfigurationOptions * SOAP_FMAC4 soap_get__trt__GetAudioOutputConfigurationOptions(struct soap*, _trt__GetAudioOutputConfigurationOptions *, const char*, const char*);

inline int soap_read__trt__GetAudioOutputConfigurationOptions(struct soap *soap, _trt__GetAudioOutputConfigurationOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__GetAudioOutputConfigurationOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__GetMetadataConfigurationOptionsResponse_DEFINED
#define SOAP_TYPE__trt__GetMetadataConfigurationOptionsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetMetadataConfigurationOptionsResponse(struct soap*, const char*, int, const _trt__GetMetadataConfigurationOptionsResponse *, const char*);
SOAP_FMAC3 _trt__GetMetadataConfigurationOptionsResponse * SOAP_FMAC4 soap_in__trt__GetMetadataConfigurationOptionsResponse(struct soap*, const char*, _trt__GetMetadataConfigurationOptionsResponse *, const char*);
SOAP_FMAC1 _trt__GetMetadataConfigurationOptionsResponse * SOAP_FMAC2 soap_instantiate__trt__GetMetadataConfigurationOptionsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetMetadataConfigurationOptionsResponse * soap_new__trt__GetMetadataConfigurationOptionsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetMetadataConfigurationOptionsResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__GetMetadataConfigurationOptionsResponse * soap_new_req__trt__GetMetadataConfigurationOptionsResponse(
	struct soap *soap,
	tt__MetadataConfigurationOptions *Options)
{
	_trt__GetMetadataConfigurationOptionsResponse *_p = soap_new__trt__GetMetadataConfigurationOptionsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetMetadataConfigurationOptionsResponse::Options = Options;
	}
	return _p;
}

inline _trt__GetMetadataConfigurationOptionsResponse * soap_new_set__trt__GetMetadataConfigurationOptionsResponse(
	struct soap *soap,
	tt__MetadataConfigurationOptions *Options)
{
	_trt__GetMetadataConfigurationOptionsResponse *_p = soap_new__trt__GetMetadataConfigurationOptionsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetMetadataConfigurationOptionsResponse::Options = Options;
	}
	return _p;
}

inline int soap_write__trt__GetMetadataConfigurationOptionsResponse(struct soap *soap, _trt__GetMetadataConfigurationOptionsResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetMetadataConfigurationOptionsResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetMetadataConfigurationOptionsResponse * SOAP_FMAC4 soap_get__trt__GetMetadataConfigurationOptionsResponse(struct soap*, _trt__GetMetadataConfigurationOptionsResponse *, const char*, const char*);

inline int soap_read__trt__GetMetadataConfigurationOptionsResponse(struct soap *soap, _trt__GetMetadataConfigurationOptionsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__GetMetadataConfigurationOptionsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__GetMetadataConfigurationOptions_DEFINED
#define SOAP_TYPE__trt__GetMetadataConfigurationOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetMetadataConfigurationOptions(struct soap*, const char*, int, const _trt__GetMetadataConfigurationOptions *, const char*);
SOAP_FMAC3 _trt__GetMetadataConfigurationOptions * SOAP_FMAC4 soap_in__trt__GetMetadataConfigurationOptions(struct soap*, const char*, _trt__GetMetadataConfigurationOptions *, const char*);
SOAP_FMAC1 _trt__GetMetadataConfigurationOptions * SOAP_FMAC2 soap_instantiate__trt__GetMetadataConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetMetadataConfigurationOptions * soap_new__trt__GetMetadataConfigurationOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetMetadataConfigurationOptions(soap, n, NULL, NULL, NULL);
}

inline _trt__GetMetadataConfigurationOptions * soap_new_req__trt__GetMetadataConfigurationOptions(
	struct soap *soap)
{
	_trt__GetMetadataConfigurationOptions *_p = soap_new__trt__GetMetadataConfigurationOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__GetMetadataConfigurationOptions * soap_new_set__trt__GetMetadataConfigurationOptions(
	struct soap *soap,
	std::string *ConfigurationToken,
	std::string *ProfileToken)
{
	_trt__GetMetadataConfigurationOptions *_p = soap_new__trt__GetMetadataConfigurationOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetMetadataConfigurationOptions::ConfigurationToken = ConfigurationToken;
		_p->_trt__GetMetadataConfigurationOptions::ProfileToken = ProfileToken;
	}
	return _p;
}

inline int soap_write__trt__GetMetadataConfigurationOptions(struct soap *soap, _trt__GetMetadataConfigurationOptions const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetMetadataConfigurationOptions", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetMetadataConfigurationOptions * SOAP_FMAC4 soap_get__trt__GetMetadataConfigurationOptions(struct soap*, _trt__GetMetadataConfigurationOptions *, const char*, const char*);

inline int soap_read__trt__GetMetadataConfigurationOptions(struct soap *soap, _trt__GetMetadataConfigurationOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__GetMetadataConfigurationOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__GetAudioEncoderConfigurationOptionsResponse_DEFINED
#define SOAP_TYPE__trt__GetAudioEncoderConfigurationOptionsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetAudioEncoderConfigurationOptionsResponse(struct soap*, const char*, int, const _trt__GetAudioEncoderConfigurationOptionsResponse *, const char*);
SOAP_FMAC3 _trt__GetAudioEncoderConfigurationOptionsResponse * SOAP_FMAC4 soap_in__trt__GetAudioEncoderConfigurationOptionsResponse(struct soap*, const char*, _trt__GetAudioEncoderConfigurationOptionsResponse *, const char*);
SOAP_FMAC1 _trt__GetAudioEncoderConfigurationOptionsResponse * SOAP_FMAC2 soap_instantiate__trt__GetAudioEncoderConfigurationOptionsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetAudioEncoderConfigurationOptionsResponse * soap_new__trt__GetAudioEncoderConfigurationOptionsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetAudioEncoderConfigurationOptionsResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__GetAudioEncoderConfigurationOptionsResponse * soap_new_req__trt__GetAudioEncoderConfigurationOptionsResponse(
	struct soap *soap,
	tt__AudioEncoderConfigurationOptions *Options)
{
	_trt__GetAudioEncoderConfigurationOptionsResponse *_p = soap_new__trt__GetAudioEncoderConfigurationOptionsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetAudioEncoderConfigurationOptionsResponse::Options = Options;
	}
	return _p;
}

inline _trt__GetAudioEncoderConfigurationOptionsResponse * soap_new_set__trt__GetAudioEncoderConfigurationOptionsResponse(
	struct soap *soap,
	tt__AudioEncoderConfigurationOptions *Options)
{
	_trt__GetAudioEncoderConfigurationOptionsResponse *_p = soap_new__trt__GetAudioEncoderConfigurationOptionsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetAudioEncoderConfigurationOptionsResponse::Options = Options;
	}
	return _p;
}

inline int soap_write__trt__GetAudioEncoderConfigurationOptionsResponse(struct soap *soap, _trt__GetAudioEncoderConfigurationOptionsResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioEncoderConfigurationOptionsResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetAudioEncoderConfigurationOptionsResponse * SOAP_FMAC4 soap_get__trt__GetAudioEncoderConfigurationOptionsResponse(struct soap*, _trt__GetAudioEncoderConfigurationOptionsResponse *, const char*, const char*);

inline int soap_read__trt__GetAudioEncoderConfigurationOptionsResponse(struct soap *soap, _trt__GetAudioEncoderConfigurationOptionsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__GetAudioEncoderConfigurationOptionsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__GetAudioEncoderConfigurationOptions_DEFINED
#define SOAP_TYPE__trt__GetAudioEncoderConfigurationOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetAudioEncoderConfigurationOptions(struct soap*, const char*, int, const _trt__GetAudioEncoderConfigurationOptions *, const char*);
SOAP_FMAC3 _trt__GetAudioEncoderConfigurationOptions * SOAP_FMAC4 soap_in__trt__GetAudioEncoderConfigurationOptions(struct soap*, const char*, _trt__GetAudioEncoderConfigurationOptions *, const char*);
SOAP_FMAC1 _trt__GetAudioEncoderConfigurationOptions * SOAP_FMAC2 soap_instantiate__trt__GetAudioEncoderConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetAudioEncoderConfigurationOptions * soap_new__trt__GetAudioEncoderConfigurationOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetAudioEncoderConfigurationOptions(soap, n, NULL, NULL, NULL);
}

inline _trt__GetAudioEncoderConfigurationOptions * soap_new_req__trt__GetAudioEncoderConfigurationOptions(
	struct soap *soap)
{
	_trt__GetAudioEncoderConfigurationOptions *_p = soap_new__trt__GetAudioEncoderConfigurationOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__GetAudioEncoderConfigurationOptions * soap_new_set__trt__GetAudioEncoderConfigurationOptions(
	struct soap *soap,
	std::string *ConfigurationToken,
	std::string *ProfileToken)
{
	_trt__GetAudioEncoderConfigurationOptions *_p = soap_new__trt__GetAudioEncoderConfigurationOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetAudioEncoderConfigurationOptions::ConfigurationToken = ConfigurationToken;
		_p->_trt__GetAudioEncoderConfigurationOptions::ProfileToken = ProfileToken;
	}
	return _p;
}

inline int soap_write__trt__GetAudioEncoderConfigurationOptions(struct soap *soap, _trt__GetAudioEncoderConfigurationOptions const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioEncoderConfigurationOptions", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetAudioEncoderConfigurationOptions * SOAP_FMAC4 soap_get__trt__GetAudioEncoderConfigurationOptions(struct soap*, _trt__GetAudioEncoderConfigurationOptions *, const char*, const char*);

inline int soap_read__trt__GetAudioEncoderConfigurationOptions(struct soap *soap, _trt__GetAudioEncoderConfigurationOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__GetAudioEncoderConfigurationOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__GetAudioSourceConfigurationOptionsResponse_DEFINED
#define SOAP_TYPE__trt__GetAudioSourceConfigurationOptionsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetAudioSourceConfigurationOptionsResponse(struct soap*, const char*, int, const _trt__GetAudioSourceConfigurationOptionsResponse *, const char*);
SOAP_FMAC3 _trt__GetAudioSourceConfigurationOptionsResponse * SOAP_FMAC4 soap_in__trt__GetAudioSourceConfigurationOptionsResponse(struct soap*, const char*, _trt__GetAudioSourceConfigurationOptionsResponse *, const char*);
SOAP_FMAC1 _trt__GetAudioSourceConfigurationOptionsResponse * SOAP_FMAC2 soap_instantiate__trt__GetAudioSourceConfigurationOptionsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetAudioSourceConfigurationOptionsResponse * soap_new__trt__GetAudioSourceConfigurationOptionsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetAudioSourceConfigurationOptionsResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__GetAudioSourceConfigurationOptionsResponse * soap_new_req__trt__GetAudioSourceConfigurationOptionsResponse(
	struct soap *soap,
	tt__AudioSourceConfigurationOptions *Options)
{
	_trt__GetAudioSourceConfigurationOptionsResponse *_p = soap_new__trt__GetAudioSourceConfigurationOptionsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetAudioSourceConfigurationOptionsResponse::Options = Options;
	}
	return _p;
}

inline _trt__GetAudioSourceConfigurationOptionsResponse * soap_new_set__trt__GetAudioSourceConfigurationOptionsResponse(
	struct soap *soap,
	tt__AudioSourceConfigurationOptions *Options)
{
	_trt__GetAudioSourceConfigurationOptionsResponse *_p = soap_new__trt__GetAudioSourceConfigurationOptionsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetAudioSourceConfigurationOptionsResponse::Options = Options;
	}
	return _p;
}

inline int soap_write__trt__GetAudioSourceConfigurationOptionsResponse(struct soap *soap, _trt__GetAudioSourceConfigurationOptionsResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioSourceConfigurationOptionsResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetAudioSourceConfigurationOptionsResponse * SOAP_FMAC4 soap_get__trt__GetAudioSourceConfigurationOptionsResponse(struct soap*, _trt__GetAudioSourceConfigurationOptionsResponse *, const char*, const char*);

inline int soap_read__trt__GetAudioSourceConfigurationOptionsResponse(struct soap *soap, _trt__GetAudioSourceConfigurationOptionsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__GetAudioSourceConfigurationOptionsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__GetAudioSourceConfigurationOptions_DEFINED
#define SOAP_TYPE__trt__GetAudioSourceConfigurationOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetAudioSourceConfigurationOptions(struct soap*, const char*, int, const _trt__GetAudioSourceConfigurationOptions *, const char*);
SOAP_FMAC3 _trt__GetAudioSourceConfigurationOptions * SOAP_FMAC4 soap_in__trt__GetAudioSourceConfigurationOptions(struct soap*, const char*, _trt__GetAudioSourceConfigurationOptions *, const char*);
SOAP_FMAC1 _trt__GetAudioSourceConfigurationOptions * SOAP_FMAC2 soap_instantiate__trt__GetAudioSourceConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetAudioSourceConfigurationOptions * soap_new__trt__GetAudioSourceConfigurationOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetAudioSourceConfigurationOptions(soap, n, NULL, NULL, NULL);
}

inline _trt__GetAudioSourceConfigurationOptions * soap_new_req__trt__GetAudioSourceConfigurationOptions(
	struct soap *soap)
{
	_trt__GetAudioSourceConfigurationOptions *_p = soap_new__trt__GetAudioSourceConfigurationOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__GetAudioSourceConfigurationOptions * soap_new_set__trt__GetAudioSourceConfigurationOptions(
	struct soap *soap,
	std::string *ConfigurationToken,
	std::string *ProfileToken)
{
	_trt__GetAudioSourceConfigurationOptions *_p = soap_new__trt__GetAudioSourceConfigurationOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetAudioSourceConfigurationOptions::ConfigurationToken = ConfigurationToken;
		_p->_trt__GetAudioSourceConfigurationOptions::ProfileToken = ProfileToken;
	}
	return _p;
}

inline int soap_write__trt__GetAudioSourceConfigurationOptions(struct soap *soap, _trt__GetAudioSourceConfigurationOptions const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioSourceConfigurationOptions", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetAudioSourceConfigurationOptions * SOAP_FMAC4 soap_get__trt__GetAudioSourceConfigurationOptions(struct soap*, _trt__GetAudioSourceConfigurationOptions *, const char*, const char*);

inline int soap_read__trt__GetAudioSourceConfigurationOptions(struct soap *soap, _trt__GetAudioSourceConfigurationOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__GetAudioSourceConfigurationOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__GetVideoEncoderConfigurationOptionsResponse_DEFINED
#define SOAP_TYPE__trt__GetVideoEncoderConfigurationOptionsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetVideoEncoderConfigurationOptionsResponse(struct soap*, const char*, int, const _trt__GetVideoEncoderConfigurationOptionsResponse *, const char*);
SOAP_FMAC3 _trt__GetVideoEncoderConfigurationOptionsResponse * SOAP_FMAC4 soap_in__trt__GetVideoEncoderConfigurationOptionsResponse(struct soap*, const char*, _trt__GetVideoEncoderConfigurationOptionsResponse *, const char*);
SOAP_FMAC1 _trt__GetVideoEncoderConfigurationOptionsResponse * SOAP_FMAC2 soap_instantiate__trt__GetVideoEncoderConfigurationOptionsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetVideoEncoderConfigurationOptionsResponse * soap_new__trt__GetVideoEncoderConfigurationOptionsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetVideoEncoderConfigurationOptionsResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__GetVideoEncoderConfigurationOptionsResponse * soap_new_req__trt__GetVideoEncoderConfigurationOptionsResponse(
	struct soap *soap,
	tt__VideoEncoderConfigurationOptions *Options)
{
	_trt__GetVideoEncoderConfigurationOptionsResponse *_p = soap_new__trt__GetVideoEncoderConfigurationOptionsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetVideoEncoderConfigurationOptionsResponse::Options = Options;
	}
	return _p;
}

inline _trt__GetVideoEncoderConfigurationOptionsResponse * soap_new_set__trt__GetVideoEncoderConfigurationOptionsResponse(
	struct soap *soap,
	tt__VideoEncoderConfigurationOptions *Options)
{
	_trt__GetVideoEncoderConfigurationOptionsResponse *_p = soap_new__trt__GetVideoEncoderConfigurationOptionsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetVideoEncoderConfigurationOptionsResponse::Options = Options;
	}
	return _p;
}

inline int soap_write__trt__GetVideoEncoderConfigurationOptionsResponse(struct soap *soap, _trt__GetVideoEncoderConfigurationOptionsResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetVideoEncoderConfigurationOptionsResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetVideoEncoderConfigurationOptionsResponse * SOAP_FMAC4 soap_get__trt__GetVideoEncoderConfigurationOptionsResponse(struct soap*, _trt__GetVideoEncoderConfigurationOptionsResponse *, const char*, const char*);

inline int soap_read__trt__GetVideoEncoderConfigurationOptionsResponse(struct soap *soap, _trt__GetVideoEncoderConfigurationOptionsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__GetVideoEncoderConfigurationOptionsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__GetVideoEncoderConfigurationOptions_DEFINED
#define SOAP_TYPE__trt__GetVideoEncoderConfigurationOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetVideoEncoderConfigurationOptions(struct soap*, const char*, int, const _trt__GetVideoEncoderConfigurationOptions *, const char*);
SOAP_FMAC3 _trt__GetVideoEncoderConfigurationOptions * SOAP_FMAC4 soap_in__trt__GetVideoEncoderConfigurationOptions(struct soap*, const char*, _trt__GetVideoEncoderConfigurationOptions *, const char*);
SOAP_FMAC1 _trt__GetVideoEncoderConfigurationOptions * SOAP_FMAC2 soap_instantiate__trt__GetVideoEncoderConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetVideoEncoderConfigurationOptions * soap_new__trt__GetVideoEncoderConfigurationOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetVideoEncoderConfigurationOptions(soap, n, NULL, NULL, NULL);
}

inline _trt__GetVideoEncoderConfigurationOptions * soap_new_req__trt__GetVideoEncoderConfigurationOptions(
	struct soap *soap)
{
	_trt__GetVideoEncoderConfigurationOptions *_p = soap_new__trt__GetVideoEncoderConfigurationOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__GetVideoEncoderConfigurationOptions * soap_new_set__trt__GetVideoEncoderConfigurationOptions(
	struct soap *soap,
	std::string *ConfigurationToken,
	std::string *ProfileToken)
{
	_trt__GetVideoEncoderConfigurationOptions *_p = soap_new__trt__GetVideoEncoderConfigurationOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetVideoEncoderConfigurationOptions::ConfigurationToken = ConfigurationToken;
		_p->_trt__GetVideoEncoderConfigurationOptions::ProfileToken = ProfileToken;
	}
	return _p;
}

inline int soap_write__trt__GetVideoEncoderConfigurationOptions(struct soap *soap, _trt__GetVideoEncoderConfigurationOptions const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetVideoEncoderConfigurationOptions", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetVideoEncoderConfigurationOptions * SOAP_FMAC4 soap_get__trt__GetVideoEncoderConfigurationOptions(struct soap*, _trt__GetVideoEncoderConfigurationOptions *, const char*, const char*);

inline int soap_read__trt__GetVideoEncoderConfigurationOptions(struct soap *soap, _trt__GetVideoEncoderConfigurationOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__GetVideoEncoderConfigurationOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__GetVideoSourceConfigurationOptionsResponse_DEFINED
#define SOAP_TYPE__trt__GetVideoSourceConfigurationOptionsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetVideoSourceConfigurationOptionsResponse(struct soap*, const char*, int, const _trt__GetVideoSourceConfigurationOptionsResponse *, const char*);
SOAP_FMAC3 _trt__GetVideoSourceConfigurationOptionsResponse * SOAP_FMAC4 soap_in__trt__GetVideoSourceConfigurationOptionsResponse(struct soap*, const char*, _trt__GetVideoSourceConfigurationOptionsResponse *, const char*);
SOAP_FMAC1 _trt__GetVideoSourceConfigurationOptionsResponse * SOAP_FMAC2 soap_instantiate__trt__GetVideoSourceConfigurationOptionsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetVideoSourceConfigurationOptionsResponse * soap_new__trt__GetVideoSourceConfigurationOptionsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetVideoSourceConfigurationOptionsResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__GetVideoSourceConfigurationOptionsResponse * soap_new_req__trt__GetVideoSourceConfigurationOptionsResponse(
	struct soap *soap,
	tt__VideoSourceConfigurationOptions *Options)
{
	_trt__GetVideoSourceConfigurationOptionsResponse *_p = soap_new__trt__GetVideoSourceConfigurationOptionsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetVideoSourceConfigurationOptionsResponse::Options = Options;
	}
	return _p;
}

inline _trt__GetVideoSourceConfigurationOptionsResponse * soap_new_set__trt__GetVideoSourceConfigurationOptionsResponse(
	struct soap *soap,
	tt__VideoSourceConfigurationOptions *Options)
{
	_trt__GetVideoSourceConfigurationOptionsResponse *_p = soap_new__trt__GetVideoSourceConfigurationOptionsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetVideoSourceConfigurationOptionsResponse::Options = Options;
	}
	return _p;
}

inline int soap_write__trt__GetVideoSourceConfigurationOptionsResponse(struct soap *soap, _trt__GetVideoSourceConfigurationOptionsResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetVideoSourceConfigurationOptionsResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetVideoSourceConfigurationOptionsResponse * SOAP_FMAC4 soap_get__trt__GetVideoSourceConfigurationOptionsResponse(struct soap*, _trt__GetVideoSourceConfigurationOptionsResponse *, const char*, const char*);

inline int soap_read__trt__GetVideoSourceConfigurationOptionsResponse(struct soap *soap, _trt__GetVideoSourceConfigurationOptionsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__GetVideoSourceConfigurationOptionsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__GetVideoSourceConfigurationOptions_DEFINED
#define SOAP_TYPE__trt__GetVideoSourceConfigurationOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetVideoSourceConfigurationOptions(struct soap*, const char*, int, const _trt__GetVideoSourceConfigurationOptions *, const char*);
SOAP_FMAC3 _trt__GetVideoSourceConfigurationOptions * SOAP_FMAC4 soap_in__trt__GetVideoSourceConfigurationOptions(struct soap*, const char*, _trt__GetVideoSourceConfigurationOptions *, const char*);
SOAP_FMAC1 _trt__GetVideoSourceConfigurationOptions * SOAP_FMAC2 soap_instantiate__trt__GetVideoSourceConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetVideoSourceConfigurationOptions * soap_new__trt__GetVideoSourceConfigurationOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetVideoSourceConfigurationOptions(soap, n, NULL, NULL, NULL);
}

inline _trt__GetVideoSourceConfigurationOptions * soap_new_req__trt__GetVideoSourceConfigurationOptions(
	struct soap *soap)
{
	_trt__GetVideoSourceConfigurationOptions *_p = soap_new__trt__GetVideoSourceConfigurationOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__GetVideoSourceConfigurationOptions * soap_new_set__trt__GetVideoSourceConfigurationOptions(
	struct soap *soap,
	std::string *ConfigurationToken,
	std::string *ProfileToken)
{
	_trt__GetVideoSourceConfigurationOptions *_p = soap_new__trt__GetVideoSourceConfigurationOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetVideoSourceConfigurationOptions::ConfigurationToken = ConfigurationToken;
		_p->_trt__GetVideoSourceConfigurationOptions::ProfileToken = ProfileToken;
	}
	return _p;
}

inline int soap_write__trt__GetVideoSourceConfigurationOptions(struct soap *soap, _trt__GetVideoSourceConfigurationOptions const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetVideoSourceConfigurationOptions", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetVideoSourceConfigurationOptions * SOAP_FMAC4 soap_get__trt__GetVideoSourceConfigurationOptions(struct soap*, _trt__GetVideoSourceConfigurationOptions *, const char*, const char*);

inline int soap_read__trt__GetVideoSourceConfigurationOptions(struct soap *soap, _trt__GetVideoSourceConfigurationOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__GetVideoSourceConfigurationOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__SetAudioDecoderConfigurationResponse_DEFINED
#define SOAP_TYPE__trt__SetAudioDecoderConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__SetAudioDecoderConfigurationResponse(struct soap*, const char*, int, const _trt__SetAudioDecoderConfigurationResponse *, const char*);
SOAP_FMAC3 _trt__SetAudioDecoderConfigurationResponse * SOAP_FMAC4 soap_in__trt__SetAudioDecoderConfigurationResponse(struct soap*, const char*, _trt__SetAudioDecoderConfigurationResponse *, const char*);
SOAP_FMAC1 _trt__SetAudioDecoderConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__SetAudioDecoderConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__SetAudioDecoderConfigurationResponse * soap_new__trt__SetAudioDecoderConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__SetAudioDecoderConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__SetAudioDecoderConfigurationResponse * soap_new_req__trt__SetAudioDecoderConfigurationResponse(
	struct soap *soap)
{
	_trt__SetAudioDecoderConfigurationResponse *_p = soap_new__trt__SetAudioDecoderConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__SetAudioDecoderConfigurationResponse * soap_new_set__trt__SetAudioDecoderConfigurationResponse(
	struct soap *soap)
{
	_trt__SetAudioDecoderConfigurationResponse *_p = soap_new__trt__SetAudioDecoderConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__trt__SetAudioDecoderConfigurationResponse(struct soap *soap, _trt__SetAudioDecoderConfigurationResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetAudioDecoderConfigurationResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__SetAudioDecoderConfigurationResponse * SOAP_FMAC4 soap_get__trt__SetAudioDecoderConfigurationResponse(struct soap*, _trt__SetAudioDecoderConfigurationResponse *, const char*, const char*);

inline int soap_read__trt__SetAudioDecoderConfigurationResponse(struct soap *soap, _trt__SetAudioDecoderConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__SetAudioDecoderConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__SetAudioDecoderConfiguration_DEFINED
#define SOAP_TYPE__trt__SetAudioDecoderConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__SetAudioDecoderConfiguration(struct soap*, const char*, int, const _trt__SetAudioDecoderConfiguration *, const char*);
SOAP_FMAC3 _trt__SetAudioDecoderConfiguration * SOAP_FMAC4 soap_in__trt__SetAudioDecoderConfiguration(struct soap*, const char*, _trt__SetAudioDecoderConfiguration *, const char*);
SOAP_FMAC1 _trt__SetAudioDecoderConfiguration * SOAP_FMAC2 soap_instantiate__trt__SetAudioDecoderConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _trt__SetAudioDecoderConfiguration * soap_new__trt__SetAudioDecoderConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__SetAudioDecoderConfiguration(soap, n, NULL, NULL, NULL);
}

inline _trt__SetAudioDecoderConfiguration * soap_new_req__trt__SetAudioDecoderConfiguration(
	struct soap *soap,
	tt__AudioDecoderConfiguration *Configuration,
	bool ForcePersistence)
{
	_trt__SetAudioDecoderConfiguration *_p = soap_new__trt__SetAudioDecoderConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__SetAudioDecoderConfiguration::Configuration = Configuration;
		_p->_trt__SetAudioDecoderConfiguration::ForcePersistence = ForcePersistence;
	}
	return _p;
}

inline _trt__SetAudioDecoderConfiguration * soap_new_set__trt__SetAudioDecoderConfiguration(
	struct soap *soap,
	tt__AudioDecoderConfiguration *Configuration,
	bool ForcePersistence)
{
	_trt__SetAudioDecoderConfiguration *_p = soap_new__trt__SetAudioDecoderConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__SetAudioDecoderConfiguration::Configuration = Configuration;
		_p->_trt__SetAudioDecoderConfiguration::ForcePersistence = ForcePersistence;
	}
	return _p;
}

inline int soap_write__trt__SetAudioDecoderConfiguration(struct soap *soap, _trt__SetAudioDecoderConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetAudioDecoderConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__SetAudioDecoderConfiguration * SOAP_FMAC4 soap_get__trt__SetAudioDecoderConfiguration(struct soap*, _trt__SetAudioDecoderConfiguration *, const char*, const char*);

inline int soap_read__trt__SetAudioDecoderConfiguration(struct soap *soap, _trt__SetAudioDecoderConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__SetAudioDecoderConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__SetAudioOutputConfigurationResponse_DEFINED
#define SOAP_TYPE__trt__SetAudioOutputConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__SetAudioOutputConfigurationResponse(struct soap*, const char*, int, const _trt__SetAudioOutputConfigurationResponse *, const char*);
SOAP_FMAC3 _trt__SetAudioOutputConfigurationResponse * SOAP_FMAC4 soap_in__trt__SetAudioOutputConfigurationResponse(struct soap*, const char*, _trt__SetAudioOutputConfigurationResponse *, const char*);
SOAP_FMAC1 _trt__SetAudioOutputConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__SetAudioOutputConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__SetAudioOutputConfigurationResponse * soap_new__trt__SetAudioOutputConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__SetAudioOutputConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__SetAudioOutputConfigurationResponse * soap_new_req__trt__SetAudioOutputConfigurationResponse(
	struct soap *soap)
{
	_trt__SetAudioOutputConfigurationResponse *_p = soap_new__trt__SetAudioOutputConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__SetAudioOutputConfigurationResponse * soap_new_set__trt__SetAudioOutputConfigurationResponse(
	struct soap *soap)
{
	_trt__SetAudioOutputConfigurationResponse *_p = soap_new__trt__SetAudioOutputConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__trt__SetAudioOutputConfigurationResponse(struct soap *soap, _trt__SetAudioOutputConfigurationResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetAudioOutputConfigurationResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__SetAudioOutputConfigurationResponse * SOAP_FMAC4 soap_get__trt__SetAudioOutputConfigurationResponse(struct soap*, _trt__SetAudioOutputConfigurationResponse *, const char*, const char*);

inline int soap_read__trt__SetAudioOutputConfigurationResponse(struct soap *soap, _trt__SetAudioOutputConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__SetAudioOutputConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__SetAudioOutputConfiguration_DEFINED
#define SOAP_TYPE__trt__SetAudioOutputConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__SetAudioOutputConfiguration(struct soap*, const char*, int, const _trt__SetAudioOutputConfiguration *, const char*);
SOAP_FMAC3 _trt__SetAudioOutputConfiguration * SOAP_FMAC4 soap_in__trt__SetAudioOutputConfiguration(struct soap*, const char*, _trt__SetAudioOutputConfiguration *, const char*);
SOAP_FMAC1 _trt__SetAudioOutputConfiguration * SOAP_FMAC2 soap_instantiate__trt__SetAudioOutputConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _trt__SetAudioOutputConfiguration * soap_new__trt__SetAudioOutputConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__SetAudioOutputConfiguration(soap, n, NULL, NULL, NULL);
}

inline _trt__SetAudioOutputConfiguration * soap_new_req__trt__SetAudioOutputConfiguration(
	struct soap *soap,
	tt__AudioOutputConfiguration *Configuration,
	bool ForcePersistence)
{
	_trt__SetAudioOutputConfiguration *_p = soap_new__trt__SetAudioOutputConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__SetAudioOutputConfiguration::Configuration = Configuration;
		_p->_trt__SetAudioOutputConfiguration::ForcePersistence = ForcePersistence;
	}
	return _p;
}

inline _trt__SetAudioOutputConfiguration * soap_new_set__trt__SetAudioOutputConfiguration(
	struct soap *soap,
	tt__AudioOutputConfiguration *Configuration,
	bool ForcePersistence)
{
	_trt__SetAudioOutputConfiguration *_p = soap_new__trt__SetAudioOutputConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__SetAudioOutputConfiguration::Configuration = Configuration;
		_p->_trt__SetAudioOutputConfiguration::ForcePersistence = ForcePersistence;
	}
	return _p;
}

inline int soap_write__trt__SetAudioOutputConfiguration(struct soap *soap, _trt__SetAudioOutputConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetAudioOutputConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__SetAudioOutputConfiguration * SOAP_FMAC4 soap_get__trt__SetAudioOutputConfiguration(struct soap*, _trt__SetAudioOutputConfiguration *, const char*, const char*);

inline int soap_read__trt__SetAudioOutputConfiguration(struct soap *soap, _trt__SetAudioOutputConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__SetAudioOutputConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__SetMetadataConfigurationResponse_DEFINED
#define SOAP_TYPE__trt__SetMetadataConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__SetMetadataConfigurationResponse(struct soap*, const char*, int, const _trt__SetMetadataConfigurationResponse *, const char*);
SOAP_FMAC3 _trt__SetMetadataConfigurationResponse * SOAP_FMAC4 soap_in__trt__SetMetadataConfigurationResponse(struct soap*, const char*, _trt__SetMetadataConfigurationResponse *, const char*);
SOAP_FMAC1 _trt__SetMetadataConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__SetMetadataConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__SetMetadataConfigurationResponse * soap_new__trt__SetMetadataConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__SetMetadataConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__SetMetadataConfigurationResponse * soap_new_req__trt__SetMetadataConfigurationResponse(
	struct soap *soap)
{
	_trt__SetMetadataConfigurationResponse *_p = soap_new__trt__SetMetadataConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__SetMetadataConfigurationResponse * soap_new_set__trt__SetMetadataConfigurationResponse(
	struct soap *soap)
{
	_trt__SetMetadataConfigurationResponse *_p = soap_new__trt__SetMetadataConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__trt__SetMetadataConfigurationResponse(struct soap *soap, _trt__SetMetadataConfigurationResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetMetadataConfigurationResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__SetMetadataConfigurationResponse * SOAP_FMAC4 soap_get__trt__SetMetadataConfigurationResponse(struct soap*, _trt__SetMetadataConfigurationResponse *, const char*, const char*);

inline int soap_read__trt__SetMetadataConfigurationResponse(struct soap *soap, _trt__SetMetadataConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__SetMetadataConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__SetMetadataConfiguration_DEFINED
#define SOAP_TYPE__trt__SetMetadataConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__SetMetadataConfiguration(struct soap*, const char*, int, const _trt__SetMetadataConfiguration *, const char*);
SOAP_FMAC3 _trt__SetMetadataConfiguration * SOAP_FMAC4 soap_in__trt__SetMetadataConfiguration(struct soap*, const char*, _trt__SetMetadataConfiguration *, const char*);
SOAP_FMAC1 _trt__SetMetadataConfiguration * SOAP_FMAC2 soap_instantiate__trt__SetMetadataConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _trt__SetMetadataConfiguration * soap_new__trt__SetMetadataConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__SetMetadataConfiguration(soap, n, NULL, NULL, NULL);
}

inline _trt__SetMetadataConfiguration * soap_new_req__trt__SetMetadataConfiguration(
	struct soap *soap,
	tt__MetadataConfiguration *Configuration,
	bool ForcePersistence)
{
	_trt__SetMetadataConfiguration *_p = soap_new__trt__SetMetadataConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__SetMetadataConfiguration::Configuration = Configuration;
		_p->_trt__SetMetadataConfiguration::ForcePersistence = ForcePersistence;
	}
	return _p;
}

inline _trt__SetMetadataConfiguration * soap_new_set__trt__SetMetadataConfiguration(
	struct soap *soap,
	tt__MetadataConfiguration *Configuration,
	bool ForcePersistence)
{
	_trt__SetMetadataConfiguration *_p = soap_new__trt__SetMetadataConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__SetMetadataConfiguration::Configuration = Configuration;
		_p->_trt__SetMetadataConfiguration::ForcePersistence = ForcePersistence;
	}
	return _p;
}

inline int soap_write__trt__SetMetadataConfiguration(struct soap *soap, _trt__SetMetadataConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetMetadataConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__SetMetadataConfiguration * SOAP_FMAC4 soap_get__trt__SetMetadataConfiguration(struct soap*, _trt__SetMetadataConfiguration *, const char*, const char*);

inline int soap_read__trt__SetMetadataConfiguration(struct soap *soap, _trt__SetMetadataConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__SetMetadataConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__SetVideoAnalyticsConfigurationResponse_DEFINED
#define SOAP_TYPE__trt__SetVideoAnalyticsConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__SetVideoAnalyticsConfigurationResponse(struct soap*, const char*, int, const _trt__SetVideoAnalyticsConfigurationResponse *, const char*);
SOAP_FMAC3 _trt__SetVideoAnalyticsConfigurationResponse * SOAP_FMAC4 soap_in__trt__SetVideoAnalyticsConfigurationResponse(struct soap*, const char*, _trt__SetVideoAnalyticsConfigurationResponse *, const char*);
SOAP_FMAC1 _trt__SetVideoAnalyticsConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__SetVideoAnalyticsConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__SetVideoAnalyticsConfigurationResponse * soap_new__trt__SetVideoAnalyticsConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__SetVideoAnalyticsConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__SetVideoAnalyticsConfigurationResponse * soap_new_req__trt__SetVideoAnalyticsConfigurationResponse(
	struct soap *soap)
{
	_trt__SetVideoAnalyticsConfigurationResponse *_p = soap_new__trt__SetVideoAnalyticsConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__SetVideoAnalyticsConfigurationResponse * soap_new_set__trt__SetVideoAnalyticsConfigurationResponse(
	struct soap *soap)
{
	_trt__SetVideoAnalyticsConfigurationResponse *_p = soap_new__trt__SetVideoAnalyticsConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__trt__SetVideoAnalyticsConfigurationResponse(struct soap *soap, _trt__SetVideoAnalyticsConfigurationResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetVideoAnalyticsConfigurationResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__SetVideoAnalyticsConfigurationResponse * SOAP_FMAC4 soap_get__trt__SetVideoAnalyticsConfigurationResponse(struct soap*, _trt__SetVideoAnalyticsConfigurationResponse *, const char*, const char*);

inline int soap_read__trt__SetVideoAnalyticsConfigurationResponse(struct soap *soap, _trt__SetVideoAnalyticsConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__SetVideoAnalyticsConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__SetVideoAnalyticsConfiguration_DEFINED
#define SOAP_TYPE__trt__SetVideoAnalyticsConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__SetVideoAnalyticsConfiguration(struct soap*, const char*, int, const _trt__SetVideoAnalyticsConfiguration *, const char*);
SOAP_FMAC3 _trt__SetVideoAnalyticsConfiguration * SOAP_FMAC4 soap_in__trt__SetVideoAnalyticsConfiguration(struct soap*, const char*, _trt__SetVideoAnalyticsConfiguration *, const char*);
SOAP_FMAC1 _trt__SetVideoAnalyticsConfiguration * SOAP_FMAC2 soap_instantiate__trt__SetVideoAnalyticsConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _trt__SetVideoAnalyticsConfiguration * soap_new__trt__SetVideoAnalyticsConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__SetVideoAnalyticsConfiguration(soap, n, NULL, NULL, NULL);
}

inline _trt__SetVideoAnalyticsConfiguration * soap_new_req__trt__SetVideoAnalyticsConfiguration(
	struct soap *soap,
	tt__VideoAnalyticsConfiguration *Configuration,
	bool ForcePersistence)
{
	_trt__SetVideoAnalyticsConfiguration *_p = soap_new__trt__SetVideoAnalyticsConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__SetVideoAnalyticsConfiguration::Configuration = Configuration;
		_p->_trt__SetVideoAnalyticsConfiguration::ForcePersistence = ForcePersistence;
	}
	return _p;
}

inline _trt__SetVideoAnalyticsConfiguration * soap_new_set__trt__SetVideoAnalyticsConfiguration(
	struct soap *soap,
	tt__VideoAnalyticsConfiguration *Configuration,
	bool ForcePersistence)
{
	_trt__SetVideoAnalyticsConfiguration *_p = soap_new__trt__SetVideoAnalyticsConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__SetVideoAnalyticsConfiguration::Configuration = Configuration;
		_p->_trt__SetVideoAnalyticsConfiguration::ForcePersistence = ForcePersistence;
	}
	return _p;
}

inline int soap_write__trt__SetVideoAnalyticsConfiguration(struct soap *soap, _trt__SetVideoAnalyticsConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetVideoAnalyticsConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__SetVideoAnalyticsConfiguration * SOAP_FMAC4 soap_get__trt__SetVideoAnalyticsConfiguration(struct soap*, _trt__SetVideoAnalyticsConfiguration *, const char*, const char*);

inline int soap_read__trt__SetVideoAnalyticsConfiguration(struct soap *soap, _trt__SetVideoAnalyticsConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__SetVideoAnalyticsConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__SetAudioSourceConfigurationResponse_DEFINED
#define SOAP_TYPE__trt__SetAudioSourceConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__SetAudioSourceConfigurationResponse(struct soap*, const char*, int, const _trt__SetAudioSourceConfigurationResponse *, const char*);
SOAP_FMAC3 _trt__SetAudioSourceConfigurationResponse * SOAP_FMAC4 soap_in__trt__SetAudioSourceConfigurationResponse(struct soap*, const char*, _trt__SetAudioSourceConfigurationResponse *, const char*);
SOAP_FMAC1 _trt__SetAudioSourceConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__SetAudioSourceConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__SetAudioSourceConfigurationResponse * soap_new__trt__SetAudioSourceConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__SetAudioSourceConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__SetAudioSourceConfigurationResponse * soap_new_req__trt__SetAudioSourceConfigurationResponse(
	struct soap *soap)
{
	_trt__SetAudioSourceConfigurationResponse *_p = soap_new__trt__SetAudioSourceConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__SetAudioSourceConfigurationResponse * soap_new_set__trt__SetAudioSourceConfigurationResponse(
	struct soap *soap)
{
	_trt__SetAudioSourceConfigurationResponse *_p = soap_new__trt__SetAudioSourceConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__trt__SetAudioSourceConfigurationResponse(struct soap *soap, _trt__SetAudioSourceConfigurationResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetAudioSourceConfigurationResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__SetAudioSourceConfigurationResponse * SOAP_FMAC4 soap_get__trt__SetAudioSourceConfigurationResponse(struct soap*, _trt__SetAudioSourceConfigurationResponse *, const char*, const char*);

inline int soap_read__trt__SetAudioSourceConfigurationResponse(struct soap *soap, _trt__SetAudioSourceConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__SetAudioSourceConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__SetAudioSourceConfiguration_DEFINED
#define SOAP_TYPE__trt__SetAudioSourceConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__SetAudioSourceConfiguration(struct soap*, const char*, int, const _trt__SetAudioSourceConfiguration *, const char*);
SOAP_FMAC3 _trt__SetAudioSourceConfiguration * SOAP_FMAC4 soap_in__trt__SetAudioSourceConfiguration(struct soap*, const char*, _trt__SetAudioSourceConfiguration *, const char*);
SOAP_FMAC1 _trt__SetAudioSourceConfiguration * SOAP_FMAC2 soap_instantiate__trt__SetAudioSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _trt__SetAudioSourceConfiguration * soap_new__trt__SetAudioSourceConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__SetAudioSourceConfiguration(soap, n, NULL, NULL, NULL);
}

inline _trt__SetAudioSourceConfiguration * soap_new_req__trt__SetAudioSourceConfiguration(
	struct soap *soap,
	tt__AudioSourceConfiguration *Configuration,
	bool ForcePersistence)
{
	_trt__SetAudioSourceConfiguration *_p = soap_new__trt__SetAudioSourceConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__SetAudioSourceConfiguration::Configuration = Configuration;
		_p->_trt__SetAudioSourceConfiguration::ForcePersistence = ForcePersistence;
	}
	return _p;
}

inline _trt__SetAudioSourceConfiguration * soap_new_set__trt__SetAudioSourceConfiguration(
	struct soap *soap,
	tt__AudioSourceConfiguration *Configuration,
	bool ForcePersistence)
{
	_trt__SetAudioSourceConfiguration *_p = soap_new__trt__SetAudioSourceConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__SetAudioSourceConfiguration::Configuration = Configuration;
		_p->_trt__SetAudioSourceConfiguration::ForcePersistence = ForcePersistence;
	}
	return _p;
}

inline int soap_write__trt__SetAudioSourceConfiguration(struct soap *soap, _trt__SetAudioSourceConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetAudioSourceConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__SetAudioSourceConfiguration * SOAP_FMAC4 soap_get__trt__SetAudioSourceConfiguration(struct soap*, _trt__SetAudioSourceConfiguration *, const char*, const char*);

inline int soap_read__trt__SetAudioSourceConfiguration(struct soap *soap, _trt__SetAudioSourceConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__SetAudioSourceConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__SetAudioEncoderConfigurationResponse_DEFINED
#define SOAP_TYPE__trt__SetAudioEncoderConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__SetAudioEncoderConfigurationResponse(struct soap*, const char*, int, const _trt__SetAudioEncoderConfigurationResponse *, const char*);
SOAP_FMAC3 _trt__SetAudioEncoderConfigurationResponse * SOAP_FMAC4 soap_in__trt__SetAudioEncoderConfigurationResponse(struct soap*, const char*, _trt__SetAudioEncoderConfigurationResponse *, const char*);
SOAP_FMAC1 _trt__SetAudioEncoderConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__SetAudioEncoderConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__SetAudioEncoderConfigurationResponse * soap_new__trt__SetAudioEncoderConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__SetAudioEncoderConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__SetAudioEncoderConfigurationResponse * soap_new_req__trt__SetAudioEncoderConfigurationResponse(
	struct soap *soap)
{
	_trt__SetAudioEncoderConfigurationResponse *_p = soap_new__trt__SetAudioEncoderConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__SetAudioEncoderConfigurationResponse * soap_new_set__trt__SetAudioEncoderConfigurationResponse(
	struct soap *soap)
{
	_trt__SetAudioEncoderConfigurationResponse *_p = soap_new__trt__SetAudioEncoderConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__trt__SetAudioEncoderConfigurationResponse(struct soap *soap, _trt__SetAudioEncoderConfigurationResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetAudioEncoderConfigurationResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__SetAudioEncoderConfigurationResponse * SOAP_FMAC4 soap_get__trt__SetAudioEncoderConfigurationResponse(struct soap*, _trt__SetAudioEncoderConfigurationResponse *, const char*, const char*);

inline int soap_read__trt__SetAudioEncoderConfigurationResponse(struct soap *soap, _trt__SetAudioEncoderConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__SetAudioEncoderConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__SetAudioEncoderConfiguration_DEFINED
#define SOAP_TYPE__trt__SetAudioEncoderConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__SetAudioEncoderConfiguration(struct soap*, const char*, int, const _trt__SetAudioEncoderConfiguration *, const char*);
SOAP_FMAC3 _trt__SetAudioEncoderConfiguration * SOAP_FMAC4 soap_in__trt__SetAudioEncoderConfiguration(struct soap*, const char*, _trt__SetAudioEncoderConfiguration *, const char*);
SOAP_FMAC1 _trt__SetAudioEncoderConfiguration * SOAP_FMAC2 soap_instantiate__trt__SetAudioEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _trt__SetAudioEncoderConfiguration * soap_new__trt__SetAudioEncoderConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__SetAudioEncoderConfiguration(soap, n, NULL, NULL, NULL);
}

inline _trt__SetAudioEncoderConfiguration * soap_new_req__trt__SetAudioEncoderConfiguration(
	struct soap *soap,
	tt__AudioEncoderConfiguration *Configuration,
	bool ForcePersistence)
{
	_trt__SetAudioEncoderConfiguration *_p = soap_new__trt__SetAudioEncoderConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__SetAudioEncoderConfiguration::Configuration = Configuration;
		_p->_trt__SetAudioEncoderConfiguration::ForcePersistence = ForcePersistence;
	}
	return _p;
}

inline _trt__SetAudioEncoderConfiguration * soap_new_set__trt__SetAudioEncoderConfiguration(
	struct soap *soap,
	tt__AudioEncoderConfiguration *Configuration,
	bool ForcePersistence)
{
	_trt__SetAudioEncoderConfiguration *_p = soap_new__trt__SetAudioEncoderConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__SetAudioEncoderConfiguration::Configuration = Configuration;
		_p->_trt__SetAudioEncoderConfiguration::ForcePersistence = ForcePersistence;
	}
	return _p;
}

inline int soap_write__trt__SetAudioEncoderConfiguration(struct soap *soap, _trt__SetAudioEncoderConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetAudioEncoderConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__SetAudioEncoderConfiguration * SOAP_FMAC4 soap_get__trt__SetAudioEncoderConfiguration(struct soap*, _trt__SetAudioEncoderConfiguration *, const char*, const char*);

inline int soap_read__trt__SetAudioEncoderConfiguration(struct soap *soap, _trt__SetAudioEncoderConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__SetAudioEncoderConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__SetVideoSourceConfigurationResponse_DEFINED
#define SOAP_TYPE__trt__SetVideoSourceConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__SetVideoSourceConfigurationResponse(struct soap*, const char*, int, const _trt__SetVideoSourceConfigurationResponse *, const char*);
SOAP_FMAC3 _trt__SetVideoSourceConfigurationResponse * SOAP_FMAC4 soap_in__trt__SetVideoSourceConfigurationResponse(struct soap*, const char*, _trt__SetVideoSourceConfigurationResponse *, const char*);
SOAP_FMAC1 _trt__SetVideoSourceConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__SetVideoSourceConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__SetVideoSourceConfigurationResponse * soap_new__trt__SetVideoSourceConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__SetVideoSourceConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__SetVideoSourceConfigurationResponse * soap_new_req__trt__SetVideoSourceConfigurationResponse(
	struct soap *soap)
{
	_trt__SetVideoSourceConfigurationResponse *_p = soap_new__trt__SetVideoSourceConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__SetVideoSourceConfigurationResponse * soap_new_set__trt__SetVideoSourceConfigurationResponse(
	struct soap *soap)
{
	_trt__SetVideoSourceConfigurationResponse *_p = soap_new__trt__SetVideoSourceConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__trt__SetVideoSourceConfigurationResponse(struct soap *soap, _trt__SetVideoSourceConfigurationResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetVideoSourceConfigurationResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__SetVideoSourceConfigurationResponse * SOAP_FMAC4 soap_get__trt__SetVideoSourceConfigurationResponse(struct soap*, _trt__SetVideoSourceConfigurationResponse *, const char*, const char*);

inline int soap_read__trt__SetVideoSourceConfigurationResponse(struct soap *soap, _trt__SetVideoSourceConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__SetVideoSourceConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__SetVideoSourceConfiguration_DEFINED
#define SOAP_TYPE__trt__SetVideoSourceConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__SetVideoSourceConfiguration(struct soap*, const char*, int, const _trt__SetVideoSourceConfiguration *, const char*);
SOAP_FMAC3 _trt__SetVideoSourceConfiguration * SOAP_FMAC4 soap_in__trt__SetVideoSourceConfiguration(struct soap*, const char*, _trt__SetVideoSourceConfiguration *, const char*);
SOAP_FMAC1 _trt__SetVideoSourceConfiguration * SOAP_FMAC2 soap_instantiate__trt__SetVideoSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _trt__SetVideoSourceConfiguration * soap_new__trt__SetVideoSourceConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__SetVideoSourceConfiguration(soap, n, NULL, NULL, NULL);
}

inline _trt__SetVideoSourceConfiguration * soap_new_req__trt__SetVideoSourceConfiguration(
	struct soap *soap,
	tt__VideoSourceConfiguration *Configuration,
	bool ForcePersistence)
{
	_trt__SetVideoSourceConfiguration *_p = soap_new__trt__SetVideoSourceConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__SetVideoSourceConfiguration::Configuration = Configuration;
		_p->_trt__SetVideoSourceConfiguration::ForcePersistence = ForcePersistence;
	}
	return _p;
}

inline _trt__SetVideoSourceConfiguration * soap_new_set__trt__SetVideoSourceConfiguration(
	struct soap *soap,
	tt__VideoSourceConfiguration *Configuration,
	bool ForcePersistence)
{
	_trt__SetVideoSourceConfiguration *_p = soap_new__trt__SetVideoSourceConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__SetVideoSourceConfiguration::Configuration = Configuration;
		_p->_trt__SetVideoSourceConfiguration::ForcePersistence = ForcePersistence;
	}
	return _p;
}

inline int soap_write__trt__SetVideoSourceConfiguration(struct soap *soap, _trt__SetVideoSourceConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetVideoSourceConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__SetVideoSourceConfiguration * SOAP_FMAC4 soap_get__trt__SetVideoSourceConfiguration(struct soap*, _trt__SetVideoSourceConfiguration *, const char*, const char*);

inline int soap_read__trt__SetVideoSourceConfiguration(struct soap *soap, _trt__SetVideoSourceConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__SetVideoSourceConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__SetVideoEncoderConfigurationResponse_DEFINED
#define SOAP_TYPE__trt__SetVideoEncoderConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__SetVideoEncoderConfigurationResponse(struct soap*, const char*, int, const _trt__SetVideoEncoderConfigurationResponse *, const char*);
SOAP_FMAC3 _trt__SetVideoEncoderConfigurationResponse * SOAP_FMAC4 soap_in__trt__SetVideoEncoderConfigurationResponse(struct soap*, const char*, _trt__SetVideoEncoderConfigurationResponse *, const char*);
SOAP_FMAC1 _trt__SetVideoEncoderConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__SetVideoEncoderConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__SetVideoEncoderConfigurationResponse * soap_new__trt__SetVideoEncoderConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__SetVideoEncoderConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__SetVideoEncoderConfigurationResponse * soap_new_req__trt__SetVideoEncoderConfigurationResponse(
	struct soap *soap)
{
	_trt__SetVideoEncoderConfigurationResponse *_p = soap_new__trt__SetVideoEncoderConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__SetVideoEncoderConfigurationResponse * soap_new_set__trt__SetVideoEncoderConfigurationResponse(
	struct soap *soap)
{
	_trt__SetVideoEncoderConfigurationResponse *_p = soap_new__trt__SetVideoEncoderConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__trt__SetVideoEncoderConfigurationResponse(struct soap *soap, _trt__SetVideoEncoderConfigurationResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetVideoEncoderConfigurationResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__SetVideoEncoderConfigurationResponse * SOAP_FMAC4 soap_get__trt__SetVideoEncoderConfigurationResponse(struct soap*, _trt__SetVideoEncoderConfigurationResponse *, const char*, const char*);

inline int soap_read__trt__SetVideoEncoderConfigurationResponse(struct soap *soap, _trt__SetVideoEncoderConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__SetVideoEncoderConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__SetVideoEncoderConfiguration_DEFINED
#define SOAP_TYPE__trt__SetVideoEncoderConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__SetVideoEncoderConfiguration(struct soap*, const char*, int, const _trt__SetVideoEncoderConfiguration *, const char*);
SOAP_FMAC3 _trt__SetVideoEncoderConfiguration * SOAP_FMAC4 soap_in__trt__SetVideoEncoderConfiguration(struct soap*, const char*, _trt__SetVideoEncoderConfiguration *, const char*);
SOAP_FMAC1 _trt__SetVideoEncoderConfiguration * SOAP_FMAC2 soap_instantiate__trt__SetVideoEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _trt__SetVideoEncoderConfiguration * soap_new__trt__SetVideoEncoderConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__SetVideoEncoderConfiguration(soap, n, NULL, NULL, NULL);
}

inline _trt__SetVideoEncoderConfiguration * soap_new_req__trt__SetVideoEncoderConfiguration(
	struct soap *soap,
	tt__VideoEncoderConfiguration *Configuration,
	bool ForcePersistence)
{
	_trt__SetVideoEncoderConfiguration *_p = soap_new__trt__SetVideoEncoderConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__SetVideoEncoderConfiguration::Configuration = Configuration;
		_p->_trt__SetVideoEncoderConfiguration::ForcePersistence = ForcePersistence;
	}
	return _p;
}

inline _trt__SetVideoEncoderConfiguration * soap_new_set__trt__SetVideoEncoderConfiguration(
	struct soap *soap,
	tt__VideoEncoderConfiguration *Configuration,
	bool ForcePersistence)
{
	_trt__SetVideoEncoderConfiguration *_p = soap_new__trt__SetVideoEncoderConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__SetVideoEncoderConfiguration::Configuration = Configuration;
		_p->_trt__SetVideoEncoderConfiguration::ForcePersistence = ForcePersistence;
	}
	return _p;
}

inline int soap_write__trt__SetVideoEncoderConfiguration(struct soap *soap, _trt__SetVideoEncoderConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetVideoEncoderConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__SetVideoEncoderConfiguration * SOAP_FMAC4 soap_get__trt__SetVideoEncoderConfiguration(struct soap*, _trt__SetVideoEncoderConfiguration *, const char*, const char*);

inline int soap_read__trt__SetVideoEncoderConfiguration(struct soap *soap, _trt__SetVideoEncoderConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__SetVideoEncoderConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__GetCompatibleAudioDecoderConfigurationsResponse_DEFINED
#define SOAP_TYPE__trt__GetCompatibleAudioDecoderConfigurationsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetCompatibleAudioDecoderConfigurationsResponse(struct soap*, const char*, int, const _trt__GetCompatibleAudioDecoderConfigurationsResponse *, const char*);
SOAP_FMAC3 _trt__GetCompatibleAudioDecoderConfigurationsResponse * SOAP_FMAC4 soap_in__trt__GetCompatibleAudioDecoderConfigurationsResponse(struct soap*, const char*, _trt__GetCompatibleAudioDecoderConfigurationsResponse *, const char*);
SOAP_FMAC1 _trt__GetCompatibleAudioDecoderConfigurationsResponse * SOAP_FMAC2 soap_instantiate__trt__GetCompatibleAudioDecoderConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetCompatibleAudioDecoderConfigurationsResponse * soap_new__trt__GetCompatibleAudioDecoderConfigurationsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetCompatibleAudioDecoderConfigurationsResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__GetCompatibleAudioDecoderConfigurationsResponse * soap_new_req__trt__GetCompatibleAudioDecoderConfigurationsResponse(
	struct soap *soap)
{
	_trt__GetCompatibleAudioDecoderConfigurationsResponse *_p = soap_new__trt__GetCompatibleAudioDecoderConfigurationsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__GetCompatibleAudioDecoderConfigurationsResponse * soap_new_set__trt__GetCompatibleAudioDecoderConfigurationsResponse(
	struct soap *soap,
	const std::vector<tt__AudioDecoderConfiguration *> & Configurations)
{
	_trt__GetCompatibleAudioDecoderConfigurationsResponse *_p = soap_new__trt__GetCompatibleAudioDecoderConfigurationsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetCompatibleAudioDecoderConfigurationsResponse::Configurations = Configurations;
	}
	return _p;
}

inline int soap_write__trt__GetCompatibleAudioDecoderConfigurationsResponse(struct soap *soap, _trt__GetCompatibleAudioDecoderConfigurationsResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetCompatibleAudioDecoderConfigurationsResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetCompatibleAudioDecoderConfigurationsResponse * SOAP_FMAC4 soap_get__trt__GetCompatibleAudioDecoderConfigurationsResponse(struct soap*, _trt__GetCompatibleAudioDecoderConfigurationsResponse *, const char*, const char*);

inline int soap_read__trt__GetCompatibleAudioDecoderConfigurationsResponse(struct soap *soap, _trt__GetCompatibleAudioDecoderConfigurationsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__GetCompatibleAudioDecoderConfigurationsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__GetCompatibleAudioDecoderConfigurations_DEFINED
#define SOAP_TYPE__trt__GetCompatibleAudioDecoderConfigurations_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetCompatibleAudioDecoderConfigurations(struct soap*, const char*, int, const _trt__GetCompatibleAudioDecoderConfigurations *, const char*);
SOAP_FMAC3 _trt__GetCompatibleAudioDecoderConfigurations * SOAP_FMAC4 soap_in__trt__GetCompatibleAudioDecoderConfigurations(struct soap*, const char*, _trt__GetCompatibleAudioDecoderConfigurations *, const char*);
SOAP_FMAC1 _trt__GetCompatibleAudioDecoderConfigurations * SOAP_FMAC2 soap_instantiate__trt__GetCompatibleAudioDecoderConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetCompatibleAudioDecoderConfigurations * soap_new__trt__GetCompatibleAudioDecoderConfigurations(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetCompatibleAudioDecoderConfigurations(soap, n, NULL, NULL, NULL);
}

inline _trt__GetCompatibleAudioDecoderConfigurations * soap_new_req__trt__GetCompatibleAudioDecoderConfigurations(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_trt__GetCompatibleAudioDecoderConfigurations *_p = soap_new__trt__GetCompatibleAudioDecoderConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetCompatibleAudioDecoderConfigurations::ProfileToken = ProfileToken;
	}
	return _p;
}

inline _trt__GetCompatibleAudioDecoderConfigurations * soap_new_set__trt__GetCompatibleAudioDecoderConfigurations(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_trt__GetCompatibleAudioDecoderConfigurations *_p = soap_new__trt__GetCompatibleAudioDecoderConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetCompatibleAudioDecoderConfigurations::ProfileToken = ProfileToken;
	}
	return _p;
}

inline int soap_write__trt__GetCompatibleAudioDecoderConfigurations(struct soap *soap, _trt__GetCompatibleAudioDecoderConfigurations const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetCompatibleAudioDecoderConfigurations", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetCompatibleAudioDecoderConfigurations * SOAP_FMAC4 soap_get__trt__GetCompatibleAudioDecoderConfigurations(struct soap*, _trt__GetCompatibleAudioDecoderConfigurations *, const char*, const char*);

inline int soap_read__trt__GetCompatibleAudioDecoderConfigurations(struct soap *soap, _trt__GetCompatibleAudioDecoderConfigurations *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__GetCompatibleAudioDecoderConfigurations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__GetCompatibleAudioOutputConfigurationsResponse_DEFINED
#define SOAP_TYPE__trt__GetCompatibleAudioOutputConfigurationsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetCompatibleAudioOutputConfigurationsResponse(struct soap*, const char*, int, const _trt__GetCompatibleAudioOutputConfigurationsResponse *, const char*);
SOAP_FMAC3 _trt__GetCompatibleAudioOutputConfigurationsResponse * SOAP_FMAC4 soap_in__trt__GetCompatibleAudioOutputConfigurationsResponse(struct soap*, const char*, _trt__GetCompatibleAudioOutputConfigurationsResponse *, const char*);
SOAP_FMAC1 _trt__GetCompatibleAudioOutputConfigurationsResponse * SOAP_FMAC2 soap_instantiate__trt__GetCompatibleAudioOutputConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetCompatibleAudioOutputConfigurationsResponse * soap_new__trt__GetCompatibleAudioOutputConfigurationsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetCompatibleAudioOutputConfigurationsResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__GetCompatibleAudioOutputConfigurationsResponse * soap_new_req__trt__GetCompatibleAudioOutputConfigurationsResponse(
	struct soap *soap)
{
	_trt__GetCompatibleAudioOutputConfigurationsResponse *_p = soap_new__trt__GetCompatibleAudioOutputConfigurationsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__GetCompatibleAudioOutputConfigurationsResponse * soap_new_set__trt__GetCompatibleAudioOutputConfigurationsResponse(
	struct soap *soap,
	const std::vector<tt__AudioOutputConfiguration *> & Configurations)
{
	_trt__GetCompatibleAudioOutputConfigurationsResponse *_p = soap_new__trt__GetCompatibleAudioOutputConfigurationsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetCompatibleAudioOutputConfigurationsResponse::Configurations = Configurations;
	}
	return _p;
}

inline int soap_write__trt__GetCompatibleAudioOutputConfigurationsResponse(struct soap *soap, _trt__GetCompatibleAudioOutputConfigurationsResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetCompatibleAudioOutputConfigurationsResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetCompatibleAudioOutputConfigurationsResponse * SOAP_FMAC4 soap_get__trt__GetCompatibleAudioOutputConfigurationsResponse(struct soap*, _trt__GetCompatibleAudioOutputConfigurationsResponse *, const char*, const char*);

inline int soap_read__trt__GetCompatibleAudioOutputConfigurationsResponse(struct soap *soap, _trt__GetCompatibleAudioOutputConfigurationsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__GetCompatibleAudioOutputConfigurationsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__GetCompatibleAudioOutputConfigurations_DEFINED
#define SOAP_TYPE__trt__GetCompatibleAudioOutputConfigurations_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetCompatibleAudioOutputConfigurations(struct soap*, const char*, int, const _trt__GetCompatibleAudioOutputConfigurations *, const char*);
SOAP_FMAC3 _trt__GetCompatibleAudioOutputConfigurations * SOAP_FMAC4 soap_in__trt__GetCompatibleAudioOutputConfigurations(struct soap*, const char*, _trt__GetCompatibleAudioOutputConfigurations *, const char*);
SOAP_FMAC1 _trt__GetCompatibleAudioOutputConfigurations * SOAP_FMAC2 soap_instantiate__trt__GetCompatibleAudioOutputConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetCompatibleAudioOutputConfigurations * soap_new__trt__GetCompatibleAudioOutputConfigurations(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetCompatibleAudioOutputConfigurations(soap, n, NULL, NULL, NULL);
}

inline _trt__GetCompatibleAudioOutputConfigurations * soap_new_req__trt__GetCompatibleAudioOutputConfigurations(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_trt__GetCompatibleAudioOutputConfigurations *_p = soap_new__trt__GetCompatibleAudioOutputConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetCompatibleAudioOutputConfigurations::ProfileToken = ProfileToken;
	}
	return _p;
}

inline _trt__GetCompatibleAudioOutputConfigurations * soap_new_set__trt__GetCompatibleAudioOutputConfigurations(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_trt__GetCompatibleAudioOutputConfigurations *_p = soap_new__trt__GetCompatibleAudioOutputConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetCompatibleAudioOutputConfigurations::ProfileToken = ProfileToken;
	}
	return _p;
}

inline int soap_write__trt__GetCompatibleAudioOutputConfigurations(struct soap *soap, _trt__GetCompatibleAudioOutputConfigurations const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetCompatibleAudioOutputConfigurations", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetCompatibleAudioOutputConfigurations * SOAP_FMAC4 soap_get__trt__GetCompatibleAudioOutputConfigurations(struct soap*, _trt__GetCompatibleAudioOutputConfigurations *, const char*, const char*);

inline int soap_read__trt__GetCompatibleAudioOutputConfigurations(struct soap *soap, _trt__GetCompatibleAudioOutputConfigurations *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__GetCompatibleAudioOutputConfigurations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__GetCompatibleMetadataConfigurationsResponse_DEFINED
#define SOAP_TYPE__trt__GetCompatibleMetadataConfigurationsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetCompatibleMetadataConfigurationsResponse(struct soap*, const char*, int, const _trt__GetCompatibleMetadataConfigurationsResponse *, const char*);
SOAP_FMAC3 _trt__GetCompatibleMetadataConfigurationsResponse * SOAP_FMAC4 soap_in__trt__GetCompatibleMetadataConfigurationsResponse(struct soap*, const char*, _trt__GetCompatibleMetadataConfigurationsResponse *, const char*);
SOAP_FMAC1 _trt__GetCompatibleMetadataConfigurationsResponse * SOAP_FMAC2 soap_instantiate__trt__GetCompatibleMetadataConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetCompatibleMetadataConfigurationsResponse * soap_new__trt__GetCompatibleMetadataConfigurationsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetCompatibleMetadataConfigurationsResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__GetCompatibleMetadataConfigurationsResponse * soap_new_req__trt__GetCompatibleMetadataConfigurationsResponse(
	struct soap *soap)
{
	_trt__GetCompatibleMetadataConfigurationsResponse *_p = soap_new__trt__GetCompatibleMetadataConfigurationsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__GetCompatibleMetadataConfigurationsResponse * soap_new_set__trt__GetCompatibleMetadataConfigurationsResponse(
	struct soap *soap,
	const std::vector<tt__MetadataConfiguration *> & Configurations)
{
	_trt__GetCompatibleMetadataConfigurationsResponse *_p = soap_new__trt__GetCompatibleMetadataConfigurationsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetCompatibleMetadataConfigurationsResponse::Configurations = Configurations;
	}
	return _p;
}

inline int soap_write__trt__GetCompatibleMetadataConfigurationsResponse(struct soap *soap, _trt__GetCompatibleMetadataConfigurationsResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetCompatibleMetadataConfigurationsResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetCompatibleMetadataConfigurationsResponse * SOAP_FMAC4 soap_get__trt__GetCompatibleMetadataConfigurationsResponse(struct soap*, _trt__GetCompatibleMetadataConfigurationsResponse *, const char*, const char*);

inline int soap_read__trt__GetCompatibleMetadataConfigurationsResponse(struct soap *soap, _trt__GetCompatibleMetadataConfigurationsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__GetCompatibleMetadataConfigurationsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__GetCompatibleMetadataConfigurations_DEFINED
#define SOAP_TYPE__trt__GetCompatibleMetadataConfigurations_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetCompatibleMetadataConfigurations(struct soap*, const char*, int, const _trt__GetCompatibleMetadataConfigurations *, const char*);
SOAP_FMAC3 _trt__GetCompatibleMetadataConfigurations * SOAP_FMAC4 soap_in__trt__GetCompatibleMetadataConfigurations(struct soap*, const char*, _trt__GetCompatibleMetadataConfigurations *, const char*);
SOAP_FMAC1 _trt__GetCompatibleMetadataConfigurations * SOAP_FMAC2 soap_instantiate__trt__GetCompatibleMetadataConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetCompatibleMetadataConfigurations * soap_new__trt__GetCompatibleMetadataConfigurations(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetCompatibleMetadataConfigurations(soap, n, NULL, NULL, NULL);
}

inline _trt__GetCompatibleMetadataConfigurations * soap_new_req__trt__GetCompatibleMetadataConfigurations(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_trt__GetCompatibleMetadataConfigurations *_p = soap_new__trt__GetCompatibleMetadataConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetCompatibleMetadataConfigurations::ProfileToken = ProfileToken;
	}
	return _p;
}

inline _trt__GetCompatibleMetadataConfigurations * soap_new_set__trt__GetCompatibleMetadataConfigurations(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_trt__GetCompatibleMetadataConfigurations *_p = soap_new__trt__GetCompatibleMetadataConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetCompatibleMetadataConfigurations::ProfileToken = ProfileToken;
	}
	return _p;
}

inline int soap_write__trt__GetCompatibleMetadataConfigurations(struct soap *soap, _trt__GetCompatibleMetadataConfigurations const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetCompatibleMetadataConfigurations", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetCompatibleMetadataConfigurations * SOAP_FMAC4 soap_get__trt__GetCompatibleMetadataConfigurations(struct soap*, _trt__GetCompatibleMetadataConfigurations *, const char*, const char*);

inline int soap_read__trt__GetCompatibleMetadataConfigurations(struct soap *soap, _trt__GetCompatibleMetadataConfigurations *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__GetCompatibleMetadataConfigurations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__GetCompatibleVideoAnalyticsConfigurationsResponse_DEFINED
#define SOAP_TYPE__trt__GetCompatibleVideoAnalyticsConfigurationsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetCompatibleVideoAnalyticsConfigurationsResponse(struct soap*, const char*, int, const _trt__GetCompatibleVideoAnalyticsConfigurationsResponse *, const char*);
SOAP_FMAC3 _trt__GetCompatibleVideoAnalyticsConfigurationsResponse * SOAP_FMAC4 soap_in__trt__GetCompatibleVideoAnalyticsConfigurationsResponse(struct soap*, const char*, _trt__GetCompatibleVideoAnalyticsConfigurationsResponse *, const char*);
SOAP_FMAC1 _trt__GetCompatibleVideoAnalyticsConfigurationsResponse * SOAP_FMAC2 soap_instantiate__trt__GetCompatibleVideoAnalyticsConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetCompatibleVideoAnalyticsConfigurationsResponse * soap_new__trt__GetCompatibleVideoAnalyticsConfigurationsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetCompatibleVideoAnalyticsConfigurationsResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__GetCompatibleVideoAnalyticsConfigurationsResponse * soap_new_req__trt__GetCompatibleVideoAnalyticsConfigurationsResponse(
	struct soap *soap)
{
	_trt__GetCompatibleVideoAnalyticsConfigurationsResponse *_p = soap_new__trt__GetCompatibleVideoAnalyticsConfigurationsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__GetCompatibleVideoAnalyticsConfigurationsResponse * soap_new_set__trt__GetCompatibleVideoAnalyticsConfigurationsResponse(
	struct soap *soap,
	const std::vector<tt__VideoAnalyticsConfiguration *> & Configurations)
{
	_trt__GetCompatibleVideoAnalyticsConfigurationsResponse *_p = soap_new__trt__GetCompatibleVideoAnalyticsConfigurationsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetCompatibleVideoAnalyticsConfigurationsResponse::Configurations = Configurations;
	}
	return _p;
}

inline int soap_write__trt__GetCompatibleVideoAnalyticsConfigurationsResponse(struct soap *soap, _trt__GetCompatibleVideoAnalyticsConfigurationsResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetCompatibleVideoAnalyticsConfigurationsResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetCompatibleVideoAnalyticsConfigurationsResponse * SOAP_FMAC4 soap_get__trt__GetCompatibleVideoAnalyticsConfigurationsResponse(struct soap*, _trt__GetCompatibleVideoAnalyticsConfigurationsResponse *, const char*, const char*);

inline int soap_read__trt__GetCompatibleVideoAnalyticsConfigurationsResponse(struct soap *soap, _trt__GetCompatibleVideoAnalyticsConfigurationsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__GetCompatibleVideoAnalyticsConfigurationsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__GetCompatibleVideoAnalyticsConfigurations_DEFINED
#define SOAP_TYPE__trt__GetCompatibleVideoAnalyticsConfigurations_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetCompatibleVideoAnalyticsConfigurations(struct soap*, const char*, int, const _trt__GetCompatibleVideoAnalyticsConfigurations *, const char*);
SOAP_FMAC3 _trt__GetCompatibleVideoAnalyticsConfigurations * SOAP_FMAC4 soap_in__trt__GetCompatibleVideoAnalyticsConfigurations(struct soap*, const char*, _trt__GetCompatibleVideoAnalyticsConfigurations *, const char*);
SOAP_FMAC1 _trt__GetCompatibleVideoAnalyticsConfigurations * SOAP_FMAC2 soap_instantiate__trt__GetCompatibleVideoAnalyticsConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetCompatibleVideoAnalyticsConfigurations * soap_new__trt__GetCompatibleVideoAnalyticsConfigurations(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetCompatibleVideoAnalyticsConfigurations(soap, n, NULL, NULL, NULL);
}

inline _trt__GetCompatibleVideoAnalyticsConfigurations * soap_new_req__trt__GetCompatibleVideoAnalyticsConfigurations(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_trt__GetCompatibleVideoAnalyticsConfigurations *_p = soap_new__trt__GetCompatibleVideoAnalyticsConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetCompatibleVideoAnalyticsConfigurations::ProfileToken = ProfileToken;
	}
	return _p;
}

inline _trt__GetCompatibleVideoAnalyticsConfigurations * soap_new_set__trt__GetCompatibleVideoAnalyticsConfigurations(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_trt__GetCompatibleVideoAnalyticsConfigurations *_p = soap_new__trt__GetCompatibleVideoAnalyticsConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetCompatibleVideoAnalyticsConfigurations::ProfileToken = ProfileToken;
	}
	return _p;
}

inline int soap_write__trt__GetCompatibleVideoAnalyticsConfigurations(struct soap *soap, _trt__GetCompatibleVideoAnalyticsConfigurations const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetCompatibleVideoAnalyticsConfigurations", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetCompatibleVideoAnalyticsConfigurations * SOAP_FMAC4 soap_get__trt__GetCompatibleVideoAnalyticsConfigurations(struct soap*, _trt__GetCompatibleVideoAnalyticsConfigurations *, const char*, const char*);

inline int soap_read__trt__GetCompatibleVideoAnalyticsConfigurations(struct soap *soap, _trt__GetCompatibleVideoAnalyticsConfigurations *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__GetCompatibleVideoAnalyticsConfigurations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__GetCompatibleAudioSourceConfigurationsResponse_DEFINED
#define SOAP_TYPE__trt__GetCompatibleAudioSourceConfigurationsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetCompatibleAudioSourceConfigurationsResponse(struct soap*, const char*, int, const _trt__GetCompatibleAudioSourceConfigurationsResponse *, const char*);
SOAP_FMAC3 _trt__GetCompatibleAudioSourceConfigurationsResponse * SOAP_FMAC4 soap_in__trt__GetCompatibleAudioSourceConfigurationsResponse(struct soap*, const char*, _trt__GetCompatibleAudioSourceConfigurationsResponse *, const char*);
SOAP_FMAC1 _trt__GetCompatibleAudioSourceConfigurationsResponse * SOAP_FMAC2 soap_instantiate__trt__GetCompatibleAudioSourceConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetCompatibleAudioSourceConfigurationsResponse * soap_new__trt__GetCompatibleAudioSourceConfigurationsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetCompatibleAudioSourceConfigurationsResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__GetCompatibleAudioSourceConfigurationsResponse * soap_new_req__trt__GetCompatibleAudioSourceConfigurationsResponse(
	struct soap *soap)
{
	_trt__GetCompatibleAudioSourceConfigurationsResponse *_p = soap_new__trt__GetCompatibleAudioSourceConfigurationsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__GetCompatibleAudioSourceConfigurationsResponse * soap_new_set__trt__GetCompatibleAudioSourceConfigurationsResponse(
	struct soap *soap,
	const std::vector<tt__AudioSourceConfiguration *> & Configurations)
{
	_trt__GetCompatibleAudioSourceConfigurationsResponse *_p = soap_new__trt__GetCompatibleAudioSourceConfigurationsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetCompatibleAudioSourceConfigurationsResponse::Configurations = Configurations;
	}
	return _p;
}

inline int soap_write__trt__GetCompatibleAudioSourceConfigurationsResponse(struct soap *soap, _trt__GetCompatibleAudioSourceConfigurationsResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetCompatibleAudioSourceConfigurationsResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetCompatibleAudioSourceConfigurationsResponse * SOAP_FMAC4 soap_get__trt__GetCompatibleAudioSourceConfigurationsResponse(struct soap*, _trt__GetCompatibleAudioSourceConfigurationsResponse *, const char*, const char*);

inline int soap_read__trt__GetCompatibleAudioSourceConfigurationsResponse(struct soap *soap, _trt__GetCompatibleAudioSourceConfigurationsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__GetCompatibleAudioSourceConfigurationsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__GetCompatibleAudioSourceConfigurations_DEFINED
#define SOAP_TYPE__trt__GetCompatibleAudioSourceConfigurations_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetCompatibleAudioSourceConfigurations(struct soap*, const char*, int, const _trt__GetCompatibleAudioSourceConfigurations *, const char*);
SOAP_FMAC3 _trt__GetCompatibleAudioSourceConfigurations * SOAP_FMAC4 soap_in__trt__GetCompatibleAudioSourceConfigurations(struct soap*, const char*, _trt__GetCompatibleAudioSourceConfigurations *, const char*);
SOAP_FMAC1 _trt__GetCompatibleAudioSourceConfigurations * SOAP_FMAC2 soap_instantiate__trt__GetCompatibleAudioSourceConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetCompatibleAudioSourceConfigurations * soap_new__trt__GetCompatibleAudioSourceConfigurations(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetCompatibleAudioSourceConfigurations(soap, n, NULL, NULL, NULL);
}

inline _trt__GetCompatibleAudioSourceConfigurations * soap_new_req__trt__GetCompatibleAudioSourceConfigurations(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_trt__GetCompatibleAudioSourceConfigurations *_p = soap_new__trt__GetCompatibleAudioSourceConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetCompatibleAudioSourceConfigurations::ProfileToken = ProfileToken;
	}
	return _p;
}

inline _trt__GetCompatibleAudioSourceConfigurations * soap_new_set__trt__GetCompatibleAudioSourceConfigurations(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_trt__GetCompatibleAudioSourceConfigurations *_p = soap_new__trt__GetCompatibleAudioSourceConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetCompatibleAudioSourceConfigurations::ProfileToken = ProfileToken;
	}
	return _p;
}

inline int soap_write__trt__GetCompatibleAudioSourceConfigurations(struct soap *soap, _trt__GetCompatibleAudioSourceConfigurations const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetCompatibleAudioSourceConfigurations", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetCompatibleAudioSourceConfigurations * SOAP_FMAC4 soap_get__trt__GetCompatibleAudioSourceConfigurations(struct soap*, _trt__GetCompatibleAudioSourceConfigurations *, const char*, const char*);

inline int soap_read__trt__GetCompatibleAudioSourceConfigurations(struct soap *soap, _trt__GetCompatibleAudioSourceConfigurations *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__GetCompatibleAudioSourceConfigurations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__GetCompatibleAudioEncoderConfigurationsResponse_DEFINED
#define SOAP_TYPE__trt__GetCompatibleAudioEncoderConfigurationsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetCompatibleAudioEncoderConfigurationsResponse(struct soap*, const char*, int, const _trt__GetCompatibleAudioEncoderConfigurationsResponse *, const char*);
SOAP_FMAC3 _trt__GetCompatibleAudioEncoderConfigurationsResponse * SOAP_FMAC4 soap_in__trt__GetCompatibleAudioEncoderConfigurationsResponse(struct soap*, const char*, _trt__GetCompatibleAudioEncoderConfigurationsResponse *, const char*);
SOAP_FMAC1 _trt__GetCompatibleAudioEncoderConfigurationsResponse * SOAP_FMAC2 soap_instantiate__trt__GetCompatibleAudioEncoderConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetCompatibleAudioEncoderConfigurationsResponse * soap_new__trt__GetCompatibleAudioEncoderConfigurationsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetCompatibleAudioEncoderConfigurationsResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__GetCompatibleAudioEncoderConfigurationsResponse * soap_new_req__trt__GetCompatibleAudioEncoderConfigurationsResponse(
	struct soap *soap)
{
	_trt__GetCompatibleAudioEncoderConfigurationsResponse *_p = soap_new__trt__GetCompatibleAudioEncoderConfigurationsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__GetCompatibleAudioEncoderConfigurationsResponse * soap_new_set__trt__GetCompatibleAudioEncoderConfigurationsResponse(
	struct soap *soap,
	const std::vector<tt__AudioEncoderConfiguration *> & Configurations)
{
	_trt__GetCompatibleAudioEncoderConfigurationsResponse *_p = soap_new__trt__GetCompatibleAudioEncoderConfigurationsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetCompatibleAudioEncoderConfigurationsResponse::Configurations = Configurations;
	}
	return _p;
}

inline int soap_write__trt__GetCompatibleAudioEncoderConfigurationsResponse(struct soap *soap, _trt__GetCompatibleAudioEncoderConfigurationsResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetCompatibleAudioEncoderConfigurationsResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetCompatibleAudioEncoderConfigurationsResponse * SOAP_FMAC4 soap_get__trt__GetCompatibleAudioEncoderConfigurationsResponse(struct soap*, _trt__GetCompatibleAudioEncoderConfigurationsResponse *, const char*, const char*);

inline int soap_read__trt__GetCompatibleAudioEncoderConfigurationsResponse(struct soap *soap, _trt__GetCompatibleAudioEncoderConfigurationsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__GetCompatibleAudioEncoderConfigurationsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__GetCompatibleAudioEncoderConfigurations_DEFINED
#define SOAP_TYPE__trt__GetCompatibleAudioEncoderConfigurations_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetCompatibleAudioEncoderConfigurations(struct soap*, const char*, int, const _trt__GetCompatibleAudioEncoderConfigurations *, const char*);
SOAP_FMAC3 _trt__GetCompatibleAudioEncoderConfigurations * SOAP_FMAC4 soap_in__trt__GetCompatibleAudioEncoderConfigurations(struct soap*, const char*, _trt__GetCompatibleAudioEncoderConfigurations *, const char*);
SOAP_FMAC1 _trt__GetCompatibleAudioEncoderConfigurations * SOAP_FMAC2 soap_instantiate__trt__GetCompatibleAudioEncoderConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetCompatibleAudioEncoderConfigurations * soap_new__trt__GetCompatibleAudioEncoderConfigurations(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetCompatibleAudioEncoderConfigurations(soap, n, NULL, NULL, NULL);
}

inline _trt__GetCompatibleAudioEncoderConfigurations * soap_new_req__trt__GetCompatibleAudioEncoderConfigurations(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_trt__GetCompatibleAudioEncoderConfigurations *_p = soap_new__trt__GetCompatibleAudioEncoderConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetCompatibleAudioEncoderConfigurations::ProfileToken = ProfileToken;
	}
	return _p;
}

inline _trt__GetCompatibleAudioEncoderConfigurations * soap_new_set__trt__GetCompatibleAudioEncoderConfigurations(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_trt__GetCompatibleAudioEncoderConfigurations *_p = soap_new__trt__GetCompatibleAudioEncoderConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetCompatibleAudioEncoderConfigurations::ProfileToken = ProfileToken;
	}
	return _p;
}

inline int soap_write__trt__GetCompatibleAudioEncoderConfigurations(struct soap *soap, _trt__GetCompatibleAudioEncoderConfigurations const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetCompatibleAudioEncoderConfigurations", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetCompatibleAudioEncoderConfigurations * SOAP_FMAC4 soap_get__trt__GetCompatibleAudioEncoderConfigurations(struct soap*, _trt__GetCompatibleAudioEncoderConfigurations *, const char*, const char*);

inline int soap_read__trt__GetCompatibleAudioEncoderConfigurations(struct soap *soap, _trt__GetCompatibleAudioEncoderConfigurations *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__GetCompatibleAudioEncoderConfigurations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__GetCompatibleVideoSourceConfigurationsResponse_DEFINED
#define SOAP_TYPE__trt__GetCompatibleVideoSourceConfigurationsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetCompatibleVideoSourceConfigurationsResponse(struct soap*, const char*, int, const _trt__GetCompatibleVideoSourceConfigurationsResponse *, const char*);
SOAP_FMAC3 _trt__GetCompatibleVideoSourceConfigurationsResponse * SOAP_FMAC4 soap_in__trt__GetCompatibleVideoSourceConfigurationsResponse(struct soap*, const char*, _trt__GetCompatibleVideoSourceConfigurationsResponse *, const char*);
SOAP_FMAC1 _trt__GetCompatibleVideoSourceConfigurationsResponse * SOAP_FMAC2 soap_instantiate__trt__GetCompatibleVideoSourceConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetCompatibleVideoSourceConfigurationsResponse * soap_new__trt__GetCompatibleVideoSourceConfigurationsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetCompatibleVideoSourceConfigurationsResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__GetCompatibleVideoSourceConfigurationsResponse * soap_new_req__trt__GetCompatibleVideoSourceConfigurationsResponse(
	struct soap *soap)
{
	_trt__GetCompatibleVideoSourceConfigurationsResponse *_p = soap_new__trt__GetCompatibleVideoSourceConfigurationsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__GetCompatibleVideoSourceConfigurationsResponse * soap_new_set__trt__GetCompatibleVideoSourceConfigurationsResponse(
	struct soap *soap,
	const std::vector<tt__VideoSourceConfiguration *> & Configurations)
{
	_trt__GetCompatibleVideoSourceConfigurationsResponse *_p = soap_new__trt__GetCompatibleVideoSourceConfigurationsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetCompatibleVideoSourceConfigurationsResponse::Configurations = Configurations;
	}
	return _p;
}

inline int soap_write__trt__GetCompatibleVideoSourceConfigurationsResponse(struct soap *soap, _trt__GetCompatibleVideoSourceConfigurationsResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetCompatibleVideoSourceConfigurationsResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetCompatibleVideoSourceConfigurationsResponse * SOAP_FMAC4 soap_get__trt__GetCompatibleVideoSourceConfigurationsResponse(struct soap*, _trt__GetCompatibleVideoSourceConfigurationsResponse *, const char*, const char*);

inline int soap_read__trt__GetCompatibleVideoSourceConfigurationsResponse(struct soap *soap, _trt__GetCompatibleVideoSourceConfigurationsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__GetCompatibleVideoSourceConfigurationsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__GetCompatibleVideoSourceConfigurations_DEFINED
#define SOAP_TYPE__trt__GetCompatibleVideoSourceConfigurations_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetCompatibleVideoSourceConfigurations(struct soap*, const char*, int, const _trt__GetCompatibleVideoSourceConfigurations *, const char*);
SOAP_FMAC3 _trt__GetCompatibleVideoSourceConfigurations * SOAP_FMAC4 soap_in__trt__GetCompatibleVideoSourceConfigurations(struct soap*, const char*, _trt__GetCompatibleVideoSourceConfigurations *, const char*);
SOAP_FMAC1 _trt__GetCompatibleVideoSourceConfigurations * SOAP_FMAC2 soap_instantiate__trt__GetCompatibleVideoSourceConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetCompatibleVideoSourceConfigurations * soap_new__trt__GetCompatibleVideoSourceConfigurations(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetCompatibleVideoSourceConfigurations(soap, n, NULL, NULL, NULL);
}

inline _trt__GetCompatibleVideoSourceConfigurations * soap_new_req__trt__GetCompatibleVideoSourceConfigurations(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_trt__GetCompatibleVideoSourceConfigurations *_p = soap_new__trt__GetCompatibleVideoSourceConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetCompatibleVideoSourceConfigurations::ProfileToken = ProfileToken;
	}
	return _p;
}

inline _trt__GetCompatibleVideoSourceConfigurations * soap_new_set__trt__GetCompatibleVideoSourceConfigurations(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_trt__GetCompatibleVideoSourceConfigurations *_p = soap_new__trt__GetCompatibleVideoSourceConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetCompatibleVideoSourceConfigurations::ProfileToken = ProfileToken;
	}
	return _p;
}

inline int soap_write__trt__GetCompatibleVideoSourceConfigurations(struct soap *soap, _trt__GetCompatibleVideoSourceConfigurations const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetCompatibleVideoSourceConfigurations", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetCompatibleVideoSourceConfigurations * SOAP_FMAC4 soap_get__trt__GetCompatibleVideoSourceConfigurations(struct soap*, _trt__GetCompatibleVideoSourceConfigurations *, const char*, const char*);

inline int soap_read__trt__GetCompatibleVideoSourceConfigurations(struct soap *soap, _trt__GetCompatibleVideoSourceConfigurations *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__GetCompatibleVideoSourceConfigurations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__GetCompatibleVideoEncoderConfigurationsResponse_DEFINED
#define SOAP_TYPE__trt__GetCompatibleVideoEncoderConfigurationsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetCompatibleVideoEncoderConfigurationsResponse(struct soap*, const char*, int, const _trt__GetCompatibleVideoEncoderConfigurationsResponse *, const char*);
SOAP_FMAC3 _trt__GetCompatibleVideoEncoderConfigurationsResponse * SOAP_FMAC4 soap_in__trt__GetCompatibleVideoEncoderConfigurationsResponse(struct soap*, const char*, _trt__GetCompatibleVideoEncoderConfigurationsResponse *, const char*);
SOAP_FMAC1 _trt__GetCompatibleVideoEncoderConfigurationsResponse * SOAP_FMAC2 soap_instantiate__trt__GetCompatibleVideoEncoderConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetCompatibleVideoEncoderConfigurationsResponse * soap_new__trt__GetCompatibleVideoEncoderConfigurationsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetCompatibleVideoEncoderConfigurationsResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__GetCompatibleVideoEncoderConfigurationsResponse * soap_new_req__trt__GetCompatibleVideoEncoderConfigurationsResponse(
	struct soap *soap)
{
	_trt__GetCompatibleVideoEncoderConfigurationsResponse *_p = soap_new__trt__GetCompatibleVideoEncoderConfigurationsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__GetCompatibleVideoEncoderConfigurationsResponse * soap_new_set__trt__GetCompatibleVideoEncoderConfigurationsResponse(
	struct soap *soap,
	const std::vector<tt__VideoEncoderConfiguration *> & Configurations)
{
	_trt__GetCompatibleVideoEncoderConfigurationsResponse *_p = soap_new__trt__GetCompatibleVideoEncoderConfigurationsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetCompatibleVideoEncoderConfigurationsResponse::Configurations = Configurations;
	}
	return _p;
}

inline int soap_write__trt__GetCompatibleVideoEncoderConfigurationsResponse(struct soap *soap, _trt__GetCompatibleVideoEncoderConfigurationsResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetCompatibleVideoEncoderConfigurationsResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetCompatibleVideoEncoderConfigurationsResponse * SOAP_FMAC4 soap_get__trt__GetCompatibleVideoEncoderConfigurationsResponse(struct soap*, _trt__GetCompatibleVideoEncoderConfigurationsResponse *, const char*, const char*);

inline int soap_read__trt__GetCompatibleVideoEncoderConfigurationsResponse(struct soap *soap, _trt__GetCompatibleVideoEncoderConfigurationsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__GetCompatibleVideoEncoderConfigurationsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__GetCompatibleVideoEncoderConfigurations_DEFINED
#define SOAP_TYPE__trt__GetCompatibleVideoEncoderConfigurations_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetCompatibleVideoEncoderConfigurations(struct soap*, const char*, int, const _trt__GetCompatibleVideoEncoderConfigurations *, const char*);
SOAP_FMAC3 _trt__GetCompatibleVideoEncoderConfigurations * SOAP_FMAC4 soap_in__trt__GetCompatibleVideoEncoderConfigurations(struct soap*, const char*, _trt__GetCompatibleVideoEncoderConfigurations *, const char*);
SOAP_FMAC1 _trt__GetCompatibleVideoEncoderConfigurations * SOAP_FMAC2 soap_instantiate__trt__GetCompatibleVideoEncoderConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetCompatibleVideoEncoderConfigurations * soap_new__trt__GetCompatibleVideoEncoderConfigurations(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetCompatibleVideoEncoderConfigurations(soap, n, NULL, NULL, NULL);
}

inline _trt__GetCompatibleVideoEncoderConfigurations * soap_new_req__trt__GetCompatibleVideoEncoderConfigurations(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_trt__GetCompatibleVideoEncoderConfigurations *_p = soap_new__trt__GetCompatibleVideoEncoderConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetCompatibleVideoEncoderConfigurations::ProfileToken = ProfileToken;
	}
	return _p;
}

inline _trt__GetCompatibleVideoEncoderConfigurations * soap_new_set__trt__GetCompatibleVideoEncoderConfigurations(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_trt__GetCompatibleVideoEncoderConfigurations *_p = soap_new__trt__GetCompatibleVideoEncoderConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetCompatibleVideoEncoderConfigurations::ProfileToken = ProfileToken;
	}
	return _p;
}

inline int soap_write__trt__GetCompatibleVideoEncoderConfigurations(struct soap *soap, _trt__GetCompatibleVideoEncoderConfigurations const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetCompatibleVideoEncoderConfigurations", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetCompatibleVideoEncoderConfigurations * SOAP_FMAC4 soap_get__trt__GetCompatibleVideoEncoderConfigurations(struct soap*, _trt__GetCompatibleVideoEncoderConfigurations *, const char*, const char*);

inline int soap_read__trt__GetCompatibleVideoEncoderConfigurations(struct soap *soap, _trt__GetCompatibleVideoEncoderConfigurations *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__GetCompatibleVideoEncoderConfigurations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__GetAudioDecoderConfigurationResponse_DEFINED
#define SOAP_TYPE__trt__GetAudioDecoderConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetAudioDecoderConfigurationResponse(struct soap*, const char*, int, const _trt__GetAudioDecoderConfigurationResponse *, const char*);
SOAP_FMAC3 _trt__GetAudioDecoderConfigurationResponse * SOAP_FMAC4 soap_in__trt__GetAudioDecoderConfigurationResponse(struct soap*, const char*, _trt__GetAudioDecoderConfigurationResponse *, const char*);
SOAP_FMAC1 _trt__GetAudioDecoderConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__GetAudioDecoderConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetAudioDecoderConfigurationResponse * soap_new__trt__GetAudioDecoderConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetAudioDecoderConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__GetAudioDecoderConfigurationResponse * soap_new_req__trt__GetAudioDecoderConfigurationResponse(
	struct soap *soap,
	tt__AudioDecoderConfiguration *Configuration)
{
	_trt__GetAudioDecoderConfigurationResponse *_p = soap_new__trt__GetAudioDecoderConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetAudioDecoderConfigurationResponse::Configuration = Configuration;
	}
	return _p;
}

inline _trt__GetAudioDecoderConfigurationResponse * soap_new_set__trt__GetAudioDecoderConfigurationResponse(
	struct soap *soap,
	tt__AudioDecoderConfiguration *Configuration)
{
	_trt__GetAudioDecoderConfigurationResponse *_p = soap_new__trt__GetAudioDecoderConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetAudioDecoderConfigurationResponse::Configuration = Configuration;
	}
	return _p;
}

inline int soap_write__trt__GetAudioDecoderConfigurationResponse(struct soap *soap, _trt__GetAudioDecoderConfigurationResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioDecoderConfigurationResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetAudioDecoderConfigurationResponse * SOAP_FMAC4 soap_get__trt__GetAudioDecoderConfigurationResponse(struct soap*, _trt__GetAudioDecoderConfigurationResponse *, const char*, const char*);

inline int soap_read__trt__GetAudioDecoderConfigurationResponse(struct soap *soap, _trt__GetAudioDecoderConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__GetAudioDecoderConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__GetAudioDecoderConfiguration_DEFINED
#define SOAP_TYPE__trt__GetAudioDecoderConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetAudioDecoderConfiguration(struct soap*, const char*, int, const _trt__GetAudioDecoderConfiguration *, const char*);
SOAP_FMAC3 _trt__GetAudioDecoderConfiguration * SOAP_FMAC4 soap_in__trt__GetAudioDecoderConfiguration(struct soap*, const char*, _trt__GetAudioDecoderConfiguration *, const char*);
SOAP_FMAC1 _trt__GetAudioDecoderConfiguration * SOAP_FMAC2 soap_instantiate__trt__GetAudioDecoderConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetAudioDecoderConfiguration * soap_new__trt__GetAudioDecoderConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetAudioDecoderConfiguration(soap, n, NULL, NULL, NULL);
}

inline _trt__GetAudioDecoderConfiguration * soap_new_req__trt__GetAudioDecoderConfiguration(
	struct soap *soap,
	const std::string& ConfigurationToken)
{
	_trt__GetAudioDecoderConfiguration *_p = soap_new__trt__GetAudioDecoderConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetAudioDecoderConfiguration::ConfigurationToken = ConfigurationToken;
	}
	return _p;
}

inline _trt__GetAudioDecoderConfiguration * soap_new_set__trt__GetAudioDecoderConfiguration(
	struct soap *soap,
	const std::string& ConfigurationToken)
{
	_trt__GetAudioDecoderConfiguration *_p = soap_new__trt__GetAudioDecoderConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetAudioDecoderConfiguration::ConfigurationToken = ConfigurationToken;
	}
	return _p;
}

inline int soap_write__trt__GetAudioDecoderConfiguration(struct soap *soap, _trt__GetAudioDecoderConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioDecoderConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetAudioDecoderConfiguration * SOAP_FMAC4 soap_get__trt__GetAudioDecoderConfiguration(struct soap*, _trt__GetAudioDecoderConfiguration *, const char*, const char*);

inline int soap_read__trt__GetAudioDecoderConfiguration(struct soap *soap, _trt__GetAudioDecoderConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__GetAudioDecoderConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__GetAudioOutputConfigurationResponse_DEFINED
#define SOAP_TYPE__trt__GetAudioOutputConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetAudioOutputConfigurationResponse(struct soap*, const char*, int, const _trt__GetAudioOutputConfigurationResponse *, const char*);
SOAP_FMAC3 _trt__GetAudioOutputConfigurationResponse * SOAP_FMAC4 soap_in__trt__GetAudioOutputConfigurationResponse(struct soap*, const char*, _trt__GetAudioOutputConfigurationResponse *, const char*);
SOAP_FMAC1 _trt__GetAudioOutputConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__GetAudioOutputConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetAudioOutputConfigurationResponse * soap_new__trt__GetAudioOutputConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetAudioOutputConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__GetAudioOutputConfigurationResponse * soap_new_req__trt__GetAudioOutputConfigurationResponse(
	struct soap *soap,
	tt__AudioOutputConfiguration *Configuration)
{
	_trt__GetAudioOutputConfigurationResponse *_p = soap_new__trt__GetAudioOutputConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetAudioOutputConfigurationResponse::Configuration = Configuration;
	}
	return _p;
}

inline _trt__GetAudioOutputConfigurationResponse * soap_new_set__trt__GetAudioOutputConfigurationResponse(
	struct soap *soap,
	tt__AudioOutputConfiguration *Configuration)
{
	_trt__GetAudioOutputConfigurationResponse *_p = soap_new__trt__GetAudioOutputConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetAudioOutputConfigurationResponse::Configuration = Configuration;
	}
	return _p;
}

inline int soap_write__trt__GetAudioOutputConfigurationResponse(struct soap *soap, _trt__GetAudioOutputConfigurationResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioOutputConfigurationResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetAudioOutputConfigurationResponse * SOAP_FMAC4 soap_get__trt__GetAudioOutputConfigurationResponse(struct soap*, _trt__GetAudioOutputConfigurationResponse *, const char*, const char*);

inline int soap_read__trt__GetAudioOutputConfigurationResponse(struct soap *soap, _trt__GetAudioOutputConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__GetAudioOutputConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__GetAudioOutputConfiguration_DEFINED
#define SOAP_TYPE__trt__GetAudioOutputConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetAudioOutputConfiguration(struct soap*, const char*, int, const _trt__GetAudioOutputConfiguration *, const char*);
SOAP_FMAC3 _trt__GetAudioOutputConfiguration * SOAP_FMAC4 soap_in__trt__GetAudioOutputConfiguration(struct soap*, const char*, _trt__GetAudioOutputConfiguration *, const char*);
SOAP_FMAC1 _trt__GetAudioOutputConfiguration * SOAP_FMAC2 soap_instantiate__trt__GetAudioOutputConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetAudioOutputConfiguration * soap_new__trt__GetAudioOutputConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetAudioOutputConfiguration(soap, n, NULL, NULL, NULL);
}

inline _trt__GetAudioOutputConfiguration * soap_new_req__trt__GetAudioOutputConfiguration(
	struct soap *soap,
	const std::string& ConfigurationToken)
{
	_trt__GetAudioOutputConfiguration *_p = soap_new__trt__GetAudioOutputConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetAudioOutputConfiguration::ConfigurationToken = ConfigurationToken;
	}
	return _p;
}

inline _trt__GetAudioOutputConfiguration * soap_new_set__trt__GetAudioOutputConfiguration(
	struct soap *soap,
	const std::string& ConfigurationToken)
{
	_trt__GetAudioOutputConfiguration *_p = soap_new__trt__GetAudioOutputConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetAudioOutputConfiguration::ConfigurationToken = ConfigurationToken;
	}
	return _p;
}

inline int soap_write__trt__GetAudioOutputConfiguration(struct soap *soap, _trt__GetAudioOutputConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioOutputConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetAudioOutputConfiguration * SOAP_FMAC4 soap_get__trt__GetAudioOutputConfiguration(struct soap*, _trt__GetAudioOutputConfiguration *, const char*, const char*);

inline int soap_read__trt__GetAudioOutputConfiguration(struct soap *soap, _trt__GetAudioOutputConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__GetAudioOutputConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__GetMetadataConfigurationResponse_DEFINED
#define SOAP_TYPE__trt__GetMetadataConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetMetadataConfigurationResponse(struct soap*, const char*, int, const _trt__GetMetadataConfigurationResponse *, const char*);
SOAP_FMAC3 _trt__GetMetadataConfigurationResponse * SOAP_FMAC4 soap_in__trt__GetMetadataConfigurationResponse(struct soap*, const char*, _trt__GetMetadataConfigurationResponse *, const char*);
SOAP_FMAC1 _trt__GetMetadataConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__GetMetadataConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetMetadataConfigurationResponse * soap_new__trt__GetMetadataConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetMetadataConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__GetMetadataConfigurationResponse * soap_new_req__trt__GetMetadataConfigurationResponse(
	struct soap *soap,
	tt__MetadataConfiguration *Configuration)
{
	_trt__GetMetadataConfigurationResponse *_p = soap_new__trt__GetMetadataConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetMetadataConfigurationResponse::Configuration = Configuration;
	}
	return _p;
}

inline _trt__GetMetadataConfigurationResponse * soap_new_set__trt__GetMetadataConfigurationResponse(
	struct soap *soap,
	tt__MetadataConfiguration *Configuration)
{
	_trt__GetMetadataConfigurationResponse *_p = soap_new__trt__GetMetadataConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetMetadataConfigurationResponse::Configuration = Configuration;
	}
	return _p;
}

inline int soap_write__trt__GetMetadataConfigurationResponse(struct soap *soap, _trt__GetMetadataConfigurationResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetMetadataConfigurationResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetMetadataConfigurationResponse * SOAP_FMAC4 soap_get__trt__GetMetadataConfigurationResponse(struct soap*, _trt__GetMetadataConfigurationResponse *, const char*, const char*);

inline int soap_read__trt__GetMetadataConfigurationResponse(struct soap *soap, _trt__GetMetadataConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__GetMetadataConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__GetMetadataConfiguration_DEFINED
#define SOAP_TYPE__trt__GetMetadataConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetMetadataConfiguration(struct soap*, const char*, int, const _trt__GetMetadataConfiguration *, const char*);
SOAP_FMAC3 _trt__GetMetadataConfiguration * SOAP_FMAC4 soap_in__trt__GetMetadataConfiguration(struct soap*, const char*, _trt__GetMetadataConfiguration *, const char*);
SOAP_FMAC1 _trt__GetMetadataConfiguration * SOAP_FMAC2 soap_instantiate__trt__GetMetadataConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetMetadataConfiguration * soap_new__trt__GetMetadataConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetMetadataConfiguration(soap, n, NULL, NULL, NULL);
}

inline _trt__GetMetadataConfiguration * soap_new_req__trt__GetMetadataConfiguration(
	struct soap *soap,
	const std::string& ConfigurationToken)
{
	_trt__GetMetadataConfiguration *_p = soap_new__trt__GetMetadataConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetMetadataConfiguration::ConfigurationToken = ConfigurationToken;
	}
	return _p;
}

inline _trt__GetMetadataConfiguration * soap_new_set__trt__GetMetadataConfiguration(
	struct soap *soap,
	const std::string& ConfigurationToken)
{
	_trt__GetMetadataConfiguration *_p = soap_new__trt__GetMetadataConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetMetadataConfiguration::ConfigurationToken = ConfigurationToken;
	}
	return _p;
}

inline int soap_write__trt__GetMetadataConfiguration(struct soap *soap, _trt__GetMetadataConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetMetadataConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetMetadataConfiguration * SOAP_FMAC4 soap_get__trt__GetMetadataConfiguration(struct soap*, _trt__GetMetadataConfiguration *, const char*, const char*);

inline int soap_read__trt__GetMetadataConfiguration(struct soap *soap, _trt__GetMetadataConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__GetMetadataConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__GetVideoAnalyticsConfigurationResponse_DEFINED
#define SOAP_TYPE__trt__GetVideoAnalyticsConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetVideoAnalyticsConfigurationResponse(struct soap*, const char*, int, const _trt__GetVideoAnalyticsConfigurationResponse *, const char*);
SOAP_FMAC3 _trt__GetVideoAnalyticsConfigurationResponse * SOAP_FMAC4 soap_in__trt__GetVideoAnalyticsConfigurationResponse(struct soap*, const char*, _trt__GetVideoAnalyticsConfigurationResponse *, const char*);
SOAP_FMAC1 _trt__GetVideoAnalyticsConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__GetVideoAnalyticsConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetVideoAnalyticsConfigurationResponse * soap_new__trt__GetVideoAnalyticsConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetVideoAnalyticsConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__GetVideoAnalyticsConfigurationResponse * soap_new_req__trt__GetVideoAnalyticsConfigurationResponse(
	struct soap *soap,
	tt__VideoAnalyticsConfiguration *Configuration)
{
	_trt__GetVideoAnalyticsConfigurationResponse *_p = soap_new__trt__GetVideoAnalyticsConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetVideoAnalyticsConfigurationResponse::Configuration = Configuration;
	}
	return _p;
}

inline _trt__GetVideoAnalyticsConfigurationResponse * soap_new_set__trt__GetVideoAnalyticsConfigurationResponse(
	struct soap *soap,
	tt__VideoAnalyticsConfiguration *Configuration)
{
	_trt__GetVideoAnalyticsConfigurationResponse *_p = soap_new__trt__GetVideoAnalyticsConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetVideoAnalyticsConfigurationResponse::Configuration = Configuration;
	}
	return _p;
}

inline int soap_write__trt__GetVideoAnalyticsConfigurationResponse(struct soap *soap, _trt__GetVideoAnalyticsConfigurationResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetVideoAnalyticsConfigurationResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetVideoAnalyticsConfigurationResponse * SOAP_FMAC4 soap_get__trt__GetVideoAnalyticsConfigurationResponse(struct soap*, _trt__GetVideoAnalyticsConfigurationResponse *, const char*, const char*);

inline int soap_read__trt__GetVideoAnalyticsConfigurationResponse(struct soap *soap, _trt__GetVideoAnalyticsConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__GetVideoAnalyticsConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__GetVideoAnalyticsConfiguration_DEFINED
#define SOAP_TYPE__trt__GetVideoAnalyticsConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetVideoAnalyticsConfiguration(struct soap*, const char*, int, const _trt__GetVideoAnalyticsConfiguration *, const char*);
SOAP_FMAC3 _trt__GetVideoAnalyticsConfiguration * SOAP_FMAC4 soap_in__trt__GetVideoAnalyticsConfiguration(struct soap*, const char*, _trt__GetVideoAnalyticsConfiguration *, const char*);
SOAP_FMAC1 _trt__GetVideoAnalyticsConfiguration * SOAP_FMAC2 soap_instantiate__trt__GetVideoAnalyticsConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetVideoAnalyticsConfiguration * soap_new__trt__GetVideoAnalyticsConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetVideoAnalyticsConfiguration(soap, n, NULL, NULL, NULL);
}

inline _trt__GetVideoAnalyticsConfiguration * soap_new_req__trt__GetVideoAnalyticsConfiguration(
	struct soap *soap,
	const std::string& ConfigurationToken)
{
	_trt__GetVideoAnalyticsConfiguration *_p = soap_new__trt__GetVideoAnalyticsConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetVideoAnalyticsConfiguration::ConfigurationToken = ConfigurationToken;
	}
	return _p;
}

inline _trt__GetVideoAnalyticsConfiguration * soap_new_set__trt__GetVideoAnalyticsConfiguration(
	struct soap *soap,
	const std::string& ConfigurationToken)
{
	_trt__GetVideoAnalyticsConfiguration *_p = soap_new__trt__GetVideoAnalyticsConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetVideoAnalyticsConfiguration::ConfigurationToken = ConfigurationToken;
	}
	return _p;
}

inline int soap_write__trt__GetVideoAnalyticsConfiguration(struct soap *soap, _trt__GetVideoAnalyticsConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetVideoAnalyticsConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetVideoAnalyticsConfiguration * SOAP_FMAC4 soap_get__trt__GetVideoAnalyticsConfiguration(struct soap*, _trt__GetVideoAnalyticsConfiguration *, const char*, const char*);

inline int soap_read__trt__GetVideoAnalyticsConfiguration(struct soap *soap, _trt__GetVideoAnalyticsConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__GetVideoAnalyticsConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__GetAudioEncoderConfigurationResponse_DEFINED
#define SOAP_TYPE__trt__GetAudioEncoderConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetAudioEncoderConfigurationResponse(struct soap*, const char*, int, const _trt__GetAudioEncoderConfigurationResponse *, const char*);
SOAP_FMAC3 _trt__GetAudioEncoderConfigurationResponse * SOAP_FMAC4 soap_in__trt__GetAudioEncoderConfigurationResponse(struct soap*, const char*, _trt__GetAudioEncoderConfigurationResponse *, const char*);
SOAP_FMAC1 _trt__GetAudioEncoderConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__GetAudioEncoderConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetAudioEncoderConfigurationResponse * soap_new__trt__GetAudioEncoderConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetAudioEncoderConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__GetAudioEncoderConfigurationResponse * soap_new_req__trt__GetAudioEncoderConfigurationResponse(
	struct soap *soap,
	tt__AudioEncoderConfiguration *Configuration)
{
	_trt__GetAudioEncoderConfigurationResponse *_p = soap_new__trt__GetAudioEncoderConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetAudioEncoderConfigurationResponse::Configuration = Configuration;
	}
	return _p;
}

inline _trt__GetAudioEncoderConfigurationResponse * soap_new_set__trt__GetAudioEncoderConfigurationResponse(
	struct soap *soap,
	tt__AudioEncoderConfiguration *Configuration)
{
	_trt__GetAudioEncoderConfigurationResponse *_p = soap_new__trt__GetAudioEncoderConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetAudioEncoderConfigurationResponse::Configuration = Configuration;
	}
	return _p;
}

inline int soap_write__trt__GetAudioEncoderConfigurationResponse(struct soap *soap, _trt__GetAudioEncoderConfigurationResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioEncoderConfigurationResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetAudioEncoderConfigurationResponse * SOAP_FMAC4 soap_get__trt__GetAudioEncoderConfigurationResponse(struct soap*, _trt__GetAudioEncoderConfigurationResponse *, const char*, const char*);

inline int soap_read__trt__GetAudioEncoderConfigurationResponse(struct soap *soap, _trt__GetAudioEncoderConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__GetAudioEncoderConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__GetAudioEncoderConfiguration_DEFINED
#define SOAP_TYPE__trt__GetAudioEncoderConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetAudioEncoderConfiguration(struct soap*, const char*, int, const _trt__GetAudioEncoderConfiguration *, const char*);
SOAP_FMAC3 _trt__GetAudioEncoderConfiguration * SOAP_FMAC4 soap_in__trt__GetAudioEncoderConfiguration(struct soap*, const char*, _trt__GetAudioEncoderConfiguration *, const char*);
SOAP_FMAC1 _trt__GetAudioEncoderConfiguration * SOAP_FMAC2 soap_instantiate__trt__GetAudioEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetAudioEncoderConfiguration * soap_new__trt__GetAudioEncoderConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetAudioEncoderConfiguration(soap, n, NULL, NULL, NULL);
}

inline _trt__GetAudioEncoderConfiguration * soap_new_req__trt__GetAudioEncoderConfiguration(
	struct soap *soap,
	const std::string& ConfigurationToken)
{
	_trt__GetAudioEncoderConfiguration *_p = soap_new__trt__GetAudioEncoderConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetAudioEncoderConfiguration::ConfigurationToken = ConfigurationToken;
	}
	return _p;
}

inline _trt__GetAudioEncoderConfiguration * soap_new_set__trt__GetAudioEncoderConfiguration(
	struct soap *soap,
	const std::string& ConfigurationToken)
{
	_trt__GetAudioEncoderConfiguration *_p = soap_new__trt__GetAudioEncoderConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetAudioEncoderConfiguration::ConfigurationToken = ConfigurationToken;
	}
	return _p;
}

inline int soap_write__trt__GetAudioEncoderConfiguration(struct soap *soap, _trt__GetAudioEncoderConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioEncoderConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetAudioEncoderConfiguration * SOAP_FMAC4 soap_get__trt__GetAudioEncoderConfiguration(struct soap*, _trt__GetAudioEncoderConfiguration *, const char*, const char*);

inline int soap_read__trt__GetAudioEncoderConfiguration(struct soap *soap, _trt__GetAudioEncoderConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__GetAudioEncoderConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__GetAudioSourceConfigurationResponse_DEFINED
#define SOAP_TYPE__trt__GetAudioSourceConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetAudioSourceConfigurationResponse(struct soap*, const char*, int, const _trt__GetAudioSourceConfigurationResponse *, const char*);
SOAP_FMAC3 _trt__GetAudioSourceConfigurationResponse * SOAP_FMAC4 soap_in__trt__GetAudioSourceConfigurationResponse(struct soap*, const char*, _trt__GetAudioSourceConfigurationResponse *, const char*);
SOAP_FMAC1 _trt__GetAudioSourceConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__GetAudioSourceConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetAudioSourceConfigurationResponse * soap_new__trt__GetAudioSourceConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetAudioSourceConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__GetAudioSourceConfigurationResponse * soap_new_req__trt__GetAudioSourceConfigurationResponse(
	struct soap *soap,
	tt__AudioSourceConfiguration *Configuration)
{
	_trt__GetAudioSourceConfigurationResponse *_p = soap_new__trt__GetAudioSourceConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetAudioSourceConfigurationResponse::Configuration = Configuration;
	}
	return _p;
}

inline _trt__GetAudioSourceConfigurationResponse * soap_new_set__trt__GetAudioSourceConfigurationResponse(
	struct soap *soap,
	tt__AudioSourceConfiguration *Configuration)
{
	_trt__GetAudioSourceConfigurationResponse *_p = soap_new__trt__GetAudioSourceConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetAudioSourceConfigurationResponse::Configuration = Configuration;
	}
	return _p;
}

inline int soap_write__trt__GetAudioSourceConfigurationResponse(struct soap *soap, _trt__GetAudioSourceConfigurationResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioSourceConfigurationResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetAudioSourceConfigurationResponse * SOAP_FMAC4 soap_get__trt__GetAudioSourceConfigurationResponse(struct soap*, _trt__GetAudioSourceConfigurationResponse *, const char*, const char*);

inline int soap_read__trt__GetAudioSourceConfigurationResponse(struct soap *soap, _trt__GetAudioSourceConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__GetAudioSourceConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__GetAudioSourceConfiguration_DEFINED
#define SOAP_TYPE__trt__GetAudioSourceConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetAudioSourceConfiguration(struct soap*, const char*, int, const _trt__GetAudioSourceConfiguration *, const char*);
SOAP_FMAC3 _trt__GetAudioSourceConfiguration * SOAP_FMAC4 soap_in__trt__GetAudioSourceConfiguration(struct soap*, const char*, _trt__GetAudioSourceConfiguration *, const char*);
SOAP_FMAC1 _trt__GetAudioSourceConfiguration * SOAP_FMAC2 soap_instantiate__trt__GetAudioSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetAudioSourceConfiguration * soap_new__trt__GetAudioSourceConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetAudioSourceConfiguration(soap, n, NULL, NULL, NULL);
}

inline _trt__GetAudioSourceConfiguration * soap_new_req__trt__GetAudioSourceConfiguration(
	struct soap *soap,
	const std::string& ConfigurationToken)
{
	_trt__GetAudioSourceConfiguration *_p = soap_new__trt__GetAudioSourceConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetAudioSourceConfiguration::ConfigurationToken = ConfigurationToken;
	}
	return _p;
}

inline _trt__GetAudioSourceConfiguration * soap_new_set__trt__GetAudioSourceConfiguration(
	struct soap *soap,
	const std::string& ConfigurationToken)
{
	_trt__GetAudioSourceConfiguration *_p = soap_new__trt__GetAudioSourceConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetAudioSourceConfiguration::ConfigurationToken = ConfigurationToken;
	}
	return _p;
}

inline int soap_write__trt__GetAudioSourceConfiguration(struct soap *soap, _trt__GetAudioSourceConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioSourceConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetAudioSourceConfiguration * SOAP_FMAC4 soap_get__trt__GetAudioSourceConfiguration(struct soap*, _trt__GetAudioSourceConfiguration *, const char*, const char*);

inline int soap_read__trt__GetAudioSourceConfiguration(struct soap *soap, _trt__GetAudioSourceConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__GetAudioSourceConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__GetVideoEncoderConfigurationResponse_DEFINED
#define SOAP_TYPE__trt__GetVideoEncoderConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetVideoEncoderConfigurationResponse(struct soap*, const char*, int, const _trt__GetVideoEncoderConfigurationResponse *, const char*);
SOAP_FMAC3 _trt__GetVideoEncoderConfigurationResponse * SOAP_FMAC4 soap_in__trt__GetVideoEncoderConfigurationResponse(struct soap*, const char*, _trt__GetVideoEncoderConfigurationResponse *, const char*);
SOAP_FMAC1 _trt__GetVideoEncoderConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__GetVideoEncoderConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetVideoEncoderConfigurationResponse * soap_new__trt__GetVideoEncoderConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetVideoEncoderConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__GetVideoEncoderConfigurationResponse * soap_new_req__trt__GetVideoEncoderConfigurationResponse(
	struct soap *soap,
	tt__VideoEncoderConfiguration *Configuration)
{
	_trt__GetVideoEncoderConfigurationResponse *_p = soap_new__trt__GetVideoEncoderConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetVideoEncoderConfigurationResponse::Configuration = Configuration;
	}
	return _p;
}

inline _trt__GetVideoEncoderConfigurationResponse * soap_new_set__trt__GetVideoEncoderConfigurationResponse(
	struct soap *soap,
	tt__VideoEncoderConfiguration *Configuration)
{
	_trt__GetVideoEncoderConfigurationResponse *_p = soap_new__trt__GetVideoEncoderConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetVideoEncoderConfigurationResponse::Configuration = Configuration;
	}
	return _p;
}

inline int soap_write__trt__GetVideoEncoderConfigurationResponse(struct soap *soap, _trt__GetVideoEncoderConfigurationResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetVideoEncoderConfigurationResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetVideoEncoderConfigurationResponse * SOAP_FMAC4 soap_get__trt__GetVideoEncoderConfigurationResponse(struct soap*, _trt__GetVideoEncoderConfigurationResponse *, const char*, const char*);

inline int soap_read__trt__GetVideoEncoderConfigurationResponse(struct soap *soap, _trt__GetVideoEncoderConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__GetVideoEncoderConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__GetVideoEncoderConfiguration_DEFINED
#define SOAP_TYPE__trt__GetVideoEncoderConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetVideoEncoderConfiguration(struct soap*, const char*, int, const _trt__GetVideoEncoderConfiguration *, const char*);
SOAP_FMAC3 _trt__GetVideoEncoderConfiguration * SOAP_FMAC4 soap_in__trt__GetVideoEncoderConfiguration(struct soap*, const char*, _trt__GetVideoEncoderConfiguration *, const char*);
SOAP_FMAC1 _trt__GetVideoEncoderConfiguration * SOAP_FMAC2 soap_instantiate__trt__GetVideoEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetVideoEncoderConfiguration * soap_new__trt__GetVideoEncoderConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetVideoEncoderConfiguration(soap, n, NULL, NULL, NULL);
}

inline _trt__GetVideoEncoderConfiguration * soap_new_req__trt__GetVideoEncoderConfiguration(
	struct soap *soap,
	const std::string& ConfigurationToken)
{
	_trt__GetVideoEncoderConfiguration *_p = soap_new__trt__GetVideoEncoderConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetVideoEncoderConfiguration::ConfigurationToken = ConfigurationToken;
	}
	return _p;
}

inline _trt__GetVideoEncoderConfiguration * soap_new_set__trt__GetVideoEncoderConfiguration(
	struct soap *soap,
	const std::string& ConfigurationToken)
{
	_trt__GetVideoEncoderConfiguration *_p = soap_new__trt__GetVideoEncoderConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetVideoEncoderConfiguration::ConfigurationToken = ConfigurationToken;
	}
	return _p;
}

inline int soap_write__trt__GetVideoEncoderConfiguration(struct soap *soap, _trt__GetVideoEncoderConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetVideoEncoderConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetVideoEncoderConfiguration * SOAP_FMAC4 soap_get__trt__GetVideoEncoderConfiguration(struct soap*, _trt__GetVideoEncoderConfiguration *, const char*, const char*);

inline int soap_read__trt__GetVideoEncoderConfiguration(struct soap *soap, _trt__GetVideoEncoderConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__GetVideoEncoderConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__GetVideoSourceConfigurationResponse_DEFINED
#define SOAP_TYPE__trt__GetVideoSourceConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetVideoSourceConfigurationResponse(struct soap*, const char*, int, const _trt__GetVideoSourceConfigurationResponse *, const char*);
SOAP_FMAC3 _trt__GetVideoSourceConfigurationResponse * SOAP_FMAC4 soap_in__trt__GetVideoSourceConfigurationResponse(struct soap*, const char*, _trt__GetVideoSourceConfigurationResponse *, const char*);
SOAP_FMAC1 _trt__GetVideoSourceConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__GetVideoSourceConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetVideoSourceConfigurationResponse * soap_new__trt__GetVideoSourceConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetVideoSourceConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__GetVideoSourceConfigurationResponse * soap_new_req__trt__GetVideoSourceConfigurationResponse(
	struct soap *soap,
	tt__VideoSourceConfiguration *Configuration)
{
	_trt__GetVideoSourceConfigurationResponse *_p = soap_new__trt__GetVideoSourceConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetVideoSourceConfigurationResponse::Configuration = Configuration;
	}
	return _p;
}

inline _trt__GetVideoSourceConfigurationResponse * soap_new_set__trt__GetVideoSourceConfigurationResponse(
	struct soap *soap,
	tt__VideoSourceConfiguration *Configuration)
{
	_trt__GetVideoSourceConfigurationResponse *_p = soap_new__trt__GetVideoSourceConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetVideoSourceConfigurationResponse::Configuration = Configuration;
	}
	return _p;
}

inline int soap_write__trt__GetVideoSourceConfigurationResponse(struct soap *soap, _trt__GetVideoSourceConfigurationResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetVideoSourceConfigurationResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetVideoSourceConfigurationResponse * SOAP_FMAC4 soap_get__trt__GetVideoSourceConfigurationResponse(struct soap*, _trt__GetVideoSourceConfigurationResponse *, const char*, const char*);

inline int soap_read__trt__GetVideoSourceConfigurationResponse(struct soap *soap, _trt__GetVideoSourceConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__GetVideoSourceConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__GetVideoSourceConfiguration_DEFINED
#define SOAP_TYPE__trt__GetVideoSourceConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetVideoSourceConfiguration(struct soap*, const char*, int, const _trt__GetVideoSourceConfiguration *, const char*);
SOAP_FMAC3 _trt__GetVideoSourceConfiguration * SOAP_FMAC4 soap_in__trt__GetVideoSourceConfiguration(struct soap*, const char*, _trt__GetVideoSourceConfiguration *, const char*);
SOAP_FMAC1 _trt__GetVideoSourceConfiguration * SOAP_FMAC2 soap_instantiate__trt__GetVideoSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetVideoSourceConfiguration * soap_new__trt__GetVideoSourceConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetVideoSourceConfiguration(soap, n, NULL, NULL, NULL);
}

inline _trt__GetVideoSourceConfiguration * soap_new_req__trt__GetVideoSourceConfiguration(
	struct soap *soap,
	const std::string& ConfigurationToken)
{
	_trt__GetVideoSourceConfiguration *_p = soap_new__trt__GetVideoSourceConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetVideoSourceConfiguration::ConfigurationToken = ConfigurationToken;
	}
	return _p;
}

inline _trt__GetVideoSourceConfiguration * soap_new_set__trt__GetVideoSourceConfiguration(
	struct soap *soap,
	const std::string& ConfigurationToken)
{
	_trt__GetVideoSourceConfiguration *_p = soap_new__trt__GetVideoSourceConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetVideoSourceConfiguration::ConfigurationToken = ConfigurationToken;
	}
	return _p;
}

inline int soap_write__trt__GetVideoSourceConfiguration(struct soap *soap, _trt__GetVideoSourceConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetVideoSourceConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetVideoSourceConfiguration * SOAP_FMAC4 soap_get__trt__GetVideoSourceConfiguration(struct soap*, _trt__GetVideoSourceConfiguration *, const char*, const char*);

inline int soap_read__trt__GetVideoSourceConfiguration(struct soap *soap, _trt__GetVideoSourceConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__GetVideoSourceConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__GetAudioDecoderConfigurationsResponse_DEFINED
#define SOAP_TYPE__trt__GetAudioDecoderConfigurationsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetAudioDecoderConfigurationsResponse(struct soap*, const char*, int, const _trt__GetAudioDecoderConfigurationsResponse *, const char*);
SOAP_FMAC3 _trt__GetAudioDecoderConfigurationsResponse * SOAP_FMAC4 soap_in__trt__GetAudioDecoderConfigurationsResponse(struct soap*, const char*, _trt__GetAudioDecoderConfigurationsResponse *, const char*);
SOAP_FMAC1 _trt__GetAudioDecoderConfigurationsResponse * SOAP_FMAC2 soap_instantiate__trt__GetAudioDecoderConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetAudioDecoderConfigurationsResponse * soap_new__trt__GetAudioDecoderConfigurationsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetAudioDecoderConfigurationsResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__GetAudioDecoderConfigurationsResponse * soap_new_req__trt__GetAudioDecoderConfigurationsResponse(
	struct soap *soap)
{
	_trt__GetAudioDecoderConfigurationsResponse *_p = soap_new__trt__GetAudioDecoderConfigurationsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__GetAudioDecoderConfigurationsResponse * soap_new_set__trt__GetAudioDecoderConfigurationsResponse(
	struct soap *soap,
	const std::vector<tt__AudioDecoderConfiguration *> & Configurations)
{
	_trt__GetAudioDecoderConfigurationsResponse *_p = soap_new__trt__GetAudioDecoderConfigurationsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetAudioDecoderConfigurationsResponse::Configurations = Configurations;
	}
	return _p;
}

inline int soap_write__trt__GetAudioDecoderConfigurationsResponse(struct soap *soap, _trt__GetAudioDecoderConfigurationsResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioDecoderConfigurationsResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetAudioDecoderConfigurationsResponse * SOAP_FMAC4 soap_get__trt__GetAudioDecoderConfigurationsResponse(struct soap*, _trt__GetAudioDecoderConfigurationsResponse *, const char*, const char*);

inline int soap_read__trt__GetAudioDecoderConfigurationsResponse(struct soap *soap, _trt__GetAudioDecoderConfigurationsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__GetAudioDecoderConfigurationsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__GetAudioDecoderConfigurations_DEFINED
#define SOAP_TYPE__trt__GetAudioDecoderConfigurations_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetAudioDecoderConfigurations(struct soap*, const char*, int, const _trt__GetAudioDecoderConfigurations *, const char*);
SOAP_FMAC3 _trt__GetAudioDecoderConfigurations * SOAP_FMAC4 soap_in__trt__GetAudioDecoderConfigurations(struct soap*, const char*, _trt__GetAudioDecoderConfigurations *, const char*);
SOAP_FMAC1 _trt__GetAudioDecoderConfigurations * SOAP_FMAC2 soap_instantiate__trt__GetAudioDecoderConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetAudioDecoderConfigurations * soap_new__trt__GetAudioDecoderConfigurations(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetAudioDecoderConfigurations(soap, n, NULL, NULL, NULL);
}

inline _trt__GetAudioDecoderConfigurations * soap_new_req__trt__GetAudioDecoderConfigurations(
	struct soap *soap)
{
	_trt__GetAudioDecoderConfigurations *_p = soap_new__trt__GetAudioDecoderConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__GetAudioDecoderConfigurations * soap_new_set__trt__GetAudioDecoderConfigurations(
	struct soap *soap)
{
	_trt__GetAudioDecoderConfigurations *_p = soap_new__trt__GetAudioDecoderConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__trt__GetAudioDecoderConfigurations(struct soap *soap, _trt__GetAudioDecoderConfigurations const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioDecoderConfigurations", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetAudioDecoderConfigurations * SOAP_FMAC4 soap_get__trt__GetAudioDecoderConfigurations(struct soap*, _trt__GetAudioDecoderConfigurations *, const char*, const char*);

inline int soap_read__trt__GetAudioDecoderConfigurations(struct soap *soap, _trt__GetAudioDecoderConfigurations *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__GetAudioDecoderConfigurations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__GetAudioOutputConfigurationsResponse_DEFINED
#define SOAP_TYPE__trt__GetAudioOutputConfigurationsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetAudioOutputConfigurationsResponse(struct soap*, const char*, int, const _trt__GetAudioOutputConfigurationsResponse *, const char*);
SOAP_FMAC3 _trt__GetAudioOutputConfigurationsResponse * SOAP_FMAC4 soap_in__trt__GetAudioOutputConfigurationsResponse(struct soap*, const char*, _trt__GetAudioOutputConfigurationsResponse *, const char*);
SOAP_FMAC1 _trt__GetAudioOutputConfigurationsResponse * SOAP_FMAC2 soap_instantiate__trt__GetAudioOutputConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetAudioOutputConfigurationsResponse * soap_new__trt__GetAudioOutputConfigurationsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetAudioOutputConfigurationsResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__GetAudioOutputConfigurationsResponse * soap_new_req__trt__GetAudioOutputConfigurationsResponse(
	struct soap *soap)
{
	_trt__GetAudioOutputConfigurationsResponse *_p = soap_new__trt__GetAudioOutputConfigurationsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__GetAudioOutputConfigurationsResponse * soap_new_set__trt__GetAudioOutputConfigurationsResponse(
	struct soap *soap,
	const std::vector<tt__AudioOutputConfiguration *> & Configurations)
{
	_trt__GetAudioOutputConfigurationsResponse *_p = soap_new__trt__GetAudioOutputConfigurationsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetAudioOutputConfigurationsResponse::Configurations = Configurations;
	}
	return _p;
}

inline int soap_write__trt__GetAudioOutputConfigurationsResponse(struct soap *soap, _trt__GetAudioOutputConfigurationsResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioOutputConfigurationsResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetAudioOutputConfigurationsResponse * SOAP_FMAC4 soap_get__trt__GetAudioOutputConfigurationsResponse(struct soap*, _trt__GetAudioOutputConfigurationsResponse *, const char*, const char*);

inline int soap_read__trt__GetAudioOutputConfigurationsResponse(struct soap *soap, _trt__GetAudioOutputConfigurationsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__GetAudioOutputConfigurationsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__GetAudioOutputConfigurations_DEFINED
#define SOAP_TYPE__trt__GetAudioOutputConfigurations_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetAudioOutputConfigurations(struct soap*, const char*, int, const _trt__GetAudioOutputConfigurations *, const char*);
SOAP_FMAC3 _trt__GetAudioOutputConfigurations * SOAP_FMAC4 soap_in__trt__GetAudioOutputConfigurations(struct soap*, const char*, _trt__GetAudioOutputConfigurations *, const char*);
SOAP_FMAC1 _trt__GetAudioOutputConfigurations * SOAP_FMAC2 soap_instantiate__trt__GetAudioOutputConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetAudioOutputConfigurations * soap_new__trt__GetAudioOutputConfigurations(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetAudioOutputConfigurations(soap, n, NULL, NULL, NULL);
}

inline _trt__GetAudioOutputConfigurations * soap_new_req__trt__GetAudioOutputConfigurations(
	struct soap *soap)
{
	_trt__GetAudioOutputConfigurations *_p = soap_new__trt__GetAudioOutputConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__GetAudioOutputConfigurations * soap_new_set__trt__GetAudioOutputConfigurations(
	struct soap *soap)
{
	_trt__GetAudioOutputConfigurations *_p = soap_new__trt__GetAudioOutputConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__trt__GetAudioOutputConfigurations(struct soap *soap, _trt__GetAudioOutputConfigurations const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioOutputConfigurations", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetAudioOutputConfigurations * SOAP_FMAC4 soap_get__trt__GetAudioOutputConfigurations(struct soap*, _trt__GetAudioOutputConfigurations *, const char*, const char*);

inline int soap_read__trt__GetAudioOutputConfigurations(struct soap *soap, _trt__GetAudioOutputConfigurations *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__GetAudioOutputConfigurations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__GetMetadataConfigurationsResponse_DEFINED
#define SOAP_TYPE__trt__GetMetadataConfigurationsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetMetadataConfigurationsResponse(struct soap*, const char*, int, const _trt__GetMetadataConfigurationsResponse *, const char*);
SOAP_FMAC3 _trt__GetMetadataConfigurationsResponse * SOAP_FMAC4 soap_in__trt__GetMetadataConfigurationsResponse(struct soap*, const char*, _trt__GetMetadataConfigurationsResponse *, const char*);
SOAP_FMAC1 _trt__GetMetadataConfigurationsResponse * SOAP_FMAC2 soap_instantiate__trt__GetMetadataConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetMetadataConfigurationsResponse * soap_new__trt__GetMetadataConfigurationsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetMetadataConfigurationsResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__GetMetadataConfigurationsResponse * soap_new_req__trt__GetMetadataConfigurationsResponse(
	struct soap *soap)
{
	_trt__GetMetadataConfigurationsResponse *_p = soap_new__trt__GetMetadataConfigurationsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__GetMetadataConfigurationsResponse * soap_new_set__trt__GetMetadataConfigurationsResponse(
	struct soap *soap,
	const std::vector<tt__MetadataConfiguration *> & Configurations)
{
	_trt__GetMetadataConfigurationsResponse *_p = soap_new__trt__GetMetadataConfigurationsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetMetadataConfigurationsResponse::Configurations = Configurations;
	}
	return _p;
}

inline int soap_write__trt__GetMetadataConfigurationsResponse(struct soap *soap, _trt__GetMetadataConfigurationsResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetMetadataConfigurationsResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetMetadataConfigurationsResponse * SOAP_FMAC4 soap_get__trt__GetMetadataConfigurationsResponse(struct soap*, _trt__GetMetadataConfigurationsResponse *, const char*, const char*);

inline int soap_read__trt__GetMetadataConfigurationsResponse(struct soap *soap, _trt__GetMetadataConfigurationsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__GetMetadataConfigurationsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__GetMetadataConfigurations_DEFINED
#define SOAP_TYPE__trt__GetMetadataConfigurations_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetMetadataConfigurations(struct soap*, const char*, int, const _trt__GetMetadataConfigurations *, const char*);
SOAP_FMAC3 _trt__GetMetadataConfigurations * SOAP_FMAC4 soap_in__trt__GetMetadataConfigurations(struct soap*, const char*, _trt__GetMetadataConfigurations *, const char*);
SOAP_FMAC1 _trt__GetMetadataConfigurations * SOAP_FMAC2 soap_instantiate__trt__GetMetadataConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetMetadataConfigurations * soap_new__trt__GetMetadataConfigurations(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetMetadataConfigurations(soap, n, NULL, NULL, NULL);
}

inline _trt__GetMetadataConfigurations * soap_new_req__trt__GetMetadataConfigurations(
	struct soap *soap)
{
	_trt__GetMetadataConfigurations *_p = soap_new__trt__GetMetadataConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__GetMetadataConfigurations * soap_new_set__trt__GetMetadataConfigurations(
	struct soap *soap)
{
	_trt__GetMetadataConfigurations *_p = soap_new__trt__GetMetadataConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__trt__GetMetadataConfigurations(struct soap *soap, _trt__GetMetadataConfigurations const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetMetadataConfigurations", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetMetadataConfigurations * SOAP_FMAC4 soap_get__trt__GetMetadataConfigurations(struct soap*, _trt__GetMetadataConfigurations *, const char*, const char*);

inline int soap_read__trt__GetMetadataConfigurations(struct soap *soap, _trt__GetMetadataConfigurations *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__GetMetadataConfigurations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__GetVideoAnalyticsConfigurationsResponse_DEFINED
#define SOAP_TYPE__trt__GetVideoAnalyticsConfigurationsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetVideoAnalyticsConfigurationsResponse(struct soap*, const char*, int, const _trt__GetVideoAnalyticsConfigurationsResponse *, const char*);
SOAP_FMAC3 _trt__GetVideoAnalyticsConfigurationsResponse * SOAP_FMAC4 soap_in__trt__GetVideoAnalyticsConfigurationsResponse(struct soap*, const char*, _trt__GetVideoAnalyticsConfigurationsResponse *, const char*);
SOAP_FMAC1 _trt__GetVideoAnalyticsConfigurationsResponse * SOAP_FMAC2 soap_instantiate__trt__GetVideoAnalyticsConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetVideoAnalyticsConfigurationsResponse * soap_new__trt__GetVideoAnalyticsConfigurationsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetVideoAnalyticsConfigurationsResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__GetVideoAnalyticsConfigurationsResponse * soap_new_req__trt__GetVideoAnalyticsConfigurationsResponse(
	struct soap *soap)
{
	_trt__GetVideoAnalyticsConfigurationsResponse *_p = soap_new__trt__GetVideoAnalyticsConfigurationsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__GetVideoAnalyticsConfigurationsResponse * soap_new_set__trt__GetVideoAnalyticsConfigurationsResponse(
	struct soap *soap,
	const std::vector<tt__VideoAnalyticsConfiguration *> & Configurations)
{
	_trt__GetVideoAnalyticsConfigurationsResponse *_p = soap_new__trt__GetVideoAnalyticsConfigurationsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetVideoAnalyticsConfigurationsResponse::Configurations = Configurations;
	}
	return _p;
}

inline int soap_write__trt__GetVideoAnalyticsConfigurationsResponse(struct soap *soap, _trt__GetVideoAnalyticsConfigurationsResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetVideoAnalyticsConfigurationsResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetVideoAnalyticsConfigurationsResponse * SOAP_FMAC4 soap_get__trt__GetVideoAnalyticsConfigurationsResponse(struct soap*, _trt__GetVideoAnalyticsConfigurationsResponse *, const char*, const char*);

inline int soap_read__trt__GetVideoAnalyticsConfigurationsResponse(struct soap *soap, _trt__GetVideoAnalyticsConfigurationsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__GetVideoAnalyticsConfigurationsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__GetVideoAnalyticsConfigurations_DEFINED
#define SOAP_TYPE__trt__GetVideoAnalyticsConfigurations_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetVideoAnalyticsConfigurations(struct soap*, const char*, int, const _trt__GetVideoAnalyticsConfigurations *, const char*);
SOAP_FMAC3 _trt__GetVideoAnalyticsConfigurations * SOAP_FMAC4 soap_in__trt__GetVideoAnalyticsConfigurations(struct soap*, const char*, _trt__GetVideoAnalyticsConfigurations *, const char*);
SOAP_FMAC1 _trt__GetVideoAnalyticsConfigurations * SOAP_FMAC2 soap_instantiate__trt__GetVideoAnalyticsConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetVideoAnalyticsConfigurations * soap_new__trt__GetVideoAnalyticsConfigurations(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetVideoAnalyticsConfigurations(soap, n, NULL, NULL, NULL);
}

inline _trt__GetVideoAnalyticsConfigurations * soap_new_req__trt__GetVideoAnalyticsConfigurations(
	struct soap *soap)
{
	_trt__GetVideoAnalyticsConfigurations *_p = soap_new__trt__GetVideoAnalyticsConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__GetVideoAnalyticsConfigurations * soap_new_set__trt__GetVideoAnalyticsConfigurations(
	struct soap *soap)
{
	_trt__GetVideoAnalyticsConfigurations *_p = soap_new__trt__GetVideoAnalyticsConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__trt__GetVideoAnalyticsConfigurations(struct soap *soap, _trt__GetVideoAnalyticsConfigurations const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetVideoAnalyticsConfigurations", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetVideoAnalyticsConfigurations * SOAP_FMAC4 soap_get__trt__GetVideoAnalyticsConfigurations(struct soap*, _trt__GetVideoAnalyticsConfigurations *, const char*, const char*);

inline int soap_read__trt__GetVideoAnalyticsConfigurations(struct soap *soap, _trt__GetVideoAnalyticsConfigurations *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__GetVideoAnalyticsConfigurations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__GetAudioSourceConfigurationsResponse_DEFINED
#define SOAP_TYPE__trt__GetAudioSourceConfigurationsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetAudioSourceConfigurationsResponse(struct soap*, const char*, int, const _trt__GetAudioSourceConfigurationsResponse *, const char*);
SOAP_FMAC3 _trt__GetAudioSourceConfigurationsResponse * SOAP_FMAC4 soap_in__trt__GetAudioSourceConfigurationsResponse(struct soap*, const char*, _trt__GetAudioSourceConfigurationsResponse *, const char*);
SOAP_FMAC1 _trt__GetAudioSourceConfigurationsResponse * SOAP_FMAC2 soap_instantiate__trt__GetAudioSourceConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetAudioSourceConfigurationsResponse * soap_new__trt__GetAudioSourceConfigurationsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetAudioSourceConfigurationsResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__GetAudioSourceConfigurationsResponse * soap_new_req__trt__GetAudioSourceConfigurationsResponse(
	struct soap *soap)
{
	_trt__GetAudioSourceConfigurationsResponse *_p = soap_new__trt__GetAudioSourceConfigurationsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__GetAudioSourceConfigurationsResponse * soap_new_set__trt__GetAudioSourceConfigurationsResponse(
	struct soap *soap,
	const std::vector<tt__AudioSourceConfiguration *> & Configurations)
{
	_trt__GetAudioSourceConfigurationsResponse *_p = soap_new__trt__GetAudioSourceConfigurationsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetAudioSourceConfigurationsResponse::Configurations = Configurations;
	}
	return _p;
}

inline int soap_write__trt__GetAudioSourceConfigurationsResponse(struct soap *soap, _trt__GetAudioSourceConfigurationsResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioSourceConfigurationsResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetAudioSourceConfigurationsResponse * SOAP_FMAC4 soap_get__trt__GetAudioSourceConfigurationsResponse(struct soap*, _trt__GetAudioSourceConfigurationsResponse *, const char*, const char*);

inline int soap_read__trt__GetAudioSourceConfigurationsResponse(struct soap *soap, _trt__GetAudioSourceConfigurationsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__GetAudioSourceConfigurationsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__GetAudioSourceConfigurations_DEFINED
#define SOAP_TYPE__trt__GetAudioSourceConfigurations_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetAudioSourceConfigurations(struct soap*, const char*, int, const _trt__GetAudioSourceConfigurations *, const char*);
SOAP_FMAC3 _trt__GetAudioSourceConfigurations * SOAP_FMAC4 soap_in__trt__GetAudioSourceConfigurations(struct soap*, const char*, _trt__GetAudioSourceConfigurations *, const char*);
SOAP_FMAC1 _trt__GetAudioSourceConfigurations * SOAP_FMAC2 soap_instantiate__trt__GetAudioSourceConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetAudioSourceConfigurations * soap_new__trt__GetAudioSourceConfigurations(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetAudioSourceConfigurations(soap, n, NULL, NULL, NULL);
}

inline _trt__GetAudioSourceConfigurations * soap_new_req__trt__GetAudioSourceConfigurations(
	struct soap *soap)
{
	_trt__GetAudioSourceConfigurations *_p = soap_new__trt__GetAudioSourceConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__GetAudioSourceConfigurations * soap_new_set__trt__GetAudioSourceConfigurations(
	struct soap *soap)
{
	_trt__GetAudioSourceConfigurations *_p = soap_new__trt__GetAudioSourceConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__trt__GetAudioSourceConfigurations(struct soap *soap, _trt__GetAudioSourceConfigurations const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioSourceConfigurations", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetAudioSourceConfigurations * SOAP_FMAC4 soap_get__trt__GetAudioSourceConfigurations(struct soap*, _trt__GetAudioSourceConfigurations *, const char*, const char*);

inline int soap_read__trt__GetAudioSourceConfigurations(struct soap *soap, _trt__GetAudioSourceConfigurations *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__GetAudioSourceConfigurations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__GetAudioEncoderConfigurationsResponse_DEFINED
#define SOAP_TYPE__trt__GetAudioEncoderConfigurationsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetAudioEncoderConfigurationsResponse(struct soap*, const char*, int, const _trt__GetAudioEncoderConfigurationsResponse *, const char*);
SOAP_FMAC3 _trt__GetAudioEncoderConfigurationsResponse * SOAP_FMAC4 soap_in__trt__GetAudioEncoderConfigurationsResponse(struct soap*, const char*, _trt__GetAudioEncoderConfigurationsResponse *, const char*);
SOAP_FMAC1 _trt__GetAudioEncoderConfigurationsResponse * SOAP_FMAC2 soap_instantiate__trt__GetAudioEncoderConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetAudioEncoderConfigurationsResponse * soap_new__trt__GetAudioEncoderConfigurationsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetAudioEncoderConfigurationsResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__GetAudioEncoderConfigurationsResponse * soap_new_req__trt__GetAudioEncoderConfigurationsResponse(
	struct soap *soap)
{
	_trt__GetAudioEncoderConfigurationsResponse *_p = soap_new__trt__GetAudioEncoderConfigurationsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__GetAudioEncoderConfigurationsResponse * soap_new_set__trt__GetAudioEncoderConfigurationsResponse(
	struct soap *soap,
	const std::vector<tt__AudioEncoderConfiguration *> & Configurations)
{
	_trt__GetAudioEncoderConfigurationsResponse *_p = soap_new__trt__GetAudioEncoderConfigurationsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetAudioEncoderConfigurationsResponse::Configurations = Configurations;
	}
	return _p;
}

inline int soap_write__trt__GetAudioEncoderConfigurationsResponse(struct soap *soap, _trt__GetAudioEncoderConfigurationsResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioEncoderConfigurationsResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetAudioEncoderConfigurationsResponse * SOAP_FMAC4 soap_get__trt__GetAudioEncoderConfigurationsResponse(struct soap*, _trt__GetAudioEncoderConfigurationsResponse *, const char*, const char*);

inline int soap_read__trt__GetAudioEncoderConfigurationsResponse(struct soap *soap, _trt__GetAudioEncoderConfigurationsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__GetAudioEncoderConfigurationsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__GetAudioEncoderConfigurations_DEFINED
#define SOAP_TYPE__trt__GetAudioEncoderConfigurations_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetAudioEncoderConfigurations(struct soap*, const char*, int, const _trt__GetAudioEncoderConfigurations *, const char*);
SOAP_FMAC3 _trt__GetAudioEncoderConfigurations * SOAP_FMAC4 soap_in__trt__GetAudioEncoderConfigurations(struct soap*, const char*, _trt__GetAudioEncoderConfigurations *, const char*);
SOAP_FMAC1 _trt__GetAudioEncoderConfigurations * SOAP_FMAC2 soap_instantiate__trt__GetAudioEncoderConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetAudioEncoderConfigurations * soap_new__trt__GetAudioEncoderConfigurations(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetAudioEncoderConfigurations(soap, n, NULL, NULL, NULL);
}

inline _trt__GetAudioEncoderConfigurations * soap_new_req__trt__GetAudioEncoderConfigurations(
	struct soap *soap)
{
	_trt__GetAudioEncoderConfigurations *_p = soap_new__trt__GetAudioEncoderConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__GetAudioEncoderConfigurations * soap_new_set__trt__GetAudioEncoderConfigurations(
	struct soap *soap)
{
	_trt__GetAudioEncoderConfigurations *_p = soap_new__trt__GetAudioEncoderConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__trt__GetAudioEncoderConfigurations(struct soap *soap, _trt__GetAudioEncoderConfigurations const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioEncoderConfigurations", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetAudioEncoderConfigurations * SOAP_FMAC4 soap_get__trt__GetAudioEncoderConfigurations(struct soap*, _trt__GetAudioEncoderConfigurations *, const char*, const char*);

inline int soap_read__trt__GetAudioEncoderConfigurations(struct soap *soap, _trt__GetAudioEncoderConfigurations *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__GetAudioEncoderConfigurations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__GetVideoSourceConfigurationsResponse_DEFINED
#define SOAP_TYPE__trt__GetVideoSourceConfigurationsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetVideoSourceConfigurationsResponse(struct soap*, const char*, int, const _trt__GetVideoSourceConfigurationsResponse *, const char*);
SOAP_FMAC3 _trt__GetVideoSourceConfigurationsResponse * SOAP_FMAC4 soap_in__trt__GetVideoSourceConfigurationsResponse(struct soap*, const char*, _trt__GetVideoSourceConfigurationsResponse *, const char*);
SOAP_FMAC1 _trt__GetVideoSourceConfigurationsResponse * SOAP_FMAC2 soap_instantiate__trt__GetVideoSourceConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetVideoSourceConfigurationsResponse * soap_new__trt__GetVideoSourceConfigurationsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetVideoSourceConfigurationsResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__GetVideoSourceConfigurationsResponse * soap_new_req__trt__GetVideoSourceConfigurationsResponse(
	struct soap *soap)
{
	_trt__GetVideoSourceConfigurationsResponse *_p = soap_new__trt__GetVideoSourceConfigurationsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__GetVideoSourceConfigurationsResponse * soap_new_set__trt__GetVideoSourceConfigurationsResponse(
	struct soap *soap,
	const std::vector<tt__VideoSourceConfiguration *> & Configurations)
{
	_trt__GetVideoSourceConfigurationsResponse *_p = soap_new__trt__GetVideoSourceConfigurationsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetVideoSourceConfigurationsResponse::Configurations = Configurations;
	}
	return _p;
}

inline int soap_write__trt__GetVideoSourceConfigurationsResponse(struct soap *soap, _trt__GetVideoSourceConfigurationsResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetVideoSourceConfigurationsResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetVideoSourceConfigurationsResponse * SOAP_FMAC4 soap_get__trt__GetVideoSourceConfigurationsResponse(struct soap*, _trt__GetVideoSourceConfigurationsResponse *, const char*, const char*);

inline int soap_read__trt__GetVideoSourceConfigurationsResponse(struct soap *soap, _trt__GetVideoSourceConfigurationsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__GetVideoSourceConfigurationsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__GetVideoSourceConfigurations_DEFINED
#define SOAP_TYPE__trt__GetVideoSourceConfigurations_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetVideoSourceConfigurations(struct soap*, const char*, int, const _trt__GetVideoSourceConfigurations *, const char*);
SOAP_FMAC3 _trt__GetVideoSourceConfigurations * SOAP_FMAC4 soap_in__trt__GetVideoSourceConfigurations(struct soap*, const char*, _trt__GetVideoSourceConfigurations *, const char*);
SOAP_FMAC1 _trt__GetVideoSourceConfigurations * SOAP_FMAC2 soap_instantiate__trt__GetVideoSourceConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetVideoSourceConfigurations * soap_new__trt__GetVideoSourceConfigurations(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetVideoSourceConfigurations(soap, n, NULL, NULL, NULL);
}

inline _trt__GetVideoSourceConfigurations * soap_new_req__trt__GetVideoSourceConfigurations(
	struct soap *soap)
{
	_trt__GetVideoSourceConfigurations *_p = soap_new__trt__GetVideoSourceConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__GetVideoSourceConfigurations * soap_new_set__trt__GetVideoSourceConfigurations(
	struct soap *soap)
{
	_trt__GetVideoSourceConfigurations *_p = soap_new__trt__GetVideoSourceConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__trt__GetVideoSourceConfigurations(struct soap *soap, _trt__GetVideoSourceConfigurations const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetVideoSourceConfigurations", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetVideoSourceConfigurations * SOAP_FMAC4 soap_get__trt__GetVideoSourceConfigurations(struct soap*, _trt__GetVideoSourceConfigurations *, const char*, const char*);

inline int soap_read__trt__GetVideoSourceConfigurations(struct soap *soap, _trt__GetVideoSourceConfigurations *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__GetVideoSourceConfigurations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__GetVideoEncoderConfigurationsResponse_DEFINED
#define SOAP_TYPE__trt__GetVideoEncoderConfigurationsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetVideoEncoderConfigurationsResponse(struct soap*, const char*, int, const _trt__GetVideoEncoderConfigurationsResponse *, const char*);
SOAP_FMAC3 _trt__GetVideoEncoderConfigurationsResponse * SOAP_FMAC4 soap_in__trt__GetVideoEncoderConfigurationsResponse(struct soap*, const char*, _trt__GetVideoEncoderConfigurationsResponse *, const char*);
SOAP_FMAC1 _trt__GetVideoEncoderConfigurationsResponse * SOAP_FMAC2 soap_instantiate__trt__GetVideoEncoderConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetVideoEncoderConfigurationsResponse * soap_new__trt__GetVideoEncoderConfigurationsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetVideoEncoderConfigurationsResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__GetVideoEncoderConfigurationsResponse * soap_new_req__trt__GetVideoEncoderConfigurationsResponse(
	struct soap *soap)
{
	_trt__GetVideoEncoderConfigurationsResponse *_p = soap_new__trt__GetVideoEncoderConfigurationsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__GetVideoEncoderConfigurationsResponse * soap_new_set__trt__GetVideoEncoderConfigurationsResponse(
	struct soap *soap,
	const std::vector<tt__VideoEncoderConfiguration *> & Configurations)
{
	_trt__GetVideoEncoderConfigurationsResponse *_p = soap_new__trt__GetVideoEncoderConfigurationsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetVideoEncoderConfigurationsResponse::Configurations = Configurations;
	}
	return _p;
}

inline int soap_write__trt__GetVideoEncoderConfigurationsResponse(struct soap *soap, _trt__GetVideoEncoderConfigurationsResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetVideoEncoderConfigurationsResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetVideoEncoderConfigurationsResponse * SOAP_FMAC4 soap_get__trt__GetVideoEncoderConfigurationsResponse(struct soap*, _trt__GetVideoEncoderConfigurationsResponse *, const char*, const char*);

inline int soap_read__trt__GetVideoEncoderConfigurationsResponse(struct soap *soap, _trt__GetVideoEncoderConfigurationsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__GetVideoEncoderConfigurationsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__GetVideoEncoderConfigurations_DEFINED
#define SOAP_TYPE__trt__GetVideoEncoderConfigurations_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetVideoEncoderConfigurations(struct soap*, const char*, int, const _trt__GetVideoEncoderConfigurations *, const char*);
SOAP_FMAC3 _trt__GetVideoEncoderConfigurations * SOAP_FMAC4 soap_in__trt__GetVideoEncoderConfigurations(struct soap*, const char*, _trt__GetVideoEncoderConfigurations *, const char*);
SOAP_FMAC1 _trt__GetVideoEncoderConfigurations * SOAP_FMAC2 soap_instantiate__trt__GetVideoEncoderConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetVideoEncoderConfigurations * soap_new__trt__GetVideoEncoderConfigurations(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetVideoEncoderConfigurations(soap, n, NULL, NULL, NULL);
}

inline _trt__GetVideoEncoderConfigurations * soap_new_req__trt__GetVideoEncoderConfigurations(
	struct soap *soap)
{
	_trt__GetVideoEncoderConfigurations *_p = soap_new__trt__GetVideoEncoderConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__GetVideoEncoderConfigurations * soap_new_set__trt__GetVideoEncoderConfigurations(
	struct soap *soap)
{
	_trt__GetVideoEncoderConfigurations *_p = soap_new__trt__GetVideoEncoderConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__trt__GetVideoEncoderConfigurations(struct soap *soap, _trt__GetVideoEncoderConfigurations const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetVideoEncoderConfigurations", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetVideoEncoderConfigurations * SOAP_FMAC4 soap_get__trt__GetVideoEncoderConfigurations(struct soap*, _trt__GetVideoEncoderConfigurations *, const char*, const char*);

inline int soap_read__trt__GetVideoEncoderConfigurations(struct soap *soap, _trt__GetVideoEncoderConfigurations *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__GetVideoEncoderConfigurations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__DeleteProfileResponse_DEFINED
#define SOAP_TYPE__trt__DeleteProfileResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__DeleteProfileResponse(struct soap*, const char*, int, const _trt__DeleteProfileResponse *, const char*);
SOAP_FMAC3 _trt__DeleteProfileResponse * SOAP_FMAC4 soap_in__trt__DeleteProfileResponse(struct soap*, const char*, _trt__DeleteProfileResponse *, const char*);
SOAP_FMAC1 _trt__DeleteProfileResponse * SOAP_FMAC2 soap_instantiate__trt__DeleteProfileResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__DeleteProfileResponse * soap_new__trt__DeleteProfileResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__DeleteProfileResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__DeleteProfileResponse * soap_new_req__trt__DeleteProfileResponse(
	struct soap *soap)
{
	_trt__DeleteProfileResponse *_p = soap_new__trt__DeleteProfileResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__DeleteProfileResponse * soap_new_set__trt__DeleteProfileResponse(
	struct soap *soap)
{
	_trt__DeleteProfileResponse *_p = soap_new__trt__DeleteProfileResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__trt__DeleteProfileResponse(struct soap *soap, _trt__DeleteProfileResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:DeleteProfileResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__DeleteProfileResponse * SOAP_FMAC4 soap_get__trt__DeleteProfileResponse(struct soap*, _trt__DeleteProfileResponse *, const char*, const char*);

inline int soap_read__trt__DeleteProfileResponse(struct soap *soap, _trt__DeleteProfileResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__DeleteProfileResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__DeleteProfile_DEFINED
#define SOAP_TYPE__trt__DeleteProfile_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__DeleteProfile(struct soap*, const char*, int, const _trt__DeleteProfile *, const char*);
SOAP_FMAC3 _trt__DeleteProfile * SOAP_FMAC4 soap_in__trt__DeleteProfile(struct soap*, const char*, _trt__DeleteProfile *, const char*);
SOAP_FMAC1 _trt__DeleteProfile * SOAP_FMAC2 soap_instantiate__trt__DeleteProfile(struct soap*, int, const char*, const char*, size_t*);

inline _trt__DeleteProfile * soap_new__trt__DeleteProfile(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__DeleteProfile(soap, n, NULL, NULL, NULL);
}

inline _trt__DeleteProfile * soap_new_req__trt__DeleteProfile(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_trt__DeleteProfile *_p = soap_new__trt__DeleteProfile(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__DeleteProfile::ProfileToken = ProfileToken;
	}
	return _p;
}

inline _trt__DeleteProfile * soap_new_set__trt__DeleteProfile(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_trt__DeleteProfile *_p = soap_new__trt__DeleteProfile(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__DeleteProfile::ProfileToken = ProfileToken;
	}
	return _p;
}

inline int soap_write__trt__DeleteProfile(struct soap *soap, _trt__DeleteProfile const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:DeleteProfile", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__DeleteProfile * SOAP_FMAC4 soap_get__trt__DeleteProfile(struct soap*, _trt__DeleteProfile *, const char*, const char*);

inline int soap_read__trt__DeleteProfile(struct soap *soap, _trt__DeleteProfile *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__DeleteProfile(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__RemoveAudioDecoderConfigurationResponse_DEFINED
#define SOAP_TYPE__trt__RemoveAudioDecoderConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__RemoveAudioDecoderConfigurationResponse(struct soap*, const char*, int, const _trt__RemoveAudioDecoderConfigurationResponse *, const char*);
SOAP_FMAC3 _trt__RemoveAudioDecoderConfigurationResponse * SOAP_FMAC4 soap_in__trt__RemoveAudioDecoderConfigurationResponse(struct soap*, const char*, _trt__RemoveAudioDecoderConfigurationResponse *, const char*);
SOAP_FMAC1 _trt__RemoveAudioDecoderConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__RemoveAudioDecoderConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__RemoveAudioDecoderConfigurationResponse * soap_new__trt__RemoveAudioDecoderConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__RemoveAudioDecoderConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__RemoveAudioDecoderConfigurationResponse * soap_new_req__trt__RemoveAudioDecoderConfigurationResponse(
	struct soap *soap)
{
	_trt__RemoveAudioDecoderConfigurationResponse *_p = soap_new__trt__RemoveAudioDecoderConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__RemoveAudioDecoderConfigurationResponse * soap_new_set__trt__RemoveAudioDecoderConfigurationResponse(
	struct soap *soap)
{
	_trt__RemoveAudioDecoderConfigurationResponse *_p = soap_new__trt__RemoveAudioDecoderConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__trt__RemoveAudioDecoderConfigurationResponse(struct soap *soap, _trt__RemoveAudioDecoderConfigurationResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:RemoveAudioDecoderConfigurationResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__RemoveAudioDecoderConfigurationResponse * SOAP_FMAC4 soap_get__trt__RemoveAudioDecoderConfigurationResponse(struct soap*, _trt__RemoveAudioDecoderConfigurationResponse *, const char*, const char*);

inline int soap_read__trt__RemoveAudioDecoderConfigurationResponse(struct soap *soap, _trt__RemoveAudioDecoderConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__RemoveAudioDecoderConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__RemoveAudioDecoderConfiguration_DEFINED
#define SOAP_TYPE__trt__RemoveAudioDecoderConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__RemoveAudioDecoderConfiguration(struct soap*, const char*, int, const _trt__RemoveAudioDecoderConfiguration *, const char*);
SOAP_FMAC3 _trt__RemoveAudioDecoderConfiguration * SOAP_FMAC4 soap_in__trt__RemoveAudioDecoderConfiguration(struct soap*, const char*, _trt__RemoveAudioDecoderConfiguration *, const char*);
SOAP_FMAC1 _trt__RemoveAudioDecoderConfiguration * SOAP_FMAC2 soap_instantiate__trt__RemoveAudioDecoderConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _trt__RemoveAudioDecoderConfiguration * soap_new__trt__RemoveAudioDecoderConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__RemoveAudioDecoderConfiguration(soap, n, NULL, NULL, NULL);
}

inline _trt__RemoveAudioDecoderConfiguration * soap_new_req__trt__RemoveAudioDecoderConfiguration(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_trt__RemoveAudioDecoderConfiguration *_p = soap_new__trt__RemoveAudioDecoderConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__RemoveAudioDecoderConfiguration::ProfileToken = ProfileToken;
	}
	return _p;
}

inline _trt__RemoveAudioDecoderConfiguration * soap_new_set__trt__RemoveAudioDecoderConfiguration(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_trt__RemoveAudioDecoderConfiguration *_p = soap_new__trt__RemoveAudioDecoderConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__RemoveAudioDecoderConfiguration::ProfileToken = ProfileToken;
	}
	return _p;
}

inline int soap_write__trt__RemoveAudioDecoderConfiguration(struct soap *soap, _trt__RemoveAudioDecoderConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:RemoveAudioDecoderConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__RemoveAudioDecoderConfiguration * SOAP_FMAC4 soap_get__trt__RemoveAudioDecoderConfiguration(struct soap*, _trt__RemoveAudioDecoderConfiguration *, const char*, const char*);

inline int soap_read__trt__RemoveAudioDecoderConfiguration(struct soap *soap, _trt__RemoveAudioDecoderConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__RemoveAudioDecoderConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__AddAudioDecoderConfigurationResponse_DEFINED
#define SOAP_TYPE__trt__AddAudioDecoderConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__AddAudioDecoderConfigurationResponse(struct soap*, const char*, int, const _trt__AddAudioDecoderConfigurationResponse *, const char*);
SOAP_FMAC3 _trt__AddAudioDecoderConfigurationResponse * SOAP_FMAC4 soap_in__trt__AddAudioDecoderConfigurationResponse(struct soap*, const char*, _trt__AddAudioDecoderConfigurationResponse *, const char*);
SOAP_FMAC1 _trt__AddAudioDecoderConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__AddAudioDecoderConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__AddAudioDecoderConfigurationResponse * soap_new__trt__AddAudioDecoderConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__AddAudioDecoderConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__AddAudioDecoderConfigurationResponse * soap_new_req__trt__AddAudioDecoderConfigurationResponse(
	struct soap *soap)
{
	_trt__AddAudioDecoderConfigurationResponse *_p = soap_new__trt__AddAudioDecoderConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__AddAudioDecoderConfigurationResponse * soap_new_set__trt__AddAudioDecoderConfigurationResponse(
	struct soap *soap)
{
	_trt__AddAudioDecoderConfigurationResponse *_p = soap_new__trt__AddAudioDecoderConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__trt__AddAudioDecoderConfigurationResponse(struct soap *soap, _trt__AddAudioDecoderConfigurationResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:AddAudioDecoderConfigurationResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__AddAudioDecoderConfigurationResponse * SOAP_FMAC4 soap_get__trt__AddAudioDecoderConfigurationResponse(struct soap*, _trt__AddAudioDecoderConfigurationResponse *, const char*, const char*);

inline int soap_read__trt__AddAudioDecoderConfigurationResponse(struct soap *soap, _trt__AddAudioDecoderConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__AddAudioDecoderConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__AddAudioDecoderConfiguration_DEFINED
#define SOAP_TYPE__trt__AddAudioDecoderConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__AddAudioDecoderConfiguration(struct soap*, const char*, int, const _trt__AddAudioDecoderConfiguration *, const char*);
SOAP_FMAC3 _trt__AddAudioDecoderConfiguration * SOAP_FMAC4 soap_in__trt__AddAudioDecoderConfiguration(struct soap*, const char*, _trt__AddAudioDecoderConfiguration *, const char*);
SOAP_FMAC1 _trt__AddAudioDecoderConfiguration * SOAP_FMAC2 soap_instantiate__trt__AddAudioDecoderConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _trt__AddAudioDecoderConfiguration * soap_new__trt__AddAudioDecoderConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__AddAudioDecoderConfiguration(soap, n, NULL, NULL, NULL);
}

inline _trt__AddAudioDecoderConfiguration * soap_new_req__trt__AddAudioDecoderConfiguration(
	struct soap *soap,
	const std::string& ProfileToken,
	const std::string& ConfigurationToken)
{
	_trt__AddAudioDecoderConfiguration *_p = soap_new__trt__AddAudioDecoderConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__AddAudioDecoderConfiguration::ProfileToken = ProfileToken;
		_p->_trt__AddAudioDecoderConfiguration::ConfigurationToken = ConfigurationToken;
	}
	return _p;
}

inline _trt__AddAudioDecoderConfiguration * soap_new_set__trt__AddAudioDecoderConfiguration(
	struct soap *soap,
	const std::string& ProfileToken,
	const std::string& ConfigurationToken)
{
	_trt__AddAudioDecoderConfiguration *_p = soap_new__trt__AddAudioDecoderConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__AddAudioDecoderConfiguration::ProfileToken = ProfileToken;
		_p->_trt__AddAudioDecoderConfiguration::ConfigurationToken = ConfigurationToken;
	}
	return _p;
}

inline int soap_write__trt__AddAudioDecoderConfiguration(struct soap *soap, _trt__AddAudioDecoderConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:AddAudioDecoderConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__AddAudioDecoderConfiguration * SOAP_FMAC4 soap_get__trt__AddAudioDecoderConfiguration(struct soap*, _trt__AddAudioDecoderConfiguration *, const char*, const char*);

inline int soap_read__trt__AddAudioDecoderConfiguration(struct soap *soap, _trt__AddAudioDecoderConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__AddAudioDecoderConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__RemoveAudioOutputConfigurationResponse_DEFINED
#define SOAP_TYPE__trt__RemoveAudioOutputConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__RemoveAudioOutputConfigurationResponse(struct soap*, const char*, int, const _trt__RemoveAudioOutputConfigurationResponse *, const char*);
SOAP_FMAC3 _trt__RemoveAudioOutputConfigurationResponse * SOAP_FMAC4 soap_in__trt__RemoveAudioOutputConfigurationResponse(struct soap*, const char*, _trt__RemoveAudioOutputConfigurationResponse *, const char*);
SOAP_FMAC1 _trt__RemoveAudioOutputConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__RemoveAudioOutputConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__RemoveAudioOutputConfigurationResponse * soap_new__trt__RemoveAudioOutputConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__RemoveAudioOutputConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__RemoveAudioOutputConfigurationResponse * soap_new_req__trt__RemoveAudioOutputConfigurationResponse(
	struct soap *soap)
{
	_trt__RemoveAudioOutputConfigurationResponse *_p = soap_new__trt__RemoveAudioOutputConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__RemoveAudioOutputConfigurationResponse * soap_new_set__trt__RemoveAudioOutputConfigurationResponse(
	struct soap *soap)
{
	_trt__RemoveAudioOutputConfigurationResponse *_p = soap_new__trt__RemoveAudioOutputConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__trt__RemoveAudioOutputConfigurationResponse(struct soap *soap, _trt__RemoveAudioOutputConfigurationResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:RemoveAudioOutputConfigurationResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__RemoveAudioOutputConfigurationResponse * SOAP_FMAC4 soap_get__trt__RemoveAudioOutputConfigurationResponse(struct soap*, _trt__RemoveAudioOutputConfigurationResponse *, const char*, const char*);

inline int soap_read__trt__RemoveAudioOutputConfigurationResponse(struct soap *soap, _trt__RemoveAudioOutputConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__RemoveAudioOutputConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__RemoveAudioOutputConfiguration_DEFINED
#define SOAP_TYPE__trt__RemoveAudioOutputConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__RemoveAudioOutputConfiguration(struct soap*, const char*, int, const _trt__RemoveAudioOutputConfiguration *, const char*);
SOAP_FMAC3 _trt__RemoveAudioOutputConfiguration * SOAP_FMAC4 soap_in__trt__RemoveAudioOutputConfiguration(struct soap*, const char*, _trt__RemoveAudioOutputConfiguration *, const char*);
SOAP_FMAC1 _trt__RemoveAudioOutputConfiguration * SOAP_FMAC2 soap_instantiate__trt__RemoveAudioOutputConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _trt__RemoveAudioOutputConfiguration * soap_new__trt__RemoveAudioOutputConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__RemoveAudioOutputConfiguration(soap, n, NULL, NULL, NULL);
}

inline _trt__RemoveAudioOutputConfiguration * soap_new_req__trt__RemoveAudioOutputConfiguration(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_trt__RemoveAudioOutputConfiguration *_p = soap_new__trt__RemoveAudioOutputConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__RemoveAudioOutputConfiguration::ProfileToken = ProfileToken;
	}
	return _p;
}

inline _trt__RemoveAudioOutputConfiguration * soap_new_set__trt__RemoveAudioOutputConfiguration(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_trt__RemoveAudioOutputConfiguration *_p = soap_new__trt__RemoveAudioOutputConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__RemoveAudioOutputConfiguration::ProfileToken = ProfileToken;
	}
	return _p;
}

inline int soap_write__trt__RemoveAudioOutputConfiguration(struct soap *soap, _trt__RemoveAudioOutputConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:RemoveAudioOutputConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__RemoveAudioOutputConfiguration * SOAP_FMAC4 soap_get__trt__RemoveAudioOutputConfiguration(struct soap*, _trt__RemoveAudioOutputConfiguration *, const char*, const char*);

inline int soap_read__trt__RemoveAudioOutputConfiguration(struct soap *soap, _trt__RemoveAudioOutputConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__RemoveAudioOutputConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__AddAudioOutputConfigurationResponse_DEFINED
#define SOAP_TYPE__trt__AddAudioOutputConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__AddAudioOutputConfigurationResponse(struct soap*, const char*, int, const _trt__AddAudioOutputConfigurationResponse *, const char*);
SOAP_FMAC3 _trt__AddAudioOutputConfigurationResponse * SOAP_FMAC4 soap_in__trt__AddAudioOutputConfigurationResponse(struct soap*, const char*, _trt__AddAudioOutputConfigurationResponse *, const char*);
SOAP_FMAC1 _trt__AddAudioOutputConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__AddAudioOutputConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__AddAudioOutputConfigurationResponse * soap_new__trt__AddAudioOutputConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__AddAudioOutputConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__AddAudioOutputConfigurationResponse * soap_new_req__trt__AddAudioOutputConfigurationResponse(
	struct soap *soap)
{
	_trt__AddAudioOutputConfigurationResponse *_p = soap_new__trt__AddAudioOutputConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__AddAudioOutputConfigurationResponse * soap_new_set__trt__AddAudioOutputConfigurationResponse(
	struct soap *soap)
{
	_trt__AddAudioOutputConfigurationResponse *_p = soap_new__trt__AddAudioOutputConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__trt__AddAudioOutputConfigurationResponse(struct soap *soap, _trt__AddAudioOutputConfigurationResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:AddAudioOutputConfigurationResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__AddAudioOutputConfigurationResponse * SOAP_FMAC4 soap_get__trt__AddAudioOutputConfigurationResponse(struct soap*, _trt__AddAudioOutputConfigurationResponse *, const char*, const char*);

inline int soap_read__trt__AddAudioOutputConfigurationResponse(struct soap *soap, _trt__AddAudioOutputConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__AddAudioOutputConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__AddAudioOutputConfiguration_DEFINED
#define SOAP_TYPE__trt__AddAudioOutputConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__AddAudioOutputConfiguration(struct soap*, const char*, int, const _trt__AddAudioOutputConfiguration *, const char*);
SOAP_FMAC3 _trt__AddAudioOutputConfiguration * SOAP_FMAC4 soap_in__trt__AddAudioOutputConfiguration(struct soap*, const char*, _trt__AddAudioOutputConfiguration *, const char*);
SOAP_FMAC1 _trt__AddAudioOutputConfiguration * SOAP_FMAC2 soap_instantiate__trt__AddAudioOutputConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _trt__AddAudioOutputConfiguration * soap_new__trt__AddAudioOutputConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__AddAudioOutputConfiguration(soap, n, NULL, NULL, NULL);
}

inline _trt__AddAudioOutputConfiguration * soap_new_req__trt__AddAudioOutputConfiguration(
	struct soap *soap,
	const std::string& ProfileToken,
	const std::string& ConfigurationToken)
{
	_trt__AddAudioOutputConfiguration *_p = soap_new__trt__AddAudioOutputConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__AddAudioOutputConfiguration::ProfileToken = ProfileToken;
		_p->_trt__AddAudioOutputConfiguration::ConfigurationToken = ConfigurationToken;
	}
	return _p;
}

inline _trt__AddAudioOutputConfiguration * soap_new_set__trt__AddAudioOutputConfiguration(
	struct soap *soap,
	const std::string& ProfileToken,
	const std::string& ConfigurationToken)
{
	_trt__AddAudioOutputConfiguration *_p = soap_new__trt__AddAudioOutputConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__AddAudioOutputConfiguration::ProfileToken = ProfileToken;
		_p->_trt__AddAudioOutputConfiguration::ConfigurationToken = ConfigurationToken;
	}
	return _p;
}

inline int soap_write__trt__AddAudioOutputConfiguration(struct soap *soap, _trt__AddAudioOutputConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:AddAudioOutputConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__AddAudioOutputConfiguration * SOAP_FMAC4 soap_get__trt__AddAudioOutputConfiguration(struct soap*, _trt__AddAudioOutputConfiguration *, const char*, const char*);

inline int soap_read__trt__AddAudioOutputConfiguration(struct soap *soap, _trt__AddAudioOutputConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__AddAudioOutputConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__RemoveMetadataConfigurationResponse_DEFINED
#define SOAP_TYPE__trt__RemoveMetadataConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__RemoveMetadataConfigurationResponse(struct soap*, const char*, int, const _trt__RemoveMetadataConfigurationResponse *, const char*);
SOAP_FMAC3 _trt__RemoveMetadataConfigurationResponse * SOAP_FMAC4 soap_in__trt__RemoveMetadataConfigurationResponse(struct soap*, const char*, _trt__RemoveMetadataConfigurationResponse *, const char*);
SOAP_FMAC1 _trt__RemoveMetadataConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__RemoveMetadataConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__RemoveMetadataConfigurationResponse * soap_new__trt__RemoveMetadataConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__RemoveMetadataConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__RemoveMetadataConfigurationResponse * soap_new_req__trt__RemoveMetadataConfigurationResponse(
	struct soap *soap)
{
	_trt__RemoveMetadataConfigurationResponse *_p = soap_new__trt__RemoveMetadataConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__RemoveMetadataConfigurationResponse * soap_new_set__trt__RemoveMetadataConfigurationResponse(
	struct soap *soap)
{
	_trt__RemoveMetadataConfigurationResponse *_p = soap_new__trt__RemoveMetadataConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__trt__RemoveMetadataConfigurationResponse(struct soap *soap, _trt__RemoveMetadataConfigurationResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:RemoveMetadataConfigurationResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__RemoveMetadataConfigurationResponse * SOAP_FMAC4 soap_get__trt__RemoveMetadataConfigurationResponse(struct soap*, _trt__RemoveMetadataConfigurationResponse *, const char*, const char*);

inline int soap_read__trt__RemoveMetadataConfigurationResponse(struct soap *soap, _trt__RemoveMetadataConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__RemoveMetadataConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__RemoveMetadataConfiguration_DEFINED
#define SOAP_TYPE__trt__RemoveMetadataConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__RemoveMetadataConfiguration(struct soap*, const char*, int, const _trt__RemoveMetadataConfiguration *, const char*);
SOAP_FMAC3 _trt__RemoveMetadataConfiguration * SOAP_FMAC4 soap_in__trt__RemoveMetadataConfiguration(struct soap*, const char*, _trt__RemoveMetadataConfiguration *, const char*);
SOAP_FMAC1 _trt__RemoveMetadataConfiguration * SOAP_FMAC2 soap_instantiate__trt__RemoveMetadataConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _trt__RemoveMetadataConfiguration * soap_new__trt__RemoveMetadataConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__RemoveMetadataConfiguration(soap, n, NULL, NULL, NULL);
}

inline _trt__RemoveMetadataConfiguration * soap_new_req__trt__RemoveMetadataConfiguration(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_trt__RemoveMetadataConfiguration *_p = soap_new__trt__RemoveMetadataConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__RemoveMetadataConfiguration::ProfileToken = ProfileToken;
	}
	return _p;
}

inline _trt__RemoveMetadataConfiguration * soap_new_set__trt__RemoveMetadataConfiguration(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_trt__RemoveMetadataConfiguration *_p = soap_new__trt__RemoveMetadataConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__RemoveMetadataConfiguration::ProfileToken = ProfileToken;
	}
	return _p;
}

inline int soap_write__trt__RemoveMetadataConfiguration(struct soap *soap, _trt__RemoveMetadataConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:RemoveMetadataConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__RemoveMetadataConfiguration * SOAP_FMAC4 soap_get__trt__RemoveMetadataConfiguration(struct soap*, _trt__RemoveMetadataConfiguration *, const char*, const char*);

inline int soap_read__trt__RemoveMetadataConfiguration(struct soap *soap, _trt__RemoveMetadataConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__RemoveMetadataConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__AddMetadataConfigurationResponse_DEFINED
#define SOAP_TYPE__trt__AddMetadataConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__AddMetadataConfigurationResponse(struct soap*, const char*, int, const _trt__AddMetadataConfigurationResponse *, const char*);
SOAP_FMAC3 _trt__AddMetadataConfigurationResponse * SOAP_FMAC4 soap_in__trt__AddMetadataConfigurationResponse(struct soap*, const char*, _trt__AddMetadataConfigurationResponse *, const char*);
SOAP_FMAC1 _trt__AddMetadataConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__AddMetadataConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__AddMetadataConfigurationResponse * soap_new__trt__AddMetadataConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__AddMetadataConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__AddMetadataConfigurationResponse * soap_new_req__trt__AddMetadataConfigurationResponse(
	struct soap *soap)
{
	_trt__AddMetadataConfigurationResponse *_p = soap_new__trt__AddMetadataConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__AddMetadataConfigurationResponse * soap_new_set__trt__AddMetadataConfigurationResponse(
	struct soap *soap)
{
	_trt__AddMetadataConfigurationResponse *_p = soap_new__trt__AddMetadataConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__trt__AddMetadataConfigurationResponse(struct soap *soap, _trt__AddMetadataConfigurationResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:AddMetadataConfigurationResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__AddMetadataConfigurationResponse * SOAP_FMAC4 soap_get__trt__AddMetadataConfigurationResponse(struct soap*, _trt__AddMetadataConfigurationResponse *, const char*, const char*);

inline int soap_read__trt__AddMetadataConfigurationResponse(struct soap *soap, _trt__AddMetadataConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__AddMetadataConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__AddMetadataConfiguration_DEFINED
#define SOAP_TYPE__trt__AddMetadataConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__AddMetadataConfiguration(struct soap*, const char*, int, const _trt__AddMetadataConfiguration *, const char*);
SOAP_FMAC3 _trt__AddMetadataConfiguration * SOAP_FMAC4 soap_in__trt__AddMetadataConfiguration(struct soap*, const char*, _trt__AddMetadataConfiguration *, const char*);
SOAP_FMAC1 _trt__AddMetadataConfiguration * SOAP_FMAC2 soap_instantiate__trt__AddMetadataConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _trt__AddMetadataConfiguration * soap_new__trt__AddMetadataConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__AddMetadataConfiguration(soap, n, NULL, NULL, NULL);
}

inline _trt__AddMetadataConfiguration * soap_new_req__trt__AddMetadataConfiguration(
	struct soap *soap,
	const std::string& ProfileToken,
	const std::string& ConfigurationToken)
{
	_trt__AddMetadataConfiguration *_p = soap_new__trt__AddMetadataConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__AddMetadataConfiguration::ProfileToken = ProfileToken;
		_p->_trt__AddMetadataConfiguration::ConfigurationToken = ConfigurationToken;
	}
	return _p;
}

inline _trt__AddMetadataConfiguration * soap_new_set__trt__AddMetadataConfiguration(
	struct soap *soap,
	const std::string& ProfileToken,
	const std::string& ConfigurationToken)
{
	_trt__AddMetadataConfiguration *_p = soap_new__trt__AddMetadataConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__AddMetadataConfiguration::ProfileToken = ProfileToken;
		_p->_trt__AddMetadataConfiguration::ConfigurationToken = ConfigurationToken;
	}
	return _p;
}

inline int soap_write__trt__AddMetadataConfiguration(struct soap *soap, _trt__AddMetadataConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:AddMetadataConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__AddMetadataConfiguration * SOAP_FMAC4 soap_get__trt__AddMetadataConfiguration(struct soap*, _trt__AddMetadataConfiguration *, const char*, const char*);

inline int soap_read__trt__AddMetadataConfiguration(struct soap *soap, _trt__AddMetadataConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__AddMetadataConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__RemoveVideoAnalyticsConfigurationResponse_DEFINED
#define SOAP_TYPE__trt__RemoveVideoAnalyticsConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__RemoveVideoAnalyticsConfigurationResponse(struct soap*, const char*, int, const _trt__RemoveVideoAnalyticsConfigurationResponse *, const char*);
SOAP_FMAC3 _trt__RemoveVideoAnalyticsConfigurationResponse * SOAP_FMAC4 soap_in__trt__RemoveVideoAnalyticsConfigurationResponse(struct soap*, const char*, _trt__RemoveVideoAnalyticsConfigurationResponse *, const char*);
SOAP_FMAC1 _trt__RemoveVideoAnalyticsConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__RemoveVideoAnalyticsConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__RemoveVideoAnalyticsConfigurationResponse * soap_new__trt__RemoveVideoAnalyticsConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__RemoveVideoAnalyticsConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__RemoveVideoAnalyticsConfigurationResponse * soap_new_req__trt__RemoveVideoAnalyticsConfigurationResponse(
	struct soap *soap)
{
	_trt__RemoveVideoAnalyticsConfigurationResponse *_p = soap_new__trt__RemoveVideoAnalyticsConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__RemoveVideoAnalyticsConfigurationResponse * soap_new_set__trt__RemoveVideoAnalyticsConfigurationResponse(
	struct soap *soap)
{
	_trt__RemoveVideoAnalyticsConfigurationResponse *_p = soap_new__trt__RemoveVideoAnalyticsConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__trt__RemoveVideoAnalyticsConfigurationResponse(struct soap *soap, _trt__RemoveVideoAnalyticsConfigurationResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:RemoveVideoAnalyticsConfigurationResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__RemoveVideoAnalyticsConfigurationResponse * SOAP_FMAC4 soap_get__trt__RemoveVideoAnalyticsConfigurationResponse(struct soap*, _trt__RemoveVideoAnalyticsConfigurationResponse *, const char*, const char*);

inline int soap_read__trt__RemoveVideoAnalyticsConfigurationResponse(struct soap *soap, _trt__RemoveVideoAnalyticsConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__RemoveVideoAnalyticsConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__RemoveVideoAnalyticsConfiguration_DEFINED
#define SOAP_TYPE__trt__RemoveVideoAnalyticsConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__RemoveVideoAnalyticsConfiguration(struct soap*, const char*, int, const _trt__RemoveVideoAnalyticsConfiguration *, const char*);
SOAP_FMAC3 _trt__RemoveVideoAnalyticsConfiguration * SOAP_FMAC4 soap_in__trt__RemoveVideoAnalyticsConfiguration(struct soap*, const char*, _trt__RemoveVideoAnalyticsConfiguration *, const char*);
SOAP_FMAC1 _trt__RemoveVideoAnalyticsConfiguration * SOAP_FMAC2 soap_instantiate__trt__RemoveVideoAnalyticsConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _trt__RemoveVideoAnalyticsConfiguration * soap_new__trt__RemoveVideoAnalyticsConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__RemoveVideoAnalyticsConfiguration(soap, n, NULL, NULL, NULL);
}

inline _trt__RemoveVideoAnalyticsConfiguration * soap_new_req__trt__RemoveVideoAnalyticsConfiguration(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_trt__RemoveVideoAnalyticsConfiguration *_p = soap_new__trt__RemoveVideoAnalyticsConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__RemoveVideoAnalyticsConfiguration::ProfileToken = ProfileToken;
	}
	return _p;
}

inline _trt__RemoveVideoAnalyticsConfiguration * soap_new_set__trt__RemoveVideoAnalyticsConfiguration(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_trt__RemoveVideoAnalyticsConfiguration *_p = soap_new__trt__RemoveVideoAnalyticsConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__RemoveVideoAnalyticsConfiguration::ProfileToken = ProfileToken;
	}
	return _p;
}

inline int soap_write__trt__RemoveVideoAnalyticsConfiguration(struct soap *soap, _trt__RemoveVideoAnalyticsConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:RemoveVideoAnalyticsConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__RemoveVideoAnalyticsConfiguration * SOAP_FMAC4 soap_get__trt__RemoveVideoAnalyticsConfiguration(struct soap*, _trt__RemoveVideoAnalyticsConfiguration *, const char*, const char*);

inline int soap_read__trt__RemoveVideoAnalyticsConfiguration(struct soap *soap, _trt__RemoveVideoAnalyticsConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__RemoveVideoAnalyticsConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__AddVideoAnalyticsConfigurationResponse_DEFINED
#define SOAP_TYPE__trt__AddVideoAnalyticsConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__AddVideoAnalyticsConfigurationResponse(struct soap*, const char*, int, const _trt__AddVideoAnalyticsConfigurationResponse *, const char*);
SOAP_FMAC3 _trt__AddVideoAnalyticsConfigurationResponse * SOAP_FMAC4 soap_in__trt__AddVideoAnalyticsConfigurationResponse(struct soap*, const char*, _trt__AddVideoAnalyticsConfigurationResponse *, const char*);
SOAP_FMAC1 _trt__AddVideoAnalyticsConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__AddVideoAnalyticsConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__AddVideoAnalyticsConfigurationResponse * soap_new__trt__AddVideoAnalyticsConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__AddVideoAnalyticsConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__AddVideoAnalyticsConfigurationResponse * soap_new_req__trt__AddVideoAnalyticsConfigurationResponse(
	struct soap *soap)
{
	_trt__AddVideoAnalyticsConfigurationResponse *_p = soap_new__trt__AddVideoAnalyticsConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__AddVideoAnalyticsConfigurationResponse * soap_new_set__trt__AddVideoAnalyticsConfigurationResponse(
	struct soap *soap)
{
	_trt__AddVideoAnalyticsConfigurationResponse *_p = soap_new__trt__AddVideoAnalyticsConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__trt__AddVideoAnalyticsConfigurationResponse(struct soap *soap, _trt__AddVideoAnalyticsConfigurationResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:AddVideoAnalyticsConfigurationResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__AddVideoAnalyticsConfigurationResponse * SOAP_FMAC4 soap_get__trt__AddVideoAnalyticsConfigurationResponse(struct soap*, _trt__AddVideoAnalyticsConfigurationResponse *, const char*, const char*);

inline int soap_read__trt__AddVideoAnalyticsConfigurationResponse(struct soap *soap, _trt__AddVideoAnalyticsConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__AddVideoAnalyticsConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__AddVideoAnalyticsConfiguration_DEFINED
#define SOAP_TYPE__trt__AddVideoAnalyticsConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__AddVideoAnalyticsConfiguration(struct soap*, const char*, int, const _trt__AddVideoAnalyticsConfiguration *, const char*);
SOAP_FMAC3 _trt__AddVideoAnalyticsConfiguration * SOAP_FMAC4 soap_in__trt__AddVideoAnalyticsConfiguration(struct soap*, const char*, _trt__AddVideoAnalyticsConfiguration *, const char*);
SOAP_FMAC1 _trt__AddVideoAnalyticsConfiguration * SOAP_FMAC2 soap_instantiate__trt__AddVideoAnalyticsConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _trt__AddVideoAnalyticsConfiguration * soap_new__trt__AddVideoAnalyticsConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__AddVideoAnalyticsConfiguration(soap, n, NULL, NULL, NULL);
}

inline _trt__AddVideoAnalyticsConfiguration * soap_new_req__trt__AddVideoAnalyticsConfiguration(
	struct soap *soap,
	const std::string& ProfileToken,
	const std::string& ConfigurationToken)
{
	_trt__AddVideoAnalyticsConfiguration *_p = soap_new__trt__AddVideoAnalyticsConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__AddVideoAnalyticsConfiguration::ProfileToken = ProfileToken;
		_p->_trt__AddVideoAnalyticsConfiguration::ConfigurationToken = ConfigurationToken;
	}
	return _p;
}

inline _trt__AddVideoAnalyticsConfiguration * soap_new_set__trt__AddVideoAnalyticsConfiguration(
	struct soap *soap,
	const std::string& ProfileToken,
	const std::string& ConfigurationToken)
{
	_trt__AddVideoAnalyticsConfiguration *_p = soap_new__trt__AddVideoAnalyticsConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__AddVideoAnalyticsConfiguration::ProfileToken = ProfileToken;
		_p->_trt__AddVideoAnalyticsConfiguration::ConfigurationToken = ConfigurationToken;
	}
	return _p;
}

inline int soap_write__trt__AddVideoAnalyticsConfiguration(struct soap *soap, _trt__AddVideoAnalyticsConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:AddVideoAnalyticsConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__AddVideoAnalyticsConfiguration * SOAP_FMAC4 soap_get__trt__AddVideoAnalyticsConfiguration(struct soap*, _trt__AddVideoAnalyticsConfiguration *, const char*, const char*);

inline int soap_read__trt__AddVideoAnalyticsConfiguration(struct soap *soap, _trt__AddVideoAnalyticsConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__AddVideoAnalyticsConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__RemovePTZConfigurationResponse_DEFINED
#define SOAP_TYPE__trt__RemovePTZConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__RemovePTZConfigurationResponse(struct soap*, const char*, int, const _trt__RemovePTZConfigurationResponse *, const char*);
SOAP_FMAC3 _trt__RemovePTZConfigurationResponse * SOAP_FMAC4 soap_in__trt__RemovePTZConfigurationResponse(struct soap*, const char*, _trt__RemovePTZConfigurationResponse *, const char*);
SOAP_FMAC1 _trt__RemovePTZConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__RemovePTZConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__RemovePTZConfigurationResponse * soap_new__trt__RemovePTZConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__RemovePTZConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__RemovePTZConfigurationResponse * soap_new_req__trt__RemovePTZConfigurationResponse(
	struct soap *soap)
{
	_trt__RemovePTZConfigurationResponse *_p = soap_new__trt__RemovePTZConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__RemovePTZConfigurationResponse * soap_new_set__trt__RemovePTZConfigurationResponse(
	struct soap *soap)
{
	_trt__RemovePTZConfigurationResponse *_p = soap_new__trt__RemovePTZConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__trt__RemovePTZConfigurationResponse(struct soap *soap, _trt__RemovePTZConfigurationResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:RemovePTZConfigurationResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__RemovePTZConfigurationResponse * SOAP_FMAC4 soap_get__trt__RemovePTZConfigurationResponse(struct soap*, _trt__RemovePTZConfigurationResponse *, const char*, const char*);

inline int soap_read__trt__RemovePTZConfigurationResponse(struct soap *soap, _trt__RemovePTZConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__RemovePTZConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__RemovePTZConfiguration_DEFINED
#define SOAP_TYPE__trt__RemovePTZConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__RemovePTZConfiguration(struct soap*, const char*, int, const _trt__RemovePTZConfiguration *, const char*);
SOAP_FMAC3 _trt__RemovePTZConfiguration * SOAP_FMAC4 soap_in__trt__RemovePTZConfiguration(struct soap*, const char*, _trt__RemovePTZConfiguration *, const char*);
SOAP_FMAC1 _trt__RemovePTZConfiguration * SOAP_FMAC2 soap_instantiate__trt__RemovePTZConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _trt__RemovePTZConfiguration * soap_new__trt__RemovePTZConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__RemovePTZConfiguration(soap, n, NULL, NULL, NULL);
}

inline _trt__RemovePTZConfiguration * soap_new_req__trt__RemovePTZConfiguration(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_trt__RemovePTZConfiguration *_p = soap_new__trt__RemovePTZConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__RemovePTZConfiguration::ProfileToken = ProfileToken;
	}
	return _p;
}

inline _trt__RemovePTZConfiguration * soap_new_set__trt__RemovePTZConfiguration(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_trt__RemovePTZConfiguration *_p = soap_new__trt__RemovePTZConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__RemovePTZConfiguration::ProfileToken = ProfileToken;
	}
	return _p;
}

inline int soap_write__trt__RemovePTZConfiguration(struct soap *soap, _trt__RemovePTZConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:RemovePTZConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__RemovePTZConfiguration * SOAP_FMAC4 soap_get__trt__RemovePTZConfiguration(struct soap*, _trt__RemovePTZConfiguration *, const char*, const char*);

inline int soap_read__trt__RemovePTZConfiguration(struct soap *soap, _trt__RemovePTZConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__RemovePTZConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__AddPTZConfigurationResponse_DEFINED
#define SOAP_TYPE__trt__AddPTZConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__AddPTZConfigurationResponse(struct soap*, const char*, int, const _trt__AddPTZConfigurationResponse *, const char*);
SOAP_FMAC3 _trt__AddPTZConfigurationResponse * SOAP_FMAC4 soap_in__trt__AddPTZConfigurationResponse(struct soap*, const char*, _trt__AddPTZConfigurationResponse *, const char*);
SOAP_FMAC1 _trt__AddPTZConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__AddPTZConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__AddPTZConfigurationResponse * soap_new__trt__AddPTZConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__AddPTZConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__AddPTZConfigurationResponse * soap_new_req__trt__AddPTZConfigurationResponse(
	struct soap *soap)
{
	_trt__AddPTZConfigurationResponse *_p = soap_new__trt__AddPTZConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__AddPTZConfigurationResponse * soap_new_set__trt__AddPTZConfigurationResponse(
	struct soap *soap)
{
	_trt__AddPTZConfigurationResponse *_p = soap_new__trt__AddPTZConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__trt__AddPTZConfigurationResponse(struct soap *soap, _trt__AddPTZConfigurationResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:AddPTZConfigurationResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__AddPTZConfigurationResponse * SOAP_FMAC4 soap_get__trt__AddPTZConfigurationResponse(struct soap*, _trt__AddPTZConfigurationResponse *, const char*, const char*);

inline int soap_read__trt__AddPTZConfigurationResponse(struct soap *soap, _trt__AddPTZConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__AddPTZConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__AddPTZConfiguration_DEFINED
#define SOAP_TYPE__trt__AddPTZConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__AddPTZConfiguration(struct soap*, const char*, int, const _trt__AddPTZConfiguration *, const char*);
SOAP_FMAC3 _trt__AddPTZConfiguration * SOAP_FMAC4 soap_in__trt__AddPTZConfiguration(struct soap*, const char*, _trt__AddPTZConfiguration *, const char*);
SOAP_FMAC1 _trt__AddPTZConfiguration * SOAP_FMAC2 soap_instantiate__trt__AddPTZConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _trt__AddPTZConfiguration * soap_new__trt__AddPTZConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__AddPTZConfiguration(soap, n, NULL, NULL, NULL);
}

inline _trt__AddPTZConfiguration * soap_new_req__trt__AddPTZConfiguration(
	struct soap *soap,
	const std::string& ProfileToken,
	const std::string& ConfigurationToken)
{
	_trt__AddPTZConfiguration *_p = soap_new__trt__AddPTZConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__AddPTZConfiguration::ProfileToken = ProfileToken;
		_p->_trt__AddPTZConfiguration::ConfigurationToken = ConfigurationToken;
	}
	return _p;
}

inline _trt__AddPTZConfiguration * soap_new_set__trt__AddPTZConfiguration(
	struct soap *soap,
	const std::string& ProfileToken,
	const std::string& ConfigurationToken)
{
	_trt__AddPTZConfiguration *_p = soap_new__trt__AddPTZConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__AddPTZConfiguration::ProfileToken = ProfileToken;
		_p->_trt__AddPTZConfiguration::ConfigurationToken = ConfigurationToken;
	}
	return _p;
}

inline int soap_write__trt__AddPTZConfiguration(struct soap *soap, _trt__AddPTZConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:AddPTZConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__AddPTZConfiguration * SOAP_FMAC4 soap_get__trt__AddPTZConfiguration(struct soap*, _trt__AddPTZConfiguration *, const char*, const char*);

inline int soap_read__trt__AddPTZConfiguration(struct soap *soap, _trt__AddPTZConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__AddPTZConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__RemoveAudioSourceConfigurationResponse_DEFINED
#define SOAP_TYPE__trt__RemoveAudioSourceConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__RemoveAudioSourceConfigurationResponse(struct soap*, const char*, int, const _trt__RemoveAudioSourceConfigurationResponse *, const char*);
SOAP_FMAC3 _trt__RemoveAudioSourceConfigurationResponse * SOAP_FMAC4 soap_in__trt__RemoveAudioSourceConfigurationResponse(struct soap*, const char*, _trt__RemoveAudioSourceConfigurationResponse *, const char*);
SOAP_FMAC1 _trt__RemoveAudioSourceConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__RemoveAudioSourceConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__RemoveAudioSourceConfigurationResponse * soap_new__trt__RemoveAudioSourceConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__RemoveAudioSourceConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__RemoveAudioSourceConfigurationResponse * soap_new_req__trt__RemoveAudioSourceConfigurationResponse(
	struct soap *soap)
{
	_trt__RemoveAudioSourceConfigurationResponse *_p = soap_new__trt__RemoveAudioSourceConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__RemoveAudioSourceConfigurationResponse * soap_new_set__trt__RemoveAudioSourceConfigurationResponse(
	struct soap *soap)
{
	_trt__RemoveAudioSourceConfigurationResponse *_p = soap_new__trt__RemoveAudioSourceConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__trt__RemoveAudioSourceConfigurationResponse(struct soap *soap, _trt__RemoveAudioSourceConfigurationResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:RemoveAudioSourceConfigurationResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__RemoveAudioSourceConfigurationResponse * SOAP_FMAC4 soap_get__trt__RemoveAudioSourceConfigurationResponse(struct soap*, _trt__RemoveAudioSourceConfigurationResponse *, const char*, const char*);

inline int soap_read__trt__RemoveAudioSourceConfigurationResponse(struct soap *soap, _trt__RemoveAudioSourceConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__RemoveAudioSourceConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__RemoveAudioSourceConfiguration_DEFINED
#define SOAP_TYPE__trt__RemoveAudioSourceConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__RemoveAudioSourceConfiguration(struct soap*, const char*, int, const _trt__RemoveAudioSourceConfiguration *, const char*);
SOAP_FMAC3 _trt__RemoveAudioSourceConfiguration * SOAP_FMAC4 soap_in__trt__RemoveAudioSourceConfiguration(struct soap*, const char*, _trt__RemoveAudioSourceConfiguration *, const char*);
SOAP_FMAC1 _trt__RemoveAudioSourceConfiguration * SOAP_FMAC2 soap_instantiate__trt__RemoveAudioSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _trt__RemoveAudioSourceConfiguration * soap_new__trt__RemoveAudioSourceConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__RemoveAudioSourceConfiguration(soap, n, NULL, NULL, NULL);
}

inline _trt__RemoveAudioSourceConfiguration * soap_new_req__trt__RemoveAudioSourceConfiguration(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_trt__RemoveAudioSourceConfiguration *_p = soap_new__trt__RemoveAudioSourceConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__RemoveAudioSourceConfiguration::ProfileToken = ProfileToken;
	}
	return _p;
}

inline _trt__RemoveAudioSourceConfiguration * soap_new_set__trt__RemoveAudioSourceConfiguration(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_trt__RemoveAudioSourceConfiguration *_p = soap_new__trt__RemoveAudioSourceConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__RemoveAudioSourceConfiguration::ProfileToken = ProfileToken;
	}
	return _p;
}

inline int soap_write__trt__RemoveAudioSourceConfiguration(struct soap *soap, _trt__RemoveAudioSourceConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:RemoveAudioSourceConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__RemoveAudioSourceConfiguration * SOAP_FMAC4 soap_get__trt__RemoveAudioSourceConfiguration(struct soap*, _trt__RemoveAudioSourceConfiguration *, const char*, const char*);

inline int soap_read__trt__RemoveAudioSourceConfiguration(struct soap *soap, _trt__RemoveAudioSourceConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__RemoveAudioSourceConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__AddAudioSourceConfigurationResponse_DEFINED
#define SOAP_TYPE__trt__AddAudioSourceConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__AddAudioSourceConfigurationResponse(struct soap*, const char*, int, const _trt__AddAudioSourceConfigurationResponse *, const char*);
SOAP_FMAC3 _trt__AddAudioSourceConfigurationResponse * SOAP_FMAC4 soap_in__trt__AddAudioSourceConfigurationResponse(struct soap*, const char*, _trt__AddAudioSourceConfigurationResponse *, const char*);
SOAP_FMAC1 _trt__AddAudioSourceConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__AddAudioSourceConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__AddAudioSourceConfigurationResponse * soap_new__trt__AddAudioSourceConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__AddAudioSourceConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__AddAudioSourceConfigurationResponse * soap_new_req__trt__AddAudioSourceConfigurationResponse(
	struct soap *soap)
{
	_trt__AddAudioSourceConfigurationResponse *_p = soap_new__trt__AddAudioSourceConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__AddAudioSourceConfigurationResponse * soap_new_set__trt__AddAudioSourceConfigurationResponse(
	struct soap *soap)
{
	_trt__AddAudioSourceConfigurationResponse *_p = soap_new__trt__AddAudioSourceConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__trt__AddAudioSourceConfigurationResponse(struct soap *soap, _trt__AddAudioSourceConfigurationResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:AddAudioSourceConfigurationResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__AddAudioSourceConfigurationResponse * SOAP_FMAC4 soap_get__trt__AddAudioSourceConfigurationResponse(struct soap*, _trt__AddAudioSourceConfigurationResponse *, const char*, const char*);

inline int soap_read__trt__AddAudioSourceConfigurationResponse(struct soap *soap, _trt__AddAudioSourceConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__AddAudioSourceConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__AddAudioSourceConfiguration_DEFINED
#define SOAP_TYPE__trt__AddAudioSourceConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__AddAudioSourceConfiguration(struct soap*, const char*, int, const _trt__AddAudioSourceConfiguration *, const char*);
SOAP_FMAC3 _trt__AddAudioSourceConfiguration * SOAP_FMAC4 soap_in__trt__AddAudioSourceConfiguration(struct soap*, const char*, _trt__AddAudioSourceConfiguration *, const char*);
SOAP_FMAC1 _trt__AddAudioSourceConfiguration * SOAP_FMAC2 soap_instantiate__trt__AddAudioSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _trt__AddAudioSourceConfiguration * soap_new__trt__AddAudioSourceConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__AddAudioSourceConfiguration(soap, n, NULL, NULL, NULL);
}

inline _trt__AddAudioSourceConfiguration * soap_new_req__trt__AddAudioSourceConfiguration(
	struct soap *soap,
	const std::string& ProfileToken,
	const std::string& ConfigurationToken)
{
	_trt__AddAudioSourceConfiguration *_p = soap_new__trt__AddAudioSourceConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__AddAudioSourceConfiguration::ProfileToken = ProfileToken;
		_p->_trt__AddAudioSourceConfiguration::ConfigurationToken = ConfigurationToken;
	}
	return _p;
}

inline _trt__AddAudioSourceConfiguration * soap_new_set__trt__AddAudioSourceConfiguration(
	struct soap *soap,
	const std::string& ProfileToken,
	const std::string& ConfigurationToken)
{
	_trt__AddAudioSourceConfiguration *_p = soap_new__trt__AddAudioSourceConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__AddAudioSourceConfiguration::ProfileToken = ProfileToken;
		_p->_trt__AddAudioSourceConfiguration::ConfigurationToken = ConfigurationToken;
	}
	return _p;
}

inline int soap_write__trt__AddAudioSourceConfiguration(struct soap *soap, _trt__AddAudioSourceConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:AddAudioSourceConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__AddAudioSourceConfiguration * SOAP_FMAC4 soap_get__trt__AddAudioSourceConfiguration(struct soap*, _trt__AddAudioSourceConfiguration *, const char*, const char*);

inline int soap_read__trt__AddAudioSourceConfiguration(struct soap *soap, _trt__AddAudioSourceConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__AddAudioSourceConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__RemoveAudioEncoderConfigurationResponse_DEFINED
#define SOAP_TYPE__trt__RemoveAudioEncoderConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__RemoveAudioEncoderConfigurationResponse(struct soap*, const char*, int, const _trt__RemoveAudioEncoderConfigurationResponse *, const char*);
SOAP_FMAC3 _trt__RemoveAudioEncoderConfigurationResponse * SOAP_FMAC4 soap_in__trt__RemoveAudioEncoderConfigurationResponse(struct soap*, const char*, _trt__RemoveAudioEncoderConfigurationResponse *, const char*);
SOAP_FMAC1 _trt__RemoveAudioEncoderConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__RemoveAudioEncoderConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__RemoveAudioEncoderConfigurationResponse * soap_new__trt__RemoveAudioEncoderConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__RemoveAudioEncoderConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__RemoveAudioEncoderConfigurationResponse * soap_new_req__trt__RemoveAudioEncoderConfigurationResponse(
	struct soap *soap)
{
	_trt__RemoveAudioEncoderConfigurationResponse *_p = soap_new__trt__RemoveAudioEncoderConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__RemoveAudioEncoderConfigurationResponse * soap_new_set__trt__RemoveAudioEncoderConfigurationResponse(
	struct soap *soap)
{
	_trt__RemoveAudioEncoderConfigurationResponse *_p = soap_new__trt__RemoveAudioEncoderConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__trt__RemoveAudioEncoderConfigurationResponse(struct soap *soap, _trt__RemoveAudioEncoderConfigurationResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:RemoveAudioEncoderConfigurationResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__RemoveAudioEncoderConfigurationResponse * SOAP_FMAC4 soap_get__trt__RemoveAudioEncoderConfigurationResponse(struct soap*, _trt__RemoveAudioEncoderConfigurationResponse *, const char*, const char*);

inline int soap_read__trt__RemoveAudioEncoderConfigurationResponse(struct soap *soap, _trt__RemoveAudioEncoderConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__RemoveAudioEncoderConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__RemoveAudioEncoderConfiguration_DEFINED
#define SOAP_TYPE__trt__RemoveAudioEncoderConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__RemoveAudioEncoderConfiguration(struct soap*, const char*, int, const _trt__RemoveAudioEncoderConfiguration *, const char*);
SOAP_FMAC3 _trt__RemoveAudioEncoderConfiguration * SOAP_FMAC4 soap_in__trt__RemoveAudioEncoderConfiguration(struct soap*, const char*, _trt__RemoveAudioEncoderConfiguration *, const char*);
SOAP_FMAC1 _trt__RemoveAudioEncoderConfiguration * SOAP_FMAC2 soap_instantiate__trt__RemoveAudioEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _trt__RemoveAudioEncoderConfiguration * soap_new__trt__RemoveAudioEncoderConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__RemoveAudioEncoderConfiguration(soap, n, NULL, NULL, NULL);
}

inline _trt__RemoveAudioEncoderConfiguration * soap_new_req__trt__RemoveAudioEncoderConfiguration(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_trt__RemoveAudioEncoderConfiguration *_p = soap_new__trt__RemoveAudioEncoderConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__RemoveAudioEncoderConfiguration::ProfileToken = ProfileToken;
	}
	return _p;
}

inline _trt__RemoveAudioEncoderConfiguration * soap_new_set__trt__RemoveAudioEncoderConfiguration(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_trt__RemoveAudioEncoderConfiguration *_p = soap_new__trt__RemoveAudioEncoderConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__RemoveAudioEncoderConfiguration::ProfileToken = ProfileToken;
	}
	return _p;
}

inline int soap_write__trt__RemoveAudioEncoderConfiguration(struct soap *soap, _trt__RemoveAudioEncoderConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:RemoveAudioEncoderConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__RemoveAudioEncoderConfiguration * SOAP_FMAC4 soap_get__trt__RemoveAudioEncoderConfiguration(struct soap*, _trt__RemoveAudioEncoderConfiguration *, const char*, const char*);

inline int soap_read__trt__RemoveAudioEncoderConfiguration(struct soap *soap, _trt__RemoveAudioEncoderConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__RemoveAudioEncoderConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__AddAudioEncoderConfigurationResponse_DEFINED
#define SOAP_TYPE__trt__AddAudioEncoderConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__AddAudioEncoderConfigurationResponse(struct soap*, const char*, int, const _trt__AddAudioEncoderConfigurationResponse *, const char*);
SOAP_FMAC3 _trt__AddAudioEncoderConfigurationResponse * SOAP_FMAC4 soap_in__trt__AddAudioEncoderConfigurationResponse(struct soap*, const char*, _trt__AddAudioEncoderConfigurationResponse *, const char*);
SOAP_FMAC1 _trt__AddAudioEncoderConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__AddAudioEncoderConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__AddAudioEncoderConfigurationResponse * soap_new__trt__AddAudioEncoderConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__AddAudioEncoderConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__AddAudioEncoderConfigurationResponse * soap_new_req__trt__AddAudioEncoderConfigurationResponse(
	struct soap *soap)
{
	_trt__AddAudioEncoderConfigurationResponse *_p = soap_new__trt__AddAudioEncoderConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__AddAudioEncoderConfigurationResponse * soap_new_set__trt__AddAudioEncoderConfigurationResponse(
	struct soap *soap)
{
	_trt__AddAudioEncoderConfigurationResponse *_p = soap_new__trt__AddAudioEncoderConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__trt__AddAudioEncoderConfigurationResponse(struct soap *soap, _trt__AddAudioEncoderConfigurationResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:AddAudioEncoderConfigurationResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__AddAudioEncoderConfigurationResponse * SOAP_FMAC4 soap_get__trt__AddAudioEncoderConfigurationResponse(struct soap*, _trt__AddAudioEncoderConfigurationResponse *, const char*, const char*);

inline int soap_read__trt__AddAudioEncoderConfigurationResponse(struct soap *soap, _trt__AddAudioEncoderConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__AddAudioEncoderConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__AddAudioEncoderConfiguration_DEFINED
#define SOAP_TYPE__trt__AddAudioEncoderConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__AddAudioEncoderConfiguration(struct soap*, const char*, int, const _trt__AddAudioEncoderConfiguration *, const char*);
SOAP_FMAC3 _trt__AddAudioEncoderConfiguration * SOAP_FMAC4 soap_in__trt__AddAudioEncoderConfiguration(struct soap*, const char*, _trt__AddAudioEncoderConfiguration *, const char*);
SOAP_FMAC1 _trt__AddAudioEncoderConfiguration * SOAP_FMAC2 soap_instantiate__trt__AddAudioEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _trt__AddAudioEncoderConfiguration * soap_new__trt__AddAudioEncoderConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__AddAudioEncoderConfiguration(soap, n, NULL, NULL, NULL);
}

inline _trt__AddAudioEncoderConfiguration * soap_new_req__trt__AddAudioEncoderConfiguration(
	struct soap *soap,
	const std::string& ProfileToken,
	const std::string& ConfigurationToken)
{
	_trt__AddAudioEncoderConfiguration *_p = soap_new__trt__AddAudioEncoderConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__AddAudioEncoderConfiguration::ProfileToken = ProfileToken;
		_p->_trt__AddAudioEncoderConfiguration::ConfigurationToken = ConfigurationToken;
	}
	return _p;
}

inline _trt__AddAudioEncoderConfiguration * soap_new_set__trt__AddAudioEncoderConfiguration(
	struct soap *soap,
	const std::string& ProfileToken,
	const std::string& ConfigurationToken)
{
	_trt__AddAudioEncoderConfiguration *_p = soap_new__trt__AddAudioEncoderConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__AddAudioEncoderConfiguration::ProfileToken = ProfileToken;
		_p->_trt__AddAudioEncoderConfiguration::ConfigurationToken = ConfigurationToken;
	}
	return _p;
}

inline int soap_write__trt__AddAudioEncoderConfiguration(struct soap *soap, _trt__AddAudioEncoderConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:AddAudioEncoderConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__AddAudioEncoderConfiguration * SOAP_FMAC4 soap_get__trt__AddAudioEncoderConfiguration(struct soap*, _trt__AddAudioEncoderConfiguration *, const char*, const char*);

inline int soap_read__trt__AddAudioEncoderConfiguration(struct soap *soap, _trt__AddAudioEncoderConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__AddAudioEncoderConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__RemoveVideoSourceConfigurationResponse_DEFINED
#define SOAP_TYPE__trt__RemoveVideoSourceConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__RemoveVideoSourceConfigurationResponse(struct soap*, const char*, int, const _trt__RemoveVideoSourceConfigurationResponse *, const char*);
SOAP_FMAC3 _trt__RemoveVideoSourceConfigurationResponse * SOAP_FMAC4 soap_in__trt__RemoveVideoSourceConfigurationResponse(struct soap*, const char*, _trt__RemoveVideoSourceConfigurationResponse *, const char*);
SOAP_FMAC1 _trt__RemoveVideoSourceConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__RemoveVideoSourceConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__RemoveVideoSourceConfigurationResponse * soap_new__trt__RemoveVideoSourceConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__RemoveVideoSourceConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__RemoveVideoSourceConfigurationResponse * soap_new_req__trt__RemoveVideoSourceConfigurationResponse(
	struct soap *soap)
{
	_trt__RemoveVideoSourceConfigurationResponse *_p = soap_new__trt__RemoveVideoSourceConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__RemoveVideoSourceConfigurationResponse * soap_new_set__trt__RemoveVideoSourceConfigurationResponse(
	struct soap *soap)
{
	_trt__RemoveVideoSourceConfigurationResponse *_p = soap_new__trt__RemoveVideoSourceConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__trt__RemoveVideoSourceConfigurationResponse(struct soap *soap, _trt__RemoveVideoSourceConfigurationResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:RemoveVideoSourceConfigurationResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__RemoveVideoSourceConfigurationResponse * SOAP_FMAC4 soap_get__trt__RemoveVideoSourceConfigurationResponse(struct soap*, _trt__RemoveVideoSourceConfigurationResponse *, const char*, const char*);

inline int soap_read__trt__RemoveVideoSourceConfigurationResponse(struct soap *soap, _trt__RemoveVideoSourceConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__RemoveVideoSourceConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__RemoveVideoSourceConfiguration_DEFINED
#define SOAP_TYPE__trt__RemoveVideoSourceConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__RemoveVideoSourceConfiguration(struct soap*, const char*, int, const _trt__RemoveVideoSourceConfiguration *, const char*);
SOAP_FMAC3 _trt__RemoveVideoSourceConfiguration * SOAP_FMAC4 soap_in__trt__RemoveVideoSourceConfiguration(struct soap*, const char*, _trt__RemoveVideoSourceConfiguration *, const char*);
SOAP_FMAC1 _trt__RemoveVideoSourceConfiguration * SOAP_FMAC2 soap_instantiate__trt__RemoveVideoSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _trt__RemoveVideoSourceConfiguration * soap_new__trt__RemoveVideoSourceConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__RemoveVideoSourceConfiguration(soap, n, NULL, NULL, NULL);
}

inline _trt__RemoveVideoSourceConfiguration * soap_new_req__trt__RemoveVideoSourceConfiguration(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_trt__RemoveVideoSourceConfiguration *_p = soap_new__trt__RemoveVideoSourceConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__RemoveVideoSourceConfiguration::ProfileToken = ProfileToken;
	}
	return _p;
}

inline _trt__RemoveVideoSourceConfiguration * soap_new_set__trt__RemoveVideoSourceConfiguration(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_trt__RemoveVideoSourceConfiguration *_p = soap_new__trt__RemoveVideoSourceConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__RemoveVideoSourceConfiguration::ProfileToken = ProfileToken;
	}
	return _p;
}

inline int soap_write__trt__RemoveVideoSourceConfiguration(struct soap *soap, _trt__RemoveVideoSourceConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:RemoveVideoSourceConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__RemoveVideoSourceConfiguration * SOAP_FMAC4 soap_get__trt__RemoveVideoSourceConfiguration(struct soap*, _trt__RemoveVideoSourceConfiguration *, const char*, const char*);

inline int soap_read__trt__RemoveVideoSourceConfiguration(struct soap *soap, _trt__RemoveVideoSourceConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__RemoveVideoSourceConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__AddVideoSourceConfigurationResponse_DEFINED
#define SOAP_TYPE__trt__AddVideoSourceConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__AddVideoSourceConfigurationResponse(struct soap*, const char*, int, const _trt__AddVideoSourceConfigurationResponse *, const char*);
SOAP_FMAC3 _trt__AddVideoSourceConfigurationResponse * SOAP_FMAC4 soap_in__trt__AddVideoSourceConfigurationResponse(struct soap*, const char*, _trt__AddVideoSourceConfigurationResponse *, const char*);
SOAP_FMAC1 _trt__AddVideoSourceConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__AddVideoSourceConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__AddVideoSourceConfigurationResponse * soap_new__trt__AddVideoSourceConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__AddVideoSourceConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__AddVideoSourceConfigurationResponse * soap_new_req__trt__AddVideoSourceConfigurationResponse(
	struct soap *soap)
{
	_trt__AddVideoSourceConfigurationResponse *_p = soap_new__trt__AddVideoSourceConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__AddVideoSourceConfigurationResponse * soap_new_set__trt__AddVideoSourceConfigurationResponse(
	struct soap *soap)
{
	_trt__AddVideoSourceConfigurationResponse *_p = soap_new__trt__AddVideoSourceConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__trt__AddVideoSourceConfigurationResponse(struct soap *soap, _trt__AddVideoSourceConfigurationResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:AddVideoSourceConfigurationResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__AddVideoSourceConfigurationResponse * SOAP_FMAC4 soap_get__trt__AddVideoSourceConfigurationResponse(struct soap*, _trt__AddVideoSourceConfigurationResponse *, const char*, const char*);

inline int soap_read__trt__AddVideoSourceConfigurationResponse(struct soap *soap, _trt__AddVideoSourceConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__AddVideoSourceConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__AddVideoSourceConfiguration_DEFINED
#define SOAP_TYPE__trt__AddVideoSourceConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__AddVideoSourceConfiguration(struct soap*, const char*, int, const _trt__AddVideoSourceConfiguration *, const char*);
SOAP_FMAC3 _trt__AddVideoSourceConfiguration * SOAP_FMAC4 soap_in__trt__AddVideoSourceConfiguration(struct soap*, const char*, _trt__AddVideoSourceConfiguration *, const char*);
SOAP_FMAC1 _trt__AddVideoSourceConfiguration * SOAP_FMAC2 soap_instantiate__trt__AddVideoSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _trt__AddVideoSourceConfiguration * soap_new__trt__AddVideoSourceConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__AddVideoSourceConfiguration(soap, n, NULL, NULL, NULL);
}

inline _trt__AddVideoSourceConfiguration * soap_new_req__trt__AddVideoSourceConfiguration(
	struct soap *soap,
	const std::string& ProfileToken,
	const std::string& ConfigurationToken)
{
	_trt__AddVideoSourceConfiguration *_p = soap_new__trt__AddVideoSourceConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__AddVideoSourceConfiguration::ProfileToken = ProfileToken;
		_p->_trt__AddVideoSourceConfiguration::ConfigurationToken = ConfigurationToken;
	}
	return _p;
}

inline _trt__AddVideoSourceConfiguration * soap_new_set__trt__AddVideoSourceConfiguration(
	struct soap *soap,
	const std::string& ProfileToken,
	const std::string& ConfigurationToken)
{
	_trt__AddVideoSourceConfiguration *_p = soap_new__trt__AddVideoSourceConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__AddVideoSourceConfiguration::ProfileToken = ProfileToken;
		_p->_trt__AddVideoSourceConfiguration::ConfigurationToken = ConfigurationToken;
	}
	return _p;
}

inline int soap_write__trt__AddVideoSourceConfiguration(struct soap *soap, _trt__AddVideoSourceConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:AddVideoSourceConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__AddVideoSourceConfiguration * SOAP_FMAC4 soap_get__trt__AddVideoSourceConfiguration(struct soap*, _trt__AddVideoSourceConfiguration *, const char*, const char*);

inline int soap_read__trt__AddVideoSourceConfiguration(struct soap *soap, _trt__AddVideoSourceConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__AddVideoSourceConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__RemoveVideoEncoderConfigurationResponse_DEFINED
#define SOAP_TYPE__trt__RemoveVideoEncoderConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__RemoveVideoEncoderConfigurationResponse(struct soap*, const char*, int, const _trt__RemoveVideoEncoderConfigurationResponse *, const char*);
SOAP_FMAC3 _trt__RemoveVideoEncoderConfigurationResponse * SOAP_FMAC4 soap_in__trt__RemoveVideoEncoderConfigurationResponse(struct soap*, const char*, _trt__RemoveVideoEncoderConfigurationResponse *, const char*);
SOAP_FMAC1 _trt__RemoveVideoEncoderConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__RemoveVideoEncoderConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__RemoveVideoEncoderConfigurationResponse * soap_new__trt__RemoveVideoEncoderConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__RemoveVideoEncoderConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__RemoveVideoEncoderConfigurationResponse * soap_new_req__trt__RemoveVideoEncoderConfigurationResponse(
	struct soap *soap)
{
	_trt__RemoveVideoEncoderConfigurationResponse *_p = soap_new__trt__RemoveVideoEncoderConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__RemoveVideoEncoderConfigurationResponse * soap_new_set__trt__RemoveVideoEncoderConfigurationResponse(
	struct soap *soap)
{
	_trt__RemoveVideoEncoderConfigurationResponse *_p = soap_new__trt__RemoveVideoEncoderConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__trt__RemoveVideoEncoderConfigurationResponse(struct soap *soap, _trt__RemoveVideoEncoderConfigurationResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:RemoveVideoEncoderConfigurationResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__RemoveVideoEncoderConfigurationResponse * SOAP_FMAC4 soap_get__trt__RemoveVideoEncoderConfigurationResponse(struct soap*, _trt__RemoveVideoEncoderConfigurationResponse *, const char*, const char*);

inline int soap_read__trt__RemoveVideoEncoderConfigurationResponse(struct soap *soap, _trt__RemoveVideoEncoderConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__RemoveVideoEncoderConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__RemoveVideoEncoderConfiguration_DEFINED
#define SOAP_TYPE__trt__RemoveVideoEncoderConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__RemoveVideoEncoderConfiguration(struct soap*, const char*, int, const _trt__RemoveVideoEncoderConfiguration *, const char*);
SOAP_FMAC3 _trt__RemoveVideoEncoderConfiguration * SOAP_FMAC4 soap_in__trt__RemoveVideoEncoderConfiguration(struct soap*, const char*, _trt__RemoveVideoEncoderConfiguration *, const char*);
SOAP_FMAC1 _trt__RemoveVideoEncoderConfiguration * SOAP_FMAC2 soap_instantiate__trt__RemoveVideoEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _trt__RemoveVideoEncoderConfiguration * soap_new__trt__RemoveVideoEncoderConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__RemoveVideoEncoderConfiguration(soap, n, NULL, NULL, NULL);
}

inline _trt__RemoveVideoEncoderConfiguration * soap_new_req__trt__RemoveVideoEncoderConfiguration(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_trt__RemoveVideoEncoderConfiguration *_p = soap_new__trt__RemoveVideoEncoderConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__RemoveVideoEncoderConfiguration::ProfileToken = ProfileToken;
	}
	return _p;
}

inline _trt__RemoveVideoEncoderConfiguration * soap_new_set__trt__RemoveVideoEncoderConfiguration(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_trt__RemoveVideoEncoderConfiguration *_p = soap_new__trt__RemoveVideoEncoderConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__RemoveVideoEncoderConfiguration::ProfileToken = ProfileToken;
	}
	return _p;
}

inline int soap_write__trt__RemoveVideoEncoderConfiguration(struct soap *soap, _trt__RemoveVideoEncoderConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:RemoveVideoEncoderConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__RemoveVideoEncoderConfiguration * SOAP_FMAC4 soap_get__trt__RemoveVideoEncoderConfiguration(struct soap*, _trt__RemoveVideoEncoderConfiguration *, const char*, const char*);

inline int soap_read__trt__RemoveVideoEncoderConfiguration(struct soap *soap, _trt__RemoveVideoEncoderConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__RemoveVideoEncoderConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__AddVideoEncoderConfigurationResponse_DEFINED
#define SOAP_TYPE__trt__AddVideoEncoderConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__AddVideoEncoderConfigurationResponse(struct soap*, const char*, int, const _trt__AddVideoEncoderConfigurationResponse *, const char*);
SOAP_FMAC3 _trt__AddVideoEncoderConfigurationResponse * SOAP_FMAC4 soap_in__trt__AddVideoEncoderConfigurationResponse(struct soap*, const char*, _trt__AddVideoEncoderConfigurationResponse *, const char*);
SOAP_FMAC1 _trt__AddVideoEncoderConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__AddVideoEncoderConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__AddVideoEncoderConfigurationResponse * soap_new__trt__AddVideoEncoderConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__AddVideoEncoderConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__AddVideoEncoderConfigurationResponse * soap_new_req__trt__AddVideoEncoderConfigurationResponse(
	struct soap *soap)
{
	_trt__AddVideoEncoderConfigurationResponse *_p = soap_new__trt__AddVideoEncoderConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__AddVideoEncoderConfigurationResponse * soap_new_set__trt__AddVideoEncoderConfigurationResponse(
	struct soap *soap)
{
	_trt__AddVideoEncoderConfigurationResponse *_p = soap_new__trt__AddVideoEncoderConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__trt__AddVideoEncoderConfigurationResponse(struct soap *soap, _trt__AddVideoEncoderConfigurationResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:AddVideoEncoderConfigurationResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__AddVideoEncoderConfigurationResponse * SOAP_FMAC4 soap_get__trt__AddVideoEncoderConfigurationResponse(struct soap*, _trt__AddVideoEncoderConfigurationResponse *, const char*, const char*);

inline int soap_read__trt__AddVideoEncoderConfigurationResponse(struct soap *soap, _trt__AddVideoEncoderConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__AddVideoEncoderConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__AddVideoEncoderConfiguration_DEFINED
#define SOAP_TYPE__trt__AddVideoEncoderConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__AddVideoEncoderConfiguration(struct soap*, const char*, int, const _trt__AddVideoEncoderConfiguration *, const char*);
SOAP_FMAC3 _trt__AddVideoEncoderConfiguration * SOAP_FMAC4 soap_in__trt__AddVideoEncoderConfiguration(struct soap*, const char*, _trt__AddVideoEncoderConfiguration *, const char*);
SOAP_FMAC1 _trt__AddVideoEncoderConfiguration * SOAP_FMAC2 soap_instantiate__trt__AddVideoEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _trt__AddVideoEncoderConfiguration * soap_new__trt__AddVideoEncoderConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__AddVideoEncoderConfiguration(soap, n, NULL, NULL, NULL);
}

inline _trt__AddVideoEncoderConfiguration * soap_new_req__trt__AddVideoEncoderConfiguration(
	struct soap *soap,
	const std::string& ProfileToken,
	const std::string& ConfigurationToken)
{
	_trt__AddVideoEncoderConfiguration *_p = soap_new__trt__AddVideoEncoderConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__AddVideoEncoderConfiguration::ProfileToken = ProfileToken;
		_p->_trt__AddVideoEncoderConfiguration::ConfigurationToken = ConfigurationToken;
	}
	return _p;
}

inline _trt__AddVideoEncoderConfiguration * soap_new_set__trt__AddVideoEncoderConfiguration(
	struct soap *soap,
	const std::string& ProfileToken,
	const std::string& ConfigurationToken)
{
	_trt__AddVideoEncoderConfiguration *_p = soap_new__trt__AddVideoEncoderConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__AddVideoEncoderConfiguration::ProfileToken = ProfileToken;
		_p->_trt__AddVideoEncoderConfiguration::ConfigurationToken = ConfigurationToken;
	}
	return _p;
}

inline int soap_write__trt__AddVideoEncoderConfiguration(struct soap *soap, _trt__AddVideoEncoderConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:AddVideoEncoderConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__AddVideoEncoderConfiguration * SOAP_FMAC4 soap_get__trt__AddVideoEncoderConfiguration(struct soap*, _trt__AddVideoEncoderConfiguration *, const char*, const char*);

inline int soap_read__trt__AddVideoEncoderConfiguration(struct soap *soap, _trt__AddVideoEncoderConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__AddVideoEncoderConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__GetProfilesResponse_DEFINED
#define SOAP_TYPE__trt__GetProfilesResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetProfilesResponse(struct soap*, const char*, int, const _trt__GetProfilesResponse *, const char*);
SOAP_FMAC3 _trt__GetProfilesResponse * SOAP_FMAC4 soap_in__trt__GetProfilesResponse(struct soap*, const char*, _trt__GetProfilesResponse *, const char*);
SOAP_FMAC1 _trt__GetProfilesResponse * SOAP_FMAC2 soap_instantiate__trt__GetProfilesResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetProfilesResponse * soap_new__trt__GetProfilesResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetProfilesResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__GetProfilesResponse * soap_new_req__trt__GetProfilesResponse(
	struct soap *soap)
{
	_trt__GetProfilesResponse *_p = soap_new__trt__GetProfilesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__GetProfilesResponse * soap_new_set__trt__GetProfilesResponse(
	struct soap *soap,
	const std::vector<tt__Profile *> & Profiles)
{
	_trt__GetProfilesResponse *_p = soap_new__trt__GetProfilesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetProfilesResponse::Profiles = Profiles;
	}
	return _p;
}

inline int soap_write__trt__GetProfilesResponse(struct soap *soap, _trt__GetProfilesResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetProfilesResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetProfilesResponse * SOAP_FMAC4 soap_get__trt__GetProfilesResponse(struct soap*, _trt__GetProfilesResponse *, const char*, const char*);

inline int soap_read__trt__GetProfilesResponse(struct soap *soap, _trt__GetProfilesResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__GetProfilesResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__GetProfiles_DEFINED
#define SOAP_TYPE__trt__GetProfiles_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetProfiles(struct soap*, const char*, int, const _trt__GetProfiles *, const char*);
SOAP_FMAC3 _trt__GetProfiles * SOAP_FMAC4 soap_in__trt__GetProfiles(struct soap*, const char*, _trt__GetProfiles *, const char*);
SOAP_FMAC1 _trt__GetProfiles * SOAP_FMAC2 soap_instantiate__trt__GetProfiles(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetProfiles * soap_new__trt__GetProfiles(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetProfiles(soap, n, NULL, NULL, NULL);
}

inline _trt__GetProfiles * soap_new_req__trt__GetProfiles(
	struct soap *soap)
{
	_trt__GetProfiles *_p = soap_new__trt__GetProfiles(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__GetProfiles * soap_new_set__trt__GetProfiles(
	struct soap *soap)
{
	_trt__GetProfiles *_p = soap_new__trt__GetProfiles(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__trt__GetProfiles(struct soap *soap, _trt__GetProfiles const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetProfiles", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetProfiles * SOAP_FMAC4 soap_get__trt__GetProfiles(struct soap*, _trt__GetProfiles *, const char*, const char*);

inline int soap_read__trt__GetProfiles(struct soap *soap, _trt__GetProfiles *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__GetProfiles(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__GetProfileResponse_DEFINED
#define SOAP_TYPE__trt__GetProfileResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetProfileResponse(struct soap*, const char*, int, const _trt__GetProfileResponse *, const char*);
SOAP_FMAC3 _trt__GetProfileResponse * SOAP_FMAC4 soap_in__trt__GetProfileResponse(struct soap*, const char*, _trt__GetProfileResponse *, const char*);
SOAP_FMAC1 _trt__GetProfileResponse * SOAP_FMAC2 soap_instantiate__trt__GetProfileResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetProfileResponse * soap_new__trt__GetProfileResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetProfileResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__GetProfileResponse * soap_new_req__trt__GetProfileResponse(
	struct soap *soap,
	tt__Profile *Profile)
{
	_trt__GetProfileResponse *_p = soap_new__trt__GetProfileResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetProfileResponse::Profile = Profile;
	}
	return _p;
}

inline _trt__GetProfileResponse * soap_new_set__trt__GetProfileResponse(
	struct soap *soap,
	tt__Profile *Profile)
{
	_trt__GetProfileResponse *_p = soap_new__trt__GetProfileResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetProfileResponse::Profile = Profile;
	}
	return _p;
}

inline int soap_write__trt__GetProfileResponse(struct soap *soap, _trt__GetProfileResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetProfileResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetProfileResponse * SOAP_FMAC4 soap_get__trt__GetProfileResponse(struct soap*, _trt__GetProfileResponse *, const char*, const char*);

inline int soap_read__trt__GetProfileResponse(struct soap *soap, _trt__GetProfileResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__GetProfileResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__GetProfile_DEFINED
#define SOAP_TYPE__trt__GetProfile_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetProfile(struct soap*, const char*, int, const _trt__GetProfile *, const char*);
SOAP_FMAC3 _trt__GetProfile * SOAP_FMAC4 soap_in__trt__GetProfile(struct soap*, const char*, _trt__GetProfile *, const char*);
SOAP_FMAC1 _trt__GetProfile * SOAP_FMAC2 soap_instantiate__trt__GetProfile(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetProfile * soap_new__trt__GetProfile(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetProfile(soap, n, NULL, NULL, NULL);
}

inline _trt__GetProfile * soap_new_req__trt__GetProfile(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_trt__GetProfile *_p = soap_new__trt__GetProfile(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetProfile::ProfileToken = ProfileToken;
	}
	return _p;
}

inline _trt__GetProfile * soap_new_set__trt__GetProfile(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_trt__GetProfile *_p = soap_new__trt__GetProfile(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetProfile::ProfileToken = ProfileToken;
	}
	return _p;
}

inline int soap_write__trt__GetProfile(struct soap *soap, _trt__GetProfile const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetProfile", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetProfile * SOAP_FMAC4 soap_get__trt__GetProfile(struct soap*, _trt__GetProfile *, const char*, const char*);

inline int soap_read__trt__GetProfile(struct soap *soap, _trt__GetProfile *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__GetProfile(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__CreateProfileResponse_DEFINED
#define SOAP_TYPE__trt__CreateProfileResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__CreateProfileResponse(struct soap*, const char*, int, const _trt__CreateProfileResponse *, const char*);
SOAP_FMAC3 _trt__CreateProfileResponse * SOAP_FMAC4 soap_in__trt__CreateProfileResponse(struct soap*, const char*, _trt__CreateProfileResponse *, const char*);
SOAP_FMAC1 _trt__CreateProfileResponse * SOAP_FMAC2 soap_instantiate__trt__CreateProfileResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__CreateProfileResponse * soap_new__trt__CreateProfileResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__CreateProfileResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__CreateProfileResponse * soap_new_req__trt__CreateProfileResponse(
	struct soap *soap,
	tt__Profile *Profile)
{
	_trt__CreateProfileResponse *_p = soap_new__trt__CreateProfileResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__CreateProfileResponse::Profile = Profile;
	}
	return _p;
}

inline _trt__CreateProfileResponse * soap_new_set__trt__CreateProfileResponse(
	struct soap *soap,
	tt__Profile *Profile)
{
	_trt__CreateProfileResponse *_p = soap_new__trt__CreateProfileResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__CreateProfileResponse::Profile = Profile;
	}
	return _p;
}

inline int soap_write__trt__CreateProfileResponse(struct soap *soap, _trt__CreateProfileResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:CreateProfileResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__CreateProfileResponse * SOAP_FMAC4 soap_get__trt__CreateProfileResponse(struct soap*, _trt__CreateProfileResponse *, const char*, const char*);

inline int soap_read__trt__CreateProfileResponse(struct soap *soap, _trt__CreateProfileResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__CreateProfileResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__CreateProfile_DEFINED
#define SOAP_TYPE__trt__CreateProfile_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__CreateProfile(struct soap*, const char*, int, const _trt__CreateProfile *, const char*);
SOAP_FMAC3 _trt__CreateProfile * SOAP_FMAC4 soap_in__trt__CreateProfile(struct soap*, const char*, _trt__CreateProfile *, const char*);
SOAP_FMAC1 _trt__CreateProfile * SOAP_FMAC2 soap_instantiate__trt__CreateProfile(struct soap*, int, const char*, const char*, size_t*);

inline _trt__CreateProfile * soap_new__trt__CreateProfile(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__CreateProfile(soap, n, NULL, NULL, NULL);
}

inline _trt__CreateProfile * soap_new_req__trt__CreateProfile(
	struct soap *soap,
	const std::string& Name)
{
	_trt__CreateProfile *_p = soap_new__trt__CreateProfile(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__CreateProfile::Name = Name;
	}
	return _p;
}

inline _trt__CreateProfile * soap_new_set__trt__CreateProfile(
	struct soap *soap,
	const std::string& Name,
	std::string *Token)
{
	_trt__CreateProfile *_p = soap_new__trt__CreateProfile(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__CreateProfile::Name = Name;
		_p->_trt__CreateProfile::Token = Token;
	}
	return _p;
}

inline int soap_write__trt__CreateProfile(struct soap *soap, _trt__CreateProfile const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:CreateProfile", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__CreateProfile * SOAP_FMAC4 soap_get__trt__CreateProfile(struct soap*, _trt__CreateProfile *, const char*, const char*);

inline int soap_read__trt__CreateProfile(struct soap *soap, _trt__CreateProfile *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__CreateProfile(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__GetAudioOutputsResponse_DEFINED
#define SOAP_TYPE__trt__GetAudioOutputsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetAudioOutputsResponse(struct soap*, const char*, int, const _trt__GetAudioOutputsResponse *, const char*);
SOAP_FMAC3 _trt__GetAudioOutputsResponse * SOAP_FMAC4 soap_in__trt__GetAudioOutputsResponse(struct soap*, const char*, _trt__GetAudioOutputsResponse *, const char*);
SOAP_FMAC1 _trt__GetAudioOutputsResponse * SOAP_FMAC2 soap_instantiate__trt__GetAudioOutputsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetAudioOutputsResponse * soap_new__trt__GetAudioOutputsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetAudioOutputsResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__GetAudioOutputsResponse * soap_new_req__trt__GetAudioOutputsResponse(
	struct soap *soap)
{
	_trt__GetAudioOutputsResponse *_p = soap_new__trt__GetAudioOutputsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__GetAudioOutputsResponse * soap_new_set__trt__GetAudioOutputsResponse(
	struct soap *soap,
	const std::vector<tt__AudioOutput *> & AudioOutputs)
{
	_trt__GetAudioOutputsResponse *_p = soap_new__trt__GetAudioOutputsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetAudioOutputsResponse::AudioOutputs = AudioOutputs;
	}
	return _p;
}

inline int soap_write__trt__GetAudioOutputsResponse(struct soap *soap, _trt__GetAudioOutputsResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioOutputsResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetAudioOutputsResponse * SOAP_FMAC4 soap_get__trt__GetAudioOutputsResponse(struct soap*, _trt__GetAudioOutputsResponse *, const char*, const char*);

inline int soap_read__trt__GetAudioOutputsResponse(struct soap *soap, _trt__GetAudioOutputsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__GetAudioOutputsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__GetAudioOutputs_DEFINED
#define SOAP_TYPE__trt__GetAudioOutputs_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetAudioOutputs(struct soap*, const char*, int, const _trt__GetAudioOutputs *, const char*);
SOAP_FMAC3 _trt__GetAudioOutputs * SOAP_FMAC4 soap_in__trt__GetAudioOutputs(struct soap*, const char*, _trt__GetAudioOutputs *, const char*);
SOAP_FMAC1 _trt__GetAudioOutputs * SOAP_FMAC2 soap_instantiate__trt__GetAudioOutputs(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetAudioOutputs * soap_new__trt__GetAudioOutputs(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetAudioOutputs(soap, n, NULL, NULL, NULL);
}

inline _trt__GetAudioOutputs * soap_new_req__trt__GetAudioOutputs(
	struct soap *soap)
{
	_trt__GetAudioOutputs *_p = soap_new__trt__GetAudioOutputs(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__GetAudioOutputs * soap_new_set__trt__GetAudioOutputs(
	struct soap *soap)
{
	_trt__GetAudioOutputs *_p = soap_new__trt__GetAudioOutputs(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__trt__GetAudioOutputs(struct soap *soap, _trt__GetAudioOutputs const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioOutputs", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetAudioOutputs * SOAP_FMAC4 soap_get__trt__GetAudioOutputs(struct soap*, _trt__GetAudioOutputs *, const char*, const char*);

inline int soap_read__trt__GetAudioOutputs(struct soap *soap, _trt__GetAudioOutputs *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__GetAudioOutputs(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__GetAudioSourcesResponse_DEFINED
#define SOAP_TYPE__trt__GetAudioSourcesResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetAudioSourcesResponse(struct soap*, const char*, int, const _trt__GetAudioSourcesResponse *, const char*);
SOAP_FMAC3 _trt__GetAudioSourcesResponse * SOAP_FMAC4 soap_in__trt__GetAudioSourcesResponse(struct soap*, const char*, _trt__GetAudioSourcesResponse *, const char*);
SOAP_FMAC1 _trt__GetAudioSourcesResponse * SOAP_FMAC2 soap_instantiate__trt__GetAudioSourcesResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetAudioSourcesResponse * soap_new__trt__GetAudioSourcesResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetAudioSourcesResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__GetAudioSourcesResponse * soap_new_req__trt__GetAudioSourcesResponse(
	struct soap *soap)
{
	_trt__GetAudioSourcesResponse *_p = soap_new__trt__GetAudioSourcesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__GetAudioSourcesResponse * soap_new_set__trt__GetAudioSourcesResponse(
	struct soap *soap,
	const std::vector<tt__AudioSource *> & AudioSources)
{
	_trt__GetAudioSourcesResponse *_p = soap_new__trt__GetAudioSourcesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetAudioSourcesResponse::AudioSources = AudioSources;
	}
	return _p;
}

inline int soap_write__trt__GetAudioSourcesResponse(struct soap *soap, _trt__GetAudioSourcesResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioSourcesResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetAudioSourcesResponse * SOAP_FMAC4 soap_get__trt__GetAudioSourcesResponse(struct soap*, _trt__GetAudioSourcesResponse *, const char*, const char*);

inline int soap_read__trt__GetAudioSourcesResponse(struct soap *soap, _trt__GetAudioSourcesResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__GetAudioSourcesResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__GetAudioSources_DEFINED
#define SOAP_TYPE__trt__GetAudioSources_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetAudioSources(struct soap*, const char*, int, const _trt__GetAudioSources *, const char*);
SOAP_FMAC3 _trt__GetAudioSources * SOAP_FMAC4 soap_in__trt__GetAudioSources(struct soap*, const char*, _trt__GetAudioSources *, const char*);
SOAP_FMAC1 _trt__GetAudioSources * SOAP_FMAC2 soap_instantiate__trt__GetAudioSources(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetAudioSources * soap_new__trt__GetAudioSources(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetAudioSources(soap, n, NULL, NULL, NULL);
}

inline _trt__GetAudioSources * soap_new_req__trt__GetAudioSources(
	struct soap *soap)
{
	_trt__GetAudioSources *_p = soap_new__trt__GetAudioSources(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__GetAudioSources * soap_new_set__trt__GetAudioSources(
	struct soap *soap)
{
	_trt__GetAudioSources *_p = soap_new__trt__GetAudioSources(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__trt__GetAudioSources(struct soap *soap, _trt__GetAudioSources const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioSources", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetAudioSources * SOAP_FMAC4 soap_get__trt__GetAudioSources(struct soap*, _trt__GetAudioSources *, const char*, const char*);

inline int soap_read__trt__GetAudioSources(struct soap *soap, _trt__GetAudioSources *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__GetAudioSources(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__GetVideoSourcesResponse_DEFINED
#define SOAP_TYPE__trt__GetVideoSourcesResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetVideoSourcesResponse(struct soap*, const char*, int, const _trt__GetVideoSourcesResponse *, const char*);
SOAP_FMAC3 _trt__GetVideoSourcesResponse * SOAP_FMAC4 soap_in__trt__GetVideoSourcesResponse(struct soap*, const char*, _trt__GetVideoSourcesResponse *, const char*);
SOAP_FMAC1 _trt__GetVideoSourcesResponse * SOAP_FMAC2 soap_instantiate__trt__GetVideoSourcesResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetVideoSourcesResponse * soap_new__trt__GetVideoSourcesResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetVideoSourcesResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__GetVideoSourcesResponse * soap_new_req__trt__GetVideoSourcesResponse(
	struct soap *soap)
{
	_trt__GetVideoSourcesResponse *_p = soap_new__trt__GetVideoSourcesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__GetVideoSourcesResponse * soap_new_set__trt__GetVideoSourcesResponse(
	struct soap *soap,
	const std::vector<tt__VideoSource *> & VideoSources)
{
	_trt__GetVideoSourcesResponse *_p = soap_new__trt__GetVideoSourcesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetVideoSourcesResponse::VideoSources = VideoSources;
	}
	return _p;
}

inline int soap_write__trt__GetVideoSourcesResponse(struct soap *soap, _trt__GetVideoSourcesResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetVideoSourcesResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetVideoSourcesResponse * SOAP_FMAC4 soap_get__trt__GetVideoSourcesResponse(struct soap*, _trt__GetVideoSourcesResponse *, const char*, const char*);

inline int soap_read__trt__GetVideoSourcesResponse(struct soap *soap, _trt__GetVideoSourcesResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__GetVideoSourcesResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__GetVideoSources_DEFINED
#define SOAP_TYPE__trt__GetVideoSources_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetVideoSources(struct soap*, const char*, int, const _trt__GetVideoSources *, const char*);
SOAP_FMAC3 _trt__GetVideoSources * SOAP_FMAC4 soap_in__trt__GetVideoSources(struct soap*, const char*, _trt__GetVideoSources *, const char*);
SOAP_FMAC1 _trt__GetVideoSources * SOAP_FMAC2 soap_instantiate__trt__GetVideoSources(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetVideoSources * soap_new__trt__GetVideoSources(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetVideoSources(soap, n, NULL, NULL, NULL);
}

inline _trt__GetVideoSources * soap_new_req__trt__GetVideoSources(
	struct soap *soap)
{
	_trt__GetVideoSources *_p = soap_new__trt__GetVideoSources(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__GetVideoSources * soap_new_set__trt__GetVideoSources(
	struct soap *soap)
{
	_trt__GetVideoSources *_p = soap_new__trt__GetVideoSources(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__trt__GetVideoSources(struct soap *soap, _trt__GetVideoSources const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetVideoSources", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetVideoSources * SOAP_FMAC4 soap_get__trt__GetVideoSources(struct soap*, _trt__GetVideoSources *, const char*, const char*);

inline int soap_read__trt__GetVideoSources(struct soap *soap, _trt__GetVideoSources *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__GetVideoSources(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__GetServiceCapabilitiesResponse_DEFINED
#define SOAP_TYPE__trt__GetServiceCapabilitiesResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetServiceCapabilitiesResponse(struct soap*, const char*, int, const _trt__GetServiceCapabilitiesResponse *, const char*);
SOAP_FMAC3 _trt__GetServiceCapabilitiesResponse * SOAP_FMAC4 soap_in__trt__GetServiceCapabilitiesResponse(struct soap*, const char*, _trt__GetServiceCapabilitiesResponse *, const char*);
SOAP_FMAC1 _trt__GetServiceCapabilitiesResponse * SOAP_FMAC2 soap_instantiate__trt__GetServiceCapabilitiesResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetServiceCapabilitiesResponse * soap_new__trt__GetServiceCapabilitiesResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetServiceCapabilitiesResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__GetServiceCapabilitiesResponse * soap_new_req__trt__GetServiceCapabilitiesResponse(
	struct soap *soap,
	trt__Capabilities *Capabilities)
{
	_trt__GetServiceCapabilitiesResponse *_p = soap_new__trt__GetServiceCapabilitiesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetServiceCapabilitiesResponse::Capabilities = Capabilities;
	}
	return _p;
}

inline _trt__GetServiceCapabilitiesResponse * soap_new_set__trt__GetServiceCapabilitiesResponse(
	struct soap *soap,
	trt__Capabilities *Capabilities)
{
	_trt__GetServiceCapabilitiesResponse *_p = soap_new__trt__GetServiceCapabilitiesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetServiceCapabilitiesResponse::Capabilities = Capabilities;
	}
	return _p;
}

inline int soap_write__trt__GetServiceCapabilitiesResponse(struct soap *soap, _trt__GetServiceCapabilitiesResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetServiceCapabilitiesResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetServiceCapabilitiesResponse * SOAP_FMAC4 soap_get__trt__GetServiceCapabilitiesResponse(struct soap*, _trt__GetServiceCapabilitiesResponse *, const char*, const char*);

inline int soap_read__trt__GetServiceCapabilitiesResponse(struct soap *soap, _trt__GetServiceCapabilitiesResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__GetServiceCapabilitiesResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__trt__GetServiceCapabilities_DEFINED
#define SOAP_TYPE__trt__GetServiceCapabilities_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetServiceCapabilities(struct soap*, const char*, int, const _trt__GetServiceCapabilities *, const char*);
SOAP_FMAC3 _trt__GetServiceCapabilities * SOAP_FMAC4 soap_in__trt__GetServiceCapabilities(struct soap*, const char*, _trt__GetServiceCapabilities *, const char*);
SOAP_FMAC1 _trt__GetServiceCapabilities * SOAP_FMAC2 soap_instantiate__trt__GetServiceCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetServiceCapabilities * soap_new__trt__GetServiceCapabilities(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetServiceCapabilities(soap, n, NULL, NULL, NULL);
}

inline _trt__GetServiceCapabilities * soap_new_req__trt__GetServiceCapabilities(
	struct soap *soap)
{
	_trt__GetServiceCapabilities *_p = soap_new__trt__GetServiceCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__GetServiceCapabilities * soap_new_set__trt__GetServiceCapabilities(
	struct soap *soap)
{
	_trt__GetServiceCapabilities *_p = soap_new__trt__GetServiceCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__trt__GetServiceCapabilities(struct soap *soap, _trt__GetServiceCapabilities const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetServiceCapabilities", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetServiceCapabilities * SOAP_FMAC4 soap_get__trt__GetServiceCapabilities(struct soap*, _trt__GetServiceCapabilities *, const char*, const char*);

inline int soap_read__trt__GetServiceCapabilities(struct soap *soap, _trt__GetServiceCapabilities *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__trt__GetServiceCapabilities(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_trt__VideoSourceModeExtension_DEFINED
#define SOAP_TYPE_trt__VideoSourceModeExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_trt__VideoSourceModeExtension(struct soap*, const char*, int, const trt__VideoSourceModeExtension *, const char*);
SOAP_FMAC3 trt__VideoSourceModeExtension * SOAP_FMAC4 soap_in_trt__VideoSourceModeExtension(struct soap*, const char*, trt__VideoSourceModeExtension *, const char*);
SOAP_FMAC1 trt__VideoSourceModeExtension * SOAP_FMAC2 soap_instantiate_trt__VideoSourceModeExtension(struct soap*, int, const char*, const char*, size_t*);

inline trt__VideoSourceModeExtension * soap_new_trt__VideoSourceModeExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_trt__VideoSourceModeExtension(soap, n, NULL, NULL, NULL);
}

inline trt__VideoSourceModeExtension * soap_new_req_trt__VideoSourceModeExtension(
	struct soap *soap)
{
	trt__VideoSourceModeExtension *_p = soap_new_trt__VideoSourceModeExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline trt__VideoSourceModeExtension * soap_new_set_trt__VideoSourceModeExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	trt__VideoSourceModeExtension *_p = soap_new_trt__VideoSourceModeExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->trt__VideoSourceModeExtension::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_trt__VideoSourceModeExtension(struct soap *soap, trt__VideoSourceModeExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:VideoSourceModeExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 trt__VideoSourceModeExtension * SOAP_FMAC4 soap_get_trt__VideoSourceModeExtension(struct soap*, trt__VideoSourceModeExtension *, const char*, const char*);

inline int soap_read_trt__VideoSourceModeExtension(struct soap *soap, trt__VideoSourceModeExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_trt__VideoSourceModeExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_trt__VideoSourceMode_DEFINED
#define SOAP_TYPE_trt__VideoSourceMode_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_trt__VideoSourceMode(struct soap*, const char*, int, const trt__VideoSourceMode *, const char*);
SOAP_FMAC3 trt__VideoSourceMode * SOAP_FMAC4 soap_in_trt__VideoSourceMode(struct soap*, const char*, trt__VideoSourceMode *, const char*);
SOAP_FMAC1 trt__VideoSourceMode * SOAP_FMAC2 soap_instantiate_trt__VideoSourceMode(struct soap*, int, const char*, const char*, size_t*);

inline trt__VideoSourceMode * soap_new_trt__VideoSourceMode(struct soap *soap, int n = -1)
{
	return soap_instantiate_trt__VideoSourceMode(soap, n, NULL, NULL, NULL);
}

inline trt__VideoSourceMode * soap_new_req_trt__VideoSourceMode(
	struct soap *soap,
	float MaxFramerate,
	tt__VideoResolution *MaxResolution,
	const std::string& Encodings,
	bool Reboot,
	const std::string& token)
{
	trt__VideoSourceMode *_p = soap_new_trt__VideoSourceMode(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->trt__VideoSourceMode::MaxFramerate = MaxFramerate;
		_p->trt__VideoSourceMode::MaxResolution = MaxResolution;
		_p->trt__VideoSourceMode::Encodings = Encodings;
		_p->trt__VideoSourceMode::Reboot = Reboot;
		_p->trt__VideoSourceMode::token = token;
	}
	return _p;
}

inline trt__VideoSourceMode * soap_new_set_trt__VideoSourceMode(
	struct soap *soap,
	float MaxFramerate,
	tt__VideoResolution *MaxResolution,
	const std::string& Encodings,
	bool Reboot,
	std::string *Description,
	trt__VideoSourceModeExtension *Extension,
	const std::string& token,
	bool *Enabled,
	char *__anyAttribute,
	char *__item1)
{
	trt__VideoSourceMode *_p = soap_new_trt__VideoSourceMode(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->trt__VideoSourceMode::MaxFramerate = MaxFramerate;
		_p->trt__VideoSourceMode::MaxResolution = MaxResolution;
		_p->trt__VideoSourceMode::Encodings = Encodings;
		_p->trt__VideoSourceMode::Reboot = Reboot;
		_p->trt__VideoSourceMode::Description = Description;
		_p->trt__VideoSourceMode::Extension = Extension;
		_p->trt__VideoSourceMode::token = token;
		_p->trt__VideoSourceMode::Enabled = Enabled;
		_p->trt__VideoSourceMode::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_trt__VideoSourceMode(struct soap *soap, trt__VideoSourceMode const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:VideoSourceMode", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 trt__VideoSourceMode * SOAP_FMAC4 soap_get_trt__VideoSourceMode(struct soap*, trt__VideoSourceMode *, const char*, const char*);

inline int soap_read_trt__VideoSourceMode(struct soap *soap, trt__VideoSourceMode *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_trt__VideoSourceMode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_trt__StreamingCapabilities_DEFINED
#define SOAP_TYPE_trt__StreamingCapabilities_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_trt__StreamingCapabilities(struct soap*, const char*, int, const trt__StreamingCapabilities *, const char*);
SOAP_FMAC3 trt__StreamingCapabilities * SOAP_FMAC4 soap_in_trt__StreamingCapabilities(struct soap*, const char*, trt__StreamingCapabilities *, const char*);
SOAP_FMAC1 trt__StreamingCapabilities * SOAP_FMAC2 soap_instantiate_trt__StreamingCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline trt__StreamingCapabilities * soap_new_trt__StreamingCapabilities(struct soap *soap, int n = -1)
{
	return soap_instantiate_trt__StreamingCapabilities(soap, n, NULL, NULL, NULL);
}

inline trt__StreamingCapabilities * soap_new_req_trt__StreamingCapabilities(
	struct soap *soap)
{
	trt__StreamingCapabilities *_p = soap_new_trt__StreamingCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline trt__StreamingCapabilities * soap_new_set_trt__StreamingCapabilities(
	struct soap *soap,
	const std::vector<char *> & __any,
	bool *RTPMulticast,
	bool *RTP_USCORETCP,
	bool *RTP_USCORERTSP_USCORETCP,
	bool *NonAggregateControl,
	bool *NoRTSPStreaming,
	char *__anyAttribute,
	char *__item1)
{
	trt__StreamingCapabilities *_p = soap_new_trt__StreamingCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->trt__StreamingCapabilities::__any = __any;
		_p->trt__StreamingCapabilities::RTPMulticast = RTPMulticast;
		_p->trt__StreamingCapabilities::RTP_USCORETCP = RTP_USCORETCP;
		_p->trt__StreamingCapabilities::RTP_USCORERTSP_USCORETCP = RTP_USCORERTSP_USCORETCP;
		_p->trt__StreamingCapabilities::NonAggregateControl = NonAggregateControl;
		_p->trt__StreamingCapabilities::NoRTSPStreaming = NoRTSPStreaming;
		_p->trt__StreamingCapabilities::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_trt__StreamingCapabilities(struct soap *soap, trt__StreamingCapabilities const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:StreamingCapabilities", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 trt__StreamingCapabilities * SOAP_FMAC4 soap_get_trt__StreamingCapabilities(struct soap*, trt__StreamingCapabilities *, const char*, const char*);

inline int soap_read_trt__StreamingCapabilities(struct soap *soap, trt__StreamingCapabilities *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_trt__StreamingCapabilities(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_trt__ProfileCapabilities_DEFINED
#define SOAP_TYPE_trt__ProfileCapabilities_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_trt__ProfileCapabilities(struct soap*, const char*, int, const trt__ProfileCapabilities *, const char*);
SOAP_FMAC3 trt__ProfileCapabilities * SOAP_FMAC4 soap_in_trt__ProfileCapabilities(struct soap*, const char*, trt__ProfileCapabilities *, const char*);
SOAP_FMAC1 trt__ProfileCapabilities * SOAP_FMAC2 soap_instantiate_trt__ProfileCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline trt__ProfileCapabilities * soap_new_trt__ProfileCapabilities(struct soap *soap, int n = -1)
{
	return soap_instantiate_trt__ProfileCapabilities(soap, n, NULL, NULL, NULL);
}

inline trt__ProfileCapabilities * soap_new_req_trt__ProfileCapabilities(
	struct soap *soap)
{
	trt__ProfileCapabilities *_p = soap_new_trt__ProfileCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline trt__ProfileCapabilities * soap_new_set_trt__ProfileCapabilities(
	struct soap *soap,
	const std::vector<char *> & __any,
	int *MaximumNumberOfProfiles,
	char *__anyAttribute,
	char *__item1)
{
	trt__ProfileCapabilities *_p = soap_new_trt__ProfileCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->trt__ProfileCapabilities::__any = __any;
		_p->trt__ProfileCapabilities::MaximumNumberOfProfiles = MaximumNumberOfProfiles;
		_p->trt__ProfileCapabilities::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_trt__ProfileCapabilities(struct soap *soap, trt__ProfileCapabilities const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:ProfileCapabilities", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 trt__ProfileCapabilities * SOAP_FMAC4 soap_get_trt__ProfileCapabilities(struct soap*, trt__ProfileCapabilities *, const char*, const char*);

inline int soap_read_trt__ProfileCapabilities(struct soap *soap, trt__ProfileCapabilities *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_trt__ProfileCapabilities(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_trt__Capabilities_DEFINED
#define SOAP_TYPE_trt__Capabilities_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_trt__Capabilities(struct soap*, const char*, int, const trt__Capabilities *, const char*);
SOAP_FMAC3 trt__Capabilities * SOAP_FMAC4 soap_in_trt__Capabilities(struct soap*, const char*, trt__Capabilities *, const char*);
SOAP_FMAC1 trt__Capabilities * SOAP_FMAC2 soap_instantiate_trt__Capabilities(struct soap*, int, const char*, const char*, size_t*);

inline trt__Capabilities * soap_new_trt__Capabilities(struct soap *soap, int n = -1)
{
	return soap_instantiate_trt__Capabilities(soap, n, NULL, NULL, NULL);
}

inline trt__Capabilities * soap_new_req_trt__Capabilities(
	struct soap *soap,
	trt__ProfileCapabilities *ProfileCapabilities,
	trt__StreamingCapabilities *StreamingCapabilities)
{
	trt__Capabilities *_p = soap_new_trt__Capabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->trt__Capabilities::ProfileCapabilities = ProfileCapabilities;
		_p->trt__Capabilities::StreamingCapabilities = StreamingCapabilities;
	}
	return _p;
}

inline trt__Capabilities * soap_new_set_trt__Capabilities(
	struct soap *soap,
	trt__ProfileCapabilities *ProfileCapabilities,
	trt__StreamingCapabilities *StreamingCapabilities,
	const std::vector<char *> & __any,
	bool *SnapshotUri,
	bool *Rotation,
	bool *VideoSourceMode,
	bool *OSD,
	bool *EXICompression,
	char *__anyAttribute,
	char *__item1)
{
	trt__Capabilities *_p = soap_new_trt__Capabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->trt__Capabilities::ProfileCapabilities = ProfileCapabilities;
		_p->trt__Capabilities::StreamingCapabilities = StreamingCapabilities;
		_p->trt__Capabilities::__any = __any;
		_p->trt__Capabilities::SnapshotUri = SnapshotUri;
		_p->trt__Capabilities::Rotation = Rotation;
		_p->trt__Capabilities::VideoSourceMode = VideoSourceMode;
		_p->trt__Capabilities::OSD = OSD;
		_p->trt__Capabilities::EXICompression = EXICompression;
		_p->trt__Capabilities::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_trt__Capabilities(struct soap *soap, trt__Capabilities const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:Capabilities", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 trt__Capabilities * SOAP_FMAC4 soap_get_trt__Capabilities(struct soap*, trt__Capabilities *, const char*, const char*);

inline int soap_read_trt__Capabilities(struct soap *soap, trt__Capabilities *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_trt__Capabilities(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_wstop__TopicSetType_DEFINED
#define SOAP_TYPE_wstop__TopicSetType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wstop__TopicSetType(struct soap*, const char*, int, const wstop__TopicSetType *, const char*);
SOAP_FMAC3 wstop__TopicSetType * SOAP_FMAC4 soap_in_wstop__TopicSetType(struct soap*, const char*, wstop__TopicSetType *, const char*);
SOAP_FMAC1 wstop__TopicSetType * SOAP_FMAC2 soap_instantiate_wstop__TopicSetType(struct soap*, int, const char*, const char*, size_t*);

inline wstop__TopicSetType * soap_new_wstop__TopicSetType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wstop__TopicSetType(soap, n, NULL, NULL, NULL);
}

inline wstop__TopicSetType * soap_new_req_wstop__TopicSetType(
	struct soap *soap)
{
	wstop__TopicSetType *_p = soap_new_wstop__TopicSetType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline wstop__TopicSetType * soap_new_set_wstop__TopicSetType(
	struct soap *soap,
	const std::vector<char *> & __any,
	wstop__Documentation *documentation1,
	char *__anyAttribute1,
	char *__item2)
{
	wstop__TopicSetType *_p = soap_new_wstop__TopicSetType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wstop__TopicSetType::__any = __any;
		_p->wstop__ExtensibleDocumented::documentation = documentation1;
		_p->wstop__ExtensibleDocumented::__anyAttribute = __anyAttribute1;
		_p->xsd__anyType::__item = __item2;
	}
	return _p;
}

inline int soap_write_wstop__TopicSetType(struct soap *soap, wstop__TopicSetType const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wstop:TopicSetType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 wstop__TopicSetType * SOAP_FMAC4 soap_get_wstop__TopicSetType(struct soap*, wstop__TopicSetType *, const char*, const char*);

inline int soap_read_wstop__TopicSetType(struct soap *soap, wstop__TopicSetType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_wstop__TopicSetType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_wstop__TopicType_DEFINED
#define SOAP_TYPE_wstop__TopicType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wstop__TopicType(struct soap*, const char*, int, const wstop__TopicType *, const char*);
SOAP_FMAC3 wstop__TopicType * SOAP_FMAC4 soap_in_wstop__TopicType(struct soap*, const char*, wstop__TopicType *, const char*);
SOAP_FMAC1 wstop__TopicType * SOAP_FMAC2 soap_instantiate_wstop__TopicType(struct soap*, int, const char*, const char*, size_t*);

inline wstop__TopicType * soap_new_wstop__TopicType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wstop__TopicType(soap, n, NULL, NULL, NULL);
}

inline wstop__TopicType * soap_new_req_wstop__TopicType(
	struct soap *soap,
	const std::string& name)
{
	wstop__TopicType *_p = soap_new_wstop__TopicType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wstop__TopicType::name = name;
	}
	return _p;
}

inline wstop__TopicType * soap_new_set_wstop__TopicType(
	struct soap *soap,
	wstop__QueryExpressionType *MessagePattern,
	const std::vector<wstop__TopicType *> & Topic,
	const std::vector<char *> & __any,
	const std::string& name,
	std::string *messageTypes,
	bool final_,
	wstop__Documentation *documentation1,
	char *__anyAttribute1,
	char *__item2)
{
	wstop__TopicType *_p = soap_new_wstop__TopicType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wstop__TopicType::MessagePattern = MessagePattern;
		_p->wstop__TopicType::Topic = Topic;
		_p->wstop__TopicType::__any = __any;
		_p->wstop__TopicType::name = name;
		_p->wstop__TopicType::messageTypes = messageTypes;
		_p->wstop__TopicType::final_ = final_;
		_p->wstop__ExtensibleDocumented::documentation = documentation1;
		_p->wstop__ExtensibleDocumented::__anyAttribute = __anyAttribute1;
		_p->xsd__anyType::__item = __item2;
	}
	return _p;
}

inline int soap_write_wstop__TopicType(struct soap *soap, wstop__TopicType const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wstop:TopicType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 wstop__TopicType * SOAP_FMAC4 soap_get_wstop__TopicType(struct soap*, wstop__TopicType *, const char*, const char*);

inline int soap_read_wstop__TopicType(struct soap *soap, wstop__TopicType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_wstop__TopicType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_wstop__TopicNamespaceType_DEFINED
#define SOAP_TYPE_wstop__TopicNamespaceType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wstop__TopicNamespaceType(struct soap*, const char*, int, const wstop__TopicNamespaceType *, const char*);
SOAP_FMAC3 wstop__TopicNamespaceType * SOAP_FMAC4 soap_in_wstop__TopicNamespaceType(struct soap*, const char*, wstop__TopicNamespaceType *, const char*);
SOAP_FMAC1 wstop__TopicNamespaceType * SOAP_FMAC2 soap_instantiate_wstop__TopicNamespaceType(struct soap*, int, const char*, const char*, size_t*);

inline wstop__TopicNamespaceType * soap_new_wstop__TopicNamespaceType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wstop__TopicNamespaceType(soap, n, NULL, NULL, NULL);
}

inline wstop__TopicNamespaceType * soap_new_req_wstop__TopicNamespaceType(
	struct soap *soap,
	const std::string& targetNamespace)
{
	wstop__TopicNamespaceType *_p = soap_new_wstop__TopicNamespaceType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wstop__TopicNamespaceType::targetNamespace = targetNamespace;
	}
	return _p;
}

inline wstop__TopicNamespaceType * soap_new_set_wstop__TopicNamespaceType(
	struct soap *soap,
	std::vector<_wstop__TopicNamespaceType_Topic> *Topic,
	const std::vector<char *> & __any,
	std::string *name,
	const std::string& targetNamespace,
	bool final_,
	wstop__Documentation *documentation1,
	char *__anyAttribute1,
	char *__item2)
{
	wstop__TopicNamespaceType *_p = soap_new_wstop__TopicNamespaceType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wstop__TopicNamespaceType::Topic = Topic;
		_p->wstop__TopicNamespaceType::__any = __any;
		_p->wstop__TopicNamespaceType::name = name;
		_p->wstop__TopicNamespaceType::targetNamespace = targetNamespace;
		_p->wstop__TopicNamespaceType::final_ = final_;
		_p->wstop__ExtensibleDocumented::documentation = documentation1;
		_p->wstop__ExtensibleDocumented::__anyAttribute = __anyAttribute1;
		_p->xsd__anyType::__item = __item2;
	}
	return _p;
}

inline int soap_write_wstop__TopicNamespaceType(struct soap *soap, wstop__TopicNamespaceType const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wstop:TopicNamespaceType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 wstop__TopicNamespaceType * SOAP_FMAC4 soap_get_wstop__TopicNamespaceType(struct soap*, wstop__TopicNamespaceType *, const char*, const char*);

inline int soap_read_wstop__TopicNamespaceType(struct soap *soap, wstop__TopicNamespaceType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_wstop__TopicNamespaceType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_wstop__QueryExpressionType_DEFINED
#define SOAP_TYPE_wstop__QueryExpressionType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wstop__QueryExpressionType(struct soap*, const char*, int, const wstop__QueryExpressionType *, const char*);
SOAP_FMAC3 wstop__QueryExpressionType * SOAP_FMAC4 soap_in_wstop__QueryExpressionType(struct soap*, const char*, wstop__QueryExpressionType *, const char*);
SOAP_FMAC1 wstop__QueryExpressionType * SOAP_FMAC2 soap_instantiate_wstop__QueryExpressionType(struct soap*, int, const char*, const char*, size_t*);

inline wstop__QueryExpressionType * soap_new_wstop__QueryExpressionType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wstop__QueryExpressionType(soap, n, NULL, NULL, NULL);
}

inline wstop__QueryExpressionType * soap_new_req_wstop__QueryExpressionType(
	struct soap *soap,
	const std::string& Dialect)
{
	wstop__QueryExpressionType *_p = soap_new_wstop__QueryExpressionType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wstop__QueryExpressionType::Dialect = Dialect;
	}
	return _p;
}

inline wstop__QueryExpressionType * soap_new_set_wstop__QueryExpressionType(
	struct soap *soap,
	char *__any,
	const std::string& Dialect,
	char *__mixed,
	char *__item1)
{
	wstop__QueryExpressionType *_p = soap_new_wstop__QueryExpressionType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wstop__QueryExpressionType::__any = __any;
		_p->wstop__QueryExpressionType::Dialect = Dialect;
		_p->wstop__QueryExpressionType::__mixed = __mixed;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_wstop__QueryExpressionType(struct soap *soap, wstop__QueryExpressionType const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wstop:QueryExpressionType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 wstop__QueryExpressionType * SOAP_FMAC4 soap_get_wstop__QueryExpressionType(struct soap*, wstop__QueryExpressionType *, const char*, const char*);

inline int soap_read_wstop__QueryExpressionType(struct soap *soap, wstop__QueryExpressionType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_wstop__QueryExpressionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_wstop__ExtensibleDocumented_DEFINED
#define SOAP_TYPE_wstop__ExtensibleDocumented_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wstop__ExtensibleDocumented(struct soap*, const char*, int, const wstop__ExtensibleDocumented *, const char*);
SOAP_FMAC3 wstop__ExtensibleDocumented * SOAP_FMAC4 soap_in_wstop__ExtensibleDocumented(struct soap*, const char*, wstop__ExtensibleDocumented *, const char*);
SOAP_FMAC1 wstop__ExtensibleDocumented * SOAP_FMAC2 soap_instantiate_wstop__ExtensibleDocumented(struct soap*, int, const char*, const char*, size_t*);

inline wstop__ExtensibleDocumented * soap_new_wstop__ExtensibleDocumented(struct soap *soap, int n = -1)
{
	return soap_instantiate_wstop__ExtensibleDocumented(soap, n, NULL, NULL, NULL);
}

inline wstop__ExtensibleDocumented * soap_new_req_wstop__ExtensibleDocumented(
	struct soap *soap)
{
	wstop__ExtensibleDocumented *_p = soap_new_wstop__ExtensibleDocumented(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline wstop__ExtensibleDocumented * soap_new_set_wstop__ExtensibleDocumented(
	struct soap *soap,
	wstop__Documentation *documentation,
	char *__anyAttribute,
	char *__item1)
{
	wstop__ExtensibleDocumented *_p = soap_new_wstop__ExtensibleDocumented(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wstop__ExtensibleDocumented::documentation = documentation;
		_p->wstop__ExtensibleDocumented::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_wstop__ExtensibleDocumented(struct soap *soap, wstop__ExtensibleDocumented const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wstop:ExtensibleDocumented", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 wstop__ExtensibleDocumented * SOAP_FMAC4 soap_get_wstop__ExtensibleDocumented(struct soap*, wstop__ExtensibleDocumented *, const char*, const char*);

inline int soap_read_wstop__ExtensibleDocumented(struct soap *soap, wstop__ExtensibleDocumented *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_wstop__ExtensibleDocumented(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_wstop__Documentation_DEFINED
#define SOAP_TYPE_wstop__Documentation_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wstop__Documentation(struct soap*, const char*, int, const wstop__Documentation *, const char*);
SOAP_FMAC3 wstop__Documentation * SOAP_FMAC4 soap_in_wstop__Documentation(struct soap*, const char*, wstop__Documentation *, const char*);
SOAP_FMAC1 wstop__Documentation * SOAP_FMAC2 soap_instantiate_wstop__Documentation(struct soap*, int, const char*, const char*, size_t*);

inline wstop__Documentation * soap_new_wstop__Documentation(struct soap *soap, int n = -1)
{
	return soap_instantiate_wstop__Documentation(soap, n, NULL, NULL, NULL);
}

inline wstop__Documentation * soap_new_req_wstop__Documentation(
	struct soap *soap)
{
	wstop__Documentation *_p = soap_new_wstop__Documentation(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline wstop__Documentation * soap_new_set_wstop__Documentation(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__mixed,
	char *__item1)
{
	wstop__Documentation *_p = soap_new_wstop__Documentation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wstop__Documentation::__any = __any;
		_p->wstop__Documentation::__mixed = __mixed;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_wstop__Documentation(struct soap *soap, wstop__Documentation const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wstop:Documentation", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 wstop__Documentation * SOAP_FMAC4 soap_get_wstop__Documentation(struct soap*, wstop__Documentation *, const char*, const char*);

inline int soap_read_wstop__Documentation(struct soap *soap, wstop__Documentation *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_wstop__Documentation(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_wsrfbf__BaseFaultType_DEFINED
#define SOAP_TYPE_wsrfbf__BaseFaultType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsrfbf__BaseFaultType(struct soap*, const char*, int, const wsrfbf__BaseFaultType *, const char*);
SOAP_FMAC3 wsrfbf__BaseFaultType * SOAP_FMAC4 soap_in_wsrfbf__BaseFaultType(struct soap*, const char*, wsrfbf__BaseFaultType *, const char*);
SOAP_FMAC1 wsrfbf__BaseFaultType * SOAP_FMAC2 soap_instantiate_wsrfbf__BaseFaultType(struct soap*, int, const char*, const char*, size_t*);

inline wsrfbf__BaseFaultType * soap_new_wsrfbf__BaseFaultType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsrfbf__BaseFaultType(soap, n, NULL, NULL, NULL);
}

inline wsrfbf__BaseFaultType * soap_new_req_wsrfbf__BaseFaultType(
	struct soap *soap,
	time_t Timestamp)
{
	wsrfbf__BaseFaultType *_p = soap_new_wsrfbf__BaseFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsrfbf__BaseFaultType::Timestamp = Timestamp;
	}
	return _p;
}

inline wsrfbf__BaseFaultType * soap_new_set_wsrfbf__BaseFaultType(
	struct soap *soap,
	const std::vector<char *> & __any,
	time_t Timestamp,
	struct wsa5__EndpointReferenceType *Originator,
	_wsrfbf__BaseFaultType_ErrorCode *ErrorCode,
	std::vector<_wsrfbf__BaseFaultType_Description> *Description,
	_wsrfbf__BaseFaultType_FaultCause *FaultCause,
	char *__anyAttribute,
	char *__item1)
{
	wsrfbf__BaseFaultType *_p = soap_new_wsrfbf__BaseFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsrfbf__BaseFaultType::__any = __any;
		_p->wsrfbf__BaseFaultType::Timestamp = Timestamp;
		_p->wsrfbf__BaseFaultType::Originator = Originator;
		_p->wsrfbf__BaseFaultType::ErrorCode = ErrorCode;
		_p->wsrfbf__BaseFaultType::Description = Description;
		_p->wsrfbf__BaseFaultType::FaultCause = FaultCause;
		_p->wsrfbf__BaseFaultType::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_wsrfbf__BaseFaultType(struct soap *soap, wsrfbf__BaseFaultType const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsrfbf:BaseFaultType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 wsrfbf__BaseFaultType * SOAP_FMAC4 soap_get_wsrfbf__BaseFaultType(struct soap*, wsrfbf__BaseFaultType *, const char*, const char*);

inline int soap_read_wsrfbf__BaseFaultType(struct soap *soap, wsrfbf__BaseFaultType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_wsrfbf__BaseFaultType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__wsnt__ResumeSubscriptionResponse_DEFINED
#define SOAP_TYPE__wsnt__ResumeSubscriptionResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__ResumeSubscriptionResponse(struct soap*, const char*, int, const _wsnt__ResumeSubscriptionResponse *, const char*);
SOAP_FMAC3 _wsnt__ResumeSubscriptionResponse * SOAP_FMAC4 soap_in__wsnt__ResumeSubscriptionResponse(struct soap*, const char*, _wsnt__ResumeSubscriptionResponse *, const char*);
SOAP_FMAC1 _wsnt__ResumeSubscriptionResponse * SOAP_FMAC2 soap_instantiate__wsnt__ResumeSubscriptionResponse(struct soap*, int, const char*, const char*, size_t*);

inline _wsnt__ResumeSubscriptionResponse * soap_new__wsnt__ResumeSubscriptionResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__wsnt__ResumeSubscriptionResponse(soap, n, NULL, NULL, NULL);
}

inline _wsnt__ResumeSubscriptionResponse * soap_new_req__wsnt__ResumeSubscriptionResponse(
	struct soap *soap)
{
	_wsnt__ResumeSubscriptionResponse *_p = soap_new__wsnt__ResumeSubscriptionResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _wsnt__ResumeSubscriptionResponse * soap_new_set__wsnt__ResumeSubscriptionResponse(
	struct soap *soap,
	const std::vector<char *> & __any)
{
	_wsnt__ResumeSubscriptionResponse *_p = soap_new__wsnt__ResumeSubscriptionResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_wsnt__ResumeSubscriptionResponse::__any = __any;
	}
	return _p;
}

inline int soap_write__wsnt__ResumeSubscriptionResponse(struct soap *soap, _wsnt__ResumeSubscriptionResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:ResumeSubscriptionResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _wsnt__ResumeSubscriptionResponse * SOAP_FMAC4 soap_get__wsnt__ResumeSubscriptionResponse(struct soap*, _wsnt__ResumeSubscriptionResponse *, const char*, const char*);

inline int soap_read__wsnt__ResumeSubscriptionResponse(struct soap *soap, _wsnt__ResumeSubscriptionResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__wsnt__ResumeSubscriptionResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__wsnt__ResumeSubscription_DEFINED
#define SOAP_TYPE__wsnt__ResumeSubscription_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__ResumeSubscription(struct soap*, const char*, int, const _wsnt__ResumeSubscription *, const char*);
SOAP_FMAC3 _wsnt__ResumeSubscription * SOAP_FMAC4 soap_in__wsnt__ResumeSubscription(struct soap*, const char*, _wsnt__ResumeSubscription *, const char*);
SOAP_FMAC1 _wsnt__ResumeSubscription * SOAP_FMAC2 soap_instantiate__wsnt__ResumeSubscription(struct soap*, int, const char*, const char*, size_t*);

inline _wsnt__ResumeSubscription * soap_new__wsnt__ResumeSubscription(struct soap *soap, int n = -1)
{
	return soap_instantiate__wsnt__ResumeSubscription(soap, n, NULL, NULL, NULL);
}

inline _wsnt__ResumeSubscription * soap_new_req__wsnt__ResumeSubscription(
	struct soap *soap)
{
	_wsnt__ResumeSubscription *_p = soap_new__wsnt__ResumeSubscription(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _wsnt__ResumeSubscription * soap_new_set__wsnt__ResumeSubscription(
	struct soap *soap,
	const std::vector<char *> & __any)
{
	_wsnt__ResumeSubscription *_p = soap_new__wsnt__ResumeSubscription(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_wsnt__ResumeSubscription::__any = __any;
	}
	return _p;
}

inline int soap_write__wsnt__ResumeSubscription(struct soap *soap, _wsnt__ResumeSubscription const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:ResumeSubscription", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _wsnt__ResumeSubscription * SOAP_FMAC4 soap_get__wsnt__ResumeSubscription(struct soap*, _wsnt__ResumeSubscription *, const char*, const char*);

inline int soap_read__wsnt__ResumeSubscription(struct soap *soap, _wsnt__ResumeSubscription *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__wsnt__ResumeSubscription(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__wsnt__PauseSubscriptionResponse_DEFINED
#define SOAP_TYPE__wsnt__PauseSubscriptionResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__PauseSubscriptionResponse(struct soap*, const char*, int, const _wsnt__PauseSubscriptionResponse *, const char*);
SOAP_FMAC3 _wsnt__PauseSubscriptionResponse * SOAP_FMAC4 soap_in__wsnt__PauseSubscriptionResponse(struct soap*, const char*, _wsnt__PauseSubscriptionResponse *, const char*);
SOAP_FMAC1 _wsnt__PauseSubscriptionResponse * SOAP_FMAC2 soap_instantiate__wsnt__PauseSubscriptionResponse(struct soap*, int, const char*, const char*, size_t*);

inline _wsnt__PauseSubscriptionResponse * soap_new__wsnt__PauseSubscriptionResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__wsnt__PauseSubscriptionResponse(soap, n, NULL, NULL, NULL);
}

inline _wsnt__PauseSubscriptionResponse * soap_new_req__wsnt__PauseSubscriptionResponse(
	struct soap *soap)
{
	_wsnt__PauseSubscriptionResponse *_p = soap_new__wsnt__PauseSubscriptionResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _wsnt__PauseSubscriptionResponse * soap_new_set__wsnt__PauseSubscriptionResponse(
	struct soap *soap,
	const std::vector<char *> & __any)
{
	_wsnt__PauseSubscriptionResponse *_p = soap_new__wsnt__PauseSubscriptionResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_wsnt__PauseSubscriptionResponse::__any = __any;
	}
	return _p;
}

inline int soap_write__wsnt__PauseSubscriptionResponse(struct soap *soap, _wsnt__PauseSubscriptionResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:PauseSubscriptionResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _wsnt__PauseSubscriptionResponse * SOAP_FMAC4 soap_get__wsnt__PauseSubscriptionResponse(struct soap*, _wsnt__PauseSubscriptionResponse *, const char*, const char*);

inline int soap_read__wsnt__PauseSubscriptionResponse(struct soap *soap, _wsnt__PauseSubscriptionResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__wsnt__PauseSubscriptionResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__wsnt__PauseSubscription_DEFINED
#define SOAP_TYPE__wsnt__PauseSubscription_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__PauseSubscription(struct soap*, const char*, int, const _wsnt__PauseSubscription *, const char*);
SOAP_FMAC3 _wsnt__PauseSubscription * SOAP_FMAC4 soap_in__wsnt__PauseSubscription(struct soap*, const char*, _wsnt__PauseSubscription *, const char*);
SOAP_FMAC1 _wsnt__PauseSubscription * SOAP_FMAC2 soap_instantiate__wsnt__PauseSubscription(struct soap*, int, const char*, const char*, size_t*);

inline _wsnt__PauseSubscription * soap_new__wsnt__PauseSubscription(struct soap *soap, int n = -1)
{
	return soap_instantiate__wsnt__PauseSubscription(soap, n, NULL, NULL, NULL);
}

inline _wsnt__PauseSubscription * soap_new_req__wsnt__PauseSubscription(
	struct soap *soap)
{
	_wsnt__PauseSubscription *_p = soap_new__wsnt__PauseSubscription(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _wsnt__PauseSubscription * soap_new_set__wsnt__PauseSubscription(
	struct soap *soap,
	const std::vector<char *> & __any)
{
	_wsnt__PauseSubscription *_p = soap_new__wsnt__PauseSubscription(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_wsnt__PauseSubscription::__any = __any;
	}
	return _p;
}

inline int soap_write__wsnt__PauseSubscription(struct soap *soap, _wsnt__PauseSubscription const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:PauseSubscription", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _wsnt__PauseSubscription * SOAP_FMAC4 soap_get__wsnt__PauseSubscription(struct soap*, _wsnt__PauseSubscription *, const char*, const char*);

inline int soap_read__wsnt__PauseSubscription(struct soap *soap, _wsnt__PauseSubscription *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__wsnt__PauseSubscription(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__wsnt__UnsubscribeResponse_DEFINED
#define SOAP_TYPE__wsnt__UnsubscribeResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__UnsubscribeResponse(struct soap*, const char*, int, const _wsnt__UnsubscribeResponse *, const char*);
SOAP_FMAC3 _wsnt__UnsubscribeResponse * SOAP_FMAC4 soap_in__wsnt__UnsubscribeResponse(struct soap*, const char*, _wsnt__UnsubscribeResponse *, const char*);
SOAP_FMAC1 _wsnt__UnsubscribeResponse * SOAP_FMAC2 soap_instantiate__wsnt__UnsubscribeResponse(struct soap*, int, const char*, const char*, size_t*);

inline _wsnt__UnsubscribeResponse * soap_new__wsnt__UnsubscribeResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__wsnt__UnsubscribeResponse(soap, n, NULL, NULL, NULL);
}

inline _wsnt__UnsubscribeResponse * soap_new_req__wsnt__UnsubscribeResponse(
	struct soap *soap)
{
	_wsnt__UnsubscribeResponse *_p = soap_new__wsnt__UnsubscribeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _wsnt__UnsubscribeResponse * soap_new_set__wsnt__UnsubscribeResponse(
	struct soap *soap,
	const std::vector<char *> & __any)
{
	_wsnt__UnsubscribeResponse *_p = soap_new__wsnt__UnsubscribeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_wsnt__UnsubscribeResponse::__any = __any;
	}
	return _p;
}

inline int soap_write__wsnt__UnsubscribeResponse(struct soap *soap, _wsnt__UnsubscribeResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:UnsubscribeResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _wsnt__UnsubscribeResponse * SOAP_FMAC4 soap_get__wsnt__UnsubscribeResponse(struct soap*, _wsnt__UnsubscribeResponse *, const char*, const char*);

inline int soap_read__wsnt__UnsubscribeResponse(struct soap *soap, _wsnt__UnsubscribeResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__wsnt__UnsubscribeResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__wsnt__Unsubscribe_DEFINED
#define SOAP_TYPE__wsnt__Unsubscribe_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__Unsubscribe(struct soap*, const char*, int, const _wsnt__Unsubscribe *, const char*);
SOAP_FMAC3 _wsnt__Unsubscribe * SOAP_FMAC4 soap_in__wsnt__Unsubscribe(struct soap*, const char*, _wsnt__Unsubscribe *, const char*);
SOAP_FMAC1 _wsnt__Unsubscribe * SOAP_FMAC2 soap_instantiate__wsnt__Unsubscribe(struct soap*, int, const char*, const char*, size_t*);

inline _wsnt__Unsubscribe * soap_new__wsnt__Unsubscribe(struct soap *soap, int n = -1)
{
	return soap_instantiate__wsnt__Unsubscribe(soap, n, NULL, NULL, NULL);
}

inline _wsnt__Unsubscribe * soap_new_req__wsnt__Unsubscribe(
	struct soap *soap)
{
	_wsnt__Unsubscribe *_p = soap_new__wsnt__Unsubscribe(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _wsnt__Unsubscribe * soap_new_set__wsnt__Unsubscribe(
	struct soap *soap,
	const std::vector<char *> & __any)
{
	_wsnt__Unsubscribe *_p = soap_new__wsnt__Unsubscribe(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_wsnt__Unsubscribe::__any = __any;
	}
	return _p;
}

inline int soap_write__wsnt__Unsubscribe(struct soap *soap, _wsnt__Unsubscribe const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:Unsubscribe", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _wsnt__Unsubscribe * SOAP_FMAC4 soap_get__wsnt__Unsubscribe(struct soap*, _wsnt__Unsubscribe *, const char*, const char*);

inline int soap_read__wsnt__Unsubscribe(struct soap *soap, _wsnt__Unsubscribe *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__wsnt__Unsubscribe(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__wsnt__RenewResponse_DEFINED
#define SOAP_TYPE__wsnt__RenewResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__RenewResponse(struct soap*, const char*, int, const _wsnt__RenewResponse *, const char*);
SOAP_FMAC3 _wsnt__RenewResponse * SOAP_FMAC4 soap_in__wsnt__RenewResponse(struct soap*, const char*, _wsnt__RenewResponse *, const char*);
SOAP_FMAC1 _wsnt__RenewResponse * SOAP_FMAC2 soap_instantiate__wsnt__RenewResponse(struct soap*, int, const char*, const char*, size_t*);

inline _wsnt__RenewResponse * soap_new__wsnt__RenewResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__wsnt__RenewResponse(soap, n, NULL, NULL, NULL);
}

inline _wsnt__RenewResponse * soap_new_req__wsnt__RenewResponse(
	struct soap *soap,
	time_t TerminationTime)
{
	_wsnt__RenewResponse *_p = soap_new__wsnt__RenewResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_wsnt__RenewResponse::TerminationTime = TerminationTime;
	}
	return _p;
}

inline _wsnt__RenewResponse * soap_new_set__wsnt__RenewResponse(
	struct soap *soap,
	time_t TerminationTime,
	time_t *CurrentTime,
	const std::vector<char *> & __any)
{
	_wsnt__RenewResponse *_p = soap_new__wsnt__RenewResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_wsnt__RenewResponse::TerminationTime = TerminationTime;
		_p->_wsnt__RenewResponse::CurrentTime = CurrentTime;
		_p->_wsnt__RenewResponse::__any = __any;
	}
	return _p;
}

inline int soap_write__wsnt__RenewResponse(struct soap *soap, _wsnt__RenewResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:RenewResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _wsnt__RenewResponse * SOAP_FMAC4 soap_get__wsnt__RenewResponse(struct soap*, _wsnt__RenewResponse *, const char*, const char*);

inline int soap_read__wsnt__RenewResponse(struct soap *soap, _wsnt__RenewResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__wsnt__RenewResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__wsnt__Renew_DEFINED
#define SOAP_TYPE__wsnt__Renew_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__Renew(struct soap*, const char*, int, const _wsnt__Renew *, const char*);
SOAP_FMAC3 _wsnt__Renew * SOAP_FMAC4 soap_in__wsnt__Renew(struct soap*, const char*, _wsnt__Renew *, const char*);
SOAP_FMAC1 _wsnt__Renew * SOAP_FMAC2 soap_instantiate__wsnt__Renew(struct soap*, int, const char*, const char*, size_t*);

inline _wsnt__Renew * soap_new__wsnt__Renew(struct soap *soap, int n = -1)
{
	return soap_instantiate__wsnt__Renew(soap, n, NULL, NULL, NULL);
}

inline _wsnt__Renew * soap_new_req__wsnt__Renew(
	struct soap *soap,
	std::string *TerminationTime)
{
	_wsnt__Renew *_p = soap_new__wsnt__Renew(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_wsnt__Renew::TerminationTime = TerminationTime;
	}
	return _p;
}

inline _wsnt__Renew * soap_new_set__wsnt__Renew(
	struct soap *soap,
	std::string *TerminationTime,
	const std::vector<char *> & __any)
{
	_wsnt__Renew *_p = soap_new__wsnt__Renew(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_wsnt__Renew::TerminationTime = TerminationTime;
		_p->_wsnt__Renew::__any = __any;
	}
	return _p;
}

inline int soap_write__wsnt__Renew(struct soap *soap, _wsnt__Renew const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:Renew", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _wsnt__Renew * SOAP_FMAC4 soap_get__wsnt__Renew(struct soap*, _wsnt__Renew *, const char*, const char*);

inline int soap_read__wsnt__Renew(struct soap *soap, _wsnt__Renew *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__wsnt__Renew(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__wsnt__CreatePullPointResponse_DEFINED
#define SOAP_TYPE__wsnt__CreatePullPointResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__CreatePullPointResponse(struct soap*, const char*, int, const _wsnt__CreatePullPointResponse *, const char*);
SOAP_FMAC3 _wsnt__CreatePullPointResponse * SOAP_FMAC4 soap_in__wsnt__CreatePullPointResponse(struct soap*, const char*, _wsnt__CreatePullPointResponse *, const char*);
SOAP_FMAC1 _wsnt__CreatePullPointResponse * SOAP_FMAC2 soap_instantiate__wsnt__CreatePullPointResponse(struct soap*, int, const char*, const char*, size_t*);

inline _wsnt__CreatePullPointResponse * soap_new__wsnt__CreatePullPointResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__wsnt__CreatePullPointResponse(soap, n, NULL, NULL, NULL);
}

inline _wsnt__CreatePullPointResponse * soap_new_req__wsnt__CreatePullPointResponse(
	struct soap *soap,
	const struct wsa5__EndpointReferenceType& PullPoint)
{
	_wsnt__CreatePullPointResponse *_p = soap_new__wsnt__CreatePullPointResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_wsnt__CreatePullPointResponse::PullPoint = PullPoint;
	}
	return _p;
}

inline _wsnt__CreatePullPointResponse * soap_new_set__wsnt__CreatePullPointResponse(
	struct soap *soap,
	const struct wsa5__EndpointReferenceType& PullPoint,
	const std::vector<char *> & __any,
	char *__anyAttribute)
{
	_wsnt__CreatePullPointResponse *_p = soap_new__wsnt__CreatePullPointResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_wsnt__CreatePullPointResponse::PullPoint = PullPoint;
		_p->_wsnt__CreatePullPointResponse::__any = __any;
		_p->_wsnt__CreatePullPointResponse::__anyAttribute = __anyAttribute;
	}
	return _p;
}

inline int soap_write__wsnt__CreatePullPointResponse(struct soap *soap, _wsnt__CreatePullPointResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:CreatePullPointResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _wsnt__CreatePullPointResponse * SOAP_FMAC4 soap_get__wsnt__CreatePullPointResponse(struct soap*, _wsnt__CreatePullPointResponse *, const char*, const char*);

inline int soap_read__wsnt__CreatePullPointResponse(struct soap *soap, _wsnt__CreatePullPointResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__wsnt__CreatePullPointResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__wsnt__CreatePullPoint_DEFINED
#define SOAP_TYPE__wsnt__CreatePullPoint_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__CreatePullPoint(struct soap*, const char*, int, const _wsnt__CreatePullPoint *, const char*);
SOAP_FMAC3 _wsnt__CreatePullPoint * SOAP_FMAC4 soap_in__wsnt__CreatePullPoint(struct soap*, const char*, _wsnt__CreatePullPoint *, const char*);
SOAP_FMAC1 _wsnt__CreatePullPoint * SOAP_FMAC2 soap_instantiate__wsnt__CreatePullPoint(struct soap*, int, const char*, const char*, size_t*);

inline _wsnt__CreatePullPoint * soap_new__wsnt__CreatePullPoint(struct soap *soap, int n = -1)
{
	return soap_instantiate__wsnt__CreatePullPoint(soap, n, NULL, NULL, NULL);
}

inline _wsnt__CreatePullPoint * soap_new_req__wsnt__CreatePullPoint(
	struct soap *soap)
{
	_wsnt__CreatePullPoint *_p = soap_new__wsnt__CreatePullPoint(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _wsnt__CreatePullPoint * soap_new_set__wsnt__CreatePullPoint(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__anyAttribute)
{
	_wsnt__CreatePullPoint *_p = soap_new__wsnt__CreatePullPoint(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_wsnt__CreatePullPoint::__any = __any;
		_p->_wsnt__CreatePullPoint::__anyAttribute = __anyAttribute;
	}
	return _p;
}

inline int soap_write__wsnt__CreatePullPoint(struct soap *soap, _wsnt__CreatePullPoint const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:CreatePullPoint", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _wsnt__CreatePullPoint * SOAP_FMAC4 soap_get__wsnt__CreatePullPoint(struct soap*, _wsnt__CreatePullPoint *, const char*, const char*);

inline int soap_read__wsnt__CreatePullPoint(struct soap *soap, _wsnt__CreatePullPoint *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__wsnt__CreatePullPoint(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__wsnt__DestroyPullPointResponse_DEFINED
#define SOAP_TYPE__wsnt__DestroyPullPointResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__DestroyPullPointResponse(struct soap*, const char*, int, const _wsnt__DestroyPullPointResponse *, const char*);
SOAP_FMAC3 _wsnt__DestroyPullPointResponse * SOAP_FMAC4 soap_in__wsnt__DestroyPullPointResponse(struct soap*, const char*, _wsnt__DestroyPullPointResponse *, const char*);
SOAP_FMAC1 _wsnt__DestroyPullPointResponse * SOAP_FMAC2 soap_instantiate__wsnt__DestroyPullPointResponse(struct soap*, int, const char*, const char*, size_t*);

inline _wsnt__DestroyPullPointResponse * soap_new__wsnt__DestroyPullPointResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__wsnt__DestroyPullPointResponse(soap, n, NULL, NULL, NULL);
}

inline _wsnt__DestroyPullPointResponse * soap_new_req__wsnt__DestroyPullPointResponse(
	struct soap *soap)
{
	_wsnt__DestroyPullPointResponse *_p = soap_new__wsnt__DestroyPullPointResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _wsnt__DestroyPullPointResponse * soap_new_set__wsnt__DestroyPullPointResponse(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__anyAttribute)
{
	_wsnt__DestroyPullPointResponse *_p = soap_new__wsnt__DestroyPullPointResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_wsnt__DestroyPullPointResponse::__any = __any;
		_p->_wsnt__DestroyPullPointResponse::__anyAttribute = __anyAttribute;
	}
	return _p;
}

inline int soap_write__wsnt__DestroyPullPointResponse(struct soap *soap, _wsnt__DestroyPullPointResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:DestroyPullPointResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _wsnt__DestroyPullPointResponse * SOAP_FMAC4 soap_get__wsnt__DestroyPullPointResponse(struct soap*, _wsnt__DestroyPullPointResponse *, const char*, const char*);

inline int soap_read__wsnt__DestroyPullPointResponse(struct soap *soap, _wsnt__DestroyPullPointResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__wsnt__DestroyPullPointResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__wsnt__DestroyPullPoint_DEFINED
#define SOAP_TYPE__wsnt__DestroyPullPoint_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__DestroyPullPoint(struct soap*, const char*, int, const _wsnt__DestroyPullPoint *, const char*);
SOAP_FMAC3 _wsnt__DestroyPullPoint * SOAP_FMAC4 soap_in__wsnt__DestroyPullPoint(struct soap*, const char*, _wsnt__DestroyPullPoint *, const char*);
SOAP_FMAC1 _wsnt__DestroyPullPoint * SOAP_FMAC2 soap_instantiate__wsnt__DestroyPullPoint(struct soap*, int, const char*, const char*, size_t*);

inline _wsnt__DestroyPullPoint * soap_new__wsnt__DestroyPullPoint(struct soap *soap, int n = -1)
{
	return soap_instantiate__wsnt__DestroyPullPoint(soap, n, NULL, NULL, NULL);
}

inline _wsnt__DestroyPullPoint * soap_new_req__wsnt__DestroyPullPoint(
	struct soap *soap)
{
	_wsnt__DestroyPullPoint *_p = soap_new__wsnt__DestroyPullPoint(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _wsnt__DestroyPullPoint * soap_new_set__wsnt__DestroyPullPoint(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__anyAttribute)
{
	_wsnt__DestroyPullPoint *_p = soap_new__wsnt__DestroyPullPoint(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_wsnt__DestroyPullPoint::__any = __any;
		_p->_wsnt__DestroyPullPoint::__anyAttribute = __anyAttribute;
	}
	return _p;
}

inline int soap_write__wsnt__DestroyPullPoint(struct soap *soap, _wsnt__DestroyPullPoint const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:DestroyPullPoint", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _wsnt__DestroyPullPoint * SOAP_FMAC4 soap_get__wsnt__DestroyPullPoint(struct soap*, _wsnt__DestroyPullPoint *, const char*, const char*);

inline int soap_read__wsnt__DestroyPullPoint(struct soap *soap, _wsnt__DestroyPullPoint *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__wsnt__DestroyPullPoint(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__wsnt__GetMessagesResponse_DEFINED
#define SOAP_TYPE__wsnt__GetMessagesResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__GetMessagesResponse(struct soap*, const char*, int, const _wsnt__GetMessagesResponse *, const char*);
SOAP_FMAC3 _wsnt__GetMessagesResponse * SOAP_FMAC4 soap_in__wsnt__GetMessagesResponse(struct soap*, const char*, _wsnt__GetMessagesResponse *, const char*);
SOAP_FMAC1 _wsnt__GetMessagesResponse * SOAP_FMAC2 soap_instantiate__wsnt__GetMessagesResponse(struct soap*, int, const char*, const char*, size_t*);

inline _wsnt__GetMessagesResponse * soap_new__wsnt__GetMessagesResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__wsnt__GetMessagesResponse(soap, n, NULL, NULL, NULL);
}

inline _wsnt__GetMessagesResponse * soap_new_req__wsnt__GetMessagesResponse(
	struct soap *soap)
{
	_wsnt__GetMessagesResponse *_p = soap_new__wsnt__GetMessagesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _wsnt__GetMessagesResponse * soap_new_set__wsnt__GetMessagesResponse(
	struct soap *soap,
	const std::vector<wsnt__NotificationMessageHolderType *> & NotificationMessage,
	const std::vector<char *> & __any,
	char *__anyAttribute)
{
	_wsnt__GetMessagesResponse *_p = soap_new__wsnt__GetMessagesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_wsnt__GetMessagesResponse::NotificationMessage = NotificationMessage;
		_p->_wsnt__GetMessagesResponse::__any = __any;
		_p->_wsnt__GetMessagesResponse::__anyAttribute = __anyAttribute;
	}
	return _p;
}

inline int soap_write__wsnt__GetMessagesResponse(struct soap *soap, _wsnt__GetMessagesResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:GetMessagesResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _wsnt__GetMessagesResponse * SOAP_FMAC4 soap_get__wsnt__GetMessagesResponse(struct soap*, _wsnt__GetMessagesResponse *, const char*, const char*);

inline int soap_read__wsnt__GetMessagesResponse(struct soap *soap, _wsnt__GetMessagesResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__wsnt__GetMessagesResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__wsnt__GetMessages_DEFINED
#define SOAP_TYPE__wsnt__GetMessages_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__GetMessages(struct soap*, const char*, int, const _wsnt__GetMessages *, const char*);
SOAP_FMAC3 _wsnt__GetMessages * SOAP_FMAC4 soap_in__wsnt__GetMessages(struct soap*, const char*, _wsnt__GetMessages *, const char*);
SOAP_FMAC1 _wsnt__GetMessages * SOAP_FMAC2 soap_instantiate__wsnt__GetMessages(struct soap*, int, const char*, const char*, size_t*);

inline _wsnt__GetMessages * soap_new__wsnt__GetMessages(struct soap *soap, int n = -1)
{
	return soap_instantiate__wsnt__GetMessages(soap, n, NULL, NULL, NULL);
}

inline _wsnt__GetMessages * soap_new_req__wsnt__GetMessages(
	struct soap *soap)
{
	_wsnt__GetMessages *_p = soap_new__wsnt__GetMessages(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _wsnt__GetMessages * soap_new_set__wsnt__GetMessages(
	struct soap *soap,
	std::string *MaximumNumber,
	const std::vector<char *> & __any,
	char *__anyAttribute)
{
	_wsnt__GetMessages *_p = soap_new__wsnt__GetMessages(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_wsnt__GetMessages::MaximumNumber = MaximumNumber;
		_p->_wsnt__GetMessages::__any = __any;
		_p->_wsnt__GetMessages::__anyAttribute = __anyAttribute;
	}
	return _p;
}

inline int soap_write__wsnt__GetMessages(struct soap *soap, _wsnt__GetMessages const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:GetMessages", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _wsnt__GetMessages * SOAP_FMAC4 soap_get__wsnt__GetMessages(struct soap*, _wsnt__GetMessages *, const char*, const char*);

inline int soap_read__wsnt__GetMessages(struct soap *soap, _wsnt__GetMessages *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__wsnt__GetMessages(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__wsnt__GetCurrentMessageResponse_DEFINED
#define SOAP_TYPE__wsnt__GetCurrentMessageResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__GetCurrentMessageResponse(struct soap*, const char*, int, const _wsnt__GetCurrentMessageResponse *, const char*);
SOAP_FMAC3 _wsnt__GetCurrentMessageResponse * SOAP_FMAC4 soap_in__wsnt__GetCurrentMessageResponse(struct soap*, const char*, _wsnt__GetCurrentMessageResponse *, const char*);
SOAP_FMAC1 _wsnt__GetCurrentMessageResponse * SOAP_FMAC2 soap_instantiate__wsnt__GetCurrentMessageResponse(struct soap*, int, const char*, const char*, size_t*);

inline _wsnt__GetCurrentMessageResponse * soap_new__wsnt__GetCurrentMessageResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__wsnt__GetCurrentMessageResponse(soap, n, NULL, NULL, NULL);
}

inline _wsnt__GetCurrentMessageResponse * soap_new_req__wsnt__GetCurrentMessageResponse(
	struct soap *soap)
{
	_wsnt__GetCurrentMessageResponse *_p = soap_new__wsnt__GetCurrentMessageResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _wsnt__GetCurrentMessageResponse * soap_new_set__wsnt__GetCurrentMessageResponse(
	struct soap *soap,
	const std::vector<char *> & __any)
{
	_wsnt__GetCurrentMessageResponse *_p = soap_new__wsnt__GetCurrentMessageResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_wsnt__GetCurrentMessageResponse::__any = __any;
	}
	return _p;
}

inline int soap_write__wsnt__GetCurrentMessageResponse(struct soap *soap, _wsnt__GetCurrentMessageResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:GetCurrentMessageResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _wsnt__GetCurrentMessageResponse * SOAP_FMAC4 soap_get__wsnt__GetCurrentMessageResponse(struct soap*, _wsnt__GetCurrentMessageResponse *, const char*, const char*);

inline int soap_read__wsnt__GetCurrentMessageResponse(struct soap *soap, _wsnt__GetCurrentMessageResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__wsnt__GetCurrentMessageResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__wsnt__GetCurrentMessage_DEFINED
#define SOAP_TYPE__wsnt__GetCurrentMessage_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__GetCurrentMessage(struct soap*, const char*, int, const _wsnt__GetCurrentMessage *, const char*);
SOAP_FMAC3 _wsnt__GetCurrentMessage * SOAP_FMAC4 soap_in__wsnt__GetCurrentMessage(struct soap*, const char*, _wsnt__GetCurrentMessage *, const char*);
SOAP_FMAC1 _wsnt__GetCurrentMessage * SOAP_FMAC2 soap_instantiate__wsnt__GetCurrentMessage(struct soap*, int, const char*, const char*, size_t*);

inline _wsnt__GetCurrentMessage * soap_new__wsnt__GetCurrentMessage(struct soap *soap, int n = -1)
{
	return soap_instantiate__wsnt__GetCurrentMessage(soap, n, NULL, NULL, NULL);
}

inline _wsnt__GetCurrentMessage * soap_new_req__wsnt__GetCurrentMessage(
	struct soap *soap,
	wsnt__TopicExpressionType *Topic)
{
	_wsnt__GetCurrentMessage *_p = soap_new__wsnt__GetCurrentMessage(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_wsnt__GetCurrentMessage::Topic = Topic;
	}
	return _p;
}

inline _wsnt__GetCurrentMessage * soap_new_set__wsnt__GetCurrentMessage(
	struct soap *soap,
	wsnt__TopicExpressionType *Topic,
	const std::vector<char *> & __any)
{
	_wsnt__GetCurrentMessage *_p = soap_new__wsnt__GetCurrentMessage(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_wsnt__GetCurrentMessage::Topic = Topic;
		_p->_wsnt__GetCurrentMessage::__any = __any;
	}
	return _p;
}

inline int soap_write__wsnt__GetCurrentMessage(struct soap *soap, _wsnt__GetCurrentMessage const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:GetCurrentMessage", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _wsnt__GetCurrentMessage * SOAP_FMAC4 soap_get__wsnt__GetCurrentMessage(struct soap*, _wsnt__GetCurrentMessage *, const char*, const char*);

inline int soap_read__wsnt__GetCurrentMessage(struct soap *soap, _wsnt__GetCurrentMessage *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__wsnt__GetCurrentMessage(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__wsnt__SubscribeResponse_DEFINED
#define SOAP_TYPE__wsnt__SubscribeResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__SubscribeResponse(struct soap*, const char*, int, const _wsnt__SubscribeResponse *, const char*);
SOAP_FMAC3 _wsnt__SubscribeResponse * SOAP_FMAC4 soap_in__wsnt__SubscribeResponse(struct soap*, const char*, _wsnt__SubscribeResponse *, const char*);
SOAP_FMAC1 _wsnt__SubscribeResponse * SOAP_FMAC2 soap_instantiate__wsnt__SubscribeResponse(struct soap*, int, const char*, const char*, size_t*);

inline _wsnt__SubscribeResponse * soap_new__wsnt__SubscribeResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__wsnt__SubscribeResponse(soap, n, NULL, NULL, NULL);
}

inline _wsnt__SubscribeResponse * soap_new_req__wsnt__SubscribeResponse(
	struct soap *soap,
	const struct wsa5__EndpointReferenceType& SubscriptionReference)
{
	_wsnt__SubscribeResponse *_p = soap_new__wsnt__SubscribeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_wsnt__SubscribeResponse::SubscriptionReference = SubscriptionReference;
	}
	return _p;
}

inline _wsnt__SubscribeResponse * soap_new_set__wsnt__SubscribeResponse(
	struct soap *soap,
	const struct wsa5__EndpointReferenceType& SubscriptionReference,
	time_t *CurrentTime,
	time_t *TerminationTime,
	const std::vector<char *> & __any)
{
	_wsnt__SubscribeResponse *_p = soap_new__wsnt__SubscribeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_wsnt__SubscribeResponse::SubscriptionReference = SubscriptionReference;
		_p->_wsnt__SubscribeResponse::CurrentTime = CurrentTime;
		_p->_wsnt__SubscribeResponse::TerminationTime = TerminationTime;
		_p->_wsnt__SubscribeResponse::__any = __any;
	}
	return _p;
}

inline int soap_write__wsnt__SubscribeResponse(struct soap *soap, _wsnt__SubscribeResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:SubscribeResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _wsnt__SubscribeResponse * SOAP_FMAC4 soap_get__wsnt__SubscribeResponse(struct soap*, _wsnt__SubscribeResponse *, const char*, const char*);

inline int soap_read__wsnt__SubscribeResponse(struct soap *soap, _wsnt__SubscribeResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__wsnt__SubscribeResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__wsnt__Subscribe_DEFINED
#define SOAP_TYPE__wsnt__Subscribe_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__Subscribe(struct soap*, const char*, int, const _wsnt__Subscribe *, const char*);
SOAP_FMAC3 _wsnt__Subscribe * SOAP_FMAC4 soap_in__wsnt__Subscribe(struct soap*, const char*, _wsnt__Subscribe *, const char*);
SOAP_FMAC1 _wsnt__Subscribe * SOAP_FMAC2 soap_instantiate__wsnt__Subscribe(struct soap*, int, const char*, const char*, size_t*);

inline _wsnt__Subscribe * soap_new__wsnt__Subscribe(struct soap *soap, int n = -1)
{
	return soap_instantiate__wsnt__Subscribe(soap, n, NULL, NULL, NULL);
}

inline _wsnt__Subscribe * soap_new_req__wsnt__Subscribe(
	struct soap *soap,
	const struct wsa5__EndpointReferenceType& ConsumerReference)
{
	_wsnt__Subscribe *_p = soap_new__wsnt__Subscribe(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_wsnt__Subscribe::ConsumerReference = ConsumerReference;
	}
	return _p;
}

inline _wsnt__Subscribe * soap_new_set__wsnt__Subscribe(
	struct soap *soap,
	const struct wsa5__EndpointReferenceType& ConsumerReference,
	wsnt__FilterType *Filter,
	std::string *InitialTerminationTime,
	_wsnt__Subscribe_SubscriptionPolicy *SubscriptionPolicy,
	const std::vector<char *> & __any)
{
	_wsnt__Subscribe *_p = soap_new__wsnt__Subscribe(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_wsnt__Subscribe::ConsumerReference = ConsumerReference;
		_p->_wsnt__Subscribe::Filter = Filter;
		_p->_wsnt__Subscribe::InitialTerminationTime = InitialTerminationTime;
		_p->_wsnt__Subscribe::SubscriptionPolicy = SubscriptionPolicy;
		_p->_wsnt__Subscribe::__any = __any;
	}
	return _p;
}

inline int soap_write__wsnt__Subscribe(struct soap *soap, _wsnt__Subscribe const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:Subscribe", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _wsnt__Subscribe * SOAP_FMAC4 soap_get__wsnt__Subscribe(struct soap*, _wsnt__Subscribe *, const char*, const char*);

inline int soap_read__wsnt__Subscribe(struct soap *soap, _wsnt__Subscribe *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__wsnt__Subscribe(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__wsnt__UseRaw_DEFINED
#define SOAP_TYPE__wsnt__UseRaw_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__UseRaw(struct soap*, const char*, int, const _wsnt__UseRaw *, const char*);
SOAP_FMAC3 _wsnt__UseRaw * SOAP_FMAC4 soap_in__wsnt__UseRaw(struct soap*, const char*, _wsnt__UseRaw *, const char*);
SOAP_FMAC1 _wsnt__UseRaw * SOAP_FMAC2 soap_instantiate__wsnt__UseRaw(struct soap*, int, const char*, const char*, size_t*);

inline _wsnt__UseRaw * soap_new__wsnt__UseRaw(struct soap *soap, int n = -1)
{
	return soap_instantiate__wsnt__UseRaw(soap, n, NULL, NULL, NULL);
}

inline _wsnt__UseRaw * soap_new_req__wsnt__UseRaw(
	struct soap *soap)
{
	_wsnt__UseRaw *_p = soap_new__wsnt__UseRaw(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _wsnt__UseRaw * soap_new_set__wsnt__UseRaw(
	struct soap *soap)
{
	_wsnt__UseRaw *_p = soap_new__wsnt__UseRaw(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__wsnt__UseRaw(struct soap *soap, _wsnt__UseRaw const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:UseRaw", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _wsnt__UseRaw * SOAP_FMAC4 soap_get__wsnt__UseRaw(struct soap*, _wsnt__UseRaw *, const char*, const char*);

inline int soap_read__wsnt__UseRaw(struct soap *soap, _wsnt__UseRaw *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__wsnt__UseRaw(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__wsnt__Notify_DEFINED
#define SOAP_TYPE__wsnt__Notify_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__Notify(struct soap*, const char*, int, const _wsnt__Notify *, const char*);
SOAP_FMAC3 _wsnt__Notify * SOAP_FMAC4 soap_in__wsnt__Notify(struct soap*, const char*, _wsnt__Notify *, const char*);
SOAP_FMAC1 _wsnt__Notify * SOAP_FMAC2 soap_instantiate__wsnt__Notify(struct soap*, int, const char*, const char*, size_t*);

inline _wsnt__Notify * soap_new__wsnt__Notify(struct soap *soap, int n = -1)
{
	return soap_instantiate__wsnt__Notify(soap, n, NULL, NULL, NULL);
}

inline _wsnt__Notify * soap_new_req__wsnt__Notify(
	struct soap *soap,
	const std::vector<wsnt__NotificationMessageHolderType *> & NotificationMessage)
{
	_wsnt__Notify *_p = soap_new__wsnt__Notify(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_wsnt__Notify::NotificationMessage = NotificationMessage;
	}
	return _p;
}

inline _wsnt__Notify * soap_new_set__wsnt__Notify(
	struct soap *soap,
	const std::vector<wsnt__NotificationMessageHolderType *> & NotificationMessage,
	const std::vector<char *> & __any)
{
	_wsnt__Notify *_p = soap_new__wsnt__Notify(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_wsnt__Notify::NotificationMessage = NotificationMessage;
		_p->_wsnt__Notify::__any = __any;
	}
	return _p;
}

inline int soap_write__wsnt__Notify(struct soap *soap, _wsnt__Notify const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:Notify", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _wsnt__Notify * SOAP_FMAC4 soap_get__wsnt__Notify(struct soap*, _wsnt__Notify *, const char*, const char*);

inline int soap_read__wsnt__Notify(struct soap *soap, _wsnt__Notify *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__wsnt__Notify(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__wsnt__SubscriptionManagerRP_DEFINED
#define SOAP_TYPE__wsnt__SubscriptionManagerRP_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__SubscriptionManagerRP(struct soap*, const char*, int, const _wsnt__SubscriptionManagerRP *, const char*);
SOAP_FMAC3 _wsnt__SubscriptionManagerRP * SOAP_FMAC4 soap_in__wsnt__SubscriptionManagerRP(struct soap*, const char*, _wsnt__SubscriptionManagerRP *, const char*);
SOAP_FMAC1 _wsnt__SubscriptionManagerRP * SOAP_FMAC2 soap_instantiate__wsnt__SubscriptionManagerRP(struct soap*, int, const char*, const char*, size_t*);

inline _wsnt__SubscriptionManagerRP * soap_new__wsnt__SubscriptionManagerRP(struct soap *soap, int n = -1)
{
	return soap_instantiate__wsnt__SubscriptionManagerRP(soap, n, NULL, NULL, NULL);
}

inline _wsnt__SubscriptionManagerRP * soap_new_req__wsnt__SubscriptionManagerRP(
	struct soap *soap,
	const struct wsa5__EndpointReferenceType& ConsumerReference)
{
	_wsnt__SubscriptionManagerRP *_p = soap_new__wsnt__SubscriptionManagerRP(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_wsnt__SubscriptionManagerRP::ConsumerReference = ConsumerReference;
	}
	return _p;
}

inline _wsnt__SubscriptionManagerRP * soap_new_set__wsnt__SubscriptionManagerRP(
	struct soap *soap,
	const struct wsa5__EndpointReferenceType& ConsumerReference,
	wsnt__FilterType *Filter,
	wsnt__SubscriptionPolicyType *SubscriptionPolicy,
	time_t *CreationTime)
{
	_wsnt__SubscriptionManagerRP *_p = soap_new__wsnt__SubscriptionManagerRP(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_wsnt__SubscriptionManagerRP::ConsumerReference = ConsumerReference;
		_p->_wsnt__SubscriptionManagerRP::Filter = Filter;
		_p->_wsnt__SubscriptionManagerRP::SubscriptionPolicy = SubscriptionPolicy;
		_p->_wsnt__SubscriptionManagerRP::CreationTime = CreationTime;
	}
	return _p;
}

inline int soap_write__wsnt__SubscriptionManagerRP(struct soap *soap, _wsnt__SubscriptionManagerRP const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:SubscriptionManagerRP", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _wsnt__SubscriptionManagerRP * SOAP_FMAC4 soap_get__wsnt__SubscriptionManagerRP(struct soap*, _wsnt__SubscriptionManagerRP *, const char*, const char*);

inline int soap_read__wsnt__SubscriptionManagerRP(struct soap *soap, _wsnt__SubscriptionManagerRP *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__wsnt__SubscriptionManagerRP(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__wsnt__NotificationProducerRP_DEFINED
#define SOAP_TYPE__wsnt__NotificationProducerRP_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__NotificationProducerRP(struct soap*, const char*, int, const _wsnt__NotificationProducerRP *, const char*);
SOAP_FMAC3 _wsnt__NotificationProducerRP * SOAP_FMAC4 soap_in__wsnt__NotificationProducerRP(struct soap*, const char*, _wsnt__NotificationProducerRP *, const char*);
SOAP_FMAC1 _wsnt__NotificationProducerRP * SOAP_FMAC2 soap_instantiate__wsnt__NotificationProducerRP(struct soap*, int, const char*, const char*, size_t*);

inline _wsnt__NotificationProducerRP * soap_new__wsnt__NotificationProducerRP(struct soap *soap, int n = -1)
{
	return soap_instantiate__wsnt__NotificationProducerRP(soap, n, NULL, NULL, NULL);
}

inline _wsnt__NotificationProducerRP * soap_new_req__wsnt__NotificationProducerRP(
	struct soap *soap)
{
	_wsnt__NotificationProducerRP *_p = soap_new__wsnt__NotificationProducerRP(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _wsnt__NotificationProducerRP * soap_new_set__wsnt__NotificationProducerRP(
	struct soap *soap,
	const std::vector<wsnt__TopicExpressionType *> & TopicExpression,
	bool FixedTopicSet,
	const std::vector<std::string> & TopicExpressionDialect,
	wstop__TopicSetType *wstop__TopicSet)
{
	_wsnt__NotificationProducerRP *_p = soap_new__wsnt__NotificationProducerRP(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_wsnt__NotificationProducerRP::TopicExpression = TopicExpression;
		_p->_wsnt__NotificationProducerRP::FixedTopicSet = FixedTopicSet;
		_p->_wsnt__NotificationProducerRP::TopicExpressionDialect = TopicExpressionDialect;
		_p->_wsnt__NotificationProducerRP::wstop__TopicSet = wstop__TopicSet;
	}
	return _p;
}

inline int soap_write__wsnt__NotificationProducerRP(struct soap *soap, _wsnt__NotificationProducerRP const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:NotificationProducerRP", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _wsnt__NotificationProducerRP * SOAP_FMAC4 soap_get__wsnt__NotificationProducerRP(struct soap*, _wsnt__NotificationProducerRP *, const char*, const char*);

inline int soap_read__wsnt__NotificationProducerRP(struct soap *soap, _wsnt__NotificationProducerRP *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__wsnt__NotificationProducerRP(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_wsnt__ResumeFailedFaultType_DEFINED
#define SOAP_TYPE_wsnt__ResumeFailedFaultType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__ResumeFailedFaultType(struct soap*, const char*, int, const wsnt__ResumeFailedFaultType *, const char*);
SOAP_FMAC3 wsnt__ResumeFailedFaultType * SOAP_FMAC4 soap_in_wsnt__ResumeFailedFaultType(struct soap*, const char*, wsnt__ResumeFailedFaultType *, const char*);
SOAP_FMAC1 wsnt__ResumeFailedFaultType * SOAP_FMAC2 soap_instantiate_wsnt__ResumeFailedFaultType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__ResumeFailedFaultType * soap_new_wsnt__ResumeFailedFaultType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsnt__ResumeFailedFaultType(soap, n, NULL, NULL, NULL);
}

inline wsnt__ResumeFailedFaultType * soap_new_req_wsnt__ResumeFailedFaultType(
	struct soap *soap,
	time_t Timestamp1)
{
	wsnt__ResumeFailedFaultType *_p = soap_new_wsnt__ResumeFailedFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsrfbf__BaseFaultType::Timestamp = Timestamp1;
	}
	return _p;
}

inline wsnt__ResumeFailedFaultType * soap_new_set_wsnt__ResumeFailedFaultType(
	struct soap *soap,
	const std::vector<char *> & __any1,
	time_t Timestamp1,
	struct wsa5__EndpointReferenceType *Originator1,
	_wsrfbf__BaseFaultType_ErrorCode *ErrorCode1,
	std::vector<_wsrfbf__BaseFaultType_Description> *Description1,
	_wsrfbf__BaseFaultType_FaultCause *FaultCause1,
	char *__anyAttribute1,
	char *__item2)
{
	wsnt__ResumeFailedFaultType *_p = soap_new_wsnt__ResumeFailedFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsrfbf__BaseFaultType::__any = __any1;
		_p->wsrfbf__BaseFaultType::Timestamp = Timestamp1;
		_p->wsrfbf__BaseFaultType::Originator = Originator1;
		_p->wsrfbf__BaseFaultType::ErrorCode = ErrorCode1;
		_p->wsrfbf__BaseFaultType::Description = Description1;
		_p->wsrfbf__BaseFaultType::FaultCause = FaultCause1;
		_p->wsrfbf__BaseFaultType::__anyAttribute = __anyAttribute1;
		_p->xsd__anyType::__item = __item2;
	}
	return _p;
}

inline int soap_write_wsnt__ResumeFailedFaultType(struct soap *soap, wsnt__ResumeFailedFaultType const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:ResumeFailedFaultType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 wsnt__ResumeFailedFaultType * SOAP_FMAC4 soap_get_wsnt__ResumeFailedFaultType(struct soap*, wsnt__ResumeFailedFaultType *, const char*, const char*);

inline int soap_read_wsnt__ResumeFailedFaultType(struct soap *soap, wsnt__ResumeFailedFaultType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_wsnt__ResumeFailedFaultType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_wsnt__PauseFailedFaultType_DEFINED
#define SOAP_TYPE_wsnt__PauseFailedFaultType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__PauseFailedFaultType(struct soap*, const char*, int, const wsnt__PauseFailedFaultType *, const char*);
SOAP_FMAC3 wsnt__PauseFailedFaultType * SOAP_FMAC4 soap_in_wsnt__PauseFailedFaultType(struct soap*, const char*, wsnt__PauseFailedFaultType *, const char*);
SOAP_FMAC1 wsnt__PauseFailedFaultType * SOAP_FMAC2 soap_instantiate_wsnt__PauseFailedFaultType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__PauseFailedFaultType * soap_new_wsnt__PauseFailedFaultType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsnt__PauseFailedFaultType(soap, n, NULL, NULL, NULL);
}

inline wsnt__PauseFailedFaultType * soap_new_req_wsnt__PauseFailedFaultType(
	struct soap *soap,
	time_t Timestamp1)
{
	wsnt__PauseFailedFaultType *_p = soap_new_wsnt__PauseFailedFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsrfbf__BaseFaultType::Timestamp = Timestamp1;
	}
	return _p;
}

inline wsnt__PauseFailedFaultType * soap_new_set_wsnt__PauseFailedFaultType(
	struct soap *soap,
	const std::vector<char *> & __any1,
	time_t Timestamp1,
	struct wsa5__EndpointReferenceType *Originator1,
	_wsrfbf__BaseFaultType_ErrorCode *ErrorCode1,
	std::vector<_wsrfbf__BaseFaultType_Description> *Description1,
	_wsrfbf__BaseFaultType_FaultCause *FaultCause1,
	char *__anyAttribute1,
	char *__item2)
{
	wsnt__PauseFailedFaultType *_p = soap_new_wsnt__PauseFailedFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsrfbf__BaseFaultType::__any = __any1;
		_p->wsrfbf__BaseFaultType::Timestamp = Timestamp1;
		_p->wsrfbf__BaseFaultType::Originator = Originator1;
		_p->wsrfbf__BaseFaultType::ErrorCode = ErrorCode1;
		_p->wsrfbf__BaseFaultType::Description = Description1;
		_p->wsrfbf__BaseFaultType::FaultCause = FaultCause1;
		_p->wsrfbf__BaseFaultType::__anyAttribute = __anyAttribute1;
		_p->xsd__anyType::__item = __item2;
	}
	return _p;
}

inline int soap_write_wsnt__PauseFailedFaultType(struct soap *soap, wsnt__PauseFailedFaultType const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:PauseFailedFaultType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 wsnt__PauseFailedFaultType * SOAP_FMAC4 soap_get_wsnt__PauseFailedFaultType(struct soap*, wsnt__PauseFailedFaultType *, const char*, const char*);

inline int soap_read_wsnt__PauseFailedFaultType(struct soap *soap, wsnt__PauseFailedFaultType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_wsnt__PauseFailedFaultType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_wsnt__UnableToDestroySubscriptionFaultType_DEFINED
#define SOAP_TYPE_wsnt__UnableToDestroySubscriptionFaultType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__UnableToDestroySubscriptionFaultType(struct soap*, const char*, int, const wsnt__UnableToDestroySubscriptionFaultType *, const char*);
SOAP_FMAC3 wsnt__UnableToDestroySubscriptionFaultType * SOAP_FMAC4 soap_in_wsnt__UnableToDestroySubscriptionFaultType(struct soap*, const char*, wsnt__UnableToDestroySubscriptionFaultType *, const char*);
SOAP_FMAC1 wsnt__UnableToDestroySubscriptionFaultType * SOAP_FMAC2 soap_instantiate_wsnt__UnableToDestroySubscriptionFaultType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__UnableToDestroySubscriptionFaultType * soap_new_wsnt__UnableToDestroySubscriptionFaultType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsnt__UnableToDestroySubscriptionFaultType(soap, n, NULL, NULL, NULL);
}

inline wsnt__UnableToDestroySubscriptionFaultType * soap_new_req_wsnt__UnableToDestroySubscriptionFaultType(
	struct soap *soap,
	time_t Timestamp1)
{
	wsnt__UnableToDestroySubscriptionFaultType *_p = soap_new_wsnt__UnableToDestroySubscriptionFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsrfbf__BaseFaultType::Timestamp = Timestamp1;
	}
	return _p;
}

inline wsnt__UnableToDestroySubscriptionFaultType * soap_new_set_wsnt__UnableToDestroySubscriptionFaultType(
	struct soap *soap,
	const std::vector<char *> & __any1,
	time_t Timestamp1,
	struct wsa5__EndpointReferenceType *Originator1,
	_wsrfbf__BaseFaultType_ErrorCode *ErrorCode1,
	std::vector<_wsrfbf__BaseFaultType_Description> *Description1,
	_wsrfbf__BaseFaultType_FaultCause *FaultCause1,
	char *__anyAttribute1,
	char *__item2)
{
	wsnt__UnableToDestroySubscriptionFaultType *_p = soap_new_wsnt__UnableToDestroySubscriptionFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsrfbf__BaseFaultType::__any = __any1;
		_p->wsrfbf__BaseFaultType::Timestamp = Timestamp1;
		_p->wsrfbf__BaseFaultType::Originator = Originator1;
		_p->wsrfbf__BaseFaultType::ErrorCode = ErrorCode1;
		_p->wsrfbf__BaseFaultType::Description = Description1;
		_p->wsrfbf__BaseFaultType::FaultCause = FaultCause1;
		_p->wsrfbf__BaseFaultType::__anyAttribute = __anyAttribute1;
		_p->xsd__anyType::__item = __item2;
	}
	return _p;
}

inline int soap_write_wsnt__UnableToDestroySubscriptionFaultType(struct soap *soap, wsnt__UnableToDestroySubscriptionFaultType const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:UnableToDestroySubscriptionFaultType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 wsnt__UnableToDestroySubscriptionFaultType * SOAP_FMAC4 soap_get_wsnt__UnableToDestroySubscriptionFaultType(struct soap*, wsnt__UnableToDestroySubscriptionFaultType *, const char*, const char*);

inline int soap_read_wsnt__UnableToDestroySubscriptionFaultType(struct soap *soap, wsnt__UnableToDestroySubscriptionFaultType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_wsnt__UnableToDestroySubscriptionFaultType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_wsnt__UnacceptableTerminationTimeFaultType_DEFINED
#define SOAP_TYPE_wsnt__UnacceptableTerminationTimeFaultType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__UnacceptableTerminationTimeFaultType(struct soap*, const char*, int, const wsnt__UnacceptableTerminationTimeFaultType *, const char*);
SOAP_FMAC3 wsnt__UnacceptableTerminationTimeFaultType * SOAP_FMAC4 soap_in_wsnt__UnacceptableTerminationTimeFaultType(struct soap*, const char*, wsnt__UnacceptableTerminationTimeFaultType *, const char*);
SOAP_FMAC1 wsnt__UnacceptableTerminationTimeFaultType * SOAP_FMAC2 soap_instantiate_wsnt__UnacceptableTerminationTimeFaultType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__UnacceptableTerminationTimeFaultType * soap_new_wsnt__UnacceptableTerminationTimeFaultType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsnt__UnacceptableTerminationTimeFaultType(soap, n, NULL, NULL, NULL);
}

inline wsnt__UnacceptableTerminationTimeFaultType * soap_new_req_wsnt__UnacceptableTerminationTimeFaultType(
	struct soap *soap,
	time_t MinimumTime,
	time_t Timestamp1)
{
	wsnt__UnacceptableTerminationTimeFaultType *_p = soap_new_wsnt__UnacceptableTerminationTimeFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsnt__UnacceptableTerminationTimeFaultType::MinimumTime = MinimumTime;
		_p->wsrfbf__BaseFaultType::Timestamp = Timestamp1;
	}
	return _p;
}

inline wsnt__UnacceptableTerminationTimeFaultType * soap_new_set_wsnt__UnacceptableTerminationTimeFaultType(
	struct soap *soap,
	time_t MinimumTime,
	time_t *MaximumTime,
	const std::vector<char *> & __any1,
	time_t Timestamp1,
	struct wsa5__EndpointReferenceType *Originator1,
	_wsrfbf__BaseFaultType_ErrorCode *ErrorCode1,
	std::vector<_wsrfbf__BaseFaultType_Description> *Description1,
	_wsrfbf__BaseFaultType_FaultCause *FaultCause1,
	char *__anyAttribute1,
	char *__item2)
{
	wsnt__UnacceptableTerminationTimeFaultType *_p = soap_new_wsnt__UnacceptableTerminationTimeFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsnt__UnacceptableTerminationTimeFaultType::MinimumTime = MinimumTime;
		_p->wsnt__UnacceptableTerminationTimeFaultType::MaximumTime = MaximumTime;
		_p->wsrfbf__BaseFaultType::__any = __any1;
		_p->wsrfbf__BaseFaultType::Timestamp = Timestamp1;
		_p->wsrfbf__BaseFaultType::Originator = Originator1;
		_p->wsrfbf__BaseFaultType::ErrorCode = ErrorCode1;
		_p->wsrfbf__BaseFaultType::Description = Description1;
		_p->wsrfbf__BaseFaultType::FaultCause = FaultCause1;
		_p->wsrfbf__BaseFaultType::__anyAttribute = __anyAttribute1;
		_p->xsd__anyType::__item = __item2;
	}
	return _p;
}

inline int soap_write_wsnt__UnacceptableTerminationTimeFaultType(struct soap *soap, wsnt__UnacceptableTerminationTimeFaultType const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:UnacceptableTerminationTimeFaultType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 wsnt__UnacceptableTerminationTimeFaultType * SOAP_FMAC4 soap_get_wsnt__UnacceptableTerminationTimeFaultType(struct soap*, wsnt__UnacceptableTerminationTimeFaultType *, const char*, const char*);

inline int soap_read_wsnt__UnacceptableTerminationTimeFaultType(struct soap *soap, wsnt__UnacceptableTerminationTimeFaultType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_wsnt__UnacceptableTerminationTimeFaultType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_wsnt__UnableToCreatePullPointFaultType_DEFINED
#define SOAP_TYPE_wsnt__UnableToCreatePullPointFaultType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__UnableToCreatePullPointFaultType(struct soap*, const char*, int, const wsnt__UnableToCreatePullPointFaultType *, const char*);
SOAP_FMAC3 wsnt__UnableToCreatePullPointFaultType * SOAP_FMAC4 soap_in_wsnt__UnableToCreatePullPointFaultType(struct soap*, const char*, wsnt__UnableToCreatePullPointFaultType *, const char*);
SOAP_FMAC1 wsnt__UnableToCreatePullPointFaultType * SOAP_FMAC2 soap_instantiate_wsnt__UnableToCreatePullPointFaultType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__UnableToCreatePullPointFaultType * soap_new_wsnt__UnableToCreatePullPointFaultType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsnt__UnableToCreatePullPointFaultType(soap, n, NULL, NULL, NULL);
}

inline wsnt__UnableToCreatePullPointFaultType * soap_new_req_wsnt__UnableToCreatePullPointFaultType(
	struct soap *soap,
	time_t Timestamp1)
{
	wsnt__UnableToCreatePullPointFaultType *_p = soap_new_wsnt__UnableToCreatePullPointFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsrfbf__BaseFaultType::Timestamp = Timestamp1;
	}
	return _p;
}

inline wsnt__UnableToCreatePullPointFaultType * soap_new_set_wsnt__UnableToCreatePullPointFaultType(
	struct soap *soap,
	const std::vector<char *> & __any1,
	time_t Timestamp1,
	struct wsa5__EndpointReferenceType *Originator1,
	_wsrfbf__BaseFaultType_ErrorCode *ErrorCode1,
	std::vector<_wsrfbf__BaseFaultType_Description> *Description1,
	_wsrfbf__BaseFaultType_FaultCause *FaultCause1,
	char *__anyAttribute1,
	char *__item2)
{
	wsnt__UnableToCreatePullPointFaultType *_p = soap_new_wsnt__UnableToCreatePullPointFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsrfbf__BaseFaultType::__any = __any1;
		_p->wsrfbf__BaseFaultType::Timestamp = Timestamp1;
		_p->wsrfbf__BaseFaultType::Originator = Originator1;
		_p->wsrfbf__BaseFaultType::ErrorCode = ErrorCode1;
		_p->wsrfbf__BaseFaultType::Description = Description1;
		_p->wsrfbf__BaseFaultType::FaultCause = FaultCause1;
		_p->wsrfbf__BaseFaultType::__anyAttribute = __anyAttribute1;
		_p->xsd__anyType::__item = __item2;
	}
	return _p;
}

inline int soap_write_wsnt__UnableToCreatePullPointFaultType(struct soap *soap, wsnt__UnableToCreatePullPointFaultType const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:UnableToCreatePullPointFaultType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 wsnt__UnableToCreatePullPointFaultType * SOAP_FMAC4 soap_get_wsnt__UnableToCreatePullPointFaultType(struct soap*, wsnt__UnableToCreatePullPointFaultType *, const char*, const char*);

inline int soap_read_wsnt__UnableToCreatePullPointFaultType(struct soap *soap, wsnt__UnableToCreatePullPointFaultType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_wsnt__UnableToCreatePullPointFaultType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_wsnt__UnableToDestroyPullPointFaultType_DEFINED
#define SOAP_TYPE_wsnt__UnableToDestroyPullPointFaultType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__UnableToDestroyPullPointFaultType(struct soap*, const char*, int, const wsnt__UnableToDestroyPullPointFaultType *, const char*);
SOAP_FMAC3 wsnt__UnableToDestroyPullPointFaultType * SOAP_FMAC4 soap_in_wsnt__UnableToDestroyPullPointFaultType(struct soap*, const char*, wsnt__UnableToDestroyPullPointFaultType *, const char*);
SOAP_FMAC1 wsnt__UnableToDestroyPullPointFaultType * SOAP_FMAC2 soap_instantiate_wsnt__UnableToDestroyPullPointFaultType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__UnableToDestroyPullPointFaultType * soap_new_wsnt__UnableToDestroyPullPointFaultType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsnt__UnableToDestroyPullPointFaultType(soap, n, NULL, NULL, NULL);
}

inline wsnt__UnableToDestroyPullPointFaultType * soap_new_req_wsnt__UnableToDestroyPullPointFaultType(
	struct soap *soap,
	time_t Timestamp1)
{
	wsnt__UnableToDestroyPullPointFaultType *_p = soap_new_wsnt__UnableToDestroyPullPointFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsrfbf__BaseFaultType::Timestamp = Timestamp1;
	}
	return _p;
}

inline wsnt__UnableToDestroyPullPointFaultType * soap_new_set_wsnt__UnableToDestroyPullPointFaultType(
	struct soap *soap,
	const std::vector<char *> & __any1,
	time_t Timestamp1,
	struct wsa5__EndpointReferenceType *Originator1,
	_wsrfbf__BaseFaultType_ErrorCode *ErrorCode1,
	std::vector<_wsrfbf__BaseFaultType_Description> *Description1,
	_wsrfbf__BaseFaultType_FaultCause *FaultCause1,
	char *__anyAttribute1,
	char *__item2)
{
	wsnt__UnableToDestroyPullPointFaultType *_p = soap_new_wsnt__UnableToDestroyPullPointFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsrfbf__BaseFaultType::__any = __any1;
		_p->wsrfbf__BaseFaultType::Timestamp = Timestamp1;
		_p->wsrfbf__BaseFaultType::Originator = Originator1;
		_p->wsrfbf__BaseFaultType::ErrorCode = ErrorCode1;
		_p->wsrfbf__BaseFaultType::Description = Description1;
		_p->wsrfbf__BaseFaultType::FaultCause = FaultCause1;
		_p->wsrfbf__BaseFaultType::__anyAttribute = __anyAttribute1;
		_p->xsd__anyType::__item = __item2;
	}
	return _p;
}

inline int soap_write_wsnt__UnableToDestroyPullPointFaultType(struct soap *soap, wsnt__UnableToDestroyPullPointFaultType const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:UnableToDestroyPullPointFaultType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 wsnt__UnableToDestroyPullPointFaultType * SOAP_FMAC4 soap_get_wsnt__UnableToDestroyPullPointFaultType(struct soap*, wsnt__UnableToDestroyPullPointFaultType *, const char*, const char*);

inline int soap_read_wsnt__UnableToDestroyPullPointFaultType(struct soap *soap, wsnt__UnableToDestroyPullPointFaultType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_wsnt__UnableToDestroyPullPointFaultType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_wsnt__UnableToGetMessagesFaultType_DEFINED
#define SOAP_TYPE_wsnt__UnableToGetMessagesFaultType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__UnableToGetMessagesFaultType(struct soap*, const char*, int, const wsnt__UnableToGetMessagesFaultType *, const char*);
SOAP_FMAC3 wsnt__UnableToGetMessagesFaultType * SOAP_FMAC4 soap_in_wsnt__UnableToGetMessagesFaultType(struct soap*, const char*, wsnt__UnableToGetMessagesFaultType *, const char*);
SOAP_FMAC1 wsnt__UnableToGetMessagesFaultType * SOAP_FMAC2 soap_instantiate_wsnt__UnableToGetMessagesFaultType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__UnableToGetMessagesFaultType * soap_new_wsnt__UnableToGetMessagesFaultType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsnt__UnableToGetMessagesFaultType(soap, n, NULL, NULL, NULL);
}

inline wsnt__UnableToGetMessagesFaultType * soap_new_req_wsnt__UnableToGetMessagesFaultType(
	struct soap *soap,
	time_t Timestamp1)
{
	wsnt__UnableToGetMessagesFaultType *_p = soap_new_wsnt__UnableToGetMessagesFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsrfbf__BaseFaultType::Timestamp = Timestamp1;
	}
	return _p;
}

inline wsnt__UnableToGetMessagesFaultType * soap_new_set_wsnt__UnableToGetMessagesFaultType(
	struct soap *soap,
	const std::vector<char *> & __any1,
	time_t Timestamp1,
	struct wsa5__EndpointReferenceType *Originator1,
	_wsrfbf__BaseFaultType_ErrorCode *ErrorCode1,
	std::vector<_wsrfbf__BaseFaultType_Description> *Description1,
	_wsrfbf__BaseFaultType_FaultCause *FaultCause1,
	char *__anyAttribute1,
	char *__item2)
{
	wsnt__UnableToGetMessagesFaultType *_p = soap_new_wsnt__UnableToGetMessagesFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsrfbf__BaseFaultType::__any = __any1;
		_p->wsrfbf__BaseFaultType::Timestamp = Timestamp1;
		_p->wsrfbf__BaseFaultType::Originator = Originator1;
		_p->wsrfbf__BaseFaultType::ErrorCode = ErrorCode1;
		_p->wsrfbf__BaseFaultType::Description = Description1;
		_p->wsrfbf__BaseFaultType::FaultCause = FaultCause1;
		_p->wsrfbf__BaseFaultType::__anyAttribute = __anyAttribute1;
		_p->xsd__anyType::__item = __item2;
	}
	return _p;
}

inline int soap_write_wsnt__UnableToGetMessagesFaultType(struct soap *soap, wsnt__UnableToGetMessagesFaultType const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:UnableToGetMessagesFaultType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 wsnt__UnableToGetMessagesFaultType * SOAP_FMAC4 soap_get_wsnt__UnableToGetMessagesFaultType(struct soap*, wsnt__UnableToGetMessagesFaultType *, const char*, const char*);

inline int soap_read_wsnt__UnableToGetMessagesFaultType(struct soap *soap, wsnt__UnableToGetMessagesFaultType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_wsnt__UnableToGetMessagesFaultType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_wsnt__NoCurrentMessageOnTopicFaultType_DEFINED
#define SOAP_TYPE_wsnt__NoCurrentMessageOnTopicFaultType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__NoCurrentMessageOnTopicFaultType(struct soap*, const char*, int, const wsnt__NoCurrentMessageOnTopicFaultType *, const char*);
SOAP_FMAC3 wsnt__NoCurrentMessageOnTopicFaultType * SOAP_FMAC4 soap_in_wsnt__NoCurrentMessageOnTopicFaultType(struct soap*, const char*, wsnt__NoCurrentMessageOnTopicFaultType *, const char*);
SOAP_FMAC1 wsnt__NoCurrentMessageOnTopicFaultType * SOAP_FMAC2 soap_instantiate_wsnt__NoCurrentMessageOnTopicFaultType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__NoCurrentMessageOnTopicFaultType * soap_new_wsnt__NoCurrentMessageOnTopicFaultType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsnt__NoCurrentMessageOnTopicFaultType(soap, n, NULL, NULL, NULL);
}

inline wsnt__NoCurrentMessageOnTopicFaultType * soap_new_req_wsnt__NoCurrentMessageOnTopicFaultType(
	struct soap *soap,
	time_t Timestamp1)
{
	wsnt__NoCurrentMessageOnTopicFaultType *_p = soap_new_wsnt__NoCurrentMessageOnTopicFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsrfbf__BaseFaultType::Timestamp = Timestamp1;
	}
	return _p;
}

inline wsnt__NoCurrentMessageOnTopicFaultType * soap_new_set_wsnt__NoCurrentMessageOnTopicFaultType(
	struct soap *soap,
	const std::vector<char *> & __any1,
	time_t Timestamp1,
	struct wsa5__EndpointReferenceType *Originator1,
	_wsrfbf__BaseFaultType_ErrorCode *ErrorCode1,
	std::vector<_wsrfbf__BaseFaultType_Description> *Description1,
	_wsrfbf__BaseFaultType_FaultCause *FaultCause1,
	char *__anyAttribute1,
	char *__item2)
{
	wsnt__NoCurrentMessageOnTopicFaultType *_p = soap_new_wsnt__NoCurrentMessageOnTopicFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsrfbf__BaseFaultType::__any = __any1;
		_p->wsrfbf__BaseFaultType::Timestamp = Timestamp1;
		_p->wsrfbf__BaseFaultType::Originator = Originator1;
		_p->wsrfbf__BaseFaultType::ErrorCode = ErrorCode1;
		_p->wsrfbf__BaseFaultType::Description = Description1;
		_p->wsrfbf__BaseFaultType::FaultCause = FaultCause1;
		_p->wsrfbf__BaseFaultType::__anyAttribute = __anyAttribute1;
		_p->xsd__anyType::__item = __item2;
	}
	return _p;
}

inline int soap_write_wsnt__NoCurrentMessageOnTopicFaultType(struct soap *soap, wsnt__NoCurrentMessageOnTopicFaultType const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:NoCurrentMessageOnTopicFaultType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 wsnt__NoCurrentMessageOnTopicFaultType * SOAP_FMAC4 soap_get_wsnt__NoCurrentMessageOnTopicFaultType(struct soap*, wsnt__NoCurrentMessageOnTopicFaultType *, const char*, const char*);

inline int soap_read_wsnt__NoCurrentMessageOnTopicFaultType(struct soap *soap, wsnt__NoCurrentMessageOnTopicFaultType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_wsnt__NoCurrentMessageOnTopicFaultType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_wsnt__UnacceptableInitialTerminationTimeFaultType_DEFINED
#define SOAP_TYPE_wsnt__UnacceptableInitialTerminationTimeFaultType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__UnacceptableInitialTerminationTimeFaultType(struct soap*, const char*, int, const wsnt__UnacceptableInitialTerminationTimeFaultType *, const char*);
SOAP_FMAC3 wsnt__UnacceptableInitialTerminationTimeFaultType * SOAP_FMAC4 soap_in_wsnt__UnacceptableInitialTerminationTimeFaultType(struct soap*, const char*, wsnt__UnacceptableInitialTerminationTimeFaultType *, const char*);
SOAP_FMAC1 wsnt__UnacceptableInitialTerminationTimeFaultType * SOAP_FMAC2 soap_instantiate_wsnt__UnacceptableInitialTerminationTimeFaultType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__UnacceptableInitialTerminationTimeFaultType * soap_new_wsnt__UnacceptableInitialTerminationTimeFaultType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsnt__UnacceptableInitialTerminationTimeFaultType(soap, n, NULL, NULL, NULL);
}

inline wsnt__UnacceptableInitialTerminationTimeFaultType * soap_new_req_wsnt__UnacceptableInitialTerminationTimeFaultType(
	struct soap *soap,
	time_t MinimumTime,
	time_t Timestamp1)
{
	wsnt__UnacceptableInitialTerminationTimeFaultType *_p = soap_new_wsnt__UnacceptableInitialTerminationTimeFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsnt__UnacceptableInitialTerminationTimeFaultType::MinimumTime = MinimumTime;
		_p->wsrfbf__BaseFaultType::Timestamp = Timestamp1;
	}
	return _p;
}

inline wsnt__UnacceptableInitialTerminationTimeFaultType * soap_new_set_wsnt__UnacceptableInitialTerminationTimeFaultType(
	struct soap *soap,
	time_t MinimumTime,
	time_t *MaximumTime,
	const std::vector<char *> & __any1,
	time_t Timestamp1,
	struct wsa5__EndpointReferenceType *Originator1,
	_wsrfbf__BaseFaultType_ErrorCode *ErrorCode1,
	std::vector<_wsrfbf__BaseFaultType_Description> *Description1,
	_wsrfbf__BaseFaultType_FaultCause *FaultCause1,
	char *__anyAttribute1,
	char *__item2)
{
	wsnt__UnacceptableInitialTerminationTimeFaultType *_p = soap_new_wsnt__UnacceptableInitialTerminationTimeFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsnt__UnacceptableInitialTerminationTimeFaultType::MinimumTime = MinimumTime;
		_p->wsnt__UnacceptableInitialTerminationTimeFaultType::MaximumTime = MaximumTime;
		_p->wsrfbf__BaseFaultType::__any = __any1;
		_p->wsrfbf__BaseFaultType::Timestamp = Timestamp1;
		_p->wsrfbf__BaseFaultType::Originator = Originator1;
		_p->wsrfbf__BaseFaultType::ErrorCode = ErrorCode1;
		_p->wsrfbf__BaseFaultType::Description = Description1;
		_p->wsrfbf__BaseFaultType::FaultCause = FaultCause1;
		_p->wsrfbf__BaseFaultType::__anyAttribute = __anyAttribute1;
		_p->xsd__anyType::__item = __item2;
	}
	return _p;
}

inline int soap_write_wsnt__UnacceptableInitialTerminationTimeFaultType(struct soap *soap, wsnt__UnacceptableInitialTerminationTimeFaultType const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:UnacceptableInitialTerminationTimeFaultType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 wsnt__UnacceptableInitialTerminationTimeFaultType * SOAP_FMAC4 soap_get_wsnt__UnacceptableInitialTerminationTimeFaultType(struct soap*, wsnt__UnacceptableInitialTerminationTimeFaultType *, const char*, const char*);

inline int soap_read_wsnt__UnacceptableInitialTerminationTimeFaultType(struct soap *soap, wsnt__UnacceptableInitialTerminationTimeFaultType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_wsnt__UnacceptableInitialTerminationTimeFaultType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_wsnt__NotifyMessageNotSupportedFaultType_DEFINED
#define SOAP_TYPE_wsnt__NotifyMessageNotSupportedFaultType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__NotifyMessageNotSupportedFaultType(struct soap*, const char*, int, const wsnt__NotifyMessageNotSupportedFaultType *, const char*);
SOAP_FMAC3 wsnt__NotifyMessageNotSupportedFaultType * SOAP_FMAC4 soap_in_wsnt__NotifyMessageNotSupportedFaultType(struct soap*, const char*, wsnt__NotifyMessageNotSupportedFaultType *, const char*);
SOAP_FMAC1 wsnt__NotifyMessageNotSupportedFaultType * SOAP_FMAC2 soap_instantiate_wsnt__NotifyMessageNotSupportedFaultType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__NotifyMessageNotSupportedFaultType * soap_new_wsnt__NotifyMessageNotSupportedFaultType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsnt__NotifyMessageNotSupportedFaultType(soap, n, NULL, NULL, NULL);
}

inline wsnt__NotifyMessageNotSupportedFaultType * soap_new_req_wsnt__NotifyMessageNotSupportedFaultType(
	struct soap *soap,
	time_t Timestamp1)
{
	wsnt__NotifyMessageNotSupportedFaultType *_p = soap_new_wsnt__NotifyMessageNotSupportedFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsrfbf__BaseFaultType::Timestamp = Timestamp1;
	}
	return _p;
}

inline wsnt__NotifyMessageNotSupportedFaultType * soap_new_set_wsnt__NotifyMessageNotSupportedFaultType(
	struct soap *soap,
	const std::vector<char *> & __any1,
	time_t Timestamp1,
	struct wsa5__EndpointReferenceType *Originator1,
	_wsrfbf__BaseFaultType_ErrorCode *ErrorCode1,
	std::vector<_wsrfbf__BaseFaultType_Description> *Description1,
	_wsrfbf__BaseFaultType_FaultCause *FaultCause1,
	char *__anyAttribute1,
	char *__item2)
{
	wsnt__NotifyMessageNotSupportedFaultType *_p = soap_new_wsnt__NotifyMessageNotSupportedFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsrfbf__BaseFaultType::__any = __any1;
		_p->wsrfbf__BaseFaultType::Timestamp = Timestamp1;
		_p->wsrfbf__BaseFaultType::Originator = Originator1;
		_p->wsrfbf__BaseFaultType::ErrorCode = ErrorCode1;
		_p->wsrfbf__BaseFaultType::Description = Description1;
		_p->wsrfbf__BaseFaultType::FaultCause = FaultCause1;
		_p->wsrfbf__BaseFaultType::__anyAttribute = __anyAttribute1;
		_p->xsd__anyType::__item = __item2;
	}
	return _p;
}

inline int soap_write_wsnt__NotifyMessageNotSupportedFaultType(struct soap *soap, wsnt__NotifyMessageNotSupportedFaultType const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:NotifyMessageNotSupportedFaultType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 wsnt__NotifyMessageNotSupportedFaultType * SOAP_FMAC4 soap_get_wsnt__NotifyMessageNotSupportedFaultType(struct soap*, wsnt__NotifyMessageNotSupportedFaultType *, const char*, const char*);

inline int soap_read_wsnt__NotifyMessageNotSupportedFaultType(struct soap *soap, wsnt__NotifyMessageNotSupportedFaultType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_wsnt__NotifyMessageNotSupportedFaultType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_wsnt__UnsupportedPolicyRequestFaultType_DEFINED
#define SOAP_TYPE_wsnt__UnsupportedPolicyRequestFaultType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__UnsupportedPolicyRequestFaultType(struct soap*, const char*, int, const wsnt__UnsupportedPolicyRequestFaultType *, const char*);
SOAP_FMAC3 wsnt__UnsupportedPolicyRequestFaultType * SOAP_FMAC4 soap_in_wsnt__UnsupportedPolicyRequestFaultType(struct soap*, const char*, wsnt__UnsupportedPolicyRequestFaultType *, const char*);
SOAP_FMAC1 wsnt__UnsupportedPolicyRequestFaultType * SOAP_FMAC2 soap_instantiate_wsnt__UnsupportedPolicyRequestFaultType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__UnsupportedPolicyRequestFaultType * soap_new_wsnt__UnsupportedPolicyRequestFaultType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsnt__UnsupportedPolicyRequestFaultType(soap, n, NULL, NULL, NULL);
}

inline wsnt__UnsupportedPolicyRequestFaultType * soap_new_req_wsnt__UnsupportedPolicyRequestFaultType(
	struct soap *soap,
	time_t Timestamp1)
{
	wsnt__UnsupportedPolicyRequestFaultType *_p = soap_new_wsnt__UnsupportedPolicyRequestFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsrfbf__BaseFaultType::Timestamp = Timestamp1;
	}
	return _p;
}

inline wsnt__UnsupportedPolicyRequestFaultType * soap_new_set_wsnt__UnsupportedPolicyRequestFaultType(
	struct soap *soap,
	const std::vector<std::string> & UnsupportedPolicy,
	const std::vector<char *> & __any1,
	time_t Timestamp1,
	struct wsa5__EndpointReferenceType *Originator1,
	_wsrfbf__BaseFaultType_ErrorCode *ErrorCode1,
	std::vector<_wsrfbf__BaseFaultType_Description> *Description1,
	_wsrfbf__BaseFaultType_FaultCause *FaultCause1,
	char *__anyAttribute1,
	char *__item2)
{
	wsnt__UnsupportedPolicyRequestFaultType *_p = soap_new_wsnt__UnsupportedPolicyRequestFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsnt__UnsupportedPolicyRequestFaultType::UnsupportedPolicy = UnsupportedPolicy;
		_p->wsrfbf__BaseFaultType::__any = __any1;
		_p->wsrfbf__BaseFaultType::Timestamp = Timestamp1;
		_p->wsrfbf__BaseFaultType::Originator = Originator1;
		_p->wsrfbf__BaseFaultType::ErrorCode = ErrorCode1;
		_p->wsrfbf__BaseFaultType::Description = Description1;
		_p->wsrfbf__BaseFaultType::FaultCause = FaultCause1;
		_p->wsrfbf__BaseFaultType::__anyAttribute = __anyAttribute1;
		_p->xsd__anyType::__item = __item2;
	}
	return _p;
}

inline int soap_write_wsnt__UnsupportedPolicyRequestFaultType(struct soap *soap, wsnt__UnsupportedPolicyRequestFaultType const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:UnsupportedPolicyRequestFaultType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 wsnt__UnsupportedPolicyRequestFaultType * SOAP_FMAC4 soap_get_wsnt__UnsupportedPolicyRequestFaultType(struct soap*, wsnt__UnsupportedPolicyRequestFaultType *, const char*, const char*);

inline int soap_read_wsnt__UnsupportedPolicyRequestFaultType(struct soap *soap, wsnt__UnsupportedPolicyRequestFaultType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_wsnt__UnsupportedPolicyRequestFaultType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_wsnt__UnrecognizedPolicyRequestFaultType_DEFINED
#define SOAP_TYPE_wsnt__UnrecognizedPolicyRequestFaultType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__UnrecognizedPolicyRequestFaultType(struct soap*, const char*, int, const wsnt__UnrecognizedPolicyRequestFaultType *, const char*);
SOAP_FMAC3 wsnt__UnrecognizedPolicyRequestFaultType * SOAP_FMAC4 soap_in_wsnt__UnrecognizedPolicyRequestFaultType(struct soap*, const char*, wsnt__UnrecognizedPolicyRequestFaultType *, const char*);
SOAP_FMAC1 wsnt__UnrecognizedPolicyRequestFaultType * SOAP_FMAC2 soap_instantiate_wsnt__UnrecognizedPolicyRequestFaultType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__UnrecognizedPolicyRequestFaultType * soap_new_wsnt__UnrecognizedPolicyRequestFaultType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsnt__UnrecognizedPolicyRequestFaultType(soap, n, NULL, NULL, NULL);
}

inline wsnt__UnrecognizedPolicyRequestFaultType * soap_new_req_wsnt__UnrecognizedPolicyRequestFaultType(
	struct soap *soap,
	time_t Timestamp1)
{
	wsnt__UnrecognizedPolicyRequestFaultType *_p = soap_new_wsnt__UnrecognizedPolicyRequestFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsrfbf__BaseFaultType::Timestamp = Timestamp1;
	}
	return _p;
}

inline wsnt__UnrecognizedPolicyRequestFaultType * soap_new_set_wsnt__UnrecognizedPolicyRequestFaultType(
	struct soap *soap,
	const std::vector<std::string> & UnrecognizedPolicy,
	const std::vector<char *> & __any1,
	time_t Timestamp1,
	struct wsa5__EndpointReferenceType *Originator1,
	_wsrfbf__BaseFaultType_ErrorCode *ErrorCode1,
	std::vector<_wsrfbf__BaseFaultType_Description> *Description1,
	_wsrfbf__BaseFaultType_FaultCause *FaultCause1,
	char *__anyAttribute1,
	char *__item2)
{
	wsnt__UnrecognizedPolicyRequestFaultType *_p = soap_new_wsnt__UnrecognizedPolicyRequestFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsnt__UnrecognizedPolicyRequestFaultType::UnrecognizedPolicy = UnrecognizedPolicy;
		_p->wsrfbf__BaseFaultType::__any = __any1;
		_p->wsrfbf__BaseFaultType::Timestamp = Timestamp1;
		_p->wsrfbf__BaseFaultType::Originator = Originator1;
		_p->wsrfbf__BaseFaultType::ErrorCode = ErrorCode1;
		_p->wsrfbf__BaseFaultType::Description = Description1;
		_p->wsrfbf__BaseFaultType::FaultCause = FaultCause1;
		_p->wsrfbf__BaseFaultType::__anyAttribute = __anyAttribute1;
		_p->xsd__anyType::__item = __item2;
	}
	return _p;
}

inline int soap_write_wsnt__UnrecognizedPolicyRequestFaultType(struct soap *soap, wsnt__UnrecognizedPolicyRequestFaultType const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:UnrecognizedPolicyRequestFaultType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 wsnt__UnrecognizedPolicyRequestFaultType * SOAP_FMAC4 soap_get_wsnt__UnrecognizedPolicyRequestFaultType(struct soap*, wsnt__UnrecognizedPolicyRequestFaultType *, const char*, const char*);

inline int soap_read_wsnt__UnrecognizedPolicyRequestFaultType(struct soap *soap, wsnt__UnrecognizedPolicyRequestFaultType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_wsnt__UnrecognizedPolicyRequestFaultType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_wsnt__InvalidMessageContentExpressionFaultType_DEFINED
#define SOAP_TYPE_wsnt__InvalidMessageContentExpressionFaultType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__InvalidMessageContentExpressionFaultType(struct soap*, const char*, int, const wsnt__InvalidMessageContentExpressionFaultType *, const char*);
SOAP_FMAC3 wsnt__InvalidMessageContentExpressionFaultType * SOAP_FMAC4 soap_in_wsnt__InvalidMessageContentExpressionFaultType(struct soap*, const char*, wsnt__InvalidMessageContentExpressionFaultType *, const char*);
SOAP_FMAC1 wsnt__InvalidMessageContentExpressionFaultType * SOAP_FMAC2 soap_instantiate_wsnt__InvalidMessageContentExpressionFaultType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__InvalidMessageContentExpressionFaultType * soap_new_wsnt__InvalidMessageContentExpressionFaultType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsnt__InvalidMessageContentExpressionFaultType(soap, n, NULL, NULL, NULL);
}

inline wsnt__InvalidMessageContentExpressionFaultType * soap_new_req_wsnt__InvalidMessageContentExpressionFaultType(
	struct soap *soap,
	time_t Timestamp1)
{
	wsnt__InvalidMessageContentExpressionFaultType *_p = soap_new_wsnt__InvalidMessageContentExpressionFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsrfbf__BaseFaultType::Timestamp = Timestamp1;
	}
	return _p;
}

inline wsnt__InvalidMessageContentExpressionFaultType * soap_new_set_wsnt__InvalidMessageContentExpressionFaultType(
	struct soap *soap,
	const std::vector<char *> & __any1,
	time_t Timestamp1,
	struct wsa5__EndpointReferenceType *Originator1,
	_wsrfbf__BaseFaultType_ErrorCode *ErrorCode1,
	std::vector<_wsrfbf__BaseFaultType_Description> *Description1,
	_wsrfbf__BaseFaultType_FaultCause *FaultCause1,
	char *__anyAttribute1,
	char *__item2)
{
	wsnt__InvalidMessageContentExpressionFaultType *_p = soap_new_wsnt__InvalidMessageContentExpressionFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsrfbf__BaseFaultType::__any = __any1;
		_p->wsrfbf__BaseFaultType::Timestamp = Timestamp1;
		_p->wsrfbf__BaseFaultType::Originator = Originator1;
		_p->wsrfbf__BaseFaultType::ErrorCode = ErrorCode1;
		_p->wsrfbf__BaseFaultType::Description = Description1;
		_p->wsrfbf__BaseFaultType::FaultCause = FaultCause1;
		_p->wsrfbf__BaseFaultType::__anyAttribute = __anyAttribute1;
		_p->xsd__anyType::__item = __item2;
	}
	return _p;
}

inline int soap_write_wsnt__InvalidMessageContentExpressionFaultType(struct soap *soap, wsnt__InvalidMessageContentExpressionFaultType const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:InvalidMessageContentExpressionFaultType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 wsnt__InvalidMessageContentExpressionFaultType * SOAP_FMAC4 soap_get_wsnt__InvalidMessageContentExpressionFaultType(struct soap*, wsnt__InvalidMessageContentExpressionFaultType *, const char*, const char*);

inline int soap_read_wsnt__InvalidMessageContentExpressionFaultType(struct soap *soap, wsnt__InvalidMessageContentExpressionFaultType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_wsnt__InvalidMessageContentExpressionFaultType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_wsnt__InvalidProducerPropertiesExpressionFaultType_DEFINED
#define SOAP_TYPE_wsnt__InvalidProducerPropertiesExpressionFaultType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__InvalidProducerPropertiesExpressionFaultType(struct soap*, const char*, int, const wsnt__InvalidProducerPropertiesExpressionFaultType *, const char*);
SOAP_FMAC3 wsnt__InvalidProducerPropertiesExpressionFaultType * SOAP_FMAC4 soap_in_wsnt__InvalidProducerPropertiesExpressionFaultType(struct soap*, const char*, wsnt__InvalidProducerPropertiesExpressionFaultType *, const char*);
SOAP_FMAC1 wsnt__InvalidProducerPropertiesExpressionFaultType * SOAP_FMAC2 soap_instantiate_wsnt__InvalidProducerPropertiesExpressionFaultType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__InvalidProducerPropertiesExpressionFaultType * soap_new_wsnt__InvalidProducerPropertiesExpressionFaultType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsnt__InvalidProducerPropertiesExpressionFaultType(soap, n, NULL, NULL, NULL);
}

inline wsnt__InvalidProducerPropertiesExpressionFaultType * soap_new_req_wsnt__InvalidProducerPropertiesExpressionFaultType(
	struct soap *soap,
	time_t Timestamp1)
{
	wsnt__InvalidProducerPropertiesExpressionFaultType *_p = soap_new_wsnt__InvalidProducerPropertiesExpressionFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsrfbf__BaseFaultType::Timestamp = Timestamp1;
	}
	return _p;
}

inline wsnt__InvalidProducerPropertiesExpressionFaultType * soap_new_set_wsnt__InvalidProducerPropertiesExpressionFaultType(
	struct soap *soap,
	const std::vector<char *> & __any1,
	time_t Timestamp1,
	struct wsa5__EndpointReferenceType *Originator1,
	_wsrfbf__BaseFaultType_ErrorCode *ErrorCode1,
	std::vector<_wsrfbf__BaseFaultType_Description> *Description1,
	_wsrfbf__BaseFaultType_FaultCause *FaultCause1,
	char *__anyAttribute1,
	char *__item2)
{
	wsnt__InvalidProducerPropertiesExpressionFaultType *_p = soap_new_wsnt__InvalidProducerPropertiesExpressionFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsrfbf__BaseFaultType::__any = __any1;
		_p->wsrfbf__BaseFaultType::Timestamp = Timestamp1;
		_p->wsrfbf__BaseFaultType::Originator = Originator1;
		_p->wsrfbf__BaseFaultType::ErrorCode = ErrorCode1;
		_p->wsrfbf__BaseFaultType::Description = Description1;
		_p->wsrfbf__BaseFaultType::FaultCause = FaultCause1;
		_p->wsrfbf__BaseFaultType::__anyAttribute = __anyAttribute1;
		_p->xsd__anyType::__item = __item2;
	}
	return _p;
}

inline int soap_write_wsnt__InvalidProducerPropertiesExpressionFaultType(struct soap *soap, wsnt__InvalidProducerPropertiesExpressionFaultType const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:InvalidProducerPropertiesExpressionFaultType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 wsnt__InvalidProducerPropertiesExpressionFaultType * SOAP_FMAC4 soap_get_wsnt__InvalidProducerPropertiesExpressionFaultType(struct soap*, wsnt__InvalidProducerPropertiesExpressionFaultType *, const char*, const char*);

inline int soap_read_wsnt__InvalidProducerPropertiesExpressionFaultType(struct soap *soap, wsnt__InvalidProducerPropertiesExpressionFaultType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_wsnt__InvalidProducerPropertiesExpressionFaultType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_wsnt__MultipleTopicsSpecifiedFaultType_DEFINED
#define SOAP_TYPE_wsnt__MultipleTopicsSpecifiedFaultType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__MultipleTopicsSpecifiedFaultType(struct soap*, const char*, int, const wsnt__MultipleTopicsSpecifiedFaultType *, const char*);
SOAP_FMAC3 wsnt__MultipleTopicsSpecifiedFaultType * SOAP_FMAC4 soap_in_wsnt__MultipleTopicsSpecifiedFaultType(struct soap*, const char*, wsnt__MultipleTopicsSpecifiedFaultType *, const char*);
SOAP_FMAC1 wsnt__MultipleTopicsSpecifiedFaultType * SOAP_FMAC2 soap_instantiate_wsnt__MultipleTopicsSpecifiedFaultType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__MultipleTopicsSpecifiedFaultType * soap_new_wsnt__MultipleTopicsSpecifiedFaultType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsnt__MultipleTopicsSpecifiedFaultType(soap, n, NULL, NULL, NULL);
}

inline wsnt__MultipleTopicsSpecifiedFaultType * soap_new_req_wsnt__MultipleTopicsSpecifiedFaultType(
	struct soap *soap,
	time_t Timestamp1)
{
	wsnt__MultipleTopicsSpecifiedFaultType *_p = soap_new_wsnt__MultipleTopicsSpecifiedFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsrfbf__BaseFaultType::Timestamp = Timestamp1;
	}
	return _p;
}

inline wsnt__MultipleTopicsSpecifiedFaultType * soap_new_set_wsnt__MultipleTopicsSpecifiedFaultType(
	struct soap *soap,
	const std::vector<char *> & __any1,
	time_t Timestamp1,
	struct wsa5__EndpointReferenceType *Originator1,
	_wsrfbf__BaseFaultType_ErrorCode *ErrorCode1,
	std::vector<_wsrfbf__BaseFaultType_Description> *Description1,
	_wsrfbf__BaseFaultType_FaultCause *FaultCause1,
	char *__anyAttribute1,
	char *__item2)
{
	wsnt__MultipleTopicsSpecifiedFaultType *_p = soap_new_wsnt__MultipleTopicsSpecifiedFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsrfbf__BaseFaultType::__any = __any1;
		_p->wsrfbf__BaseFaultType::Timestamp = Timestamp1;
		_p->wsrfbf__BaseFaultType::Originator = Originator1;
		_p->wsrfbf__BaseFaultType::ErrorCode = ErrorCode1;
		_p->wsrfbf__BaseFaultType::Description = Description1;
		_p->wsrfbf__BaseFaultType::FaultCause = FaultCause1;
		_p->wsrfbf__BaseFaultType::__anyAttribute = __anyAttribute1;
		_p->xsd__anyType::__item = __item2;
	}
	return _p;
}

inline int soap_write_wsnt__MultipleTopicsSpecifiedFaultType(struct soap *soap, wsnt__MultipleTopicsSpecifiedFaultType const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:MultipleTopicsSpecifiedFaultType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 wsnt__MultipleTopicsSpecifiedFaultType * SOAP_FMAC4 soap_get_wsnt__MultipleTopicsSpecifiedFaultType(struct soap*, wsnt__MultipleTopicsSpecifiedFaultType *, const char*, const char*);

inline int soap_read_wsnt__MultipleTopicsSpecifiedFaultType(struct soap *soap, wsnt__MultipleTopicsSpecifiedFaultType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_wsnt__MultipleTopicsSpecifiedFaultType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_wsnt__TopicNotSupportedFaultType_DEFINED
#define SOAP_TYPE_wsnt__TopicNotSupportedFaultType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__TopicNotSupportedFaultType(struct soap*, const char*, int, const wsnt__TopicNotSupportedFaultType *, const char*);
SOAP_FMAC3 wsnt__TopicNotSupportedFaultType * SOAP_FMAC4 soap_in_wsnt__TopicNotSupportedFaultType(struct soap*, const char*, wsnt__TopicNotSupportedFaultType *, const char*);
SOAP_FMAC1 wsnt__TopicNotSupportedFaultType * SOAP_FMAC2 soap_instantiate_wsnt__TopicNotSupportedFaultType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__TopicNotSupportedFaultType * soap_new_wsnt__TopicNotSupportedFaultType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsnt__TopicNotSupportedFaultType(soap, n, NULL, NULL, NULL);
}

inline wsnt__TopicNotSupportedFaultType * soap_new_req_wsnt__TopicNotSupportedFaultType(
	struct soap *soap,
	time_t Timestamp1)
{
	wsnt__TopicNotSupportedFaultType *_p = soap_new_wsnt__TopicNotSupportedFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsrfbf__BaseFaultType::Timestamp = Timestamp1;
	}
	return _p;
}

inline wsnt__TopicNotSupportedFaultType * soap_new_set_wsnt__TopicNotSupportedFaultType(
	struct soap *soap,
	const std::vector<char *> & __any1,
	time_t Timestamp1,
	struct wsa5__EndpointReferenceType *Originator1,
	_wsrfbf__BaseFaultType_ErrorCode *ErrorCode1,
	std::vector<_wsrfbf__BaseFaultType_Description> *Description1,
	_wsrfbf__BaseFaultType_FaultCause *FaultCause1,
	char *__anyAttribute1,
	char *__item2)
{
	wsnt__TopicNotSupportedFaultType *_p = soap_new_wsnt__TopicNotSupportedFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsrfbf__BaseFaultType::__any = __any1;
		_p->wsrfbf__BaseFaultType::Timestamp = Timestamp1;
		_p->wsrfbf__BaseFaultType::Originator = Originator1;
		_p->wsrfbf__BaseFaultType::ErrorCode = ErrorCode1;
		_p->wsrfbf__BaseFaultType::Description = Description1;
		_p->wsrfbf__BaseFaultType::FaultCause = FaultCause1;
		_p->wsrfbf__BaseFaultType::__anyAttribute = __anyAttribute1;
		_p->xsd__anyType::__item = __item2;
	}
	return _p;
}

inline int soap_write_wsnt__TopicNotSupportedFaultType(struct soap *soap, wsnt__TopicNotSupportedFaultType const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:TopicNotSupportedFaultType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 wsnt__TopicNotSupportedFaultType * SOAP_FMAC4 soap_get_wsnt__TopicNotSupportedFaultType(struct soap*, wsnt__TopicNotSupportedFaultType *, const char*, const char*);

inline int soap_read_wsnt__TopicNotSupportedFaultType(struct soap *soap, wsnt__TopicNotSupportedFaultType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_wsnt__TopicNotSupportedFaultType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_wsnt__InvalidTopicExpressionFaultType_DEFINED
#define SOAP_TYPE_wsnt__InvalidTopicExpressionFaultType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__InvalidTopicExpressionFaultType(struct soap*, const char*, int, const wsnt__InvalidTopicExpressionFaultType *, const char*);
SOAP_FMAC3 wsnt__InvalidTopicExpressionFaultType * SOAP_FMAC4 soap_in_wsnt__InvalidTopicExpressionFaultType(struct soap*, const char*, wsnt__InvalidTopicExpressionFaultType *, const char*);
SOAP_FMAC1 wsnt__InvalidTopicExpressionFaultType * SOAP_FMAC2 soap_instantiate_wsnt__InvalidTopicExpressionFaultType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__InvalidTopicExpressionFaultType * soap_new_wsnt__InvalidTopicExpressionFaultType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsnt__InvalidTopicExpressionFaultType(soap, n, NULL, NULL, NULL);
}

inline wsnt__InvalidTopicExpressionFaultType * soap_new_req_wsnt__InvalidTopicExpressionFaultType(
	struct soap *soap,
	time_t Timestamp1)
{
	wsnt__InvalidTopicExpressionFaultType *_p = soap_new_wsnt__InvalidTopicExpressionFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsrfbf__BaseFaultType::Timestamp = Timestamp1;
	}
	return _p;
}

inline wsnt__InvalidTopicExpressionFaultType * soap_new_set_wsnt__InvalidTopicExpressionFaultType(
	struct soap *soap,
	const std::vector<char *> & __any1,
	time_t Timestamp1,
	struct wsa5__EndpointReferenceType *Originator1,
	_wsrfbf__BaseFaultType_ErrorCode *ErrorCode1,
	std::vector<_wsrfbf__BaseFaultType_Description> *Description1,
	_wsrfbf__BaseFaultType_FaultCause *FaultCause1,
	char *__anyAttribute1,
	char *__item2)
{
	wsnt__InvalidTopicExpressionFaultType *_p = soap_new_wsnt__InvalidTopicExpressionFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsrfbf__BaseFaultType::__any = __any1;
		_p->wsrfbf__BaseFaultType::Timestamp = Timestamp1;
		_p->wsrfbf__BaseFaultType::Originator = Originator1;
		_p->wsrfbf__BaseFaultType::ErrorCode = ErrorCode1;
		_p->wsrfbf__BaseFaultType::Description = Description1;
		_p->wsrfbf__BaseFaultType::FaultCause = FaultCause1;
		_p->wsrfbf__BaseFaultType::__anyAttribute = __anyAttribute1;
		_p->xsd__anyType::__item = __item2;
	}
	return _p;
}

inline int soap_write_wsnt__InvalidTopicExpressionFaultType(struct soap *soap, wsnt__InvalidTopicExpressionFaultType const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:InvalidTopicExpressionFaultType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 wsnt__InvalidTopicExpressionFaultType * SOAP_FMAC4 soap_get_wsnt__InvalidTopicExpressionFaultType(struct soap*, wsnt__InvalidTopicExpressionFaultType *, const char*, const char*);

inline int soap_read_wsnt__InvalidTopicExpressionFaultType(struct soap *soap, wsnt__InvalidTopicExpressionFaultType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_wsnt__InvalidTopicExpressionFaultType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_wsnt__TopicExpressionDialectUnknownFaultType_DEFINED
#define SOAP_TYPE_wsnt__TopicExpressionDialectUnknownFaultType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__TopicExpressionDialectUnknownFaultType(struct soap*, const char*, int, const wsnt__TopicExpressionDialectUnknownFaultType *, const char*);
SOAP_FMAC3 wsnt__TopicExpressionDialectUnknownFaultType * SOAP_FMAC4 soap_in_wsnt__TopicExpressionDialectUnknownFaultType(struct soap*, const char*, wsnt__TopicExpressionDialectUnknownFaultType *, const char*);
SOAP_FMAC1 wsnt__TopicExpressionDialectUnknownFaultType * SOAP_FMAC2 soap_instantiate_wsnt__TopicExpressionDialectUnknownFaultType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__TopicExpressionDialectUnknownFaultType * soap_new_wsnt__TopicExpressionDialectUnknownFaultType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsnt__TopicExpressionDialectUnknownFaultType(soap, n, NULL, NULL, NULL);
}

inline wsnt__TopicExpressionDialectUnknownFaultType * soap_new_req_wsnt__TopicExpressionDialectUnknownFaultType(
	struct soap *soap,
	time_t Timestamp1)
{
	wsnt__TopicExpressionDialectUnknownFaultType *_p = soap_new_wsnt__TopicExpressionDialectUnknownFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsrfbf__BaseFaultType::Timestamp = Timestamp1;
	}
	return _p;
}

inline wsnt__TopicExpressionDialectUnknownFaultType * soap_new_set_wsnt__TopicExpressionDialectUnknownFaultType(
	struct soap *soap,
	const std::vector<char *> & __any1,
	time_t Timestamp1,
	struct wsa5__EndpointReferenceType *Originator1,
	_wsrfbf__BaseFaultType_ErrorCode *ErrorCode1,
	std::vector<_wsrfbf__BaseFaultType_Description> *Description1,
	_wsrfbf__BaseFaultType_FaultCause *FaultCause1,
	char *__anyAttribute1,
	char *__item2)
{
	wsnt__TopicExpressionDialectUnknownFaultType *_p = soap_new_wsnt__TopicExpressionDialectUnknownFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsrfbf__BaseFaultType::__any = __any1;
		_p->wsrfbf__BaseFaultType::Timestamp = Timestamp1;
		_p->wsrfbf__BaseFaultType::Originator = Originator1;
		_p->wsrfbf__BaseFaultType::ErrorCode = ErrorCode1;
		_p->wsrfbf__BaseFaultType::Description = Description1;
		_p->wsrfbf__BaseFaultType::FaultCause = FaultCause1;
		_p->wsrfbf__BaseFaultType::__anyAttribute = __anyAttribute1;
		_p->xsd__anyType::__item = __item2;
	}
	return _p;
}

inline int soap_write_wsnt__TopicExpressionDialectUnknownFaultType(struct soap *soap, wsnt__TopicExpressionDialectUnknownFaultType const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:TopicExpressionDialectUnknownFaultType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 wsnt__TopicExpressionDialectUnknownFaultType * SOAP_FMAC4 soap_get_wsnt__TopicExpressionDialectUnknownFaultType(struct soap*, wsnt__TopicExpressionDialectUnknownFaultType *, const char*, const char*);

inline int soap_read_wsnt__TopicExpressionDialectUnknownFaultType(struct soap *soap, wsnt__TopicExpressionDialectUnknownFaultType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_wsnt__TopicExpressionDialectUnknownFaultType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_wsnt__InvalidFilterFaultType_DEFINED
#define SOAP_TYPE_wsnt__InvalidFilterFaultType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__InvalidFilterFaultType(struct soap*, const char*, int, const wsnt__InvalidFilterFaultType *, const char*);
SOAP_FMAC3 wsnt__InvalidFilterFaultType * SOAP_FMAC4 soap_in_wsnt__InvalidFilterFaultType(struct soap*, const char*, wsnt__InvalidFilterFaultType *, const char*);
SOAP_FMAC1 wsnt__InvalidFilterFaultType * SOAP_FMAC2 soap_instantiate_wsnt__InvalidFilterFaultType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__InvalidFilterFaultType * soap_new_wsnt__InvalidFilterFaultType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsnt__InvalidFilterFaultType(soap, n, NULL, NULL, NULL);
}

inline wsnt__InvalidFilterFaultType * soap_new_req_wsnt__InvalidFilterFaultType(
	struct soap *soap,
	const std::vector<std::string> & UnknownFilter,
	time_t Timestamp1)
{
	wsnt__InvalidFilterFaultType *_p = soap_new_wsnt__InvalidFilterFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsnt__InvalidFilterFaultType::UnknownFilter = UnknownFilter;
		_p->wsrfbf__BaseFaultType::Timestamp = Timestamp1;
	}
	return _p;
}

inline wsnt__InvalidFilterFaultType * soap_new_set_wsnt__InvalidFilterFaultType(
	struct soap *soap,
	const std::vector<std::string> & UnknownFilter,
	const std::vector<char *> & __any1,
	time_t Timestamp1,
	struct wsa5__EndpointReferenceType *Originator1,
	_wsrfbf__BaseFaultType_ErrorCode *ErrorCode1,
	std::vector<_wsrfbf__BaseFaultType_Description> *Description1,
	_wsrfbf__BaseFaultType_FaultCause *FaultCause1,
	char *__anyAttribute1,
	char *__item2)
{
	wsnt__InvalidFilterFaultType *_p = soap_new_wsnt__InvalidFilterFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsnt__InvalidFilterFaultType::UnknownFilter = UnknownFilter;
		_p->wsrfbf__BaseFaultType::__any = __any1;
		_p->wsrfbf__BaseFaultType::Timestamp = Timestamp1;
		_p->wsrfbf__BaseFaultType::Originator = Originator1;
		_p->wsrfbf__BaseFaultType::ErrorCode = ErrorCode1;
		_p->wsrfbf__BaseFaultType::Description = Description1;
		_p->wsrfbf__BaseFaultType::FaultCause = FaultCause1;
		_p->wsrfbf__BaseFaultType::__anyAttribute = __anyAttribute1;
		_p->xsd__anyType::__item = __item2;
	}
	return _p;
}

inline int soap_write_wsnt__InvalidFilterFaultType(struct soap *soap, wsnt__InvalidFilterFaultType const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:InvalidFilterFaultType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 wsnt__InvalidFilterFaultType * SOAP_FMAC4 soap_get_wsnt__InvalidFilterFaultType(struct soap*, wsnt__InvalidFilterFaultType *, const char*, const char*);

inline int soap_read_wsnt__InvalidFilterFaultType(struct soap *soap, wsnt__InvalidFilterFaultType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_wsnt__InvalidFilterFaultType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_wsnt__SubscribeCreationFailedFaultType_DEFINED
#define SOAP_TYPE_wsnt__SubscribeCreationFailedFaultType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__SubscribeCreationFailedFaultType(struct soap*, const char*, int, const wsnt__SubscribeCreationFailedFaultType *, const char*);
SOAP_FMAC3 wsnt__SubscribeCreationFailedFaultType * SOAP_FMAC4 soap_in_wsnt__SubscribeCreationFailedFaultType(struct soap*, const char*, wsnt__SubscribeCreationFailedFaultType *, const char*);
SOAP_FMAC1 wsnt__SubscribeCreationFailedFaultType * SOAP_FMAC2 soap_instantiate_wsnt__SubscribeCreationFailedFaultType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__SubscribeCreationFailedFaultType * soap_new_wsnt__SubscribeCreationFailedFaultType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsnt__SubscribeCreationFailedFaultType(soap, n, NULL, NULL, NULL);
}

inline wsnt__SubscribeCreationFailedFaultType * soap_new_req_wsnt__SubscribeCreationFailedFaultType(
	struct soap *soap,
	time_t Timestamp1)
{
	wsnt__SubscribeCreationFailedFaultType *_p = soap_new_wsnt__SubscribeCreationFailedFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsrfbf__BaseFaultType::Timestamp = Timestamp1;
	}
	return _p;
}

inline wsnt__SubscribeCreationFailedFaultType * soap_new_set_wsnt__SubscribeCreationFailedFaultType(
	struct soap *soap,
	const std::vector<char *> & __any1,
	time_t Timestamp1,
	struct wsa5__EndpointReferenceType *Originator1,
	_wsrfbf__BaseFaultType_ErrorCode *ErrorCode1,
	std::vector<_wsrfbf__BaseFaultType_Description> *Description1,
	_wsrfbf__BaseFaultType_FaultCause *FaultCause1,
	char *__anyAttribute1,
	char *__item2)
{
	wsnt__SubscribeCreationFailedFaultType *_p = soap_new_wsnt__SubscribeCreationFailedFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsrfbf__BaseFaultType::__any = __any1;
		_p->wsrfbf__BaseFaultType::Timestamp = Timestamp1;
		_p->wsrfbf__BaseFaultType::Originator = Originator1;
		_p->wsrfbf__BaseFaultType::ErrorCode = ErrorCode1;
		_p->wsrfbf__BaseFaultType::Description = Description1;
		_p->wsrfbf__BaseFaultType::FaultCause = FaultCause1;
		_p->wsrfbf__BaseFaultType::__anyAttribute = __anyAttribute1;
		_p->xsd__anyType::__item = __item2;
	}
	return _p;
}

inline int soap_write_wsnt__SubscribeCreationFailedFaultType(struct soap *soap, wsnt__SubscribeCreationFailedFaultType const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:SubscribeCreationFailedFaultType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 wsnt__SubscribeCreationFailedFaultType * SOAP_FMAC4 soap_get_wsnt__SubscribeCreationFailedFaultType(struct soap*, wsnt__SubscribeCreationFailedFaultType *, const char*, const char*);

inline int soap_read_wsnt__SubscribeCreationFailedFaultType(struct soap *soap, wsnt__SubscribeCreationFailedFaultType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_wsnt__SubscribeCreationFailedFaultType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_wsnt__NotificationMessageHolderType_DEFINED
#define SOAP_TYPE_wsnt__NotificationMessageHolderType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__NotificationMessageHolderType(struct soap*, const char*, int, const wsnt__NotificationMessageHolderType *, const char*);
SOAP_FMAC3 wsnt__NotificationMessageHolderType * SOAP_FMAC4 soap_in_wsnt__NotificationMessageHolderType(struct soap*, const char*, wsnt__NotificationMessageHolderType *, const char*);
SOAP_FMAC1 wsnt__NotificationMessageHolderType * SOAP_FMAC2 soap_instantiate_wsnt__NotificationMessageHolderType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__NotificationMessageHolderType * soap_new_wsnt__NotificationMessageHolderType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsnt__NotificationMessageHolderType(soap, n, NULL, NULL, NULL);
}

inline wsnt__NotificationMessageHolderType * soap_new_req_wsnt__NotificationMessageHolderType(
	struct soap *soap,
	const _wsnt__NotificationMessageHolderType_Message& Message)
{
	wsnt__NotificationMessageHolderType *_p = soap_new_wsnt__NotificationMessageHolderType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsnt__NotificationMessageHolderType::Message = Message;
	}
	return _p;
}

inline wsnt__NotificationMessageHolderType * soap_new_set_wsnt__NotificationMessageHolderType(
	struct soap *soap,
	struct wsa5__EndpointReferenceType *SubscriptionReference,
	wsnt__TopicExpressionType *Topic,
	struct wsa5__EndpointReferenceType *ProducerReference,
	const _wsnt__NotificationMessageHolderType_Message& Message,
	char *__item1)
{
	wsnt__NotificationMessageHolderType *_p = soap_new_wsnt__NotificationMessageHolderType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsnt__NotificationMessageHolderType::SubscriptionReference = SubscriptionReference;
		_p->wsnt__NotificationMessageHolderType::Topic = Topic;
		_p->wsnt__NotificationMessageHolderType::ProducerReference = ProducerReference;
		_p->wsnt__NotificationMessageHolderType::Message = Message;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_wsnt__NotificationMessageHolderType(struct soap *soap, wsnt__NotificationMessageHolderType const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:NotificationMessageHolderType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 wsnt__NotificationMessageHolderType * SOAP_FMAC4 soap_get_wsnt__NotificationMessageHolderType(struct soap*, wsnt__NotificationMessageHolderType *, const char*, const char*);

inline int soap_read_wsnt__NotificationMessageHolderType(struct soap *soap, wsnt__NotificationMessageHolderType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_wsnt__NotificationMessageHolderType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_wsnt__SubscriptionPolicyType_DEFINED
#define SOAP_TYPE_wsnt__SubscriptionPolicyType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__SubscriptionPolicyType(struct soap*, const char*, int, const wsnt__SubscriptionPolicyType *, const char*);
SOAP_FMAC3 wsnt__SubscriptionPolicyType * SOAP_FMAC4 soap_in_wsnt__SubscriptionPolicyType(struct soap*, const char*, wsnt__SubscriptionPolicyType *, const char*);
SOAP_FMAC1 wsnt__SubscriptionPolicyType * SOAP_FMAC2 soap_instantiate_wsnt__SubscriptionPolicyType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__SubscriptionPolicyType * soap_new_wsnt__SubscriptionPolicyType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsnt__SubscriptionPolicyType(soap, n, NULL, NULL, NULL);
}

inline wsnt__SubscriptionPolicyType * soap_new_req_wsnt__SubscriptionPolicyType(
	struct soap *soap)
{
	wsnt__SubscriptionPolicyType *_p = soap_new_wsnt__SubscriptionPolicyType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline wsnt__SubscriptionPolicyType * soap_new_set_wsnt__SubscriptionPolicyType(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	wsnt__SubscriptionPolicyType *_p = soap_new_wsnt__SubscriptionPolicyType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsnt__SubscriptionPolicyType::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_wsnt__SubscriptionPolicyType(struct soap *soap, wsnt__SubscriptionPolicyType const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:SubscriptionPolicyType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 wsnt__SubscriptionPolicyType * SOAP_FMAC4 soap_get_wsnt__SubscriptionPolicyType(struct soap*, wsnt__SubscriptionPolicyType *, const char*, const char*);

inline int soap_read_wsnt__SubscriptionPolicyType(struct soap *soap, wsnt__SubscriptionPolicyType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_wsnt__SubscriptionPolicyType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_wsnt__FilterType_DEFINED
#define SOAP_TYPE_wsnt__FilterType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__FilterType(struct soap*, const char*, int, const wsnt__FilterType *, const char*);
SOAP_FMAC3 wsnt__FilterType * SOAP_FMAC4 soap_in_wsnt__FilterType(struct soap*, const char*, wsnt__FilterType *, const char*);
SOAP_FMAC1 wsnt__FilterType * SOAP_FMAC2 soap_instantiate_wsnt__FilterType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__FilterType * soap_new_wsnt__FilterType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsnt__FilterType(soap, n, NULL, NULL, NULL);
}

inline wsnt__FilterType * soap_new_req_wsnt__FilterType(
	struct soap *soap)
{
	wsnt__FilterType *_p = soap_new_wsnt__FilterType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline wsnt__FilterType * soap_new_set_wsnt__FilterType(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	wsnt__FilterType *_p = soap_new_wsnt__FilterType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsnt__FilterType::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_wsnt__FilterType(struct soap *soap, wsnt__FilterType const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:FilterType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 wsnt__FilterType * SOAP_FMAC4 soap_get_wsnt__FilterType(struct soap*, wsnt__FilterType *, const char*, const char*);

inline int soap_read_wsnt__FilterType(struct soap *soap, wsnt__FilterType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_wsnt__FilterType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_wsnt__TopicExpressionType_DEFINED
#define SOAP_TYPE_wsnt__TopicExpressionType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__TopicExpressionType(struct soap*, const char*, int, const wsnt__TopicExpressionType *, const char*);
SOAP_FMAC3 wsnt__TopicExpressionType * SOAP_FMAC4 soap_in_wsnt__TopicExpressionType(struct soap*, const char*, wsnt__TopicExpressionType *, const char*);
SOAP_FMAC1 wsnt__TopicExpressionType * SOAP_FMAC2 soap_instantiate_wsnt__TopicExpressionType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__TopicExpressionType * soap_new_wsnt__TopicExpressionType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsnt__TopicExpressionType(soap, n, NULL, NULL, NULL);
}

inline wsnt__TopicExpressionType * soap_new_req_wsnt__TopicExpressionType(
	struct soap *soap,
	const std::string& Dialect)
{
	wsnt__TopicExpressionType *_p = soap_new_wsnt__TopicExpressionType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsnt__TopicExpressionType::Dialect = Dialect;
	}
	return _p;
}

inline wsnt__TopicExpressionType * soap_new_set_wsnt__TopicExpressionType(
	struct soap *soap,
	char *__any,
	const std::string& Dialect,
	char *__anyAttribute,
	char *__mixed,
	char *__item1)
{
	wsnt__TopicExpressionType *_p = soap_new_wsnt__TopicExpressionType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsnt__TopicExpressionType::__any = __any;
		_p->wsnt__TopicExpressionType::Dialect = Dialect;
		_p->wsnt__TopicExpressionType::__anyAttribute = __anyAttribute;
		_p->wsnt__TopicExpressionType::__mixed = __mixed;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_wsnt__TopicExpressionType(struct soap *soap, wsnt__TopicExpressionType const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:TopicExpressionType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 wsnt__TopicExpressionType * SOAP_FMAC4 soap_get_wsnt__TopicExpressionType(struct soap*, wsnt__TopicExpressionType *, const char*, const char*);

inline int soap_read_wsnt__TopicExpressionType(struct soap *soap, wsnt__TopicExpressionType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_wsnt__TopicExpressionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_wsnt__QueryExpressionType_DEFINED
#define SOAP_TYPE_wsnt__QueryExpressionType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__QueryExpressionType(struct soap*, const char*, int, const wsnt__QueryExpressionType *, const char*);
SOAP_FMAC3 wsnt__QueryExpressionType * SOAP_FMAC4 soap_in_wsnt__QueryExpressionType(struct soap*, const char*, wsnt__QueryExpressionType *, const char*);
SOAP_FMAC1 wsnt__QueryExpressionType * SOAP_FMAC2 soap_instantiate_wsnt__QueryExpressionType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__QueryExpressionType * soap_new_wsnt__QueryExpressionType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsnt__QueryExpressionType(soap, n, NULL, NULL, NULL);
}

inline wsnt__QueryExpressionType * soap_new_req_wsnt__QueryExpressionType(
	struct soap *soap,
	const std::string& Dialect)
{
	wsnt__QueryExpressionType *_p = soap_new_wsnt__QueryExpressionType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsnt__QueryExpressionType::Dialect = Dialect;
	}
	return _p;
}

inline wsnt__QueryExpressionType * soap_new_set_wsnt__QueryExpressionType(
	struct soap *soap,
	char *__any,
	const std::string& Dialect,
	char *__mixed,
	char *__item1)
{
	wsnt__QueryExpressionType *_p = soap_new_wsnt__QueryExpressionType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsnt__QueryExpressionType::__any = __any;
		_p->wsnt__QueryExpressionType::Dialect = Dialect;
		_p->wsnt__QueryExpressionType::__mixed = __mixed;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_wsnt__QueryExpressionType(struct soap *soap, wsnt__QueryExpressionType const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:QueryExpressionType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 wsnt__QueryExpressionType * SOAP_FMAC4 soap_get_wsnt__QueryExpressionType(struct soap*, wsnt__QueryExpressionType *, const char*, const char*);

inline int soap_read_wsnt__QueryExpressionType(struct soap *soap, wsnt__QueryExpressionType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_wsnt__QueryExpressionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tt__Message_DEFINED
#define SOAP_TYPE__tt__Message_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tt__Message(struct soap*, const char*, int, const _tt__Message *, const char*);
SOAP_FMAC3 _tt__Message * SOAP_FMAC4 soap_in__tt__Message(struct soap*, const char*, _tt__Message *, const char*);
SOAP_FMAC1 _tt__Message * SOAP_FMAC2 soap_instantiate__tt__Message(struct soap*, int, const char*, const char*, size_t*);

inline _tt__Message * soap_new__tt__Message(struct soap *soap, int n = -1)
{
	return soap_instantiate__tt__Message(soap, n, NULL, NULL, NULL);
}

inline _tt__Message * soap_new_req__tt__Message(
	struct soap *soap,
	time_t UtcTime)
{
	_tt__Message *_p = soap_new__tt__Message(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tt__Message::UtcTime = UtcTime;
	}
	return _p;
}

inline _tt__Message * soap_new_set__tt__Message(
	struct soap *soap,
	tt__ItemList *Source,
	tt__ItemList *Key,
	tt__ItemList *Data,
	tt__MessageExtension *Extension,
	time_t UtcTime,
	enum tt__PropertyOperation *PropertyOperation,
	char *__anyAttribute)
{
	_tt__Message *_p = soap_new__tt__Message(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tt__Message::Source = Source;
		_p->_tt__Message::Key = Key;
		_p->_tt__Message::Data = Data;
		_p->_tt__Message::Extension = Extension;
		_p->_tt__Message::UtcTime = UtcTime;
		_p->_tt__Message::PropertyOperation = PropertyOperation;
		_p->_tt__Message::__anyAttribute = __anyAttribute;
	}
	return _p;
}

inline int soap_write__tt__Message(struct soap *soap, _tt__Message const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Message", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tt__Message * SOAP_FMAC4 soap_get__tt__Message(struct soap*, _tt__Message *, const char*, const char*);

inline int soap_read__tt__Message(struct soap *soap, _tt__Message *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tt__Message(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__StorageReferencePathExtension_DEFINED
#define SOAP_TYPE_tt__StorageReferencePathExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__StorageReferencePathExtension(struct soap*, const char*, int, const tt__StorageReferencePathExtension *, const char*);
SOAP_FMAC3 tt__StorageReferencePathExtension * SOAP_FMAC4 soap_in_tt__StorageReferencePathExtension(struct soap*, const char*, tt__StorageReferencePathExtension *, const char*);
SOAP_FMAC1 tt__StorageReferencePathExtension * SOAP_FMAC2 soap_instantiate_tt__StorageReferencePathExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__StorageReferencePathExtension * soap_new_tt__StorageReferencePathExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__StorageReferencePathExtension(soap, n, NULL, NULL, NULL);
}

inline tt__StorageReferencePathExtension * soap_new_req_tt__StorageReferencePathExtension(
	struct soap *soap)
{
	tt__StorageReferencePathExtension *_p = soap_new_tt__StorageReferencePathExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__StorageReferencePathExtension * soap_new_set_tt__StorageReferencePathExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__StorageReferencePathExtension *_p = soap_new_tt__StorageReferencePathExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__StorageReferencePathExtension::__any = __any;
		_p->tt__StorageReferencePathExtension::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__StorageReferencePathExtension(struct soap *soap, tt__StorageReferencePathExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:StorageReferencePathExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__StorageReferencePathExtension * SOAP_FMAC4 soap_get_tt__StorageReferencePathExtension(struct soap*, tt__StorageReferencePathExtension *, const char*, const char*);

inline int soap_read_tt__StorageReferencePathExtension(struct soap *soap, tt__StorageReferencePathExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__StorageReferencePathExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__StorageReferencePath_DEFINED
#define SOAP_TYPE_tt__StorageReferencePath_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__StorageReferencePath(struct soap*, const char*, int, const tt__StorageReferencePath *, const char*);
SOAP_FMAC3 tt__StorageReferencePath * SOAP_FMAC4 soap_in_tt__StorageReferencePath(struct soap*, const char*, tt__StorageReferencePath *, const char*);
SOAP_FMAC1 tt__StorageReferencePath * SOAP_FMAC2 soap_instantiate_tt__StorageReferencePath(struct soap*, int, const char*, const char*, size_t*);

inline tt__StorageReferencePath * soap_new_tt__StorageReferencePath(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__StorageReferencePath(soap, n, NULL, NULL, NULL);
}

inline tt__StorageReferencePath * soap_new_req_tt__StorageReferencePath(
	struct soap *soap,
	const std::string& StorageToken)
{
	tt__StorageReferencePath *_p = soap_new_tt__StorageReferencePath(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__StorageReferencePath::StorageToken = StorageToken;
	}
	return _p;
}

inline tt__StorageReferencePath * soap_new_set_tt__StorageReferencePath(
	struct soap *soap,
	const std::string& StorageToken,
	std::string *RelativePath,
	tt__StorageReferencePathExtension *Extension,
	char *__anyAttribute,
	char *__item1)
{
	tt__StorageReferencePath *_p = soap_new_tt__StorageReferencePath(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__StorageReferencePath::StorageToken = StorageToken;
		_p->tt__StorageReferencePath::RelativePath = RelativePath;
		_p->tt__StorageReferencePath::Extension = Extension;
		_p->tt__StorageReferencePath::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__StorageReferencePath(struct soap *soap, tt__StorageReferencePath const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:StorageReferencePath", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__StorageReferencePath * SOAP_FMAC4 soap_get_tt__StorageReferencePath(struct soap*, tt__StorageReferencePath *, const char*, const char*);

inline int soap_read_tt__StorageReferencePath(struct soap *soap, tt__StorageReferencePath *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__StorageReferencePath(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__ArrayOfFileProgressExtension_DEFINED
#define SOAP_TYPE_tt__ArrayOfFileProgressExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ArrayOfFileProgressExtension(struct soap*, const char*, int, const tt__ArrayOfFileProgressExtension *, const char*);
SOAP_FMAC3 tt__ArrayOfFileProgressExtension * SOAP_FMAC4 soap_in_tt__ArrayOfFileProgressExtension(struct soap*, const char*, tt__ArrayOfFileProgressExtension *, const char*);
SOAP_FMAC1 tt__ArrayOfFileProgressExtension * SOAP_FMAC2 soap_instantiate_tt__ArrayOfFileProgressExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__ArrayOfFileProgressExtension * soap_new_tt__ArrayOfFileProgressExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ArrayOfFileProgressExtension(soap, n, NULL, NULL, NULL);
}

inline tt__ArrayOfFileProgressExtension * soap_new_req_tt__ArrayOfFileProgressExtension(
	struct soap *soap)
{
	tt__ArrayOfFileProgressExtension *_p = soap_new_tt__ArrayOfFileProgressExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__ArrayOfFileProgressExtension * soap_new_set_tt__ArrayOfFileProgressExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__ArrayOfFileProgressExtension *_p = soap_new_tt__ArrayOfFileProgressExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ArrayOfFileProgressExtension::__any = __any;
		_p->tt__ArrayOfFileProgressExtension::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__ArrayOfFileProgressExtension(struct soap *soap, tt__ArrayOfFileProgressExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ArrayOfFileProgressExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__ArrayOfFileProgressExtension * SOAP_FMAC4 soap_get_tt__ArrayOfFileProgressExtension(struct soap*, tt__ArrayOfFileProgressExtension *, const char*, const char*);

inline int soap_read_tt__ArrayOfFileProgressExtension(struct soap *soap, tt__ArrayOfFileProgressExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__ArrayOfFileProgressExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__ArrayOfFileProgress_DEFINED
#define SOAP_TYPE_tt__ArrayOfFileProgress_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ArrayOfFileProgress(struct soap*, const char*, int, const tt__ArrayOfFileProgress *, const char*);
SOAP_FMAC3 tt__ArrayOfFileProgress * SOAP_FMAC4 soap_in_tt__ArrayOfFileProgress(struct soap*, const char*, tt__ArrayOfFileProgress *, const char*);
SOAP_FMAC1 tt__ArrayOfFileProgress * SOAP_FMAC2 soap_instantiate_tt__ArrayOfFileProgress(struct soap*, int, const char*, const char*, size_t*);

inline tt__ArrayOfFileProgress * soap_new_tt__ArrayOfFileProgress(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ArrayOfFileProgress(soap, n, NULL, NULL, NULL);
}

inline tt__ArrayOfFileProgress * soap_new_req_tt__ArrayOfFileProgress(
	struct soap *soap)
{
	tt__ArrayOfFileProgress *_p = soap_new_tt__ArrayOfFileProgress(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__ArrayOfFileProgress * soap_new_set_tt__ArrayOfFileProgress(
	struct soap *soap,
	const std::vector<tt__FileProgress *> & FileProgress,
	tt__ArrayOfFileProgressExtension *Extension,
	char *__anyAttribute,
	char *__item1)
{
	tt__ArrayOfFileProgress *_p = soap_new_tt__ArrayOfFileProgress(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ArrayOfFileProgress::FileProgress = FileProgress;
		_p->tt__ArrayOfFileProgress::Extension = Extension;
		_p->tt__ArrayOfFileProgress::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__ArrayOfFileProgress(struct soap *soap, tt__ArrayOfFileProgress const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ArrayOfFileProgress", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__ArrayOfFileProgress * SOAP_FMAC4 soap_get_tt__ArrayOfFileProgress(struct soap*, tt__ArrayOfFileProgress *, const char*, const char*);

inline int soap_read_tt__ArrayOfFileProgress(struct soap *soap, tt__ArrayOfFileProgress *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__ArrayOfFileProgress(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__FileProgress_DEFINED
#define SOAP_TYPE_tt__FileProgress_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__FileProgress(struct soap*, const char*, int, const tt__FileProgress *, const char*);
SOAP_FMAC3 tt__FileProgress * SOAP_FMAC4 soap_in_tt__FileProgress(struct soap*, const char*, tt__FileProgress *, const char*);
SOAP_FMAC1 tt__FileProgress * SOAP_FMAC2 soap_instantiate_tt__FileProgress(struct soap*, int, const char*, const char*, size_t*);

inline tt__FileProgress * soap_new_tt__FileProgress(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__FileProgress(soap, n, NULL, NULL, NULL);
}

inline tt__FileProgress * soap_new_req_tt__FileProgress(
	struct soap *soap,
	const std::string& FileName,
	float Progress)
{
	tt__FileProgress *_p = soap_new_tt__FileProgress(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__FileProgress::FileName = FileName;
		_p->tt__FileProgress::Progress = Progress;
	}
	return _p;
}

inline tt__FileProgress * soap_new_set_tt__FileProgress(
	struct soap *soap,
	const std::string& FileName,
	float Progress,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__FileProgress *_p = soap_new_tt__FileProgress(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__FileProgress::FileName = FileName;
		_p->tt__FileProgress::Progress = Progress;
		_p->tt__FileProgress::__any = __any;
		_p->tt__FileProgress::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__FileProgress(struct soap *soap, tt__FileProgress const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:FileProgress", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__FileProgress * SOAP_FMAC4 soap_get_tt__FileProgress(struct soap*, tt__FileProgress *, const char*, const char*);

inline int soap_read_tt__FileProgress(struct soap *soap, tt__FileProgress *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__FileProgress(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__OSDConfigurationOptionsExtension_DEFINED
#define SOAP_TYPE_tt__OSDConfigurationOptionsExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__OSDConfigurationOptionsExtension(struct soap*, const char*, int, const tt__OSDConfigurationOptionsExtension *, const char*);
SOAP_FMAC3 tt__OSDConfigurationOptionsExtension * SOAP_FMAC4 soap_in_tt__OSDConfigurationOptionsExtension(struct soap*, const char*, tt__OSDConfigurationOptionsExtension *, const char*);
SOAP_FMAC1 tt__OSDConfigurationOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__OSDConfigurationOptionsExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__OSDConfigurationOptionsExtension * soap_new_tt__OSDConfigurationOptionsExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__OSDConfigurationOptionsExtension(soap, n, NULL, NULL, NULL);
}

inline tt__OSDConfigurationOptionsExtension * soap_new_req_tt__OSDConfigurationOptionsExtension(
	struct soap *soap)
{
	tt__OSDConfigurationOptionsExtension *_p = soap_new_tt__OSDConfigurationOptionsExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__OSDConfigurationOptionsExtension * soap_new_set_tt__OSDConfigurationOptionsExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__OSDConfigurationOptionsExtension *_p = soap_new_tt__OSDConfigurationOptionsExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__OSDConfigurationOptionsExtension::__any = __any;
		_p->tt__OSDConfigurationOptionsExtension::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__OSDConfigurationOptionsExtension(struct soap *soap, tt__OSDConfigurationOptionsExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:OSDConfigurationOptionsExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__OSDConfigurationOptionsExtension * SOAP_FMAC4 soap_get_tt__OSDConfigurationOptionsExtension(struct soap*, tt__OSDConfigurationOptionsExtension *, const char*, const char*);

inline int soap_read_tt__OSDConfigurationOptionsExtension(struct soap *soap, tt__OSDConfigurationOptionsExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__OSDConfigurationOptionsExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__OSDConfigurationOptions_DEFINED
#define SOAP_TYPE_tt__OSDConfigurationOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__OSDConfigurationOptions(struct soap*, const char*, int, const tt__OSDConfigurationOptions *, const char*);
SOAP_FMAC3 tt__OSDConfigurationOptions * SOAP_FMAC4 soap_in_tt__OSDConfigurationOptions(struct soap*, const char*, tt__OSDConfigurationOptions *, const char*);
SOAP_FMAC1 tt__OSDConfigurationOptions * SOAP_FMAC2 soap_instantiate_tt__OSDConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__OSDConfigurationOptions * soap_new_tt__OSDConfigurationOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__OSDConfigurationOptions(soap, n, NULL, NULL, NULL);
}

inline tt__OSDConfigurationOptions * soap_new_req_tt__OSDConfigurationOptions(
	struct soap *soap,
	tt__MaximumNumberOfOSDs *MaximumNumberOfOSDs,
	const std::vector<enum tt__OSDType> & Type,
	const std::vector<std::string> & PositionOption)
{
	tt__OSDConfigurationOptions *_p = soap_new_tt__OSDConfigurationOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__OSDConfigurationOptions::MaximumNumberOfOSDs = MaximumNumberOfOSDs;
		_p->tt__OSDConfigurationOptions::Type = Type;
		_p->tt__OSDConfigurationOptions::PositionOption = PositionOption;
	}
	return _p;
}

inline tt__OSDConfigurationOptions * soap_new_set_tt__OSDConfigurationOptions(
	struct soap *soap,
	tt__MaximumNumberOfOSDs *MaximumNumberOfOSDs,
	const std::vector<enum tt__OSDType> & Type,
	const std::vector<std::string> & PositionOption,
	tt__OSDTextOptions *TextOption,
	tt__OSDImgOptions *ImageOption,
	tt__OSDConfigurationOptionsExtension *Extension,
	char *__anyAttribute,
	char *__item1)
{
	tt__OSDConfigurationOptions *_p = soap_new_tt__OSDConfigurationOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__OSDConfigurationOptions::MaximumNumberOfOSDs = MaximumNumberOfOSDs;
		_p->tt__OSDConfigurationOptions::Type = Type;
		_p->tt__OSDConfigurationOptions::PositionOption = PositionOption;
		_p->tt__OSDConfigurationOptions::TextOption = TextOption;
		_p->tt__OSDConfigurationOptions::ImageOption = ImageOption;
		_p->tt__OSDConfigurationOptions::Extension = Extension;
		_p->tt__OSDConfigurationOptions::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__OSDConfigurationOptions(struct soap *soap, tt__OSDConfigurationOptions const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:OSDConfigurationOptions", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__OSDConfigurationOptions * SOAP_FMAC4 soap_get_tt__OSDConfigurationOptions(struct soap*, tt__OSDConfigurationOptions *, const char*, const char*);

inline int soap_read_tt__OSDConfigurationOptions(struct soap *soap, tt__OSDConfigurationOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__OSDConfigurationOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__MaximumNumberOfOSDs_DEFINED
#define SOAP_TYPE_tt__MaximumNumberOfOSDs_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__MaximumNumberOfOSDs(struct soap*, const char*, int, const tt__MaximumNumberOfOSDs *, const char*);
SOAP_FMAC3 tt__MaximumNumberOfOSDs * SOAP_FMAC4 soap_in_tt__MaximumNumberOfOSDs(struct soap*, const char*, tt__MaximumNumberOfOSDs *, const char*);
SOAP_FMAC1 tt__MaximumNumberOfOSDs * SOAP_FMAC2 soap_instantiate_tt__MaximumNumberOfOSDs(struct soap*, int, const char*, const char*, size_t*);

inline tt__MaximumNumberOfOSDs * soap_new_tt__MaximumNumberOfOSDs(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__MaximumNumberOfOSDs(soap, n, NULL, NULL, NULL);
}

inline tt__MaximumNumberOfOSDs * soap_new_req_tt__MaximumNumberOfOSDs(
	struct soap *soap,
	int Total)
{
	tt__MaximumNumberOfOSDs *_p = soap_new_tt__MaximumNumberOfOSDs(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__MaximumNumberOfOSDs::Total = Total;
	}
	return _p;
}

inline tt__MaximumNumberOfOSDs * soap_new_set_tt__MaximumNumberOfOSDs(
	struct soap *soap,
	int Total,
	int *Image,
	int *PlainText,
	int *Date,
	int *Time,
	int *DateAndTime,
	char *__anyAttribute,
	char *__item1)
{
	tt__MaximumNumberOfOSDs *_p = soap_new_tt__MaximumNumberOfOSDs(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__MaximumNumberOfOSDs::Total = Total;
		_p->tt__MaximumNumberOfOSDs::Image = Image;
		_p->tt__MaximumNumberOfOSDs::PlainText = PlainText;
		_p->tt__MaximumNumberOfOSDs::Date = Date;
		_p->tt__MaximumNumberOfOSDs::Time = Time;
		_p->tt__MaximumNumberOfOSDs::DateAndTime = DateAndTime;
		_p->tt__MaximumNumberOfOSDs::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__MaximumNumberOfOSDs(struct soap *soap, tt__MaximumNumberOfOSDs const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:MaximumNumberOfOSDs", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__MaximumNumberOfOSDs * SOAP_FMAC4 soap_get_tt__MaximumNumberOfOSDs(struct soap*, tt__MaximumNumberOfOSDs *, const char*, const char*);

inline int soap_read_tt__MaximumNumberOfOSDs(struct soap *soap, tt__MaximumNumberOfOSDs *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__MaximumNumberOfOSDs(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__OSDConfigurationExtension_DEFINED
#define SOAP_TYPE_tt__OSDConfigurationExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__OSDConfigurationExtension(struct soap*, const char*, int, const tt__OSDConfigurationExtension *, const char*);
SOAP_FMAC3 tt__OSDConfigurationExtension * SOAP_FMAC4 soap_in_tt__OSDConfigurationExtension(struct soap*, const char*, tt__OSDConfigurationExtension *, const char*);
SOAP_FMAC1 tt__OSDConfigurationExtension * SOAP_FMAC2 soap_instantiate_tt__OSDConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__OSDConfigurationExtension * soap_new_tt__OSDConfigurationExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__OSDConfigurationExtension(soap, n, NULL, NULL, NULL);
}

inline tt__OSDConfigurationExtension * soap_new_req_tt__OSDConfigurationExtension(
	struct soap *soap)
{
	tt__OSDConfigurationExtension *_p = soap_new_tt__OSDConfigurationExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__OSDConfigurationExtension * soap_new_set_tt__OSDConfigurationExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__OSDConfigurationExtension *_p = soap_new_tt__OSDConfigurationExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__OSDConfigurationExtension::__any = __any;
		_p->tt__OSDConfigurationExtension::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__OSDConfigurationExtension(struct soap *soap, tt__OSDConfigurationExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:OSDConfigurationExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__OSDConfigurationExtension * SOAP_FMAC4 soap_get_tt__OSDConfigurationExtension(struct soap*, tt__OSDConfigurationExtension *, const char*, const char*);

inline int soap_read_tt__OSDConfigurationExtension(struct soap *soap, tt__OSDConfigurationExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__OSDConfigurationExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__OSDConfiguration_DEFINED
#define SOAP_TYPE_tt__OSDConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__OSDConfiguration(struct soap*, const char*, int, const tt__OSDConfiguration *, const char*);
SOAP_FMAC3 tt__OSDConfiguration * SOAP_FMAC4 soap_in_tt__OSDConfiguration(struct soap*, const char*, tt__OSDConfiguration *, const char*);
SOAP_FMAC1 tt__OSDConfiguration * SOAP_FMAC2 soap_instantiate_tt__OSDConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__OSDConfiguration * soap_new_tt__OSDConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__OSDConfiguration(soap, n, NULL, NULL, NULL);
}

inline tt__OSDConfiguration * soap_new_req_tt__OSDConfiguration(
	struct soap *soap,
	tt__OSDReference *VideoSourceConfigurationToken,
	enum tt__OSDType Type,
	tt__OSDPosConfiguration *Position,
	const std::string& token1)
{
	tt__OSDConfiguration *_p = soap_new_tt__OSDConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__OSDConfiguration::VideoSourceConfigurationToken = VideoSourceConfigurationToken;
		_p->tt__OSDConfiguration::Type = Type;
		_p->tt__OSDConfiguration::Position = Position;
		_p->tt__DeviceEntity::token = token1;
	}
	return _p;
}

inline tt__OSDConfiguration * soap_new_set_tt__OSDConfiguration(
	struct soap *soap,
	tt__OSDReference *VideoSourceConfigurationToken,
	enum tt__OSDType Type,
	tt__OSDPosConfiguration *Position,
	tt__OSDTextConfiguration *TextString,
	tt__OSDImgConfiguration *Image,
	tt__OSDConfigurationExtension *Extension,
	char *__anyAttribute,
	const std::string& token1,
	char *__item2)
{
	tt__OSDConfiguration *_p = soap_new_tt__OSDConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__OSDConfiguration::VideoSourceConfigurationToken = VideoSourceConfigurationToken;
		_p->tt__OSDConfiguration::Type = Type;
		_p->tt__OSDConfiguration::Position = Position;
		_p->tt__OSDConfiguration::TextString = TextString;
		_p->tt__OSDConfiguration::Image = Image;
		_p->tt__OSDConfiguration::Extension = Extension;
		_p->tt__OSDConfiguration::__anyAttribute = __anyAttribute;
		_p->tt__DeviceEntity::token = token1;
		_p->xsd__anyType::__item = __item2;
	}
	return _p;
}

inline int soap_write_tt__OSDConfiguration(struct soap *soap, tt__OSDConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:OSDConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__OSDConfiguration * SOAP_FMAC4 soap_get_tt__OSDConfiguration(struct soap*, tt__OSDConfiguration *, const char*, const char*);

inline int soap_read_tt__OSDConfiguration(struct soap *soap, tt__OSDConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__OSDConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__OSDImgOptionsExtension_DEFINED
#define SOAP_TYPE_tt__OSDImgOptionsExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__OSDImgOptionsExtension(struct soap*, const char*, int, const tt__OSDImgOptionsExtension *, const char*);
SOAP_FMAC3 tt__OSDImgOptionsExtension * SOAP_FMAC4 soap_in_tt__OSDImgOptionsExtension(struct soap*, const char*, tt__OSDImgOptionsExtension *, const char*);
SOAP_FMAC1 tt__OSDImgOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__OSDImgOptionsExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__OSDImgOptionsExtension * soap_new_tt__OSDImgOptionsExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__OSDImgOptionsExtension(soap, n, NULL, NULL, NULL);
}

inline tt__OSDImgOptionsExtension * soap_new_req_tt__OSDImgOptionsExtension(
	struct soap *soap)
{
	tt__OSDImgOptionsExtension *_p = soap_new_tt__OSDImgOptionsExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__OSDImgOptionsExtension * soap_new_set_tt__OSDImgOptionsExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__OSDImgOptionsExtension *_p = soap_new_tt__OSDImgOptionsExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__OSDImgOptionsExtension::__any = __any;
		_p->tt__OSDImgOptionsExtension::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__OSDImgOptionsExtension(struct soap *soap, tt__OSDImgOptionsExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:OSDImgOptionsExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__OSDImgOptionsExtension * SOAP_FMAC4 soap_get_tt__OSDImgOptionsExtension(struct soap*, tt__OSDImgOptionsExtension *, const char*, const char*);

inline int soap_read_tt__OSDImgOptionsExtension(struct soap *soap, tt__OSDImgOptionsExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__OSDImgOptionsExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__OSDImgOptions_DEFINED
#define SOAP_TYPE_tt__OSDImgOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__OSDImgOptions(struct soap*, const char*, int, const tt__OSDImgOptions *, const char*);
SOAP_FMAC3 tt__OSDImgOptions * SOAP_FMAC4 soap_in_tt__OSDImgOptions(struct soap*, const char*, tt__OSDImgOptions *, const char*);
SOAP_FMAC1 tt__OSDImgOptions * SOAP_FMAC2 soap_instantiate_tt__OSDImgOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__OSDImgOptions * soap_new_tt__OSDImgOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__OSDImgOptions(soap, n, NULL, NULL, NULL);
}

inline tt__OSDImgOptions * soap_new_req_tt__OSDImgOptions(
	struct soap *soap,
	const std::vector<std::string> & ImagePath)
{
	tt__OSDImgOptions *_p = soap_new_tt__OSDImgOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__OSDImgOptions::ImagePath = ImagePath;
	}
	return _p;
}

inline tt__OSDImgOptions * soap_new_set_tt__OSDImgOptions(
	struct soap *soap,
	const std::vector<std::string> & ImagePath,
	tt__OSDImgOptionsExtension *Extension,
	char *__anyAttribute,
	char *__item1)
{
	tt__OSDImgOptions *_p = soap_new_tt__OSDImgOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__OSDImgOptions::ImagePath = ImagePath;
		_p->tt__OSDImgOptions::Extension = Extension;
		_p->tt__OSDImgOptions::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__OSDImgOptions(struct soap *soap, tt__OSDImgOptions const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:OSDImgOptions", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__OSDImgOptions * SOAP_FMAC4 soap_get_tt__OSDImgOptions(struct soap*, tt__OSDImgOptions *, const char*, const char*);

inline int soap_read_tt__OSDImgOptions(struct soap *soap, tt__OSDImgOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__OSDImgOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__OSDTextOptionsExtension_DEFINED
#define SOAP_TYPE_tt__OSDTextOptionsExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__OSDTextOptionsExtension(struct soap*, const char*, int, const tt__OSDTextOptionsExtension *, const char*);
SOAP_FMAC3 tt__OSDTextOptionsExtension * SOAP_FMAC4 soap_in_tt__OSDTextOptionsExtension(struct soap*, const char*, tt__OSDTextOptionsExtension *, const char*);
SOAP_FMAC1 tt__OSDTextOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__OSDTextOptionsExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__OSDTextOptionsExtension * soap_new_tt__OSDTextOptionsExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__OSDTextOptionsExtension(soap, n, NULL, NULL, NULL);
}

inline tt__OSDTextOptionsExtension * soap_new_req_tt__OSDTextOptionsExtension(
	struct soap *soap)
{
	tt__OSDTextOptionsExtension *_p = soap_new_tt__OSDTextOptionsExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__OSDTextOptionsExtension * soap_new_set_tt__OSDTextOptionsExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__OSDTextOptionsExtension *_p = soap_new_tt__OSDTextOptionsExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__OSDTextOptionsExtension::__any = __any;
		_p->tt__OSDTextOptionsExtension::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__OSDTextOptionsExtension(struct soap *soap, tt__OSDTextOptionsExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:OSDTextOptionsExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__OSDTextOptionsExtension * SOAP_FMAC4 soap_get_tt__OSDTextOptionsExtension(struct soap*, tt__OSDTextOptionsExtension *, const char*, const char*);

inline int soap_read_tt__OSDTextOptionsExtension(struct soap *soap, tt__OSDTextOptionsExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__OSDTextOptionsExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__OSDTextOptions_DEFINED
#define SOAP_TYPE_tt__OSDTextOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__OSDTextOptions(struct soap*, const char*, int, const tt__OSDTextOptions *, const char*);
SOAP_FMAC3 tt__OSDTextOptions * SOAP_FMAC4 soap_in_tt__OSDTextOptions(struct soap*, const char*, tt__OSDTextOptions *, const char*);
SOAP_FMAC1 tt__OSDTextOptions * SOAP_FMAC2 soap_instantiate_tt__OSDTextOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__OSDTextOptions * soap_new_tt__OSDTextOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__OSDTextOptions(soap, n, NULL, NULL, NULL);
}

inline tt__OSDTextOptions * soap_new_req_tt__OSDTextOptions(
	struct soap *soap,
	const std::vector<std::string> & Type)
{
	tt__OSDTextOptions *_p = soap_new_tt__OSDTextOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__OSDTextOptions::Type = Type;
	}
	return _p;
}

inline tt__OSDTextOptions * soap_new_set_tt__OSDTextOptions(
	struct soap *soap,
	const std::vector<std::string> & Type,
	tt__IntRange *FontSizeRange,
	const std::vector<std::string> & DateFormat,
	const std::vector<std::string> & TimeFormat,
	tt__OSDColorOptions *FontColor,
	tt__OSDColorOptions *BackgroundColor,
	tt__OSDTextOptionsExtension *Extension,
	char *__anyAttribute,
	char *__item1)
{
	tt__OSDTextOptions *_p = soap_new_tt__OSDTextOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__OSDTextOptions::Type = Type;
		_p->tt__OSDTextOptions::FontSizeRange = FontSizeRange;
		_p->tt__OSDTextOptions::DateFormat = DateFormat;
		_p->tt__OSDTextOptions::TimeFormat = TimeFormat;
		_p->tt__OSDTextOptions::FontColor = FontColor;
		_p->tt__OSDTextOptions::BackgroundColor = BackgroundColor;
		_p->tt__OSDTextOptions::Extension = Extension;
		_p->tt__OSDTextOptions::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__OSDTextOptions(struct soap *soap, tt__OSDTextOptions const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:OSDTextOptions", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__OSDTextOptions * SOAP_FMAC4 soap_get_tt__OSDTextOptions(struct soap*, tt__OSDTextOptions *, const char*, const char*);

inline int soap_read_tt__OSDTextOptions(struct soap *soap, tt__OSDTextOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__OSDTextOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__OSDColorOptionsExtension_DEFINED
#define SOAP_TYPE_tt__OSDColorOptionsExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__OSDColorOptionsExtension(struct soap*, const char*, int, const tt__OSDColorOptionsExtension *, const char*);
SOAP_FMAC3 tt__OSDColorOptionsExtension * SOAP_FMAC4 soap_in_tt__OSDColorOptionsExtension(struct soap*, const char*, tt__OSDColorOptionsExtension *, const char*);
SOAP_FMAC1 tt__OSDColorOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__OSDColorOptionsExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__OSDColorOptionsExtension * soap_new_tt__OSDColorOptionsExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__OSDColorOptionsExtension(soap, n, NULL, NULL, NULL);
}

inline tt__OSDColorOptionsExtension * soap_new_req_tt__OSDColorOptionsExtension(
	struct soap *soap)
{
	tt__OSDColorOptionsExtension *_p = soap_new_tt__OSDColorOptionsExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__OSDColorOptionsExtension * soap_new_set_tt__OSDColorOptionsExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__OSDColorOptionsExtension *_p = soap_new_tt__OSDColorOptionsExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__OSDColorOptionsExtension::__any = __any;
		_p->tt__OSDColorOptionsExtension::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__OSDColorOptionsExtension(struct soap *soap, tt__OSDColorOptionsExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:OSDColorOptionsExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__OSDColorOptionsExtension * SOAP_FMAC4 soap_get_tt__OSDColorOptionsExtension(struct soap*, tt__OSDColorOptionsExtension *, const char*, const char*);

inline int soap_read_tt__OSDColorOptionsExtension(struct soap *soap, tt__OSDColorOptionsExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__OSDColorOptionsExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__OSDColorOptions_DEFINED
#define SOAP_TYPE_tt__OSDColorOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__OSDColorOptions(struct soap*, const char*, int, const tt__OSDColorOptions *, const char*);
SOAP_FMAC3 tt__OSDColorOptions * SOAP_FMAC4 soap_in_tt__OSDColorOptions(struct soap*, const char*, tt__OSDColorOptions *, const char*);
SOAP_FMAC1 tt__OSDColorOptions * SOAP_FMAC2 soap_instantiate_tt__OSDColorOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__OSDColorOptions * soap_new_tt__OSDColorOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__OSDColorOptions(soap, n, NULL, NULL, NULL);
}

inline tt__OSDColorOptions * soap_new_req_tt__OSDColorOptions(
	struct soap *soap)
{
	tt__OSDColorOptions *_p = soap_new_tt__OSDColorOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__OSDColorOptions * soap_new_set_tt__OSDColorOptions(
	struct soap *soap,
	tt__ColorOptions *Color,
	tt__IntRange *Transparent,
	tt__OSDColorOptionsExtension *Extension,
	char *__anyAttribute,
	char *__item1)
{
	tt__OSDColorOptions *_p = soap_new_tt__OSDColorOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__OSDColorOptions::Color = Color;
		_p->tt__OSDColorOptions::Transparent = Transparent;
		_p->tt__OSDColorOptions::Extension = Extension;
		_p->tt__OSDColorOptions::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__OSDColorOptions(struct soap *soap, tt__OSDColorOptions const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:OSDColorOptions", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__OSDColorOptions * SOAP_FMAC4 soap_get_tt__OSDColorOptions(struct soap*, tt__OSDColorOptions *, const char*, const char*);

inline int soap_read_tt__OSDColorOptions(struct soap *soap, tt__OSDColorOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__OSDColorOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__ColorOptions_DEFINED
#define SOAP_TYPE_tt__ColorOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ColorOptions(struct soap*, const char*, int, const tt__ColorOptions *, const char*);
SOAP_FMAC3 tt__ColorOptions * SOAP_FMAC4 soap_in_tt__ColorOptions(struct soap*, const char*, tt__ColorOptions *, const char*);
SOAP_FMAC1 tt__ColorOptions * SOAP_FMAC2 soap_instantiate_tt__ColorOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__ColorOptions * soap_new_tt__ColorOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ColorOptions(soap, n, NULL, NULL, NULL);
}

inline tt__ColorOptions * soap_new_req_tt__ColorOptions(
	struct soap *soap,
	int __union_ColorOptions,
	const union _tt__union_ColorOptions& union_ColorOptions)
{
	tt__ColorOptions *_p = soap_new_tt__ColorOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ColorOptions::__union_ColorOptions = __union_ColorOptions;
		_p->tt__ColorOptions::union_ColorOptions = union_ColorOptions;
	}
	return _p;
}

inline tt__ColorOptions * soap_new_set_tt__ColorOptions(
	struct soap *soap,
	int __union_ColorOptions,
	const union _tt__union_ColorOptions& union_ColorOptions,
	char *__anyAttribute,
	char *__item1)
{
	tt__ColorOptions *_p = soap_new_tt__ColorOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ColorOptions::__union_ColorOptions = __union_ColorOptions;
		_p->tt__ColorOptions::union_ColorOptions = union_ColorOptions;
		_p->tt__ColorOptions::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__ColorOptions(struct soap *soap, tt__ColorOptions const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ColorOptions", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__ColorOptions * SOAP_FMAC4 soap_get_tt__ColorOptions(struct soap*, tt__ColorOptions *, const char*, const char*);

inline int soap_read_tt__ColorOptions(struct soap *soap, tt__ColorOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__ColorOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__ColorspaceRange_DEFINED
#define SOAP_TYPE_tt__ColorspaceRange_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ColorspaceRange(struct soap*, const char*, int, const tt__ColorspaceRange *, const char*);
SOAP_FMAC3 tt__ColorspaceRange * SOAP_FMAC4 soap_in_tt__ColorspaceRange(struct soap*, const char*, tt__ColorspaceRange *, const char*);
SOAP_FMAC1 tt__ColorspaceRange * SOAP_FMAC2 soap_instantiate_tt__ColorspaceRange(struct soap*, int, const char*, const char*, size_t*);

inline tt__ColorspaceRange * soap_new_tt__ColorspaceRange(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ColorspaceRange(soap, n, NULL, NULL, NULL);
}

inline tt__ColorspaceRange * soap_new_req_tt__ColorspaceRange(
	struct soap *soap,
	tt__FloatRange *X,
	tt__FloatRange *Y,
	tt__FloatRange *Z,
	const std::string& Colorspace)
{
	tt__ColorspaceRange *_p = soap_new_tt__ColorspaceRange(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ColorspaceRange::X = X;
		_p->tt__ColorspaceRange::Y = Y;
		_p->tt__ColorspaceRange::Z = Z;
		_p->tt__ColorspaceRange::Colorspace = Colorspace;
	}
	return _p;
}

inline tt__ColorspaceRange * soap_new_set_tt__ColorspaceRange(
	struct soap *soap,
	tt__FloatRange *X,
	tt__FloatRange *Y,
	tt__FloatRange *Z,
	const std::string& Colorspace,
	char *__anyAttribute,
	char *__item1)
{
	tt__ColorspaceRange *_p = soap_new_tt__ColorspaceRange(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ColorspaceRange::X = X;
		_p->tt__ColorspaceRange::Y = Y;
		_p->tt__ColorspaceRange::Z = Z;
		_p->tt__ColorspaceRange::Colorspace = Colorspace;
		_p->tt__ColorspaceRange::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__ColorspaceRange(struct soap *soap, tt__ColorspaceRange const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ColorspaceRange", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__ColorspaceRange * SOAP_FMAC4 soap_get_tt__ColorspaceRange(struct soap*, tt__ColorspaceRange *, const char*, const char*);

inline int soap_read_tt__ColorspaceRange(struct soap *soap, tt__ColorspaceRange *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__ColorspaceRange(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__OSDImgConfigurationExtension_DEFINED
#define SOAP_TYPE_tt__OSDImgConfigurationExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__OSDImgConfigurationExtension(struct soap*, const char*, int, const tt__OSDImgConfigurationExtension *, const char*);
SOAP_FMAC3 tt__OSDImgConfigurationExtension * SOAP_FMAC4 soap_in_tt__OSDImgConfigurationExtension(struct soap*, const char*, tt__OSDImgConfigurationExtension *, const char*);
SOAP_FMAC1 tt__OSDImgConfigurationExtension * SOAP_FMAC2 soap_instantiate_tt__OSDImgConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__OSDImgConfigurationExtension * soap_new_tt__OSDImgConfigurationExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__OSDImgConfigurationExtension(soap, n, NULL, NULL, NULL);
}

inline tt__OSDImgConfigurationExtension * soap_new_req_tt__OSDImgConfigurationExtension(
	struct soap *soap)
{
	tt__OSDImgConfigurationExtension *_p = soap_new_tt__OSDImgConfigurationExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__OSDImgConfigurationExtension * soap_new_set_tt__OSDImgConfigurationExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__OSDImgConfigurationExtension *_p = soap_new_tt__OSDImgConfigurationExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__OSDImgConfigurationExtension::__any = __any;
		_p->tt__OSDImgConfigurationExtension::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__OSDImgConfigurationExtension(struct soap *soap, tt__OSDImgConfigurationExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:OSDImgConfigurationExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__OSDImgConfigurationExtension * SOAP_FMAC4 soap_get_tt__OSDImgConfigurationExtension(struct soap*, tt__OSDImgConfigurationExtension *, const char*, const char*);

inline int soap_read_tt__OSDImgConfigurationExtension(struct soap *soap, tt__OSDImgConfigurationExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__OSDImgConfigurationExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__OSDImgConfiguration_DEFINED
#define SOAP_TYPE_tt__OSDImgConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__OSDImgConfiguration(struct soap*, const char*, int, const tt__OSDImgConfiguration *, const char*);
SOAP_FMAC3 tt__OSDImgConfiguration * SOAP_FMAC4 soap_in_tt__OSDImgConfiguration(struct soap*, const char*, tt__OSDImgConfiguration *, const char*);
SOAP_FMAC1 tt__OSDImgConfiguration * SOAP_FMAC2 soap_instantiate_tt__OSDImgConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__OSDImgConfiguration * soap_new_tt__OSDImgConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__OSDImgConfiguration(soap, n, NULL, NULL, NULL);
}

inline tt__OSDImgConfiguration * soap_new_req_tt__OSDImgConfiguration(
	struct soap *soap,
	const std::string& ImgPath)
{
	tt__OSDImgConfiguration *_p = soap_new_tt__OSDImgConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__OSDImgConfiguration::ImgPath = ImgPath;
	}
	return _p;
}

inline tt__OSDImgConfiguration * soap_new_set_tt__OSDImgConfiguration(
	struct soap *soap,
	const std::string& ImgPath,
	tt__OSDImgConfigurationExtension *Extension,
	char *__anyAttribute,
	char *__item1)
{
	tt__OSDImgConfiguration *_p = soap_new_tt__OSDImgConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__OSDImgConfiguration::ImgPath = ImgPath;
		_p->tt__OSDImgConfiguration::Extension = Extension;
		_p->tt__OSDImgConfiguration::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__OSDImgConfiguration(struct soap *soap, tt__OSDImgConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:OSDImgConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__OSDImgConfiguration * SOAP_FMAC4 soap_get_tt__OSDImgConfiguration(struct soap*, tt__OSDImgConfiguration *, const char*, const char*);

inline int soap_read_tt__OSDImgConfiguration(struct soap *soap, tt__OSDImgConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__OSDImgConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__OSDTextConfigurationExtension_DEFINED
#define SOAP_TYPE_tt__OSDTextConfigurationExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__OSDTextConfigurationExtension(struct soap*, const char*, int, const tt__OSDTextConfigurationExtension *, const char*);
SOAP_FMAC3 tt__OSDTextConfigurationExtension * SOAP_FMAC4 soap_in_tt__OSDTextConfigurationExtension(struct soap*, const char*, tt__OSDTextConfigurationExtension *, const char*);
SOAP_FMAC1 tt__OSDTextConfigurationExtension * SOAP_FMAC2 soap_instantiate_tt__OSDTextConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__OSDTextConfigurationExtension * soap_new_tt__OSDTextConfigurationExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__OSDTextConfigurationExtension(soap, n, NULL, NULL, NULL);
}

inline tt__OSDTextConfigurationExtension * soap_new_req_tt__OSDTextConfigurationExtension(
	struct soap *soap)
{
	tt__OSDTextConfigurationExtension *_p = soap_new_tt__OSDTextConfigurationExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__OSDTextConfigurationExtension * soap_new_set_tt__OSDTextConfigurationExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__OSDTextConfigurationExtension *_p = soap_new_tt__OSDTextConfigurationExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__OSDTextConfigurationExtension::__any = __any;
		_p->tt__OSDTextConfigurationExtension::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__OSDTextConfigurationExtension(struct soap *soap, tt__OSDTextConfigurationExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:OSDTextConfigurationExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__OSDTextConfigurationExtension * SOAP_FMAC4 soap_get_tt__OSDTextConfigurationExtension(struct soap*, tt__OSDTextConfigurationExtension *, const char*, const char*);

inline int soap_read_tt__OSDTextConfigurationExtension(struct soap *soap, tt__OSDTextConfigurationExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__OSDTextConfigurationExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__OSDTextConfiguration_DEFINED
#define SOAP_TYPE_tt__OSDTextConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__OSDTextConfiguration(struct soap*, const char*, int, const tt__OSDTextConfiguration *, const char*);
SOAP_FMAC3 tt__OSDTextConfiguration * SOAP_FMAC4 soap_in_tt__OSDTextConfiguration(struct soap*, const char*, tt__OSDTextConfiguration *, const char*);
SOAP_FMAC1 tt__OSDTextConfiguration * SOAP_FMAC2 soap_instantiate_tt__OSDTextConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__OSDTextConfiguration * soap_new_tt__OSDTextConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__OSDTextConfiguration(soap, n, NULL, NULL, NULL);
}

inline tt__OSDTextConfiguration * soap_new_req_tt__OSDTextConfiguration(
	struct soap *soap,
	const std::string& Type)
{
	tt__OSDTextConfiguration *_p = soap_new_tt__OSDTextConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__OSDTextConfiguration::Type = Type;
	}
	return _p;
}

inline tt__OSDTextConfiguration * soap_new_set_tt__OSDTextConfiguration(
	struct soap *soap,
	const std::string& Type,
	std::string *DateFormat,
	std::string *TimeFormat,
	int *FontSize,
	tt__OSDColor *FontColor,
	tt__OSDColor *BackgroundColor,
	std::string *PlainText,
	tt__OSDTextConfigurationExtension *Extension,
	char *__anyAttribute,
	char *__item1)
{
	tt__OSDTextConfiguration *_p = soap_new_tt__OSDTextConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__OSDTextConfiguration::Type = Type;
		_p->tt__OSDTextConfiguration::DateFormat = DateFormat;
		_p->tt__OSDTextConfiguration::TimeFormat = TimeFormat;
		_p->tt__OSDTextConfiguration::FontSize = FontSize;
		_p->tt__OSDTextConfiguration::FontColor = FontColor;
		_p->tt__OSDTextConfiguration::BackgroundColor = BackgroundColor;
		_p->tt__OSDTextConfiguration::PlainText = PlainText;
		_p->tt__OSDTextConfiguration::Extension = Extension;
		_p->tt__OSDTextConfiguration::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__OSDTextConfiguration(struct soap *soap, tt__OSDTextConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:OSDTextConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__OSDTextConfiguration * SOAP_FMAC4 soap_get_tt__OSDTextConfiguration(struct soap*, tt__OSDTextConfiguration *, const char*, const char*);

inline int soap_read_tt__OSDTextConfiguration(struct soap *soap, tt__OSDTextConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__OSDTextConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__OSDColor_DEFINED
#define SOAP_TYPE_tt__OSDColor_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__OSDColor(struct soap*, const char*, int, const tt__OSDColor *, const char*);
SOAP_FMAC3 tt__OSDColor * SOAP_FMAC4 soap_in_tt__OSDColor(struct soap*, const char*, tt__OSDColor *, const char*);
SOAP_FMAC1 tt__OSDColor * SOAP_FMAC2 soap_instantiate_tt__OSDColor(struct soap*, int, const char*, const char*, size_t*);

inline tt__OSDColor * soap_new_tt__OSDColor(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__OSDColor(soap, n, NULL, NULL, NULL);
}

inline tt__OSDColor * soap_new_req_tt__OSDColor(
	struct soap *soap,
	tt__Color *Color)
{
	tt__OSDColor *_p = soap_new_tt__OSDColor(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__OSDColor::Color = Color;
	}
	return _p;
}

inline tt__OSDColor * soap_new_set_tt__OSDColor(
	struct soap *soap,
	tt__Color *Color,
	int *Transparent,
	char *__anyAttribute,
	char *__item1)
{
	tt__OSDColor *_p = soap_new_tt__OSDColor(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__OSDColor::Color = Color;
		_p->tt__OSDColor::Transparent = Transparent;
		_p->tt__OSDColor::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__OSDColor(struct soap *soap, tt__OSDColor const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:OSDColor", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__OSDColor * SOAP_FMAC4 soap_get_tt__OSDColor(struct soap*, tt__OSDColor *, const char*, const char*);

inline int soap_read_tt__OSDColor(struct soap *soap, tt__OSDColor *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__OSDColor(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__OSDPosConfigurationExtension_DEFINED
#define SOAP_TYPE_tt__OSDPosConfigurationExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__OSDPosConfigurationExtension(struct soap*, const char*, int, const tt__OSDPosConfigurationExtension *, const char*);
SOAP_FMAC3 tt__OSDPosConfigurationExtension * SOAP_FMAC4 soap_in_tt__OSDPosConfigurationExtension(struct soap*, const char*, tt__OSDPosConfigurationExtension *, const char*);
SOAP_FMAC1 tt__OSDPosConfigurationExtension * SOAP_FMAC2 soap_instantiate_tt__OSDPosConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__OSDPosConfigurationExtension * soap_new_tt__OSDPosConfigurationExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__OSDPosConfigurationExtension(soap, n, NULL, NULL, NULL);
}

inline tt__OSDPosConfigurationExtension * soap_new_req_tt__OSDPosConfigurationExtension(
	struct soap *soap)
{
	tt__OSDPosConfigurationExtension *_p = soap_new_tt__OSDPosConfigurationExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__OSDPosConfigurationExtension * soap_new_set_tt__OSDPosConfigurationExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__OSDPosConfigurationExtension *_p = soap_new_tt__OSDPosConfigurationExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__OSDPosConfigurationExtension::__any = __any;
		_p->tt__OSDPosConfigurationExtension::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__OSDPosConfigurationExtension(struct soap *soap, tt__OSDPosConfigurationExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:OSDPosConfigurationExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__OSDPosConfigurationExtension * SOAP_FMAC4 soap_get_tt__OSDPosConfigurationExtension(struct soap*, tt__OSDPosConfigurationExtension *, const char*, const char*);

inline int soap_read_tt__OSDPosConfigurationExtension(struct soap *soap, tt__OSDPosConfigurationExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__OSDPosConfigurationExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__OSDPosConfiguration_DEFINED
#define SOAP_TYPE_tt__OSDPosConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__OSDPosConfiguration(struct soap*, const char*, int, const tt__OSDPosConfiguration *, const char*);
SOAP_FMAC3 tt__OSDPosConfiguration * SOAP_FMAC4 soap_in_tt__OSDPosConfiguration(struct soap*, const char*, tt__OSDPosConfiguration *, const char*);
SOAP_FMAC1 tt__OSDPosConfiguration * SOAP_FMAC2 soap_instantiate_tt__OSDPosConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__OSDPosConfiguration * soap_new_tt__OSDPosConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__OSDPosConfiguration(soap, n, NULL, NULL, NULL);
}

inline tt__OSDPosConfiguration * soap_new_req_tt__OSDPosConfiguration(
	struct soap *soap,
	const std::string& Type)
{
	tt__OSDPosConfiguration *_p = soap_new_tt__OSDPosConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__OSDPosConfiguration::Type = Type;
	}
	return _p;
}

inline tt__OSDPosConfiguration * soap_new_set_tt__OSDPosConfiguration(
	struct soap *soap,
	const std::string& Type,
	tt__Vector *Pos,
	tt__OSDPosConfigurationExtension *Extension,
	char *__anyAttribute,
	char *__item1)
{
	tt__OSDPosConfiguration *_p = soap_new_tt__OSDPosConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__OSDPosConfiguration::Type = Type;
		_p->tt__OSDPosConfiguration::Pos = Pos;
		_p->tt__OSDPosConfiguration::Extension = Extension;
		_p->tt__OSDPosConfiguration::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__OSDPosConfiguration(struct soap *soap, tt__OSDPosConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:OSDPosConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__OSDPosConfiguration * SOAP_FMAC4 soap_get_tt__OSDPosConfiguration(struct soap*, tt__OSDPosConfiguration *, const char*, const char*);

inline int soap_read_tt__OSDPosConfiguration(struct soap *soap, tt__OSDPosConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__OSDPosConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__OSDReference_DEFINED
#define SOAP_TYPE_tt__OSDReference_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__OSDReference(struct soap*, const char*, int, const tt__OSDReference *, const char*);
SOAP_FMAC3 tt__OSDReference * SOAP_FMAC4 soap_in_tt__OSDReference(struct soap*, const char*, tt__OSDReference *, const char*);
SOAP_FMAC1 tt__OSDReference * SOAP_FMAC2 soap_instantiate_tt__OSDReference(struct soap*, int, const char*, const char*, size_t*);

inline tt__OSDReference * soap_new_tt__OSDReference(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__OSDReference(soap, n, NULL, NULL, NULL);
}

inline tt__OSDReference * soap_new_req_tt__OSDReference(
	struct soap *soap,
	const std::string& __item)
{
	tt__OSDReference *_p = soap_new_tt__OSDReference(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__OSDReference::__item = __item;
	}
	return _p;
}

inline tt__OSDReference * soap_new_set_tt__OSDReference(
	struct soap *soap,
	const std::string& __item,
	char *__anyAttribute,
	char *__item1)
{
	tt__OSDReference *_p = soap_new_tt__OSDReference(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__OSDReference::__item = __item;
		_p->tt__OSDReference::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__OSDReference(struct soap *soap, tt__OSDReference const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:OSDReference", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__OSDReference * SOAP_FMAC4 soap_get_tt__OSDReference(struct soap*, tt__OSDReference *, const char*, const char*);

inline int soap_read_tt__OSDReference(struct soap *soap, tt__OSDReference *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__OSDReference(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__ProfileStatusExtension_DEFINED
#define SOAP_TYPE_tt__ProfileStatusExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ProfileStatusExtension(struct soap*, const char*, int, const tt__ProfileStatusExtension *, const char*);
SOAP_FMAC3 tt__ProfileStatusExtension * SOAP_FMAC4 soap_in_tt__ProfileStatusExtension(struct soap*, const char*, tt__ProfileStatusExtension *, const char*);
SOAP_FMAC1 tt__ProfileStatusExtension * SOAP_FMAC2 soap_instantiate_tt__ProfileStatusExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__ProfileStatusExtension * soap_new_tt__ProfileStatusExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ProfileStatusExtension(soap, n, NULL, NULL, NULL);
}

inline tt__ProfileStatusExtension * soap_new_req_tt__ProfileStatusExtension(
	struct soap *soap)
{
	tt__ProfileStatusExtension *_p = soap_new_tt__ProfileStatusExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__ProfileStatusExtension * soap_new_set_tt__ProfileStatusExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__ProfileStatusExtension *_p = soap_new_tt__ProfileStatusExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ProfileStatusExtension::__any = __any;
		_p->tt__ProfileStatusExtension::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__ProfileStatusExtension(struct soap *soap, tt__ProfileStatusExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ProfileStatusExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__ProfileStatusExtension * SOAP_FMAC4 soap_get_tt__ProfileStatusExtension(struct soap*, tt__ProfileStatusExtension *, const char*, const char*);

inline int soap_read_tt__ProfileStatusExtension(struct soap *soap, tt__ProfileStatusExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__ProfileStatusExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__ProfileStatus_DEFINED
#define SOAP_TYPE_tt__ProfileStatus_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ProfileStatus(struct soap*, const char*, int, const tt__ProfileStatus *, const char*);
SOAP_FMAC3 tt__ProfileStatus * SOAP_FMAC4 soap_in_tt__ProfileStatus(struct soap*, const char*, tt__ProfileStatus *, const char*);
SOAP_FMAC1 tt__ProfileStatus * SOAP_FMAC2 soap_instantiate_tt__ProfileStatus(struct soap*, int, const char*, const char*, size_t*);

inline tt__ProfileStatus * soap_new_tt__ProfileStatus(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ProfileStatus(soap, n, NULL, NULL, NULL);
}

inline tt__ProfileStatus * soap_new_req_tt__ProfileStatus(
	struct soap *soap)
{
	tt__ProfileStatus *_p = soap_new_tt__ProfileStatus(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__ProfileStatus * soap_new_set_tt__ProfileStatus(
	struct soap *soap,
	const std::vector<tt__ActiveConnection *> & ActiveConnections,
	tt__ProfileStatusExtension *Extension,
	char *__item1)
{
	tt__ProfileStatus *_p = soap_new_tt__ProfileStatus(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ProfileStatus::ActiveConnections = ActiveConnections;
		_p->tt__ProfileStatus::Extension = Extension;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__ProfileStatus(struct soap *soap, tt__ProfileStatus const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ProfileStatus", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__ProfileStatus * SOAP_FMAC4 soap_get_tt__ProfileStatus(struct soap*, tt__ProfileStatus *, const char*, const char*);

inline int soap_read_tt__ProfileStatus(struct soap *soap, tt__ProfileStatus *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__ProfileStatus(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__ActiveConnection_DEFINED
#define SOAP_TYPE_tt__ActiveConnection_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ActiveConnection(struct soap*, const char*, int, const tt__ActiveConnection *, const char*);
SOAP_FMAC3 tt__ActiveConnection * SOAP_FMAC4 soap_in_tt__ActiveConnection(struct soap*, const char*, tt__ActiveConnection *, const char*);
SOAP_FMAC1 tt__ActiveConnection * SOAP_FMAC2 soap_instantiate_tt__ActiveConnection(struct soap*, int, const char*, const char*, size_t*);

inline tt__ActiveConnection * soap_new_tt__ActiveConnection(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ActiveConnection(soap, n, NULL, NULL, NULL);
}

inline tt__ActiveConnection * soap_new_req_tt__ActiveConnection(
	struct soap *soap,
	float CurrentBitrate,
	float CurrentFps)
{
	tt__ActiveConnection *_p = soap_new_tt__ActiveConnection(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ActiveConnection::CurrentBitrate = CurrentBitrate;
		_p->tt__ActiveConnection::CurrentFps = CurrentFps;
	}
	return _p;
}

inline tt__ActiveConnection * soap_new_set_tt__ActiveConnection(
	struct soap *soap,
	float CurrentBitrate,
	float CurrentFps,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__ActiveConnection *_p = soap_new_tt__ActiveConnection(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ActiveConnection::CurrentBitrate = CurrentBitrate;
		_p->tt__ActiveConnection::CurrentFps = CurrentFps;
		_p->tt__ActiveConnection::__any = __any;
		_p->tt__ActiveConnection::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__ActiveConnection(struct soap *soap, tt__ActiveConnection const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ActiveConnection", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__ActiveConnection * SOAP_FMAC4 soap_get_tt__ActiveConnection(struct soap*, tt__ActiveConnection *, const char*, const char*);

inline int soap_read_tt__ActiveConnection(struct soap *soap, tt__ActiveConnection *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__ActiveConnection(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__AudioClassDescriptorExtension_DEFINED
#define SOAP_TYPE_tt__AudioClassDescriptorExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AudioClassDescriptorExtension(struct soap*, const char*, int, const tt__AudioClassDescriptorExtension *, const char*);
SOAP_FMAC3 tt__AudioClassDescriptorExtension * SOAP_FMAC4 soap_in_tt__AudioClassDescriptorExtension(struct soap*, const char*, tt__AudioClassDescriptorExtension *, const char*);
SOAP_FMAC1 tt__AudioClassDescriptorExtension * SOAP_FMAC2 soap_instantiate_tt__AudioClassDescriptorExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__AudioClassDescriptorExtension * soap_new_tt__AudioClassDescriptorExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__AudioClassDescriptorExtension(soap, n, NULL, NULL, NULL);
}

inline tt__AudioClassDescriptorExtension * soap_new_req_tt__AudioClassDescriptorExtension(
	struct soap *soap)
{
	tt__AudioClassDescriptorExtension *_p = soap_new_tt__AudioClassDescriptorExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__AudioClassDescriptorExtension * soap_new_set_tt__AudioClassDescriptorExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__AudioClassDescriptorExtension *_p = soap_new_tt__AudioClassDescriptorExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AudioClassDescriptorExtension::__any = __any;
		_p->tt__AudioClassDescriptorExtension::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__AudioClassDescriptorExtension(struct soap *soap, tt__AudioClassDescriptorExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AudioClassDescriptorExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__AudioClassDescriptorExtension * SOAP_FMAC4 soap_get_tt__AudioClassDescriptorExtension(struct soap*, tt__AudioClassDescriptorExtension *, const char*, const char*);

inline int soap_read_tt__AudioClassDescriptorExtension(struct soap *soap, tt__AudioClassDescriptorExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__AudioClassDescriptorExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__AudioClassDescriptor_DEFINED
#define SOAP_TYPE_tt__AudioClassDescriptor_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AudioClassDescriptor(struct soap*, const char*, int, const tt__AudioClassDescriptor *, const char*);
SOAP_FMAC3 tt__AudioClassDescriptor * SOAP_FMAC4 soap_in_tt__AudioClassDescriptor(struct soap*, const char*, tt__AudioClassDescriptor *, const char*);
SOAP_FMAC1 tt__AudioClassDescriptor * SOAP_FMAC2 soap_instantiate_tt__AudioClassDescriptor(struct soap*, int, const char*, const char*, size_t*);

inline tt__AudioClassDescriptor * soap_new_tt__AudioClassDescriptor(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__AudioClassDescriptor(soap, n, NULL, NULL, NULL);
}

inline tt__AudioClassDescriptor * soap_new_req_tt__AudioClassDescriptor(
	struct soap *soap)
{
	tt__AudioClassDescriptor *_p = soap_new_tt__AudioClassDescriptor(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__AudioClassDescriptor * soap_new_set_tt__AudioClassDescriptor(
	struct soap *soap,
	const std::vector<tt__AudioClassCandidate *> & ClassCandidate,
	tt__AudioClassDescriptorExtension *Extension,
	char *__anyAttribute,
	char *__item1)
{
	tt__AudioClassDescriptor *_p = soap_new_tt__AudioClassDescriptor(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AudioClassDescriptor::ClassCandidate = ClassCandidate;
		_p->tt__AudioClassDescriptor::Extension = Extension;
		_p->tt__AudioClassDescriptor::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__AudioClassDescriptor(struct soap *soap, tt__AudioClassDescriptor const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AudioClassDescriptor", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__AudioClassDescriptor * SOAP_FMAC4 soap_get_tt__AudioClassDescriptor(struct soap*, tt__AudioClassDescriptor *, const char*, const char*);

inline int soap_read_tt__AudioClassDescriptor(struct soap *soap, tt__AudioClassDescriptor *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__AudioClassDescriptor(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__AudioClassCandidate_DEFINED
#define SOAP_TYPE_tt__AudioClassCandidate_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AudioClassCandidate(struct soap*, const char*, int, const tt__AudioClassCandidate *, const char*);
SOAP_FMAC3 tt__AudioClassCandidate * SOAP_FMAC4 soap_in_tt__AudioClassCandidate(struct soap*, const char*, tt__AudioClassCandidate *, const char*);
SOAP_FMAC1 tt__AudioClassCandidate * SOAP_FMAC2 soap_instantiate_tt__AudioClassCandidate(struct soap*, int, const char*, const char*, size_t*);

inline tt__AudioClassCandidate * soap_new_tt__AudioClassCandidate(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__AudioClassCandidate(soap, n, NULL, NULL, NULL);
}

inline tt__AudioClassCandidate * soap_new_req_tt__AudioClassCandidate(
	struct soap *soap,
	const std::string& Type,
	float Likelihood)
{
	tt__AudioClassCandidate *_p = soap_new_tt__AudioClassCandidate(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AudioClassCandidate::Type = Type;
		_p->tt__AudioClassCandidate::Likelihood = Likelihood;
	}
	return _p;
}

inline tt__AudioClassCandidate * soap_new_set_tt__AudioClassCandidate(
	struct soap *soap,
	const std::string& Type,
	float Likelihood,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__AudioClassCandidate *_p = soap_new_tt__AudioClassCandidate(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AudioClassCandidate::Type = Type;
		_p->tt__AudioClassCandidate::Likelihood = Likelihood;
		_p->tt__AudioClassCandidate::__any = __any;
		_p->tt__AudioClassCandidate::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__AudioClassCandidate(struct soap *soap, tt__AudioClassCandidate const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AudioClassCandidate", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__AudioClassCandidate * SOAP_FMAC4 soap_get_tt__AudioClassCandidate(struct soap*, tt__AudioClassCandidate *, const char*, const char*);

inline int soap_read_tt__AudioClassCandidate(struct soap *soap, tt__AudioClassCandidate *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__AudioClassCandidate(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__ActionEngineEventPayloadExtension_DEFINED
#define SOAP_TYPE_tt__ActionEngineEventPayloadExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ActionEngineEventPayloadExtension(struct soap*, const char*, int, const tt__ActionEngineEventPayloadExtension *, const char*);
SOAP_FMAC3 tt__ActionEngineEventPayloadExtension * SOAP_FMAC4 soap_in_tt__ActionEngineEventPayloadExtension(struct soap*, const char*, tt__ActionEngineEventPayloadExtension *, const char*);
SOAP_FMAC1 tt__ActionEngineEventPayloadExtension * SOAP_FMAC2 soap_instantiate_tt__ActionEngineEventPayloadExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__ActionEngineEventPayloadExtension * soap_new_tt__ActionEngineEventPayloadExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ActionEngineEventPayloadExtension(soap, n, NULL, NULL, NULL);
}

inline tt__ActionEngineEventPayloadExtension * soap_new_req_tt__ActionEngineEventPayloadExtension(
	struct soap *soap)
{
	tt__ActionEngineEventPayloadExtension *_p = soap_new_tt__ActionEngineEventPayloadExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__ActionEngineEventPayloadExtension * soap_new_set_tt__ActionEngineEventPayloadExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__ActionEngineEventPayloadExtension *_p = soap_new_tt__ActionEngineEventPayloadExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ActionEngineEventPayloadExtension::__any = __any;
		_p->tt__ActionEngineEventPayloadExtension::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__ActionEngineEventPayloadExtension(struct soap *soap, tt__ActionEngineEventPayloadExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ActionEngineEventPayloadExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__ActionEngineEventPayloadExtension * SOAP_FMAC4 soap_get_tt__ActionEngineEventPayloadExtension(struct soap*, tt__ActionEngineEventPayloadExtension *, const char*, const char*);

inline int soap_read_tt__ActionEngineEventPayloadExtension(struct soap *soap, tt__ActionEngineEventPayloadExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__ActionEngineEventPayloadExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__ActionEngineEventPayload_DEFINED
#define SOAP_TYPE_tt__ActionEngineEventPayload_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ActionEngineEventPayload(struct soap*, const char*, int, const tt__ActionEngineEventPayload *, const char*);
SOAP_FMAC3 tt__ActionEngineEventPayload * SOAP_FMAC4 soap_in_tt__ActionEngineEventPayload(struct soap*, const char*, tt__ActionEngineEventPayload *, const char*);
SOAP_FMAC1 tt__ActionEngineEventPayload * SOAP_FMAC2 soap_instantiate_tt__ActionEngineEventPayload(struct soap*, int, const char*, const char*, size_t*);

inline tt__ActionEngineEventPayload * soap_new_tt__ActionEngineEventPayload(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ActionEngineEventPayload(soap, n, NULL, NULL, NULL);
}

inline tt__ActionEngineEventPayload * soap_new_req_tt__ActionEngineEventPayload(
	struct soap *soap)
{
	tt__ActionEngineEventPayload *_p = soap_new_tt__ActionEngineEventPayload(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__ActionEngineEventPayload * soap_new_set_tt__ActionEngineEventPayload(
	struct soap *soap,
	struct SOAP_ENV__Envelope *RequestInfo,
	struct SOAP_ENV__Envelope *ResponseInfo,
	struct SOAP_ENV__Fault *Fault,
	tt__ActionEngineEventPayloadExtension *Extension,
	char *__anyAttribute,
	char *__item1)
{
	tt__ActionEngineEventPayload *_p = soap_new_tt__ActionEngineEventPayload(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ActionEngineEventPayload::RequestInfo = RequestInfo;
		_p->tt__ActionEngineEventPayload::ResponseInfo = ResponseInfo;
		_p->tt__ActionEngineEventPayload::Fault = Fault;
		_p->tt__ActionEngineEventPayload::Extension = Extension;
		_p->tt__ActionEngineEventPayload::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__ActionEngineEventPayload(struct soap *soap, tt__ActionEngineEventPayload const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ActionEngineEventPayload", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__ActionEngineEventPayload * SOAP_FMAC4 soap_get_tt__ActionEngineEventPayload(struct soap*, tt__ActionEngineEventPayload *, const char*, const char*);

inline int soap_read_tt__ActionEngineEventPayload(struct soap *soap, tt__ActionEngineEventPayload *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__ActionEngineEventPayload(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__AnalyticsState_DEFINED
#define SOAP_TYPE_tt__AnalyticsState_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AnalyticsState(struct soap*, const char*, int, const tt__AnalyticsState *, const char*);
SOAP_FMAC3 tt__AnalyticsState * SOAP_FMAC4 soap_in_tt__AnalyticsState(struct soap*, const char*, tt__AnalyticsState *, const char*);
SOAP_FMAC1 tt__AnalyticsState * SOAP_FMAC2 soap_instantiate_tt__AnalyticsState(struct soap*, int, const char*, const char*, size_t*);

inline tt__AnalyticsState * soap_new_tt__AnalyticsState(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__AnalyticsState(soap, n, NULL, NULL, NULL);
}

inline tt__AnalyticsState * soap_new_req_tt__AnalyticsState(
	struct soap *soap,
	const std::string& State)
{
	tt__AnalyticsState *_p = soap_new_tt__AnalyticsState(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AnalyticsState::State = State;
	}
	return _p;
}

inline tt__AnalyticsState * soap_new_set_tt__AnalyticsState(
	struct soap *soap,
	std::string *Error,
	const std::string& State,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__AnalyticsState *_p = soap_new_tt__AnalyticsState(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AnalyticsState::Error = Error;
		_p->tt__AnalyticsState::State = State;
		_p->tt__AnalyticsState::__any = __any;
		_p->tt__AnalyticsState::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__AnalyticsState(struct soap *soap, tt__AnalyticsState const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AnalyticsState", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__AnalyticsState * SOAP_FMAC4 soap_get_tt__AnalyticsState(struct soap*, tt__AnalyticsState *, const char*, const char*);

inline int soap_read_tt__AnalyticsState(struct soap *soap, tt__AnalyticsState *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__AnalyticsState(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__AnalyticsStateInformation_DEFINED
#define SOAP_TYPE_tt__AnalyticsStateInformation_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AnalyticsStateInformation(struct soap*, const char*, int, const tt__AnalyticsStateInformation *, const char*);
SOAP_FMAC3 tt__AnalyticsStateInformation * SOAP_FMAC4 soap_in_tt__AnalyticsStateInformation(struct soap*, const char*, tt__AnalyticsStateInformation *, const char*);
SOAP_FMAC1 tt__AnalyticsStateInformation * SOAP_FMAC2 soap_instantiate_tt__AnalyticsStateInformation(struct soap*, int, const char*, const char*, size_t*);

inline tt__AnalyticsStateInformation * soap_new_tt__AnalyticsStateInformation(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__AnalyticsStateInformation(soap, n, NULL, NULL, NULL);
}

inline tt__AnalyticsStateInformation * soap_new_req_tt__AnalyticsStateInformation(
	struct soap *soap,
	const std::string& AnalyticsEngineControlToken,
	tt__AnalyticsState *State)
{
	tt__AnalyticsStateInformation *_p = soap_new_tt__AnalyticsStateInformation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AnalyticsStateInformation::AnalyticsEngineControlToken = AnalyticsEngineControlToken;
		_p->tt__AnalyticsStateInformation::State = State;
	}
	return _p;
}

inline tt__AnalyticsStateInformation * soap_new_set_tt__AnalyticsStateInformation(
	struct soap *soap,
	const std::string& AnalyticsEngineControlToken,
	tt__AnalyticsState *State,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__AnalyticsStateInformation *_p = soap_new_tt__AnalyticsStateInformation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AnalyticsStateInformation::AnalyticsEngineControlToken = AnalyticsEngineControlToken;
		_p->tt__AnalyticsStateInformation::State = State;
		_p->tt__AnalyticsStateInformation::__any = __any;
		_p->tt__AnalyticsStateInformation::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__AnalyticsStateInformation(struct soap *soap, tt__AnalyticsStateInformation const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AnalyticsStateInformation", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__AnalyticsStateInformation * SOAP_FMAC4 soap_get_tt__AnalyticsStateInformation(struct soap*, tt__AnalyticsStateInformation *, const char*, const char*);

inline int soap_read_tt__AnalyticsStateInformation(struct soap *soap, tt__AnalyticsStateInformation *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__AnalyticsStateInformation(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__AnalyticsEngineControl_DEFINED
#define SOAP_TYPE_tt__AnalyticsEngineControl_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AnalyticsEngineControl(struct soap*, const char*, int, const tt__AnalyticsEngineControl *, const char*);
SOAP_FMAC3 tt__AnalyticsEngineControl * SOAP_FMAC4 soap_in_tt__AnalyticsEngineControl(struct soap*, const char*, tt__AnalyticsEngineControl *, const char*);
SOAP_FMAC1 tt__AnalyticsEngineControl * SOAP_FMAC2 soap_instantiate_tt__AnalyticsEngineControl(struct soap*, int, const char*, const char*, size_t*);

inline tt__AnalyticsEngineControl * soap_new_tt__AnalyticsEngineControl(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__AnalyticsEngineControl(soap, n, NULL, NULL, NULL);
}

inline tt__AnalyticsEngineControl * soap_new_req_tt__AnalyticsEngineControl(
	struct soap *soap,
	const std::string& EngineToken,
	const std::string& EngineConfigToken,
	const std::vector<std::string> & InputToken,
	const std::vector<std::string> & ReceiverToken,
	tt__Config *Subscription,
	enum tt__ModeOfOperation Mode,
	const std::string& Name1,
	int UseCount1,
	const std::string& token1)
{
	tt__AnalyticsEngineControl *_p = soap_new_tt__AnalyticsEngineControl(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AnalyticsEngineControl::EngineToken = EngineToken;
		_p->tt__AnalyticsEngineControl::EngineConfigToken = EngineConfigToken;
		_p->tt__AnalyticsEngineControl::InputToken = InputToken;
		_p->tt__AnalyticsEngineControl::ReceiverToken = ReceiverToken;
		_p->tt__AnalyticsEngineControl::Subscription = Subscription;
		_p->tt__AnalyticsEngineControl::Mode = Mode;
		_p->tt__ConfigurationEntity::Name = Name1;
		_p->tt__ConfigurationEntity::UseCount = UseCount1;
		_p->tt__ConfigurationEntity::token = token1;
	}
	return _p;
}

inline tt__AnalyticsEngineControl * soap_new_set_tt__AnalyticsEngineControl(
	struct soap *soap,
	const std::string& EngineToken,
	const std::string& EngineConfigToken,
	const std::vector<std::string> & InputToken,
	const std::vector<std::string> & ReceiverToken,
	tt__MulticastConfiguration *Multicast,
	tt__Config *Subscription,
	enum tt__ModeOfOperation Mode,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	const std::string& Name1,
	int UseCount1,
	const std::string& token1,
	char *__item2)
{
	tt__AnalyticsEngineControl *_p = soap_new_tt__AnalyticsEngineControl(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AnalyticsEngineControl::EngineToken = EngineToken;
		_p->tt__AnalyticsEngineControl::EngineConfigToken = EngineConfigToken;
		_p->tt__AnalyticsEngineControl::InputToken = InputToken;
		_p->tt__AnalyticsEngineControl::ReceiverToken = ReceiverToken;
		_p->tt__AnalyticsEngineControl::Multicast = Multicast;
		_p->tt__AnalyticsEngineControl::Subscription = Subscription;
		_p->tt__AnalyticsEngineControl::Mode = Mode;
		_p->tt__AnalyticsEngineControl::__any = __any;
		_p->tt__AnalyticsEngineControl::__anyAttribute = __anyAttribute;
		_p->tt__ConfigurationEntity::Name = Name1;
		_p->tt__ConfigurationEntity::UseCount = UseCount1;
		_p->tt__ConfigurationEntity::token = token1;
		_p->xsd__anyType::__item = __item2;
	}
	return _p;
}

inline int soap_write_tt__AnalyticsEngineControl(struct soap *soap, tt__AnalyticsEngineControl const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AnalyticsEngineControl", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__AnalyticsEngineControl * SOAP_FMAC4 soap_get_tt__AnalyticsEngineControl(struct soap*, tt__AnalyticsEngineControl *, const char*, const char*);

inline int soap_read_tt__AnalyticsEngineControl(struct soap *soap, tt__AnalyticsEngineControl *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__AnalyticsEngineControl(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__MetadataInputExtension_DEFINED
#define SOAP_TYPE_tt__MetadataInputExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__MetadataInputExtension(struct soap*, const char*, int, const tt__MetadataInputExtension *, const char*);
SOAP_FMAC3 tt__MetadataInputExtension * SOAP_FMAC4 soap_in_tt__MetadataInputExtension(struct soap*, const char*, tt__MetadataInputExtension *, const char*);
SOAP_FMAC1 tt__MetadataInputExtension * SOAP_FMAC2 soap_instantiate_tt__MetadataInputExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__MetadataInputExtension * soap_new_tt__MetadataInputExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__MetadataInputExtension(soap, n, NULL, NULL, NULL);
}

inline tt__MetadataInputExtension * soap_new_req_tt__MetadataInputExtension(
	struct soap *soap)
{
	tt__MetadataInputExtension *_p = soap_new_tt__MetadataInputExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__MetadataInputExtension * soap_new_set_tt__MetadataInputExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__MetadataInputExtension *_p = soap_new_tt__MetadataInputExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__MetadataInputExtension::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__MetadataInputExtension(struct soap *soap, tt__MetadataInputExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:MetadataInputExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__MetadataInputExtension * SOAP_FMAC4 soap_get_tt__MetadataInputExtension(struct soap*, tt__MetadataInputExtension *, const char*, const char*);

inline int soap_read_tt__MetadataInputExtension(struct soap *soap, tt__MetadataInputExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__MetadataInputExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__MetadataInput_DEFINED
#define SOAP_TYPE_tt__MetadataInput_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__MetadataInput(struct soap*, const char*, int, const tt__MetadataInput *, const char*);
SOAP_FMAC3 tt__MetadataInput * SOAP_FMAC4 soap_in_tt__MetadataInput(struct soap*, const char*, tt__MetadataInput *, const char*);
SOAP_FMAC1 tt__MetadataInput * SOAP_FMAC2 soap_instantiate_tt__MetadataInput(struct soap*, int, const char*, const char*, size_t*);

inline tt__MetadataInput * soap_new_tt__MetadataInput(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__MetadataInput(soap, n, NULL, NULL, NULL);
}

inline tt__MetadataInput * soap_new_req_tt__MetadataInput(
	struct soap *soap)
{
	tt__MetadataInput *_p = soap_new_tt__MetadataInput(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__MetadataInput * soap_new_set_tt__MetadataInput(
	struct soap *soap,
	const std::vector<tt__Config *> & MetadataConfig,
	tt__MetadataInputExtension *Extension,
	char *__anyAttribute,
	char *__item1)
{
	tt__MetadataInput *_p = soap_new_tt__MetadataInput(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__MetadataInput::MetadataConfig = MetadataConfig;
		_p->tt__MetadataInput::Extension = Extension;
		_p->tt__MetadataInput::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__MetadataInput(struct soap *soap, tt__MetadataInput const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:MetadataInput", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__MetadataInput * SOAP_FMAC4 soap_get_tt__MetadataInput(struct soap*, tt__MetadataInput *, const char*, const char*);

inline int soap_read_tt__MetadataInput(struct soap *soap, tt__MetadataInput *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__MetadataInput(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__SourceIdentificationExtension_DEFINED
#define SOAP_TYPE_tt__SourceIdentificationExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__SourceIdentificationExtension(struct soap*, const char*, int, const tt__SourceIdentificationExtension *, const char*);
SOAP_FMAC3 tt__SourceIdentificationExtension * SOAP_FMAC4 soap_in_tt__SourceIdentificationExtension(struct soap*, const char*, tt__SourceIdentificationExtension *, const char*);
SOAP_FMAC1 tt__SourceIdentificationExtension * SOAP_FMAC2 soap_instantiate_tt__SourceIdentificationExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__SourceIdentificationExtension * soap_new_tt__SourceIdentificationExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__SourceIdentificationExtension(soap, n, NULL, NULL, NULL);
}

inline tt__SourceIdentificationExtension * soap_new_req_tt__SourceIdentificationExtension(
	struct soap *soap)
{
	tt__SourceIdentificationExtension *_p = soap_new_tt__SourceIdentificationExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__SourceIdentificationExtension * soap_new_set_tt__SourceIdentificationExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__SourceIdentificationExtension *_p = soap_new_tt__SourceIdentificationExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__SourceIdentificationExtension::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__SourceIdentificationExtension(struct soap *soap, tt__SourceIdentificationExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:SourceIdentificationExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__SourceIdentificationExtension * SOAP_FMAC4 soap_get_tt__SourceIdentificationExtension(struct soap*, tt__SourceIdentificationExtension *, const char*, const char*);

inline int soap_read_tt__SourceIdentificationExtension(struct soap *soap, tt__SourceIdentificationExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__SourceIdentificationExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__SourceIdentification_DEFINED
#define SOAP_TYPE_tt__SourceIdentification_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__SourceIdentification(struct soap*, const char*, int, const tt__SourceIdentification *, const char*);
SOAP_FMAC3 tt__SourceIdentification * SOAP_FMAC4 soap_in_tt__SourceIdentification(struct soap*, const char*, tt__SourceIdentification *, const char*);
SOAP_FMAC1 tt__SourceIdentification * SOAP_FMAC2 soap_instantiate_tt__SourceIdentification(struct soap*, int, const char*, const char*, size_t*);

inline tt__SourceIdentification * soap_new_tt__SourceIdentification(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__SourceIdentification(soap, n, NULL, NULL, NULL);
}

inline tt__SourceIdentification * soap_new_req_tt__SourceIdentification(
	struct soap *soap,
	const std::string& Name,
	const std::vector<std::string> & Token)
{
	tt__SourceIdentification *_p = soap_new_tt__SourceIdentification(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__SourceIdentification::Name = Name;
		_p->tt__SourceIdentification::Token = Token;
	}
	return _p;
}

inline tt__SourceIdentification * soap_new_set_tt__SourceIdentification(
	struct soap *soap,
	const std::string& Name,
	const std::vector<std::string> & Token,
	tt__SourceIdentificationExtension *Extension,
	char *__anyAttribute,
	char *__item1)
{
	tt__SourceIdentification *_p = soap_new_tt__SourceIdentification(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__SourceIdentification::Name = Name;
		_p->tt__SourceIdentification::Token = Token;
		_p->tt__SourceIdentification::Extension = Extension;
		_p->tt__SourceIdentification::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__SourceIdentification(struct soap *soap, tt__SourceIdentification const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:SourceIdentification", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__SourceIdentification * SOAP_FMAC4 soap_get_tt__SourceIdentification(struct soap*, tt__SourceIdentification *, const char*, const char*);

inline int soap_read_tt__SourceIdentification(struct soap *soap, tt__SourceIdentification *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__SourceIdentification(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__AnalyticsEngineInput_DEFINED
#define SOAP_TYPE_tt__AnalyticsEngineInput_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AnalyticsEngineInput(struct soap*, const char*, int, const tt__AnalyticsEngineInput *, const char*);
SOAP_FMAC3 tt__AnalyticsEngineInput * SOAP_FMAC4 soap_in_tt__AnalyticsEngineInput(struct soap*, const char*, tt__AnalyticsEngineInput *, const char*);
SOAP_FMAC1 tt__AnalyticsEngineInput * SOAP_FMAC2 soap_instantiate_tt__AnalyticsEngineInput(struct soap*, int, const char*, const char*, size_t*);

inline tt__AnalyticsEngineInput * soap_new_tt__AnalyticsEngineInput(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__AnalyticsEngineInput(soap, n, NULL, NULL, NULL);
}

inline tt__AnalyticsEngineInput * soap_new_req_tt__AnalyticsEngineInput(
	struct soap *soap,
	tt__SourceIdentification *SourceIdentification,
	tt__VideoEncoderConfiguration *VideoInput,
	tt__MetadataInput *MetadataInput,
	const std::string& Name1,
	int UseCount1,
	const std::string& token1)
{
	tt__AnalyticsEngineInput *_p = soap_new_tt__AnalyticsEngineInput(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AnalyticsEngineInput::SourceIdentification = SourceIdentification;
		_p->tt__AnalyticsEngineInput::VideoInput = VideoInput;
		_p->tt__AnalyticsEngineInput::MetadataInput = MetadataInput;
		_p->tt__ConfigurationEntity::Name = Name1;
		_p->tt__ConfigurationEntity::UseCount = UseCount1;
		_p->tt__ConfigurationEntity::token = token1;
	}
	return _p;
}

inline tt__AnalyticsEngineInput * soap_new_set_tt__AnalyticsEngineInput(
	struct soap *soap,
	tt__SourceIdentification *SourceIdentification,
	tt__VideoEncoderConfiguration *VideoInput,
	tt__MetadataInput *MetadataInput,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	const std::string& Name1,
	int UseCount1,
	const std::string& token1,
	char *__item2)
{
	tt__AnalyticsEngineInput *_p = soap_new_tt__AnalyticsEngineInput(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AnalyticsEngineInput::SourceIdentification = SourceIdentification;
		_p->tt__AnalyticsEngineInput::VideoInput = VideoInput;
		_p->tt__AnalyticsEngineInput::MetadataInput = MetadataInput;
		_p->tt__AnalyticsEngineInput::__any = __any;
		_p->tt__AnalyticsEngineInput::__anyAttribute = __anyAttribute;
		_p->tt__ConfigurationEntity::Name = Name1;
		_p->tt__ConfigurationEntity::UseCount = UseCount1;
		_p->tt__ConfigurationEntity::token = token1;
		_p->xsd__anyType::__item = __item2;
	}
	return _p;
}

inline int soap_write_tt__AnalyticsEngineInput(struct soap *soap, tt__AnalyticsEngineInput const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AnalyticsEngineInput", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__AnalyticsEngineInput * SOAP_FMAC4 soap_get_tt__AnalyticsEngineInput(struct soap*, tt__AnalyticsEngineInput *, const char*, const char*);

inline int soap_read_tt__AnalyticsEngineInput(struct soap *soap, tt__AnalyticsEngineInput *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__AnalyticsEngineInput(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__AnalyticsEngineInputInfoExtension_DEFINED
#define SOAP_TYPE_tt__AnalyticsEngineInputInfoExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AnalyticsEngineInputInfoExtension(struct soap*, const char*, int, const tt__AnalyticsEngineInputInfoExtension *, const char*);
SOAP_FMAC3 tt__AnalyticsEngineInputInfoExtension * SOAP_FMAC4 soap_in_tt__AnalyticsEngineInputInfoExtension(struct soap*, const char*, tt__AnalyticsEngineInputInfoExtension *, const char*);
SOAP_FMAC1 tt__AnalyticsEngineInputInfoExtension * SOAP_FMAC2 soap_instantiate_tt__AnalyticsEngineInputInfoExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__AnalyticsEngineInputInfoExtension * soap_new_tt__AnalyticsEngineInputInfoExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__AnalyticsEngineInputInfoExtension(soap, n, NULL, NULL, NULL);
}

inline tt__AnalyticsEngineInputInfoExtension * soap_new_req_tt__AnalyticsEngineInputInfoExtension(
	struct soap *soap)
{
	tt__AnalyticsEngineInputInfoExtension *_p = soap_new_tt__AnalyticsEngineInputInfoExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__AnalyticsEngineInputInfoExtension * soap_new_set_tt__AnalyticsEngineInputInfoExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__AnalyticsEngineInputInfoExtension *_p = soap_new_tt__AnalyticsEngineInputInfoExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AnalyticsEngineInputInfoExtension::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__AnalyticsEngineInputInfoExtension(struct soap *soap, tt__AnalyticsEngineInputInfoExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AnalyticsEngineInputInfoExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__AnalyticsEngineInputInfoExtension * SOAP_FMAC4 soap_get_tt__AnalyticsEngineInputInfoExtension(struct soap*, tt__AnalyticsEngineInputInfoExtension *, const char*, const char*);

inline int soap_read_tt__AnalyticsEngineInputInfoExtension(struct soap *soap, tt__AnalyticsEngineInputInfoExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__AnalyticsEngineInputInfoExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__AnalyticsEngineInputInfo_DEFINED
#define SOAP_TYPE_tt__AnalyticsEngineInputInfo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AnalyticsEngineInputInfo(struct soap*, const char*, int, const tt__AnalyticsEngineInputInfo *, const char*);
SOAP_FMAC3 tt__AnalyticsEngineInputInfo * SOAP_FMAC4 soap_in_tt__AnalyticsEngineInputInfo(struct soap*, const char*, tt__AnalyticsEngineInputInfo *, const char*);
SOAP_FMAC1 tt__AnalyticsEngineInputInfo * SOAP_FMAC2 soap_instantiate_tt__AnalyticsEngineInputInfo(struct soap*, int, const char*, const char*, size_t*);

inline tt__AnalyticsEngineInputInfo * soap_new_tt__AnalyticsEngineInputInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__AnalyticsEngineInputInfo(soap, n, NULL, NULL, NULL);
}

inline tt__AnalyticsEngineInputInfo * soap_new_req_tt__AnalyticsEngineInputInfo(
	struct soap *soap)
{
	tt__AnalyticsEngineInputInfo *_p = soap_new_tt__AnalyticsEngineInputInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__AnalyticsEngineInputInfo * soap_new_set_tt__AnalyticsEngineInputInfo(
	struct soap *soap,
	tt__Config *InputInfo,
	tt__AnalyticsEngineInputInfoExtension *Extension,
	char *__anyAttribute,
	char *__item1)
{
	tt__AnalyticsEngineInputInfo *_p = soap_new_tt__AnalyticsEngineInputInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AnalyticsEngineInputInfo::InputInfo = InputInfo;
		_p->tt__AnalyticsEngineInputInfo::Extension = Extension;
		_p->tt__AnalyticsEngineInputInfo::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__AnalyticsEngineInputInfo(struct soap *soap, tt__AnalyticsEngineInputInfo const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AnalyticsEngineInputInfo", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__AnalyticsEngineInputInfo * SOAP_FMAC4 soap_get_tt__AnalyticsEngineInputInfo(struct soap*, tt__AnalyticsEngineInputInfo *, const char*, const char*);

inline int soap_read_tt__AnalyticsEngineInputInfo(struct soap *soap, tt__AnalyticsEngineInputInfo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__AnalyticsEngineInputInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__EngineConfiguration_DEFINED
#define SOAP_TYPE_tt__EngineConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__EngineConfiguration(struct soap*, const char*, int, const tt__EngineConfiguration *, const char*);
SOAP_FMAC3 tt__EngineConfiguration * SOAP_FMAC4 soap_in_tt__EngineConfiguration(struct soap*, const char*, tt__EngineConfiguration *, const char*);
SOAP_FMAC1 tt__EngineConfiguration * SOAP_FMAC2 soap_instantiate_tt__EngineConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__EngineConfiguration * soap_new_tt__EngineConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__EngineConfiguration(soap, n, NULL, NULL, NULL);
}

inline tt__EngineConfiguration * soap_new_req_tt__EngineConfiguration(
	struct soap *soap,
	tt__VideoAnalyticsConfiguration *VideoAnalyticsConfiguration,
	tt__AnalyticsEngineInputInfo *AnalyticsEngineInputInfo)
{
	tt__EngineConfiguration *_p = soap_new_tt__EngineConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__EngineConfiguration::VideoAnalyticsConfiguration = VideoAnalyticsConfiguration;
		_p->tt__EngineConfiguration::AnalyticsEngineInputInfo = AnalyticsEngineInputInfo;
	}
	return _p;
}

inline tt__EngineConfiguration * soap_new_set_tt__EngineConfiguration(
	struct soap *soap,
	tt__VideoAnalyticsConfiguration *VideoAnalyticsConfiguration,
	tt__AnalyticsEngineInputInfo *AnalyticsEngineInputInfo,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__EngineConfiguration *_p = soap_new_tt__EngineConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__EngineConfiguration::VideoAnalyticsConfiguration = VideoAnalyticsConfiguration;
		_p->tt__EngineConfiguration::AnalyticsEngineInputInfo = AnalyticsEngineInputInfo;
		_p->tt__EngineConfiguration::__any = __any;
		_p->tt__EngineConfiguration::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__EngineConfiguration(struct soap *soap, tt__EngineConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:EngineConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__EngineConfiguration * SOAP_FMAC4 soap_get_tt__EngineConfiguration(struct soap*, tt__EngineConfiguration *, const char*, const char*);

inline int soap_read_tt__EngineConfiguration(struct soap *soap, tt__EngineConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__EngineConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__AnalyticsDeviceEngineConfigurationExtension_DEFINED
#define SOAP_TYPE_tt__AnalyticsDeviceEngineConfigurationExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AnalyticsDeviceEngineConfigurationExtension(struct soap*, const char*, int, const tt__AnalyticsDeviceEngineConfigurationExtension *, const char*);
SOAP_FMAC3 tt__AnalyticsDeviceEngineConfigurationExtension * SOAP_FMAC4 soap_in_tt__AnalyticsDeviceEngineConfigurationExtension(struct soap*, const char*, tt__AnalyticsDeviceEngineConfigurationExtension *, const char*);
SOAP_FMAC1 tt__AnalyticsDeviceEngineConfigurationExtension * SOAP_FMAC2 soap_instantiate_tt__AnalyticsDeviceEngineConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__AnalyticsDeviceEngineConfigurationExtension * soap_new_tt__AnalyticsDeviceEngineConfigurationExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__AnalyticsDeviceEngineConfigurationExtension(soap, n, NULL, NULL, NULL);
}

inline tt__AnalyticsDeviceEngineConfigurationExtension * soap_new_req_tt__AnalyticsDeviceEngineConfigurationExtension(
	struct soap *soap)
{
	tt__AnalyticsDeviceEngineConfigurationExtension *_p = soap_new_tt__AnalyticsDeviceEngineConfigurationExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__AnalyticsDeviceEngineConfigurationExtension * soap_new_set_tt__AnalyticsDeviceEngineConfigurationExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__AnalyticsDeviceEngineConfigurationExtension *_p = soap_new_tt__AnalyticsDeviceEngineConfigurationExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AnalyticsDeviceEngineConfigurationExtension::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__AnalyticsDeviceEngineConfigurationExtension(struct soap *soap, tt__AnalyticsDeviceEngineConfigurationExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AnalyticsDeviceEngineConfigurationExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__AnalyticsDeviceEngineConfigurationExtension * SOAP_FMAC4 soap_get_tt__AnalyticsDeviceEngineConfigurationExtension(struct soap*, tt__AnalyticsDeviceEngineConfigurationExtension *, const char*, const char*);

inline int soap_read_tt__AnalyticsDeviceEngineConfigurationExtension(struct soap *soap, tt__AnalyticsDeviceEngineConfigurationExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__AnalyticsDeviceEngineConfigurationExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__AnalyticsDeviceEngineConfiguration_DEFINED
#define SOAP_TYPE_tt__AnalyticsDeviceEngineConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AnalyticsDeviceEngineConfiguration(struct soap*, const char*, int, const tt__AnalyticsDeviceEngineConfiguration *, const char*);
SOAP_FMAC3 tt__AnalyticsDeviceEngineConfiguration * SOAP_FMAC4 soap_in_tt__AnalyticsDeviceEngineConfiguration(struct soap*, const char*, tt__AnalyticsDeviceEngineConfiguration *, const char*);
SOAP_FMAC1 tt__AnalyticsDeviceEngineConfiguration * SOAP_FMAC2 soap_instantiate_tt__AnalyticsDeviceEngineConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__AnalyticsDeviceEngineConfiguration * soap_new_tt__AnalyticsDeviceEngineConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__AnalyticsDeviceEngineConfiguration(soap, n, NULL, NULL, NULL);
}

inline tt__AnalyticsDeviceEngineConfiguration * soap_new_req_tt__AnalyticsDeviceEngineConfiguration(
	struct soap *soap,
	const std::vector<tt__EngineConfiguration *> & EngineConfiguration)
{
	tt__AnalyticsDeviceEngineConfiguration *_p = soap_new_tt__AnalyticsDeviceEngineConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AnalyticsDeviceEngineConfiguration::EngineConfiguration = EngineConfiguration;
	}
	return _p;
}

inline tt__AnalyticsDeviceEngineConfiguration * soap_new_set_tt__AnalyticsDeviceEngineConfiguration(
	struct soap *soap,
	const std::vector<tt__EngineConfiguration *> & EngineConfiguration,
	tt__AnalyticsDeviceEngineConfigurationExtension *Extension,
	char *__anyAttribute,
	char *__item1)
{
	tt__AnalyticsDeviceEngineConfiguration *_p = soap_new_tt__AnalyticsDeviceEngineConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AnalyticsDeviceEngineConfiguration::EngineConfiguration = EngineConfiguration;
		_p->tt__AnalyticsDeviceEngineConfiguration::Extension = Extension;
		_p->tt__AnalyticsDeviceEngineConfiguration::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__AnalyticsDeviceEngineConfiguration(struct soap *soap, tt__AnalyticsDeviceEngineConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AnalyticsDeviceEngineConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__AnalyticsDeviceEngineConfiguration * SOAP_FMAC4 soap_get_tt__AnalyticsDeviceEngineConfiguration(struct soap*, tt__AnalyticsDeviceEngineConfiguration *, const char*, const char*);

inline int soap_read_tt__AnalyticsDeviceEngineConfiguration(struct soap *soap, tt__AnalyticsDeviceEngineConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__AnalyticsDeviceEngineConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__AnalyticsEngine_DEFINED
#define SOAP_TYPE_tt__AnalyticsEngine_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AnalyticsEngine(struct soap*, const char*, int, const tt__AnalyticsEngine *, const char*);
SOAP_FMAC3 tt__AnalyticsEngine * SOAP_FMAC4 soap_in_tt__AnalyticsEngine(struct soap*, const char*, tt__AnalyticsEngine *, const char*);
SOAP_FMAC1 tt__AnalyticsEngine * SOAP_FMAC2 soap_instantiate_tt__AnalyticsEngine(struct soap*, int, const char*, const char*, size_t*);

inline tt__AnalyticsEngine * soap_new_tt__AnalyticsEngine(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__AnalyticsEngine(soap, n, NULL, NULL, NULL);
}

inline tt__AnalyticsEngine * soap_new_req_tt__AnalyticsEngine(
	struct soap *soap,
	tt__AnalyticsDeviceEngineConfiguration *AnalyticsEngineConfiguration,
	const std::string& Name1,
	int UseCount1,
	const std::string& token1)
{
	tt__AnalyticsEngine *_p = soap_new_tt__AnalyticsEngine(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AnalyticsEngine::AnalyticsEngineConfiguration = AnalyticsEngineConfiguration;
		_p->tt__ConfigurationEntity::Name = Name1;
		_p->tt__ConfigurationEntity::UseCount = UseCount1;
		_p->tt__ConfigurationEntity::token = token1;
	}
	return _p;
}

inline tt__AnalyticsEngine * soap_new_set_tt__AnalyticsEngine(
	struct soap *soap,
	tt__AnalyticsDeviceEngineConfiguration *AnalyticsEngineConfiguration,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	const std::string& Name1,
	int UseCount1,
	const std::string& token1,
	char *__item2)
{
	tt__AnalyticsEngine *_p = soap_new_tt__AnalyticsEngine(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AnalyticsEngine::AnalyticsEngineConfiguration = AnalyticsEngineConfiguration;
		_p->tt__AnalyticsEngine::__any = __any;
		_p->tt__AnalyticsEngine::__anyAttribute = __anyAttribute;
		_p->tt__ConfigurationEntity::Name = Name1;
		_p->tt__ConfigurationEntity::UseCount = UseCount1;
		_p->tt__ConfigurationEntity::token = token1;
		_p->xsd__anyType::__item = __item2;
	}
	return _p;
}

inline int soap_write_tt__AnalyticsEngine(struct soap *soap, tt__AnalyticsEngine const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AnalyticsEngine", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__AnalyticsEngine * SOAP_FMAC4 soap_get_tt__AnalyticsEngine(struct soap*, tt__AnalyticsEngine *, const char*, const char*);

inline int soap_read_tt__AnalyticsEngine(struct soap *soap, tt__AnalyticsEngine *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__AnalyticsEngine(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__ReplayConfiguration_DEFINED
#define SOAP_TYPE_tt__ReplayConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ReplayConfiguration(struct soap*, const char*, int, const tt__ReplayConfiguration *, const char*);
SOAP_FMAC3 tt__ReplayConfiguration * SOAP_FMAC4 soap_in_tt__ReplayConfiguration(struct soap*, const char*, tt__ReplayConfiguration *, const char*);
SOAP_FMAC1 tt__ReplayConfiguration * SOAP_FMAC2 soap_instantiate_tt__ReplayConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__ReplayConfiguration * soap_new_tt__ReplayConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ReplayConfiguration(soap, n, NULL, NULL, NULL);
}

inline tt__ReplayConfiguration * soap_new_req_tt__ReplayConfiguration(
	struct soap *soap,
	LONG64 SessionTimeout)
{
	tt__ReplayConfiguration *_p = soap_new_tt__ReplayConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ReplayConfiguration::SessionTimeout = SessionTimeout;
	}
	return _p;
}

inline tt__ReplayConfiguration * soap_new_set_tt__ReplayConfiguration(
	struct soap *soap,
	LONG64 SessionTimeout,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__ReplayConfiguration *_p = soap_new_tt__ReplayConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ReplayConfiguration::SessionTimeout = SessionTimeout;
		_p->tt__ReplayConfiguration::__any = __any;
		_p->tt__ReplayConfiguration::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__ReplayConfiguration(struct soap *soap, tt__ReplayConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ReplayConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__ReplayConfiguration * SOAP_FMAC4 soap_get_tt__ReplayConfiguration(struct soap*, tt__ReplayConfiguration *, const char*, const char*);

inline int soap_read_tt__ReplayConfiguration(struct soap *soap, tt__ReplayConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__ReplayConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__GetRecordingJobsResponseItem_DEFINED
#define SOAP_TYPE_tt__GetRecordingJobsResponseItem_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__GetRecordingJobsResponseItem(struct soap*, const char*, int, const tt__GetRecordingJobsResponseItem *, const char*);
SOAP_FMAC3 tt__GetRecordingJobsResponseItem * SOAP_FMAC4 soap_in_tt__GetRecordingJobsResponseItem(struct soap*, const char*, tt__GetRecordingJobsResponseItem *, const char*);
SOAP_FMAC1 tt__GetRecordingJobsResponseItem * SOAP_FMAC2 soap_instantiate_tt__GetRecordingJobsResponseItem(struct soap*, int, const char*, const char*, size_t*);

inline tt__GetRecordingJobsResponseItem * soap_new_tt__GetRecordingJobsResponseItem(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__GetRecordingJobsResponseItem(soap, n, NULL, NULL, NULL);
}

inline tt__GetRecordingJobsResponseItem * soap_new_req_tt__GetRecordingJobsResponseItem(
	struct soap *soap,
	const std::string& JobToken,
	tt__RecordingJobConfiguration *JobConfiguration)
{
	tt__GetRecordingJobsResponseItem *_p = soap_new_tt__GetRecordingJobsResponseItem(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__GetRecordingJobsResponseItem::JobToken = JobToken;
		_p->tt__GetRecordingJobsResponseItem::JobConfiguration = JobConfiguration;
	}
	return _p;
}

inline tt__GetRecordingJobsResponseItem * soap_new_set_tt__GetRecordingJobsResponseItem(
	struct soap *soap,
	const std::string& JobToken,
	tt__RecordingJobConfiguration *JobConfiguration,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__GetRecordingJobsResponseItem *_p = soap_new_tt__GetRecordingJobsResponseItem(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__GetRecordingJobsResponseItem::JobToken = JobToken;
		_p->tt__GetRecordingJobsResponseItem::JobConfiguration = JobConfiguration;
		_p->tt__GetRecordingJobsResponseItem::__any = __any;
		_p->tt__GetRecordingJobsResponseItem::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__GetRecordingJobsResponseItem(struct soap *soap, tt__GetRecordingJobsResponseItem const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:GetRecordingJobsResponseItem", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__GetRecordingJobsResponseItem * SOAP_FMAC4 soap_get_tt__GetRecordingJobsResponseItem(struct soap*, tt__GetRecordingJobsResponseItem *, const char*, const char*);

inline int soap_read_tt__GetRecordingJobsResponseItem(struct soap *soap, tt__GetRecordingJobsResponseItem *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__GetRecordingJobsResponseItem(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__RecordingJobStateTrack_DEFINED
#define SOAP_TYPE_tt__RecordingJobStateTrack_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RecordingJobStateTrack(struct soap*, const char*, int, const tt__RecordingJobStateTrack *, const char*);
SOAP_FMAC3 tt__RecordingJobStateTrack * SOAP_FMAC4 soap_in_tt__RecordingJobStateTrack(struct soap*, const char*, tt__RecordingJobStateTrack *, const char*);
SOAP_FMAC1 tt__RecordingJobStateTrack * SOAP_FMAC2 soap_instantiate_tt__RecordingJobStateTrack(struct soap*, int, const char*, const char*, size_t*);

inline tt__RecordingJobStateTrack * soap_new_tt__RecordingJobStateTrack(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__RecordingJobStateTrack(soap, n, NULL, NULL, NULL);
}

inline tt__RecordingJobStateTrack * soap_new_req_tt__RecordingJobStateTrack(
	struct soap *soap,
	const std::string& SourceTag,
	const std::string& Destination,
	const std::string& State)
{
	tt__RecordingJobStateTrack *_p = soap_new_tt__RecordingJobStateTrack(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__RecordingJobStateTrack::SourceTag = SourceTag;
		_p->tt__RecordingJobStateTrack::Destination = Destination;
		_p->tt__RecordingJobStateTrack::State = State;
	}
	return _p;
}

inline tt__RecordingJobStateTrack * soap_new_set_tt__RecordingJobStateTrack(
	struct soap *soap,
	const std::string& SourceTag,
	const std::string& Destination,
	std::string *Error,
	const std::string& State,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__RecordingJobStateTrack *_p = soap_new_tt__RecordingJobStateTrack(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__RecordingJobStateTrack::SourceTag = SourceTag;
		_p->tt__RecordingJobStateTrack::Destination = Destination;
		_p->tt__RecordingJobStateTrack::Error = Error;
		_p->tt__RecordingJobStateTrack::State = State;
		_p->tt__RecordingJobStateTrack::__any = __any;
		_p->tt__RecordingJobStateTrack::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__RecordingJobStateTrack(struct soap *soap, tt__RecordingJobStateTrack const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:RecordingJobStateTrack", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__RecordingJobStateTrack * SOAP_FMAC4 soap_get_tt__RecordingJobStateTrack(struct soap*, tt__RecordingJobStateTrack *, const char*, const char*);

inline int soap_read_tt__RecordingJobStateTrack(struct soap *soap, tt__RecordingJobStateTrack *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__RecordingJobStateTrack(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__RecordingJobStateTracks_DEFINED
#define SOAP_TYPE_tt__RecordingJobStateTracks_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RecordingJobStateTracks(struct soap*, const char*, int, const tt__RecordingJobStateTracks *, const char*);
SOAP_FMAC3 tt__RecordingJobStateTracks * SOAP_FMAC4 soap_in_tt__RecordingJobStateTracks(struct soap*, const char*, tt__RecordingJobStateTracks *, const char*);
SOAP_FMAC1 tt__RecordingJobStateTracks * SOAP_FMAC2 soap_instantiate_tt__RecordingJobStateTracks(struct soap*, int, const char*, const char*, size_t*);

inline tt__RecordingJobStateTracks * soap_new_tt__RecordingJobStateTracks(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__RecordingJobStateTracks(soap, n, NULL, NULL, NULL);
}

inline tt__RecordingJobStateTracks * soap_new_req_tt__RecordingJobStateTracks(
	struct soap *soap)
{
	tt__RecordingJobStateTracks *_p = soap_new_tt__RecordingJobStateTracks(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__RecordingJobStateTracks * soap_new_set_tt__RecordingJobStateTracks(
	struct soap *soap,
	const std::vector<tt__RecordingJobStateTrack *> & Track,
	char *__anyAttribute,
	char *__item1)
{
	tt__RecordingJobStateTracks *_p = soap_new_tt__RecordingJobStateTracks(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__RecordingJobStateTracks::Track = Track;
		_p->tt__RecordingJobStateTracks::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__RecordingJobStateTracks(struct soap *soap, tt__RecordingJobStateTracks const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:RecordingJobStateTracks", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__RecordingJobStateTracks * SOAP_FMAC4 soap_get_tt__RecordingJobStateTracks(struct soap*, tt__RecordingJobStateTracks *, const char*, const char*);

inline int soap_read_tt__RecordingJobStateTracks(struct soap *soap, tt__RecordingJobStateTracks *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__RecordingJobStateTracks(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__RecordingJobStateSource_DEFINED
#define SOAP_TYPE_tt__RecordingJobStateSource_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RecordingJobStateSource(struct soap*, const char*, int, const tt__RecordingJobStateSource *, const char*);
SOAP_FMAC3 tt__RecordingJobStateSource * SOAP_FMAC4 soap_in_tt__RecordingJobStateSource(struct soap*, const char*, tt__RecordingJobStateSource *, const char*);
SOAP_FMAC1 tt__RecordingJobStateSource * SOAP_FMAC2 soap_instantiate_tt__RecordingJobStateSource(struct soap*, int, const char*, const char*, size_t*);

inline tt__RecordingJobStateSource * soap_new_tt__RecordingJobStateSource(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__RecordingJobStateSource(soap, n, NULL, NULL, NULL);
}

inline tt__RecordingJobStateSource * soap_new_req_tt__RecordingJobStateSource(
	struct soap *soap,
	tt__SourceReference *SourceToken,
	const std::string& State,
	tt__RecordingJobStateTracks *Tracks)
{
	tt__RecordingJobStateSource *_p = soap_new_tt__RecordingJobStateSource(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__RecordingJobStateSource::SourceToken = SourceToken;
		_p->tt__RecordingJobStateSource::State = State;
		_p->tt__RecordingJobStateSource::Tracks = Tracks;
	}
	return _p;
}

inline tt__RecordingJobStateSource * soap_new_set_tt__RecordingJobStateSource(
	struct soap *soap,
	tt__SourceReference *SourceToken,
	const std::string& State,
	tt__RecordingJobStateTracks *Tracks,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__RecordingJobStateSource *_p = soap_new_tt__RecordingJobStateSource(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__RecordingJobStateSource::SourceToken = SourceToken;
		_p->tt__RecordingJobStateSource::State = State;
		_p->tt__RecordingJobStateSource::Tracks = Tracks;
		_p->tt__RecordingJobStateSource::__any = __any;
		_p->tt__RecordingJobStateSource::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__RecordingJobStateSource(struct soap *soap, tt__RecordingJobStateSource const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:RecordingJobStateSource", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__RecordingJobStateSource * SOAP_FMAC4 soap_get_tt__RecordingJobStateSource(struct soap*, tt__RecordingJobStateSource *, const char*, const char*);

inline int soap_read_tt__RecordingJobStateSource(struct soap *soap, tt__RecordingJobStateSource *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__RecordingJobStateSource(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__RecordingJobStateInformationExtension_DEFINED
#define SOAP_TYPE_tt__RecordingJobStateInformationExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RecordingJobStateInformationExtension(struct soap*, const char*, int, const tt__RecordingJobStateInformationExtension *, const char*);
SOAP_FMAC3 tt__RecordingJobStateInformationExtension * SOAP_FMAC4 soap_in_tt__RecordingJobStateInformationExtension(struct soap*, const char*, tt__RecordingJobStateInformationExtension *, const char*);
SOAP_FMAC1 tt__RecordingJobStateInformationExtension * SOAP_FMAC2 soap_instantiate_tt__RecordingJobStateInformationExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__RecordingJobStateInformationExtension * soap_new_tt__RecordingJobStateInformationExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__RecordingJobStateInformationExtension(soap, n, NULL, NULL, NULL);
}

inline tt__RecordingJobStateInformationExtension * soap_new_req_tt__RecordingJobStateInformationExtension(
	struct soap *soap)
{
	tt__RecordingJobStateInformationExtension *_p = soap_new_tt__RecordingJobStateInformationExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__RecordingJobStateInformationExtension * soap_new_set_tt__RecordingJobStateInformationExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__RecordingJobStateInformationExtension *_p = soap_new_tt__RecordingJobStateInformationExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__RecordingJobStateInformationExtension::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__RecordingJobStateInformationExtension(struct soap *soap, tt__RecordingJobStateInformationExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:RecordingJobStateInformationExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__RecordingJobStateInformationExtension * SOAP_FMAC4 soap_get_tt__RecordingJobStateInformationExtension(struct soap*, tt__RecordingJobStateInformationExtension *, const char*, const char*);

inline int soap_read_tt__RecordingJobStateInformationExtension(struct soap *soap, tt__RecordingJobStateInformationExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__RecordingJobStateInformationExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__RecordingJobStateInformation_DEFINED
#define SOAP_TYPE_tt__RecordingJobStateInformation_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RecordingJobStateInformation(struct soap*, const char*, int, const tt__RecordingJobStateInformation *, const char*);
SOAP_FMAC3 tt__RecordingJobStateInformation * SOAP_FMAC4 soap_in_tt__RecordingJobStateInformation(struct soap*, const char*, tt__RecordingJobStateInformation *, const char*);
SOAP_FMAC1 tt__RecordingJobStateInformation * SOAP_FMAC2 soap_instantiate_tt__RecordingJobStateInformation(struct soap*, int, const char*, const char*, size_t*);

inline tt__RecordingJobStateInformation * soap_new_tt__RecordingJobStateInformation(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__RecordingJobStateInformation(soap, n, NULL, NULL, NULL);
}

inline tt__RecordingJobStateInformation * soap_new_req_tt__RecordingJobStateInformation(
	struct soap *soap,
	const std::string& RecordingToken,
	const std::string& State)
{
	tt__RecordingJobStateInformation *_p = soap_new_tt__RecordingJobStateInformation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__RecordingJobStateInformation::RecordingToken = RecordingToken;
		_p->tt__RecordingJobStateInformation::State = State;
	}
	return _p;
}

inline tt__RecordingJobStateInformation * soap_new_set_tt__RecordingJobStateInformation(
	struct soap *soap,
	const std::string& RecordingToken,
	const std::string& State,
	const std::vector<tt__RecordingJobStateSource *> & Sources,
	tt__RecordingJobStateInformationExtension *Extension,
	char *__anyAttribute,
	char *__item1)
{
	tt__RecordingJobStateInformation *_p = soap_new_tt__RecordingJobStateInformation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__RecordingJobStateInformation::RecordingToken = RecordingToken;
		_p->tt__RecordingJobStateInformation::State = State;
		_p->tt__RecordingJobStateInformation::Sources = Sources;
		_p->tt__RecordingJobStateInformation::Extension = Extension;
		_p->tt__RecordingJobStateInformation::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__RecordingJobStateInformation(struct soap *soap, tt__RecordingJobStateInformation const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:RecordingJobStateInformation", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__RecordingJobStateInformation * SOAP_FMAC4 soap_get_tt__RecordingJobStateInformation(struct soap*, tt__RecordingJobStateInformation *, const char*, const char*);

inline int soap_read_tt__RecordingJobStateInformation(struct soap *soap, tt__RecordingJobStateInformation *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__RecordingJobStateInformation(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__RecordingJobTrack_DEFINED
#define SOAP_TYPE_tt__RecordingJobTrack_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RecordingJobTrack(struct soap*, const char*, int, const tt__RecordingJobTrack *, const char*);
SOAP_FMAC3 tt__RecordingJobTrack * SOAP_FMAC4 soap_in_tt__RecordingJobTrack(struct soap*, const char*, tt__RecordingJobTrack *, const char*);
SOAP_FMAC1 tt__RecordingJobTrack * SOAP_FMAC2 soap_instantiate_tt__RecordingJobTrack(struct soap*, int, const char*, const char*, size_t*);

inline tt__RecordingJobTrack * soap_new_tt__RecordingJobTrack(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__RecordingJobTrack(soap, n, NULL, NULL, NULL);
}

inline tt__RecordingJobTrack * soap_new_req_tt__RecordingJobTrack(
	struct soap *soap,
	const std::string& SourceTag,
	const std::string& Destination)
{
	tt__RecordingJobTrack *_p = soap_new_tt__RecordingJobTrack(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__RecordingJobTrack::SourceTag = SourceTag;
		_p->tt__RecordingJobTrack::Destination = Destination;
	}
	return _p;
}

inline tt__RecordingJobTrack * soap_new_set_tt__RecordingJobTrack(
	struct soap *soap,
	const std::string& SourceTag,
	const std::string& Destination,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__RecordingJobTrack *_p = soap_new_tt__RecordingJobTrack(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__RecordingJobTrack::SourceTag = SourceTag;
		_p->tt__RecordingJobTrack::Destination = Destination;
		_p->tt__RecordingJobTrack::__any = __any;
		_p->tt__RecordingJobTrack::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__RecordingJobTrack(struct soap *soap, tt__RecordingJobTrack const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:RecordingJobTrack", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__RecordingJobTrack * SOAP_FMAC4 soap_get_tt__RecordingJobTrack(struct soap*, tt__RecordingJobTrack *, const char*, const char*);

inline int soap_read_tt__RecordingJobTrack(struct soap *soap, tt__RecordingJobTrack *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__RecordingJobTrack(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__RecordingJobSourceExtension_DEFINED
#define SOAP_TYPE_tt__RecordingJobSourceExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RecordingJobSourceExtension(struct soap*, const char*, int, const tt__RecordingJobSourceExtension *, const char*);
SOAP_FMAC3 tt__RecordingJobSourceExtension * SOAP_FMAC4 soap_in_tt__RecordingJobSourceExtension(struct soap*, const char*, tt__RecordingJobSourceExtension *, const char*);
SOAP_FMAC1 tt__RecordingJobSourceExtension * SOAP_FMAC2 soap_instantiate_tt__RecordingJobSourceExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__RecordingJobSourceExtension * soap_new_tt__RecordingJobSourceExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__RecordingJobSourceExtension(soap, n, NULL, NULL, NULL);
}

inline tt__RecordingJobSourceExtension * soap_new_req_tt__RecordingJobSourceExtension(
	struct soap *soap)
{
	tt__RecordingJobSourceExtension *_p = soap_new_tt__RecordingJobSourceExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__RecordingJobSourceExtension * soap_new_set_tt__RecordingJobSourceExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__RecordingJobSourceExtension *_p = soap_new_tt__RecordingJobSourceExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__RecordingJobSourceExtension::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__RecordingJobSourceExtension(struct soap *soap, tt__RecordingJobSourceExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:RecordingJobSourceExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__RecordingJobSourceExtension * SOAP_FMAC4 soap_get_tt__RecordingJobSourceExtension(struct soap*, tt__RecordingJobSourceExtension *, const char*, const char*);

inline int soap_read_tt__RecordingJobSourceExtension(struct soap *soap, tt__RecordingJobSourceExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__RecordingJobSourceExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__RecordingJobSource_DEFINED
#define SOAP_TYPE_tt__RecordingJobSource_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RecordingJobSource(struct soap*, const char*, int, const tt__RecordingJobSource *, const char*);
SOAP_FMAC3 tt__RecordingJobSource * SOAP_FMAC4 soap_in_tt__RecordingJobSource(struct soap*, const char*, tt__RecordingJobSource *, const char*);
SOAP_FMAC1 tt__RecordingJobSource * SOAP_FMAC2 soap_instantiate_tt__RecordingJobSource(struct soap*, int, const char*, const char*, size_t*);

inline tt__RecordingJobSource * soap_new_tt__RecordingJobSource(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__RecordingJobSource(soap, n, NULL, NULL, NULL);
}

inline tt__RecordingJobSource * soap_new_req_tt__RecordingJobSource(
	struct soap *soap)
{
	tt__RecordingJobSource *_p = soap_new_tt__RecordingJobSource(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__RecordingJobSource * soap_new_set_tt__RecordingJobSource(
	struct soap *soap,
	tt__SourceReference *SourceToken,
	bool *AutoCreateReceiver,
	const std::vector<tt__RecordingJobTrack *> & Tracks,
	tt__RecordingJobSourceExtension *Extension,
	char *__anyAttribute,
	char *__item1)
{
	tt__RecordingJobSource *_p = soap_new_tt__RecordingJobSource(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__RecordingJobSource::SourceToken = SourceToken;
		_p->tt__RecordingJobSource::AutoCreateReceiver = AutoCreateReceiver;
		_p->tt__RecordingJobSource::Tracks = Tracks;
		_p->tt__RecordingJobSource::Extension = Extension;
		_p->tt__RecordingJobSource::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__RecordingJobSource(struct soap *soap, tt__RecordingJobSource const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:RecordingJobSource", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__RecordingJobSource * SOAP_FMAC4 soap_get_tt__RecordingJobSource(struct soap*, tt__RecordingJobSource *, const char*, const char*);

inline int soap_read_tt__RecordingJobSource(struct soap *soap, tt__RecordingJobSource *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__RecordingJobSource(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__RecordingJobConfigurationExtension_DEFINED
#define SOAP_TYPE_tt__RecordingJobConfigurationExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RecordingJobConfigurationExtension(struct soap*, const char*, int, const tt__RecordingJobConfigurationExtension *, const char*);
SOAP_FMAC3 tt__RecordingJobConfigurationExtension * SOAP_FMAC4 soap_in_tt__RecordingJobConfigurationExtension(struct soap*, const char*, tt__RecordingJobConfigurationExtension *, const char*);
SOAP_FMAC1 tt__RecordingJobConfigurationExtension * SOAP_FMAC2 soap_instantiate_tt__RecordingJobConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__RecordingJobConfigurationExtension * soap_new_tt__RecordingJobConfigurationExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__RecordingJobConfigurationExtension(soap, n, NULL, NULL, NULL);
}

inline tt__RecordingJobConfigurationExtension * soap_new_req_tt__RecordingJobConfigurationExtension(
	struct soap *soap)
{
	tt__RecordingJobConfigurationExtension *_p = soap_new_tt__RecordingJobConfigurationExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__RecordingJobConfigurationExtension * soap_new_set_tt__RecordingJobConfigurationExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__RecordingJobConfigurationExtension *_p = soap_new_tt__RecordingJobConfigurationExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__RecordingJobConfigurationExtension::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__RecordingJobConfigurationExtension(struct soap *soap, tt__RecordingJobConfigurationExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:RecordingJobConfigurationExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__RecordingJobConfigurationExtension * SOAP_FMAC4 soap_get_tt__RecordingJobConfigurationExtension(struct soap*, tt__RecordingJobConfigurationExtension *, const char*, const char*);

inline int soap_read_tt__RecordingJobConfigurationExtension(struct soap *soap, tt__RecordingJobConfigurationExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__RecordingJobConfigurationExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__RecordingJobConfiguration_DEFINED
#define SOAP_TYPE_tt__RecordingJobConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RecordingJobConfiguration(struct soap*, const char*, int, const tt__RecordingJobConfiguration *, const char*);
SOAP_FMAC3 tt__RecordingJobConfiguration * SOAP_FMAC4 soap_in_tt__RecordingJobConfiguration(struct soap*, const char*, tt__RecordingJobConfiguration *, const char*);
SOAP_FMAC1 tt__RecordingJobConfiguration * SOAP_FMAC2 soap_instantiate_tt__RecordingJobConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__RecordingJobConfiguration * soap_new_tt__RecordingJobConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__RecordingJobConfiguration(soap, n, NULL, NULL, NULL);
}

inline tt__RecordingJobConfiguration * soap_new_req_tt__RecordingJobConfiguration(
	struct soap *soap,
	const std::string& RecordingToken,
	const std::string& Mode,
	int Priority)
{
	tt__RecordingJobConfiguration *_p = soap_new_tt__RecordingJobConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__RecordingJobConfiguration::RecordingToken = RecordingToken;
		_p->tt__RecordingJobConfiguration::Mode = Mode;
		_p->tt__RecordingJobConfiguration::Priority = Priority;
	}
	return _p;
}

inline tt__RecordingJobConfiguration * soap_new_set_tt__RecordingJobConfiguration(
	struct soap *soap,
	const std::string& RecordingToken,
	const std::string& Mode,
	int Priority,
	const std::vector<tt__RecordingJobSource *> & Source,
	tt__RecordingJobConfigurationExtension *Extension,
	char *__anyAttribute,
	char *__item1)
{
	tt__RecordingJobConfiguration *_p = soap_new_tt__RecordingJobConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__RecordingJobConfiguration::RecordingToken = RecordingToken;
		_p->tt__RecordingJobConfiguration::Mode = Mode;
		_p->tt__RecordingJobConfiguration::Priority = Priority;
		_p->tt__RecordingJobConfiguration::Source = Source;
		_p->tt__RecordingJobConfiguration::Extension = Extension;
		_p->tt__RecordingJobConfiguration::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__RecordingJobConfiguration(struct soap *soap, tt__RecordingJobConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:RecordingJobConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__RecordingJobConfiguration * SOAP_FMAC4 soap_get_tt__RecordingJobConfiguration(struct soap*, tt__RecordingJobConfiguration *, const char*, const char*);

inline int soap_read_tt__RecordingJobConfiguration(struct soap *soap, tt__RecordingJobConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__RecordingJobConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__GetTracksResponseItem_DEFINED
#define SOAP_TYPE_tt__GetTracksResponseItem_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__GetTracksResponseItem(struct soap*, const char*, int, const tt__GetTracksResponseItem *, const char*);
SOAP_FMAC3 tt__GetTracksResponseItem * SOAP_FMAC4 soap_in_tt__GetTracksResponseItem(struct soap*, const char*, tt__GetTracksResponseItem *, const char*);
SOAP_FMAC1 tt__GetTracksResponseItem * SOAP_FMAC2 soap_instantiate_tt__GetTracksResponseItem(struct soap*, int, const char*, const char*, size_t*);

inline tt__GetTracksResponseItem * soap_new_tt__GetTracksResponseItem(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__GetTracksResponseItem(soap, n, NULL, NULL, NULL);
}

inline tt__GetTracksResponseItem * soap_new_req_tt__GetTracksResponseItem(
	struct soap *soap,
	const std::string& TrackToken,
	tt__TrackConfiguration *Configuration)
{
	tt__GetTracksResponseItem *_p = soap_new_tt__GetTracksResponseItem(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__GetTracksResponseItem::TrackToken = TrackToken;
		_p->tt__GetTracksResponseItem::Configuration = Configuration;
	}
	return _p;
}

inline tt__GetTracksResponseItem * soap_new_set_tt__GetTracksResponseItem(
	struct soap *soap,
	const std::string& TrackToken,
	tt__TrackConfiguration *Configuration,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__GetTracksResponseItem *_p = soap_new_tt__GetTracksResponseItem(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__GetTracksResponseItem::TrackToken = TrackToken;
		_p->tt__GetTracksResponseItem::Configuration = Configuration;
		_p->tt__GetTracksResponseItem::__any = __any;
		_p->tt__GetTracksResponseItem::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__GetTracksResponseItem(struct soap *soap, tt__GetTracksResponseItem const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:GetTracksResponseItem", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__GetTracksResponseItem * SOAP_FMAC4 soap_get_tt__GetTracksResponseItem(struct soap*, tt__GetTracksResponseItem *, const char*, const char*);

inline int soap_read_tt__GetTracksResponseItem(struct soap *soap, tt__GetTracksResponseItem *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__GetTracksResponseItem(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__GetTracksResponseList_DEFINED
#define SOAP_TYPE_tt__GetTracksResponseList_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__GetTracksResponseList(struct soap*, const char*, int, const tt__GetTracksResponseList *, const char*);
SOAP_FMAC3 tt__GetTracksResponseList * SOAP_FMAC4 soap_in_tt__GetTracksResponseList(struct soap*, const char*, tt__GetTracksResponseList *, const char*);
SOAP_FMAC1 tt__GetTracksResponseList * SOAP_FMAC2 soap_instantiate_tt__GetTracksResponseList(struct soap*, int, const char*, const char*, size_t*);

inline tt__GetTracksResponseList * soap_new_tt__GetTracksResponseList(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__GetTracksResponseList(soap, n, NULL, NULL, NULL);
}

inline tt__GetTracksResponseList * soap_new_req_tt__GetTracksResponseList(
	struct soap *soap)
{
	tt__GetTracksResponseList *_p = soap_new_tt__GetTracksResponseList(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__GetTracksResponseList * soap_new_set_tt__GetTracksResponseList(
	struct soap *soap,
	const std::vector<tt__GetTracksResponseItem *> & Track,
	char *__anyAttribute,
	char *__item1)
{
	tt__GetTracksResponseList *_p = soap_new_tt__GetTracksResponseList(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__GetTracksResponseList::Track = Track;
		_p->tt__GetTracksResponseList::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__GetTracksResponseList(struct soap *soap, tt__GetTracksResponseList const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:GetTracksResponseList", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__GetTracksResponseList * SOAP_FMAC4 soap_get_tt__GetTracksResponseList(struct soap*, tt__GetTracksResponseList *, const char*, const char*);

inline int soap_read_tt__GetTracksResponseList(struct soap *soap, tt__GetTracksResponseList *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__GetTracksResponseList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__GetRecordingsResponseItem_DEFINED
#define SOAP_TYPE_tt__GetRecordingsResponseItem_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__GetRecordingsResponseItem(struct soap*, const char*, int, const tt__GetRecordingsResponseItem *, const char*);
SOAP_FMAC3 tt__GetRecordingsResponseItem * SOAP_FMAC4 soap_in_tt__GetRecordingsResponseItem(struct soap*, const char*, tt__GetRecordingsResponseItem *, const char*);
SOAP_FMAC1 tt__GetRecordingsResponseItem * SOAP_FMAC2 soap_instantiate_tt__GetRecordingsResponseItem(struct soap*, int, const char*, const char*, size_t*);

inline tt__GetRecordingsResponseItem * soap_new_tt__GetRecordingsResponseItem(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__GetRecordingsResponseItem(soap, n, NULL, NULL, NULL);
}

inline tt__GetRecordingsResponseItem * soap_new_req_tt__GetRecordingsResponseItem(
	struct soap *soap,
	const std::string& RecordingToken,
	tt__RecordingConfiguration *Configuration,
	tt__GetTracksResponseList *Tracks)
{
	tt__GetRecordingsResponseItem *_p = soap_new_tt__GetRecordingsResponseItem(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__GetRecordingsResponseItem::RecordingToken = RecordingToken;
		_p->tt__GetRecordingsResponseItem::Configuration = Configuration;
		_p->tt__GetRecordingsResponseItem::Tracks = Tracks;
	}
	return _p;
}

inline tt__GetRecordingsResponseItem * soap_new_set_tt__GetRecordingsResponseItem(
	struct soap *soap,
	const std::string& RecordingToken,
	tt__RecordingConfiguration *Configuration,
	tt__GetTracksResponseList *Tracks,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__GetRecordingsResponseItem *_p = soap_new_tt__GetRecordingsResponseItem(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__GetRecordingsResponseItem::RecordingToken = RecordingToken;
		_p->tt__GetRecordingsResponseItem::Configuration = Configuration;
		_p->tt__GetRecordingsResponseItem::Tracks = Tracks;
		_p->tt__GetRecordingsResponseItem::__any = __any;
		_p->tt__GetRecordingsResponseItem::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__GetRecordingsResponseItem(struct soap *soap, tt__GetRecordingsResponseItem const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:GetRecordingsResponseItem", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__GetRecordingsResponseItem * SOAP_FMAC4 soap_get_tt__GetRecordingsResponseItem(struct soap*, tt__GetRecordingsResponseItem *, const char*, const char*);

inline int soap_read_tt__GetRecordingsResponseItem(struct soap *soap, tt__GetRecordingsResponseItem *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__GetRecordingsResponseItem(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__TrackConfiguration_DEFINED
#define SOAP_TYPE_tt__TrackConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__TrackConfiguration(struct soap*, const char*, int, const tt__TrackConfiguration *, const char*);
SOAP_FMAC3 tt__TrackConfiguration * SOAP_FMAC4 soap_in_tt__TrackConfiguration(struct soap*, const char*, tt__TrackConfiguration *, const char*);
SOAP_FMAC1 tt__TrackConfiguration * SOAP_FMAC2 soap_instantiate_tt__TrackConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__TrackConfiguration * soap_new_tt__TrackConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__TrackConfiguration(soap, n, NULL, NULL, NULL);
}

inline tt__TrackConfiguration * soap_new_req_tt__TrackConfiguration(
	struct soap *soap,
	enum tt__TrackType TrackType,
	const std::string& Description)
{
	tt__TrackConfiguration *_p = soap_new_tt__TrackConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__TrackConfiguration::TrackType = TrackType;
		_p->tt__TrackConfiguration::Description = Description;
	}
	return _p;
}

inline tt__TrackConfiguration * soap_new_set_tt__TrackConfiguration(
	struct soap *soap,
	enum tt__TrackType TrackType,
	const std::string& Description,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__TrackConfiguration *_p = soap_new_tt__TrackConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__TrackConfiguration::TrackType = TrackType;
		_p->tt__TrackConfiguration::Description = Description;
		_p->tt__TrackConfiguration::__any = __any;
		_p->tt__TrackConfiguration::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__TrackConfiguration(struct soap *soap, tt__TrackConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:TrackConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__TrackConfiguration * SOAP_FMAC4 soap_get_tt__TrackConfiguration(struct soap*, tt__TrackConfiguration *, const char*, const char*);

inline int soap_read_tt__TrackConfiguration(struct soap *soap, tt__TrackConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__TrackConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__RecordingConfiguration_DEFINED
#define SOAP_TYPE_tt__RecordingConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RecordingConfiguration(struct soap*, const char*, int, const tt__RecordingConfiguration *, const char*);
SOAP_FMAC3 tt__RecordingConfiguration * SOAP_FMAC4 soap_in_tt__RecordingConfiguration(struct soap*, const char*, tt__RecordingConfiguration *, const char*);
SOAP_FMAC1 tt__RecordingConfiguration * SOAP_FMAC2 soap_instantiate_tt__RecordingConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__RecordingConfiguration * soap_new_tt__RecordingConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__RecordingConfiguration(soap, n, NULL, NULL, NULL);
}

inline tt__RecordingConfiguration * soap_new_req_tt__RecordingConfiguration(
	struct soap *soap,
	tt__RecordingSourceInformation *Source,
	const std::string& Content,
	LONG64 MaximumRetentionTime)
{
	tt__RecordingConfiguration *_p = soap_new_tt__RecordingConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__RecordingConfiguration::Source = Source;
		_p->tt__RecordingConfiguration::Content = Content;
		_p->tt__RecordingConfiguration::MaximumRetentionTime = MaximumRetentionTime;
	}
	return _p;
}

inline tt__RecordingConfiguration * soap_new_set_tt__RecordingConfiguration(
	struct soap *soap,
	tt__RecordingSourceInformation *Source,
	const std::string& Content,
	LONG64 MaximumRetentionTime,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__RecordingConfiguration *_p = soap_new_tt__RecordingConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__RecordingConfiguration::Source = Source;
		_p->tt__RecordingConfiguration::Content = Content;
		_p->tt__RecordingConfiguration::MaximumRetentionTime = MaximumRetentionTime;
		_p->tt__RecordingConfiguration::__any = __any;
		_p->tt__RecordingConfiguration::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__RecordingConfiguration(struct soap *soap, tt__RecordingConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:RecordingConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__RecordingConfiguration * SOAP_FMAC4 soap_get_tt__RecordingConfiguration(struct soap*, tt__RecordingConfiguration *, const char*, const char*);

inline int soap_read_tt__RecordingConfiguration(struct soap *soap, tt__RecordingConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__RecordingConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__MetadataAttributes_DEFINED
#define SOAP_TYPE_tt__MetadataAttributes_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__MetadataAttributes(struct soap*, const char*, int, const tt__MetadataAttributes *, const char*);
SOAP_FMAC3 tt__MetadataAttributes * SOAP_FMAC4 soap_in_tt__MetadataAttributes(struct soap*, const char*, tt__MetadataAttributes *, const char*);
SOAP_FMAC1 tt__MetadataAttributes * SOAP_FMAC2 soap_instantiate_tt__MetadataAttributes(struct soap*, int, const char*, const char*, size_t*);

inline tt__MetadataAttributes * soap_new_tt__MetadataAttributes(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__MetadataAttributes(soap, n, NULL, NULL, NULL);
}

inline tt__MetadataAttributes * soap_new_req_tt__MetadataAttributes(
	struct soap *soap,
	bool CanContainPTZ,
	bool CanContainAnalytics,
	bool CanContainNotifications)
{
	tt__MetadataAttributes *_p = soap_new_tt__MetadataAttributes(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__MetadataAttributes::CanContainPTZ = CanContainPTZ;
		_p->tt__MetadataAttributes::CanContainAnalytics = CanContainAnalytics;
		_p->tt__MetadataAttributes::CanContainNotifications = CanContainNotifications;
	}
	return _p;
}

inline tt__MetadataAttributes * soap_new_set_tt__MetadataAttributes(
	struct soap *soap,
	bool CanContainPTZ,
	bool CanContainAnalytics,
	bool CanContainNotifications,
	const std::vector<char *> & __any,
	std::string *PtzSpaces,
	char *__anyAttribute,
	char *__item1)
{
	tt__MetadataAttributes *_p = soap_new_tt__MetadataAttributes(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__MetadataAttributes::CanContainPTZ = CanContainPTZ;
		_p->tt__MetadataAttributes::CanContainAnalytics = CanContainAnalytics;
		_p->tt__MetadataAttributes::CanContainNotifications = CanContainNotifications;
		_p->tt__MetadataAttributes::__any = __any;
		_p->tt__MetadataAttributes::PtzSpaces = PtzSpaces;
		_p->tt__MetadataAttributes::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__MetadataAttributes(struct soap *soap, tt__MetadataAttributes const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:MetadataAttributes", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__MetadataAttributes * SOAP_FMAC4 soap_get_tt__MetadataAttributes(struct soap*, tt__MetadataAttributes *, const char*, const char*);

inline int soap_read_tt__MetadataAttributes(struct soap *soap, tt__MetadataAttributes *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__MetadataAttributes(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__AudioAttributes_DEFINED
#define SOAP_TYPE_tt__AudioAttributes_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AudioAttributes(struct soap*, const char*, int, const tt__AudioAttributes *, const char*);
SOAP_FMAC3 tt__AudioAttributes * SOAP_FMAC4 soap_in_tt__AudioAttributes(struct soap*, const char*, tt__AudioAttributes *, const char*);
SOAP_FMAC1 tt__AudioAttributes * SOAP_FMAC2 soap_instantiate_tt__AudioAttributes(struct soap*, int, const char*, const char*, size_t*);

inline tt__AudioAttributes * soap_new_tt__AudioAttributes(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__AudioAttributes(soap, n, NULL, NULL, NULL);
}

inline tt__AudioAttributes * soap_new_req_tt__AudioAttributes(
	struct soap *soap,
	enum tt__AudioEncoding Encoding,
	int Samplerate)
{
	tt__AudioAttributes *_p = soap_new_tt__AudioAttributes(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AudioAttributes::Encoding = Encoding;
		_p->tt__AudioAttributes::Samplerate = Samplerate;
	}
	return _p;
}

inline tt__AudioAttributes * soap_new_set_tt__AudioAttributes(
	struct soap *soap,
	int *Bitrate,
	enum tt__AudioEncoding Encoding,
	int Samplerate,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__AudioAttributes *_p = soap_new_tt__AudioAttributes(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AudioAttributes::Bitrate = Bitrate;
		_p->tt__AudioAttributes::Encoding = Encoding;
		_p->tt__AudioAttributes::Samplerate = Samplerate;
		_p->tt__AudioAttributes::__any = __any;
		_p->tt__AudioAttributes::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__AudioAttributes(struct soap *soap, tt__AudioAttributes const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AudioAttributes", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__AudioAttributes * SOAP_FMAC4 soap_get_tt__AudioAttributes(struct soap*, tt__AudioAttributes *, const char*, const char*);

inline int soap_read_tt__AudioAttributes(struct soap *soap, tt__AudioAttributes *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__AudioAttributes(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__VideoAttributes_DEFINED
#define SOAP_TYPE_tt__VideoAttributes_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__VideoAttributes(struct soap*, const char*, int, const tt__VideoAttributes *, const char*);
SOAP_FMAC3 tt__VideoAttributes * SOAP_FMAC4 soap_in_tt__VideoAttributes(struct soap*, const char*, tt__VideoAttributes *, const char*);
SOAP_FMAC1 tt__VideoAttributes * SOAP_FMAC2 soap_instantiate_tt__VideoAttributes(struct soap*, int, const char*, const char*, size_t*);

inline tt__VideoAttributes * soap_new_tt__VideoAttributes(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__VideoAttributes(soap, n, NULL, NULL, NULL);
}

inline tt__VideoAttributes * soap_new_req_tt__VideoAttributes(
	struct soap *soap,
	int Width,
	int Height,
	enum tt__VideoEncoding Encoding,
	float Framerate)
{
	tt__VideoAttributes *_p = soap_new_tt__VideoAttributes(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__VideoAttributes::Width = Width;
		_p->tt__VideoAttributes::Height = Height;
		_p->tt__VideoAttributes::Encoding = Encoding;
		_p->tt__VideoAttributes::Framerate = Framerate;
	}
	return _p;
}

inline tt__VideoAttributes * soap_new_set_tt__VideoAttributes(
	struct soap *soap,
	int *Bitrate,
	int Width,
	int Height,
	enum tt__VideoEncoding Encoding,
	float Framerate,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__VideoAttributes *_p = soap_new_tt__VideoAttributes(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__VideoAttributes::Bitrate = Bitrate;
		_p->tt__VideoAttributes::Width = Width;
		_p->tt__VideoAttributes::Height = Height;
		_p->tt__VideoAttributes::Encoding = Encoding;
		_p->tt__VideoAttributes::Framerate = Framerate;
		_p->tt__VideoAttributes::__any = __any;
		_p->tt__VideoAttributes::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__VideoAttributes(struct soap *soap, tt__VideoAttributes const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:VideoAttributes", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__VideoAttributes * SOAP_FMAC4 soap_get_tt__VideoAttributes(struct soap*, tt__VideoAttributes *, const char*, const char*);

inline int soap_read_tt__VideoAttributes(struct soap *soap, tt__VideoAttributes *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__VideoAttributes(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__TrackAttributesExtension_DEFINED
#define SOAP_TYPE_tt__TrackAttributesExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__TrackAttributesExtension(struct soap*, const char*, int, const tt__TrackAttributesExtension *, const char*);
SOAP_FMAC3 tt__TrackAttributesExtension * SOAP_FMAC4 soap_in_tt__TrackAttributesExtension(struct soap*, const char*, tt__TrackAttributesExtension *, const char*);
SOAP_FMAC1 tt__TrackAttributesExtension * SOAP_FMAC2 soap_instantiate_tt__TrackAttributesExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__TrackAttributesExtension * soap_new_tt__TrackAttributesExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__TrackAttributesExtension(soap, n, NULL, NULL, NULL);
}

inline tt__TrackAttributesExtension * soap_new_req_tt__TrackAttributesExtension(
	struct soap *soap)
{
	tt__TrackAttributesExtension *_p = soap_new_tt__TrackAttributesExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__TrackAttributesExtension * soap_new_set_tt__TrackAttributesExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__TrackAttributesExtension *_p = soap_new_tt__TrackAttributesExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__TrackAttributesExtension::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__TrackAttributesExtension(struct soap *soap, tt__TrackAttributesExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:TrackAttributesExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__TrackAttributesExtension * SOAP_FMAC4 soap_get_tt__TrackAttributesExtension(struct soap*, tt__TrackAttributesExtension *, const char*, const char*);

inline int soap_read_tt__TrackAttributesExtension(struct soap *soap, tt__TrackAttributesExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__TrackAttributesExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__TrackAttributes_DEFINED
#define SOAP_TYPE_tt__TrackAttributes_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__TrackAttributes(struct soap*, const char*, int, const tt__TrackAttributes *, const char*);
SOAP_FMAC3 tt__TrackAttributes * SOAP_FMAC4 soap_in_tt__TrackAttributes(struct soap*, const char*, tt__TrackAttributes *, const char*);
SOAP_FMAC1 tt__TrackAttributes * SOAP_FMAC2 soap_instantiate_tt__TrackAttributes(struct soap*, int, const char*, const char*, size_t*);

inline tt__TrackAttributes * soap_new_tt__TrackAttributes(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__TrackAttributes(soap, n, NULL, NULL, NULL);
}

inline tt__TrackAttributes * soap_new_req_tt__TrackAttributes(
	struct soap *soap,
	tt__TrackInformation *TrackInformation)
{
	tt__TrackAttributes *_p = soap_new_tt__TrackAttributes(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__TrackAttributes::TrackInformation = TrackInformation;
	}
	return _p;
}

inline tt__TrackAttributes * soap_new_set_tt__TrackAttributes(
	struct soap *soap,
	tt__TrackInformation *TrackInformation,
	tt__VideoAttributes *VideoAttributes,
	tt__AudioAttributes *AudioAttributes,
	tt__MetadataAttributes *MetadataAttributes,
	tt__TrackAttributesExtension *Extension,
	char *__anyAttribute,
	char *__item1)
{
	tt__TrackAttributes *_p = soap_new_tt__TrackAttributes(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__TrackAttributes::TrackInformation = TrackInformation;
		_p->tt__TrackAttributes::VideoAttributes = VideoAttributes;
		_p->tt__TrackAttributes::AudioAttributes = AudioAttributes;
		_p->tt__TrackAttributes::MetadataAttributes = MetadataAttributes;
		_p->tt__TrackAttributes::Extension = Extension;
		_p->tt__TrackAttributes::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__TrackAttributes(struct soap *soap, tt__TrackAttributes const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:TrackAttributes", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__TrackAttributes * SOAP_FMAC4 soap_get_tt__TrackAttributes(struct soap*, tt__TrackAttributes *, const char*, const char*);

inline int soap_read_tt__TrackAttributes(struct soap *soap, tt__TrackAttributes *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__TrackAttributes(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__MediaAttributes_DEFINED
#define SOAP_TYPE_tt__MediaAttributes_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__MediaAttributes(struct soap*, const char*, int, const tt__MediaAttributes *, const char*);
SOAP_FMAC3 tt__MediaAttributes * SOAP_FMAC4 soap_in_tt__MediaAttributes(struct soap*, const char*, tt__MediaAttributes *, const char*);
SOAP_FMAC1 tt__MediaAttributes * SOAP_FMAC2 soap_instantiate_tt__MediaAttributes(struct soap*, int, const char*, const char*, size_t*);

inline tt__MediaAttributes * soap_new_tt__MediaAttributes(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__MediaAttributes(soap, n, NULL, NULL, NULL);
}

inline tt__MediaAttributes * soap_new_req_tt__MediaAttributes(
	struct soap *soap,
	const std::string& RecordingToken,
	time_t From,
	time_t Until)
{
	tt__MediaAttributes *_p = soap_new_tt__MediaAttributes(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__MediaAttributes::RecordingToken = RecordingToken;
		_p->tt__MediaAttributes::From = From;
		_p->tt__MediaAttributes::Until = Until;
	}
	return _p;
}

inline tt__MediaAttributes * soap_new_set_tt__MediaAttributes(
	struct soap *soap,
	const std::string& RecordingToken,
	const std::vector<tt__TrackAttributes *> & TrackAttributes,
	time_t From,
	time_t Until,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__MediaAttributes *_p = soap_new_tt__MediaAttributes(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__MediaAttributes::RecordingToken = RecordingToken;
		_p->tt__MediaAttributes::TrackAttributes = TrackAttributes;
		_p->tt__MediaAttributes::From = From;
		_p->tt__MediaAttributes::Until = Until;
		_p->tt__MediaAttributes::__any = __any;
		_p->tt__MediaAttributes::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__MediaAttributes(struct soap *soap, tt__MediaAttributes const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:MediaAttributes", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__MediaAttributes * SOAP_FMAC4 soap_get_tt__MediaAttributes(struct soap*, tt__MediaAttributes *, const char*, const char*);

inline int soap_read_tt__MediaAttributes(struct soap *soap, tt__MediaAttributes *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__MediaAttributes(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__TrackInformation_DEFINED
#define SOAP_TYPE_tt__TrackInformation_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__TrackInformation(struct soap*, const char*, int, const tt__TrackInformation *, const char*);
SOAP_FMAC3 tt__TrackInformation * SOAP_FMAC4 soap_in_tt__TrackInformation(struct soap*, const char*, tt__TrackInformation *, const char*);
SOAP_FMAC1 tt__TrackInformation * SOAP_FMAC2 soap_instantiate_tt__TrackInformation(struct soap*, int, const char*, const char*, size_t*);

inline tt__TrackInformation * soap_new_tt__TrackInformation(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__TrackInformation(soap, n, NULL, NULL, NULL);
}

inline tt__TrackInformation * soap_new_req_tt__TrackInformation(
	struct soap *soap,
	const std::string& TrackToken,
	enum tt__TrackType TrackType,
	const std::string& Description,
	time_t DataFrom,
	time_t DataTo)
{
	tt__TrackInformation *_p = soap_new_tt__TrackInformation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__TrackInformation::TrackToken = TrackToken;
		_p->tt__TrackInformation::TrackType = TrackType;
		_p->tt__TrackInformation::Description = Description;
		_p->tt__TrackInformation::DataFrom = DataFrom;
		_p->tt__TrackInformation::DataTo = DataTo;
	}
	return _p;
}

inline tt__TrackInformation * soap_new_set_tt__TrackInformation(
	struct soap *soap,
	const std::string& TrackToken,
	enum tt__TrackType TrackType,
	const std::string& Description,
	time_t DataFrom,
	time_t DataTo,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__TrackInformation *_p = soap_new_tt__TrackInformation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__TrackInformation::TrackToken = TrackToken;
		_p->tt__TrackInformation::TrackType = TrackType;
		_p->tt__TrackInformation::Description = Description;
		_p->tt__TrackInformation::DataFrom = DataFrom;
		_p->tt__TrackInformation::DataTo = DataTo;
		_p->tt__TrackInformation::__any = __any;
		_p->tt__TrackInformation::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__TrackInformation(struct soap *soap, tt__TrackInformation const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:TrackInformation", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__TrackInformation * SOAP_FMAC4 soap_get_tt__TrackInformation(struct soap*, tt__TrackInformation *, const char*, const char*);

inline int soap_read_tt__TrackInformation(struct soap *soap, tt__TrackInformation *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__TrackInformation(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__RecordingSourceInformation_DEFINED
#define SOAP_TYPE_tt__RecordingSourceInformation_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RecordingSourceInformation(struct soap*, const char*, int, const tt__RecordingSourceInformation *, const char*);
SOAP_FMAC3 tt__RecordingSourceInformation * SOAP_FMAC4 soap_in_tt__RecordingSourceInformation(struct soap*, const char*, tt__RecordingSourceInformation *, const char*);
SOAP_FMAC1 tt__RecordingSourceInformation * SOAP_FMAC2 soap_instantiate_tt__RecordingSourceInformation(struct soap*, int, const char*, const char*, size_t*);

inline tt__RecordingSourceInformation * soap_new_tt__RecordingSourceInformation(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__RecordingSourceInformation(soap, n, NULL, NULL, NULL);
}

inline tt__RecordingSourceInformation * soap_new_req_tt__RecordingSourceInformation(
	struct soap *soap,
	const std::string& SourceId,
	const std::string& Name,
	const std::string& Location,
	const std::string& Description,
	const std::string& Address)
{
	tt__RecordingSourceInformation *_p = soap_new_tt__RecordingSourceInformation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__RecordingSourceInformation::SourceId = SourceId;
		_p->tt__RecordingSourceInformation::Name = Name;
		_p->tt__RecordingSourceInformation::Location = Location;
		_p->tt__RecordingSourceInformation::Description = Description;
		_p->tt__RecordingSourceInformation::Address = Address;
	}
	return _p;
}

inline tt__RecordingSourceInformation * soap_new_set_tt__RecordingSourceInformation(
	struct soap *soap,
	const std::string& SourceId,
	const std::string& Name,
	const std::string& Location,
	const std::string& Description,
	const std::string& Address,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__RecordingSourceInformation *_p = soap_new_tt__RecordingSourceInformation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__RecordingSourceInformation::SourceId = SourceId;
		_p->tt__RecordingSourceInformation::Name = Name;
		_p->tt__RecordingSourceInformation::Location = Location;
		_p->tt__RecordingSourceInformation::Description = Description;
		_p->tt__RecordingSourceInformation::Address = Address;
		_p->tt__RecordingSourceInformation::__any = __any;
		_p->tt__RecordingSourceInformation::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__RecordingSourceInformation(struct soap *soap, tt__RecordingSourceInformation const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:RecordingSourceInformation", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__RecordingSourceInformation * SOAP_FMAC4 soap_get_tt__RecordingSourceInformation(struct soap*, tt__RecordingSourceInformation *, const char*, const char*);

inline int soap_read_tt__RecordingSourceInformation(struct soap *soap, tt__RecordingSourceInformation *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__RecordingSourceInformation(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__RecordingInformation_DEFINED
#define SOAP_TYPE_tt__RecordingInformation_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RecordingInformation(struct soap*, const char*, int, const tt__RecordingInformation *, const char*);
SOAP_FMAC3 tt__RecordingInformation * SOAP_FMAC4 soap_in_tt__RecordingInformation(struct soap*, const char*, tt__RecordingInformation *, const char*);
SOAP_FMAC1 tt__RecordingInformation * SOAP_FMAC2 soap_instantiate_tt__RecordingInformation(struct soap*, int, const char*, const char*, size_t*);

inline tt__RecordingInformation * soap_new_tt__RecordingInformation(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__RecordingInformation(soap, n, NULL, NULL, NULL);
}

inline tt__RecordingInformation * soap_new_req_tt__RecordingInformation(
	struct soap *soap,
	const std::string& RecordingToken,
	tt__RecordingSourceInformation *Source,
	const std::string& Content,
	enum tt__RecordingStatus RecordingStatus)
{
	tt__RecordingInformation *_p = soap_new_tt__RecordingInformation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__RecordingInformation::RecordingToken = RecordingToken;
		_p->tt__RecordingInformation::Source = Source;
		_p->tt__RecordingInformation::Content = Content;
		_p->tt__RecordingInformation::RecordingStatus = RecordingStatus;
	}
	return _p;
}

inline tt__RecordingInformation * soap_new_set_tt__RecordingInformation(
	struct soap *soap,
	const std::string& RecordingToken,
	tt__RecordingSourceInformation *Source,
	time_t *EarliestRecording,
	time_t *LatestRecording,
	const std::string& Content,
	const std::vector<tt__TrackInformation *> & Track,
	enum tt__RecordingStatus RecordingStatus,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__RecordingInformation *_p = soap_new_tt__RecordingInformation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__RecordingInformation::RecordingToken = RecordingToken;
		_p->tt__RecordingInformation::Source = Source;
		_p->tt__RecordingInformation::EarliestRecording = EarliestRecording;
		_p->tt__RecordingInformation::LatestRecording = LatestRecording;
		_p->tt__RecordingInformation::Content = Content;
		_p->tt__RecordingInformation::Track = Track;
		_p->tt__RecordingInformation::RecordingStatus = RecordingStatus;
		_p->tt__RecordingInformation::__any = __any;
		_p->tt__RecordingInformation::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__RecordingInformation(struct soap *soap, tt__RecordingInformation const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:RecordingInformation", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__RecordingInformation * SOAP_FMAC4 soap_get_tt__RecordingInformation(struct soap*, tt__RecordingInformation *, const char*, const char*);

inline int soap_read_tt__RecordingInformation(struct soap *soap, tt__RecordingInformation *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__RecordingInformation(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__FindMetadataResult_DEFINED
#define SOAP_TYPE_tt__FindMetadataResult_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__FindMetadataResult(struct soap*, const char*, int, const tt__FindMetadataResult *, const char*);
SOAP_FMAC3 tt__FindMetadataResult * SOAP_FMAC4 soap_in_tt__FindMetadataResult(struct soap*, const char*, tt__FindMetadataResult *, const char*);
SOAP_FMAC1 tt__FindMetadataResult * SOAP_FMAC2 soap_instantiate_tt__FindMetadataResult(struct soap*, int, const char*, const char*, size_t*);

inline tt__FindMetadataResult * soap_new_tt__FindMetadataResult(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__FindMetadataResult(soap, n, NULL, NULL, NULL);
}

inline tt__FindMetadataResult * soap_new_req_tt__FindMetadataResult(
	struct soap *soap,
	const std::string& RecordingToken,
	const std::string& TrackToken,
	time_t Time)
{
	tt__FindMetadataResult *_p = soap_new_tt__FindMetadataResult(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__FindMetadataResult::RecordingToken = RecordingToken;
		_p->tt__FindMetadataResult::TrackToken = TrackToken;
		_p->tt__FindMetadataResult::Time = Time;
	}
	return _p;
}

inline tt__FindMetadataResult * soap_new_set_tt__FindMetadataResult(
	struct soap *soap,
	const std::string& RecordingToken,
	const std::string& TrackToken,
	time_t Time,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__FindMetadataResult *_p = soap_new_tt__FindMetadataResult(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__FindMetadataResult::RecordingToken = RecordingToken;
		_p->tt__FindMetadataResult::TrackToken = TrackToken;
		_p->tt__FindMetadataResult::Time = Time;
		_p->tt__FindMetadataResult::__any = __any;
		_p->tt__FindMetadataResult::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__FindMetadataResult(struct soap *soap, tt__FindMetadataResult const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:FindMetadataResult", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__FindMetadataResult * SOAP_FMAC4 soap_get_tt__FindMetadataResult(struct soap*, tt__FindMetadataResult *, const char*, const char*);

inline int soap_read_tt__FindMetadataResult(struct soap *soap, tt__FindMetadataResult *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__FindMetadataResult(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__FindMetadataResultList_DEFINED
#define SOAP_TYPE_tt__FindMetadataResultList_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__FindMetadataResultList(struct soap*, const char*, int, const tt__FindMetadataResultList *, const char*);
SOAP_FMAC3 tt__FindMetadataResultList * SOAP_FMAC4 soap_in_tt__FindMetadataResultList(struct soap*, const char*, tt__FindMetadataResultList *, const char*);
SOAP_FMAC1 tt__FindMetadataResultList * SOAP_FMAC2 soap_instantiate_tt__FindMetadataResultList(struct soap*, int, const char*, const char*, size_t*);

inline tt__FindMetadataResultList * soap_new_tt__FindMetadataResultList(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__FindMetadataResultList(soap, n, NULL, NULL, NULL);
}

inline tt__FindMetadataResultList * soap_new_req_tt__FindMetadataResultList(
	struct soap *soap,
	enum tt__SearchState SearchState)
{
	tt__FindMetadataResultList *_p = soap_new_tt__FindMetadataResultList(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__FindMetadataResultList::SearchState = SearchState;
	}
	return _p;
}

inline tt__FindMetadataResultList * soap_new_set_tt__FindMetadataResultList(
	struct soap *soap,
	enum tt__SearchState SearchState,
	const std::vector<tt__FindMetadataResult *> & Result,
	char *__item1)
{
	tt__FindMetadataResultList *_p = soap_new_tt__FindMetadataResultList(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__FindMetadataResultList::SearchState = SearchState;
		_p->tt__FindMetadataResultList::Result = Result;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__FindMetadataResultList(struct soap *soap, tt__FindMetadataResultList const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:FindMetadataResultList", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__FindMetadataResultList * SOAP_FMAC4 soap_get_tt__FindMetadataResultList(struct soap*, tt__FindMetadataResultList *, const char*, const char*);

inline int soap_read_tt__FindMetadataResultList(struct soap *soap, tt__FindMetadataResultList *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__FindMetadataResultList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__FindPTZPositionResult_DEFINED
#define SOAP_TYPE_tt__FindPTZPositionResult_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__FindPTZPositionResult(struct soap*, const char*, int, const tt__FindPTZPositionResult *, const char*);
SOAP_FMAC3 tt__FindPTZPositionResult * SOAP_FMAC4 soap_in_tt__FindPTZPositionResult(struct soap*, const char*, tt__FindPTZPositionResult *, const char*);
SOAP_FMAC1 tt__FindPTZPositionResult * SOAP_FMAC2 soap_instantiate_tt__FindPTZPositionResult(struct soap*, int, const char*, const char*, size_t*);

inline tt__FindPTZPositionResult * soap_new_tt__FindPTZPositionResult(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__FindPTZPositionResult(soap, n, NULL, NULL, NULL);
}

inline tt__FindPTZPositionResult * soap_new_req_tt__FindPTZPositionResult(
	struct soap *soap,
	const std::string& RecordingToken,
	const std::string& TrackToken,
	time_t Time,
	tt__PTZVector *Position)
{
	tt__FindPTZPositionResult *_p = soap_new_tt__FindPTZPositionResult(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__FindPTZPositionResult::RecordingToken = RecordingToken;
		_p->tt__FindPTZPositionResult::TrackToken = TrackToken;
		_p->tt__FindPTZPositionResult::Time = Time;
		_p->tt__FindPTZPositionResult::Position = Position;
	}
	return _p;
}

inline tt__FindPTZPositionResult * soap_new_set_tt__FindPTZPositionResult(
	struct soap *soap,
	const std::string& RecordingToken,
	const std::string& TrackToken,
	time_t Time,
	tt__PTZVector *Position,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__FindPTZPositionResult *_p = soap_new_tt__FindPTZPositionResult(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__FindPTZPositionResult::RecordingToken = RecordingToken;
		_p->tt__FindPTZPositionResult::TrackToken = TrackToken;
		_p->tt__FindPTZPositionResult::Time = Time;
		_p->tt__FindPTZPositionResult::Position = Position;
		_p->tt__FindPTZPositionResult::__any = __any;
		_p->tt__FindPTZPositionResult::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__FindPTZPositionResult(struct soap *soap, tt__FindPTZPositionResult const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:FindPTZPositionResult", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__FindPTZPositionResult * SOAP_FMAC4 soap_get_tt__FindPTZPositionResult(struct soap*, tt__FindPTZPositionResult *, const char*, const char*);

inline int soap_read_tt__FindPTZPositionResult(struct soap *soap, tt__FindPTZPositionResult *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__FindPTZPositionResult(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__FindPTZPositionResultList_DEFINED
#define SOAP_TYPE_tt__FindPTZPositionResultList_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__FindPTZPositionResultList(struct soap*, const char*, int, const tt__FindPTZPositionResultList *, const char*);
SOAP_FMAC3 tt__FindPTZPositionResultList * SOAP_FMAC4 soap_in_tt__FindPTZPositionResultList(struct soap*, const char*, tt__FindPTZPositionResultList *, const char*);
SOAP_FMAC1 tt__FindPTZPositionResultList * SOAP_FMAC2 soap_instantiate_tt__FindPTZPositionResultList(struct soap*, int, const char*, const char*, size_t*);

inline tt__FindPTZPositionResultList * soap_new_tt__FindPTZPositionResultList(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__FindPTZPositionResultList(soap, n, NULL, NULL, NULL);
}

inline tt__FindPTZPositionResultList * soap_new_req_tt__FindPTZPositionResultList(
	struct soap *soap,
	enum tt__SearchState SearchState)
{
	tt__FindPTZPositionResultList *_p = soap_new_tt__FindPTZPositionResultList(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__FindPTZPositionResultList::SearchState = SearchState;
	}
	return _p;
}

inline tt__FindPTZPositionResultList * soap_new_set_tt__FindPTZPositionResultList(
	struct soap *soap,
	enum tt__SearchState SearchState,
	const std::vector<tt__FindPTZPositionResult *> & Result,
	char *__item1)
{
	tt__FindPTZPositionResultList *_p = soap_new_tt__FindPTZPositionResultList(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__FindPTZPositionResultList::SearchState = SearchState;
		_p->tt__FindPTZPositionResultList::Result = Result;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__FindPTZPositionResultList(struct soap *soap, tt__FindPTZPositionResultList const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:FindPTZPositionResultList", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__FindPTZPositionResultList * SOAP_FMAC4 soap_get_tt__FindPTZPositionResultList(struct soap*, tt__FindPTZPositionResultList *, const char*, const char*);

inline int soap_read_tt__FindPTZPositionResultList(struct soap *soap, tt__FindPTZPositionResultList *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__FindPTZPositionResultList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__FindEventResult_DEFINED
#define SOAP_TYPE_tt__FindEventResult_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__FindEventResult(struct soap*, const char*, int, const tt__FindEventResult *, const char*);
SOAP_FMAC3 tt__FindEventResult * SOAP_FMAC4 soap_in_tt__FindEventResult(struct soap*, const char*, tt__FindEventResult *, const char*);
SOAP_FMAC1 tt__FindEventResult * SOAP_FMAC2 soap_instantiate_tt__FindEventResult(struct soap*, int, const char*, const char*, size_t*);

inline tt__FindEventResult * soap_new_tt__FindEventResult(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__FindEventResult(soap, n, NULL, NULL, NULL);
}

inline tt__FindEventResult * soap_new_req_tt__FindEventResult(
	struct soap *soap,
	const std::string& RecordingToken,
	const std::string& TrackToken,
	time_t Time,
	wsnt__NotificationMessageHolderType *Event,
	bool StartStateEvent)
{
	tt__FindEventResult *_p = soap_new_tt__FindEventResult(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__FindEventResult::RecordingToken = RecordingToken;
		_p->tt__FindEventResult::TrackToken = TrackToken;
		_p->tt__FindEventResult::Time = Time;
		_p->tt__FindEventResult::Event = Event;
		_p->tt__FindEventResult::StartStateEvent = StartStateEvent;
	}
	return _p;
}

inline tt__FindEventResult * soap_new_set_tt__FindEventResult(
	struct soap *soap,
	const std::string& RecordingToken,
	const std::string& TrackToken,
	time_t Time,
	wsnt__NotificationMessageHolderType *Event,
	bool StartStateEvent,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__FindEventResult *_p = soap_new_tt__FindEventResult(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__FindEventResult::RecordingToken = RecordingToken;
		_p->tt__FindEventResult::TrackToken = TrackToken;
		_p->tt__FindEventResult::Time = Time;
		_p->tt__FindEventResult::Event = Event;
		_p->tt__FindEventResult::StartStateEvent = StartStateEvent;
		_p->tt__FindEventResult::__any = __any;
		_p->tt__FindEventResult::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__FindEventResult(struct soap *soap, tt__FindEventResult const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:FindEventResult", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__FindEventResult * SOAP_FMAC4 soap_get_tt__FindEventResult(struct soap*, tt__FindEventResult *, const char*, const char*);

inline int soap_read_tt__FindEventResult(struct soap *soap, tt__FindEventResult *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__FindEventResult(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__FindEventResultList_DEFINED
#define SOAP_TYPE_tt__FindEventResultList_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__FindEventResultList(struct soap*, const char*, int, const tt__FindEventResultList *, const char*);
SOAP_FMAC3 tt__FindEventResultList * SOAP_FMAC4 soap_in_tt__FindEventResultList(struct soap*, const char*, tt__FindEventResultList *, const char*);
SOAP_FMAC1 tt__FindEventResultList * SOAP_FMAC2 soap_instantiate_tt__FindEventResultList(struct soap*, int, const char*, const char*, size_t*);

inline tt__FindEventResultList * soap_new_tt__FindEventResultList(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__FindEventResultList(soap, n, NULL, NULL, NULL);
}

inline tt__FindEventResultList * soap_new_req_tt__FindEventResultList(
	struct soap *soap,
	enum tt__SearchState SearchState)
{
	tt__FindEventResultList *_p = soap_new_tt__FindEventResultList(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__FindEventResultList::SearchState = SearchState;
	}
	return _p;
}

inline tt__FindEventResultList * soap_new_set_tt__FindEventResultList(
	struct soap *soap,
	enum tt__SearchState SearchState,
	const std::vector<tt__FindEventResult *> & Result,
	char *__item1)
{
	tt__FindEventResultList *_p = soap_new_tt__FindEventResultList(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__FindEventResultList::SearchState = SearchState;
		_p->tt__FindEventResultList::Result = Result;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__FindEventResultList(struct soap *soap, tt__FindEventResultList const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:FindEventResultList", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__FindEventResultList * SOAP_FMAC4 soap_get_tt__FindEventResultList(struct soap*, tt__FindEventResultList *, const char*, const char*);

inline int soap_read_tt__FindEventResultList(struct soap *soap, tt__FindEventResultList *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__FindEventResultList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__FindRecordingResultList_DEFINED
#define SOAP_TYPE_tt__FindRecordingResultList_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__FindRecordingResultList(struct soap*, const char*, int, const tt__FindRecordingResultList *, const char*);
SOAP_FMAC3 tt__FindRecordingResultList * SOAP_FMAC4 soap_in_tt__FindRecordingResultList(struct soap*, const char*, tt__FindRecordingResultList *, const char*);
SOAP_FMAC1 tt__FindRecordingResultList * SOAP_FMAC2 soap_instantiate_tt__FindRecordingResultList(struct soap*, int, const char*, const char*, size_t*);

inline tt__FindRecordingResultList * soap_new_tt__FindRecordingResultList(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__FindRecordingResultList(soap, n, NULL, NULL, NULL);
}

inline tt__FindRecordingResultList * soap_new_req_tt__FindRecordingResultList(
	struct soap *soap,
	enum tt__SearchState SearchState)
{
	tt__FindRecordingResultList *_p = soap_new_tt__FindRecordingResultList(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__FindRecordingResultList::SearchState = SearchState;
	}
	return _p;
}

inline tt__FindRecordingResultList * soap_new_set_tt__FindRecordingResultList(
	struct soap *soap,
	enum tt__SearchState SearchState,
	const std::vector<tt__RecordingInformation *> & RecordingInformation,
	char *__item1)
{
	tt__FindRecordingResultList *_p = soap_new_tt__FindRecordingResultList(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__FindRecordingResultList::SearchState = SearchState;
		_p->tt__FindRecordingResultList::RecordingInformation = RecordingInformation;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__FindRecordingResultList(struct soap *soap, tt__FindRecordingResultList const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:FindRecordingResultList", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__FindRecordingResultList * SOAP_FMAC4 soap_get_tt__FindRecordingResultList(struct soap*, tt__FindRecordingResultList *, const char*, const char*);

inline int soap_read_tt__FindRecordingResultList(struct soap *soap, tt__FindRecordingResultList *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__FindRecordingResultList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__MetadataFilter_DEFINED
#define SOAP_TYPE_tt__MetadataFilter_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__MetadataFilter(struct soap*, const char*, int, const tt__MetadataFilter *, const char*);
SOAP_FMAC3 tt__MetadataFilter * SOAP_FMAC4 soap_in_tt__MetadataFilter(struct soap*, const char*, tt__MetadataFilter *, const char*);
SOAP_FMAC1 tt__MetadataFilter * SOAP_FMAC2 soap_instantiate_tt__MetadataFilter(struct soap*, int, const char*, const char*, size_t*);

inline tt__MetadataFilter * soap_new_tt__MetadataFilter(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__MetadataFilter(soap, n, NULL, NULL, NULL);
}

inline tt__MetadataFilter * soap_new_req_tt__MetadataFilter(
	struct soap *soap,
	const std::string& MetadataStreamFilter)
{
	tt__MetadataFilter *_p = soap_new_tt__MetadataFilter(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__MetadataFilter::MetadataStreamFilter = MetadataStreamFilter;
	}
	return _p;
}

inline tt__MetadataFilter * soap_new_set_tt__MetadataFilter(
	struct soap *soap,
	const std::string& MetadataStreamFilter,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__MetadataFilter *_p = soap_new_tt__MetadataFilter(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__MetadataFilter::MetadataStreamFilter = MetadataStreamFilter;
		_p->tt__MetadataFilter::__any = __any;
		_p->tt__MetadataFilter::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__MetadataFilter(struct soap *soap, tt__MetadataFilter const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:MetadataFilter", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__MetadataFilter * SOAP_FMAC4 soap_get_tt__MetadataFilter(struct soap*, tt__MetadataFilter *, const char*, const char*);

inline int soap_read_tt__MetadataFilter(struct soap *soap, tt__MetadataFilter *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__MetadataFilter(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__PTZPositionFilter_DEFINED
#define SOAP_TYPE_tt__PTZPositionFilter_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPositionFilter(struct soap*, const char*, int, const tt__PTZPositionFilter *, const char*);
SOAP_FMAC3 tt__PTZPositionFilter * SOAP_FMAC4 soap_in_tt__PTZPositionFilter(struct soap*, const char*, tt__PTZPositionFilter *, const char*);
SOAP_FMAC1 tt__PTZPositionFilter * SOAP_FMAC2 soap_instantiate_tt__PTZPositionFilter(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZPositionFilter * soap_new_tt__PTZPositionFilter(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZPositionFilter(soap, n, NULL, NULL, NULL);
}

inline tt__PTZPositionFilter * soap_new_req_tt__PTZPositionFilter(
	struct soap *soap,
	tt__PTZVector *MinPosition,
	tt__PTZVector *MaxPosition,
	bool EnterOrExit)
{
	tt__PTZPositionFilter *_p = soap_new_tt__PTZPositionFilter(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZPositionFilter::MinPosition = MinPosition;
		_p->tt__PTZPositionFilter::MaxPosition = MaxPosition;
		_p->tt__PTZPositionFilter::EnterOrExit = EnterOrExit;
	}
	return _p;
}

inline tt__PTZPositionFilter * soap_new_set_tt__PTZPositionFilter(
	struct soap *soap,
	tt__PTZVector *MinPosition,
	tt__PTZVector *MaxPosition,
	bool EnterOrExit,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__PTZPositionFilter *_p = soap_new_tt__PTZPositionFilter(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZPositionFilter::MinPosition = MinPosition;
		_p->tt__PTZPositionFilter::MaxPosition = MaxPosition;
		_p->tt__PTZPositionFilter::EnterOrExit = EnterOrExit;
		_p->tt__PTZPositionFilter::__any = __any;
		_p->tt__PTZPositionFilter::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__PTZPositionFilter(struct soap *soap, tt__PTZPositionFilter const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPositionFilter", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZPositionFilter * SOAP_FMAC4 soap_get_tt__PTZPositionFilter(struct soap*, tt__PTZPositionFilter *, const char*, const char*);

inline int soap_read_tt__PTZPositionFilter(struct soap *soap, tt__PTZPositionFilter *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__PTZPositionFilter(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__EventFilter_DEFINED
#define SOAP_TYPE_tt__EventFilter_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__EventFilter(struct soap*, const char*, int, const tt__EventFilter *, const char*);
SOAP_FMAC3 tt__EventFilter * SOAP_FMAC4 soap_in_tt__EventFilter(struct soap*, const char*, tt__EventFilter *, const char*);
SOAP_FMAC1 tt__EventFilter * SOAP_FMAC2 soap_instantiate_tt__EventFilter(struct soap*, int, const char*, const char*, size_t*);

inline tt__EventFilter * soap_new_tt__EventFilter(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__EventFilter(soap, n, NULL, NULL, NULL);
}

inline tt__EventFilter * soap_new_req_tt__EventFilter(
	struct soap *soap)
{
	tt__EventFilter *_p = soap_new_tt__EventFilter(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__EventFilter * soap_new_set_tt__EventFilter(
	struct soap *soap,
	char *__anyAttribute,
	const std::vector<char *> & __any1,
	char *__item2)
{
	tt__EventFilter *_p = soap_new_tt__EventFilter(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__EventFilter::__anyAttribute = __anyAttribute;
		_p->wsnt__FilterType::__any = __any1;
		_p->xsd__anyType::__item = __item2;
	}
	return _p;
}

inline int soap_write_tt__EventFilter(struct soap *soap, tt__EventFilter const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:EventFilter", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__EventFilter * SOAP_FMAC4 soap_get_tt__EventFilter(struct soap*, tt__EventFilter *, const char*, const char*);

inline int soap_read_tt__EventFilter(struct soap *soap, tt__EventFilter *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__EventFilter(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__SearchScopeExtension_DEFINED
#define SOAP_TYPE_tt__SearchScopeExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__SearchScopeExtension(struct soap*, const char*, int, const tt__SearchScopeExtension *, const char*);
SOAP_FMAC3 tt__SearchScopeExtension * SOAP_FMAC4 soap_in_tt__SearchScopeExtension(struct soap*, const char*, tt__SearchScopeExtension *, const char*);
SOAP_FMAC1 tt__SearchScopeExtension * SOAP_FMAC2 soap_instantiate_tt__SearchScopeExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__SearchScopeExtension * soap_new_tt__SearchScopeExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__SearchScopeExtension(soap, n, NULL, NULL, NULL);
}

inline tt__SearchScopeExtension * soap_new_req_tt__SearchScopeExtension(
	struct soap *soap)
{
	tt__SearchScopeExtension *_p = soap_new_tt__SearchScopeExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__SearchScopeExtension * soap_new_set_tt__SearchScopeExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__SearchScopeExtension *_p = soap_new_tt__SearchScopeExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__SearchScopeExtension::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__SearchScopeExtension(struct soap *soap, tt__SearchScopeExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:SearchScopeExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__SearchScopeExtension * SOAP_FMAC4 soap_get_tt__SearchScopeExtension(struct soap*, tt__SearchScopeExtension *, const char*, const char*);

inline int soap_read_tt__SearchScopeExtension(struct soap *soap, tt__SearchScopeExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__SearchScopeExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__SearchScope_DEFINED
#define SOAP_TYPE_tt__SearchScope_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__SearchScope(struct soap*, const char*, int, const tt__SearchScope *, const char*);
SOAP_FMAC3 tt__SearchScope * SOAP_FMAC4 soap_in_tt__SearchScope(struct soap*, const char*, tt__SearchScope *, const char*);
SOAP_FMAC1 tt__SearchScope * SOAP_FMAC2 soap_instantiate_tt__SearchScope(struct soap*, int, const char*, const char*, size_t*);

inline tt__SearchScope * soap_new_tt__SearchScope(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__SearchScope(soap, n, NULL, NULL, NULL);
}

inline tt__SearchScope * soap_new_req_tt__SearchScope(
	struct soap *soap)
{
	tt__SearchScope *_p = soap_new_tt__SearchScope(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__SearchScope * soap_new_set_tt__SearchScope(
	struct soap *soap,
	const std::vector<tt__SourceReference *> & IncludedSources,
	const std::vector<std::string> & IncludedRecordings,
	std::string *RecordingInformationFilter,
	tt__SearchScopeExtension *Extension,
	char *__anyAttribute,
	char *__item1)
{
	tt__SearchScope *_p = soap_new_tt__SearchScope(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__SearchScope::IncludedSources = IncludedSources;
		_p->tt__SearchScope::IncludedRecordings = IncludedRecordings;
		_p->tt__SearchScope::RecordingInformationFilter = RecordingInformationFilter;
		_p->tt__SearchScope::Extension = Extension;
		_p->tt__SearchScope::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__SearchScope(struct soap *soap, tt__SearchScope const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:SearchScope", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__SearchScope * SOAP_FMAC4 soap_get_tt__SearchScope(struct soap*, tt__SearchScope *, const char*, const char*);

inline int soap_read_tt__SearchScope(struct soap *soap, tt__SearchScope *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__SearchScope(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__RecordingSummary_DEFINED
#define SOAP_TYPE_tt__RecordingSummary_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RecordingSummary(struct soap*, const char*, int, const tt__RecordingSummary *, const char*);
SOAP_FMAC3 tt__RecordingSummary * SOAP_FMAC4 soap_in_tt__RecordingSummary(struct soap*, const char*, tt__RecordingSummary *, const char*);
SOAP_FMAC1 tt__RecordingSummary * SOAP_FMAC2 soap_instantiate_tt__RecordingSummary(struct soap*, int, const char*, const char*, size_t*);

inline tt__RecordingSummary * soap_new_tt__RecordingSummary(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__RecordingSummary(soap, n, NULL, NULL, NULL);
}

inline tt__RecordingSummary * soap_new_req_tt__RecordingSummary(
	struct soap *soap,
	time_t DataFrom,
	time_t DataUntil,
	int NumberRecordings)
{
	tt__RecordingSummary *_p = soap_new_tt__RecordingSummary(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__RecordingSummary::DataFrom = DataFrom;
		_p->tt__RecordingSummary::DataUntil = DataUntil;
		_p->tt__RecordingSummary::NumberRecordings = NumberRecordings;
	}
	return _p;
}

inline tt__RecordingSummary * soap_new_set_tt__RecordingSummary(
	struct soap *soap,
	time_t DataFrom,
	time_t DataUntil,
	int NumberRecordings,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__RecordingSummary *_p = soap_new_tt__RecordingSummary(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__RecordingSummary::DataFrom = DataFrom;
		_p->tt__RecordingSummary::DataUntil = DataUntil;
		_p->tt__RecordingSummary::NumberRecordings = NumberRecordings;
		_p->tt__RecordingSummary::__any = __any;
		_p->tt__RecordingSummary::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__RecordingSummary(struct soap *soap, tt__RecordingSummary const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:RecordingSummary", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__RecordingSummary * SOAP_FMAC4 soap_get_tt__RecordingSummary(struct soap*, tt__RecordingSummary *, const char*, const char*);

inline int soap_read_tt__RecordingSummary(struct soap *soap, tt__RecordingSummary *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__RecordingSummary(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__DateTimeRange_DEFINED
#define SOAP_TYPE_tt__DateTimeRange_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__DateTimeRange(struct soap*, const char*, int, const tt__DateTimeRange *, const char*);
SOAP_FMAC3 tt__DateTimeRange * SOAP_FMAC4 soap_in_tt__DateTimeRange(struct soap*, const char*, tt__DateTimeRange *, const char*);
SOAP_FMAC1 tt__DateTimeRange * SOAP_FMAC2 soap_instantiate_tt__DateTimeRange(struct soap*, int, const char*, const char*, size_t*);

inline tt__DateTimeRange * soap_new_tt__DateTimeRange(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__DateTimeRange(soap, n, NULL, NULL, NULL);
}

inline tt__DateTimeRange * soap_new_req_tt__DateTimeRange(
	struct soap *soap,
	time_t From,
	time_t Until)
{
	tt__DateTimeRange *_p = soap_new_tt__DateTimeRange(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__DateTimeRange::From = From;
		_p->tt__DateTimeRange::Until = Until;
	}
	return _p;
}

inline tt__DateTimeRange * soap_new_set_tt__DateTimeRange(
	struct soap *soap,
	time_t From,
	time_t Until,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__DateTimeRange *_p = soap_new_tt__DateTimeRange(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__DateTimeRange::From = From;
		_p->tt__DateTimeRange::Until = Until;
		_p->tt__DateTimeRange::__any = __any;
		_p->tt__DateTimeRange::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__DateTimeRange(struct soap *soap, tt__DateTimeRange const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:DateTimeRange", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__DateTimeRange * SOAP_FMAC4 soap_get_tt__DateTimeRange(struct soap*, tt__DateTimeRange *, const char*, const char*);

inline int soap_read_tt__DateTimeRange(struct soap *soap, tt__DateTimeRange *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__DateTimeRange(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__SourceReference_DEFINED
#define SOAP_TYPE_tt__SourceReference_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__SourceReference(struct soap*, const char*, int, const tt__SourceReference *, const char*);
SOAP_FMAC3 tt__SourceReference * SOAP_FMAC4 soap_in_tt__SourceReference(struct soap*, const char*, tt__SourceReference *, const char*);
SOAP_FMAC1 tt__SourceReference * SOAP_FMAC2 soap_instantiate_tt__SourceReference(struct soap*, int, const char*, const char*, size_t*);

inline tt__SourceReference * soap_new_tt__SourceReference(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__SourceReference(soap, n, NULL, NULL, NULL);
}

inline tt__SourceReference * soap_new_req_tt__SourceReference(
	struct soap *soap,
	const std::string& Token)
{
	tt__SourceReference *_p = soap_new_tt__SourceReference(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__SourceReference::Token = Token;
	}
	return _p;
}

inline tt__SourceReference * soap_new_set_tt__SourceReference(
	struct soap *soap,
	const std::string& Token,
	const std::vector<char *> & __any,
	const std::string& Type,
	char *__anyAttribute,
	char *__item1)
{
	tt__SourceReference *_p = soap_new_tt__SourceReference(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__SourceReference::Token = Token;
		_p->tt__SourceReference::__any = __any;
		_p->tt__SourceReference::Type = Type;
		_p->tt__SourceReference::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__SourceReference(struct soap *soap, tt__SourceReference const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:SourceReference", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__SourceReference * SOAP_FMAC4 soap_get_tt__SourceReference(struct soap*, tt__SourceReference *, const char*, const char*);

inline int soap_read_tt__SourceReference(struct soap *soap, tt__SourceReference *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__SourceReference(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__ReceiverStateInformation_DEFINED
#define SOAP_TYPE_tt__ReceiverStateInformation_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ReceiverStateInformation(struct soap*, const char*, int, const tt__ReceiverStateInformation *, const char*);
SOAP_FMAC3 tt__ReceiverStateInformation * SOAP_FMAC4 soap_in_tt__ReceiverStateInformation(struct soap*, const char*, tt__ReceiverStateInformation *, const char*);
SOAP_FMAC1 tt__ReceiverStateInformation * SOAP_FMAC2 soap_instantiate_tt__ReceiverStateInformation(struct soap*, int, const char*, const char*, size_t*);

inline tt__ReceiverStateInformation * soap_new_tt__ReceiverStateInformation(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ReceiverStateInformation(soap, n, NULL, NULL, NULL);
}

inline tt__ReceiverStateInformation * soap_new_req_tt__ReceiverStateInformation(
	struct soap *soap,
	enum tt__ReceiverState State,
	bool AutoCreated)
{
	tt__ReceiverStateInformation *_p = soap_new_tt__ReceiverStateInformation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ReceiverStateInformation::State = State;
		_p->tt__ReceiverStateInformation::AutoCreated = AutoCreated;
	}
	return _p;
}

inline tt__ReceiverStateInformation * soap_new_set_tt__ReceiverStateInformation(
	struct soap *soap,
	enum tt__ReceiverState State,
	bool AutoCreated,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__ReceiverStateInformation *_p = soap_new_tt__ReceiverStateInformation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ReceiverStateInformation::State = State;
		_p->tt__ReceiverStateInformation::AutoCreated = AutoCreated;
		_p->tt__ReceiverStateInformation::__any = __any;
		_p->tt__ReceiverStateInformation::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__ReceiverStateInformation(struct soap *soap, tt__ReceiverStateInformation const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ReceiverStateInformation", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__ReceiverStateInformation * SOAP_FMAC4 soap_get_tt__ReceiverStateInformation(struct soap*, tt__ReceiverStateInformation *, const char*, const char*);

inline int soap_read_tt__ReceiverStateInformation(struct soap *soap, tt__ReceiverStateInformation *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__ReceiverStateInformation(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__ReceiverConfiguration_DEFINED
#define SOAP_TYPE_tt__ReceiverConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ReceiverConfiguration(struct soap*, const char*, int, const tt__ReceiverConfiguration *, const char*);
SOAP_FMAC3 tt__ReceiverConfiguration * SOAP_FMAC4 soap_in_tt__ReceiverConfiguration(struct soap*, const char*, tt__ReceiverConfiguration *, const char*);
SOAP_FMAC1 tt__ReceiverConfiguration * SOAP_FMAC2 soap_instantiate_tt__ReceiverConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__ReceiverConfiguration * soap_new_tt__ReceiverConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ReceiverConfiguration(soap, n, NULL, NULL, NULL);
}

inline tt__ReceiverConfiguration * soap_new_req_tt__ReceiverConfiguration(
	struct soap *soap,
	enum tt__ReceiverMode Mode,
	const std::string& MediaUri,
	tt__StreamSetup *StreamSetup)
{
	tt__ReceiverConfiguration *_p = soap_new_tt__ReceiverConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ReceiverConfiguration::Mode = Mode;
		_p->tt__ReceiverConfiguration::MediaUri = MediaUri;
		_p->tt__ReceiverConfiguration::StreamSetup = StreamSetup;
	}
	return _p;
}

inline tt__ReceiverConfiguration * soap_new_set_tt__ReceiverConfiguration(
	struct soap *soap,
	enum tt__ReceiverMode Mode,
	const std::string& MediaUri,
	tt__StreamSetup *StreamSetup,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__ReceiverConfiguration *_p = soap_new_tt__ReceiverConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ReceiverConfiguration::Mode = Mode;
		_p->tt__ReceiverConfiguration::MediaUri = MediaUri;
		_p->tt__ReceiverConfiguration::StreamSetup = StreamSetup;
		_p->tt__ReceiverConfiguration::__any = __any;
		_p->tt__ReceiverConfiguration::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__ReceiverConfiguration(struct soap *soap, tt__ReceiverConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ReceiverConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__ReceiverConfiguration * SOAP_FMAC4 soap_get_tt__ReceiverConfiguration(struct soap*, tt__ReceiverConfiguration *, const char*, const char*);

inline int soap_read_tt__ReceiverConfiguration(struct soap *soap, tt__ReceiverConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__ReceiverConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__Receiver_DEFINED
#define SOAP_TYPE_tt__Receiver_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Receiver(struct soap*, const char*, int, const tt__Receiver *, const char*);
SOAP_FMAC3 tt__Receiver * SOAP_FMAC4 soap_in_tt__Receiver(struct soap*, const char*, tt__Receiver *, const char*);
SOAP_FMAC1 tt__Receiver * SOAP_FMAC2 soap_instantiate_tt__Receiver(struct soap*, int, const char*, const char*, size_t*);

inline tt__Receiver * soap_new_tt__Receiver(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Receiver(soap, n, NULL, NULL, NULL);
}

inline tt__Receiver * soap_new_req_tt__Receiver(
	struct soap *soap,
	const std::string& Token,
	tt__ReceiverConfiguration *Configuration)
{
	tt__Receiver *_p = soap_new_tt__Receiver(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Receiver::Token = Token;
		_p->tt__Receiver::Configuration = Configuration;
	}
	return _p;
}

inline tt__Receiver * soap_new_set_tt__Receiver(
	struct soap *soap,
	const std::string& Token,
	tt__ReceiverConfiguration *Configuration,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__Receiver *_p = soap_new_tt__Receiver(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Receiver::Token = Token;
		_p->tt__Receiver::Configuration = Configuration;
		_p->tt__Receiver::__any = __any;
		_p->tt__Receiver::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__Receiver(struct soap *soap, tt__Receiver const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Receiver", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__Receiver * SOAP_FMAC4 soap_get_tt__Receiver(struct soap*, tt__Receiver *, const char*, const char*);

inline int soap_read_tt__Receiver(struct soap *soap, tt__Receiver *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__Receiver(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__PaneOptionExtension_DEFINED
#define SOAP_TYPE_tt__PaneOptionExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PaneOptionExtension(struct soap*, const char*, int, const tt__PaneOptionExtension *, const char*);
SOAP_FMAC3 tt__PaneOptionExtension * SOAP_FMAC4 soap_in_tt__PaneOptionExtension(struct soap*, const char*, tt__PaneOptionExtension *, const char*);
SOAP_FMAC1 tt__PaneOptionExtension * SOAP_FMAC2 soap_instantiate_tt__PaneOptionExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__PaneOptionExtension * soap_new_tt__PaneOptionExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PaneOptionExtension(soap, n, NULL, NULL, NULL);
}

inline tt__PaneOptionExtension * soap_new_req_tt__PaneOptionExtension(
	struct soap *soap)
{
	tt__PaneOptionExtension *_p = soap_new_tt__PaneOptionExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PaneOptionExtension * soap_new_set_tt__PaneOptionExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__PaneOptionExtension *_p = soap_new_tt__PaneOptionExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PaneOptionExtension::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__PaneOptionExtension(struct soap *soap, tt__PaneOptionExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PaneOptionExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__PaneOptionExtension * SOAP_FMAC4 soap_get_tt__PaneOptionExtension(struct soap*, tt__PaneOptionExtension *, const char*, const char*);

inline int soap_read_tt__PaneOptionExtension(struct soap *soap, tt__PaneOptionExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__PaneOptionExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__PaneLayoutOptions_DEFINED
#define SOAP_TYPE_tt__PaneLayoutOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PaneLayoutOptions(struct soap*, const char*, int, const tt__PaneLayoutOptions *, const char*);
SOAP_FMAC3 tt__PaneLayoutOptions * SOAP_FMAC4 soap_in_tt__PaneLayoutOptions(struct soap*, const char*, tt__PaneLayoutOptions *, const char*);
SOAP_FMAC1 tt__PaneLayoutOptions * SOAP_FMAC2 soap_instantiate_tt__PaneLayoutOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__PaneLayoutOptions * soap_new_tt__PaneLayoutOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PaneLayoutOptions(soap, n, NULL, NULL, NULL);
}

inline tt__PaneLayoutOptions * soap_new_req_tt__PaneLayoutOptions(
	struct soap *soap,
	const std::vector<tt__Rectangle *> & Area)
{
	tt__PaneLayoutOptions *_p = soap_new_tt__PaneLayoutOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PaneLayoutOptions::Area = Area;
	}
	return _p;
}

inline tt__PaneLayoutOptions * soap_new_set_tt__PaneLayoutOptions(
	struct soap *soap,
	const std::vector<tt__Rectangle *> & Area,
	tt__PaneOptionExtension *Extension,
	char *__anyAttribute,
	char *__item1)
{
	tt__PaneLayoutOptions *_p = soap_new_tt__PaneLayoutOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PaneLayoutOptions::Area = Area;
		_p->tt__PaneLayoutOptions::Extension = Extension;
		_p->tt__PaneLayoutOptions::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__PaneLayoutOptions(struct soap *soap, tt__PaneLayoutOptions const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PaneLayoutOptions", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__PaneLayoutOptions * SOAP_FMAC4 soap_get_tt__PaneLayoutOptions(struct soap*, tt__PaneLayoutOptions *, const char*, const char*);

inline int soap_read_tt__PaneLayoutOptions(struct soap *soap, tt__PaneLayoutOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__PaneLayoutOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__LayoutOptionsExtension_DEFINED
#define SOAP_TYPE_tt__LayoutOptionsExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__LayoutOptionsExtension(struct soap*, const char*, int, const tt__LayoutOptionsExtension *, const char*);
SOAP_FMAC3 tt__LayoutOptionsExtension * SOAP_FMAC4 soap_in_tt__LayoutOptionsExtension(struct soap*, const char*, tt__LayoutOptionsExtension *, const char*);
SOAP_FMAC1 tt__LayoutOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__LayoutOptionsExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__LayoutOptionsExtension * soap_new_tt__LayoutOptionsExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__LayoutOptionsExtension(soap, n, NULL, NULL, NULL);
}

inline tt__LayoutOptionsExtension * soap_new_req_tt__LayoutOptionsExtension(
	struct soap *soap)
{
	tt__LayoutOptionsExtension *_p = soap_new_tt__LayoutOptionsExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__LayoutOptionsExtension * soap_new_set_tt__LayoutOptionsExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__LayoutOptionsExtension *_p = soap_new_tt__LayoutOptionsExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__LayoutOptionsExtension::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__LayoutOptionsExtension(struct soap *soap, tt__LayoutOptionsExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:LayoutOptionsExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__LayoutOptionsExtension * SOAP_FMAC4 soap_get_tt__LayoutOptionsExtension(struct soap*, tt__LayoutOptionsExtension *, const char*, const char*);

inline int soap_read_tt__LayoutOptionsExtension(struct soap *soap, tt__LayoutOptionsExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__LayoutOptionsExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__LayoutOptions_DEFINED
#define SOAP_TYPE_tt__LayoutOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__LayoutOptions(struct soap*, const char*, int, const tt__LayoutOptions *, const char*);
SOAP_FMAC3 tt__LayoutOptions * SOAP_FMAC4 soap_in_tt__LayoutOptions(struct soap*, const char*, tt__LayoutOptions *, const char*);
SOAP_FMAC1 tt__LayoutOptions * SOAP_FMAC2 soap_instantiate_tt__LayoutOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__LayoutOptions * soap_new_tt__LayoutOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__LayoutOptions(soap, n, NULL, NULL, NULL);
}

inline tt__LayoutOptions * soap_new_req_tt__LayoutOptions(
	struct soap *soap,
	const std::vector<tt__PaneLayoutOptions *> & PaneLayoutOptions)
{
	tt__LayoutOptions *_p = soap_new_tt__LayoutOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__LayoutOptions::PaneLayoutOptions = PaneLayoutOptions;
	}
	return _p;
}

inline tt__LayoutOptions * soap_new_set_tt__LayoutOptions(
	struct soap *soap,
	const std::vector<tt__PaneLayoutOptions *> & PaneLayoutOptions,
	tt__LayoutOptionsExtension *Extension,
	char *__anyAttribute,
	char *__item1)
{
	tt__LayoutOptions *_p = soap_new_tt__LayoutOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__LayoutOptions::PaneLayoutOptions = PaneLayoutOptions;
		_p->tt__LayoutOptions::Extension = Extension;
		_p->tt__LayoutOptions::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__LayoutOptions(struct soap *soap, tt__LayoutOptions const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:LayoutOptions", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__LayoutOptions * SOAP_FMAC4 soap_get_tt__LayoutOptions(struct soap*, tt__LayoutOptions *, const char*, const char*);

inline int soap_read_tt__LayoutOptions(struct soap *soap, tt__LayoutOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__LayoutOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__CodingCapabilities_DEFINED
#define SOAP_TYPE_tt__CodingCapabilities_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__CodingCapabilities(struct soap*, const char*, int, const tt__CodingCapabilities *, const char*);
SOAP_FMAC3 tt__CodingCapabilities * SOAP_FMAC4 soap_in_tt__CodingCapabilities(struct soap*, const char*, tt__CodingCapabilities *, const char*);
SOAP_FMAC1 tt__CodingCapabilities * SOAP_FMAC2 soap_instantiate_tt__CodingCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline tt__CodingCapabilities * soap_new_tt__CodingCapabilities(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__CodingCapabilities(soap, n, NULL, NULL, NULL);
}

inline tt__CodingCapabilities * soap_new_req_tt__CodingCapabilities(
	struct soap *soap,
	tt__VideoDecoderConfigurationOptions *VideoDecodingCapabilities)
{
	tt__CodingCapabilities *_p = soap_new_tt__CodingCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__CodingCapabilities::VideoDecodingCapabilities = VideoDecodingCapabilities;
	}
	return _p;
}

inline tt__CodingCapabilities * soap_new_set_tt__CodingCapabilities(
	struct soap *soap,
	tt__AudioEncoderConfigurationOptions *AudioEncodingCapabilities,
	tt__AudioDecoderConfigurationOptions *AudioDecodingCapabilities,
	tt__VideoDecoderConfigurationOptions *VideoDecodingCapabilities,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__CodingCapabilities *_p = soap_new_tt__CodingCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__CodingCapabilities::AudioEncodingCapabilities = AudioEncodingCapabilities;
		_p->tt__CodingCapabilities::AudioDecodingCapabilities = AudioDecodingCapabilities;
		_p->tt__CodingCapabilities::VideoDecodingCapabilities = VideoDecodingCapabilities;
		_p->tt__CodingCapabilities::__any = __any;
		_p->tt__CodingCapabilities::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__CodingCapabilities(struct soap *soap, tt__CodingCapabilities const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:CodingCapabilities", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__CodingCapabilities * SOAP_FMAC4 soap_get_tt__CodingCapabilities(struct soap*, tt__CodingCapabilities *, const char*, const char*);

inline int soap_read_tt__CodingCapabilities(struct soap *soap, tt__CodingCapabilities *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__CodingCapabilities(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__LayoutExtension_DEFINED
#define SOAP_TYPE_tt__LayoutExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__LayoutExtension(struct soap*, const char*, int, const tt__LayoutExtension *, const char*);
SOAP_FMAC3 tt__LayoutExtension * SOAP_FMAC4 soap_in_tt__LayoutExtension(struct soap*, const char*, tt__LayoutExtension *, const char*);
SOAP_FMAC1 tt__LayoutExtension * SOAP_FMAC2 soap_instantiate_tt__LayoutExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__LayoutExtension * soap_new_tt__LayoutExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__LayoutExtension(soap, n, NULL, NULL, NULL);
}

inline tt__LayoutExtension * soap_new_req_tt__LayoutExtension(
	struct soap *soap)
{
	tt__LayoutExtension *_p = soap_new_tt__LayoutExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__LayoutExtension * soap_new_set_tt__LayoutExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__LayoutExtension *_p = soap_new_tt__LayoutExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__LayoutExtension::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__LayoutExtension(struct soap *soap, tt__LayoutExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:LayoutExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__LayoutExtension * SOAP_FMAC4 soap_get_tt__LayoutExtension(struct soap*, tt__LayoutExtension *, const char*, const char*);

inline int soap_read_tt__LayoutExtension(struct soap *soap, tt__LayoutExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__LayoutExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__Layout_DEFINED
#define SOAP_TYPE_tt__Layout_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Layout(struct soap*, const char*, int, const tt__Layout *, const char*);
SOAP_FMAC3 tt__Layout * SOAP_FMAC4 soap_in_tt__Layout(struct soap*, const char*, tt__Layout *, const char*);
SOAP_FMAC1 tt__Layout * SOAP_FMAC2 soap_instantiate_tt__Layout(struct soap*, int, const char*, const char*, size_t*);

inline tt__Layout * soap_new_tt__Layout(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Layout(soap, n, NULL, NULL, NULL);
}

inline tt__Layout * soap_new_req_tt__Layout(
	struct soap *soap,
	const std::vector<tt__PaneLayout *> & PaneLayout)
{
	tt__Layout *_p = soap_new_tt__Layout(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Layout::PaneLayout = PaneLayout;
	}
	return _p;
}

inline tt__Layout * soap_new_set_tt__Layout(
	struct soap *soap,
	const std::vector<tt__PaneLayout *> & PaneLayout,
	tt__LayoutExtension *Extension,
	char *__anyAttribute,
	char *__item1)
{
	tt__Layout *_p = soap_new_tt__Layout(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Layout::PaneLayout = PaneLayout;
		_p->tt__Layout::Extension = Extension;
		_p->tt__Layout::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__Layout(struct soap *soap, tt__Layout const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Layout", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__Layout * SOAP_FMAC4 soap_get_tt__Layout(struct soap*, tt__Layout *, const char*, const char*);

inline int soap_read_tt__Layout(struct soap *soap, tt__Layout *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__Layout(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__PaneLayout_DEFINED
#define SOAP_TYPE_tt__PaneLayout_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PaneLayout(struct soap*, const char*, int, const tt__PaneLayout *, const char*);
SOAP_FMAC3 tt__PaneLayout * SOAP_FMAC4 soap_in_tt__PaneLayout(struct soap*, const char*, tt__PaneLayout *, const char*);
SOAP_FMAC1 tt__PaneLayout * SOAP_FMAC2 soap_instantiate_tt__PaneLayout(struct soap*, int, const char*, const char*, size_t*);

inline tt__PaneLayout * soap_new_tt__PaneLayout(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PaneLayout(soap, n, NULL, NULL, NULL);
}

inline tt__PaneLayout * soap_new_req_tt__PaneLayout(
	struct soap *soap,
	const std::string& Pane,
	tt__Rectangle *Area)
{
	tt__PaneLayout *_p = soap_new_tt__PaneLayout(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PaneLayout::Pane = Pane;
		_p->tt__PaneLayout::Area = Area;
	}
	return _p;
}

inline tt__PaneLayout * soap_new_set_tt__PaneLayout(
	struct soap *soap,
	const std::string& Pane,
	tt__Rectangle *Area,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__PaneLayout *_p = soap_new_tt__PaneLayout(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PaneLayout::Pane = Pane;
		_p->tt__PaneLayout::Area = Area;
		_p->tt__PaneLayout::__any = __any;
		_p->tt__PaneLayout::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__PaneLayout(struct soap *soap, tt__PaneLayout const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PaneLayout", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__PaneLayout * SOAP_FMAC4 soap_get_tt__PaneLayout(struct soap*, tt__PaneLayout *, const char*, const char*);

inline int soap_read_tt__PaneLayout(struct soap *soap, tt__PaneLayout *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__PaneLayout(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__PaneConfiguration_DEFINED
#define SOAP_TYPE_tt__PaneConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PaneConfiguration(struct soap*, const char*, int, const tt__PaneConfiguration *, const char*);
SOAP_FMAC3 tt__PaneConfiguration * SOAP_FMAC4 soap_in_tt__PaneConfiguration(struct soap*, const char*, tt__PaneConfiguration *, const char*);
SOAP_FMAC1 tt__PaneConfiguration * SOAP_FMAC2 soap_instantiate_tt__PaneConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__PaneConfiguration * soap_new_tt__PaneConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PaneConfiguration(soap, n, NULL, NULL, NULL);
}

inline tt__PaneConfiguration * soap_new_req_tt__PaneConfiguration(
	struct soap *soap,
	const std::string& Token)
{
	tt__PaneConfiguration *_p = soap_new_tt__PaneConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PaneConfiguration::Token = Token;
	}
	return _p;
}

inline tt__PaneConfiguration * soap_new_set_tt__PaneConfiguration(
	struct soap *soap,
	std::string *PaneName,
	std::string *AudioOutputToken,
	std::string *AudioSourceToken,
	tt__AudioEncoderConfiguration *AudioEncoderConfiguration,
	std::string *ReceiverToken,
	const std::string& Token,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__PaneConfiguration *_p = soap_new_tt__PaneConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PaneConfiguration::PaneName = PaneName;
		_p->tt__PaneConfiguration::AudioOutputToken = AudioOutputToken;
		_p->tt__PaneConfiguration::AudioSourceToken = AudioSourceToken;
		_p->tt__PaneConfiguration::AudioEncoderConfiguration = AudioEncoderConfiguration;
		_p->tt__PaneConfiguration::ReceiverToken = ReceiverToken;
		_p->tt__PaneConfiguration::Token = Token;
		_p->tt__PaneConfiguration::__any = __any;
		_p->tt__PaneConfiguration::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__PaneConfiguration(struct soap *soap, tt__PaneConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PaneConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__PaneConfiguration * SOAP_FMAC4 soap_get_tt__PaneConfiguration(struct soap*, tt__PaneConfiguration *, const char*, const char*);

inline int soap_read_tt__PaneConfiguration(struct soap *soap, tt__PaneConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__PaneConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__EventStreamExtension_DEFINED
#define SOAP_TYPE_tt__EventStreamExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__EventStreamExtension(struct soap*, const char*, int, const tt__EventStreamExtension *, const char*);
SOAP_FMAC3 tt__EventStreamExtension * SOAP_FMAC4 soap_in_tt__EventStreamExtension(struct soap*, const char*, tt__EventStreamExtension *, const char*);
SOAP_FMAC1 tt__EventStreamExtension * SOAP_FMAC2 soap_instantiate_tt__EventStreamExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__EventStreamExtension * soap_new_tt__EventStreamExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__EventStreamExtension(soap, n, NULL, NULL, NULL);
}

inline tt__EventStreamExtension * soap_new_req_tt__EventStreamExtension(
	struct soap *soap)
{
	tt__EventStreamExtension *_p = soap_new_tt__EventStreamExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__EventStreamExtension * soap_new_set_tt__EventStreamExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__EventStreamExtension *_p = soap_new_tt__EventStreamExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__EventStreamExtension::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__EventStreamExtension(struct soap *soap, tt__EventStreamExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:EventStreamExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__EventStreamExtension * SOAP_FMAC4 soap_get_tt__EventStreamExtension(struct soap*, tt__EventStreamExtension *, const char*, const char*);

inline int soap_read_tt__EventStreamExtension(struct soap *soap, tt__EventStreamExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__EventStreamExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__EventStream_DEFINED
#define SOAP_TYPE_tt__EventStream_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__EventStream(struct soap*, const char*, int, const tt__EventStream *, const char*);
SOAP_FMAC3 tt__EventStream * SOAP_FMAC4 soap_in_tt__EventStream(struct soap*, const char*, tt__EventStream *, const char*);
SOAP_FMAC1 tt__EventStream * SOAP_FMAC2 soap_instantiate_tt__EventStream(struct soap*, int, const char*, const char*, size_t*);

inline tt__EventStream * soap_new_tt__EventStream(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__EventStream(soap, n, NULL, NULL, NULL);
}

inline tt__EventStream * soap_new_req_tt__EventStream(
	struct soap *soap,
	int __size_EventStream,
	__tt__union_EventStream *__union_EventStream)
{
	tt__EventStream *_p = soap_new_tt__EventStream(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__EventStream::__size_EventStream = __size_EventStream;
		_p->tt__EventStream::__union_EventStream = __union_EventStream;
	}
	return _p;
}

inline tt__EventStream * soap_new_set_tt__EventStream(
	struct soap *soap,
	int __size_EventStream,
	__tt__union_EventStream *__union_EventStream,
	char *__item1)
{
	tt__EventStream *_p = soap_new_tt__EventStream(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__EventStream::__size_EventStream = __size_EventStream;
		_p->tt__EventStream::__union_EventStream = __union_EventStream;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__EventStream(struct soap *soap, tt__EventStream const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:EventStream", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__EventStream * SOAP_FMAC4 soap_get_tt__EventStream(struct soap*, tt__EventStream *, const char*, const char*);

inline int soap_read_tt__EventStream(struct soap *soap, tt__EventStream *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__EventStream(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__PTZStreamExtension_DEFINED
#define SOAP_TYPE_tt__PTZStreamExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZStreamExtension(struct soap*, const char*, int, const tt__PTZStreamExtension *, const char*);
SOAP_FMAC3 tt__PTZStreamExtension * SOAP_FMAC4 soap_in_tt__PTZStreamExtension(struct soap*, const char*, tt__PTZStreamExtension *, const char*);
SOAP_FMAC1 tt__PTZStreamExtension * SOAP_FMAC2 soap_instantiate_tt__PTZStreamExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZStreamExtension * soap_new_tt__PTZStreamExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZStreamExtension(soap, n, NULL, NULL, NULL);
}

inline tt__PTZStreamExtension * soap_new_req_tt__PTZStreamExtension(
	struct soap *soap)
{
	tt__PTZStreamExtension *_p = soap_new_tt__PTZStreamExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTZStreamExtension * soap_new_set_tt__PTZStreamExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__PTZStreamExtension *_p = soap_new_tt__PTZStreamExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZStreamExtension::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__PTZStreamExtension(struct soap *soap, tt__PTZStreamExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZStreamExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZStreamExtension * SOAP_FMAC4 soap_get_tt__PTZStreamExtension(struct soap*, tt__PTZStreamExtension *, const char*, const char*);

inline int soap_read_tt__PTZStreamExtension(struct soap *soap, tt__PTZStreamExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__PTZStreamExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__PTZStream_DEFINED
#define SOAP_TYPE_tt__PTZStream_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZStream(struct soap*, const char*, int, const tt__PTZStream *, const char*);
SOAP_FMAC3 tt__PTZStream * SOAP_FMAC4 soap_in_tt__PTZStream(struct soap*, const char*, tt__PTZStream *, const char*);
SOAP_FMAC1 tt__PTZStream * SOAP_FMAC2 soap_instantiate_tt__PTZStream(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZStream * soap_new_tt__PTZStream(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZStream(soap, n, NULL, NULL, NULL);
}

inline tt__PTZStream * soap_new_req_tt__PTZStream(
	struct soap *soap,
	int __size_PTZStream,
	__tt__union_PTZStream *__union_PTZStream)
{
	tt__PTZStream *_p = soap_new_tt__PTZStream(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZStream::__size_PTZStream = __size_PTZStream;
		_p->tt__PTZStream::__union_PTZStream = __union_PTZStream;
	}
	return _p;
}

inline tt__PTZStream * soap_new_set_tt__PTZStream(
	struct soap *soap,
	int __size_PTZStream,
	__tt__union_PTZStream *__union_PTZStream,
	char *__item1)
{
	tt__PTZStream *_p = soap_new_tt__PTZStream(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZStream::__size_PTZStream = __size_PTZStream;
		_p->tt__PTZStream::__union_PTZStream = __union_PTZStream;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__PTZStream(struct soap *soap, tt__PTZStream const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZStream", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZStream * SOAP_FMAC4 soap_get_tt__PTZStream(struct soap*, tt__PTZStream *, const char*, const char*);

inline int soap_read_tt__PTZStream(struct soap *soap, tt__PTZStream *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__PTZStream(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__VideoAnalyticsStreamExtension_DEFINED
#define SOAP_TYPE_tt__VideoAnalyticsStreamExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__VideoAnalyticsStreamExtension(struct soap*, const char*, int, const tt__VideoAnalyticsStreamExtension *, const char*);
SOAP_FMAC3 tt__VideoAnalyticsStreamExtension * SOAP_FMAC4 soap_in_tt__VideoAnalyticsStreamExtension(struct soap*, const char*, tt__VideoAnalyticsStreamExtension *, const char*);
SOAP_FMAC1 tt__VideoAnalyticsStreamExtension * SOAP_FMAC2 soap_instantiate_tt__VideoAnalyticsStreamExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__VideoAnalyticsStreamExtension * soap_new_tt__VideoAnalyticsStreamExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__VideoAnalyticsStreamExtension(soap, n, NULL, NULL, NULL);
}

inline tt__VideoAnalyticsStreamExtension * soap_new_req_tt__VideoAnalyticsStreamExtension(
	struct soap *soap)
{
	tt__VideoAnalyticsStreamExtension *_p = soap_new_tt__VideoAnalyticsStreamExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__VideoAnalyticsStreamExtension * soap_new_set_tt__VideoAnalyticsStreamExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__VideoAnalyticsStreamExtension *_p = soap_new_tt__VideoAnalyticsStreamExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__VideoAnalyticsStreamExtension::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__VideoAnalyticsStreamExtension(struct soap *soap, tt__VideoAnalyticsStreamExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:VideoAnalyticsStreamExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__VideoAnalyticsStreamExtension * SOAP_FMAC4 soap_get_tt__VideoAnalyticsStreamExtension(struct soap*, tt__VideoAnalyticsStreamExtension *, const char*, const char*);

inline int soap_read_tt__VideoAnalyticsStreamExtension(struct soap *soap, tt__VideoAnalyticsStreamExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__VideoAnalyticsStreamExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__VideoAnalyticsStream_DEFINED
#define SOAP_TYPE_tt__VideoAnalyticsStream_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__VideoAnalyticsStream(struct soap*, const char*, int, const tt__VideoAnalyticsStream *, const char*);
SOAP_FMAC3 tt__VideoAnalyticsStream * SOAP_FMAC4 soap_in_tt__VideoAnalyticsStream(struct soap*, const char*, tt__VideoAnalyticsStream *, const char*);
SOAP_FMAC1 tt__VideoAnalyticsStream * SOAP_FMAC2 soap_instantiate_tt__VideoAnalyticsStream(struct soap*, int, const char*, const char*, size_t*);

inline tt__VideoAnalyticsStream * soap_new_tt__VideoAnalyticsStream(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__VideoAnalyticsStream(soap, n, NULL, NULL, NULL);
}

inline tt__VideoAnalyticsStream * soap_new_req_tt__VideoAnalyticsStream(
	struct soap *soap,
	int __size_VideoAnalyticsStream,
	__tt__union_VideoAnalyticsStream *__union_VideoAnalyticsStream)
{
	tt__VideoAnalyticsStream *_p = soap_new_tt__VideoAnalyticsStream(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__VideoAnalyticsStream::__size_VideoAnalyticsStream = __size_VideoAnalyticsStream;
		_p->tt__VideoAnalyticsStream::__union_VideoAnalyticsStream = __union_VideoAnalyticsStream;
	}
	return _p;
}

inline tt__VideoAnalyticsStream * soap_new_set_tt__VideoAnalyticsStream(
	struct soap *soap,
	int __size_VideoAnalyticsStream,
	__tt__union_VideoAnalyticsStream *__union_VideoAnalyticsStream,
	char *__item1)
{
	tt__VideoAnalyticsStream *_p = soap_new_tt__VideoAnalyticsStream(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__VideoAnalyticsStream::__size_VideoAnalyticsStream = __size_VideoAnalyticsStream;
		_p->tt__VideoAnalyticsStream::__union_VideoAnalyticsStream = __union_VideoAnalyticsStream;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__VideoAnalyticsStream(struct soap *soap, tt__VideoAnalyticsStream const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:VideoAnalyticsStream", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__VideoAnalyticsStream * SOAP_FMAC4 soap_get_tt__VideoAnalyticsStream(struct soap*, tt__VideoAnalyticsStream *, const char*, const char*);

inline int soap_read_tt__VideoAnalyticsStream(struct soap *soap, tt__VideoAnalyticsStream *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__VideoAnalyticsStream(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__AudioAnalyticsStreamExtension_DEFINED
#define SOAP_TYPE_tt__AudioAnalyticsStreamExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AudioAnalyticsStreamExtension(struct soap*, const char*, int, const tt__AudioAnalyticsStreamExtension *, const char*);
SOAP_FMAC3 tt__AudioAnalyticsStreamExtension * SOAP_FMAC4 soap_in_tt__AudioAnalyticsStreamExtension(struct soap*, const char*, tt__AudioAnalyticsStreamExtension *, const char*);
SOAP_FMAC1 tt__AudioAnalyticsStreamExtension * SOAP_FMAC2 soap_instantiate_tt__AudioAnalyticsStreamExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__AudioAnalyticsStreamExtension * soap_new_tt__AudioAnalyticsStreamExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__AudioAnalyticsStreamExtension(soap, n, NULL, NULL, NULL);
}

inline tt__AudioAnalyticsStreamExtension * soap_new_req_tt__AudioAnalyticsStreamExtension(
	struct soap *soap)
{
	tt__AudioAnalyticsStreamExtension *_p = soap_new_tt__AudioAnalyticsStreamExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__AudioAnalyticsStreamExtension * soap_new_set_tt__AudioAnalyticsStreamExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__AudioAnalyticsStreamExtension *_p = soap_new_tt__AudioAnalyticsStreamExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AudioAnalyticsStreamExtension::__any = __any;
		_p->tt__AudioAnalyticsStreamExtension::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__AudioAnalyticsStreamExtension(struct soap *soap, tt__AudioAnalyticsStreamExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AudioAnalyticsStreamExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__AudioAnalyticsStreamExtension * SOAP_FMAC4 soap_get_tt__AudioAnalyticsStreamExtension(struct soap*, tt__AudioAnalyticsStreamExtension *, const char*, const char*);

inline int soap_read_tt__AudioAnalyticsStreamExtension(struct soap *soap, tt__AudioAnalyticsStreamExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__AudioAnalyticsStreamExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__AudioDescriptor_DEFINED
#define SOAP_TYPE_tt__AudioDescriptor_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AudioDescriptor(struct soap*, const char*, int, const tt__AudioDescriptor *, const char*);
SOAP_FMAC3 tt__AudioDescriptor * SOAP_FMAC4 soap_in_tt__AudioDescriptor(struct soap*, const char*, tt__AudioDescriptor *, const char*);
SOAP_FMAC1 tt__AudioDescriptor * SOAP_FMAC2 soap_instantiate_tt__AudioDescriptor(struct soap*, int, const char*, const char*, size_t*);

inline tt__AudioDescriptor * soap_new_tt__AudioDescriptor(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__AudioDescriptor(soap, n, NULL, NULL, NULL);
}

inline tt__AudioDescriptor * soap_new_req_tt__AudioDescriptor(
	struct soap *soap,
	time_t UtcTime)
{
	tt__AudioDescriptor *_p = soap_new_tt__AudioDescriptor(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AudioDescriptor::UtcTime = UtcTime;
	}
	return _p;
}

inline tt__AudioDescriptor * soap_new_set_tt__AudioDescriptor(
	struct soap *soap,
	const std::vector<char *> & __any,
	time_t UtcTime,
	char *__anyAttribute,
	char *__item1)
{
	tt__AudioDescriptor *_p = soap_new_tt__AudioDescriptor(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AudioDescriptor::__any = __any;
		_p->tt__AudioDescriptor::UtcTime = UtcTime;
		_p->tt__AudioDescriptor::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__AudioDescriptor(struct soap *soap, tt__AudioDescriptor const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AudioDescriptor", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__AudioDescriptor * SOAP_FMAC4 soap_get_tt__AudioDescriptor(struct soap*, tt__AudioDescriptor *, const char*, const char*);

inline int soap_read_tt__AudioDescriptor(struct soap *soap, tt__AudioDescriptor *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__AudioDescriptor(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__AudioAnalyticsStream_DEFINED
#define SOAP_TYPE_tt__AudioAnalyticsStream_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AudioAnalyticsStream(struct soap*, const char*, int, const tt__AudioAnalyticsStream *, const char*);
SOAP_FMAC3 tt__AudioAnalyticsStream * SOAP_FMAC4 soap_in_tt__AudioAnalyticsStream(struct soap*, const char*, tt__AudioAnalyticsStream *, const char*);
SOAP_FMAC1 tt__AudioAnalyticsStream * SOAP_FMAC2 soap_instantiate_tt__AudioAnalyticsStream(struct soap*, int, const char*, const char*, size_t*);

inline tt__AudioAnalyticsStream * soap_new_tt__AudioAnalyticsStream(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__AudioAnalyticsStream(soap, n, NULL, NULL, NULL);
}

inline tt__AudioAnalyticsStream * soap_new_req_tt__AudioAnalyticsStream(
	struct soap *soap)
{
	tt__AudioAnalyticsStream *_p = soap_new_tt__AudioAnalyticsStream(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__AudioAnalyticsStream * soap_new_set_tt__AudioAnalyticsStream(
	struct soap *soap,
	const std::vector<tt__AudioDescriptor *> & AudioDescriptor,
	tt__AudioAnalyticsStreamExtension *Extension,
	char *__anyAttribute,
	char *__item1)
{
	tt__AudioAnalyticsStream *_p = soap_new_tt__AudioAnalyticsStream(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AudioAnalyticsStream::AudioDescriptor = AudioDescriptor;
		_p->tt__AudioAnalyticsStream::Extension = Extension;
		_p->tt__AudioAnalyticsStream::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__AudioAnalyticsStream(struct soap *soap, tt__AudioAnalyticsStream const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AudioAnalyticsStream", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__AudioAnalyticsStream * SOAP_FMAC4 soap_get_tt__AudioAnalyticsStream(struct soap*, tt__AudioAnalyticsStream *, const char*, const char*);

inline int soap_read_tt__AudioAnalyticsStream(struct soap *soap, tt__AudioAnalyticsStream *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__AudioAnalyticsStream(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__MetadataStreamExtension2_DEFINED
#define SOAP_TYPE_tt__MetadataStreamExtension2_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__MetadataStreamExtension2(struct soap*, const char*, int, const tt__MetadataStreamExtension2 *, const char*);
SOAP_FMAC3 tt__MetadataStreamExtension2 * SOAP_FMAC4 soap_in_tt__MetadataStreamExtension2(struct soap*, const char*, tt__MetadataStreamExtension2 *, const char*);
SOAP_FMAC1 tt__MetadataStreamExtension2 * SOAP_FMAC2 soap_instantiate_tt__MetadataStreamExtension2(struct soap*, int, const char*, const char*, size_t*);

inline tt__MetadataStreamExtension2 * soap_new_tt__MetadataStreamExtension2(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__MetadataStreamExtension2(soap, n, NULL, NULL, NULL);
}

inline tt__MetadataStreamExtension2 * soap_new_req_tt__MetadataStreamExtension2(
	struct soap *soap)
{
	tt__MetadataStreamExtension2 *_p = soap_new_tt__MetadataStreamExtension2(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__MetadataStreamExtension2 * soap_new_set_tt__MetadataStreamExtension2(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__MetadataStreamExtension2 *_p = soap_new_tt__MetadataStreamExtension2(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__MetadataStreamExtension2::__any = __any;
		_p->tt__MetadataStreamExtension2::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__MetadataStreamExtension2(struct soap *soap, tt__MetadataStreamExtension2 const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:MetadataStreamExtension2", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__MetadataStreamExtension2 * SOAP_FMAC4 soap_get_tt__MetadataStreamExtension2(struct soap*, tt__MetadataStreamExtension2 *, const char*, const char*);

inline int soap_read_tt__MetadataStreamExtension2(struct soap *soap, tt__MetadataStreamExtension2 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__MetadataStreamExtension2(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__MetadataStreamExtension_DEFINED
#define SOAP_TYPE_tt__MetadataStreamExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__MetadataStreamExtension(struct soap*, const char*, int, const tt__MetadataStreamExtension *, const char*);
SOAP_FMAC3 tt__MetadataStreamExtension * SOAP_FMAC4 soap_in_tt__MetadataStreamExtension(struct soap*, const char*, tt__MetadataStreamExtension *, const char*);
SOAP_FMAC1 tt__MetadataStreamExtension * SOAP_FMAC2 soap_instantiate_tt__MetadataStreamExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__MetadataStreamExtension * soap_new_tt__MetadataStreamExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__MetadataStreamExtension(soap, n, NULL, NULL, NULL);
}

inline tt__MetadataStreamExtension * soap_new_req_tt__MetadataStreamExtension(
	struct soap *soap)
{
	tt__MetadataStreamExtension *_p = soap_new_tt__MetadataStreamExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__MetadataStreamExtension * soap_new_set_tt__MetadataStreamExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	tt__AudioAnalyticsStream *AudioAnalyticsStream,
	tt__MetadataStreamExtension2 *Extension,
	char *__item1)
{
	tt__MetadataStreamExtension *_p = soap_new_tt__MetadataStreamExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__MetadataStreamExtension::__any = __any;
		_p->tt__MetadataStreamExtension::AudioAnalyticsStream = AudioAnalyticsStream;
		_p->tt__MetadataStreamExtension::Extension = Extension;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__MetadataStreamExtension(struct soap *soap, tt__MetadataStreamExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:MetadataStreamExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__MetadataStreamExtension * SOAP_FMAC4 soap_get_tt__MetadataStreamExtension(struct soap*, tt__MetadataStreamExtension *, const char*, const char*);

inline int soap_read_tt__MetadataStreamExtension(struct soap *soap, tt__MetadataStreamExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__MetadataStreamExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__MetadataStream_DEFINED
#define SOAP_TYPE_tt__MetadataStream_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__MetadataStream(struct soap*, const char*, int, const tt__MetadataStream *, const char*);
SOAP_FMAC3 tt__MetadataStream * SOAP_FMAC4 soap_in_tt__MetadataStream(struct soap*, const char*, tt__MetadataStream *, const char*);
SOAP_FMAC1 tt__MetadataStream * SOAP_FMAC2 soap_instantiate_tt__MetadataStream(struct soap*, int, const char*, const char*, size_t*);

inline tt__MetadataStream * soap_new_tt__MetadataStream(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__MetadataStream(soap, n, NULL, NULL, NULL);
}

inline tt__MetadataStream * soap_new_req_tt__MetadataStream(
	struct soap *soap,
	int __size_MetadataStream,
	__tt__union_MetadataStream *__union_MetadataStream)
{
	tt__MetadataStream *_p = soap_new_tt__MetadataStream(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__MetadataStream::__size_MetadataStream = __size_MetadataStream;
		_p->tt__MetadataStream::__union_MetadataStream = __union_MetadataStream;
	}
	return _p;
}

inline tt__MetadataStream * soap_new_set_tt__MetadataStream(
	struct soap *soap,
	int __size_MetadataStream,
	__tt__union_MetadataStream *__union_MetadataStream,
	char *__anyAttribute,
	char *__item1)
{
	tt__MetadataStream *_p = soap_new_tt__MetadataStream(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__MetadataStream::__size_MetadataStream = __size_MetadataStream;
		_p->tt__MetadataStream::__union_MetadataStream = __union_MetadataStream;
		_p->tt__MetadataStream::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__MetadataStream(struct soap *soap, tt__MetadataStream const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:MetadataStream", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__MetadataStream * SOAP_FMAC4 soap_get_tt__MetadataStream(struct soap*, tt__MetadataStream *, const char*, const char*);

inline int soap_read_tt__MetadataStream(struct soap *soap, tt__MetadataStream *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__MetadataStream(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__CellLayout_DEFINED
#define SOAP_TYPE_tt__CellLayout_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__CellLayout(struct soap*, const char*, int, const tt__CellLayout *, const char*);
SOAP_FMAC3 tt__CellLayout * SOAP_FMAC4 soap_in_tt__CellLayout(struct soap*, const char*, tt__CellLayout *, const char*);
SOAP_FMAC1 tt__CellLayout * SOAP_FMAC2 soap_instantiate_tt__CellLayout(struct soap*, int, const char*, const char*, size_t*);

inline tt__CellLayout * soap_new_tt__CellLayout(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__CellLayout(soap, n, NULL, NULL, NULL);
}

inline tt__CellLayout * soap_new_req_tt__CellLayout(
	struct soap *soap,
	tt__Transformation *Transformation,
	const std::string& Columns,
	const std::string& Rows)
{
	tt__CellLayout *_p = soap_new_tt__CellLayout(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__CellLayout::Transformation = Transformation;
		_p->tt__CellLayout::Columns = Columns;
		_p->tt__CellLayout::Rows = Rows;
	}
	return _p;
}

inline tt__CellLayout * soap_new_set_tt__CellLayout(
	struct soap *soap,
	tt__Transformation *Transformation,
	const std::vector<char *> & __any,
	const std::string& Columns,
	const std::string& Rows,
	char *__anyAttribute,
	char *__item1)
{
	tt__CellLayout *_p = soap_new_tt__CellLayout(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__CellLayout::Transformation = Transformation;
		_p->tt__CellLayout::__any = __any;
		_p->tt__CellLayout::Columns = Columns;
		_p->tt__CellLayout::Rows = Rows;
		_p->tt__CellLayout::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__CellLayout(struct soap *soap, tt__CellLayout const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:CellLayout", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__CellLayout * SOAP_FMAC4 soap_get_tt__CellLayout(struct soap*, tt__CellLayout *, const char*, const char*);

inline int soap_read_tt__CellLayout(struct soap *soap, tt__CellLayout *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__CellLayout(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__MotionExpressionConfiguration_DEFINED
#define SOAP_TYPE_tt__MotionExpressionConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__MotionExpressionConfiguration(struct soap*, const char*, int, const tt__MotionExpressionConfiguration *, const char*);
SOAP_FMAC3 tt__MotionExpressionConfiguration * SOAP_FMAC4 soap_in_tt__MotionExpressionConfiguration(struct soap*, const char*, tt__MotionExpressionConfiguration *, const char*);
SOAP_FMAC1 tt__MotionExpressionConfiguration * SOAP_FMAC2 soap_instantiate_tt__MotionExpressionConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__MotionExpressionConfiguration * soap_new_tt__MotionExpressionConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__MotionExpressionConfiguration(soap, n, NULL, NULL, NULL);
}

inline tt__MotionExpressionConfiguration * soap_new_req_tt__MotionExpressionConfiguration(
	struct soap *soap,
	tt__MotionExpression *MotionExpression)
{
	tt__MotionExpressionConfiguration *_p = soap_new_tt__MotionExpressionConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__MotionExpressionConfiguration::MotionExpression = MotionExpression;
	}
	return _p;
}

inline tt__MotionExpressionConfiguration * soap_new_set_tt__MotionExpressionConfiguration(
	struct soap *soap,
	tt__MotionExpression *MotionExpression,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__MotionExpressionConfiguration *_p = soap_new_tt__MotionExpressionConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__MotionExpressionConfiguration::MotionExpression = MotionExpression;
		_p->tt__MotionExpressionConfiguration::__any = __any;
		_p->tt__MotionExpressionConfiguration::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__MotionExpressionConfiguration(struct soap *soap, tt__MotionExpressionConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:MotionExpressionConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__MotionExpressionConfiguration * SOAP_FMAC4 soap_get_tt__MotionExpressionConfiguration(struct soap*, tt__MotionExpressionConfiguration *, const char*, const char*);

inline int soap_read_tt__MotionExpressionConfiguration(struct soap *soap, tt__MotionExpressionConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__MotionExpressionConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__MotionExpression_DEFINED
#define SOAP_TYPE_tt__MotionExpression_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__MotionExpression(struct soap*, const char*, int, const tt__MotionExpression *, const char*);
SOAP_FMAC3 tt__MotionExpression * SOAP_FMAC4 soap_in_tt__MotionExpression(struct soap*, const char*, tt__MotionExpression *, const char*);
SOAP_FMAC1 tt__MotionExpression * SOAP_FMAC2 soap_instantiate_tt__MotionExpression(struct soap*, int, const char*, const char*, size_t*);

inline tt__MotionExpression * soap_new_tt__MotionExpression(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__MotionExpression(soap, n, NULL, NULL, NULL);
}

inline tt__MotionExpression * soap_new_req_tt__MotionExpression(
	struct soap *soap,
	const std::string& Expression)
{
	tt__MotionExpression *_p = soap_new_tt__MotionExpression(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__MotionExpression::Expression = Expression;
	}
	return _p;
}

inline tt__MotionExpression * soap_new_set_tt__MotionExpression(
	struct soap *soap,
	const std::string& Expression,
	const std::vector<char *> & __any,
	std::string *Type,
	char *__anyAttribute,
	char *__item1)
{
	tt__MotionExpression *_p = soap_new_tt__MotionExpression(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__MotionExpression::Expression = Expression;
		_p->tt__MotionExpression::__any = __any;
		_p->tt__MotionExpression::Type = Type;
		_p->tt__MotionExpression::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__MotionExpression(struct soap *soap, tt__MotionExpression const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:MotionExpression", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__MotionExpression * SOAP_FMAC4 soap_get_tt__MotionExpression(struct soap*, tt__MotionExpression *, const char*, const char*);

inline int soap_read_tt__MotionExpression(struct soap *soap, tt__MotionExpression *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__MotionExpression(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__PolylineArrayConfiguration_DEFINED
#define SOAP_TYPE_tt__PolylineArrayConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PolylineArrayConfiguration(struct soap*, const char*, int, const tt__PolylineArrayConfiguration *, const char*);
SOAP_FMAC3 tt__PolylineArrayConfiguration * SOAP_FMAC4 soap_in_tt__PolylineArrayConfiguration(struct soap*, const char*, tt__PolylineArrayConfiguration *, const char*);
SOAP_FMAC1 tt__PolylineArrayConfiguration * SOAP_FMAC2 soap_instantiate_tt__PolylineArrayConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__PolylineArrayConfiguration * soap_new_tt__PolylineArrayConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PolylineArrayConfiguration(soap, n, NULL, NULL, NULL);
}

inline tt__PolylineArrayConfiguration * soap_new_req_tt__PolylineArrayConfiguration(
	struct soap *soap,
	tt__PolylineArray *PolylineArray)
{
	tt__PolylineArrayConfiguration *_p = soap_new_tt__PolylineArrayConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PolylineArrayConfiguration::PolylineArray = PolylineArray;
	}
	return _p;
}

inline tt__PolylineArrayConfiguration * soap_new_set_tt__PolylineArrayConfiguration(
	struct soap *soap,
	tt__PolylineArray *PolylineArray,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__PolylineArrayConfiguration *_p = soap_new_tt__PolylineArrayConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PolylineArrayConfiguration::PolylineArray = PolylineArray;
		_p->tt__PolylineArrayConfiguration::__any = __any;
		_p->tt__PolylineArrayConfiguration::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__PolylineArrayConfiguration(struct soap *soap, tt__PolylineArrayConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PolylineArrayConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__PolylineArrayConfiguration * SOAP_FMAC4 soap_get_tt__PolylineArrayConfiguration(struct soap*, tt__PolylineArrayConfiguration *, const char*, const char*);

inline int soap_read_tt__PolylineArrayConfiguration(struct soap *soap, tt__PolylineArrayConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__PolylineArrayConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__PolylineArrayExtension_DEFINED
#define SOAP_TYPE_tt__PolylineArrayExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PolylineArrayExtension(struct soap*, const char*, int, const tt__PolylineArrayExtension *, const char*);
SOAP_FMAC3 tt__PolylineArrayExtension * SOAP_FMAC4 soap_in_tt__PolylineArrayExtension(struct soap*, const char*, tt__PolylineArrayExtension *, const char*);
SOAP_FMAC1 tt__PolylineArrayExtension * SOAP_FMAC2 soap_instantiate_tt__PolylineArrayExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__PolylineArrayExtension * soap_new_tt__PolylineArrayExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PolylineArrayExtension(soap, n, NULL, NULL, NULL);
}

inline tt__PolylineArrayExtension * soap_new_req_tt__PolylineArrayExtension(
	struct soap *soap)
{
	tt__PolylineArrayExtension *_p = soap_new_tt__PolylineArrayExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PolylineArrayExtension * soap_new_set_tt__PolylineArrayExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__PolylineArrayExtension *_p = soap_new_tt__PolylineArrayExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PolylineArrayExtension::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__PolylineArrayExtension(struct soap *soap, tt__PolylineArrayExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PolylineArrayExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__PolylineArrayExtension * SOAP_FMAC4 soap_get_tt__PolylineArrayExtension(struct soap*, tt__PolylineArrayExtension *, const char*, const char*);

inline int soap_read_tt__PolylineArrayExtension(struct soap *soap, tt__PolylineArrayExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__PolylineArrayExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__PolylineArray_DEFINED
#define SOAP_TYPE_tt__PolylineArray_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PolylineArray(struct soap*, const char*, int, const tt__PolylineArray *, const char*);
SOAP_FMAC3 tt__PolylineArray * SOAP_FMAC4 soap_in_tt__PolylineArray(struct soap*, const char*, tt__PolylineArray *, const char*);
SOAP_FMAC1 tt__PolylineArray * SOAP_FMAC2 soap_instantiate_tt__PolylineArray(struct soap*, int, const char*, const char*, size_t*);

inline tt__PolylineArray * soap_new_tt__PolylineArray(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PolylineArray(soap, n, NULL, NULL, NULL);
}

inline tt__PolylineArray * soap_new_req_tt__PolylineArray(
	struct soap *soap,
	const std::vector<tt__Polyline *> & Segment)
{
	tt__PolylineArray *_p = soap_new_tt__PolylineArray(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PolylineArray::Segment = Segment;
	}
	return _p;
}

inline tt__PolylineArray * soap_new_set_tt__PolylineArray(
	struct soap *soap,
	const std::vector<tt__Polyline *> & Segment,
	tt__PolylineArrayExtension *Extension,
	char *__anyAttribute,
	char *__item1)
{
	tt__PolylineArray *_p = soap_new_tt__PolylineArray(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PolylineArray::Segment = Segment;
		_p->tt__PolylineArray::Extension = Extension;
		_p->tt__PolylineArray::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__PolylineArray(struct soap *soap, tt__PolylineArray const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PolylineArray", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__PolylineArray * SOAP_FMAC4 soap_get_tt__PolylineArray(struct soap*, tt__PolylineArray *, const char*, const char*);

inline int soap_read_tt__PolylineArray(struct soap *soap, tt__PolylineArray *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__PolylineArray(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__PolygonConfiguration_DEFINED
#define SOAP_TYPE_tt__PolygonConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PolygonConfiguration(struct soap*, const char*, int, const tt__PolygonConfiguration *, const char*);
SOAP_FMAC3 tt__PolygonConfiguration * SOAP_FMAC4 soap_in_tt__PolygonConfiguration(struct soap*, const char*, tt__PolygonConfiguration *, const char*);
SOAP_FMAC1 tt__PolygonConfiguration * SOAP_FMAC2 soap_instantiate_tt__PolygonConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__PolygonConfiguration * soap_new_tt__PolygonConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PolygonConfiguration(soap, n, NULL, NULL, NULL);
}

inline tt__PolygonConfiguration * soap_new_req_tt__PolygonConfiguration(
	struct soap *soap,
	tt__Polygon *Polygon)
{
	tt__PolygonConfiguration *_p = soap_new_tt__PolygonConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PolygonConfiguration::Polygon = Polygon;
	}
	return _p;
}

inline tt__PolygonConfiguration * soap_new_set_tt__PolygonConfiguration(
	struct soap *soap,
	tt__Polygon *Polygon,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__PolygonConfiguration *_p = soap_new_tt__PolygonConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PolygonConfiguration::Polygon = Polygon;
		_p->tt__PolygonConfiguration::__any = __any;
		_p->tt__PolygonConfiguration::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__PolygonConfiguration(struct soap *soap, tt__PolygonConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PolygonConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__PolygonConfiguration * SOAP_FMAC4 soap_get_tt__PolygonConfiguration(struct soap*, tt__PolygonConfiguration *, const char*, const char*);

inline int soap_read_tt__PolygonConfiguration(struct soap *soap, tt__PolygonConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__PolygonConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__SupportedAnalyticsModulesExtension_DEFINED
#define SOAP_TYPE_tt__SupportedAnalyticsModulesExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__SupportedAnalyticsModulesExtension(struct soap*, const char*, int, const tt__SupportedAnalyticsModulesExtension *, const char*);
SOAP_FMAC3 tt__SupportedAnalyticsModulesExtension * SOAP_FMAC4 soap_in_tt__SupportedAnalyticsModulesExtension(struct soap*, const char*, tt__SupportedAnalyticsModulesExtension *, const char*);
SOAP_FMAC1 tt__SupportedAnalyticsModulesExtension * SOAP_FMAC2 soap_instantiate_tt__SupportedAnalyticsModulesExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__SupportedAnalyticsModulesExtension * soap_new_tt__SupportedAnalyticsModulesExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__SupportedAnalyticsModulesExtension(soap, n, NULL, NULL, NULL);
}

inline tt__SupportedAnalyticsModulesExtension * soap_new_req_tt__SupportedAnalyticsModulesExtension(
	struct soap *soap)
{
	tt__SupportedAnalyticsModulesExtension *_p = soap_new_tt__SupportedAnalyticsModulesExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__SupportedAnalyticsModulesExtension * soap_new_set_tt__SupportedAnalyticsModulesExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__SupportedAnalyticsModulesExtension *_p = soap_new_tt__SupportedAnalyticsModulesExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__SupportedAnalyticsModulesExtension::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__SupportedAnalyticsModulesExtension(struct soap *soap, tt__SupportedAnalyticsModulesExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:SupportedAnalyticsModulesExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__SupportedAnalyticsModulesExtension * SOAP_FMAC4 soap_get_tt__SupportedAnalyticsModulesExtension(struct soap*, tt__SupportedAnalyticsModulesExtension *, const char*, const char*);

inline int soap_read_tt__SupportedAnalyticsModulesExtension(struct soap *soap, tt__SupportedAnalyticsModulesExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__SupportedAnalyticsModulesExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__SupportedAnalyticsModules_DEFINED
#define SOAP_TYPE_tt__SupportedAnalyticsModules_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__SupportedAnalyticsModules(struct soap*, const char*, int, const tt__SupportedAnalyticsModules *, const char*);
SOAP_FMAC3 tt__SupportedAnalyticsModules * SOAP_FMAC4 soap_in_tt__SupportedAnalyticsModules(struct soap*, const char*, tt__SupportedAnalyticsModules *, const char*);
SOAP_FMAC1 tt__SupportedAnalyticsModules * SOAP_FMAC2 soap_instantiate_tt__SupportedAnalyticsModules(struct soap*, int, const char*, const char*, size_t*);

inline tt__SupportedAnalyticsModules * soap_new_tt__SupportedAnalyticsModules(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__SupportedAnalyticsModules(soap, n, NULL, NULL, NULL);
}

inline tt__SupportedAnalyticsModules * soap_new_req_tt__SupportedAnalyticsModules(
	struct soap *soap)
{
	tt__SupportedAnalyticsModules *_p = soap_new_tt__SupportedAnalyticsModules(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__SupportedAnalyticsModules * soap_new_set_tt__SupportedAnalyticsModules(
	struct soap *soap,
	const std::vector<std::string> & AnalyticsModuleContentSchemaLocation,
	const std::vector<tt__ConfigDescription *> & AnalyticsModuleDescription,
	tt__SupportedAnalyticsModulesExtension *Extension,
	char *__anyAttribute,
	char *__item1)
{
	tt__SupportedAnalyticsModules *_p = soap_new_tt__SupportedAnalyticsModules(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__SupportedAnalyticsModules::AnalyticsModuleContentSchemaLocation = AnalyticsModuleContentSchemaLocation;
		_p->tt__SupportedAnalyticsModules::AnalyticsModuleDescription = AnalyticsModuleDescription;
		_p->tt__SupportedAnalyticsModules::Extension = Extension;
		_p->tt__SupportedAnalyticsModules::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__SupportedAnalyticsModules(struct soap *soap, tt__SupportedAnalyticsModules const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:SupportedAnalyticsModules", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__SupportedAnalyticsModules * SOAP_FMAC4 soap_get_tt__SupportedAnalyticsModules(struct soap*, tt__SupportedAnalyticsModules *, const char*, const char*);

inline int soap_read_tt__SupportedAnalyticsModules(struct soap *soap, tt__SupportedAnalyticsModules *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__SupportedAnalyticsModules(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__SupportedRulesExtension_DEFINED
#define SOAP_TYPE_tt__SupportedRulesExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__SupportedRulesExtension(struct soap*, const char*, int, const tt__SupportedRulesExtension *, const char*);
SOAP_FMAC3 tt__SupportedRulesExtension * SOAP_FMAC4 soap_in_tt__SupportedRulesExtension(struct soap*, const char*, tt__SupportedRulesExtension *, const char*);
SOAP_FMAC1 tt__SupportedRulesExtension * SOAP_FMAC2 soap_instantiate_tt__SupportedRulesExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__SupportedRulesExtension * soap_new_tt__SupportedRulesExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__SupportedRulesExtension(soap, n, NULL, NULL, NULL);
}

inline tt__SupportedRulesExtension * soap_new_req_tt__SupportedRulesExtension(
	struct soap *soap)
{
	tt__SupportedRulesExtension *_p = soap_new_tt__SupportedRulesExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__SupportedRulesExtension * soap_new_set_tt__SupportedRulesExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__SupportedRulesExtension *_p = soap_new_tt__SupportedRulesExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__SupportedRulesExtension::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__SupportedRulesExtension(struct soap *soap, tt__SupportedRulesExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:SupportedRulesExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__SupportedRulesExtension * SOAP_FMAC4 soap_get_tt__SupportedRulesExtension(struct soap*, tt__SupportedRulesExtension *, const char*, const char*);

inline int soap_read_tt__SupportedRulesExtension(struct soap *soap, tt__SupportedRulesExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__SupportedRulesExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__SupportedRules_DEFINED
#define SOAP_TYPE_tt__SupportedRules_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__SupportedRules(struct soap*, const char*, int, const tt__SupportedRules *, const char*);
SOAP_FMAC3 tt__SupportedRules * SOAP_FMAC4 soap_in_tt__SupportedRules(struct soap*, const char*, tt__SupportedRules *, const char*);
SOAP_FMAC1 tt__SupportedRules * SOAP_FMAC2 soap_instantiate_tt__SupportedRules(struct soap*, int, const char*, const char*, size_t*);

inline tt__SupportedRules * soap_new_tt__SupportedRules(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__SupportedRules(soap, n, NULL, NULL, NULL);
}

inline tt__SupportedRules * soap_new_req_tt__SupportedRules(
	struct soap *soap)
{
	tt__SupportedRules *_p = soap_new_tt__SupportedRules(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__SupportedRules * soap_new_set_tt__SupportedRules(
	struct soap *soap,
	const std::vector<std::string> & RuleContentSchemaLocation,
	const std::vector<tt__ConfigDescription *> & RuleDescription,
	tt__SupportedRulesExtension *Extension,
	char *__anyAttribute,
	char *__item1)
{
	tt__SupportedRules *_p = soap_new_tt__SupportedRules(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__SupportedRules::RuleContentSchemaLocation = RuleContentSchemaLocation;
		_p->tt__SupportedRules::RuleDescription = RuleDescription;
		_p->tt__SupportedRules::Extension = Extension;
		_p->tt__SupportedRules::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__SupportedRules(struct soap *soap, tt__SupportedRules const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:SupportedRules", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__SupportedRules * SOAP_FMAC4 soap_get_tt__SupportedRules(struct soap*, tt__SupportedRules *, const char*, const char*);

inline int soap_read_tt__SupportedRules(struct soap *soap, tt__SupportedRules *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__SupportedRules(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__ConfigDescriptionExtension_DEFINED
#define SOAP_TYPE_tt__ConfigDescriptionExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ConfigDescriptionExtension(struct soap*, const char*, int, const tt__ConfigDescriptionExtension *, const char*);
SOAP_FMAC3 tt__ConfigDescriptionExtension * SOAP_FMAC4 soap_in_tt__ConfigDescriptionExtension(struct soap*, const char*, tt__ConfigDescriptionExtension *, const char*);
SOAP_FMAC1 tt__ConfigDescriptionExtension * SOAP_FMAC2 soap_instantiate_tt__ConfigDescriptionExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__ConfigDescriptionExtension * soap_new_tt__ConfigDescriptionExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ConfigDescriptionExtension(soap, n, NULL, NULL, NULL);
}

inline tt__ConfigDescriptionExtension * soap_new_req_tt__ConfigDescriptionExtension(
	struct soap *soap)
{
	tt__ConfigDescriptionExtension *_p = soap_new_tt__ConfigDescriptionExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__ConfigDescriptionExtension * soap_new_set_tt__ConfigDescriptionExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__ConfigDescriptionExtension *_p = soap_new_tt__ConfigDescriptionExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ConfigDescriptionExtension::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__ConfigDescriptionExtension(struct soap *soap, tt__ConfigDescriptionExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ConfigDescriptionExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__ConfigDescriptionExtension * SOAP_FMAC4 soap_get_tt__ConfigDescriptionExtension(struct soap*, tt__ConfigDescriptionExtension *, const char*, const char*);

inline int soap_read_tt__ConfigDescriptionExtension(struct soap *soap, tt__ConfigDescriptionExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__ConfigDescriptionExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__ConfigDescription_DEFINED
#define SOAP_TYPE_tt__ConfigDescription_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ConfigDescription(struct soap*, const char*, int, const tt__ConfigDescription *, const char*);
SOAP_FMAC3 tt__ConfigDescription * SOAP_FMAC4 soap_in_tt__ConfigDescription(struct soap*, const char*, tt__ConfigDescription *, const char*);
SOAP_FMAC1 tt__ConfigDescription * SOAP_FMAC2 soap_instantiate_tt__ConfigDescription(struct soap*, int, const char*, const char*, size_t*);

inline tt__ConfigDescription * soap_new_tt__ConfigDescription(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ConfigDescription(soap, n, NULL, NULL, NULL);
}

inline tt__ConfigDescription * soap_new_req_tt__ConfigDescription(
	struct soap *soap,
	tt__ItemListDescription *Parameters,
	const std::string& Name)
{
	tt__ConfigDescription *_p = soap_new_tt__ConfigDescription(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ConfigDescription::Parameters = Parameters;
		_p->tt__ConfigDescription::Name = Name;
	}
	return _p;
}

inline tt__ConfigDescription * soap_new_set_tt__ConfigDescription(
	struct soap *soap,
	tt__ItemListDescription *Parameters,
	std::vector<_tt__ConfigDescription_Messages> *Messages,
	tt__ConfigDescriptionExtension *Extension,
	const std::string& Name,
	char *__anyAttribute,
	char *__item1)
{
	tt__ConfigDescription *_p = soap_new_tt__ConfigDescription(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ConfigDescription::Parameters = Parameters;
		_p->tt__ConfigDescription::Messages = Messages;
		_p->tt__ConfigDescription::Extension = Extension;
		_p->tt__ConfigDescription::Name = Name;
		_p->tt__ConfigDescription::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__ConfigDescription(struct soap *soap, tt__ConfigDescription const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ConfigDescription", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__ConfigDescription * SOAP_FMAC4 soap_get_tt__ConfigDescription(struct soap*, tt__ConfigDescription *, const char*, const char*);

inline int soap_read_tt__ConfigDescription(struct soap *soap, tt__ConfigDescription *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__ConfigDescription(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__Config_DEFINED
#define SOAP_TYPE_tt__Config_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Config(struct soap*, const char*, int, const tt__Config *, const char*);
SOAP_FMAC3 tt__Config * SOAP_FMAC4 soap_in_tt__Config(struct soap*, const char*, tt__Config *, const char*);
SOAP_FMAC1 tt__Config * SOAP_FMAC2 soap_instantiate_tt__Config(struct soap*, int, const char*, const char*, size_t*);

inline tt__Config * soap_new_tt__Config(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Config(soap, n, NULL, NULL, NULL);
}

inline tt__Config * soap_new_req_tt__Config(
	struct soap *soap,
	tt__ItemList *Parameters,
	const std::string& Name,
	const std::string& Type)
{
	tt__Config *_p = soap_new_tt__Config(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Config::Parameters = Parameters;
		_p->tt__Config::Name = Name;
		_p->tt__Config::Type = Type;
	}
	return _p;
}

inline tt__Config * soap_new_set_tt__Config(
	struct soap *soap,
	tt__ItemList *Parameters,
	const std::string& Name,
	const std::string& Type,
	char *__item1)
{
	tt__Config *_p = soap_new_tt__Config(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Config::Parameters = Parameters;
		_p->tt__Config::Name = Name;
		_p->tt__Config::Type = Type;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__Config(struct soap *soap, tt__Config const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Config", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__Config * SOAP_FMAC4 soap_get_tt__Config(struct soap*, tt__Config *, const char*, const char*);

inline int soap_read_tt__Config(struct soap *soap, tt__Config *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__Config(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__RuleEngineConfigurationExtension_DEFINED
#define SOAP_TYPE_tt__RuleEngineConfigurationExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RuleEngineConfigurationExtension(struct soap*, const char*, int, const tt__RuleEngineConfigurationExtension *, const char*);
SOAP_FMAC3 tt__RuleEngineConfigurationExtension * SOAP_FMAC4 soap_in_tt__RuleEngineConfigurationExtension(struct soap*, const char*, tt__RuleEngineConfigurationExtension *, const char*);
SOAP_FMAC1 tt__RuleEngineConfigurationExtension * SOAP_FMAC2 soap_instantiate_tt__RuleEngineConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__RuleEngineConfigurationExtension * soap_new_tt__RuleEngineConfigurationExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__RuleEngineConfigurationExtension(soap, n, NULL, NULL, NULL);
}

inline tt__RuleEngineConfigurationExtension * soap_new_req_tt__RuleEngineConfigurationExtension(
	struct soap *soap)
{
	tt__RuleEngineConfigurationExtension *_p = soap_new_tt__RuleEngineConfigurationExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__RuleEngineConfigurationExtension * soap_new_set_tt__RuleEngineConfigurationExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__RuleEngineConfigurationExtension *_p = soap_new_tt__RuleEngineConfigurationExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__RuleEngineConfigurationExtension::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__RuleEngineConfigurationExtension(struct soap *soap, tt__RuleEngineConfigurationExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:RuleEngineConfigurationExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__RuleEngineConfigurationExtension * SOAP_FMAC4 soap_get_tt__RuleEngineConfigurationExtension(struct soap*, tt__RuleEngineConfigurationExtension *, const char*, const char*);

inline int soap_read_tt__RuleEngineConfigurationExtension(struct soap *soap, tt__RuleEngineConfigurationExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__RuleEngineConfigurationExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__RuleEngineConfiguration_DEFINED
#define SOAP_TYPE_tt__RuleEngineConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RuleEngineConfiguration(struct soap*, const char*, int, const tt__RuleEngineConfiguration *, const char*);
SOAP_FMAC3 tt__RuleEngineConfiguration * SOAP_FMAC4 soap_in_tt__RuleEngineConfiguration(struct soap*, const char*, tt__RuleEngineConfiguration *, const char*);
SOAP_FMAC1 tt__RuleEngineConfiguration * SOAP_FMAC2 soap_instantiate_tt__RuleEngineConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__RuleEngineConfiguration * soap_new_tt__RuleEngineConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__RuleEngineConfiguration(soap, n, NULL, NULL, NULL);
}

inline tt__RuleEngineConfiguration * soap_new_req_tt__RuleEngineConfiguration(
	struct soap *soap)
{
	tt__RuleEngineConfiguration *_p = soap_new_tt__RuleEngineConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__RuleEngineConfiguration * soap_new_set_tt__RuleEngineConfiguration(
	struct soap *soap,
	const std::vector<tt__Config *> & Rule,
	tt__RuleEngineConfigurationExtension *Extension,
	char *__anyAttribute,
	char *__item1)
{
	tt__RuleEngineConfiguration *_p = soap_new_tt__RuleEngineConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__RuleEngineConfiguration::Rule = Rule;
		_p->tt__RuleEngineConfiguration::Extension = Extension;
		_p->tt__RuleEngineConfiguration::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__RuleEngineConfiguration(struct soap *soap, tt__RuleEngineConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:RuleEngineConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__RuleEngineConfiguration * SOAP_FMAC4 soap_get_tt__RuleEngineConfiguration(struct soap*, tt__RuleEngineConfiguration *, const char*, const char*);

inline int soap_read_tt__RuleEngineConfiguration(struct soap *soap, tt__RuleEngineConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__RuleEngineConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__AnalyticsEngineConfigurationExtension_DEFINED
#define SOAP_TYPE_tt__AnalyticsEngineConfigurationExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AnalyticsEngineConfigurationExtension(struct soap*, const char*, int, const tt__AnalyticsEngineConfigurationExtension *, const char*);
SOAP_FMAC3 tt__AnalyticsEngineConfigurationExtension * SOAP_FMAC4 soap_in_tt__AnalyticsEngineConfigurationExtension(struct soap*, const char*, tt__AnalyticsEngineConfigurationExtension *, const char*);
SOAP_FMAC1 tt__AnalyticsEngineConfigurationExtension * SOAP_FMAC2 soap_instantiate_tt__AnalyticsEngineConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__AnalyticsEngineConfigurationExtension * soap_new_tt__AnalyticsEngineConfigurationExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__AnalyticsEngineConfigurationExtension(soap, n, NULL, NULL, NULL);
}

inline tt__AnalyticsEngineConfigurationExtension * soap_new_req_tt__AnalyticsEngineConfigurationExtension(
	struct soap *soap)
{
	tt__AnalyticsEngineConfigurationExtension *_p = soap_new_tt__AnalyticsEngineConfigurationExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__AnalyticsEngineConfigurationExtension * soap_new_set_tt__AnalyticsEngineConfigurationExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__AnalyticsEngineConfigurationExtension *_p = soap_new_tt__AnalyticsEngineConfigurationExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AnalyticsEngineConfigurationExtension::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__AnalyticsEngineConfigurationExtension(struct soap *soap, tt__AnalyticsEngineConfigurationExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AnalyticsEngineConfigurationExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__AnalyticsEngineConfigurationExtension * SOAP_FMAC4 soap_get_tt__AnalyticsEngineConfigurationExtension(struct soap*, tt__AnalyticsEngineConfigurationExtension *, const char*, const char*);

inline int soap_read_tt__AnalyticsEngineConfigurationExtension(struct soap *soap, tt__AnalyticsEngineConfigurationExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__AnalyticsEngineConfigurationExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__AnalyticsEngineConfiguration_DEFINED
#define SOAP_TYPE_tt__AnalyticsEngineConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AnalyticsEngineConfiguration(struct soap*, const char*, int, const tt__AnalyticsEngineConfiguration *, const char*);
SOAP_FMAC3 tt__AnalyticsEngineConfiguration * SOAP_FMAC4 soap_in_tt__AnalyticsEngineConfiguration(struct soap*, const char*, tt__AnalyticsEngineConfiguration *, const char*);
SOAP_FMAC1 tt__AnalyticsEngineConfiguration * SOAP_FMAC2 soap_instantiate_tt__AnalyticsEngineConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__AnalyticsEngineConfiguration * soap_new_tt__AnalyticsEngineConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__AnalyticsEngineConfiguration(soap, n, NULL, NULL, NULL);
}

inline tt__AnalyticsEngineConfiguration * soap_new_req_tt__AnalyticsEngineConfiguration(
	struct soap *soap)
{
	tt__AnalyticsEngineConfiguration *_p = soap_new_tt__AnalyticsEngineConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__AnalyticsEngineConfiguration * soap_new_set_tt__AnalyticsEngineConfiguration(
	struct soap *soap,
	const std::vector<tt__Config *> & AnalyticsModule,
	tt__AnalyticsEngineConfigurationExtension *Extension,
	char *__anyAttribute,
	char *__item1)
{
	tt__AnalyticsEngineConfiguration *_p = soap_new_tt__AnalyticsEngineConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AnalyticsEngineConfiguration::AnalyticsModule = AnalyticsModule;
		_p->tt__AnalyticsEngineConfiguration::Extension = Extension;
		_p->tt__AnalyticsEngineConfiguration::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__AnalyticsEngineConfiguration(struct soap *soap, tt__AnalyticsEngineConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AnalyticsEngineConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__AnalyticsEngineConfiguration * SOAP_FMAC4 soap_get_tt__AnalyticsEngineConfiguration(struct soap*, tt__AnalyticsEngineConfiguration *, const char*, const char*);

inline int soap_read_tt__AnalyticsEngineConfiguration(struct soap *soap, tt__AnalyticsEngineConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__AnalyticsEngineConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__MotionInCells_DEFINED
#define SOAP_TYPE_tt__MotionInCells_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__MotionInCells(struct soap*, const char*, int, const tt__MotionInCells *, const char*);
SOAP_FMAC3 tt__MotionInCells * SOAP_FMAC4 soap_in_tt__MotionInCells(struct soap*, const char*, tt__MotionInCells *, const char*);
SOAP_FMAC1 tt__MotionInCells * SOAP_FMAC2 soap_instantiate_tt__MotionInCells(struct soap*, int, const char*, const char*, size_t*);

inline tt__MotionInCells * soap_new_tt__MotionInCells(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__MotionInCells(soap, n, NULL, NULL, NULL);
}

inline tt__MotionInCells * soap_new_req_tt__MotionInCells(
	struct soap *soap,
	const std::string& Columns,
	const std::string& Rows,
	const xsd__base64Binary& Cells)
{
	tt__MotionInCells *_p = soap_new_tt__MotionInCells(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__MotionInCells::Columns = Columns;
		_p->tt__MotionInCells::Rows = Rows;
		_p->tt__MotionInCells::Cells = Cells;
	}
	return _p;
}

inline tt__MotionInCells * soap_new_set_tt__MotionInCells(
	struct soap *soap,
	const std::vector<char *> & __any,
	const std::string& Columns,
	const std::string& Rows,
	const xsd__base64Binary& Cells,
	char *__anyAttribute,
	char *__item1)
{
	tt__MotionInCells *_p = soap_new_tt__MotionInCells(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__MotionInCells::__any = __any;
		_p->tt__MotionInCells::Columns = Columns;
		_p->tt__MotionInCells::Rows = Rows;
		_p->tt__MotionInCells::Cells = Cells;
		_p->tt__MotionInCells::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__MotionInCells(struct soap *soap, tt__MotionInCells const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:MotionInCells", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__MotionInCells * SOAP_FMAC4 soap_get_tt__MotionInCells(struct soap*, tt__MotionInCells *, const char*, const char*);

inline int soap_read_tt__MotionInCells(struct soap *soap, tt__MotionInCells *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__MotionInCells(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__ObjectTreeExtension_DEFINED
#define SOAP_TYPE_tt__ObjectTreeExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ObjectTreeExtension(struct soap*, const char*, int, const tt__ObjectTreeExtension *, const char*);
SOAP_FMAC3 tt__ObjectTreeExtension * SOAP_FMAC4 soap_in_tt__ObjectTreeExtension(struct soap*, const char*, tt__ObjectTreeExtension *, const char*);
SOAP_FMAC1 tt__ObjectTreeExtension * SOAP_FMAC2 soap_instantiate_tt__ObjectTreeExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__ObjectTreeExtension * soap_new_tt__ObjectTreeExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ObjectTreeExtension(soap, n, NULL, NULL, NULL);
}

inline tt__ObjectTreeExtension * soap_new_req_tt__ObjectTreeExtension(
	struct soap *soap)
{
	tt__ObjectTreeExtension *_p = soap_new_tt__ObjectTreeExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__ObjectTreeExtension * soap_new_set_tt__ObjectTreeExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__ObjectTreeExtension *_p = soap_new_tt__ObjectTreeExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ObjectTreeExtension::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__ObjectTreeExtension(struct soap *soap, tt__ObjectTreeExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ObjectTreeExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__ObjectTreeExtension * SOAP_FMAC4 soap_get_tt__ObjectTreeExtension(struct soap*, tt__ObjectTreeExtension *, const char*, const char*);

inline int soap_read_tt__ObjectTreeExtension(struct soap *soap, tt__ObjectTreeExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__ObjectTreeExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__ObjectTree_DEFINED
#define SOAP_TYPE_tt__ObjectTree_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ObjectTree(struct soap*, const char*, int, const tt__ObjectTree *, const char*);
SOAP_FMAC3 tt__ObjectTree * SOAP_FMAC4 soap_in_tt__ObjectTree(struct soap*, const char*, tt__ObjectTree *, const char*);
SOAP_FMAC1 tt__ObjectTree * SOAP_FMAC2 soap_instantiate_tt__ObjectTree(struct soap*, int, const char*, const char*, size_t*);

inline tt__ObjectTree * soap_new_tt__ObjectTree(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ObjectTree(soap, n, NULL, NULL, NULL);
}

inline tt__ObjectTree * soap_new_req_tt__ObjectTree(
	struct soap *soap)
{
	tt__ObjectTree *_p = soap_new_tt__ObjectTree(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__ObjectTree * soap_new_set_tt__ObjectTree(
	struct soap *soap,
	const std::vector<tt__Rename *> & Rename,
	const std::vector<tt__Split *> & Split,
	const std::vector<tt__Merge *> & Merge,
	const std::vector<tt__ObjectId *> & Delete,
	tt__ObjectTreeExtension *Extension,
	char *__anyAttribute,
	char *__item1)
{
	tt__ObjectTree *_p = soap_new_tt__ObjectTree(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ObjectTree::Rename = Rename;
		_p->tt__ObjectTree::Split = Split;
		_p->tt__ObjectTree::Merge = Merge;
		_p->tt__ObjectTree::Delete = Delete;
		_p->tt__ObjectTree::Extension = Extension;
		_p->tt__ObjectTree::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__ObjectTree(struct soap *soap, tt__ObjectTree const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ObjectTree", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__ObjectTree * SOAP_FMAC4 soap_get_tt__ObjectTree(struct soap*, tt__ObjectTree *, const char*, const char*);

inline int soap_read_tt__ObjectTree(struct soap *soap, tt__ObjectTree *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__ObjectTree(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__BehaviourExtension_DEFINED
#define SOAP_TYPE_tt__BehaviourExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__BehaviourExtension(struct soap*, const char*, int, const tt__BehaviourExtension *, const char*);
SOAP_FMAC3 tt__BehaviourExtension * SOAP_FMAC4 soap_in_tt__BehaviourExtension(struct soap*, const char*, tt__BehaviourExtension *, const char*);
SOAP_FMAC1 tt__BehaviourExtension * SOAP_FMAC2 soap_instantiate_tt__BehaviourExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__BehaviourExtension * soap_new_tt__BehaviourExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__BehaviourExtension(soap, n, NULL, NULL, NULL);
}

inline tt__BehaviourExtension * soap_new_req_tt__BehaviourExtension(
	struct soap *soap)
{
	tt__BehaviourExtension *_p = soap_new_tt__BehaviourExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__BehaviourExtension * soap_new_set_tt__BehaviourExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__BehaviourExtension *_p = soap_new_tt__BehaviourExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__BehaviourExtension::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__BehaviourExtension(struct soap *soap, tt__BehaviourExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:BehaviourExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__BehaviourExtension * SOAP_FMAC4 soap_get_tt__BehaviourExtension(struct soap*, tt__BehaviourExtension *, const char*, const char*);

inline int soap_read_tt__BehaviourExtension(struct soap *soap, tt__BehaviourExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__BehaviourExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__Behaviour_DEFINED
#define SOAP_TYPE_tt__Behaviour_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Behaviour(struct soap*, const char*, int, const tt__Behaviour *, const char*);
SOAP_FMAC3 tt__Behaviour * SOAP_FMAC4 soap_in_tt__Behaviour(struct soap*, const char*, tt__Behaviour *, const char*);
SOAP_FMAC1 tt__Behaviour * SOAP_FMAC2 soap_instantiate_tt__Behaviour(struct soap*, int, const char*, const char*, size_t*);

inline tt__Behaviour * soap_new_tt__Behaviour(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Behaviour(soap, n, NULL, NULL, NULL);
}

inline tt__Behaviour * soap_new_req_tt__Behaviour(
	struct soap *soap)
{
	tt__Behaviour *_p = soap_new_tt__Behaviour(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__Behaviour * soap_new_set_tt__Behaviour(
	struct soap *soap,
	_tt__Behaviour_Removed *Removed,
	_tt__Behaviour_Idle *Idle,
	tt__BehaviourExtension *Extension,
	char *__anyAttribute,
	char *__item1)
{
	tt__Behaviour *_p = soap_new_tt__Behaviour(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Behaviour::Removed = Removed;
		_p->tt__Behaviour::Idle = Idle;
		_p->tt__Behaviour::Extension = Extension;
		_p->tt__Behaviour::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__Behaviour(struct soap *soap, tt__Behaviour const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Behaviour", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__Behaviour * SOAP_FMAC4 soap_get_tt__Behaviour(struct soap*, tt__Behaviour *, const char*, const char*);

inline int soap_read_tt__Behaviour(struct soap *soap, tt__Behaviour *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__Behaviour(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__ObjectId_DEFINED
#define SOAP_TYPE_tt__ObjectId_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ObjectId(struct soap*, const char*, int, const tt__ObjectId *, const char*);
SOAP_FMAC3 tt__ObjectId * SOAP_FMAC4 soap_in_tt__ObjectId(struct soap*, const char*, tt__ObjectId *, const char*);
SOAP_FMAC1 tt__ObjectId * SOAP_FMAC2 soap_instantiate_tt__ObjectId(struct soap*, int, const char*, const char*, size_t*);

inline tt__ObjectId * soap_new_tt__ObjectId(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ObjectId(soap, n, NULL, NULL, NULL);
}

inline tt__ObjectId * soap_new_req_tt__ObjectId(
	struct soap *soap)
{
	tt__ObjectId *_p = soap_new_tt__ObjectId(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__ObjectId * soap_new_set_tt__ObjectId(
	struct soap *soap,
	std::string *ObjectId,
	char *__item1)
{
	tt__ObjectId *_p = soap_new_tt__ObjectId(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ObjectId::ObjectId = ObjectId;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__ObjectId(struct soap *soap, tt__ObjectId const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ObjectId", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__ObjectId * SOAP_FMAC4 soap_get_tt__ObjectId(struct soap*, tt__ObjectId *, const char*, const char*);

inline int soap_read_tt__ObjectId(struct soap *soap, tt__ObjectId *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__ObjectId(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__Rename_DEFINED
#define SOAP_TYPE_tt__Rename_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Rename(struct soap*, const char*, int, const tt__Rename *, const char*);
SOAP_FMAC3 tt__Rename * SOAP_FMAC4 soap_in_tt__Rename(struct soap*, const char*, tt__Rename *, const char*);
SOAP_FMAC1 tt__Rename * SOAP_FMAC2 soap_instantiate_tt__Rename(struct soap*, int, const char*, const char*, size_t*);

inline tt__Rename * soap_new_tt__Rename(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Rename(soap, n, NULL, NULL, NULL);
}

inline tt__Rename * soap_new_req_tt__Rename(
	struct soap *soap,
	tt__ObjectId *from,
	tt__ObjectId *to)
{
	tt__Rename *_p = soap_new_tt__Rename(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Rename::from = from;
		_p->tt__Rename::to = to;
	}
	return _p;
}

inline tt__Rename * soap_new_set_tt__Rename(
	struct soap *soap,
	tt__ObjectId *from,
	tt__ObjectId *to,
	char *__item1)
{
	tt__Rename *_p = soap_new_tt__Rename(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Rename::from = from;
		_p->tt__Rename::to = to;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__Rename(struct soap *soap, tt__Rename const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Rename", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__Rename * SOAP_FMAC4 soap_get_tt__Rename(struct soap*, tt__Rename *, const char*, const char*);

inline int soap_read_tt__Rename(struct soap *soap, tt__Rename *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__Rename(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__Split_DEFINED
#define SOAP_TYPE_tt__Split_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Split(struct soap*, const char*, int, const tt__Split *, const char*);
SOAP_FMAC3 tt__Split * SOAP_FMAC4 soap_in_tt__Split(struct soap*, const char*, tt__Split *, const char*);
SOAP_FMAC1 tt__Split * SOAP_FMAC2 soap_instantiate_tt__Split(struct soap*, int, const char*, const char*, size_t*);

inline tt__Split * soap_new_tt__Split(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Split(soap, n, NULL, NULL, NULL);
}

inline tt__Split * soap_new_req_tt__Split(
	struct soap *soap,
	tt__ObjectId *from,
	const std::vector<tt__ObjectId *> & to)
{
	tt__Split *_p = soap_new_tt__Split(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Split::from = from;
		_p->tt__Split::to = to;
	}
	return _p;
}

inline tt__Split * soap_new_set_tt__Split(
	struct soap *soap,
	tt__ObjectId *from,
	const std::vector<tt__ObjectId *> & to,
	char *__item1)
{
	tt__Split *_p = soap_new_tt__Split(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Split::from = from;
		_p->tt__Split::to = to;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__Split(struct soap *soap, tt__Split const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Split", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__Split * SOAP_FMAC4 soap_get_tt__Split(struct soap*, tt__Split *, const char*, const char*);

inline int soap_read_tt__Split(struct soap *soap, tt__Split *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__Split(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__Merge_DEFINED
#define SOAP_TYPE_tt__Merge_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Merge(struct soap*, const char*, int, const tt__Merge *, const char*);
SOAP_FMAC3 tt__Merge * SOAP_FMAC4 soap_in_tt__Merge(struct soap*, const char*, tt__Merge *, const char*);
SOAP_FMAC1 tt__Merge * SOAP_FMAC2 soap_instantiate_tt__Merge(struct soap*, int, const char*, const char*, size_t*);

inline tt__Merge * soap_new_tt__Merge(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Merge(soap, n, NULL, NULL, NULL);
}

inline tt__Merge * soap_new_req_tt__Merge(
	struct soap *soap,
	const std::vector<tt__ObjectId *> & from,
	tt__ObjectId *to)
{
	tt__Merge *_p = soap_new_tt__Merge(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Merge::from = from;
		_p->tt__Merge::to = to;
	}
	return _p;
}

inline tt__Merge * soap_new_set_tt__Merge(
	struct soap *soap,
	const std::vector<tt__ObjectId *> & from,
	tt__ObjectId *to,
	char *__item1)
{
	tt__Merge *_p = soap_new_tt__Merge(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Merge::from = from;
		_p->tt__Merge::to = to;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__Merge(struct soap *soap, tt__Merge const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Merge", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__Merge * SOAP_FMAC4 soap_get_tt__Merge(struct soap*, tt__Merge *, const char*, const char*);

inline int soap_read_tt__Merge(struct soap *soap, tt__Merge *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__Merge(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__FrameExtension2_DEFINED
#define SOAP_TYPE_tt__FrameExtension2_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__FrameExtension2(struct soap*, const char*, int, const tt__FrameExtension2 *, const char*);
SOAP_FMAC3 tt__FrameExtension2 * SOAP_FMAC4 soap_in_tt__FrameExtension2(struct soap*, const char*, tt__FrameExtension2 *, const char*);
SOAP_FMAC1 tt__FrameExtension2 * SOAP_FMAC2 soap_instantiate_tt__FrameExtension2(struct soap*, int, const char*, const char*, size_t*);

inline tt__FrameExtension2 * soap_new_tt__FrameExtension2(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__FrameExtension2(soap, n, NULL, NULL, NULL);
}

inline tt__FrameExtension2 * soap_new_req_tt__FrameExtension2(
	struct soap *soap)
{
	tt__FrameExtension2 *_p = soap_new_tt__FrameExtension2(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__FrameExtension2 * soap_new_set_tt__FrameExtension2(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__FrameExtension2 *_p = soap_new_tt__FrameExtension2(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__FrameExtension2::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__FrameExtension2(struct soap *soap, tt__FrameExtension2 const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:FrameExtension2", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__FrameExtension2 * SOAP_FMAC4 soap_get_tt__FrameExtension2(struct soap*, tt__FrameExtension2 *, const char*, const char*);

inline int soap_read_tt__FrameExtension2(struct soap *soap, tt__FrameExtension2 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__FrameExtension2(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__FrameExtension_DEFINED
#define SOAP_TYPE_tt__FrameExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__FrameExtension(struct soap*, const char*, int, const tt__FrameExtension *, const char*);
SOAP_FMAC3 tt__FrameExtension * SOAP_FMAC4 soap_in_tt__FrameExtension(struct soap*, const char*, tt__FrameExtension *, const char*);
SOAP_FMAC1 tt__FrameExtension * SOAP_FMAC2 soap_instantiate_tt__FrameExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__FrameExtension * soap_new_tt__FrameExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__FrameExtension(soap, n, NULL, NULL, NULL);
}

inline tt__FrameExtension * soap_new_req_tt__FrameExtension(
	struct soap *soap)
{
	tt__FrameExtension *_p = soap_new_tt__FrameExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__FrameExtension * soap_new_set_tt__FrameExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	tt__MotionInCells *MotionInCells,
	tt__FrameExtension2 *Extension,
	char *__item1)
{
	tt__FrameExtension *_p = soap_new_tt__FrameExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__FrameExtension::__any = __any;
		_p->tt__FrameExtension::MotionInCells = MotionInCells;
		_p->tt__FrameExtension::Extension = Extension;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__FrameExtension(struct soap *soap, tt__FrameExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:FrameExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__FrameExtension * SOAP_FMAC4 soap_get_tt__FrameExtension(struct soap*, tt__FrameExtension *, const char*, const char*);

inline int soap_read_tt__FrameExtension(struct soap *soap, tt__FrameExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__FrameExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__Frame_DEFINED
#define SOAP_TYPE_tt__Frame_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Frame(struct soap*, const char*, int, const tt__Frame *, const char*);
SOAP_FMAC3 tt__Frame * SOAP_FMAC4 soap_in_tt__Frame(struct soap*, const char*, tt__Frame *, const char*);
SOAP_FMAC1 tt__Frame * SOAP_FMAC2 soap_instantiate_tt__Frame(struct soap*, int, const char*, const char*, size_t*);

inline tt__Frame * soap_new_tt__Frame(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Frame(soap, n, NULL, NULL, NULL);
}

inline tt__Frame * soap_new_req_tt__Frame(
	struct soap *soap,
	time_t UtcTime)
{
	tt__Frame *_p = soap_new_tt__Frame(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Frame::UtcTime = UtcTime;
	}
	return _p;
}

inline tt__Frame * soap_new_set_tt__Frame(
	struct soap *soap,
	tt__PTZStatus *PTZStatus,
	tt__Transformation *Transformation,
	const std::vector<tt__Object *> & Object,
	tt__ObjectTree *ObjectTree,
	tt__FrameExtension *Extension,
	time_t UtcTime,
	char *__anyAttribute,
	char *__item1)
{
	tt__Frame *_p = soap_new_tt__Frame(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Frame::PTZStatus = PTZStatus;
		_p->tt__Frame::Transformation = Transformation;
		_p->tt__Frame::Object = Object;
		_p->tt__Frame::ObjectTree = ObjectTree;
		_p->tt__Frame::Extension = Extension;
		_p->tt__Frame::UtcTime = UtcTime;
		_p->tt__Frame::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__Frame(struct soap *soap, tt__Frame const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Frame", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__Frame * SOAP_FMAC4 soap_get_tt__Frame(struct soap*, tt__Frame *, const char*, const char*);

inline int soap_read_tt__Frame(struct soap *soap, tt__Frame *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__Frame(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__TransformationExtension_DEFINED
#define SOAP_TYPE_tt__TransformationExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__TransformationExtension(struct soap*, const char*, int, const tt__TransformationExtension *, const char*);
SOAP_FMAC3 tt__TransformationExtension * SOAP_FMAC4 soap_in_tt__TransformationExtension(struct soap*, const char*, tt__TransformationExtension *, const char*);
SOAP_FMAC1 tt__TransformationExtension * SOAP_FMAC2 soap_instantiate_tt__TransformationExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__TransformationExtension * soap_new_tt__TransformationExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__TransformationExtension(soap, n, NULL, NULL, NULL);
}

inline tt__TransformationExtension * soap_new_req_tt__TransformationExtension(
	struct soap *soap)
{
	tt__TransformationExtension *_p = soap_new_tt__TransformationExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__TransformationExtension * soap_new_set_tt__TransformationExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__TransformationExtension *_p = soap_new_tt__TransformationExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__TransformationExtension::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__TransformationExtension(struct soap *soap, tt__TransformationExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:TransformationExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__TransformationExtension * SOAP_FMAC4 soap_get_tt__TransformationExtension(struct soap*, tt__TransformationExtension *, const char*, const char*);

inline int soap_read_tt__TransformationExtension(struct soap *soap, tt__TransformationExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__TransformationExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__Transformation_DEFINED
#define SOAP_TYPE_tt__Transformation_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Transformation(struct soap*, const char*, int, const tt__Transformation *, const char*);
SOAP_FMAC3 tt__Transformation * SOAP_FMAC4 soap_in_tt__Transformation(struct soap*, const char*, tt__Transformation *, const char*);
SOAP_FMAC1 tt__Transformation * SOAP_FMAC2 soap_instantiate_tt__Transformation(struct soap*, int, const char*, const char*, size_t*);

inline tt__Transformation * soap_new_tt__Transformation(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Transformation(soap, n, NULL, NULL, NULL);
}

inline tt__Transformation * soap_new_req_tt__Transformation(
	struct soap *soap)
{
	tt__Transformation *_p = soap_new_tt__Transformation(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__Transformation * soap_new_set_tt__Transformation(
	struct soap *soap,
	tt__Vector *Translate,
	tt__Vector *Scale,
	tt__TransformationExtension *Extension,
	char *__anyAttribute,
	char *__item1)
{
	tt__Transformation *_p = soap_new_tt__Transformation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Transformation::Translate = Translate;
		_p->tt__Transformation::Scale = Scale;
		_p->tt__Transformation::Extension = Extension;
		_p->tt__Transformation::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__Transformation(struct soap *soap, tt__Transformation const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Transformation", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__Transformation * SOAP_FMAC4 soap_get_tt__Transformation(struct soap*, tt__Transformation *, const char*, const char*);

inline int soap_read_tt__Transformation(struct soap *soap, tt__Transformation *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__Transformation(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__ObjectExtension_DEFINED
#define SOAP_TYPE_tt__ObjectExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ObjectExtension(struct soap*, const char*, int, const tt__ObjectExtension *, const char*);
SOAP_FMAC3 tt__ObjectExtension * SOAP_FMAC4 soap_in_tt__ObjectExtension(struct soap*, const char*, tt__ObjectExtension *, const char*);
SOAP_FMAC1 tt__ObjectExtension * SOAP_FMAC2 soap_instantiate_tt__ObjectExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__ObjectExtension * soap_new_tt__ObjectExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ObjectExtension(soap, n, NULL, NULL, NULL);
}

inline tt__ObjectExtension * soap_new_req_tt__ObjectExtension(
	struct soap *soap)
{
	tt__ObjectExtension *_p = soap_new_tt__ObjectExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__ObjectExtension * soap_new_set_tt__ObjectExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__ObjectExtension *_p = soap_new_tt__ObjectExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ObjectExtension::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__ObjectExtension(struct soap *soap, tt__ObjectExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ObjectExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__ObjectExtension * SOAP_FMAC4 soap_get_tt__ObjectExtension(struct soap*, tt__ObjectExtension *, const char*, const char*);

inline int soap_read_tt__ObjectExtension(struct soap *soap, tt__ObjectExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__ObjectExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__Object_DEFINED
#define SOAP_TYPE_tt__Object_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Object(struct soap*, const char*, int, const tt__Object *, const char*);
SOAP_FMAC3 tt__Object * SOAP_FMAC4 soap_in_tt__Object(struct soap*, const char*, tt__Object *, const char*);
SOAP_FMAC1 tt__Object * SOAP_FMAC2 soap_instantiate_tt__Object(struct soap*, int, const char*, const char*, size_t*);

inline tt__Object * soap_new_tt__Object(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Object(soap, n, NULL, NULL, NULL);
}

inline tt__Object * soap_new_req_tt__Object(
	struct soap *soap)
{
	tt__Object *_p = soap_new_tt__Object(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__Object * soap_new_set_tt__Object(
	struct soap *soap,
	tt__Appearance *Appearance,
	tt__Behaviour *Behaviour,
	tt__ObjectExtension *Extension,
	char *__anyAttribute,
	std::string *ObjectId1,
	char *__item2)
{
	tt__Object *_p = soap_new_tt__Object(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Object::Appearance = Appearance;
		_p->tt__Object::Behaviour = Behaviour;
		_p->tt__Object::Extension = Extension;
		_p->tt__Object::__anyAttribute = __anyAttribute;
		_p->tt__ObjectId::ObjectId = ObjectId1;
		_p->xsd__anyType::__item = __item2;
	}
	return _p;
}

inline int soap_write_tt__Object(struct soap *soap, tt__Object const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Object", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__Object * SOAP_FMAC4 soap_get_tt__Object(struct soap*, tt__Object *, const char*, const char*);

inline int soap_read_tt__Object(struct soap *soap, tt__Object *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__Object(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__OtherType_DEFINED
#define SOAP_TYPE_tt__OtherType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__OtherType(struct soap*, const char*, int, const tt__OtherType *, const char*);
SOAP_FMAC3 tt__OtherType * SOAP_FMAC4 soap_in_tt__OtherType(struct soap*, const char*, tt__OtherType *, const char*);
SOAP_FMAC1 tt__OtherType * SOAP_FMAC2 soap_instantiate_tt__OtherType(struct soap*, int, const char*, const char*, size_t*);

inline tt__OtherType * soap_new_tt__OtherType(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__OtherType(soap, n, NULL, NULL, NULL);
}

inline tt__OtherType * soap_new_req_tt__OtherType(
	struct soap *soap,
	const std::string& Type,
	float Likelihood)
{
	tt__OtherType *_p = soap_new_tt__OtherType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__OtherType::Type = Type;
		_p->tt__OtherType::Likelihood = Likelihood;
	}
	return _p;
}

inline tt__OtherType * soap_new_set_tt__OtherType(
	struct soap *soap,
	const std::string& Type,
	float Likelihood,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__OtherType *_p = soap_new_tt__OtherType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__OtherType::Type = Type;
		_p->tt__OtherType::Likelihood = Likelihood;
		_p->tt__OtherType::__any = __any;
		_p->tt__OtherType::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__OtherType(struct soap *soap, tt__OtherType const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:OtherType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__OtherType * SOAP_FMAC4 soap_get_tt__OtherType(struct soap*, tt__OtherType *, const char*, const char*);

inline int soap_read_tt__OtherType(struct soap *soap, tt__OtherType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__OtherType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__ClassDescriptorExtension2_DEFINED
#define SOAP_TYPE_tt__ClassDescriptorExtension2_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ClassDescriptorExtension2(struct soap*, const char*, int, const tt__ClassDescriptorExtension2 *, const char*);
SOAP_FMAC3 tt__ClassDescriptorExtension2 * SOAP_FMAC4 soap_in_tt__ClassDescriptorExtension2(struct soap*, const char*, tt__ClassDescriptorExtension2 *, const char*);
SOAP_FMAC1 tt__ClassDescriptorExtension2 * SOAP_FMAC2 soap_instantiate_tt__ClassDescriptorExtension2(struct soap*, int, const char*, const char*, size_t*);

inline tt__ClassDescriptorExtension2 * soap_new_tt__ClassDescriptorExtension2(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ClassDescriptorExtension2(soap, n, NULL, NULL, NULL);
}

inline tt__ClassDescriptorExtension2 * soap_new_req_tt__ClassDescriptorExtension2(
	struct soap *soap)
{
	tt__ClassDescriptorExtension2 *_p = soap_new_tt__ClassDescriptorExtension2(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__ClassDescriptorExtension2 * soap_new_set_tt__ClassDescriptorExtension2(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__ClassDescriptorExtension2 *_p = soap_new_tt__ClassDescriptorExtension2(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ClassDescriptorExtension2::__any = __any;
		_p->tt__ClassDescriptorExtension2::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__ClassDescriptorExtension2(struct soap *soap, tt__ClassDescriptorExtension2 const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ClassDescriptorExtension2", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__ClassDescriptorExtension2 * SOAP_FMAC4 soap_get_tt__ClassDescriptorExtension2(struct soap*, tt__ClassDescriptorExtension2 *, const char*, const char*);

inline int soap_read_tt__ClassDescriptorExtension2(struct soap *soap, tt__ClassDescriptorExtension2 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__ClassDescriptorExtension2(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__ClassDescriptorExtension_DEFINED
#define SOAP_TYPE_tt__ClassDescriptorExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ClassDescriptorExtension(struct soap*, const char*, int, const tt__ClassDescriptorExtension *, const char*);
SOAP_FMAC3 tt__ClassDescriptorExtension * SOAP_FMAC4 soap_in_tt__ClassDescriptorExtension(struct soap*, const char*, tt__ClassDescriptorExtension *, const char*);
SOAP_FMAC1 tt__ClassDescriptorExtension * SOAP_FMAC2 soap_instantiate_tt__ClassDescriptorExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__ClassDescriptorExtension * soap_new_tt__ClassDescriptorExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ClassDescriptorExtension(soap, n, NULL, NULL, NULL);
}

inline tt__ClassDescriptorExtension * soap_new_req_tt__ClassDescriptorExtension(
	struct soap *soap,
	const std::vector<tt__OtherType *> & OtherTypes)
{
	tt__ClassDescriptorExtension *_p = soap_new_tt__ClassDescriptorExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ClassDescriptorExtension::OtherTypes = OtherTypes;
	}
	return _p;
}

inline tt__ClassDescriptorExtension * soap_new_set_tt__ClassDescriptorExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	const std::vector<tt__OtherType *> & OtherTypes,
	tt__ClassDescriptorExtension2 *Extension,
	char *__item1)
{
	tt__ClassDescriptorExtension *_p = soap_new_tt__ClassDescriptorExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ClassDescriptorExtension::__any = __any;
		_p->tt__ClassDescriptorExtension::OtherTypes = OtherTypes;
		_p->tt__ClassDescriptorExtension::Extension = Extension;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__ClassDescriptorExtension(struct soap *soap, tt__ClassDescriptorExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ClassDescriptorExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__ClassDescriptorExtension * SOAP_FMAC4 soap_get_tt__ClassDescriptorExtension(struct soap*, tt__ClassDescriptorExtension *, const char*, const char*);

inline int soap_read_tt__ClassDescriptorExtension(struct soap *soap, tt__ClassDescriptorExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__ClassDescriptorExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__ClassDescriptor_DEFINED
#define SOAP_TYPE_tt__ClassDescriptor_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ClassDescriptor(struct soap*, const char*, int, const tt__ClassDescriptor *, const char*);
SOAP_FMAC3 tt__ClassDescriptor * SOAP_FMAC4 soap_in_tt__ClassDescriptor(struct soap*, const char*, tt__ClassDescriptor *, const char*);
SOAP_FMAC1 tt__ClassDescriptor * SOAP_FMAC2 soap_instantiate_tt__ClassDescriptor(struct soap*, int, const char*, const char*, size_t*);

inline tt__ClassDescriptor * soap_new_tt__ClassDescriptor(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ClassDescriptor(soap, n, NULL, NULL, NULL);
}

inline tt__ClassDescriptor * soap_new_req_tt__ClassDescriptor(
	struct soap *soap)
{
	tt__ClassDescriptor *_p = soap_new_tt__ClassDescriptor(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__ClassDescriptor * soap_new_set_tt__ClassDescriptor(
	struct soap *soap,
	std::vector<_tt__ClassDescriptor_ClassCandidate> *ClassCandidate,
	tt__ClassDescriptorExtension *Extension,
	char *__item1)
{
	tt__ClassDescriptor *_p = soap_new_tt__ClassDescriptor(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ClassDescriptor::ClassCandidate = ClassCandidate;
		_p->tt__ClassDescriptor::Extension = Extension;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__ClassDescriptor(struct soap *soap, tt__ClassDescriptor const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ClassDescriptor", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__ClassDescriptor * SOAP_FMAC4 soap_get_tt__ClassDescriptor(struct soap*, tt__ClassDescriptor *, const char*, const char*);

inline int soap_read_tt__ClassDescriptor(struct soap *soap, tt__ClassDescriptor *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__ClassDescriptor(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__ColorDescriptorExtension_DEFINED
#define SOAP_TYPE_tt__ColorDescriptorExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ColorDescriptorExtension(struct soap*, const char*, int, const tt__ColorDescriptorExtension *, const char*);
SOAP_FMAC3 tt__ColorDescriptorExtension * SOAP_FMAC4 soap_in_tt__ColorDescriptorExtension(struct soap*, const char*, tt__ColorDescriptorExtension *, const char*);
SOAP_FMAC1 tt__ColorDescriptorExtension * SOAP_FMAC2 soap_instantiate_tt__ColorDescriptorExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__ColorDescriptorExtension * soap_new_tt__ColorDescriptorExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ColorDescriptorExtension(soap, n, NULL, NULL, NULL);
}

inline tt__ColorDescriptorExtension * soap_new_req_tt__ColorDescriptorExtension(
	struct soap *soap)
{
	tt__ColorDescriptorExtension *_p = soap_new_tt__ColorDescriptorExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__ColorDescriptorExtension * soap_new_set_tt__ColorDescriptorExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__ColorDescriptorExtension *_p = soap_new_tt__ColorDescriptorExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ColorDescriptorExtension::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__ColorDescriptorExtension(struct soap *soap, tt__ColorDescriptorExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ColorDescriptorExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__ColorDescriptorExtension * SOAP_FMAC4 soap_get_tt__ColorDescriptorExtension(struct soap*, tt__ColorDescriptorExtension *, const char*, const char*);

inline int soap_read_tt__ColorDescriptorExtension(struct soap *soap, tt__ColorDescriptorExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__ColorDescriptorExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__ColorDescriptor_DEFINED
#define SOAP_TYPE_tt__ColorDescriptor_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ColorDescriptor(struct soap*, const char*, int, const tt__ColorDescriptor *, const char*);
SOAP_FMAC3 tt__ColorDescriptor * SOAP_FMAC4 soap_in_tt__ColorDescriptor(struct soap*, const char*, tt__ColorDescriptor *, const char*);
SOAP_FMAC1 tt__ColorDescriptor * SOAP_FMAC2 soap_instantiate_tt__ColorDescriptor(struct soap*, int, const char*, const char*, size_t*);

inline tt__ColorDescriptor * soap_new_tt__ColorDescriptor(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ColorDescriptor(soap, n, NULL, NULL, NULL);
}

inline tt__ColorDescriptor * soap_new_req_tt__ColorDescriptor(
	struct soap *soap)
{
	tt__ColorDescriptor *_p = soap_new_tt__ColorDescriptor(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__ColorDescriptor * soap_new_set_tt__ColorDescriptor(
	struct soap *soap,
	std::vector<_tt__ColorDescriptor_ColorCluster> *ColorCluster,
	tt__ColorDescriptorExtension *Extension,
	char *__anyAttribute,
	char *__item1)
{
	tt__ColorDescriptor *_p = soap_new_tt__ColorDescriptor(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ColorDescriptor::ColorCluster = ColorCluster;
		_p->tt__ColorDescriptor::Extension = Extension;
		_p->tt__ColorDescriptor::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__ColorDescriptor(struct soap *soap, tt__ColorDescriptor const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ColorDescriptor", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__ColorDescriptor * SOAP_FMAC4 soap_get_tt__ColorDescriptor(struct soap*, tt__ColorDescriptor *, const char*, const char*);

inline int soap_read_tt__ColorDescriptor(struct soap *soap, tt__ColorDescriptor *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__ColorDescriptor(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__ShapeDescriptorExtension_DEFINED
#define SOAP_TYPE_tt__ShapeDescriptorExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ShapeDescriptorExtension(struct soap*, const char*, int, const tt__ShapeDescriptorExtension *, const char*);
SOAP_FMAC3 tt__ShapeDescriptorExtension * SOAP_FMAC4 soap_in_tt__ShapeDescriptorExtension(struct soap*, const char*, tt__ShapeDescriptorExtension *, const char*);
SOAP_FMAC1 tt__ShapeDescriptorExtension * SOAP_FMAC2 soap_instantiate_tt__ShapeDescriptorExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__ShapeDescriptorExtension * soap_new_tt__ShapeDescriptorExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ShapeDescriptorExtension(soap, n, NULL, NULL, NULL);
}

inline tt__ShapeDescriptorExtension * soap_new_req_tt__ShapeDescriptorExtension(
	struct soap *soap)
{
	tt__ShapeDescriptorExtension *_p = soap_new_tt__ShapeDescriptorExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__ShapeDescriptorExtension * soap_new_set_tt__ShapeDescriptorExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__ShapeDescriptorExtension *_p = soap_new_tt__ShapeDescriptorExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ShapeDescriptorExtension::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__ShapeDescriptorExtension(struct soap *soap, tt__ShapeDescriptorExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ShapeDescriptorExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__ShapeDescriptorExtension * SOAP_FMAC4 soap_get_tt__ShapeDescriptorExtension(struct soap*, tt__ShapeDescriptorExtension *, const char*, const char*);

inline int soap_read_tt__ShapeDescriptorExtension(struct soap *soap, tt__ShapeDescriptorExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__ShapeDescriptorExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__ShapeDescriptor_DEFINED
#define SOAP_TYPE_tt__ShapeDescriptor_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ShapeDescriptor(struct soap*, const char*, int, const tt__ShapeDescriptor *, const char*);
SOAP_FMAC3 tt__ShapeDescriptor * SOAP_FMAC4 soap_in_tt__ShapeDescriptor(struct soap*, const char*, tt__ShapeDescriptor *, const char*);
SOAP_FMAC1 tt__ShapeDescriptor * SOAP_FMAC2 soap_instantiate_tt__ShapeDescriptor(struct soap*, int, const char*, const char*, size_t*);

inline tt__ShapeDescriptor * soap_new_tt__ShapeDescriptor(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ShapeDescriptor(soap, n, NULL, NULL, NULL);
}

inline tt__ShapeDescriptor * soap_new_req_tt__ShapeDescriptor(
	struct soap *soap,
	tt__Rectangle *BoundingBox,
	tt__Vector *CenterOfGravity)
{
	tt__ShapeDescriptor *_p = soap_new_tt__ShapeDescriptor(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ShapeDescriptor::BoundingBox = BoundingBox;
		_p->tt__ShapeDescriptor::CenterOfGravity = CenterOfGravity;
	}
	return _p;
}

inline tt__ShapeDescriptor * soap_new_set_tt__ShapeDescriptor(
	struct soap *soap,
	tt__Rectangle *BoundingBox,
	tt__Vector *CenterOfGravity,
	const std::vector<tt__Polygon *> & Polygon,
	tt__ShapeDescriptorExtension *Extension,
	char *__anyAttribute,
	char *__item1)
{
	tt__ShapeDescriptor *_p = soap_new_tt__ShapeDescriptor(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ShapeDescriptor::BoundingBox = BoundingBox;
		_p->tt__ShapeDescriptor::CenterOfGravity = CenterOfGravity;
		_p->tt__ShapeDescriptor::Polygon = Polygon;
		_p->tt__ShapeDescriptor::Extension = Extension;
		_p->tt__ShapeDescriptor::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__ShapeDescriptor(struct soap *soap, tt__ShapeDescriptor const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ShapeDescriptor", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__ShapeDescriptor * SOAP_FMAC4 soap_get_tt__ShapeDescriptor(struct soap*, tt__ShapeDescriptor *, const char*, const char*);

inline int soap_read_tt__ShapeDescriptor(struct soap *soap, tt__ShapeDescriptor *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__ShapeDescriptor(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__AppearanceExtension_DEFINED
#define SOAP_TYPE_tt__AppearanceExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AppearanceExtension(struct soap*, const char*, int, const tt__AppearanceExtension *, const char*);
SOAP_FMAC3 tt__AppearanceExtension * SOAP_FMAC4 soap_in_tt__AppearanceExtension(struct soap*, const char*, tt__AppearanceExtension *, const char*);
SOAP_FMAC1 tt__AppearanceExtension * SOAP_FMAC2 soap_instantiate_tt__AppearanceExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__AppearanceExtension * soap_new_tt__AppearanceExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__AppearanceExtension(soap, n, NULL, NULL, NULL);
}

inline tt__AppearanceExtension * soap_new_req_tt__AppearanceExtension(
	struct soap *soap)
{
	tt__AppearanceExtension *_p = soap_new_tt__AppearanceExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__AppearanceExtension * soap_new_set_tt__AppearanceExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__AppearanceExtension *_p = soap_new_tt__AppearanceExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AppearanceExtension::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__AppearanceExtension(struct soap *soap, tt__AppearanceExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AppearanceExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__AppearanceExtension * SOAP_FMAC4 soap_get_tt__AppearanceExtension(struct soap*, tt__AppearanceExtension *, const char*, const char*);

inline int soap_read_tt__AppearanceExtension(struct soap *soap, tt__AppearanceExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__AppearanceExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__Appearance_DEFINED
#define SOAP_TYPE_tt__Appearance_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Appearance(struct soap*, const char*, int, const tt__Appearance *, const char*);
SOAP_FMAC3 tt__Appearance * SOAP_FMAC4 soap_in_tt__Appearance(struct soap*, const char*, tt__Appearance *, const char*);
SOAP_FMAC1 tt__Appearance * SOAP_FMAC2 soap_instantiate_tt__Appearance(struct soap*, int, const char*, const char*, size_t*);

inline tt__Appearance * soap_new_tt__Appearance(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Appearance(soap, n, NULL, NULL, NULL);
}

inline tt__Appearance * soap_new_req_tt__Appearance(
	struct soap *soap)
{
	tt__Appearance *_p = soap_new_tt__Appearance(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__Appearance * soap_new_set_tt__Appearance(
	struct soap *soap,
	tt__Transformation *Transformation,
	tt__ShapeDescriptor *Shape,
	tt__ColorDescriptor *Color,
	tt__ClassDescriptor *Class,
	tt__AppearanceExtension *Extension,
	char *__anyAttribute,
	char *__item1)
{
	tt__Appearance *_p = soap_new_tt__Appearance(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Appearance::Transformation = Transformation;
		_p->tt__Appearance::Shape = Shape;
		_p->tt__Appearance::Color = Color;
		_p->tt__Appearance::Class = Class;
		_p->tt__Appearance::Extension = Extension;
		_p->tt__Appearance::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__Appearance(struct soap *soap, tt__Appearance const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Appearance", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__Appearance * SOAP_FMAC4 soap_get_tt__Appearance(struct soap*, tt__Appearance *, const char*, const char*);

inline int soap_read_tt__Appearance(struct soap *soap, tt__Appearance *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__Appearance(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__ColorCovariance_DEFINED
#define SOAP_TYPE_tt__ColorCovariance_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ColorCovariance(struct soap*, const char*, int, const tt__ColorCovariance *, const char*);
SOAP_FMAC3 tt__ColorCovariance * SOAP_FMAC4 soap_in_tt__ColorCovariance(struct soap*, const char*, tt__ColorCovariance *, const char*);
SOAP_FMAC1 tt__ColorCovariance * SOAP_FMAC2 soap_instantiate_tt__ColorCovariance(struct soap*, int, const char*, const char*, size_t*);

inline tt__ColorCovariance * soap_new_tt__ColorCovariance(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ColorCovariance(soap, n, NULL, NULL, NULL);
}

inline tt__ColorCovariance * soap_new_req_tt__ColorCovariance(
	struct soap *soap,
	float XX,
	float YY,
	float ZZ)
{
	tt__ColorCovariance *_p = soap_new_tt__ColorCovariance(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ColorCovariance::XX = XX;
		_p->tt__ColorCovariance::YY = YY;
		_p->tt__ColorCovariance::ZZ = ZZ;
	}
	return _p;
}

inline tt__ColorCovariance * soap_new_set_tt__ColorCovariance(
	struct soap *soap,
	float XX,
	float YY,
	float ZZ,
	float *XY,
	float *XZ,
	float *YZ,
	std::string *Colorspace,
	char *__item1)
{
	tt__ColorCovariance *_p = soap_new_tt__ColorCovariance(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ColorCovariance::XX = XX;
		_p->tt__ColorCovariance::YY = YY;
		_p->tt__ColorCovariance::ZZ = ZZ;
		_p->tt__ColorCovariance::XY = XY;
		_p->tt__ColorCovariance::XZ = XZ;
		_p->tt__ColorCovariance::YZ = YZ;
		_p->tt__ColorCovariance::Colorspace = Colorspace;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__ColorCovariance(struct soap *soap, tt__ColorCovariance const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ColorCovariance", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__ColorCovariance * SOAP_FMAC4 soap_get_tt__ColorCovariance(struct soap*, tt__ColorCovariance *, const char*, const char*);

inline int soap_read_tt__ColorCovariance(struct soap *soap, tt__ColorCovariance *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__ColorCovariance(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__Color_DEFINED
#define SOAP_TYPE_tt__Color_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Color(struct soap*, const char*, int, const tt__Color *, const char*);
SOAP_FMAC3 tt__Color * SOAP_FMAC4 soap_in_tt__Color(struct soap*, const char*, tt__Color *, const char*);
SOAP_FMAC1 tt__Color * SOAP_FMAC2 soap_instantiate_tt__Color(struct soap*, int, const char*, const char*, size_t*);

inline tt__Color * soap_new_tt__Color(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Color(soap, n, NULL, NULL, NULL);
}

inline tt__Color * soap_new_req_tt__Color(
	struct soap *soap,
	float X,
	float Y,
	float Z)
{
	tt__Color *_p = soap_new_tt__Color(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Color::X = X;
		_p->tt__Color::Y = Y;
		_p->tt__Color::Z = Z;
	}
	return _p;
}

inline tt__Color * soap_new_set_tt__Color(
	struct soap *soap,
	float X,
	float Y,
	float Z,
	std::string *Colorspace,
	char *__item1)
{
	tt__Color *_p = soap_new_tt__Color(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Color::X = X;
		_p->tt__Color::Y = Y;
		_p->tt__Color::Z = Z;
		_p->tt__Color::Colorspace = Colorspace;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__Color(struct soap *soap, tt__Color const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Color", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__Color * SOAP_FMAC4 soap_get_tt__Color(struct soap*, tt__Color *, const char*, const char*);

inline int soap_read_tt__Color(struct soap *soap, tt__Color *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__Color(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__Polyline_DEFINED
#define SOAP_TYPE_tt__Polyline_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Polyline(struct soap*, const char*, int, const tt__Polyline *, const char*);
SOAP_FMAC3 tt__Polyline * SOAP_FMAC4 soap_in_tt__Polyline(struct soap*, const char*, tt__Polyline *, const char*);
SOAP_FMAC1 tt__Polyline * SOAP_FMAC2 soap_instantiate_tt__Polyline(struct soap*, int, const char*, const char*, size_t*);

inline tt__Polyline * soap_new_tt__Polyline(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Polyline(soap, n, NULL, NULL, NULL);
}

inline tt__Polyline * soap_new_req_tt__Polyline(
	struct soap *soap,
	const std::vector<tt__Vector *> & Point)
{
	tt__Polyline *_p = soap_new_tt__Polyline(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Polyline::Point = Point;
	}
	return _p;
}

inline tt__Polyline * soap_new_set_tt__Polyline(
	struct soap *soap,
	const std::vector<tt__Vector *> & Point,
	char *__item1)
{
	tt__Polyline *_p = soap_new_tt__Polyline(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Polyline::Point = Point;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__Polyline(struct soap *soap, tt__Polyline const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Polyline", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__Polyline * SOAP_FMAC4 soap_get_tt__Polyline(struct soap*, tt__Polyline *, const char*, const char*);

inline int soap_read_tt__Polyline(struct soap *soap, tt__Polyline *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__Polyline(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__Polygon_DEFINED
#define SOAP_TYPE_tt__Polygon_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Polygon(struct soap*, const char*, int, const tt__Polygon *, const char*);
SOAP_FMAC3 tt__Polygon * SOAP_FMAC4 soap_in_tt__Polygon(struct soap*, const char*, tt__Polygon *, const char*);
SOAP_FMAC1 tt__Polygon * SOAP_FMAC2 soap_instantiate_tt__Polygon(struct soap*, int, const char*, const char*, size_t*);

inline tt__Polygon * soap_new_tt__Polygon(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Polygon(soap, n, NULL, NULL, NULL);
}

inline tt__Polygon * soap_new_req_tt__Polygon(
	struct soap *soap,
	const std::vector<tt__Vector *> & Point)
{
	tt__Polygon *_p = soap_new_tt__Polygon(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Polygon::Point = Point;
	}
	return _p;
}

inline tt__Polygon * soap_new_set_tt__Polygon(
	struct soap *soap,
	const std::vector<tt__Vector *> & Point,
	char *__item1)
{
	tt__Polygon *_p = soap_new_tt__Polygon(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Polygon::Point = Point;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__Polygon(struct soap *soap, tt__Polygon const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Polygon", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__Polygon * SOAP_FMAC4 soap_get_tt__Polygon(struct soap*, tt__Polygon *, const char*, const char*);

inline int soap_read_tt__Polygon(struct soap *soap, tt__Polygon *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__Polygon(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__Rectangle_DEFINED
#define SOAP_TYPE_tt__Rectangle_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Rectangle(struct soap*, const char*, int, const tt__Rectangle *, const char*);
SOAP_FMAC3 tt__Rectangle * SOAP_FMAC4 soap_in_tt__Rectangle(struct soap*, const char*, tt__Rectangle *, const char*);
SOAP_FMAC1 tt__Rectangle * SOAP_FMAC2 soap_instantiate_tt__Rectangle(struct soap*, int, const char*, const char*, size_t*);

inline tt__Rectangle * soap_new_tt__Rectangle(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Rectangle(soap, n, NULL, NULL, NULL);
}

inline tt__Rectangle * soap_new_req_tt__Rectangle(
	struct soap *soap)
{
	tt__Rectangle *_p = soap_new_tt__Rectangle(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__Rectangle * soap_new_set_tt__Rectangle(
	struct soap *soap,
	float *bottom,
	float *top,
	float *right,
	float *left,
	char *__item1)
{
	tt__Rectangle *_p = soap_new_tt__Rectangle(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Rectangle::bottom = bottom;
		_p->tt__Rectangle::top = top;
		_p->tt__Rectangle::right = right;
		_p->tt__Rectangle::left = left;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__Rectangle(struct soap *soap, tt__Rectangle const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Rectangle", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__Rectangle * SOAP_FMAC4 soap_get_tt__Rectangle(struct soap*, tt__Rectangle *, const char*, const char*);

inline int soap_read_tt__Rectangle(struct soap *soap, tt__Rectangle *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__Rectangle(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__Vector_DEFINED
#define SOAP_TYPE_tt__Vector_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Vector(struct soap*, const char*, int, const tt__Vector *, const char*);
SOAP_FMAC3 tt__Vector * SOAP_FMAC4 soap_in_tt__Vector(struct soap*, const char*, tt__Vector *, const char*);
SOAP_FMAC1 tt__Vector * SOAP_FMAC2 soap_instantiate_tt__Vector(struct soap*, int, const char*, const char*, size_t*);

inline tt__Vector * soap_new_tt__Vector(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Vector(soap, n, NULL, NULL, NULL);
}

inline tt__Vector * soap_new_req_tt__Vector(
	struct soap *soap)
{
	tt__Vector *_p = soap_new_tt__Vector(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__Vector * soap_new_set_tt__Vector(
	struct soap *soap,
	float *x,
	float *y,
	char *__item1)
{
	tt__Vector *_p = soap_new_tt__Vector(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Vector::x = x;
		_p->tt__Vector::y = y;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__Vector(struct soap *soap, tt__Vector const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Vector", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__Vector * SOAP_FMAC4 soap_get_tt__Vector(struct soap*, tt__Vector *, const char*, const char*);

inline int soap_read_tt__Vector(struct soap *soap, tt__Vector *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__Vector(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__ItemListDescriptionExtension_DEFINED
#define SOAP_TYPE_tt__ItemListDescriptionExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ItemListDescriptionExtension(struct soap*, const char*, int, const tt__ItemListDescriptionExtension *, const char*);
SOAP_FMAC3 tt__ItemListDescriptionExtension * SOAP_FMAC4 soap_in_tt__ItemListDescriptionExtension(struct soap*, const char*, tt__ItemListDescriptionExtension *, const char*);
SOAP_FMAC1 tt__ItemListDescriptionExtension * SOAP_FMAC2 soap_instantiate_tt__ItemListDescriptionExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__ItemListDescriptionExtension * soap_new_tt__ItemListDescriptionExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ItemListDescriptionExtension(soap, n, NULL, NULL, NULL);
}

inline tt__ItemListDescriptionExtension * soap_new_req_tt__ItemListDescriptionExtension(
	struct soap *soap)
{
	tt__ItemListDescriptionExtension *_p = soap_new_tt__ItemListDescriptionExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__ItemListDescriptionExtension * soap_new_set_tt__ItemListDescriptionExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__ItemListDescriptionExtension *_p = soap_new_tt__ItemListDescriptionExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ItemListDescriptionExtension::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__ItemListDescriptionExtension(struct soap *soap, tt__ItemListDescriptionExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ItemListDescriptionExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__ItemListDescriptionExtension * SOAP_FMAC4 soap_get_tt__ItemListDescriptionExtension(struct soap*, tt__ItemListDescriptionExtension *, const char*, const char*);

inline int soap_read_tt__ItemListDescriptionExtension(struct soap *soap, tt__ItemListDescriptionExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__ItemListDescriptionExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__ItemListDescription_DEFINED
#define SOAP_TYPE_tt__ItemListDescription_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ItemListDescription(struct soap*, const char*, int, const tt__ItemListDescription *, const char*);
SOAP_FMAC3 tt__ItemListDescription * SOAP_FMAC4 soap_in_tt__ItemListDescription(struct soap*, const char*, tt__ItemListDescription *, const char*);
SOAP_FMAC1 tt__ItemListDescription * SOAP_FMAC2 soap_instantiate_tt__ItemListDescription(struct soap*, int, const char*, const char*, size_t*);

inline tt__ItemListDescription * soap_new_tt__ItemListDescription(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ItemListDescription(soap, n, NULL, NULL, NULL);
}

inline tt__ItemListDescription * soap_new_req_tt__ItemListDescription(
	struct soap *soap)
{
	tt__ItemListDescription *_p = soap_new_tt__ItemListDescription(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__ItemListDescription * soap_new_set_tt__ItemListDescription(
	struct soap *soap,
	std::vector<_tt__ItemListDescription_SimpleItemDescription> *SimpleItemDescription,
	std::vector<_tt__ItemListDescription_ElementItemDescription> *ElementItemDescription,
	tt__ItemListDescriptionExtension *Extension,
	char *__anyAttribute,
	char *__item1)
{
	tt__ItemListDescription *_p = soap_new_tt__ItemListDescription(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ItemListDescription::SimpleItemDescription = SimpleItemDescription;
		_p->tt__ItemListDescription::ElementItemDescription = ElementItemDescription;
		_p->tt__ItemListDescription::Extension = Extension;
		_p->tt__ItemListDescription::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__ItemListDescription(struct soap *soap, tt__ItemListDescription const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ItemListDescription", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__ItemListDescription * SOAP_FMAC4 soap_get_tt__ItemListDescription(struct soap*, tt__ItemListDescription *, const char*, const char*);

inline int soap_read_tt__ItemListDescription(struct soap *soap, tt__ItemListDescription *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__ItemListDescription(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__MessageDescriptionExtension_DEFINED
#define SOAP_TYPE_tt__MessageDescriptionExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__MessageDescriptionExtension(struct soap*, const char*, int, const tt__MessageDescriptionExtension *, const char*);
SOAP_FMAC3 tt__MessageDescriptionExtension * SOAP_FMAC4 soap_in_tt__MessageDescriptionExtension(struct soap*, const char*, tt__MessageDescriptionExtension *, const char*);
SOAP_FMAC1 tt__MessageDescriptionExtension * SOAP_FMAC2 soap_instantiate_tt__MessageDescriptionExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__MessageDescriptionExtension * soap_new_tt__MessageDescriptionExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__MessageDescriptionExtension(soap, n, NULL, NULL, NULL);
}

inline tt__MessageDescriptionExtension * soap_new_req_tt__MessageDescriptionExtension(
	struct soap *soap)
{
	tt__MessageDescriptionExtension *_p = soap_new_tt__MessageDescriptionExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__MessageDescriptionExtension * soap_new_set_tt__MessageDescriptionExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__MessageDescriptionExtension *_p = soap_new_tt__MessageDescriptionExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__MessageDescriptionExtension::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__MessageDescriptionExtension(struct soap *soap, tt__MessageDescriptionExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:MessageDescriptionExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__MessageDescriptionExtension * SOAP_FMAC4 soap_get_tt__MessageDescriptionExtension(struct soap*, tt__MessageDescriptionExtension *, const char*, const char*);

inline int soap_read_tt__MessageDescriptionExtension(struct soap *soap, tt__MessageDescriptionExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__MessageDescriptionExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__MessageDescription_DEFINED
#define SOAP_TYPE_tt__MessageDescription_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__MessageDescription(struct soap*, const char*, int, const tt__MessageDescription *, const char*);
SOAP_FMAC3 tt__MessageDescription * SOAP_FMAC4 soap_in_tt__MessageDescription(struct soap*, const char*, tt__MessageDescription *, const char*);
SOAP_FMAC1 tt__MessageDescription * SOAP_FMAC2 soap_instantiate_tt__MessageDescription(struct soap*, int, const char*, const char*, size_t*);

inline tt__MessageDescription * soap_new_tt__MessageDescription(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__MessageDescription(soap, n, NULL, NULL, NULL);
}

inline tt__MessageDescription * soap_new_req_tt__MessageDescription(
	struct soap *soap)
{
	tt__MessageDescription *_p = soap_new_tt__MessageDescription(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__MessageDescription * soap_new_set_tt__MessageDescription(
	struct soap *soap,
	tt__ItemListDescription *Source,
	tt__ItemListDescription *Key,
	tt__ItemListDescription *Data,
	tt__MessageDescriptionExtension *Extension,
	bool *IsProperty,
	char *__anyAttribute,
	char *__item1)
{
	tt__MessageDescription *_p = soap_new_tt__MessageDescription(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__MessageDescription::Source = Source;
		_p->tt__MessageDescription::Key = Key;
		_p->tt__MessageDescription::Data = Data;
		_p->tt__MessageDescription::Extension = Extension;
		_p->tt__MessageDescription::IsProperty = IsProperty;
		_p->tt__MessageDescription::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__MessageDescription(struct soap *soap, tt__MessageDescription const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:MessageDescription", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__MessageDescription * SOAP_FMAC4 soap_get_tt__MessageDescription(struct soap*, tt__MessageDescription *, const char*, const char*);

inline int soap_read_tt__MessageDescription(struct soap *soap, tt__MessageDescription *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__MessageDescription(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__ItemListExtension_DEFINED
#define SOAP_TYPE_tt__ItemListExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ItemListExtension(struct soap*, const char*, int, const tt__ItemListExtension *, const char*);
SOAP_FMAC3 tt__ItemListExtension * SOAP_FMAC4 soap_in_tt__ItemListExtension(struct soap*, const char*, tt__ItemListExtension *, const char*);
SOAP_FMAC1 tt__ItemListExtension * SOAP_FMAC2 soap_instantiate_tt__ItemListExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__ItemListExtension * soap_new_tt__ItemListExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ItemListExtension(soap, n, NULL, NULL, NULL);
}

inline tt__ItemListExtension * soap_new_req_tt__ItemListExtension(
	struct soap *soap)
{
	tt__ItemListExtension *_p = soap_new_tt__ItemListExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__ItemListExtension * soap_new_set_tt__ItemListExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__ItemListExtension *_p = soap_new_tt__ItemListExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ItemListExtension::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__ItemListExtension(struct soap *soap, tt__ItemListExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ItemListExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__ItemListExtension * SOAP_FMAC4 soap_get_tt__ItemListExtension(struct soap*, tt__ItemListExtension *, const char*, const char*);

inline int soap_read_tt__ItemListExtension(struct soap *soap, tt__ItemListExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__ItemListExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__ItemList_DEFINED
#define SOAP_TYPE_tt__ItemList_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ItemList(struct soap*, const char*, int, const tt__ItemList *, const char*);
SOAP_FMAC3 tt__ItemList * SOAP_FMAC4 soap_in_tt__ItemList(struct soap*, const char*, tt__ItemList *, const char*);
SOAP_FMAC1 tt__ItemList * SOAP_FMAC2 soap_instantiate_tt__ItemList(struct soap*, int, const char*, const char*, size_t*);

inline tt__ItemList * soap_new_tt__ItemList(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ItemList(soap, n, NULL, NULL, NULL);
}

inline tt__ItemList * soap_new_req_tt__ItemList(
	struct soap *soap)
{
	tt__ItemList *_p = soap_new_tt__ItemList(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__ItemList * soap_new_set_tt__ItemList(
	struct soap *soap,
	std::vector<_tt__ItemList_SimpleItem> *SimpleItem,
	std::vector<_tt__ItemList_ElementItem> *ElementItem,
	tt__ItemListExtension *Extension,
	char *__anyAttribute,
	char *__item1)
{
	tt__ItemList *_p = soap_new_tt__ItemList(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ItemList::SimpleItem = SimpleItem;
		_p->tt__ItemList::ElementItem = ElementItem;
		_p->tt__ItemList::Extension = Extension;
		_p->tt__ItemList::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__ItemList(struct soap *soap, tt__ItemList const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ItemList", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__ItemList * SOAP_FMAC4 soap_get_tt__ItemList(struct soap*, tt__ItemList *, const char*, const char*);

inline int soap_read_tt__ItemList(struct soap *soap, tt__ItemList *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__ItemList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__MessageExtension_DEFINED
#define SOAP_TYPE_tt__MessageExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__MessageExtension(struct soap*, const char*, int, const tt__MessageExtension *, const char*);
SOAP_FMAC3 tt__MessageExtension * SOAP_FMAC4 soap_in_tt__MessageExtension(struct soap*, const char*, tt__MessageExtension *, const char*);
SOAP_FMAC1 tt__MessageExtension * SOAP_FMAC2 soap_instantiate_tt__MessageExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__MessageExtension * soap_new_tt__MessageExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__MessageExtension(soap, n, NULL, NULL, NULL);
}

inline tt__MessageExtension * soap_new_req_tt__MessageExtension(
	struct soap *soap)
{
	tt__MessageExtension *_p = soap_new_tt__MessageExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__MessageExtension * soap_new_set_tt__MessageExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__MessageExtension *_p = soap_new_tt__MessageExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__MessageExtension::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__MessageExtension(struct soap *soap, tt__MessageExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:MessageExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__MessageExtension * SOAP_FMAC4 soap_get_tt__MessageExtension(struct soap*, tt__MessageExtension *, const char*, const char*);

inline int soap_read_tt__MessageExtension(struct soap *soap, tt__MessageExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__MessageExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__NoiseReductionOptions_DEFINED
#define SOAP_TYPE_tt__NoiseReductionOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__NoiseReductionOptions(struct soap*, const char*, int, const tt__NoiseReductionOptions *, const char*);
SOAP_FMAC3 tt__NoiseReductionOptions * SOAP_FMAC4 soap_in_tt__NoiseReductionOptions(struct soap*, const char*, tt__NoiseReductionOptions *, const char*);
SOAP_FMAC1 tt__NoiseReductionOptions * SOAP_FMAC2 soap_instantiate_tt__NoiseReductionOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__NoiseReductionOptions * soap_new_tt__NoiseReductionOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__NoiseReductionOptions(soap, n, NULL, NULL, NULL);
}

inline tt__NoiseReductionOptions * soap_new_req_tt__NoiseReductionOptions(
	struct soap *soap,
	bool Level)
{
	tt__NoiseReductionOptions *_p = soap_new_tt__NoiseReductionOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__NoiseReductionOptions::Level = Level;
	}
	return _p;
}

inline tt__NoiseReductionOptions * soap_new_set_tt__NoiseReductionOptions(
	struct soap *soap,
	bool Level,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__NoiseReductionOptions *_p = soap_new_tt__NoiseReductionOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__NoiseReductionOptions::Level = Level;
		_p->tt__NoiseReductionOptions::__any = __any;
		_p->tt__NoiseReductionOptions::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__NoiseReductionOptions(struct soap *soap, tt__NoiseReductionOptions const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NoiseReductionOptions", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__NoiseReductionOptions * SOAP_FMAC4 soap_get_tt__NoiseReductionOptions(struct soap*, tt__NoiseReductionOptions *, const char*, const char*);

inline int soap_read_tt__NoiseReductionOptions(struct soap *soap, tt__NoiseReductionOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__NoiseReductionOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__DefoggingOptions_DEFINED
#define SOAP_TYPE_tt__DefoggingOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__DefoggingOptions(struct soap*, const char*, int, const tt__DefoggingOptions *, const char*);
SOAP_FMAC3 tt__DefoggingOptions * SOAP_FMAC4 soap_in_tt__DefoggingOptions(struct soap*, const char*, tt__DefoggingOptions *, const char*);
SOAP_FMAC1 tt__DefoggingOptions * SOAP_FMAC2 soap_instantiate_tt__DefoggingOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__DefoggingOptions * soap_new_tt__DefoggingOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__DefoggingOptions(soap, n, NULL, NULL, NULL);
}

inline tt__DefoggingOptions * soap_new_req_tt__DefoggingOptions(
	struct soap *soap,
	const std::vector<std::string> & Mode,
	bool Level)
{
	tt__DefoggingOptions *_p = soap_new_tt__DefoggingOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__DefoggingOptions::Mode = Mode;
		_p->tt__DefoggingOptions::Level = Level;
	}
	return _p;
}

inline tt__DefoggingOptions * soap_new_set_tt__DefoggingOptions(
	struct soap *soap,
	const std::vector<std::string> & Mode,
	bool Level,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__DefoggingOptions *_p = soap_new_tt__DefoggingOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__DefoggingOptions::Mode = Mode;
		_p->tt__DefoggingOptions::Level = Level;
		_p->tt__DefoggingOptions::__any = __any;
		_p->tt__DefoggingOptions::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__DefoggingOptions(struct soap *soap, tt__DefoggingOptions const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:DefoggingOptions", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__DefoggingOptions * SOAP_FMAC4 soap_get_tt__DefoggingOptions(struct soap*, tt__DefoggingOptions *, const char*, const char*);

inline int soap_read_tt__DefoggingOptions(struct soap *soap, tt__DefoggingOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__DefoggingOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__ToneCompensationOptions_DEFINED
#define SOAP_TYPE_tt__ToneCompensationOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ToneCompensationOptions(struct soap*, const char*, int, const tt__ToneCompensationOptions *, const char*);
SOAP_FMAC3 tt__ToneCompensationOptions * SOAP_FMAC4 soap_in_tt__ToneCompensationOptions(struct soap*, const char*, tt__ToneCompensationOptions *, const char*);
SOAP_FMAC1 tt__ToneCompensationOptions * SOAP_FMAC2 soap_instantiate_tt__ToneCompensationOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__ToneCompensationOptions * soap_new_tt__ToneCompensationOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ToneCompensationOptions(soap, n, NULL, NULL, NULL);
}

inline tt__ToneCompensationOptions * soap_new_req_tt__ToneCompensationOptions(
	struct soap *soap,
	const std::vector<std::string> & Mode,
	bool Level)
{
	tt__ToneCompensationOptions *_p = soap_new_tt__ToneCompensationOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ToneCompensationOptions::Mode = Mode;
		_p->tt__ToneCompensationOptions::Level = Level;
	}
	return _p;
}

inline tt__ToneCompensationOptions * soap_new_set_tt__ToneCompensationOptions(
	struct soap *soap,
	const std::vector<std::string> & Mode,
	bool Level,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__ToneCompensationOptions *_p = soap_new_tt__ToneCompensationOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ToneCompensationOptions::Mode = Mode;
		_p->tt__ToneCompensationOptions::Level = Level;
		_p->tt__ToneCompensationOptions::__any = __any;
		_p->tt__ToneCompensationOptions::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__ToneCompensationOptions(struct soap *soap, tt__ToneCompensationOptions const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ToneCompensationOptions", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__ToneCompensationOptions * SOAP_FMAC4 soap_get_tt__ToneCompensationOptions(struct soap*, tt__ToneCompensationOptions *, const char*, const char*);

inline int soap_read_tt__ToneCompensationOptions(struct soap *soap, tt__ToneCompensationOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__ToneCompensationOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__FocusOptions20Extension_DEFINED
#define SOAP_TYPE_tt__FocusOptions20Extension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__FocusOptions20Extension(struct soap*, const char*, int, const tt__FocusOptions20Extension *, const char*);
SOAP_FMAC3 tt__FocusOptions20Extension * SOAP_FMAC4 soap_in_tt__FocusOptions20Extension(struct soap*, const char*, tt__FocusOptions20Extension *, const char*);
SOAP_FMAC1 tt__FocusOptions20Extension * SOAP_FMAC2 soap_instantiate_tt__FocusOptions20Extension(struct soap*, int, const char*, const char*, size_t*);

inline tt__FocusOptions20Extension * soap_new_tt__FocusOptions20Extension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__FocusOptions20Extension(soap, n, NULL, NULL, NULL);
}

inline tt__FocusOptions20Extension * soap_new_req_tt__FocusOptions20Extension(
	struct soap *soap)
{
	tt__FocusOptions20Extension *_p = soap_new_tt__FocusOptions20Extension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__FocusOptions20Extension * soap_new_set_tt__FocusOptions20Extension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__FocusOptions20Extension *_p = soap_new_tt__FocusOptions20Extension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__FocusOptions20Extension::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__FocusOptions20Extension(struct soap *soap, tt__FocusOptions20Extension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:FocusOptions20Extension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__FocusOptions20Extension * SOAP_FMAC4 soap_get_tt__FocusOptions20Extension(struct soap*, tt__FocusOptions20Extension *, const char*, const char*);

inline int soap_read_tt__FocusOptions20Extension(struct soap *soap, tt__FocusOptions20Extension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__FocusOptions20Extension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__FocusOptions20_DEFINED
#define SOAP_TYPE_tt__FocusOptions20_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__FocusOptions20(struct soap*, const char*, int, const tt__FocusOptions20 *, const char*);
SOAP_FMAC3 tt__FocusOptions20 * SOAP_FMAC4 soap_in_tt__FocusOptions20(struct soap*, const char*, tt__FocusOptions20 *, const char*);
SOAP_FMAC1 tt__FocusOptions20 * SOAP_FMAC2 soap_instantiate_tt__FocusOptions20(struct soap*, int, const char*, const char*, size_t*);

inline tt__FocusOptions20 * soap_new_tt__FocusOptions20(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__FocusOptions20(soap, n, NULL, NULL, NULL);
}

inline tt__FocusOptions20 * soap_new_req_tt__FocusOptions20(
	struct soap *soap)
{
	tt__FocusOptions20 *_p = soap_new_tt__FocusOptions20(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__FocusOptions20 * soap_new_set_tt__FocusOptions20(
	struct soap *soap,
	const std::vector<enum tt__AutoFocusMode> & AutoFocusModes,
	tt__FloatRange *DefaultSpeed,
	tt__FloatRange *NearLimit,
	tt__FloatRange *FarLimit,
	tt__FocusOptions20Extension *Extension,
	char *__item1)
{
	tt__FocusOptions20 *_p = soap_new_tt__FocusOptions20(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__FocusOptions20::AutoFocusModes = AutoFocusModes;
		_p->tt__FocusOptions20::DefaultSpeed = DefaultSpeed;
		_p->tt__FocusOptions20::NearLimit = NearLimit;
		_p->tt__FocusOptions20::FarLimit = FarLimit;
		_p->tt__FocusOptions20::Extension = Extension;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__FocusOptions20(struct soap *soap, tt__FocusOptions20 const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:FocusOptions20", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__FocusOptions20 * SOAP_FMAC4 soap_get_tt__FocusOptions20(struct soap*, tt__FocusOptions20 *, const char*, const char*);

inline int soap_read_tt__FocusOptions20(struct soap *soap, tt__FocusOptions20 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__FocusOptions20(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__WhiteBalanceOptions20Extension_DEFINED
#define SOAP_TYPE_tt__WhiteBalanceOptions20Extension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__WhiteBalanceOptions20Extension(struct soap*, const char*, int, const tt__WhiteBalanceOptions20Extension *, const char*);
SOAP_FMAC3 tt__WhiteBalanceOptions20Extension * SOAP_FMAC4 soap_in_tt__WhiteBalanceOptions20Extension(struct soap*, const char*, tt__WhiteBalanceOptions20Extension *, const char*);
SOAP_FMAC1 tt__WhiteBalanceOptions20Extension * SOAP_FMAC2 soap_instantiate_tt__WhiteBalanceOptions20Extension(struct soap*, int, const char*, const char*, size_t*);

inline tt__WhiteBalanceOptions20Extension * soap_new_tt__WhiteBalanceOptions20Extension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__WhiteBalanceOptions20Extension(soap, n, NULL, NULL, NULL);
}

inline tt__WhiteBalanceOptions20Extension * soap_new_req_tt__WhiteBalanceOptions20Extension(
	struct soap *soap)
{
	tt__WhiteBalanceOptions20Extension *_p = soap_new_tt__WhiteBalanceOptions20Extension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__WhiteBalanceOptions20Extension * soap_new_set_tt__WhiteBalanceOptions20Extension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__WhiteBalanceOptions20Extension *_p = soap_new_tt__WhiteBalanceOptions20Extension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__WhiteBalanceOptions20Extension::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__WhiteBalanceOptions20Extension(struct soap *soap, tt__WhiteBalanceOptions20Extension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:WhiteBalanceOptions20Extension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__WhiteBalanceOptions20Extension * SOAP_FMAC4 soap_get_tt__WhiteBalanceOptions20Extension(struct soap*, tt__WhiteBalanceOptions20Extension *, const char*, const char*);

inline int soap_read_tt__WhiteBalanceOptions20Extension(struct soap *soap, tt__WhiteBalanceOptions20Extension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__WhiteBalanceOptions20Extension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__WhiteBalanceOptions20_DEFINED
#define SOAP_TYPE_tt__WhiteBalanceOptions20_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__WhiteBalanceOptions20(struct soap*, const char*, int, const tt__WhiteBalanceOptions20 *, const char*);
SOAP_FMAC3 tt__WhiteBalanceOptions20 * SOAP_FMAC4 soap_in_tt__WhiteBalanceOptions20(struct soap*, const char*, tt__WhiteBalanceOptions20 *, const char*);
SOAP_FMAC1 tt__WhiteBalanceOptions20 * SOAP_FMAC2 soap_instantiate_tt__WhiteBalanceOptions20(struct soap*, int, const char*, const char*, size_t*);

inline tt__WhiteBalanceOptions20 * soap_new_tt__WhiteBalanceOptions20(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__WhiteBalanceOptions20(soap, n, NULL, NULL, NULL);
}

inline tt__WhiteBalanceOptions20 * soap_new_req_tt__WhiteBalanceOptions20(
	struct soap *soap,
	const std::vector<enum tt__WhiteBalanceMode> & Mode)
{
	tt__WhiteBalanceOptions20 *_p = soap_new_tt__WhiteBalanceOptions20(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__WhiteBalanceOptions20::Mode = Mode;
	}
	return _p;
}

inline tt__WhiteBalanceOptions20 * soap_new_set_tt__WhiteBalanceOptions20(
	struct soap *soap,
	const std::vector<enum tt__WhiteBalanceMode> & Mode,
	tt__FloatRange *YrGain,
	tt__FloatRange *YbGain,
	tt__WhiteBalanceOptions20Extension *Extension,
	char *__item1)
{
	tt__WhiteBalanceOptions20 *_p = soap_new_tt__WhiteBalanceOptions20(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__WhiteBalanceOptions20::Mode = Mode;
		_p->tt__WhiteBalanceOptions20::YrGain = YrGain;
		_p->tt__WhiteBalanceOptions20::YbGain = YbGain;
		_p->tt__WhiteBalanceOptions20::Extension = Extension;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__WhiteBalanceOptions20(struct soap *soap, tt__WhiteBalanceOptions20 const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:WhiteBalanceOptions20", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__WhiteBalanceOptions20 * SOAP_FMAC4 soap_get_tt__WhiteBalanceOptions20(struct soap*, tt__WhiteBalanceOptions20 *, const char*, const char*);

inline int soap_read_tt__WhiteBalanceOptions20(struct soap *soap, tt__WhiteBalanceOptions20 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__WhiteBalanceOptions20(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__FocusConfiguration20Extension_DEFINED
#define SOAP_TYPE_tt__FocusConfiguration20Extension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__FocusConfiguration20Extension(struct soap*, const char*, int, const tt__FocusConfiguration20Extension *, const char*);
SOAP_FMAC3 tt__FocusConfiguration20Extension * SOAP_FMAC4 soap_in_tt__FocusConfiguration20Extension(struct soap*, const char*, tt__FocusConfiguration20Extension *, const char*);
SOAP_FMAC1 tt__FocusConfiguration20Extension * SOAP_FMAC2 soap_instantiate_tt__FocusConfiguration20Extension(struct soap*, int, const char*, const char*, size_t*);

inline tt__FocusConfiguration20Extension * soap_new_tt__FocusConfiguration20Extension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__FocusConfiguration20Extension(soap, n, NULL, NULL, NULL);
}

inline tt__FocusConfiguration20Extension * soap_new_req_tt__FocusConfiguration20Extension(
	struct soap *soap)
{
	tt__FocusConfiguration20Extension *_p = soap_new_tt__FocusConfiguration20Extension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__FocusConfiguration20Extension * soap_new_set_tt__FocusConfiguration20Extension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__FocusConfiguration20Extension *_p = soap_new_tt__FocusConfiguration20Extension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__FocusConfiguration20Extension::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__FocusConfiguration20Extension(struct soap *soap, tt__FocusConfiguration20Extension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:FocusConfiguration20Extension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__FocusConfiguration20Extension * SOAP_FMAC4 soap_get_tt__FocusConfiguration20Extension(struct soap*, tt__FocusConfiguration20Extension *, const char*, const char*);

inline int soap_read_tt__FocusConfiguration20Extension(struct soap *soap, tt__FocusConfiguration20Extension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__FocusConfiguration20Extension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__FocusConfiguration20_DEFINED
#define SOAP_TYPE_tt__FocusConfiguration20_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__FocusConfiguration20(struct soap*, const char*, int, const tt__FocusConfiguration20 *, const char*);
SOAP_FMAC3 tt__FocusConfiguration20 * SOAP_FMAC4 soap_in_tt__FocusConfiguration20(struct soap*, const char*, tt__FocusConfiguration20 *, const char*);
SOAP_FMAC1 tt__FocusConfiguration20 * SOAP_FMAC2 soap_instantiate_tt__FocusConfiguration20(struct soap*, int, const char*, const char*, size_t*);

inline tt__FocusConfiguration20 * soap_new_tt__FocusConfiguration20(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__FocusConfiguration20(soap, n, NULL, NULL, NULL);
}

inline tt__FocusConfiguration20 * soap_new_req_tt__FocusConfiguration20(
	struct soap *soap,
	enum tt__AutoFocusMode AutoFocusMode)
{
	tt__FocusConfiguration20 *_p = soap_new_tt__FocusConfiguration20(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__FocusConfiguration20::AutoFocusMode = AutoFocusMode;
	}
	return _p;
}

inline tt__FocusConfiguration20 * soap_new_set_tt__FocusConfiguration20(
	struct soap *soap,
	enum tt__AutoFocusMode AutoFocusMode,
	float *DefaultSpeed,
	float *NearLimit,
	float *FarLimit,
	tt__FocusConfiguration20Extension *Extension,
	char *__anyAttribute,
	char *__item1)
{
	tt__FocusConfiguration20 *_p = soap_new_tt__FocusConfiguration20(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__FocusConfiguration20::AutoFocusMode = AutoFocusMode;
		_p->tt__FocusConfiguration20::DefaultSpeed = DefaultSpeed;
		_p->tt__FocusConfiguration20::NearLimit = NearLimit;
		_p->tt__FocusConfiguration20::FarLimit = FarLimit;
		_p->tt__FocusConfiguration20::Extension = Extension;
		_p->tt__FocusConfiguration20::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__FocusConfiguration20(struct soap *soap, tt__FocusConfiguration20 const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:FocusConfiguration20", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__FocusConfiguration20 * SOAP_FMAC4 soap_get_tt__FocusConfiguration20(struct soap*, tt__FocusConfiguration20 *, const char*, const char*);

inline int soap_read_tt__FocusConfiguration20(struct soap *soap, tt__FocusConfiguration20 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__FocusConfiguration20(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__WhiteBalance20Extension_DEFINED
#define SOAP_TYPE_tt__WhiteBalance20Extension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__WhiteBalance20Extension(struct soap*, const char*, int, const tt__WhiteBalance20Extension *, const char*);
SOAP_FMAC3 tt__WhiteBalance20Extension * SOAP_FMAC4 soap_in_tt__WhiteBalance20Extension(struct soap*, const char*, tt__WhiteBalance20Extension *, const char*);
SOAP_FMAC1 tt__WhiteBalance20Extension * SOAP_FMAC2 soap_instantiate_tt__WhiteBalance20Extension(struct soap*, int, const char*, const char*, size_t*);

inline tt__WhiteBalance20Extension * soap_new_tt__WhiteBalance20Extension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__WhiteBalance20Extension(soap, n, NULL, NULL, NULL);
}

inline tt__WhiteBalance20Extension * soap_new_req_tt__WhiteBalance20Extension(
	struct soap *soap)
{
	tt__WhiteBalance20Extension *_p = soap_new_tt__WhiteBalance20Extension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__WhiteBalance20Extension * soap_new_set_tt__WhiteBalance20Extension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__WhiteBalance20Extension *_p = soap_new_tt__WhiteBalance20Extension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__WhiteBalance20Extension::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__WhiteBalance20Extension(struct soap *soap, tt__WhiteBalance20Extension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:WhiteBalance20Extension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__WhiteBalance20Extension * SOAP_FMAC4 soap_get_tt__WhiteBalance20Extension(struct soap*, tt__WhiteBalance20Extension *, const char*, const char*);

inline int soap_read_tt__WhiteBalance20Extension(struct soap *soap, tt__WhiteBalance20Extension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__WhiteBalance20Extension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__WhiteBalance20_DEFINED
#define SOAP_TYPE_tt__WhiteBalance20_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__WhiteBalance20(struct soap*, const char*, int, const tt__WhiteBalance20 *, const char*);
SOAP_FMAC3 tt__WhiteBalance20 * SOAP_FMAC4 soap_in_tt__WhiteBalance20(struct soap*, const char*, tt__WhiteBalance20 *, const char*);
SOAP_FMAC1 tt__WhiteBalance20 * SOAP_FMAC2 soap_instantiate_tt__WhiteBalance20(struct soap*, int, const char*, const char*, size_t*);

inline tt__WhiteBalance20 * soap_new_tt__WhiteBalance20(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__WhiteBalance20(soap, n, NULL, NULL, NULL);
}

inline tt__WhiteBalance20 * soap_new_req_tt__WhiteBalance20(
	struct soap *soap,
	enum tt__WhiteBalanceMode Mode)
{
	tt__WhiteBalance20 *_p = soap_new_tt__WhiteBalance20(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__WhiteBalance20::Mode = Mode;
	}
	return _p;
}

inline tt__WhiteBalance20 * soap_new_set_tt__WhiteBalance20(
	struct soap *soap,
	enum tt__WhiteBalanceMode Mode,
	float *CrGain,
	float *CbGain,
	tt__WhiteBalance20Extension *Extension,
	char *__anyAttribute,
	char *__item1)
{
	tt__WhiteBalance20 *_p = soap_new_tt__WhiteBalance20(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__WhiteBalance20::Mode = Mode;
		_p->tt__WhiteBalance20::CrGain = CrGain;
		_p->tt__WhiteBalance20::CbGain = CbGain;
		_p->tt__WhiteBalance20::Extension = Extension;
		_p->tt__WhiteBalance20::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__WhiteBalance20(struct soap *soap, tt__WhiteBalance20 const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:WhiteBalance20", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__WhiteBalance20 * SOAP_FMAC4 soap_get_tt__WhiteBalance20(struct soap*, tt__WhiteBalance20 *, const char*, const char*);

inline int soap_read_tt__WhiteBalance20(struct soap *soap, tt__WhiteBalance20 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__WhiteBalance20(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__RelativeFocusOptions20_DEFINED
#define SOAP_TYPE_tt__RelativeFocusOptions20_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RelativeFocusOptions20(struct soap*, const char*, int, const tt__RelativeFocusOptions20 *, const char*);
SOAP_FMAC3 tt__RelativeFocusOptions20 * SOAP_FMAC4 soap_in_tt__RelativeFocusOptions20(struct soap*, const char*, tt__RelativeFocusOptions20 *, const char*);
SOAP_FMAC1 tt__RelativeFocusOptions20 * SOAP_FMAC2 soap_instantiate_tt__RelativeFocusOptions20(struct soap*, int, const char*, const char*, size_t*);

inline tt__RelativeFocusOptions20 * soap_new_tt__RelativeFocusOptions20(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__RelativeFocusOptions20(soap, n, NULL, NULL, NULL);
}

inline tt__RelativeFocusOptions20 * soap_new_req_tt__RelativeFocusOptions20(
	struct soap *soap,
	tt__FloatRange *Distance)
{
	tt__RelativeFocusOptions20 *_p = soap_new_tt__RelativeFocusOptions20(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__RelativeFocusOptions20::Distance = Distance;
	}
	return _p;
}

inline tt__RelativeFocusOptions20 * soap_new_set_tt__RelativeFocusOptions20(
	struct soap *soap,
	tt__FloatRange *Distance,
	tt__FloatRange *Speed,
	char *__item1)
{
	tt__RelativeFocusOptions20 *_p = soap_new_tt__RelativeFocusOptions20(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__RelativeFocusOptions20::Distance = Distance;
		_p->tt__RelativeFocusOptions20::Speed = Speed;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__RelativeFocusOptions20(struct soap *soap, tt__RelativeFocusOptions20 const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:RelativeFocusOptions20", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__RelativeFocusOptions20 * SOAP_FMAC4 soap_get_tt__RelativeFocusOptions20(struct soap*, tt__RelativeFocusOptions20 *, const char*, const char*);

inline int soap_read_tt__RelativeFocusOptions20(struct soap *soap, tt__RelativeFocusOptions20 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__RelativeFocusOptions20(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__MoveOptions20_DEFINED
#define SOAP_TYPE_tt__MoveOptions20_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__MoveOptions20(struct soap*, const char*, int, const tt__MoveOptions20 *, const char*);
SOAP_FMAC3 tt__MoveOptions20 * SOAP_FMAC4 soap_in_tt__MoveOptions20(struct soap*, const char*, tt__MoveOptions20 *, const char*);
SOAP_FMAC1 tt__MoveOptions20 * SOAP_FMAC2 soap_instantiate_tt__MoveOptions20(struct soap*, int, const char*, const char*, size_t*);

inline tt__MoveOptions20 * soap_new_tt__MoveOptions20(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__MoveOptions20(soap, n, NULL, NULL, NULL);
}

inline tt__MoveOptions20 * soap_new_req_tt__MoveOptions20(
	struct soap *soap)
{
	tt__MoveOptions20 *_p = soap_new_tt__MoveOptions20(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__MoveOptions20 * soap_new_set_tt__MoveOptions20(
	struct soap *soap,
	tt__AbsoluteFocusOptions *Absolute,
	tt__RelativeFocusOptions20 *Relative,
	tt__ContinuousFocusOptions *Continuous,
	char *__item1)
{
	tt__MoveOptions20 *_p = soap_new_tt__MoveOptions20(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__MoveOptions20::Absolute = Absolute;
		_p->tt__MoveOptions20::Relative = Relative;
		_p->tt__MoveOptions20::Continuous = Continuous;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__MoveOptions20(struct soap *soap, tt__MoveOptions20 const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:MoveOptions20", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__MoveOptions20 * SOAP_FMAC4 soap_get_tt__MoveOptions20(struct soap*, tt__MoveOptions20 *, const char*, const char*);

inline int soap_read_tt__MoveOptions20(struct soap *soap, tt__MoveOptions20 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__MoveOptions20(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__ExposureOptions20_DEFINED
#define SOAP_TYPE_tt__ExposureOptions20_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ExposureOptions20(struct soap*, const char*, int, const tt__ExposureOptions20 *, const char*);
SOAP_FMAC3 tt__ExposureOptions20 * SOAP_FMAC4 soap_in_tt__ExposureOptions20(struct soap*, const char*, tt__ExposureOptions20 *, const char*);
SOAP_FMAC1 tt__ExposureOptions20 * SOAP_FMAC2 soap_instantiate_tt__ExposureOptions20(struct soap*, int, const char*, const char*, size_t*);

inline tt__ExposureOptions20 * soap_new_tt__ExposureOptions20(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ExposureOptions20(soap, n, NULL, NULL, NULL);
}

inline tt__ExposureOptions20 * soap_new_req_tt__ExposureOptions20(
	struct soap *soap,
	const std::vector<enum tt__ExposureMode> & Mode)
{
	tt__ExposureOptions20 *_p = soap_new_tt__ExposureOptions20(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ExposureOptions20::Mode = Mode;
	}
	return _p;
}

inline tt__ExposureOptions20 * soap_new_set_tt__ExposureOptions20(
	struct soap *soap,
	const std::vector<enum tt__ExposureMode> & Mode,
	const std::vector<enum tt__ExposurePriority> & Priority,
	tt__FloatRange *MinExposureTime,
	tt__FloatRange *MaxExposureTime,
	tt__FloatRange *MinGain,
	tt__FloatRange *MaxGain,
	tt__FloatRange *MinIris,
	tt__FloatRange *MaxIris,
	tt__FloatRange *ExposureTime,
	tt__FloatRange *Gain,
	tt__FloatRange *Iris,
	char *__item1)
{
	tt__ExposureOptions20 *_p = soap_new_tt__ExposureOptions20(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ExposureOptions20::Mode = Mode;
		_p->tt__ExposureOptions20::Priority = Priority;
		_p->tt__ExposureOptions20::MinExposureTime = MinExposureTime;
		_p->tt__ExposureOptions20::MaxExposureTime = MaxExposureTime;
		_p->tt__ExposureOptions20::MinGain = MinGain;
		_p->tt__ExposureOptions20::MaxGain = MaxGain;
		_p->tt__ExposureOptions20::MinIris = MinIris;
		_p->tt__ExposureOptions20::MaxIris = MaxIris;
		_p->tt__ExposureOptions20::ExposureTime = ExposureTime;
		_p->tt__ExposureOptions20::Gain = Gain;
		_p->tt__ExposureOptions20::Iris = Iris;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__ExposureOptions20(struct soap *soap, tt__ExposureOptions20 const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ExposureOptions20", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__ExposureOptions20 * SOAP_FMAC4 soap_get_tt__ExposureOptions20(struct soap*, tt__ExposureOptions20 *, const char*, const char*);

inline int soap_read_tt__ExposureOptions20(struct soap *soap, tt__ExposureOptions20 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__ExposureOptions20(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__BacklightCompensationOptions20_DEFINED
#define SOAP_TYPE_tt__BacklightCompensationOptions20_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__BacklightCompensationOptions20(struct soap*, const char*, int, const tt__BacklightCompensationOptions20 *, const char*);
SOAP_FMAC3 tt__BacklightCompensationOptions20 * SOAP_FMAC4 soap_in_tt__BacklightCompensationOptions20(struct soap*, const char*, tt__BacklightCompensationOptions20 *, const char*);
SOAP_FMAC1 tt__BacklightCompensationOptions20 * SOAP_FMAC2 soap_instantiate_tt__BacklightCompensationOptions20(struct soap*, int, const char*, const char*, size_t*);

inline tt__BacklightCompensationOptions20 * soap_new_tt__BacklightCompensationOptions20(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__BacklightCompensationOptions20(soap, n, NULL, NULL, NULL);
}

inline tt__BacklightCompensationOptions20 * soap_new_req_tt__BacklightCompensationOptions20(
	struct soap *soap,
	const std::vector<enum tt__BacklightCompensationMode> & Mode)
{
	tt__BacklightCompensationOptions20 *_p = soap_new_tt__BacklightCompensationOptions20(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__BacklightCompensationOptions20::Mode = Mode;
	}
	return _p;
}

inline tt__BacklightCompensationOptions20 * soap_new_set_tt__BacklightCompensationOptions20(
	struct soap *soap,
	const std::vector<enum tt__BacklightCompensationMode> & Mode,
	tt__FloatRange *Level,
	char *__item1)
{
	tt__BacklightCompensationOptions20 *_p = soap_new_tt__BacklightCompensationOptions20(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__BacklightCompensationOptions20::Mode = Mode;
		_p->tt__BacklightCompensationOptions20::Level = Level;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__BacklightCompensationOptions20(struct soap *soap, tt__BacklightCompensationOptions20 const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:BacklightCompensationOptions20", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__BacklightCompensationOptions20 * SOAP_FMAC4 soap_get_tt__BacklightCompensationOptions20(struct soap*, tt__BacklightCompensationOptions20 *, const char*, const char*);

inline int soap_read_tt__BacklightCompensationOptions20(struct soap *soap, tt__BacklightCompensationOptions20 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__BacklightCompensationOptions20(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__WideDynamicRangeOptions20_DEFINED
#define SOAP_TYPE_tt__WideDynamicRangeOptions20_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__WideDynamicRangeOptions20(struct soap*, const char*, int, const tt__WideDynamicRangeOptions20 *, const char*);
SOAP_FMAC3 tt__WideDynamicRangeOptions20 * SOAP_FMAC4 soap_in_tt__WideDynamicRangeOptions20(struct soap*, const char*, tt__WideDynamicRangeOptions20 *, const char*);
SOAP_FMAC1 tt__WideDynamicRangeOptions20 * SOAP_FMAC2 soap_instantiate_tt__WideDynamicRangeOptions20(struct soap*, int, const char*, const char*, size_t*);

inline tt__WideDynamicRangeOptions20 * soap_new_tt__WideDynamicRangeOptions20(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__WideDynamicRangeOptions20(soap, n, NULL, NULL, NULL);
}

inline tt__WideDynamicRangeOptions20 * soap_new_req_tt__WideDynamicRangeOptions20(
	struct soap *soap,
	const std::vector<enum tt__WideDynamicMode> & Mode)
{
	tt__WideDynamicRangeOptions20 *_p = soap_new_tt__WideDynamicRangeOptions20(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__WideDynamicRangeOptions20::Mode = Mode;
	}
	return _p;
}

inline tt__WideDynamicRangeOptions20 * soap_new_set_tt__WideDynamicRangeOptions20(
	struct soap *soap,
	const std::vector<enum tt__WideDynamicMode> & Mode,
	tt__FloatRange *Level,
	char *__item1)
{
	tt__WideDynamicRangeOptions20 *_p = soap_new_tt__WideDynamicRangeOptions20(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__WideDynamicRangeOptions20::Mode = Mode;
		_p->tt__WideDynamicRangeOptions20::Level = Level;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__WideDynamicRangeOptions20(struct soap *soap, tt__WideDynamicRangeOptions20 const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:WideDynamicRangeOptions20", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__WideDynamicRangeOptions20 * SOAP_FMAC4 soap_get_tt__WideDynamicRangeOptions20(struct soap*, tt__WideDynamicRangeOptions20 *, const char*, const char*);

inline int soap_read_tt__WideDynamicRangeOptions20(struct soap *soap, tt__WideDynamicRangeOptions20 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__WideDynamicRangeOptions20(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__IrCutFilterAutoAdjustmentOptionsExtension_DEFINED
#define SOAP_TYPE_tt__IrCutFilterAutoAdjustmentOptionsExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IrCutFilterAutoAdjustmentOptionsExtension(struct soap*, const char*, int, const tt__IrCutFilterAutoAdjustmentOptionsExtension *, const char*);
SOAP_FMAC3 tt__IrCutFilterAutoAdjustmentOptionsExtension * SOAP_FMAC4 soap_in_tt__IrCutFilterAutoAdjustmentOptionsExtension(struct soap*, const char*, tt__IrCutFilterAutoAdjustmentOptionsExtension *, const char*);
SOAP_FMAC1 tt__IrCutFilterAutoAdjustmentOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__IrCutFilterAutoAdjustmentOptionsExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__IrCutFilterAutoAdjustmentOptionsExtension * soap_new_tt__IrCutFilterAutoAdjustmentOptionsExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__IrCutFilterAutoAdjustmentOptionsExtension(soap, n, NULL, NULL, NULL);
}

inline tt__IrCutFilterAutoAdjustmentOptionsExtension * soap_new_req_tt__IrCutFilterAutoAdjustmentOptionsExtension(
	struct soap *soap)
{
	tt__IrCutFilterAutoAdjustmentOptionsExtension *_p = soap_new_tt__IrCutFilterAutoAdjustmentOptionsExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__IrCutFilterAutoAdjustmentOptionsExtension * soap_new_set_tt__IrCutFilterAutoAdjustmentOptionsExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__IrCutFilterAutoAdjustmentOptionsExtension *_p = soap_new_tt__IrCutFilterAutoAdjustmentOptionsExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__IrCutFilterAutoAdjustmentOptionsExtension::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__IrCutFilterAutoAdjustmentOptionsExtension(struct soap *soap, tt__IrCutFilterAutoAdjustmentOptionsExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IrCutFilterAutoAdjustmentOptionsExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__IrCutFilterAutoAdjustmentOptionsExtension * SOAP_FMAC4 soap_get_tt__IrCutFilterAutoAdjustmentOptionsExtension(struct soap*, tt__IrCutFilterAutoAdjustmentOptionsExtension *, const char*, const char*);

inline int soap_read_tt__IrCutFilterAutoAdjustmentOptionsExtension(struct soap *soap, tt__IrCutFilterAutoAdjustmentOptionsExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__IrCutFilterAutoAdjustmentOptionsExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__IrCutFilterAutoAdjustmentOptions_DEFINED
#define SOAP_TYPE_tt__IrCutFilterAutoAdjustmentOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IrCutFilterAutoAdjustmentOptions(struct soap*, const char*, int, const tt__IrCutFilterAutoAdjustmentOptions *, const char*);
SOAP_FMAC3 tt__IrCutFilterAutoAdjustmentOptions * SOAP_FMAC4 soap_in_tt__IrCutFilterAutoAdjustmentOptions(struct soap*, const char*, tt__IrCutFilterAutoAdjustmentOptions *, const char*);
SOAP_FMAC1 tt__IrCutFilterAutoAdjustmentOptions * SOAP_FMAC2 soap_instantiate_tt__IrCutFilterAutoAdjustmentOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__IrCutFilterAutoAdjustmentOptions * soap_new_tt__IrCutFilterAutoAdjustmentOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__IrCutFilterAutoAdjustmentOptions(soap, n, NULL, NULL, NULL);
}

inline tt__IrCutFilterAutoAdjustmentOptions * soap_new_req_tt__IrCutFilterAutoAdjustmentOptions(
	struct soap *soap,
	const std::vector<std::string> & BoundaryType)
{
	tt__IrCutFilterAutoAdjustmentOptions *_p = soap_new_tt__IrCutFilterAutoAdjustmentOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__IrCutFilterAutoAdjustmentOptions::BoundaryType = BoundaryType;
	}
	return _p;
}

inline tt__IrCutFilterAutoAdjustmentOptions * soap_new_set_tt__IrCutFilterAutoAdjustmentOptions(
	struct soap *soap,
	const std::vector<std::string> & BoundaryType,
	bool *BoundaryOffset,
	tt__DurationRange *ResponseTimeRange,
	tt__IrCutFilterAutoAdjustmentOptionsExtension *Extension,
	char *__anyAttribute,
	char *__item1)
{
	tt__IrCutFilterAutoAdjustmentOptions *_p = soap_new_tt__IrCutFilterAutoAdjustmentOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__IrCutFilterAutoAdjustmentOptions::BoundaryType = BoundaryType;
		_p->tt__IrCutFilterAutoAdjustmentOptions::BoundaryOffset = BoundaryOffset;
		_p->tt__IrCutFilterAutoAdjustmentOptions::ResponseTimeRange = ResponseTimeRange;
		_p->tt__IrCutFilterAutoAdjustmentOptions::Extension = Extension;
		_p->tt__IrCutFilterAutoAdjustmentOptions::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__IrCutFilterAutoAdjustmentOptions(struct soap *soap, tt__IrCutFilterAutoAdjustmentOptions const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IrCutFilterAutoAdjustmentOptions", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__IrCutFilterAutoAdjustmentOptions * SOAP_FMAC4 soap_get_tt__IrCutFilterAutoAdjustmentOptions(struct soap*, tt__IrCutFilterAutoAdjustmentOptions *, const char*, const char*);

inline int soap_read_tt__IrCutFilterAutoAdjustmentOptions(struct soap *soap, tt__IrCutFilterAutoAdjustmentOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__IrCutFilterAutoAdjustmentOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__ImageStabilizationOptionsExtension_DEFINED
#define SOAP_TYPE_tt__ImageStabilizationOptionsExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ImageStabilizationOptionsExtension(struct soap*, const char*, int, const tt__ImageStabilizationOptionsExtension *, const char*);
SOAP_FMAC3 tt__ImageStabilizationOptionsExtension * SOAP_FMAC4 soap_in_tt__ImageStabilizationOptionsExtension(struct soap*, const char*, tt__ImageStabilizationOptionsExtension *, const char*);
SOAP_FMAC1 tt__ImageStabilizationOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__ImageStabilizationOptionsExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__ImageStabilizationOptionsExtension * soap_new_tt__ImageStabilizationOptionsExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ImageStabilizationOptionsExtension(soap, n, NULL, NULL, NULL);
}

inline tt__ImageStabilizationOptionsExtension * soap_new_req_tt__ImageStabilizationOptionsExtension(
	struct soap *soap)
{
	tt__ImageStabilizationOptionsExtension *_p = soap_new_tt__ImageStabilizationOptionsExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__ImageStabilizationOptionsExtension * soap_new_set_tt__ImageStabilizationOptionsExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__ImageStabilizationOptionsExtension *_p = soap_new_tt__ImageStabilizationOptionsExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ImageStabilizationOptionsExtension::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__ImageStabilizationOptionsExtension(struct soap *soap, tt__ImageStabilizationOptionsExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ImageStabilizationOptionsExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__ImageStabilizationOptionsExtension * SOAP_FMAC4 soap_get_tt__ImageStabilizationOptionsExtension(struct soap*, tt__ImageStabilizationOptionsExtension *, const char*, const char*);

inline int soap_read_tt__ImageStabilizationOptionsExtension(struct soap *soap, tt__ImageStabilizationOptionsExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__ImageStabilizationOptionsExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__ImageStabilizationOptions_DEFINED
#define SOAP_TYPE_tt__ImageStabilizationOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ImageStabilizationOptions(struct soap*, const char*, int, const tt__ImageStabilizationOptions *, const char*);
SOAP_FMAC3 tt__ImageStabilizationOptions * SOAP_FMAC4 soap_in_tt__ImageStabilizationOptions(struct soap*, const char*, tt__ImageStabilizationOptions *, const char*);
SOAP_FMAC1 tt__ImageStabilizationOptions * SOAP_FMAC2 soap_instantiate_tt__ImageStabilizationOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__ImageStabilizationOptions * soap_new_tt__ImageStabilizationOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ImageStabilizationOptions(soap, n, NULL, NULL, NULL);
}

inline tt__ImageStabilizationOptions * soap_new_req_tt__ImageStabilizationOptions(
	struct soap *soap,
	const std::vector<enum tt__ImageStabilizationMode> & Mode)
{
	tt__ImageStabilizationOptions *_p = soap_new_tt__ImageStabilizationOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ImageStabilizationOptions::Mode = Mode;
	}
	return _p;
}

inline tt__ImageStabilizationOptions * soap_new_set_tt__ImageStabilizationOptions(
	struct soap *soap,
	const std::vector<enum tt__ImageStabilizationMode> & Mode,
	tt__FloatRange *Level,
	tt__ImageStabilizationOptionsExtension *Extension,
	char *__anyAttribute,
	char *__item1)
{
	tt__ImageStabilizationOptions *_p = soap_new_tt__ImageStabilizationOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ImageStabilizationOptions::Mode = Mode;
		_p->tt__ImageStabilizationOptions::Level = Level;
		_p->tt__ImageStabilizationOptions::Extension = Extension;
		_p->tt__ImageStabilizationOptions::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__ImageStabilizationOptions(struct soap *soap, tt__ImageStabilizationOptions const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ImageStabilizationOptions", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__ImageStabilizationOptions * SOAP_FMAC4 soap_get_tt__ImageStabilizationOptions(struct soap*, tt__ImageStabilizationOptions *, const char*, const char*);

inline int soap_read_tt__ImageStabilizationOptions(struct soap *soap, tt__ImageStabilizationOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__ImageStabilizationOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__ImagingOptions20Extension4_DEFINED
#define SOAP_TYPE_tt__ImagingOptions20Extension4_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ImagingOptions20Extension4(struct soap*, const char*, int, const tt__ImagingOptions20Extension4 *, const char*);
SOAP_FMAC3 tt__ImagingOptions20Extension4 * SOAP_FMAC4 soap_in_tt__ImagingOptions20Extension4(struct soap*, const char*, tt__ImagingOptions20Extension4 *, const char*);
SOAP_FMAC1 tt__ImagingOptions20Extension4 * SOAP_FMAC2 soap_instantiate_tt__ImagingOptions20Extension4(struct soap*, int, const char*, const char*, size_t*);

inline tt__ImagingOptions20Extension4 * soap_new_tt__ImagingOptions20Extension4(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ImagingOptions20Extension4(soap, n, NULL, NULL, NULL);
}

inline tt__ImagingOptions20Extension4 * soap_new_req_tt__ImagingOptions20Extension4(
	struct soap *soap)
{
	tt__ImagingOptions20Extension4 *_p = soap_new_tt__ImagingOptions20Extension4(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__ImagingOptions20Extension4 * soap_new_set_tt__ImagingOptions20Extension4(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__ImagingOptions20Extension4 *_p = soap_new_tt__ImagingOptions20Extension4(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ImagingOptions20Extension4::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__ImagingOptions20Extension4(struct soap *soap, tt__ImagingOptions20Extension4 const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ImagingOptions20Extension4", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__ImagingOptions20Extension4 * SOAP_FMAC4 soap_get_tt__ImagingOptions20Extension4(struct soap*, tt__ImagingOptions20Extension4 *, const char*, const char*);

inline int soap_read_tt__ImagingOptions20Extension4(struct soap *soap, tt__ImagingOptions20Extension4 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__ImagingOptions20Extension4(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__ImagingOptions20Extension3_DEFINED
#define SOAP_TYPE_tt__ImagingOptions20Extension3_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ImagingOptions20Extension3(struct soap*, const char*, int, const tt__ImagingOptions20Extension3 *, const char*);
SOAP_FMAC3 tt__ImagingOptions20Extension3 * SOAP_FMAC4 soap_in_tt__ImagingOptions20Extension3(struct soap*, const char*, tt__ImagingOptions20Extension3 *, const char*);
SOAP_FMAC1 tt__ImagingOptions20Extension3 * SOAP_FMAC2 soap_instantiate_tt__ImagingOptions20Extension3(struct soap*, int, const char*, const char*, size_t*);

inline tt__ImagingOptions20Extension3 * soap_new_tt__ImagingOptions20Extension3(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ImagingOptions20Extension3(soap, n, NULL, NULL, NULL);
}

inline tt__ImagingOptions20Extension3 * soap_new_req_tt__ImagingOptions20Extension3(
	struct soap *soap)
{
	tt__ImagingOptions20Extension3 *_p = soap_new_tt__ImagingOptions20Extension3(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__ImagingOptions20Extension3 * soap_new_set_tt__ImagingOptions20Extension3(
	struct soap *soap,
	tt__ToneCompensationOptions *ToneCompensationOptions,
	tt__DefoggingOptions *DefoggingOptions,
	tt__NoiseReductionOptions *NoiseReductionOptions,
	tt__ImagingOptions20Extension4 *Extension,
	char *__item1)
{
	tt__ImagingOptions20Extension3 *_p = soap_new_tt__ImagingOptions20Extension3(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ImagingOptions20Extension3::ToneCompensationOptions = ToneCompensationOptions;
		_p->tt__ImagingOptions20Extension3::DefoggingOptions = DefoggingOptions;
		_p->tt__ImagingOptions20Extension3::NoiseReductionOptions = NoiseReductionOptions;
		_p->tt__ImagingOptions20Extension3::Extension = Extension;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__ImagingOptions20Extension3(struct soap *soap, tt__ImagingOptions20Extension3 const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ImagingOptions20Extension3", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__ImagingOptions20Extension3 * SOAP_FMAC4 soap_get_tt__ImagingOptions20Extension3(struct soap*, tt__ImagingOptions20Extension3 *, const char*, const char*);

inline int soap_read_tt__ImagingOptions20Extension3(struct soap *soap, tt__ImagingOptions20Extension3 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__ImagingOptions20Extension3(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__ImagingOptions20Extension2_DEFINED
#define SOAP_TYPE_tt__ImagingOptions20Extension2_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ImagingOptions20Extension2(struct soap*, const char*, int, const tt__ImagingOptions20Extension2 *, const char*);
SOAP_FMAC3 tt__ImagingOptions20Extension2 * SOAP_FMAC4 soap_in_tt__ImagingOptions20Extension2(struct soap*, const char*, tt__ImagingOptions20Extension2 *, const char*);
SOAP_FMAC1 tt__ImagingOptions20Extension2 * SOAP_FMAC2 soap_instantiate_tt__ImagingOptions20Extension2(struct soap*, int, const char*, const char*, size_t*);

inline tt__ImagingOptions20Extension2 * soap_new_tt__ImagingOptions20Extension2(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ImagingOptions20Extension2(soap, n, NULL, NULL, NULL);
}

inline tt__ImagingOptions20Extension2 * soap_new_req_tt__ImagingOptions20Extension2(
	struct soap *soap)
{
	tt__ImagingOptions20Extension2 *_p = soap_new_tt__ImagingOptions20Extension2(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__ImagingOptions20Extension2 * soap_new_set_tt__ImagingOptions20Extension2(
	struct soap *soap,
	tt__IrCutFilterAutoAdjustmentOptions *IrCutFilterAutoAdjustment,
	tt__ImagingOptions20Extension3 *Extension,
	char *__item1)
{
	tt__ImagingOptions20Extension2 *_p = soap_new_tt__ImagingOptions20Extension2(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ImagingOptions20Extension2::IrCutFilterAutoAdjustment = IrCutFilterAutoAdjustment;
		_p->tt__ImagingOptions20Extension2::Extension = Extension;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__ImagingOptions20Extension2(struct soap *soap, tt__ImagingOptions20Extension2 const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ImagingOptions20Extension2", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__ImagingOptions20Extension2 * SOAP_FMAC4 soap_get_tt__ImagingOptions20Extension2(struct soap*, tt__ImagingOptions20Extension2 *, const char*, const char*);

inline int soap_read_tt__ImagingOptions20Extension2(struct soap *soap, tt__ImagingOptions20Extension2 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__ImagingOptions20Extension2(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__ImagingOptions20Extension_DEFINED
#define SOAP_TYPE_tt__ImagingOptions20Extension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ImagingOptions20Extension(struct soap*, const char*, int, const tt__ImagingOptions20Extension *, const char*);
SOAP_FMAC3 tt__ImagingOptions20Extension * SOAP_FMAC4 soap_in_tt__ImagingOptions20Extension(struct soap*, const char*, tt__ImagingOptions20Extension *, const char*);
SOAP_FMAC1 tt__ImagingOptions20Extension * SOAP_FMAC2 soap_instantiate_tt__ImagingOptions20Extension(struct soap*, int, const char*, const char*, size_t*);

inline tt__ImagingOptions20Extension * soap_new_tt__ImagingOptions20Extension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ImagingOptions20Extension(soap, n, NULL, NULL, NULL);
}

inline tt__ImagingOptions20Extension * soap_new_req_tt__ImagingOptions20Extension(
	struct soap *soap)
{
	tt__ImagingOptions20Extension *_p = soap_new_tt__ImagingOptions20Extension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__ImagingOptions20Extension * soap_new_set_tt__ImagingOptions20Extension(
	struct soap *soap,
	const std::vector<char *> & __any,
	tt__ImageStabilizationOptions *ImageStabilization,
	tt__ImagingOptions20Extension2 *Extension,
	char *__item1)
{
	tt__ImagingOptions20Extension *_p = soap_new_tt__ImagingOptions20Extension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ImagingOptions20Extension::__any = __any;
		_p->tt__ImagingOptions20Extension::ImageStabilization = ImageStabilization;
		_p->tt__ImagingOptions20Extension::Extension = Extension;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__ImagingOptions20Extension(struct soap *soap, tt__ImagingOptions20Extension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ImagingOptions20Extension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__ImagingOptions20Extension * SOAP_FMAC4 soap_get_tt__ImagingOptions20Extension(struct soap*, tt__ImagingOptions20Extension *, const char*, const char*);

inline int soap_read_tt__ImagingOptions20Extension(struct soap *soap, tt__ImagingOptions20Extension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__ImagingOptions20Extension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__ImagingOptions20_DEFINED
#define SOAP_TYPE_tt__ImagingOptions20_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ImagingOptions20(struct soap*, const char*, int, const tt__ImagingOptions20 *, const char*);
SOAP_FMAC3 tt__ImagingOptions20 * SOAP_FMAC4 soap_in_tt__ImagingOptions20(struct soap*, const char*, tt__ImagingOptions20 *, const char*);
SOAP_FMAC1 tt__ImagingOptions20 * SOAP_FMAC2 soap_instantiate_tt__ImagingOptions20(struct soap*, int, const char*, const char*, size_t*);

inline tt__ImagingOptions20 * soap_new_tt__ImagingOptions20(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ImagingOptions20(soap, n, NULL, NULL, NULL);
}

inline tt__ImagingOptions20 * soap_new_req_tt__ImagingOptions20(
	struct soap *soap)
{
	tt__ImagingOptions20 *_p = soap_new_tt__ImagingOptions20(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__ImagingOptions20 * soap_new_set_tt__ImagingOptions20(
	struct soap *soap,
	tt__BacklightCompensationOptions20 *BacklightCompensation,
	tt__FloatRange *Brightness,
	tt__FloatRange *ColorSaturation,
	tt__FloatRange *Contrast,
	tt__ExposureOptions20 *Exposure,
	tt__FocusOptions20 *Focus,
	const std::vector<enum tt__IrCutFilterMode> & IrCutFilterModes,
	tt__FloatRange *Sharpness,
	tt__WideDynamicRangeOptions20 *WideDynamicRange,
	tt__WhiteBalanceOptions20 *WhiteBalance,
	tt__ImagingOptions20Extension *Extension,
	char *__anyAttribute,
	char *__item1)
{
	tt__ImagingOptions20 *_p = soap_new_tt__ImagingOptions20(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ImagingOptions20::BacklightCompensation = BacklightCompensation;
		_p->tt__ImagingOptions20::Brightness = Brightness;
		_p->tt__ImagingOptions20::ColorSaturation = ColorSaturation;
		_p->tt__ImagingOptions20::Contrast = Contrast;
		_p->tt__ImagingOptions20::Exposure = Exposure;
		_p->tt__ImagingOptions20::Focus = Focus;
		_p->tt__ImagingOptions20::IrCutFilterModes = IrCutFilterModes;
		_p->tt__ImagingOptions20::Sharpness = Sharpness;
		_p->tt__ImagingOptions20::WideDynamicRange = WideDynamicRange;
		_p->tt__ImagingOptions20::WhiteBalance = WhiteBalance;
		_p->tt__ImagingOptions20::Extension = Extension;
		_p->tt__ImagingOptions20::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__ImagingOptions20(struct soap *soap, tt__ImagingOptions20 const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ImagingOptions20", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__ImagingOptions20 * SOAP_FMAC4 soap_get_tt__ImagingOptions20(struct soap*, tt__ImagingOptions20 *, const char*, const char*);

inline int soap_read_tt__ImagingOptions20(struct soap *soap, tt__ImagingOptions20 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__ImagingOptions20(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__NoiseReduction_DEFINED
#define SOAP_TYPE_tt__NoiseReduction_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__NoiseReduction(struct soap*, const char*, int, const tt__NoiseReduction *, const char*);
SOAP_FMAC3 tt__NoiseReduction * SOAP_FMAC4 soap_in_tt__NoiseReduction(struct soap*, const char*, tt__NoiseReduction *, const char*);
SOAP_FMAC1 tt__NoiseReduction * SOAP_FMAC2 soap_instantiate_tt__NoiseReduction(struct soap*, int, const char*, const char*, size_t*);

inline tt__NoiseReduction * soap_new_tt__NoiseReduction(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__NoiseReduction(soap, n, NULL, NULL, NULL);
}

inline tt__NoiseReduction * soap_new_req_tt__NoiseReduction(
	struct soap *soap,
	float Level)
{
	tt__NoiseReduction *_p = soap_new_tt__NoiseReduction(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__NoiseReduction::Level = Level;
	}
	return _p;
}

inline tt__NoiseReduction * soap_new_set_tt__NoiseReduction(
	struct soap *soap,
	float Level,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__NoiseReduction *_p = soap_new_tt__NoiseReduction(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__NoiseReduction::Level = Level;
		_p->tt__NoiseReduction::__any = __any;
		_p->tt__NoiseReduction::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__NoiseReduction(struct soap *soap, tt__NoiseReduction const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NoiseReduction", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__NoiseReduction * SOAP_FMAC4 soap_get_tt__NoiseReduction(struct soap*, tt__NoiseReduction *, const char*, const char*);

inline int soap_read_tt__NoiseReduction(struct soap *soap, tt__NoiseReduction *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__NoiseReduction(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__DefoggingExtension_DEFINED
#define SOAP_TYPE_tt__DefoggingExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__DefoggingExtension(struct soap*, const char*, int, const tt__DefoggingExtension *, const char*);
SOAP_FMAC3 tt__DefoggingExtension * SOAP_FMAC4 soap_in_tt__DefoggingExtension(struct soap*, const char*, tt__DefoggingExtension *, const char*);
SOAP_FMAC1 tt__DefoggingExtension * SOAP_FMAC2 soap_instantiate_tt__DefoggingExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__DefoggingExtension * soap_new_tt__DefoggingExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__DefoggingExtension(soap, n, NULL, NULL, NULL);
}

inline tt__DefoggingExtension * soap_new_req_tt__DefoggingExtension(
	struct soap *soap)
{
	tt__DefoggingExtension *_p = soap_new_tt__DefoggingExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__DefoggingExtension * soap_new_set_tt__DefoggingExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__DefoggingExtension *_p = soap_new_tt__DefoggingExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__DefoggingExtension::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__DefoggingExtension(struct soap *soap, tt__DefoggingExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:DefoggingExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__DefoggingExtension * SOAP_FMAC4 soap_get_tt__DefoggingExtension(struct soap*, tt__DefoggingExtension *, const char*, const char*);

inline int soap_read_tt__DefoggingExtension(struct soap *soap, tt__DefoggingExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__DefoggingExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__Defogging_DEFINED
#define SOAP_TYPE_tt__Defogging_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Defogging(struct soap*, const char*, int, const tt__Defogging *, const char*);
SOAP_FMAC3 tt__Defogging * SOAP_FMAC4 soap_in_tt__Defogging(struct soap*, const char*, tt__Defogging *, const char*);
SOAP_FMAC1 tt__Defogging * SOAP_FMAC2 soap_instantiate_tt__Defogging(struct soap*, int, const char*, const char*, size_t*);

inline tt__Defogging * soap_new_tt__Defogging(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Defogging(soap, n, NULL, NULL, NULL);
}

inline tt__Defogging * soap_new_req_tt__Defogging(
	struct soap *soap,
	const std::string& Mode)
{
	tt__Defogging *_p = soap_new_tt__Defogging(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Defogging::Mode = Mode;
	}
	return _p;
}

inline tt__Defogging * soap_new_set_tt__Defogging(
	struct soap *soap,
	const std::string& Mode,
	float *Level,
	tt__DefoggingExtension *Extension,
	char *__anyAttribute,
	char *__item1)
{
	tt__Defogging *_p = soap_new_tt__Defogging(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Defogging::Mode = Mode;
		_p->tt__Defogging::Level = Level;
		_p->tt__Defogging::Extension = Extension;
		_p->tt__Defogging::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__Defogging(struct soap *soap, tt__Defogging const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Defogging", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__Defogging * SOAP_FMAC4 soap_get_tt__Defogging(struct soap*, tt__Defogging *, const char*, const char*);

inline int soap_read_tt__Defogging(struct soap *soap, tt__Defogging *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__Defogging(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__ToneCompensationExtension_DEFINED
#define SOAP_TYPE_tt__ToneCompensationExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ToneCompensationExtension(struct soap*, const char*, int, const tt__ToneCompensationExtension *, const char*);
SOAP_FMAC3 tt__ToneCompensationExtension * SOAP_FMAC4 soap_in_tt__ToneCompensationExtension(struct soap*, const char*, tt__ToneCompensationExtension *, const char*);
SOAP_FMAC1 tt__ToneCompensationExtension * SOAP_FMAC2 soap_instantiate_tt__ToneCompensationExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__ToneCompensationExtension * soap_new_tt__ToneCompensationExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ToneCompensationExtension(soap, n, NULL, NULL, NULL);
}

inline tt__ToneCompensationExtension * soap_new_req_tt__ToneCompensationExtension(
	struct soap *soap)
{
	tt__ToneCompensationExtension *_p = soap_new_tt__ToneCompensationExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__ToneCompensationExtension * soap_new_set_tt__ToneCompensationExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__ToneCompensationExtension *_p = soap_new_tt__ToneCompensationExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ToneCompensationExtension::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__ToneCompensationExtension(struct soap *soap, tt__ToneCompensationExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ToneCompensationExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__ToneCompensationExtension * SOAP_FMAC4 soap_get_tt__ToneCompensationExtension(struct soap*, tt__ToneCompensationExtension *, const char*, const char*);

inline int soap_read_tt__ToneCompensationExtension(struct soap *soap, tt__ToneCompensationExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__ToneCompensationExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__ToneCompensation_DEFINED
#define SOAP_TYPE_tt__ToneCompensation_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ToneCompensation(struct soap*, const char*, int, const tt__ToneCompensation *, const char*);
SOAP_FMAC3 tt__ToneCompensation * SOAP_FMAC4 soap_in_tt__ToneCompensation(struct soap*, const char*, tt__ToneCompensation *, const char*);
SOAP_FMAC1 tt__ToneCompensation * SOAP_FMAC2 soap_instantiate_tt__ToneCompensation(struct soap*, int, const char*, const char*, size_t*);

inline tt__ToneCompensation * soap_new_tt__ToneCompensation(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ToneCompensation(soap, n, NULL, NULL, NULL);
}

inline tt__ToneCompensation * soap_new_req_tt__ToneCompensation(
	struct soap *soap,
	const std::string& Mode)
{
	tt__ToneCompensation *_p = soap_new_tt__ToneCompensation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ToneCompensation::Mode = Mode;
	}
	return _p;
}

inline tt__ToneCompensation * soap_new_set_tt__ToneCompensation(
	struct soap *soap,
	const std::string& Mode,
	float *Level,
	tt__ToneCompensationExtension *Extension,
	char *__anyAttribute,
	char *__item1)
{
	tt__ToneCompensation *_p = soap_new_tt__ToneCompensation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ToneCompensation::Mode = Mode;
		_p->tt__ToneCompensation::Level = Level;
		_p->tt__ToneCompensation::Extension = Extension;
		_p->tt__ToneCompensation::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__ToneCompensation(struct soap *soap, tt__ToneCompensation const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ToneCompensation", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__ToneCompensation * SOAP_FMAC4 soap_get_tt__ToneCompensation(struct soap*, tt__ToneCompensation *, const char*, const char*);

inline int soap_read_tt__ToneCompensation(struct soap *soap, tt__ToneCompensation *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__ToneCompensation(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__Exposure20_DEFINED
#define SOAP_TYPE_tt__Exposure20_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Exposure20(struct soap*, const char*, int, const tt__Exposure20 *, const char*);
SOAP_FMAC3 tt__Exposure20 * SOAP_FMAC4 soap_in_tt__Exposure20(struct soap*, const char*, tt__Exposure20 *, const char*);
SOAP_FMAC1 tt__Exposure20 * SOAP_FMAC2 soap_instantiate_tt__Exposure20(struct soap*, int, const char*, const char*, size_t*);

inline tt__Exposure20 * soap_new_tt__Exposure20(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Exposure20(soap, n, NULL, NULL, NULL);
}

inline tt__Exposure20 * soap_new_req_tt__Exposure20(
	struct soap *soap,
	enum tt__ExposureMode Mode)
{
	tt__Exposure20 *_p = soap_new_tt__Exposure20(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Exposure20::Mode = Mode;
	}
	return _p;
}

inline tt__Exposure20 * soap_new_set_tt__Exposure20(
	struct soap *soap,
	enum tt__ExposureMode Mode,
	enum tt__ExposurePriority *Priority,
	tt__Rectangle *Window,
	float *MinExposureTime,
	float *MaxExposureTime,
	float *MinGain,
	float *MaxGain,
	float *MinIris,
	float *MaxIris,
	float *ExposureTime,
	float *Gain,
	float *Iris,
	char *__item1)
{
	tt__Exposure20 *_p = soap_new_tt__Exposure20(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Exposure20::Mode = Mode;
		_p->tt__Exposure20::Priority = Priority;
		_p->tt__Exposure20::Window = Window;
		_p->tt__Exposure20::MinExposureTime = MinExposureTime;
		_p->tt__Exposure20::MaxExposureTime = MaxExposureTime;
		_p->tt__Exposure20::MinGain = MinGain;
		_p->tt__Exposure20::MaxGain = MaxGain;
		_p->tt__Exposure20::MinIris = MinIris;
		_p->tt__Exposure20::MaxIris = MaxIris;
		_p->tt__Exposure20::ExposureTime = ExposureTime;
		_p->tt__Exposure20::Gain = Gain;
		_p->tt__Exposure20::Iris = Iris;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__Exposure20(struct soap *soap, tt__Exposure20 const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Exposure20", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__Exposure20 * SOAP_FMAC4 soap_get_tt__Exposure20(struct soap*, tt__Exposure20 *, const char*, const char*);

inline int soap_read_tt__Exposure20(struct soap *soap, tt__Exposure20 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__Exposure20(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__BacklightCompensation20_DEFINED
#define SOAP_TYPE_tt__BacklightCompensation20_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__BacklightCompensation20(struct soap*, const char*, int, const tt__BacklightCompensation20 *, const char*);
SOAP_FMAC3 tt__BacklightCompensation20 * SOAP_FMAC4 soap_in_tt__BacklightCompensation20(struct soap*, const char*, tt__BacklightCompensation20 *, const char*);
SOAP_FMAC1 tt__BacklightCompensation20 * SOAP_FMAC2 soap_instantiate_tt__BacklightCompensation20(struct soap*, int, const char*, const char*, size_t*);

inline tt__BacklightCompensation20 * soap_new_tt__BacklightCompensation20(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__BacklightCompensation20(soap, n, NULL, NULL, NULL);
}

inline tt__BacklightCompensation20 * soap_new_req_tt__BacklightCompensation20(
	struct soap *soap,
	enum tt__BacklightCompensationMode Mode)
{
	tt__BacklightCompensation20 *_p = soap_new_tt__BacklightCompensation20(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__BacklightCompensation20::Mode = Mode;
	}
	return _p;
}

inline tt__BacklightCompensation20 * soap_new_set_tt__BacklightCompensation20(
	struct soap *soap,
	enum tt__BacklightCompensationMode Mode,
	float *Level,
	char *__item1)
{
	tt__BacklightCompensation20 *_p = soap_new_tt__BacklightCompensation20(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__BacklightCompensation20::Mode = Mode;
		_p->tt__BacklightCompensation20::Level = Level;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__BacklightCompensation20(struct soap *soap, tt__BacklightCompensation20 const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:BacklightCompensation20", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__BacklightCompensation20 * SOAP_FMAC4 soap_get_tt__BacklightCompensation20(struct soap*, tt__BacklightCompensation20 *, const char*, const char*);

inline int soap_read_tt__BacklightCompensation20(struct soap *soap, tt__BacklightCompensation20 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__BacklightCompensation20(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__WideDynamicRange20_DEFINED
#define SOAP_TYPE_tt__WideDynamicRange20_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__WideDynamicRange20(struct soap*, const char*, int, const tt__WideDynamicRange20 *, const char*);
SOAP_FMAC3 tt__WideDynamicRange20 * SOAP_FMAC4 soap_in_tt__WideDynamicRange20(struct soap*, const char*, tt__WideDynamicRange20 *, const char*);
SOAP_FMAC1 tt__WideDynamicRange20 * SOAP_FMAC2 soap_instantiate_tt__WideDynamicRange20(struct soap*, int, const char*, const char*, size_t*);

inline tt__WideDynamicRange20 * soap_new_tt__WideDynamicRange20(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__WideDynamicRange20(soap, n, NULL, NULL, NULL);
}

inline tt__WideDynamicRange20 * soap_new_req_tt__WideDynamicRange20(
	struct soap *soap,
	enum tt__WideDynamicMode Mode)
{
	tt__WideDynamicRange20 *_p = soap_new_tt__WideDynamicRange20(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__WideDynamicRange20::Mode = Mode;
	}
	return _p;
}

inline tt__WideDynamicRange20 * soap_new_set_tt__WideDynamicRange20(
	struct soap *soap,
	enum tt__WideDynamicMode Mode,
	float *Level,
	char *__item1)
{
	tt__WideDynamicRange20 *_p = soap_new_tt__WideDynamicRange20(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__WideDynamicRange20::Mode = Mode;
		_p->tt__WideDynamicRange20::Level = Level;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__WideDynamicRange20(struct soap *soap, tt__WideDynamicRange20 const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:WideDynamicRange20", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__WideDynamicRange20 * SOAP_FMAC4 soap_get_tt__WideDynamicRange20(struct soap*, tt__WideDynamicRange20 *, const char*, const char*);

inline int soap_read_tt__WideDynamicRange20(struct soap *soap, tt__WideDynamicRange20 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__WideDynamicRange20(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__IrCutFilterAutoAdjustmentExtension_DEFINED
#define SOAP_TYPE_tt__IrCutFilterAutoAdjustmentExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IrCutFilterAutoAdjustmentExtension(struct soap*, const char*, int, const tt__IrCutFilterAutoAdjustmentExtension *, const char*);
SOAP_FMAC3 tt__IrCutFilterAutoAdjustmentExtension * SOAP_FMAC4 soap_in_tt__IrCutFilterAutoAdjustmentExtension(struct soap*, const char*, tt__IrCutFilterAutoAdjustmentExtension *, const char*);
SOAP_FMAC1 tt__IrCutFilterAutoAdjustmentExtension * SOAP_FMAC2 soap_instantiate_tt__IrCutFilterAutoAdjustmentExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__IrCutFilterAutoAdjustmentExtension * soap_new_tt__IrCutFilterAutoAdjustmentExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__IrCutFilterAutoAdjustmentExtension(soap, n, NULL, NULL, NULL);
}

inline tt__IrCutFilterAutoAdjustmentExtension * soap_new_req_tt__IrCutFilterAutoAdjustmentExtension(
	struct soap *soap)
{
	tt__IrCutFilterAutoAdjustmentExtension *_p = soap_new_tt__IrCutFilterAutoAdjustmentExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__IrCutFilterAutoAdjustmentExtension * soap_new_set_tt__IrCutFilterAutoAdjustmentExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__IrCutFilterAutoAdjustmentExtension *_p = soap_new_tt__IrCutFilterAutoAdjustmentExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__IrCutFilterAutoAdjustmentExtension::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__IrCutFilterAutoAdjustmentExtension(struct soap *soap, tt__IrCutFilterAutoAdjustmentExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IrCutFilterAutoAdjustmentExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__IrCutFilterAutoAdjustmentExtension * SOAP_FMAC4 soap_get_tt__IrCutFilterAutoAdjustmentExtension(struct soap*, tt__IrCutFilterAutoAdjustmentExtension *, const char*, const char*);

inline int soap_read_tt__IrCutFilterAutoAdjustmentExtension(struct soap *soap, tt__IrCutFilterAutoAdjustmentExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__IrCutFilterAutoAdjustmentExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__IrCutFilterAutoAdjustment_DEFINED
#define SOAP_TYPE_tt__IrCutFilterAutoAdjustment_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IrCutFilterAutoAdjustment(struct soap*, const char*, int, const tt__IrCutFilterAutoAdjustment *, const char*);
SOAP_FMAC3 tt__IrCutFilterAutoAdjustment * SOAP_FMAC4 soap_in_tt__IrCutFilterAutoAdjustment(struct soap*, const char*, tt__IrCutFilterAutoAdjustment *, const char*);
SOAP_FMAC1 tt__IrCutFilterAutoAdjustment * SOAP_FMAC2 soap_instantiate_tt__IrCutFilterAutoAdjustment(struct soap*, int, const char*, const char*, size_t*);

inline tt__IrCutFilterAutoAdjustment * soap_new_tt__IrCutFilterAutoAdjustment(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__IrCutFilterAutoAdjustment(soap, n, NULL, NULL, NULL);
}

inline tt__IrCutFilterAutoAdjustment * soap_new_req_tt__IrCutFilterAutoAdjustment(
	struct soap *soap,
	const std::string& BoundaryType)
{
	tt__IrCutFilterAutoAdjustment *_p = soap_new_tt__IrCutFilterAutoAdjustment(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__IrCutFilterAutoAdjustment::BoundaryType = BoundaryType;
	}
	return _p;
}

inline tt__IrCutFilterAutoAdjustment * soap_new_set_tt__IrCutFilterAutoAdjustment(
	struct soap *soap,
	const std::string& BoundaryType,
	float *BoundaryOffset,
	LONG64 *ResponseTime,
	tt__IrCutFilterAutoAdjustmentExtension *Extension,
	char *__anyAttribute,
	char *__item1)
{
	tt__IrCutFilterAutoAdjustment *_p = soap_new_tt__IrCutFilterAutoAdjustment(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__IrCutFilterAutoAdjustment::BoundaryType = BoundaryType;
		_p->tt__IrCutFilterAutoAdjustment::BoundaryOffset = BoundaryOffset;
		_p->tt__IrCutFilterAutoAdjustment::ResponseTime = ResponseTime;
		_p->tt__IrCutFilterAutoAdjustment::Extension = Extension;
		_p->tt__IrCutFilterAutoAdjustment::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__IrCutFilterAutoAdjustment(struct soap *soap, tt__IrCutFilterAutoAdjustment const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IrCutFilterAutoAdjustment", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__IrCutFilterAutoAdjustment * SOAP_FMAC4 soap_get_tt__IrCutFilterAutoAdjustment(struct soap*, tt__IrCutFilterAutoAdjustment *, const char*, const char*);

inline int soap_read_tt__IrCutFilterAutoAdjustment(struct soap *soap, tt__IrCutFilterAutoAdjustment *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__IrCutFilterAutoAdjustment(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__ImageStabilizationExtension_DEFINED
#define SOAP_TYPE_tt__ImageStabilizationExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ImageStabilizationExtension(struct soap*, const char*, int, const tt__ImageStabilizationExtension *, const char*);
SOAP_FMAC3 tt__ImageStabilizationExtension * SOAP_FMAC4 soap_in_tt__ImageStabilizationExtension(struct soap*, const char*, tt__ImageStabilizationExtension *, const char*);
SOAP_FMAC1 tt__ImageStabilizationExtension * SOAP_FMAC2 soap_instantiate_tt__ImageStabilizationExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__ImageStabilizationExtension * soap_new_tt__ImageStabilizationExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ImageStabilizationExtension(soap, n, NULL, NULL, NULL);
}

inline tt__ImageStabilizationExtension * soap_new_req_tt__ImageStabilizationExtension(
	struct soap *soap)
{
	tt__ImageStabilizationExtension *_p = soap_new_tt__ImageStabilizationExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__ImageStabilizationExtension * soap_new_set_tt__ImageStabilizationExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__ImageStabilizationExtension *_p = soap_new_tt__ImageStabilizationExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ImageStabilizationExtension::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__ImageStabilizationExtension(struct soap *soap, tt__ImageStabilizationExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ImageStabilizationExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__ImageStabilizationExtension * SOAP_FMAC4 soap_get_tt__ImageStabilizationExtension(struct soap*, tt__ImageStabilizationExtension *, const char*, const char*);

inline int soap_read_tt__ImageStabilizationExtension(struct soap *soap, tt__ImageStabilizationExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__ImageStabilizationExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__ImageStabilization_DEFINED
#define SOAP_TYPE_tt__ImageStabilization_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ImageStabilization(struct soap*, const char*, int, const tt__ImageStabilization *, const char*);
SOAP_FMAC3 tt__ImageStabilization * SOAP_FMAC4 soap_in_tt__ImageStabilization(struct soap*, const char*, tt__ImageStabilization *, const char*);
SOAP_FMAC1 tt__ImageStabilization * SOAP_FMAC2 soap_instantiate_tt__ImageStabilization(struct soap*, int, const char*, const char*, size_t*);

inline tt__ImageStabilization * soap_new_tt__ImageStabilization(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ImageStabilization(soap, n, NULL, NULL, NULL);
}

inline tt__ImageStabilization * soap_new_req_tt__ImageStabilization(
	struct soap *soap,
	enum tt__ImageStabilizationMode Mode)
{
	tt__ImageStabilization *_p = soap_new_tt__ImageStabilization(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ImageStabilization::Mode = Mode;
	}
	return _p;
}

inline tt__ImageStabilization * soap_new_set_tt__ImageStabilization(
	struct soap *soap,
	enum tt__ImageStabilizationMode Mode,
	float *Level,
	tt__ImageStabilizationExtension *Extension,
	char *__anyAttribute,
	char *__item1)
{
	tt__ImageStabilization *_p = soap_new_tt__ImageStabilization(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ImageStabilization::Mode = Mode;
		_p->tt__ImageStabilization::Level = Level;
		_p->tt__ImageStabilization::Extension = Extension;
		_p->tt__ImageStabilization::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__ImageStabilization(struct soap *soap, tt__ImageStabilization const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ImageStabilization", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__ImageStabilization * SOAP_FMAC4 soap_get_tt__ImageStabilization(struct soap*, tt__ImageStabilization *, const char*, const char*);

inline int soap_read_tt__ImageStabilization(struct soap *soap, tt__ImageStabilization *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__ImageStabilization(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__ImagingSettingsExtension204_DEFINED
#define SOAP_TYPE_tt__ImagingSettingsExtension204_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ImagingSettingsExtension204(struct soap*, const char*, int, const tt__ImagingSettingsExtension204 *, const char*);
SOAP_FMAC3 tt__ImagingSettingsExtension204 * SOAP_FMAC4 soap_in_tt__ImagingSettingsExtension204(struct soap*, const char*, tt__ImagingSettingsExtension204 *, const char*);
SOAP_FMAC1 tt__ImagingSettingsExtension204 * SOAP_FMAC2 soap_instantiate_tt__ImagingSettingsExtension204(struct soap*, int, const char*, const char*, size_t*);

inline tt__ImagingSettingsExtension204 * soap_new_tt__ImagingSettingsExtension204(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ImagingSettingsExtension204(soap, n, NULL, NULL, NULL);
}

inline tt__ImagingSettingsExtension204 * soap_new_req_tt__ImagingSettingsExtension204(
	struct soap *soap)
{
	tt__ImagingSettingsExtension204 *_p = soap_new_tt__ImagingSettingsExtension204(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__ImagingSettingsExtension204 * soap_new_set_tt__ImagingSettingsExtension204(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__ImagingSettingsExtension204 *_p = soap_new_tt__ImagingSettingsExtension204(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ImagingSettingsExtension204::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__ImagingSettingsExtension204(struct soap *soap, tt__ImagingSettingsExtension204 const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ImagingSettingsExtension204", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__ImagingSettingsExtension204 * SOAP_FMAC4 soap_get_tt__ImagingSettingsExtension204(struct soap*, tt__ImagingSettingsExtension204 *, const char*, const char*);

inline int soap_read_tt__ImagingSettingsExtension204(struct soap *soap, tt__ImagingSettingsExtension204 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__ImagingSettingsExtension204(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__ImagingSettingsExtension203_DEFINED
#define SOAP_TYPE_tt__ImagingSettingsExtension203_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ImagingSettingsExtension203(struct soap*, const char*, int, const tt__ImagingSettingsExtension203 *, const char*);
SOAP_FMAC3 tt__ImagingSettingsExtension203 * SOAP_FMAC4 soap_in_tt__ImagingSettingsExtension203(struct soap*, const char*, tt__ImagingSettingsExtension203 *, const char*);
SOAP_FMAC1 tt__ImagingSettingsExtension203 * SOAP_FMAC2 soap_instantiate_tt__ImagingSettingsExtension203(struct soap*, int, const char*, const char*, size_t*);

inline tt__ImagingSettingsExtension203 * soap_new_tt__ImagingSettingsExtension203(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ImagingSettingsExtension203(soap, n, NULL, NULL, NULL);
}

inline tt__ImagingSettingsExtension203 * soap_new_req_tt__ImagingSettingsExtension203(
	struct soap *soap)
{
	tt__ImagingSettingsExtension203 *_p = soap_new_tt__ImagingSettingsExtension203(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__ImagingSettingsExtension203 * soap_new_set_tt__ImagingSettingsExtension203(
	struct soap *soap,
	tt__ToneCompensation *ToneCompensation,
	tt__Defogging *Defogging,
	tt__NoiseReduction *NoiseReduction,
	tt__ImagingSettingsExtension204 *Extension,
	char *__item1)
{
	tt__ImagingSettingsExtension203 *_p = soap_new_tt__ImagingSettingsExtension203(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ImagingSettingsExtension203::ToneCompensation = ToneCompensation;
		_p->tt__ImagingSettingsExtension203::Defogging = Defogging;
		_p->tt__ImagingSettingsExtension203::NoiseReduction = NoiseReduction;
		_p->tt__ImagingSettingsExtension203::Extension = Extension;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__ImagingSettingsExtension203(struct soap *soap, tt__ImagingSettingsExtension203 const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ImagingSettingsExtension203", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__ImagingSettingsExtension203 * SOAP_FMAC4 soap_get_tt__ImagingSettingsExtension203(struct soap*, tt__ImagingSettingsExtension203 *, const char*, const char*);

inline int soap_read_tt__ImagingSettingsExtension203(struct soap *soap, tt__ImagingSettingsExtension203 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__ImagingSettingsExtension203(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__ImagingSettingsExtension202_DEFINED
#define SOAP_TYPE_tt__ImagingSettingsExtension202_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ImagingSettingsExtension202(struct soap*, const char*, int, const tt__ImagingSettingsExtension202 *, const char*);
SOAP_FMAC3 tt__ImagingSettingsExtension202 * SOAP_FMAC4 soap_in_tt__ImagingSettingsExtension202(struct soap*, const char*, tt__ImagingSettingsExtension202 *, const char*);
SOAP_FMAC1 tt__ImagingSettingsExtension202 * SOAP_FMAC2 soap_instantiate_tt__ImagingSettingsExtension202(struct soap*, int, const char*, const char*, size_t*);

inline tt__ImagingSettingsExtension202 * soap_new_tt__ImagingSettingsExtension202(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ImagingSettingsExtension202(soap, n, NULL, NULL, NULL);
}

inline tt__ImagingSettingsExtension202 * soap_new_req_tt__ImagingSettingsExtension202(
	struct soap *soap)
{
	tt__ImagingSettingsExtension202 *_p = soap_new_tt__ImagingSettingsExtension202(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__ImagingSettingsExtension202 * soap_new_set_tt__ImagingSettingsExtension202(
	struct soap *soap,
	const std::vector<tt__IrCutFilterAutoAdjustment *> & IrCutFilterAutoAdjustment,
	tt__ImagingSettingsExtension203 *Extension,
	char *__item1)
{
	tt__ImagingSettingsExtension202 *_p = soap_new_tt__ImagingSettingsExtension202(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ImagingSettingsExtension202::IrCutFilterAutoAdjustment = IrCutFilterAutoAdjustment;
		_p->tt__ImagingSettingsExtension202::Extension = Extension;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__ImagingSettingsExtension202(struct soap *soap, tt__ImagingSettingsExtension202 const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ImagingSettingsExtension202", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__ImagingSettingsExtension202 * SOAP_FMAC4 soap_get_tt__ImagingSettingsExtension202(struct soap*, tt__ImagingSettingsExtension202 *, const char*, const char*);

inline int soap_read_tt__ImagingSettingsExtension202(struct soap *soap, tt__ImagingSettingsExtension202 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__ImagingSettingsExtension202(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__ImagingSettingsExtension20_DEFINED
#define SOAP_TYPE_tt__ImagingSettingsExtension20_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ImagingSettingsExtension20(struct soap*, const char*, int, const tt__ImagingSettingsExtension20 *, const char*);
SOAP_FMAC3 tt__ImagingSettingsExtension20 * SOAP_FMAC4 soap_in_tt__ImagingSettingsExtension20(struct soap*, const char*, tt__ImagingSettingsExtension20 *, const char*);
SOAP_FMAC1 tt__ImagingSettingsExtension20 * SOAP_FMAC2 soap_instantiate_tt__ImagingSettingsExtension20(struct soap*, int, const char*, const char*, size_t*);

inline tt__ImagingSettingsExtension20 * soap_new_tt__ImagingSettingsExtension20(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ImagingSettingsExtension20(soap, n, NULL, NULL, NULL);
}

inline tt__ImagingSettingsExtension20 * soap_new_req_tt__ImagingSettingsExtension20(
	struct soap *soap)
{
	tt__ImagingSettingsExtension20 *_p = soap_new_tt__ImagingSettingsExtension20(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__ImagingSettingsExtension20 * soap_new_set_tt__ImagingSettingsExtension20(
	struct soap *soap,
	const std::vector<char *> & __any,
	tt__ImageStabilization *ImageStabilization,
	tt__ImagingSettingsExtension202 *Extension,
	char *__item1)
{
	tt__ImagingSettingsExtension20 *_p = soap_new_tt__ImagingSettingsExtension20(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ImagingSettingsExtension20::__any = __any;
		_p->tt__ImagingSettingsExtension20::ImageStabilization = ImageStabilization;
		_p->tt__ImagingSettingsExtension20::Extension = Extension;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__ImagingSettingsExtension20(struct soap *soap, tt__ImagingSettingsExtension20 const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ImagingSettingsExtension20", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__ImagingSettingsExtension20 * SOAP_FMAC4 soap_get_tt__ImagingSettingsExtension20(struct soap*, tt__ImagingSettingsExtension20 *, const char*, const char*);

inline int soap_read_tt__ImagingSettingsExtension20(struct soap *soap, tt__ImagingSettingsExtension20 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__ImagingSettingsExtension20(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__ImagingSettings20_DEFINED
#define SOAP_TYPE_tt__ImagingSettings20_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ImagingSettings20(struct soap*, const char*, int, const tt__ImagingSettings20 *, const char*);
SOAP_FMAC3 tt__ImagingSettings20 * SOAP_FMAC4 soap_in_tt__ImagingSettings20(struct soap*, const char*, tt__ImagingSettings20 *, const char*);
SOAP_FMAC1 tt__ImagingSettings20 * SOAP_FMAC2 soap_instantiate_tt__ImagingSettings20(struct soap*, int, const char*, const char*, size_t*);

inline tt__ImagingSettings20 * soap_new_tt__ImagingSettings20(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ImagingSettings20(soap, n, NULL, NULL, NULL);
}

inline tt__ImagingSettings20 * soap_new_req_tt__ImagingSettings20(
	struct soap *soap)
{
	tt__ImagingSettings20 *_p = soap_new_tt__ImagingSettings20(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__ImagingSettings20 * soap_new_set_tt__ImagingSettings20(
	struct soap *soap,
	tt__BacklightCompensation20 *BacklightCompensation,
	float *Brightness,
	float *ColorSaturation,
	float *Contrast,
	tt__Exposure20 *Exposure,
	tt__FocusConfiguration20 *Focus,
	enum tt__IrCutFilterMode *IrCutFilter,
	float *Sharpness,
	tt__WideDynamicRange20 *WideDynamicRange,
	tt__WhiteBalance20 *WhiteBalance,
	tt__ImagingSettingsExtension20 *Extension,
	char *__anyAttribute,
	char *__item1)
{
	tt__ImagingSettings20 *_p = soap_new_tt__ImagingSettings20(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ImagingSettings20::BacklightCompensation = BacklightCompensation;
		_p->tt__ImagingSettings20::Brightness = Brightness;
		_p->tt__ImagingSettings20::ColorSaturation = ColorSaturation;
		_p->tt__ImagingSettings20::Contrast = Contrast;
		_p->tt__ImagingSettings20::Exposure = Exposure;
		_p->tt__ImagingSettings20::Focus = Focus;
		_p->tt__ImagingSettings20::IrCutFilter = IrCutFilter;
		_p->tt__ImagingSettings20::Sharpness = Sharpness;
		_p->tt__ImagingSettings20::WideDynamicRange = WideDynamicRange;
		_p->tt__ImagingSettings20::WhiteBalance = WhiteBalance;
		_p->tt__ImagingSettings20::Extension = Extension;
		_p->tt__ImagingSettings20::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__ImagingSettings20(struct soap *soap, tt__ImagingSettings20 const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ImagingSettings20", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__ImagingSettings20 * SOAP_FMAC4 soap_get_tt__ImagingSettings20(struct soap*, tt__ImagingSettings20 *, const char*, const char*);

inline int soap_read_tt__ImagingSettings20(struct soap *soap, tt__ImagingSettings20 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__ImagingSettings20(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__FocusStatus20Extension_DEFINED
#define SOAP_TYPE_tt__FocusStatus20Extension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__FocusStatus20Extension(struct soap*, const char*, int, const tt__FocusStatus20Extension *, const char*);
SOAP_FMAC3 tt__FocusStatus20Extension * SOAP_FMAC4 soap_in_tt__FocusStatus20Extension(struct soap*, const char*, tt__FocusStatus20Extension *, const char*);
SOAP_FMAC1 tt__FocusStatus20Extension * SOAP_FMAC2 soap_instantiate_tt__FocusStatus20Extension(struct soap*, int, const char*, const char*, size_t*);

inline tt__FocusStatus20Extension * soap_new_tt__FocusStatus20Extension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__FocusStatus20Extension(soap, n, NULL, NULL, NULL);
}

inline tt__FocusStatus20Extension * soap_new_req_tt__FocusStatus20Extension(
	struct soap *soap)
{
	tt__FocusStatus20Extension *_p = soap_new_tt__FocusStatus20Extension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__FocusStatus20Extension * soap_new_set_tt__FocusStatus20Extension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__FocusStatus20Extension *_p = soap_new_tt__FocusStatus20Extension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__FocusStatus20Extension::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__FocusStatus20Extension(struct soap *soap, tt__FocusStatus20Extension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:FocusStatus20Extension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__FocusStatus20Extension * SOAP_FMAC4 soap_get_tt__FocusStatus20Extension(struct soap*, tt__FocusStatus20Extension *, const char*, const char*);

inline int soap_read_tt__FocusStatus20Extension(struct soap *soap, tt__FocusStatus20Extension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__FocusStatus20Extension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__FocusStatus20_DEFINED
#define SOAP_TYPE_tt__FocusStatus20_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__FocusStatus20(struct soap*, const char*, int, const tt__FocusStatus20 *, const char*);
SOAP_FMAC3 tt__FocusStatus20 * SOAP_FMAC4 soap_in_tt__FocusStatus20(struct soap*, const char*, tt__FocusStatus20 *, const char*);
SOAP_FMAC1 tt__FocusStatus20 * SOAP_FMAC2 soap_instantiate_tt__FocusStatus20(struct soap*, int, const char*, const char*, size_t*);

inline tt__FocusStatus20 * soap_new_tt__FocusStatus20(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__FocusStatus20(soap, n, NULL, NULL, NULL);
}

inline tt__FocusStatus20 * soap_new_req_tt__FocusStatus20(
	struct soap *soap,
	float Position,
	enum tt__MoveStatus MoveStatus)
{
	tt__FocusStatus20 *_p = soap_new_tt__FocusStatus20(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__FocusStatus20::Position = Position;
		_p->tt__FocusStatus20::MoveStatus = MoveStatus;
	}
	return _p;
}

inline tt__FocusStatus20 * soap_new_set_tt__FocusStatus20(
	struct soap *soap,
	float Position,
	enum tt__MoveStatus MoveStatus,
	std::string *Error,
	tt__FocusStatus20Extension *Extension,
	char *__anyAttribute,
	char *__item1)
{
	tt__FocusStatus20 *_p = soap_new_tt__FocusStatus20(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__FocusStatus20::Position = Position;
		_p->tt__FocusStatus20::MoveStatus = MoveStatus;
		_p->tt__FocusStatus20::Error = Error;
		_p->tt__FocusStatus20::Extension = Extension;
		_p->tt__FocusStatus20::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__FocusStatus20(struct soap *soap, tt__FocusStatus20 const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:FocusStatus20", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__FocusStatus20 * SOAP_FMAC4 soap_get_tt__FocusStatus20(struct soap*, tt__FocusStatus20 *, const char*, const char*);

inline int soap_read_tt__FocusStatus20(struct soap *soap, tt__FocusStatus20 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__FocusStatus20(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__ImagingStatus20Extension_DEFINED
#define SOAP_TYPE_tt__ImagingStatus20Extension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ImagingStatus20Extension(struct soap*, const char*, int, const tt__ImagingStatus20Extension *, const char*);
SOAP_FMAC3 tt__ImagingStatus20Extension * SOAP_FMAC4 soap_in_tt__ImagingStatus20Extension(struct soap*, const char*, tt__ImagingStatus20Extension *, const char*);
SOAP_FMAC1 tt__ImagingStatus20Extension * SOAP_FMAC2 soap_instantiate_tt__ImagingStatus20Extension(struct soap*, int, const char*, const char*, size_t*);

inline tt__ImagingStatus20Extension * soap_new_tt__ImagingStatus20Extension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ImagingStatus20Extension(soap, n, NULL, NULL, NULL);
}

inline tt__ImagingStatus20Extension * soap_new_req_tt__ImagingStatus20Extension(
	struct soap *soap)
{
	tt__ImagingStatus20Extension *_p = soap_new_tt__ImagingStatus20Extension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__ImagingStatus20Extension * soap_new_set_tt__ImagingStatus20Extension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__ImagingStatus20Extension *_p = soap_new_tt__ImagingStatus20Extension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ImagingStatus20Extension::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__ImagingStatus20Extension(struct soap *soap, tt__ImagingStatus20Extension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ImagingStatus20Extension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__ImagingStatus20Extension * SOAP_FMAC4 soap_get_tt__ImagingStatus20Extension(struct soap*, tt__ImagingStatus20Extension *, const char*, const char*);

inline int soap_read_tt__ImagingStatus20Extension(struct soap *soap, tt__ImagingStatus20Extension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__ImagingStatus20Extension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__ImagingStatus20_DEFINED
#define SOAP_TYPE_tt__ImagingStatus20_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ImagingStatus20(struct soap*, const char*, int, const tt__ImagingStatus20 *, const char*);
SOAP_FMAC3 tt__ImagingStatus20 * SOAP_FMAC4 soap_in_tt__ImagingStatus20(struct soap*, const char*, tt__ImagingStatus20 *, const char*);
SOAP_FMAC1 tt__ImagingStatus20 * SOAP_FMAC2 soap_instantiate_tt__ImagingStatus20(struct soap*, int, const char*, const char*, size_t*);

inline tt__ImagingStatus20 * soap_new_tt__ImagingStatus20(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ImagingStatus20(soap, n, NULL, NULL, NULL);
}

inline tt__ImagingStatus20 * soap_new_req_tt__ImagingStatus20(
	struct soap *soap)
{
	tt__ImagingStatus20 *_p = soap_new_tt__ImagingStatus20(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__ImagingStatus20 * soap_new_set_tt__ImagingStatus20(
	struct soap *soap,
	tt__FocusStatus20 *FocusStatus20,
	tt__ImagingStatus20Extension *Extension,
	char *__anyAttribute,
	char *__item1)
{
	tt__ImagingStatus20 *_p = soap_new_tt__ImagingStatus20(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ImagingStatus20::FocusStatus20 = FocusStatus20;
		_p->tt__ImagingStatus20::Extension = Extension;
		_p->tt__ImagingStatus20::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__ImagingStatus20(struct soap *soap, tt__ImagingStatus20 const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ImagingStatus20", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__ImagingStatus20 * SOAP_FMAC4 soap_get_tt__ImagingStatus20(struct soap*, tt__ImagingStatus20 *, const char*, const char*);

inline int soap_read_tt__ImagingStatus20(struct soap *soap, tt__ImagingStatus20 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__ImagingStatus20(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__WhiteBalance_DEFINED
#define SOAP_TYPE_tt__WhiteBalance_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__WhiteBalance(struct soap*, const char*, int, const tt__WhiteBalance *, const char*);
SOAP_FMAC3 tt__WhiteBalance * SOAP_FMAC4 soap_in_tt__WhiteBalance(struct soap*, const char*, tt__WhiteBalance *, const char*);
SOAP_FMAC1 tt__WhiteBalance * SOAP_FMAC2 soap_instantiate_tt__WhiteBalance(struct soap*, int, const char*, const char*, size_t*);

inline tt__WhiteBalance * soap_new_tt__WhiteBalance(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__WhiteBalance(soap, n, NULL, NULL, NULL);
}

inline tt__WhiteBalance * soap_new_req_tt__WhiteBalance(
	struct soap *soap,
	enum tt__WhiteBalanceMode Mode,
	float CrGain,
	float CbGain)
{
	tt__WhiteBalance *_p = soap_new_tt__WhiteBalance(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__WhiteBalance::Mode = Mode;
		_p->tt__WhiteBalance::CrGain = CrGain;
		_p->tt__WhiteBalance::CbGain = CbGain;
	}
	return _p;
}

inline tt__WhiteBalance * soap_new_set_tt__WhiteBalance(
	struct soap *soap,
	enum tt__WhiteBalanceMode Mode,
	float CrGain,
	float CbGain,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__WhiteBalance *_p = soap_new_tt__WhiteBalance(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__WhiteBalance::Mode = Mode;
		_p->tt__WhiteBalance::CrGain = CrGain;
		_p->tt__WhiteBalance::CbGain = CbGain;
		_p->tt__WhiteBalance::__any = __any;
		_p->tt__WhiteBalance::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__WhiteBalance(struct soap *soap, tt__WhiteBalance const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:WhiteBalance", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__WhiteBalance * SOAP_FMAC4 soap_get_tt__WhiteBalance(struct soap*, tt__WhiteBalance *, const char*, const char*);

inline int soap_read_tt__WhiteBalance(struct soap *soap, tt__WhiteBalance *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__WhiteBalance(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__ContinuousFocusOptions_DEFINED
#define SOAP_TYPE_tt__ContinuousFocusOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ContinuousFocusOptions(struct soap*, const char*, int, const tt__ContinuousFocusOptions *, const char*);
SOAP_FMAC3 tt__ContinuousFocusOptions * SOAP_FMAC4 soap_in_tt__ContinuousFocusOptions(struct soap*, const char*, tt__ContinuousFocusOptions *, const char*);
SOAP_FMAC1 tt__ContinuousFocusOptions * SOAP_FMAC2 soap_instantiate_tt__ContinuousFocusOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__ContinuousFocusOptions * soap_new_tt__ContinuousFocusOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ContinuousFocusOptions(soap, n, NULL, NULL, NULL);
}

inline tt__ContinuousFocusOptions * soap_new_req_tt__ContinuousFocusOptions(
	struct soap *soap,
	tt__FloatRange *Speed)
{
	tt__ContinuousFocusOptions *_p = soap_new_tt__ContinuousFocusOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ContinuousFocusOptions::Speed = Speed;
	}
	return _p;
}

inline tt__ContinuousFocusOptions * soap_new_set_tt__ContinuousFocusOptions(
	struct soap *soap,
	tt__FloatRange *Speed,
	char *__item1)
{
	tt__ContinuousFocusOptions *_p = soap_new_tt__ContinuousFocusOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ContinuousFocusOptions::Speed = Speed;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__ContinuousFocusOptions(struct soap *soap, tt__ContinuousFocusOptions const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ContinuousFocusOptions", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__ContinuousFocusOptions * SOAP_FMAC4 soap_get_tt__ContinuousFocusOptions(struct soap*, tt__ContinuousFocusOptions *, const char*, const char*);

inline int soap_read_tt__ContinuousFocusOptions(struct soap *soap, tt__ContinuousFocusOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__ContinuousFocusOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__RelativeFocusOptions_DEFINED
#define SOAP_TYPE_tt__RelativeFocusOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RelativeFocusOptions(struct soap*, const char*, int, const tt__RelativeFocusOptions *, const char*);
SOAP_FMAC3 tt__RelativeFocusOptions * SOAP_FMAC4 soap_in_tt__RelativeFocusOptions(struct soap*, const char*, tt__RelativeFocusOptions *, const char*);
SOAP_FMAC1 tt__RelativeFocusOptions * SOAP_FMAC2 soap_instantiate_tt__RelativeFocusOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__RelativeFocusOptions * soap_new_tt__RelativeFocusOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__RelativeFocusOptions(soap, n, NULL, NULL, NULL);
}

inline tt__RelativeFocusOptions * soap_new_req_tt__RelativeFocusOptions(
	struct soap *soap,
	tt__FloatRange *Distance,
	tt__FloatRange *Speed)
{
	tt__RelativeFocusOptions *_p = soap_new_tt__RelativeFocusOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__RelativeFocusOptions::Distance = Distance;
		_p->tt__RelativeFocusOptions::Speed = Speed;
	}
	return _p;
}

inline tt__RelativeFocusOptions * soap_new_set_tt__RelativeFocusOptions(
	struct soap *soap,
	tt__FloatRange *Distance,
	tt__FloatRange *Speed,
	char *__item1)
{
	tt__RelativeFocusOptions *_p = soap_new_tt__RelativeFocusOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__RelativeFocusOptions::Distance = Distance;
		_p->tt__RelativeFocusOptions::Speed = Speed;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__RelativeFocusOptions(struct soap *soap, tt__RelativeFocusOptions const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:RelativeFocusOptions", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__RelativeFocusOptions * SOAP_FMAC4 soap_get_tt__RelativeFocusOptions(struct soap*, tt__RelativeFocusOptions *, const char*, const char*);

inline int soap_read_tt__RelativeFocusOptions(struct soap *soap, tt__RelativeFocusOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__RelativeFocusOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__AbsoluteFocusOptions_DEFINED
#define SOAP_TYPE_tt__AbsoluteFocusOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AbsoluteFocusOptions(struct soap*, const char*, int, const tt__AbsoluteFocusOptions *, const char*);
SOAP_FMAC3 tt__AbsoluteFocusOptions * SOAP_FMAC4 soap_in_tt__AbsoluteFocusOptions(struct soap*, const char*, tt__AbsoluteFocusOptions *, const char*);
SOAP_FMAC1 tt__AbsoluteFocusOptions * SOAP_FMAC2 soap_instantiate_tt__AbsoluteFocusOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__AbsoluteFocusOptions * soap_new_tt__AbsoluteFocusOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__AbsoluteFocusOptions(soap, n, NULL, NULL, NULL);
}

inline tt__AbsoluteFocusOptions * soap_new_req_tt__AbsoluteFocusOptions(
	struct soap *soap,
	tt__FloatRange *Position)
{
	tt__AbsoluteFocusOptions *_p = soap_new_tt__AbsoluteFocusOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AbsoluteFocusOptions::Position = Position;
	}
	return _p;
}

inline tt__AbsoluteFocusOptions * soap_new_set_tt__AbsoluteFocusOptions(
	struct soap *soap,
	tt__FloatRange *Position,
	tt__FloatRange *Speed,
	char *__item1)
{
	tt__AbsoluteFocusOptions *_p = soap_new_tt__AbsoluteFocusOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AbsoluteFocusOptions::Position = Position;
		_p->tt__AbsoluteFocusOptions::Speed = Speed;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__AbsoluteFocusOptions(struct soap *soap, tt__AbsoluteFocusOptions const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AbsoluteFocusOptions", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__AbsoluteFocusOptions * SOAP_FMAC4 soap_get_tt__AbsoluteFocusOptions(struct soap*, tt__AbsoluteFocusOptions *, const char*, const char*);

inline int soap_read_tt__AbsoluteFocusOptions(struct soap *soap, tt__AbsoluteFocusOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__AbsoluteFocusOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__MoveOptions_DEFINED
#define SOAP_TYPE_tt__MoveOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__MoveOptions(struct soap*, const char*, int, const tt__MoveOptions *, const char*);
SOAP_FMAC3 tt__MoveOptions * SOAP_FMAC4 soap_in_tt__MoveOptions(struct soap*, const char*, tt__MoveOptions *, const char*);
SOAP_FMAC1 tt__MoveOptions * SOAP_FMAC2 soap_instantiate_tt__MoveOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__MoveOptions * soap_new_tt__MoveOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__MoveOptions(soap, n, NULL, NULL, NULL);
}

inline tt__MoveOptions * soap_new_req_tt__MoveOptions(
	struct soap *soap)
{
	tt__MoveOptions *_p = soap_new_tt__MoveOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__MoveOptions * soap_new_set_tt__MoveOptions(
	struct soap *soap,
	tt__AbsoluteFocusOptions *Absolute,
	tt__RelativeFocusOptions *Relative,
	tt__ContinuousFocusOptions *Continuous,
	char *__item1)
{
	tt__MoveOptions *_p = soap_new_tt__MoveOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__MoveOptions::Absolute = Absolute;
		_p->tt__MoveOptions::Relative = Relative;
		_p->tt__MoveOptions::Continuous = Continuous;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__MoveOptions(struct soap *soap, tt__MoveOptions const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:MoveOptions", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__MoveOptions * SOAP_FMAC4 soap_get_tt__MoveOptions(struct soap*, tt__MoveOptions *, const char*, const char*);

inline int soap_read_tt__MoveOptions(struct soap *soap, tt__MoveOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__MoveOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__ContinuousFocus_DEFINED
#define SOAP_TYPE_tt__ContinuousFocus_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ContinuousFocus(struct soap*, const char*, int, const tt__ContinuousFocus *, const char*);
SOAP_FMAC3 tt__ContinuousFocus * SOAP_FMAC4 soap_in_tt__ContinuousFocus(struct soap*, const char*, tt__ContinuousFocus *, const char*);
SOAP_FMAC1 tt__ContinuousFocus * SOAP_FMAC2 soap_instantiate_tt__ContinuousFocus(struct soap*, int, const char*, const char*, size_t*);

inline tt__ContinuousFocus * soap_new_tt__ContinuousFocus(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ContinuousFocus(soap, n, NULL, NULL, NULL);
}

inline tt__ContinuousFocus * soap_new_req_tt__ContinuousFocus(
	struct soap *soap,
	float Speed)
{
	tt__ContinuousFocus *_p = soap_new_tt__ContinuousFocus(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ContinuousFocus::Speed = Speed;
	}
	return _p;
}

inline tt__ContinuousFocus * soap_new_set_tt__ContinuousFocus(
	struct soap *soap,
	float Speed,
	char *__item1)
{
	tt__ContinuousFocus *_p = soap_new_tt__ContinuousFocus(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ContinuousFocus::Speed = Speed;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__ContinuousFocus(struct soap *soap, tt__ContinuousFocus const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ContinuousFocus", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__ContinuousFocus * SOAP_FMAC4 soap_get_tt__ContinuousFocus(struct soap*, tt__ContinuousFocus *, const char*, const char*);

inline int soap_read_tt__ContinuousFocus(struct soap *soap, tt__ContinuousFocus *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__ContinuousFocus(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__RelativeFocus_DEFINED
#define SOAP_TYPE_tt__RelativeFocus_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RelativeFocus(struct soap*, const char*, int, const tt__RelativeFocus *, const char*);
SOAP_FMAC3 tt__RelativeFocus * SOAP_FMAC4 soap_in_tt__RelativeFocus(struct soap*, const char*, tt__RelativeFocus *, const char*);
SOAP_FMAC1 tt__RelativeFocus * SOAP_FMAC2 soap_instantiate_tt__RelativeFocus(struct soap*, int, const char*, const char*, size_t*);

inline tt__RelativeFocus * soap_new_tt__RelativeFocus(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__RelativeFocus(soap, n, NULL, NULL, NULL);
}

inline tt__RelativeFocus * soap_new_req_tt__RelativeFocus(
	struct soap *soap,
	float Distance)
{
	tt__RelativeFocus *_p = soap_new_tt__RelativeFocus(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__RelativeFocus::Distance = Distance;
	}
	return _p;
}

inline tt__RelativeFocus * soap_new_set_tt__RelativeFocus(
	struct soap *soap,
	float Distance,
	float *Speed,
	char *__item1)
{
	tt__RelativeFocus *_p = soap_new_tt__RelativeFocus(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__RelativeFocus::Distance = Distance;
		_p->tt__RelativeFocus::Speed = Speed;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__RelativeFocus(struct soap *soap, tt__RelativeFocus const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:RelativeFocus", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__RelativeFocus * SOAP_FMAC4 soap_get_tt__RelativeFocus(struct soap*, tt__RelativeFocus *, const char*, const char*);

inline int soap_read_tt__RelativeFocus(struct soap *soap, tt__RelativeFocus *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__RelativeFocus(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__AbsoluteFocus_DEFINED
#define SOAP_TYPE_tt__AbsoluteFocus_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AbsoluteFocus(struct soap*, const char*, int, const tt__AbsoluteFocus *, const char*);
SOAP_FMAC3 tt__AbsoluteFocus * SOAP_FMAC4 soap_in_tt__AbsoluteFocus(struct soap*, const char*, tt__AbsoluteFocus *, const char*);
SOAP_FMAC1 tt__AbsoluteFocus * SOAP_FMAC2 soap_instantiate_tt__AbsoluteFocus(struct soap*, int, const char*, const char*, size_t*);

inline tt__AbsoluteFocus * soap_new_tt__AbsoluteFocus(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__AbsoluteFocus(soap, n, NULL, NULL, NULL);
}

inline tt__AbsoluteFocus * soap_new_req_tt__AbsoluteFocus(
	struct soap *soap,
	float Position)
{
	tt__AbsoluteFocus *_p = soap_new_tt__AbsoluteFocus(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AbsoluteFocus::Position = Position;
	}
	return _p;
}

inline tt__AbsoluteFocus * soap_new_set_tt__AbsoluteFocus(
	struct soap *soap,
	float Position,
	float *Speed,
	char *__item1)
{
	tt__AbsoluteFocus *_p = soap_new_tt__AbsoluteFocus(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AbsoluteFocus::Position = Position;
		_p->tt__AbsoluteFocus::Speed = Speed;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__AbsoluteFocus(struct soap *soap, tt__AbsoluteFocus const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AbsoluteFocus", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__AbsoluteFocus * SOAP_FMAC4 soap_get_tt__AbsoluteFocus(struct soap*, tt__AbsoluteFocus *, const char*, const char*);

inline int soap_read_tt__AbsoluteFocus(struct soap *soap, tt__AbsoluteFocus *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__AbsoluteFocus(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__FocusMove_DEFINED
#define SOAP_TYPE_tt__FocusMove_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__FocusMove(struct soap*, const char*, int, const tt__FocusMove *, const char*);
SOAP_FMAC3 tt__FocusMove * SOAP_FMAC4 soap_in_tt__FocusMove(struct soap*, const char*, tt__FocusMove *, const char*);
SOAP_FMAC1 tt__FocusMove * SOAP_FMAC2 soap_instantiate_tt__FocusMove(struct soap*, int, const char*, const char*, size_t*);

inline tt__FocusMove * soap_new_tt__FocusMove(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__FocusMove(soap, n, NULL, NULL, NULL);
}

inline tt__FocusMove * soap_new_req_tt__FocusMove(
	struct soap *soap)
{
	tt__FocusMove *_p = soap_new_tt__FocusMove(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__FocusMove * soap_new_set_tt__FocusMove(
	struct soap *soap,
	tt__AbsoluteFocus *Absolute,
	tt__RelativeFocus *Relative,
	tt__ContinuousFocus *Continuous,
	char *__item1)
{
	tt__FocusMove *_p = soap_new_tt__FocusMove(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__FocusMove::Absolute = Absolute;
		_p->tt__FocusMove::Relative = Relative;
		_p->tt__FocusMove::Continuous = Continuous;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__FocusMove(struct soap *soap, tt__FocusMove const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:FocusMove", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__FocusMove * SOAP_FMAC4 soap_get_tt__FocusMove(struct soap*, tt__FocusMove *, const char*, const char*);

inline int soap_read_tt__FocusMove(struct soap *soap, tt__FocusMove *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__FocusMove(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__WhiteBalanceOptions_DEFINED
#define SOAP_TYPE_tt__WhiteBalanceOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__WhiteBalanceOptions(struct soap*, const char*, int, const tt__WhiteBalanceOptions *, const char*);
SOAP_FMAC3 tt__WhiteBalanceOptions * SOAP_FMAC4 soap_in_tt__WhiteBalanceOptions(struct soap*, const char*, tt__WhiteBalanceOptions *, const char*);
SOAP_FMAC1 tt__WhiteBalanceOptions * SOAP_FMAC2 soap_instantiate_tt__WhiteBalanceOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__WhiteBalanceOptions * soap_new_tt__WhiteBalanceOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__WhiteBalanceOptions(soap, n, NULL, NULL, NULL);
}

inline tt__WhiteBalanceOptions * soap_new_req_tt__WhiteBalanceOptions(
	struct soap *soap,
	const std::vector<enum tt__WhiteBalanceMode> & Mode,
	tt__FloatRange *YrGain,
	tt__FloatRange *YbGain)
{
	tt__WhiteBalanceOptions *_p = soap_new_tt__WhiteBalanceOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__WhiteBalanceOptions::Mode = Mode;
		_p->tt__WhiteBalanceOptions::YrGain = YrGain;
		_p->tt__WhiteBalanceOptions::YbGain = YbGain;
	}
	return _p;
}

inline tt__WhiteBalanceOptions * soap_new_set_tt__WhiteBalanceOptions(
	struct soap *soap,
	const std::vector<enum tt__WhiteBalanceMode> & Mode,
	tt__FloatRange *YrGain,
	tt__FloatRange *YbGain,
	char *__item1)
{
	tt__WhiteBalanceOptions *_p = soap_new_tt__WhiteBalanceOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__WhiteBalanceOptions::Mode = Mode;
		_p->tt__WhiteBalanceOptions::YrGain = YrGain;
		_p->tt__WhiteBalanceOptions::YbGain = YbGain;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__WhiteBalanceOptions(struct soap *soap, tt__WhiteBalanceOptions const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:WhiteBalanceOptions", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__WhiteBalanceOptions * SOAP_FMAC4 soap_get_tt__WhiteBalanceOptions(struct soap*, tt__WhiteBalanceOptions *, const char*, const char*);

inline int soap_read_tt__WhiteBalanceOptions(struct soap *soap, tt__WhiteBalanceOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__WhiteBalanceOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__ExposureOptions_DEFINED
#define SOAP_TYPE_tt__ExposureOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ExposureOptions(struct soap*, const char*, int, const tt__ExposureOptions *, const char*);
SOAP_FMAC3 tt__ExposureOptions * SOAP_FMAC4 soap_in_tt__ExposureOptions(struct soap*, const char*, tt__ExposureOptions *, const char*);
SOAP_FMAC1 tt__ExposureOptions * SOAP_FMAC2 soap_instantiate_tt__ExposureOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__ExposureOptions * soap_new_tt__ExposureOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ExposureOptions(soap, n, NULL, NULL, NULL);
}

inline tt__ExposureOptions * soap_new_req_tt__ExposureOptions(
	struct soap *soap,
	const std::vector<enum tt__ExposureMode> & Mode,
	const std::vector<enum tt__ExposurePriority> & Priority,
	tt__FloatRange *MinExposureTime,
	tt__FloatRange *MaxExposureTime,
	tt__FloatRange *MinGain,
	tt__FloatRange *MaxGain,
	tt__FloatRange *MinIris,
	tt__FloatRange *MaxIris,
	tt__FloatRange *ExposureTime,
	tt__FloatRange *Gain,
	tt__FloatRange *Iris)
{
	tt__ExposureOptions *_p = soap_new_tt__ExposureOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ExposureOptions::Mode = Mode;
		_p->tt__ExposureOptions::Priority = Priority;
		_p->tt__ExposureOptions::MinExposureTime = MinExposureTime;
		_p->tt__ExposureOptions::MaxExposureTime = MaxExposureTime;
		_p->tt__ExposureOptions::MinGain = MinGain;
		_p->tt__ExposureOptions::MaxGain = MaxGain;
		_p->tt__ExposureOptions::MinIris = MinIris;
		_p->tt__ExposureOptions::MaxIris = MaxIris;
		_p->tt__ExposureOptions::ExposureTime = ExposureTime;
		_p->tt__ExposureOptions::Gain = Gain;
		_p->tt__ExposureOptions::Iris = Iris;
	}
	return _p;
}

inline tt__ExposureOptions * soap_new_set_tt__ExposureOptions(
	struct soap *soap,
	const std::vector<enum tt__ExposureMode> & Mode,
	const std::vector<enum tt__ExposurePriority> & Priority,
	tt__FloatRange *MinExposureTime,
	tt__FloatRange *MaxExposureTime,
	tt__FloatRange *MinGain,
	tt__FloatRange *MaxGain,
	tt__FloatRange *MinIris,
	tt__FloatRange *MaxIris,
	tt__FloatRange *ExposureTime,
	tt__FloatRange *Gain,
	tt__FloatRange *Iris,
	char *__item1)
{
	tt__ExposureOptions *_p = soap_new_tt__ExposureOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ExposureOptions::Mode = Mode;
		_p->tt__ExposureOptions::Priority = Priority;
		_p->tt__ExposureOptions::MinExposureTime = MinExposureTime;
		_p->tt__ExposureOptions::MaxExposureTime = MaxExposureTime;
		_p->tt__ExposureOptions::MinGain = MinGain;
		_p->tt__ExposureOptions::MaxGain = MaxGain;
		_p->tt__ExposureOptions::MinIris = MinIris;
		_p->tt__ExposureOptions::MaxIris = MaxIris;
		_p->tt__ExposureOptions::ExposureTime = ExposureTime;
		_p->tt__ExposureOptions::Gain = Gain;
		_p->tt__ExposureOptions::Iris = Iris;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__ExposureOptions(struct soap *soap, tt__ExposureOptions const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ExposureOptions", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__ExposureOptions * SOAP_FMAC4 soap_get_tt__ExposureOptions(struct soap*, tt__ExposureOptions *, const char*, const char*);

inline int soap_read_tt__ExposureOptions(struct soap *soap, tt__ExposureOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__ExposureOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__FocusOptions_DEFINED
#define SOAP_TYPE_tt__FocusOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__FocusOptions(struct soap*, const char*, int, const tt__FocusOptions *, const char*);
SOAP_FMAC3 tt__FocusOptions * SOAP_FMAC4 soap_in_tt__FocusOptions(struct soap*, const char*, tt__FocusOptions *, const char*);
SOAP_FMAC1 tt__FocusOptions * SOAP_FMAC2 soap_instantiate_tt__FocusOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__FocusOptions * soap_new_tt__FocusOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__FocusOptions(soap, n, NULL, NULL, NULL);
}

inline tt__FocusOptions * soap_new_req_tt__FocusOptions(
	struct soap *soap,
	tt__FloatRange *DefaultSpeed,
	tt__FloatRange *NearLimit,
	tt__FloatRange *FarLimit)
{
	tt__FocusOptions *_p = soap_new_tt__FocusOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__FocusOptions::DefaultSpeed = DefaultSpeed;
		_p->tt__FocusOptions::NearLimit = NearLimit;
		_p->tt__FocusOptions::FarLimit = FarLimit;
	}
	return _p;
}

inline tt__FocusOptions * soap_new_set_tt__FocusOptions(
	struct soap *soap,
	const std::vector<enum tt__AutoFocusMode> & AutoFocusModes,
	tt__FloatRange *DefaultSpeed,
	tt__FloatRange *NearLimit,
	tt__FloatRange *FarLimit,
	char *__item1)
{
	tt__FocusOptions *_p = soap_new_tt__FocusOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__FocusOptions::AutoFocusModes = AutoFocusModes;
		_p->tt__FocusOptions::DefaultSpeed = DefaultSpeed;
		_p->tt__FocusOptions::NearLimit = NearLimit;
		_p->tt__FocusOptions::FarLimit = FarLimit;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__FocusOptions(struct soap *soap, tt__FocusOptions const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:FocusOptions", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__FocusOptions * SOAP_FMAC4 soap_get_tt__FocusOptions(struct soap*, tt__FocusOptions *, const char*, const char*);

inline int soap_read_tt__FocusOptions(struct soap *soap, tt__FocusOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__FocusOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__BacklightCompensationOptions_DEFINED
#define SOAP_TYPE_tt__BacklightCompensationOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__BacklightCompensationOptions(struct soap*, const char*, int, const tt__BacklightCompensationOptions *, const char*);
SOAP_FMAC3 tt__BacklightCompensationOptions * SOAP_FMAC4 soap_in_tt__BacklightCompensationOptions(struct soap*, const char*, tt__BacklightCompensationOptions *, const char*);
SOAP_FMAC1 tt__BacklightCompensationOptions * SOAP_FMAC2 soap_instantiate_tt__BacklightCompensationOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__BacklightCompensationOptions * soap_new_tt__BacklightCompensationOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__BacklightCompensationOptions(soap, n, NULL, NULL, NULL);
}

inline tt__BacklightCompensationOptions * soap_new_req_tt__BacklightCompensationOptions(
	struct soap *soap,
	const std::vector<enum tt__WideDynamicMode> & Mode,
	tt__FloatRange *Level)
{
	tt__BacklightCompensationOptions *_p = soap_new_tt__BacklightCompensationOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__BacklightCompensationOptions::Mode = Mode;
		_p->tt__BacklightCompensationOptions::Level = Level;
	}
	return _p;
}

inline tt__BacklightCompensationOptions * soap_new_set_tt__BacklightCompensationOptions(
	struct soap *soap,
	const std::vector<enum tt__WideDynamicMode> & Mode,
	tt__FloatRange *Level,
	char *__item1)
{
	tt__BacklightCompensationOptions *_p = soap_new_tt__BacklightCompensationOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__BacklightCompensationOptions::Mode = Mode;
		_p->tt__BacklightCompensationOptions::Level = Level;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__BacklightCompensationOptions(struct soap *soap, tt__BacklightCompensationOptions const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:BacklightCompensationOptions", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__BacklightCompensationOptions * SOAP_FMAC4 soap_get_tt__BacklightCompensationOptions(struct soap*, tt__BacklightCompensationOptions *, const char*, const char*);

inline int soap_read_tt__BacklightCompensationOptions(struct soap *soap, tt__BacklightCompensationOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__BacklightCompensationOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__WideDynamicRangeOptions_DEFINED
#define SOAP_TYPE_tt__WideDynamicRangeOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__WideDynamicRangeOptions(struct soap*, const char*, int, const tt__WideDynamicRangeOptions *, const char*);
SOAP_FMAC3 tt__WideDynamicRangeOptions * SOAP_FMAC4 soap_in_tt__WideDynamicRangeOptions(struct soap*, const char*, tt__WideDynamicRangeOptions *, const char*);
SOAP_FMAC1 tt__WideDynamicRangeOptions * SOAP_FMAC2 soap_instantiate_tt__WideDynamicRangeOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__WideDynamicRangeOptions * soap_new_tt__WideDynamicRangeOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__WideDynamicRangeOptions(soap, n, NULL, NULL, NULL);
}

inline tt__WideDynamicRangeOptions * soap_new_req_tt__WideDynamicRangeOptions(
	struct soap *soap,
	const std::vector<enum tt__WideDynamicMode> & Mode,
	tt__FloatRange *Level)
{
	tt__WideDynamicRangeOptions *_p = soap_new_tt__WideDynamicRangeOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__WideDynamicRangeOptions::Mode = Mode;
		_p->tt__WideDynamicRangeOptions::Level = Level;
	}
	return _p;
}

inline tt__WideDynamicRangeOptions * soap_new_set_tt__WideDynamicRangeOptions(
	struct soap *soap,
	const std::vector<enum tt__WideDynamicMode> & Mode,
	tt__FloatRange *Level,
	char *__item1)
{
	tt__WideDynamicRangeOptions *_p = soap_new_tt__WideDynamicRangeOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__WideDynamicRangeOptions::Mode = Mode;
		_p->tt__WideDynamicRangeOptions::Level = Level;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__WideDynamicRangeOptions(struct soap *soap, tt__WideDynamicRangeOptions const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:WideDynamicRangeOptions", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__WideDynamicRangeOptions * SOAP_FMAC4 soap_get_tt__WideDynamicRangeOptions(struct soap*, tt__WideDynamicRangeOptions *, const char*, const char*);

inline int soap_read_tt__WideDynamicRangeOptions(struct soap *soap, tt__WideDynamicRangeOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__WideDynamicRangeOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__ImagingOptions_DEFINED
#define SOAP_TYPE_tt__ImagingOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ImagingOptions(struct soap*, const char*, int, const tt__ImagingOptions *, const char*);
SOAP_FMAC3 tt__ImagingOptions * SOAP_FMAC4 soap_in_tt__ImagingOptions(struct soap*, const char*, tt__ImagingOptions *, const char*);
SOAP_FMAC1 tt__ImagingOptions * SOAP_FMAC2 soap_instantiate_tt__ImagingOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__ImagingOptions * soap_new_tt__ImagingOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ImagingOptions(soap, n, NULL, NULL, NULL);
}

inline tt__ImagingOptions * soap_new_req_tt__ImagingOptions(
	struct soap *soap,
	tt__BacklightCompensationOptions *BacklightCompensation,
	tt__FloatRange *Brightness,
	tt__FloatRange *ColorSaturation,
	tt__FloatRange *Contrast,
	tt__ExposureOptions *Exposure,
	tt__FocusOptions *Focus,
	const std::vector<enum tt__IrCutFilterMode> & IrCutFilterModes,
	tt__FloatRange *Sharpness,
	tt__WideDynamicRangeOptions *WideDynamicRange,
	tt__WhiteBalanceOptions *WhiteBalance)
{
	tt__ImagingOptions *_p = soap_new_tt__ImagingOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ImagingOptions::BacklightCompensation = BacklightCompensation;
		_p->tt__ImagingOptions::Brightness = Brightness;
		_p->tt__ImagingOptions::ColorSaturation = ColorSaturation;
		_p->tt__ImagingOptions::Contrast = Contrast;
		_p->tt__ImagingOptions::Exposure = Exposure;
		_p->tt__ImagingOptions::Focus = Focus;
		_p->tt__ImagingOptions::IrCutFilterModes = IrCutFilterModes;
		_p->tt__ImagingOptions::Sharpness = Sharpness;
		_p->tt__ImagingOptions::WideDynamicRange = WideDynamicRange;
		_p->tt__ImagingOptions::WhiteBalance = WhiteBalance;
	}
	return _p;
}

inline tt__ImagingOptions * soap_new_set_tt__ImagingOptions(
	struct soap *soap,
	tt__BacklightCompensationOptions *BacklightCompensation,
	tt__FloatRange *Brightness,
	tt__FloatRange *ColorSaturation,
	tt__FloatRange *Contrast,
	tt__ExposureOptions *Exposure,
	tt__FocusOptions *Focus,
	const std::vector<enum tt__IrCutFilterMode> & IrCutFilterModes,
	tt__FloatRange *Sharpness,
	tt__WideDynamicRangeOptions *WideDynamicRange,
	tt__WhiteBalanceOptions *WhiteBalance,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__ImagingOptions *_p = soap_new_tt__ImagingOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ImagingOptions::BacklightCompensation = BacklightCompensation;
		_p->tt__ImagingOptions::Brightness = Brightness;
		_p->tt__ImagingOptions::ColorSaturation = ColorSaturation;
		_p->tt__ImagingOptions::Contrast = Contrast;
		_p->tt__ImagingOptions::Exposure = Exposure;
		_p->tt__ImagingOptions::Focus = Focus;
		_p->tt__ImagingOptions::IrCutFilterModes = IrCutFilterModes;
		_p->tt__ImagingOptions::Sharpness = Sharpness;
		_p->tt__ImagingOptions::WideDynamicRange = WideDynamicRange;
		_p->tt__ImagingOptions::WhiteBalance = WhiteBalance;
		_p->tt__ImagingOptions::__any = __any;
		_p->tt__ImagingOptions::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__ImagingOptions(struct soap *soap, tt__ImagingOptions const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ImagingOptions", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__ImagingOptions * SOAP_FMAC4 soap_get_tt__ImagingOptions(struct soap*, tt__ImagingOptions *, const char*, const char*);

inline int soap_read_tt__ImagingOptions(struct soap *soap, tt__ImagingOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__ImagingOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__BacklightCompensation_DEFINED
#define SOAP_TYPE_tt__BacklightCompensation_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__BacklightCompensation(struct soap*, const char*, int, const tt__BacklightCompensation *, const char*);
SOAP_FMAC3 tt__BacklightCompensation * SOAP_FMAC4 soap_in_tt__BacklightCompensation(struct soap*, const char*, tt__BacklightCompensation *, const char*);
SOAP_FMAC1 tt__BacklightCompensation * SOAP_FMAC2 soap_instantiate_tt__BacklightCompensation(struct soap*, int, const char*, const char*, size_t*);

inline tt__BacklightCompensation * soap_new_tt__BacklightCompensation(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__BacklightCompensation(soap, n, NULL, NULL, NULL);
}

inline tt__BacklightCompensation * soap_new_req_tt__BacklightCompensation(
	struct soap *soap,
	enum tt__BacklightCompensationMode Mode,
	float Level)
{
	tt__BacklightCompensation *_p = soap_new_tt__BacklightCompensation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__BacklightCompensation::Mode = Mode;
		_p->tt__BacklightCompensation::Level = Level;
	}
	return _p;
}

inline tt__BacklightCompensation * soap_new_set_tt__BacklightCompensation(
	struct soap *soap,
	enum tt__BacklightCompensationMode Mode,
	float Level,
	char *__item1)
{
	tt__BacklightCompensation *_p = soap_new_tt__BacklightCompensation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__BacklightCompensation::Mode = Mode;
		_p->tt__BacklightCompensation::Level = Level;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__BacklightCompensation(struct soap *soap, tt__BacklightCompensation const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:BacklightCompensation", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__BacklightCompensation * SOAP_FMAC4 soap_get_tt__BacklightCompensation(struct soap*, tt__BacklightCompensation *, const char*, const char*);

inline int soap_read_tt__BacklightCompensation(struct soap *soap, tt__BacklightCompensation *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__BacklightCompensation(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__WideDynamicRange_DEFINED
#define SOAP_TYPE_tt__WideDynamicRange_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__WideDynamicRange(struct soap*, const char*, int, const tt__WideDynamicRange *, const char*);
SOAP_FMAC3 tt__WideDynamicRange * SOAP_FMAC4 soap_in_tt__WideDynamicRange(struct soap*, const char*, tt__WideDynamicRange *, const char*);
SOAP_FMAC1 tt__WideDynamicRange * SOAP_FMAC2 soap_instantiate_tt__WideDynamicRange(struct soap*, int, const char*, const char*, size_t*);

inline tt__WideDynamicRange * soap_new_tt__WideDynamicRange(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__WideDynamicRange(soap, n, NULL, NULL, NULL);
}

inline tt__WideDynamicRange * soap_new_req_tt__WideDynamicRange(
	struct soap *soap,
	enum tt__WideDynamicMode Mode,
	float Level)
{
	tt__WideDynamicRange *_p = soap_new_tt__WideDynamicRange(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__WideDynamicRange::Mode = Mode;
		_p->tt__WideDynamicRange::Level = Level;
	}
	return _p;
}

inline tt__WideDynamicRange * soap_new_set_tt__WideDynamicRange(
	struct soap *soap,
	enum tt__WideDynamicMode Mode,
	float Level,
	char *__item1)
{
	tt__WideDynamicRange *_p = soap_new_tt__WideDynamicRange(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__WideDynamicRange::Mode = Mode;
		_p->tt__WideDynamicRange::Level = Level;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__WideDynamicRange(struct soap *soap, tt__WideDynamicRange const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:WideDynamicRange", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__WideDynamicRange * SOAP_FMAC4 soap_get_tt__WideDynamicRange(struct soap*, tt__WideDynamicRange *, const char*, const char*);

inline int soap_read_tt__WideDynamicRange(struct soap *soap, tt__WideDynamicRange *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__WideDynamicRange(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__Exposure_DEFINED
#define SOAP_TYPE_tt__Exposure_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Exposure(struct soap*, const char*, int, const tt__Exposure *, const char*);
SOAP_FMAC3 tt__Exposure * SOAP_FMAC4 soap_in_tt__Exposure(struct soap*, const char*, tt__Exposure *, const char*);
SOAP_FMAC1 tt__Exposure * SOAP_FMAC2 soap_instantiate_tt__Exposure(struct soap*, int, const char*, const char*, size_t*);

inline tt__Exposure * soap_new_tt__Exposure(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Exposure(soap, n, NULL, NULL, NULL);
}

inline tt__Exposure * soap_new_req_tt__Exposure(
	struct soap *soap,
	enum tt__ExposureMode Mode,
	enum tt__ExposurePriority Priority,
	tt__Rectangle *Window,
	float MinExposureTime,
	float MaxExposureTime,
	float MinGain,
	float MaxGain,
	float MinIris,
	float MaxIris,
	float ExposureTime,
	float Gain,
	float Iris)
{
	tt__Exposure *_p = soap_new_tt__Exposure(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Exposure::Mode = Mode;
		_p->tt__Exposure::Priority = Priority;
		_p->tt__Exposure::Window = Window;
		_p->tt__Exposure::MinExposureTime = MinExposureTime;
		_p->tt__Exposure::MaxExposureTime = MaxExposureTime;
		_p->tt__Exposure::MinGain = MinGain;
		_p->tt__Exposure::MaxGain = MaxGain;
		_p->tt__Exposure::MinIris = MinIris;
		_p->tt__Exposure::MaxIris = MaxIris;
		_p->tt__Exposure::ExposureTime = ExposureTime;
		_p->tt__Exposure::Gain = Gain;
		_p->tt__Exposure::Iris = Iris;
	}
	return _p;
}

inline tt__Exposure * soap_new_set_tt__Exposure(
	struct soap *soap,
	enum tt__ExposureMode Mode,
	enum tt__ExposurePriority Priority,
	tt__Rectangle *Window,
	float MinExposureTime,
	float MaxExposureTime,
	float MinGain,
	float MaxGain,
	float MinIris,
	float MaxIris,
	float ExposureTime,
	float Gain,
	float Iris,
	char *__item1)
{
	tt__Exposure *_p = soap_new_tt__Exposure(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Exposure::Mode = Mode;
		_p->tt__Exposure::Priority = Priority;
		_p->tt__Exposure::Window = Window;
		_p->tt__Exposure::MinExposureTime = MinExposureTime;
		_p->tt__Exposure::MaxExposureTime = MaxExposureTime;
		_p->tt__Exposure::MinGain = MinGain;
		_p->tt__Exposure::MaxGain = MaxGain;
		_p->tt__Exposure::MinIris = MinIris;
		_p->tt__Exposure::MaxIris = MaxIris;
		_p->tt__Exposure::ExposureTime = ExposureTime;
		_p->tt__Exposure::Gain = Gain;
		_p->tt__Exposure::Iris = Iris;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__Exposure(struct soap *soap, tt__Exposure const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Exposure", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__Exposure * SOAP_FMAC4 soap_get_tt__Exposure(struct soap*, tt__Exposure *, const char*, const char*);

inline int soap_read_tt__Exposure(struct soap *soap, tt__Exposure *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__Exposure(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__ImagingSettingsExtension_DEFINED
#define SOAP_TYPE_tt__ImagingSettingsExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ImagingSettingsExtension(struct soap*, const char*, int, const tt__ImagingSettingsExtension *, const char*);
SOAP_FMAC3 tt__ImagingSettingsExtension * SOAP_FMAC4 soap_in_tt__ImagingSettingsExtension(struct soap*, const char*, tt__ImagingSettingsExtension *, const char*);
SOAP_FMAC1 tt__ImagingSettingsExtension * SOAP_FMAC2 soap_instantiate_tt__ImagingSettingsExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__ImagingSettingsExtension * soap_new_tt__ImagingSettingsExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ImagingSettingsExtension(soap, n, NULL, NULL, NULL);
}

inline tt__ImagingSettingsExtension * soap_new_req_tt__ImagingSettingsExtension(
	struct soap *soap)
{
	tt__ImagingSettingsExtension *_p = soap_new_tt__ImagingSettingsExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__ImagingSettingsExtension * soap_new_set_tt__ImagingSettingsExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__ImagingSettingsExtension *_p = soap_new_tt__ImagingSettingsExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ImagingSettingsExtension::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__ImagingSettingsExtension(struct soap *soap, tt__ImagingSettingsExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ImagingSettingsExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__ImagingSettingsExtension * SOAP_FMAC4 soap_get_tt__ImagingSettingsExtension(struct soap*, tt__ImagingSettingsExtension *, const char*, const char*);

inline int soap_read_tt__ImagingSettingsExtension(struct soap *soap, tt__ImagingSettingsExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__ImagingSettingsExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__ImagingSettings_DEFINED
#define SOAP_TYPE_tt__ImagingSettings_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ImagingSettings(struct soap*, const char*, int, const tt__ImagingSettings *, const char*);
SOAP_FMAC3 tt__ImagingSettings * SOAP_FMAC4 soap_in_tt__ImagingSettings(struct soap*, const char*, tt__ImagingSettings *, const char*);
SOAP_FMAC1 tt__ImagingSettings * SOAP_FMAC2 soap_instantiate_tt__ImagingSettings(struct soap*, int, const char*, const char*, size_t*);

inline tt__ImagingSettings * soap_new_tt__ImagingSettings(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ImagingSettings(soap, n, NULL, NULL, NULL);
}

inline tt__ImagingSettings * soap_new_req_tt__ImagingSettings(
	struct soap *soap)
{
	tt__ImagingSettings *_p = soap_new_tt__ImagingSettings(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__ImagingSettings * soap_new_set_tt__ImagingSettings(
	struct soap *soap,
	tt__BacklightCompensation *BacklightCompensation,
	float *Brightness,
	float *ColorSaturation,
	float *Contrast,
	tt__Exposure *Exposure,
	tt__FocusConfiguration *Focus,
	enum tt__IrCutFilterMode *IrCutFilter,
	float *Sharpness,
	tt__WideDynamicRange *WideDynamicRange,
	tt__WhiteBalance *WhiteBalance,
	tt__ImagingSettingsExtension *Extension,
	char *__anyAttribute,
	char *__item1)
{
	tt__ImagingSettings *_p = soap_new_tt__ImagingSettings(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ImagingSettings::BacklightCompensation = BacklightCompensation;
		_p->tt__ImagingSettings::Brightness = Brightness;
		_p->tt__ImagingSettings::ColorSaturation = ColorSaturation;
		_p->tt__ImagingSettings::Contrast = Contrast;
		_p->tt__ImagingSettings::Exposure = Exposure;
		_p->tt__ImagingSettings::Focus = Focus;
		_p->tt__ImagingSettings::IrCutFilter = IrCutFilter;
		_p->tt__ImagingSettings::Sharpness = Sharpness;
		_p->tt__ImagingSettings::WideDynamicRange = WideDynamicRange;
		_p->tt__ImagingSettings::WhiteBalance = WhiteBalance;
		_p->tt__ImagingSettings::Extension = Extension;
		_p->tt__ImagingSettings::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__ImagingSettings(struct soap *soap, tt__ImagingSettings const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ImagingSettings", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__ImagingSettings * SOAP_FMAC4 soap_get_tt__ImagingSettings(struct soap*, tt__ImagingSettings *, const char*, const char*);

inline int soap_read_tt__ImagingSettings(struct soap *soap, tt__ImagingSettings *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__ImagingSettings(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__FocusConfiguration_DEFINED
#define SOAP_TYPE_tt__FocusConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__FocusConfiguration(struct soap*, const char*, int, const tt__FocusConfiguration *, const char*);
SOAP_FMAC3 tt__FocusConfiguration * SOAP_FMAC4 soap_in_tt__FocusConfiguration(struct soap*, const char*, tt__FocusConfiguration *, const char*);
SOAP_FMAC1 tt__FocusConfiguration * SOAP_FMAC2 soap_instantiate_tt__FocusConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__FocusConfiguration * soap_new_tt__FocusConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__FocusConfiguration(soap, n, NULL, NULL, NULL);
}

inline tt__FocusConfiguration * soap_new_req_tt__FocusConfiguration(
	struct soap *soap,
	enum tt__AutoFocusMode AutoFocusMode,
	float DefaultSpeed,
	float NearLimit,
	float FarLimit)
{
	tt__FocusConfiguration *_p = soap_new_tt__FocusConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__FocusConfiguration::AutoFocusMode = AutoFocusMode;
		_p->tt__FocusConfiguration::DefaultSpeed = DefaultSpeed;
		_p->tt__FocusConfiguration::NearLimit = NearLimit;
		_p->tt__FocusConfiguration::FarLimit = FarLimit;
	}
	return _p;
}

inline tt__FocusConfiguration * soap_new_set_tt__FocusConfiguration(
	struct soap *soap,
	enum tt__AutoFocusMode AutoFocusMode,
	float DefaultSpeed,
	float NearLimit,
	float FarLimit,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__FocusConfiguration *_p = soap_new_tt__FocusConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__FocusConfiguration::AutoFocusMode = AutoFocusMode;
		_p->tt__FocusConfiguration::DefaultSpeed = DefaultSpeed;
		_p->tt__FocusConfiguration::NearLimit = NearLimit;
		_p->tt__FocusConfiguration::FarLimit = FarLimit;
		_p->tt__FocusConfiguration::__any = __any;
		_p->tt__FocusConfiguration::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__FocusConfiguration(struct soap *soap, tt__FocusConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:FocusConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__FocusConfiguration * SOAP_FMAC4 soap_get_tt__FocusConfiguration(struct soap*, tt__FocusConfiguration *, const char*, const char*);

inline int soap_read_tt__FocusConfiguration(struct soap *soap, tt__FocusConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__FocusConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__FocusStatus_DEFINED
#define SOAP_TYPE_tt__FocusStatus_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__FocusStatus(struct soap*, const char*, int, const tt__FocusStatus *, const char*);
SOAP_FMAC3 tt__FocusStatus * SOAP_FMAC4 soap_in_tt__FocusStatus(struct soap*, const char*, tt__FocusStatus *, const char*);
SOAP_FMAC1 tt__FocusStatus * SOAP_FMAC2 soap_instantiate_tt__FocusStatus(struct soap*, int, const char*, const char*, size_t*);

inline tt__FocusStatus * soap_new_tt__FocusStatus(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__FocusStatus(soap, n, NULL, NULL, NULL);
}

inline tt__FocusStatus * soap_new_req_tt__FocusStatus(
	struct soap *soap,
	float Position,
	enum tt__MoveStatus MoveStatus,
	const std::string& Error)
{
	tt__FocusStatus *_p = soap_new_tt__FocusStatus(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__FocusStatus::Position = Position;
		_p->tt__FocusStatus::MoveStatus = MoveStatus;
		_p->tt__FocusStatus::Error = Error;
	}
	return _p;
}

inline tt__FocusStatus * soap_new_set_tt__FocusStatus(
	struct soap *soap,
	float Position,
	enum tt__MoveStatus MoveStatus,
	const std::string& Error,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__FocusStatus *_p = soap_new_tt__FocusStatus(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__FocusStatus::Position = Position;
		_p->tt__FocusStatus::MoveStatus = MoveStatus;
		_p->tt__FocusStatus::Error = Error;
		_p->tt__FocusStatus::__any = __any;
		_p->tt__FocusStatus::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__FocusStatus(struct soap *soap, tt__FocusStatus const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:FocusStatus", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__FocusStatus * SOAP_FMAC4 soap_get_tt__FocusStatus(struct soap*, tt__FocusStatus *, const char*, const char*);

inline int soap_read_tt__FocusStatus(struct soap *soap, tt__FocusStatus *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__FocusStatus(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__ImagingStatus_DEFINED
#define SOAP_TYPE_tt__ImagingStatus_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ImagingStatus(struct soap*, const char*, int, const tt__ImagingStatus *, const char*);
SOAP_FMAC3 tt__ImagingStatus * SOAP_FMAC4 soap_in_tt__ImagingStatus(struct soap*, const char*, tt__ImagingStatus *, const char*);
SOAP_FMAC1 tt__ImagingStatus * SOAP_FMAC2 soap_instantiate_tt__ImagingStatus(struct soap*, int, const char*, const char*, size_t*);

inline tt__ImagingStatus * soap_new_tt__ImagingStatus(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ImagingStatus(soap, n, NULL, NULL, NULL);
}

inline tt__ImagingStatus * soap_new_req_tt__ImagingStatus(
	struct soap *soap,
	tt__FocusStatus *FocusStatus)
{
	tt__ImagingStatus *_p = soap_new_tt__ImagingStatus(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ImagingStatus::FocusStatus = FocusStatus;
	}
	return _p;
}

inline tt__ImagingStatus * soap_new_set_tt__ImagingStatus(
	struct soap *soap,
	tt__FocusStatus *FocusStatus,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__ImagingStatus *_p = soap_new_tt__ImagingStatus(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ImagingStatus::FocusStatus = FocusStatus;
		_p->tt__ImagingStatus::__any = __any;
		_p->tt__ImagingStatus::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__ImagingStatus(struct soap *soap, tt__ImagingStatus const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ImagingStatus", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__ImagingStatus * SOAP_FMAC4 soap_get_tt__ImagingStatus(struct soap*, tt__ImagingStatus *, const char*, const char*);

inline int soap_read_tt__ImagingStatus(struct soap *soap, tt__ImagingStatus *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__ImagingStatus(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourStartingConditionOptionsExtension_DEFINED
#define SOAP_TYPE_tt__PTZPresetTourStartingConditionOptionsExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourStartingConditionOptionsExtension(struct soap*, const char*, int, const tt__PTZPresetTourStartingConditionOptionsExtension *, const char*);
SOAP_FMAC3 tt__PTZPresetTourStartingConditionOptionsExtension * SOAP_FMAC4 soap_in_tt__PTZPresetTourStartingConditionOptionsExtension(struct soap*, const char*, tt__PTZPresetTourStartingConditionOptionsExtension *, const char*);
SOAP_FMAC1 tt__PTZPresetTourStartingConditionOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourStartingConditionOptionsExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZPresetTourStartingConditionOptionsExtension * soap_new_tt__PTZPresetTourStartingConditionOptionsExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZPresetTourStartingConditionOptionsExtension(soap, n, NULL, NULL, NULL);
}

inline tt__PTZPresetTourStartingConditionOptionsExtension * soap_new_req_tt__PTZPresetTourStartingConditionOptionsExtension(
	struct soap *soap)
{
	tt__PTZPresetTourStartingConditionOptionsExtension *_p = soap_new_tt__PTZPresetTourStartingConditionOptionsExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTZPresetTourStartingConditionOptionsExtension * soap_new_set_tt__PTZPresetTourStartingConditionOptionsExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__PTZPresetTourStartingConditionOptionsExtension *_p = soap_new_tt__PTZPresetTourStartingConditionOptionsExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZPresetTourStartingConditionOptionsExtension::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__PTZPresetTourStartingConditionOptionsExtension(struct soap *soap, tt__PTZPresetTourStartingConditionOptionsExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourStartingConditionOptionsExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZPresetTourStartingConditionOptionsExtension * SOAP_FMAC4 soap_get_tt__PTZPresetTourStartingConditionOptionsExtension(struct soap*, tt__PTZPresetTourStartingConditionOptionsExtension *, const char*, const char*);

inline int soap_read_tt__PTZPresetTourStartingConditionOptionsExtension(struct soap *soap, tt__PTZPresetTourStartingConditionOptionsExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__PTZPresetTourStartingConditionOptionsExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourStartingConditionOptions_DEFINED
#define SOAP_TYPE_tt__PTZPresetTourStartingConditionOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourStartingConditionOptions(struct soap*, const char*, int, const tt__PTZPresetTourStartingConditionOptions *, const char*);
SOAP_FMAC3 tt__PTZPresetTourStartingConditionOptions * SOAP_FMAC4 soap_in_tt__PTZPresetTourStartingConditionOptions(struct soap*, const char*, tt__PTZPresetTourStartingConditionOptions *, const char*);
SOAP_FMAC1 tt__PTZPresetTourStartingConditionOptions * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourStartingConditionOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZPresetTourStartingConditionOptions * soap_new_tt__PTZPresetTourStartingConditionOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZPresetTourStartingConditionOptions(soap, n, NULL, NULL, NULL);
}

inline tt__PTZPresetTourStartingConditionOptions * soap_new_req_tt__PTZPresetTourStartingConditionOptions(
	struct soap *soap)
{
	tt__PTZPresetTourStartingConditionOptions *_p = soap_new_tt__PTZPresetTourStartingConditionOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTZPresetTourStartingConditionOptions * soap_new_set_tt__PTZPresetTourStartingConditionOptions(
	struct soap *soap,
	tt__IntRange *RecurringTime,
	tt__DurationRange *RecurringDuration,
	const std::vector<enum tt__PTZPresetTourDirection> & Direction,
	tt__PTZPresetTourStartingConditionOptionsExtension *Extension,
	char *__anyAttribute,
	char *__item1)
{
	tt__PTZPresetTourStartingConditionOptions *_p = soap_new_tt__PTZPresetTourStartingConditionOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZPresetTourStartingConditionOptions::RecurringTime = RecurringTime;
		_p->tt__PTZPresetTourStartingConditionOptions::RecurringDuration = RecurringDuration;
		_p->tt__PTZPresetTourStartingConditionOptions::Direction = Direction;
		_p->tt__PTZPresetTourStartingConditionOptions::Extension = Extension;
		_p->tt__PTZPresetTourStartingConditionOptions::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__PTZPresetTourStartingConditionOptions(struct soap *soap, tt__PTZPresetTourStartingConditionOptions const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourStartingConditionOptions", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZPresetTourStartingConditionOptions * SOAP_FMAC4 soap_get_tt__PTZPresetTourStartingConditionOptions(struct soap*, tt__PTZPresetTourStartingConditionOptions *, const char*, const char*);

inline int soap_read_tt__PTZPresetTourStartingConditionOptions(struct soap *soap, tt__PTZPresetTourStartingConditionOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__PTZPresetTourStartingConditionOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourPresetDetailOptionsExtension_DEFINED
#define SOAP_TYPE_tt__PTZPresetTourPresetDetailOptionsExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourPresetDetailOptionsExtension(struct soap*, const char*, int, const tt__PTZPresetTourPresetDetailOptionsExtension *, const char*);
SOAP_FMAC3 tt__PTZPresetTourPresetDetailOptionsExtension * SOAP_FMAC4 soap_in_tt__PTZPresetTourPresetDetailOptionsExtension(struct soap*, const char*, tt__PTZPresetTourPresetDetailOptionsExtension *, const char*);
SOAP_FMAC1 tt__PTZPresetTourPresetDetailOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourPresetDetailOptionsExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZPresetTourPresetDetailOptionsExtension * soap_new_tt__PTZPresetTourPresetDetailOptionsExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZPresetTourPresetDetailOptionsExtension(soap, n, NULL, NULL, NULL);
}

inline tt__PTZPresetTourPresetDetailOptionsExtension * soap_new_req_tt__PTZPresetTourPresetDetailOptionsExtension(
	struct soap *soap)
{
	tt__PTZPresetTourPresetDetailOptionsExtension *_p = soap_new_tt__PTZPresetTourPresetDetailOptionsExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTZPresetTourPresetDetailOptionsExtension * soap_new_set_tt__PTZPresetTourPresetDetailOptionsExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__PTZPresetTourPresetDetailOptionsExtension *_p = soap_new_tt__PTZPresetTourPresetDetailOptionsExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZPresetTourPresetDetailOptionsExtension::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__PTZPresetTourPresetDetailOptionsExtension(struct soap *soap, tt__PTZPresetTourPresetDetailOptionsExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourPresetDetailOptionsExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZPresetTourPresetDetailOptionsExtension * SOAP_FMAC4 soap_get_tt__PTZPresetTourPresetDetailOptionsExtension(struct soap*, tt__PTZPresetTourPresetDetailOptionsExtension *, const char*, const char*);

inline int soap_read_tt__PTZPresetTourPresetDetailOptionsExtension(struct soap *soap, tt__PTZPresetTourPresetDetailOptionsExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__PTZPresetTourPresetDetailOptionsExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourPresetDetailOptions_DEFINED
#define SOAP_TYPE_tt__PTZPresetTourPresetDetailOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourPresetDetailOptions(struct soap*, const char*, int, const tt__PTZPresetTourPresetDetailOptions *, const char*);
SOAP_FMAC3 tt__PTZPresetTourPresetDetailOptions * SOAP_FMAC4 soap_in_tt__PTZPresetTourPresetDetailOptions(struct soap*, const char*, tt__PTZPresetTourPresetDetailOptions *, const char*);
SOAP_FMAC1 tt__PTZPresetTourPresetDetailOptions * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourPresetDetailOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZPresetTourPresetDetailOptions * soap_new_tt__PTZPresetTourPresetDetailOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZPresetTourPresetDetailOptions(soap, n, NULL, NULL, NULL);
}

inline tt__PTZPresetTourPresetDetailOptions * soap_new_req_tt__PTZPresetTourPresetDetailOptions(
	struct soap *soap)
{
	tt__PTZPresetTourPresetDetailOptions *_p = soap_new_tt__PTZPresetTourPresetDetailOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTZPresetTourPresetDetailOptions * soap_new_set_tt__PTZPresetTourPresetDetailOptions(
	struct soap *soap,
	const std::vector<std::string> & PresetToken,
	bool *Home,
	tt__Space2DDescription *PanTiltPositionSpace,
	tt__Space1DDescription *ZoomPositionSpace,
	tt__PTZPresetTourPresetDetailOptionsExtension *Extension,
	char *__anyAttribute,
	char *__item1)
{
	tt__PTZPresetTourPresetDetailOptions *_p = soap_new_tt__PTZPresetTourPresetDetailOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZPresetTourPresetDetailOptions::PresetToken = PresetToken;
		_p->tt__PTZPresetTourPresetDetailOptions::Home = Home;
		_p->tt__PTZPresetTourPresetDetailOptions::PanTiltPositionSpace = PanTiltPositionSpace;
		_p->tt__PTZPresetTourPresetDetailOptions::ZoomPositionSpace = ZoomPositionSpace;
		_p->tt__PTZPresetTourPresetDetailOptions::Extension = Extension;
		_p->tt__PTZPresetTourPresetDetailOptions::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__PTZPresetTourPresetDetailOptions(struct soap *soap, tt__PTZPresetTourPresetDetailOptions const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourPresetDetailOptions", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZPresetTourPresetDetailOptions * SOAP_FMAC4 soap_get_tt__PTZPresetTourPresetDetailOptions(struct soap*, tt__PTZPresetTourPresetDetailOptions *, const char*, const char*);

inline int soap_read_tt__PTZPresetTourPresetDetailOptions(struct soap *soap, tt__PTZPresetTourPresetDetailOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__PTZPresetTourPresetDetailOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourSpotOptions_DEFINED
#define SOAP_TYPE_tt__PTZPresetTourSpotOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourSpotOptions(struct soap*, const char*, int, const tt__PTZPresetTourSpotOptions *, const char*);
SOAP_FMAC3 tt__PTZPresetTourSpotOptions * SOAP_FMAC4 soap_in_tt__PTZPresetTourSpotOptions(struct soap*, const char*, tt__PTZPresetTourSpotOptions *, const char*);
SOAP_FMAC1 tt__PTZPresetTourSpotOptions * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourSpotOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZPresetTourSpotOptions * soap_new_tt__PTZPresetTourSpotOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZPresetTourSpotOptions(soap, n, NULL, NULL, NULL);
}

inline tt__PTZPresetTourSpotOptions * soap_new_req_tt__PTZPresetTourSpotOptions(
	struct soap *soap,
	tt__PTZPresetTourPresetDetailOptions *PresetDetail,
	tt__DurationRange *StayTime)
{
	tt__PTZPresetTourSpotOptions *_p = soap_new_tt__PTZPresetTourSpotOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZPresetTourSpotOptions::PresetDetail = PresetDetail;
		_p->tt__PTZPresetTourSpotOptions::StayTime = StayTime;
	}
	return _p;
}

inline tt__PTZPresetTourSpotOptions * soap_new_set_tt__PTZPresetTourSpotOptions(
	struct soap *soap,
	tt__PTZPresetTourPresetDetailOptions *PresetDetail,
	tt__DurationRange *StayTime,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__PTZPresetTourSpotOptions *_p = soap_new_tt__PTZPresetTourSpotOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZPresetTourSpotOptions::PresetDetail = PresetDetail;
		_p->tt__PTZPresetTourSpotOptions::StayTime = StayTime;
		_p->tt__PTZPresetTourSpotOptions::__any = __any;
		_p->tt__PTZPresetTourSpotOptions::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__PTZPresetTourSpotOptions(struct soap *soap, tt__PTZPresetTourSpotOptions const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourSpotOptions", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZPresetTourSpotOptions * SOAP_FMAC4 soap_get_tt__PTZPresetTourSpotOptions(struct soap*, tt__PTZPresetTourSpotOptions *, const char*, const char*);

inline int soap_read_tt__PTZPresetTourSpotOptions(struct soap *soap, tt__PTZPresetTourSpotOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__PTZPresetTourSpotOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourOptions_DEFINED
#define SOAP_TYPE_tt__PTZPresetTourOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourOptions(struct soap*, const char*, int, const tt__PTZPresetTourOptions *, const char*);
SOAP_FMAC3 tt__PTZPresetTourOptions * SOAP_FMAC4 soap_in_tt__PTZPresetTourOptions(struct soap*, const char*, tt__PTZPresetTourOptions *, const char*);
SOAP_FMAC1 tt__PTZPresetTourOptions * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZPresetTourOptions * soap_new_tt__PTZPresetTourOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZPresetTourOptions(soap, n, NULL, NULL, NULL);
}

inline tt__PTZPresetTourOptions * soap_new_req_tt__PTZPresetTourOptions(
	struct soap *soap,
	bool AutoStart,
	tt__PTZPresetTourStartingConditionOptions *StartingCondition,
	tt__PTZPresetTourSpotOptions *TourSpot)
{
	tt__PTZPresetTourOptions *_p = soap_new_tt__PTZPresetTourOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZPresetTourOptions::AutoStart = AutoStart;
		_p->tt__PTZPresetTourOptions::StartingCondition = StartingCondition;
		_p->tt__PTZPresetTourOptions::TourSpot = TourSpot;
	}
	return _p;
}

inline tt__PTZPresetTourOptions * soap_new_set_tt__PTZPresetTourOptions(
	struct soap *soap,
	bool AutoStart,
	tt__PTZPresetTourStartingConditionOptions *StartingCondition,
	tt__PTZPresetTourSpotOptions *TourSpot,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__PTZPresetTourOptions *_p = soap_new_tt__PTZPresetTourOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZPresetTourOptions::AutoStart = AutoStart;
		_p->tt__PTZPresetTourOptions::StartingCondition = StartingCondition;
		_p->tt__PTZPresetTourOptions::TourSpot = TourSpot;
		_p->tt__PTZPresetTourOptions::__any = __any;
		_p->tt__PTZPresetTourOptions::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__PTZPresetTourOptions(struct soap *soap, tt__PTZPresetTourOptions const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourOptions", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZPresetTourOptions * SOAP_FMAC4 soap_get_tt__PTZPresetTourOptions(struct soap*, tt__PTZPresetTourOptions *, const char*, const char*);

inline int soap_read_tt__PTZPresetTourOptions(struct soap *soap, tt__PTZPresetTourOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__PTZPresetTourOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourStartingConditionExtension_DEFINED
#define SOAP_TYPE_tt__PTZPresetTourStartingConditionExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourStartingConditionExtension(struct soap*, const char*, int, const tt__PTZPresetTourStartingConditionExtension *, const char*);
SOAP_FMAC3 tt__PTZPresetTourStartingConditionExtension * SOAP_FMAC4 soap_in_tt__PTZPresetTourStartingConditionExtension(struct soap*, const char*, tt__PTZPresetTourStartingConditionExtension *, const char*);
SOAP_FMAC1 tt__PTZPresetTourStartingConditionExtension * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourStartingConditionExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZPresetTourStartingConditionExtension * soap_new_tt__PTZPresetTourStartingConditionExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZPresetTourStartingConditionExtension(soap, n, NULL, NULL, NULL);
}

inline tt__PTZPresetTourStartingConditionExtension * soap_new_req_tt__PTZPresetTourStartingConditionExtension(
	struct soap *soap)
{
	tt__PTZPresetTourStartingConditionExtension *_p = soap_new_tt__PTZPresetTourStartingConditionExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTZPresetTourStartingConditionExtension * soap_new_set_tt__PTZPresetTourStartingConditionExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__PTZPresetTourStartingConditionExtension *_p = soap_new_tt__PTZPresetTourStartingConditionExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZPresetTourStartingConditionExtension::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__PTZPresetTourStartingConditionExtension(struct soap *soap, tt__PTZPresetTourStartingConditionExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourStartingConditionExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZPresetTourStartingConditionExtension * SOAP_FMAC4 soap_get_tt__PTZPresetTourStartingConditionExtension(struct soap*, tt__PTZPresetTourStartingConditionExtension *, const char*, const char*);

inline int soap_read_tt__PTZPresetTourStartingConditionExtension(struct soap *soap, tt__PTZPresetTourStartingConditionExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__PTZPresetTourStartingConditionExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourStartingCondition_DEFINED
#define SOAP_TYPE_tt__PTZPresetTourStartingCondition_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourStartingCondition(struct soap*, const char*, int, const tt__PTZPresetTourStartingCondition *, const char*);
SOAP_FMAC3 tt__PTZPresetTourStartingCondition * SOAP_FMAC4 soap_in_tt__PTZPresetTourStartingCondition(struct soap*, const char*, tt__PTZPresetTourStartingCondition *, const char*);
SOAP_FMAC1 tt__PTZPresetTourStartingCondition * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourStartingCondition(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZPresetTourStartingCondition * soap_new_tt__PTZPresetTourStartingCondition(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZPresetTourStartingCondition(soap, n, NULL, NULL, NULL);
}

inline tt__PTZPresetTourStartingCondition * soap_new_req_tt__PTZPresetTourStartingCondition(
	struct soap *soap)
{
	tt__PTZPresetTourStartingCondition *_p = soap_new_tt__PTZPresetTourStartingCondition(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTZPresetTourStartingCondition * soap_new_set_tt__PTZPresetTourStartingCondition(
	struct soap *soap,
	int *RecurringTime,
	LONG64 *RecurringDuration,
	enum tt__PTZPresetTourDirection *Direction,
	tt__PTZPresetTourStartingConditionExtension *Extension,
	bool *RandomPresetOrder,
	char *__anyAttribute,
	char *__item1)
{
	tt__PTZPresetTourStartingCondition *_p = soap_new_tt__PTZPresetTourStartingCondition(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZPresetTourStartingCondition::RecurringTime = RecurringTime;
		_p->tt__PTZPresetTourStartingCondition::RecurringDuration = RecurringDuration;
		_p->tt__PTZPresetTourStartingCondition::Direction = Direction;
		_p->tt__PTZPresetTourStartingCondition::Extension = Extension;
		_p->tt__PTZPresetTourStartingCondition::RandomPresetOrder = RandomPresetOrder;
		_p->tt__PTZPresetTourStartingCondition::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__PTZPresetTourStartingCondition(struct soap *soap, tt__PTZPresetTourStartingCondition const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourStartingCondition", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZPresetTourStartingCondition * SOAP_FMAC4 soap_get_tt__PTZPresetTourStartingCondition(struct soap*, tt__PTZPresetTourStartingCondition *, const char*, const char*);

inline int soap_read_tt__PTZPresetTourStartingCondition(struct soap *soap, tt__PTZPresetTourStartingCondition *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__PTZPresetTourStartingCondition(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourStatusExtension_DEFINED
#define SOAP_TYPE_tt__PTZPresetTourStatusExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourStatusExtension(struct soap*, const char*, int, const tt__PTZPresetTourStatusExtension *, const char*);
SOAP_FMAC3 tt__PTZPresetTourStatusExtension * SOAP_FMAC4 soap_in_tt__PTZPresetTourStatusExtension(struct soap*, const char*, tt__PTZPresetTourStatusExtension *, const char*);
SOAP_FMAC1 tt__PTZPresetTourStatusExtension * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourStatusExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZPresetTourStatusExtension * soap_new_tt__PTZPresetTourStatusExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZPresetTourStatusExtension(soap, n, NULL, NULL, NULL);
}

inline tt__PTZPresetTourStatusExtension * soap_new_req_tt__PTZPresetTourStatusExtension(
	struct soap *soap)
{
	tt__PTZPresetTourStatusExtension *_p = soap_new_tt__PTZPresetTourStatusExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTZPresetTourStatusExtension * soap_new_set_tt__PTZPresetTourStatusExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__PTZPresetTourStatusExtension *_p = soap_new_tt__PTZPresetTourStatusExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZPresetTourStatusExtension::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__PTZPresetTourStatusExtension(struct soap *soap, tt__PTZPresetTourStatusExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourStatusExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZPresetTourStatusExtension * SOAP_FMAC4 soap_get_tt__PTZPresetTourStatusExtension(struct soap*, tt__PTZPresetTourStatusExtension *, const char*, const char*);

inline int soap_read_tt__PTZPresetTourStatusExtension(struct soap *soap, tt__PTZPresetTourStatusExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__PTZPresetTourStatusExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourStatus_DEFINED
#define SOAP_TYPE_tt__PTZPresetTourStatus_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourStatus(struct soap*, const char*, int, const tt__PTZPresetTourStatus *, const char*);
SOAP_FMAC3 tt__PTZPresetTourStatus * SOAP_FMAC4 soap_in_tt__PTZPresetTourStatus(struct soap*, const char*, tt__PTZPresetTourStatus *, const char*);
SOAP_FMAC1 tt__PTZPresetTourStatus * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourStatus(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZPresetTourStatus * soap_new_tt__PTZPresetTourStatus(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZPresetTourStatus(soap, n, NULL, NULL, NULL);
}

inline tt__PTZPresetTourStatus * soap_new_req_tt__PTZPresetTourStatus(
	struct soap *soap,
	enum tt__PTZPresetTourState State)
{
	tt__PTZPresetTourStatus *_p = soap_new_tt__PTZPresetTourStatus(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZPresetTourStatus::State = State;
	}
	return _p;
}

inline tt__PTZPresetTourStatus * soap_new_set_tt__PTZPresetTourStatus(
	struct soap *soap,
	enum tt__PTZPresetTourState State,
	tt__PTZPresetTourSpot *CurrentTourSpot,
	tt__PTZPresetTourStatusExtension *Extension,
	char *__anyAttribute,
	char *__item1)
{
	tt__PTZPresetTourStatus *_p = soap_new_tt__PTZPresetTourStatus(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZPresetTourStatus::State = State;
		_p->tt__PTZPresetTourStatus::CurrentTourSpot = CurrentTourSpot;
		_p->tt__PTZPresetTourStatus::Extension = Extension;
		_p->tt__PTZPresetTourStatus::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__PTZPresetTourStatus(struct soap *soap, tt__PTZPresetTourStatus const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourStatus", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZPresetTourStatus * SOAP_FMAC4 soap_get_tt__PTZPresetTourStatus(struct soap*, tt__PTZPresetTourStatus *, const char*, const char*);

inline int soap_read_tt__PTZPresetTourStatus(struct soap *soap, tt__PTZPresetTourStatus *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__PTZPresetTourStatus(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourTypeExtension_DEFINED
#define SOAP_TYPE_tt__PTZPresetTourTypeExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourTypeExtension(struct soap*, const char*, int, const tt__PTZPresetTourTypeExtension *, const char*);
SOAP_FMAC3 tt__PTZPresetTourTypeExtension * SOAP_FMAC4 soap_in_tt__PTZPresetTourTypeExtension(struct soap*, const char*, tt__PTZPresetTourTypeExtension *, const char*);
SOAP_FMAC1 tt__PTZPresetTourTypeExtension * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourTypeExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZPresetTourTypeExtension * soap_new_tt__PTZPresetTourTypeExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZPresetTourTypeExtension(soap, n, NULL, NULL, NULL);
}

inline tt__PTZPresetTourTypeExtension * soap_new_req_tt__PTZPresetTourTypeExtension(
	struct soap *soap)
{
	tt__PTZPresetTourTypeExtension *_p = soap_new_tt__PTZPresetTourTypeExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTZPresetTourTypeExtension * soap_new_set_tt__PTZPresetTourTypeExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__PTZPresetTourTypeExtension *_p = soap_new_tt__PTZPresetTourTypeExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZPresetTourTypeExtension::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__PTZPresetTourTypeExtension(struct soap *soap, tt__PTZPresetTourTypeExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourTypeExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZPresetTourTypeExtension * SOAP_FMAC4 soap_get_tt__PTZPresetTourTypeExtension(struct soap*, tt__PTZPresetTourTypeExtension *, const char*, const char*);

inline int soap_read_tt__PTZPresetTourTypeExtension(struct soap *soap, tt__PTZPresetTourTypeExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__PTZPresetTourTypeExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourPresetDetail_DEFINED
#define SOAP_TYPE_tt__PTZPresetTourPresetDetail_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourPresetDetail(struct soap*, const char*, int, const tt__PTZPresetTourPresetDetail *, const char*);
SOAP_FMAC3 tt__PTZPresetTourPresetDetail * SOAP_FMAC4 soap_in_tt__PTZPresetTourPresetDetail(struct soap*, const char*, tt__PTZPresetTourPresetDetail *, const char*);
SOAP_FMAC1 tt__PTZPresetTourPresetDetail * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourPresetDetail(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZPresetTourPresetDetail * soap_new_tt__PTZPresetTourPresetDetail(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZPresetTourPresetDetail(soap, n, NULL, NULL, NULL);
}

inline tt__PTZPresetTourPresetDetail * soap_new_req_tt__PTZPresetTourPresetDetail(
	struct soap *soap,
	int __union_PTZPresetTourPresetDetail,
	const union _tt__union_PTZPresetTourPresetDetail& union_PTZPresetTourPresetDetail)
{
	tt__PTZPresetTourPresetDetail *_p = soap_new_tt__PTZPresetTourPresetDetail(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZPresetTourPresetDetail::__union_PTZPresetTourPresetDetail = __union_PTZPresetTourPresetDetail;
		_p->tt__PTZPresetTourPresetDetail::union_PTZPresetTourPresetDetail = union_PTZPresetTourPresetDetail;
	}
	return _p;
}

inline tt__PTZPresetTourPresetDetail * soap_new_set_tt__PTZPresetTourPresetDetail(
	struct soap *soap,
	int __union_PTZPresetTourPresetDetail,
	const union _tt__union_PTZPresetTourPresetDetail& union_PTZPresetTourPresetDetail,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__PTZPresetTourPresetDetail *_p = soap_new_tt__PTZPresetTourPresetDetail(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZPresetTourPresetDetail::__union_PTZPresetTourPresetDetail = __union_PTZPresetTourPresetDetail;
		_p->tt__PTZPresetTourPresetDetail::union_PTZPresetTourPresetDetail = union_PTZPresetTourPresetDetail;
		_p->tt__PTZPresetTourPresetDetail::__any = __any;
		_p->tt__PTZPresetTourPresetDetail::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__PTZPresetTourPresetDetail(struct soap *soap, tt__PTZPresetTourPresetDetail const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourPresetDetail", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZPresetTourPresetDetail * SOAP_FMAC4 soap_get_tt__PTZPresetTourPresetDetail(struct soap*, tt__PTZPresetTourPresetDetail *, const char*, const char*);

inline int soap_read_tt__PTZPresetTourPresetDetail(struct soap *soap, tt__PTZPresetTourPresetDetail *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__PTZPresetTourPresetDetail(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourSpotExtension_DEFINED
#define SOAP_TYPE_tt__PTZPresetTourSpotExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourSpotExtension(struct soap*, const char*, int, const tt__PTZPresetTourSpotExtension *, const char*);
SOAP_FMAC3 tt__PTZPresetTourSpotExtension * SOAP_FMAC4 soap_in_tt__PTZPresetTourSpotExtension(struct soap*, const char*, tt__PTZPresetTourSpotExtension *, const char*);
SOAP_FMAC1 tt__PTZPresetTourSpotExtension * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourSpotExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZPresetTourSpotExtension * soap_new_tt__PTZPresetTourSpotExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZPresetTourSpotExtension(soap, n, NULL, NULL, NULL);
}

inline tt__PTZPresetTourSpotExtension * soap_new_req_tt__PTZPresetTourSpotExtension(
	struct soap *soap)
{
	tt__PTZPresetTourSpotExtension *_p = soap_new_tt__PTZPresetTourSpotExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTZPresetTourSpotExtension * soap_new_set_tt__PTZPresetTourSpotExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__PTZPresetTourSpotExtension *_p = soap_new_tt__PTZPresetTourSpotExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZPresetTourSpotExtension::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__PTZPresetTourSpotExtension(struct soap *soap, tt__PTZPresetTourSpotExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourSpotExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZPresetTourSpotExtension * SOAP_FMAC4 soap_get_tt__PTZPresetTourSpotExtension(struct soap*, tt__PTZPresetTourSpotExtension *, const char*, const char*);

inline int soap_read_tt__PTZPresetTourSpotExtension(struct soap *soap, tt__PTZPresetTourSpotExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__PTZPresetTourSpotExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourSpot_DEFINED
#define SOAP_TYPE_tt__PTZPresetTourSpot_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourSpot(struct soap*, const char*, int, const tt__PTZPresetTourSpot *, const char*);
SOAP_FMAC3 tt__PTZPresetTourSpot * SOAP_FMAC4 soap_in_tt__PTZPresetTourSpot(struct soap*, const char*, tt__PTZPresetTourSpot *, const char*);
SOAP_FMAC1 tt__PTZPresetTourSpot * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourSpot(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZPresetTourSpot * soap_new_tt__PTZPresetTourSpot(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZPresetTourSpot(soap, n, NULL, NULL, NULL);
}

inline tt__PTZPresetTourSpot * soap_new_req_tt__PTZPresetTourSpot(
	struct soap *soap,
	tt__PTZPresetTourPresetDetail *PresetDetail)
{
	tt__PTZPresetTourSpot *_p = soap_new_tt__PTZPresetTourSpot(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZPresetTourSpot::PresetDetail = PresetDetail;
	}
	return _p;
}

inline tt__PTZPresetTourSpot * soap_new_set_tt__PTZPresetTourSpot(
	struct soap *soap,
	tt__PTZPresetTourPresetDetail *PresetDetail,
	tt__PTZSpeed *Speed,
	LONG64 *StayTime,
	tt__PTZPresetTourSpotExtension *Extension,
	char *__anyAttribute,
	char *__item1)
{
	tt__PTZPresetTourSpot *_p = soap_new_tt__PTZPresetTourSpot(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZPresetTourSpot::PresetDetail = PresetDetail;
		_p->tt__PTZPresetTourSpot::Speed = Speed;
		_p->tt__PTZPresetTourSpot::StayTime = StayTime;
		_p->tt__PTZPresetTourSpot::Extension = Extension;
		_p->tt__PTZPresetTourSpot::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__PTZPresetTourSpot(struct soap *soap, tt__PTZPresetTourSpot const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourSpot", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZPresetTourSpot * SOAP_FMAC4 soap_get_tt__PTZPresetTourSpot(struct soap*, tt__PTZPresetTourSpot *, const char*, const char*);

inline int soap_read_tt__PTZPresetTourSpot(struct soap *soap, tt__PTZPresetTourSpot *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__PTZPresetTourSpot(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourExtension_DEFINED
#define SOAP_TYPE_tt__PTZPresetTourExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourExtension(struct soap*, const char*, int, const tt__PTZPresetTourExtension *, const char*);
SOAP_FMAC3 tt__PTZPresetTourExtension * SOAP_FMAC4 soap_in_tt__PTZPresetTourExtension(struct soap*, const char*, tt__PTZPresetTourExtension *, const char*);
SOAP_FMAC1 tt__PTZPresetTourExtension * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZPresetTourExtension * soap_new_tt__PTZPresetTourExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZPresetTourExtension(soap, n, NULL, NULL, NULL);
}

inline tt__PTZPresetTourExtension * soap_new_req_tt__PTZPresetTourExtension(
	struct soap *soap)
{
	tt__PTZPresetTourExtension *_p = soap_new_tt__PTZPresetTourExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTZPresetTourExtension * soap_new_set_tt__PTZPresetTourExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__PTZPresetTourExtension *_p = soap_new_tt__PTZPresetTourExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZPresetTourExtension::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__PTZPresetTourExtension(struct soap *soap, tt__PTZPresetTourExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZPresetTourExtension * SOAP_FMAC4 soap_get_tt__PTZPresetTourExtension(struct soap*, tt__PTZPresetTourExtension *, const char*, const char*);

inline int soap_read_tt__PTZPresetTourExtension(struct soap *soap, tt__PTZPresetTourExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__PTZPresetTourExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__PresetTour_DEFINED
#define SOAP_TYPE_tt__PresetTour_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PresetTour(struct soap*, const char*, int, const tt__PresetTour *, const char*);
SOAP_FMAC3 tt__PresetTour * SOAP_FMAC4 soap_in_tt__PresetTour(struct soap*, const char*, tt__PresetTour *, const char*);
SOAP_FMAC1 tt__PresetTour * SOAP_FMAC2 soap_instantiate_tt__PresetTour(struct soap*, int, const char*, const char*, size_t*);

inline tt__PresetTour * soap_new_tt__PresetTour(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PresetTour(soap, n, NULL, NULL, NULL);
}

inline tt__PresetTour * soap_new_req_tt__PresetTour(
	struct soap *soap,
	tt__PTZPresetTourStatus *Status,
	bool AutoStart,
	tt__PTZPresetTourStartingCondition *StartingCondition)
{
	tt__PresetTour *_p = soap_new_tt__PresetTour(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PresetTour::Status = Status;
		_p->tt__PresetTour::AutoStart = AutoStart;
		_p->tt__PresetTour::StartingCondition = StartingCondition;
	}
	return _p;
}

inline tt__PresetTour * soap_new_set_tt__PresetTour(
	struct soap *soap,
	std::string *Name,
	tt__PTZPresetTourStatus *Status,
	bool AutoStart,
	tt__PTZPresetTourStartingCondition *StartingCondition,
	const std::vector<tt__PTZPresetTourSpot *> & TourSpot,
	tt__PTZPresetTourExtension *Extension,
	std::string *token,
	char *__anyAttribute,
	char *__item1)
{
	tt__PresetTour *_p = soap_new_tt__PresetTour(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PresetTour::Name = Name;
		_p->tt__PresetTour::Status = Status;
		_p->tt__PresetTour::AutoStart = AutoStart;
		_p->tt__PresetTour::StartingCondition = StartingCondition;
		_p->tt__PresetTour::TourSpot = TourSpot;
		_p->tt__PresetTour::Extension = Extension;
		_p->tt__PresetTour::token = token;
		_p->tt__PresetTour::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__PresetTour(struct soap *soap, tt__PresetTour const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PresetTour", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__PresetTour * SOAP_FMAC4 soap_get_tt__PresetTour(struct soap*, tt__PresetTour *, const char*, const char*);

inline int soap_read_tt__PresetTour(struct soap *soap, tt__PresetTour *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__PresetTour(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__PTZMoveStatus_DEFINED
#define SOAP_TYPE_tt__PTZMoveStatus_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZMoveStatus(struct soap*, const char*, int, const tt__PTZMoveStatus *, const char*);
SOAP_FMAC3 tt__PTZMoveStatus * SOAP_FMAC4 soap_in_tt__PTZMoveStatus(struct soap*, const char*, tt__PTZMoveStatus *, const char*);
SOAP_FMAC1 tt__PTZMoveStatus * SOAP_FMAC2 soap_instantiate_tt__PTZMoveStatus(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZMoveStatus * soap_new_tt__PTZMoveStatus(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZMoveStatus(soap, n, NULL, NULL, NULL);
}

inline tt__PTZMoveStatus * soap_new_req_tt__PTZMoveStatus(
	struct soap *soap)
{
	tt__PTZMoveStatus *_p = soap_new_tt__PTZMoveStatus(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTZMoveStatus * soap_new_set_tt__PTZMoveStatus(
	struct soap *soap,
	enum tt__MoveStatus *PanTilt,
	enum tt__MoveStatus *Zoom,
	char *__item1)
{
	tt__PTZMoveStatus *_p = soap_new_tt__PTZMoveStatus(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZMoveStatus::PanTilt = PanTilt;
		_p->tt__PTZMoveStatus::Zoom = Zoom;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__PTZMoveStatus(struct soap *soap, tt__PTZMoveStatus const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZMoveStatus", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZMoveStatus * SOAP_FMAC4 soap_get_tt__PTZMoveStatus(struct soap*, tt__PTZMoveStatus *, const char*, const char*);

inline int soap_read_tt__PTZMoveStatus(struct soap *soap, tt__PTZMoveStatus *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__PTZMoveStatus(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__PTZPreset_DEFINED
#define SOAP_TYPE_tt__PTZPreset_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPreset(struct soap*, const char*, int, const tt__PTZPreset *, const char*);
SOAP_FMAC3 tt__PTZPreset * SOAP_FMAC4 soap_in_tt__PTZPreset(struct soap*, const char*, tt__PTZPreset *, const char*);
SOAP_FMAC1 tt__PTZPreset * SOAP_FMAC2 soap_instantiate_tt__PTZPreset(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZPreset * soap_new_tt__PTZPreset(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZPreset(soap, n, NULL, NULL, NULL);
}

inline tt__PTZPreset * soap_new_req_tt__PTZPreset(
	struct soap *soap)
{
	tt__PTZPreset *_p = soap_new_tt__PTZPreset(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTZPreset * soap_new_set_tt__PTZPreset(
	struct soap *soap,
	std::string *Name,
	tt__PTZVector *PTZPosition,
	std::string *token,
	char *__anyAttribute,
	char *__item1)
{
	tt__PTZPreset *_p = soap_new_tt__PTZPreset(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZPreset::Name = Name;
		_p->tt__PTZPreset::PTZPosition = PTZPosition;
		_p->tt__PTZPreset::token = token;
		_p->tt__PTZPreset::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__PTZPreset(struct soap *soap, tt__PTZPreset const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPreset", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZPreset * SOAP_FMAC4 soap_get_tt__PTZPreset(struct soap*, tt__PTZPreset *, const char*, const char*);

inline int soap_read_tt__PTZPreset(struct soap *soap, tt__PTZPreset *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__PTZPreset(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__PTZStatus_DEFINED
#define SOAP_TYPE_tt__PTZStatus_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZStatus(struct soap*, const char*, int, const tt__PTZStatus *, const char*);
SOAP_FMAC3 tt__PTZStatus * SOAP_FMAC4 soap_in_tt__PTZStatus(struct soap*, const char*, tt__PTZStatus *, const char*);
SOAP_FMAC1 tt__PTZStatus * SOAP_FMAC2 soap_instantiate_tt__PTZStatus(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZStatus * soap_new_tt__PTZStatus(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZStatus(soap, n, NULL, NULL, NULL);
}

inline tt__PTZStatus * soap_new_req_tt__PTZStatus(
	struct soap *soap,
	time_t UtcTime)
{
	tt__PTZStatus *_p = soap_new_tt__PTZStatus(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZStatus::UtcTime = UtcTime;
	}
	return _p;
}

inline tt__PTZStatus * soap_new_set_tt__PTZStatus(
	struct soap *soap,
	tt__PTZVector *Position,
	tt__PTZMoveStatus *MoveStatus,
	std::string *Error,
	time_t UtcTime,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__PTZStatus *_p = soap_new_tt__PTZStatus(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZStatus::Position = Position;
		_p->tt__PTZStatus::MoveStatus = MoveStatus;
		_p->tt__PTZStatus::Error = Error;
		_p->tt__PTZStatus::UtcTime = UtcTime;
		_p->tt__PTZStatus::__any = __any;
		_p->tt__PTZStatus::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__PTZStatus(struct soap *soap, tt__PTZStatus const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZStatus", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZStatus * SOAP_FMAC4 soap_get_tt__PTZStatus(struct soap*, tt__PTZStatus *, const char*, const char*);

inline int soap_read_tt__PTZStatus(struct soap *soap, tt__PTZStatus *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__PTZStatus(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__PTZSpeed_DEFINED
#define SOAP_TYPE_tt__PTZSpeed_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZSpeed(struct soap*, const char*, int, const tt__PTZSpeed *, const char*);
SOAP_FMAC3 tt__PTZSpeed * SOAP_FMAC4 soap_in_tt__PTZSpeed(struct soap*, const char*, tt__PTZSpeed *, const char*);
SOAP_FMAC1 tt__PTZSpeed * SOAP_FMAC2 soap_instantiate_tt__PTZSpeed(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZSpeed * soap_new_tt__PTZSpeed(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZSpeed(soap, n, NULL, NULL, NULL);
}

inline tt__PTZSpeed * soap_new_req_tt__PTZSpeed(
	struct soap *soap)
{
	tt__PTZSpeed *_p = soap_new_tt__PTZSpeed(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTZSpeed * soap_new_set_tt__PTZSpeed(
	struct soap *soap,
	tt__Vector2D *PanTilt,
	tt__Vector1D *Zoom,
	char *__item1)
{
	tt__PTZSpeed *_p = soap_new_tt__PTZSpeed(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZSpeed::PanTilt = PanTilt;
		_p->tt__PTZSpeed::Zoom = Zoom;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__PTZSpeed(struct soap *soap, tt__PTZSpeed const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZSpeed", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZSpeed * SOAP_FMAC4 soap_get_tt__PTZSpeed(struct soap*, tt__PTZSpeed *, const char*, const char*);

inline int soap_read_tt__PTZSpeed(struct soap *soap, tt__PTZSpeed *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__PTZSpeed(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__PTZVector_DEFINED
#define SOAP_TYPE_tt__PTZVector_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZVector(struct soap*, const char*, int, const tt__PTZVector *, const char*);
SOAP_FMAC3 tt__PTZVector * SOAP_FMAC4 soap_in_tt__PTZVector(struct soap*, const char*, tt__PTZVector *, const char*);
SOAP_FMAC1 tt__PTZVector * SOAP_FMAC2 soap_instantiate_tt__PTZVector(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZVector * soap_new_tt__PTZVector(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZVector(soap, n, NULL, NULL, NULL);
}

inline tt__PTZVector * soap_new_req_tt__PTZVector(
	struct soap *soap)
{
	tt__PTZVector *_p = soap_new_tt__PTZVector(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTZVector * soap_new_set_tt__PTZVector(
	struct soap *soap,
	tt__Vector2D *PanTilt,
	tt__Vector1D *Zoom,
	char *__item1)
{
	tt__PTZVector *_p = soap_new_tt__PTZVector(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZVector::PanTilt = PanTilt;
		_p->tt__PTZVector::Zoom = Zoom;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__PTZVector(struct soap *soap, tt__PTZVector const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZVector", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZVector * SOAP_FMAC4 soap_get_tt__PTZVector(struct soap*, tt__PTZVector *, const char*, const char*);

inline int soap_read_tt__PTZVector(struct soap *soap, tt__PTZVector *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__PTZVector(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__Vector1D_DEFINED
#define SOAP_TYPE_tt__Vector1D_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Vector1D(struct soap*, const char*, int, const tt__Vector1D *, const char*);
SOAP_FMAC3 tt__Vector1D * SOAP_FMAC4 soap_in_tt__Vector1D(struct soap*, const char*, tt__Vector1D *, const char*);
SOAP_FMAC1 tt__Vector1D * SOAP_FMAC2 soap_instantiate_tt__Vector1D(struct soap*, int, const char*, const char*, size_t*);

inline tt__Vector1D * soap_new_tt__Vector1D(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Vector1D(soap, n, NULL, NULL, NULL);
}

inline tt__Vector1D * soap_new_req_tt__Vector1D(
	struct soap *soap,
	float x)
{
	tt__Vector1D *_p = soap_new_tt__Vector1D(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Vector1D::x = x;
	}
	return _p;
}

inline tt__Vector1D * soap_new_set_tt__Vector1D(
	struct soap *soap,
	float x,
	std::string *space,
	char *__item1)
{
	tt__Vector1D *_p = soap_new_tt__Vector1D(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Vector1D::x = x;
		_p->tt__Vector1D::space = space;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__Vector1D(struct soap *soap, tt__Vector1D const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Vector1D", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__Vector1D * SOAP_FMAC4 soap_get_tt__Vector1D(struct soap*, tt__Vector1D *, const char*, const char*);

inline int soap_read_tt__Vector1D(struct soap *soap, tt__Vector1D *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__Vector1D(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__Vector2D_DEFINED
#define SOAP_TYPE_tt__Vector2D_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Vector2D(struct soap*, const char*, int, const tt__Vector2D *, const char*);
SOAP_FMAC3 tt__Vector2D * SOAP_FMAC4 soap_in_tt__Vector2D(struct soap*, const char*, tt__Vector2D *, const char*);
SOAP_FMAC1 tt__Vector2D * SOAP_FMAC2 soap_instantiate_tt__Vector2D(struct soap*, int, const char*, const char*, size_t*);

inline tt__Vector2D * soap_new_tt__Vector2D(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Vector2D(soap, n, NULL, NULL, NULL);
}

inline tt__Vector2D * soap_new_req_tt__Vector2D(
	struct soap *soap,
	float x,
	float y)
{
	tt__Vector2D *_p = soap_new_tt__Vector2D(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Vector2D::x = x;
		_p->tt__Vector2D::y = y;
	}
	return _p;
}

inline tt__Vector2D * soap_new_set_tt__Vector2D(
	struct soap *soap,
	float x,
	float y,
	std::string *space,
	char *__item1)
{
	tt__Vector2D *_p = soap_new_tt__Vector2D(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Vector2D::x = x;
		_p->tt__Vector2D::y = y;
		_p->tt__Vector2D::space = space;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__Vector2D(struct soap *soap, tt__Vector2D const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Vector2D", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__Vector2D * SOAP_FMAC4 soap_get_tt__Vector2D(struct soap*, tt__Vector2D *, const char*, const char*);

inline int soap_read_tt__Vector2D(struct soap *soap, tt__Vector2D *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__Vector2D(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__Space1DDescription_DEFINED
#define SOAP_TYPE_tt__Space1DDescription_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Space1DDescription(struct soap*, const char*, int, const tt__Space1DDescription *, const char*);
SOAP_FMAC3 tt__Space1DDescription * SOAP_FMAC4 soap_in_tt__Space1DDescription(struct soap*, const char*, tt__Space1DDescription *, const char*);
SOAP_FMAC1 tt__Space1DDescription * SOAP_FMAC2 soap_instantiate_tt__Space1DDescription(struct soap*, int, const char*, const char*, size_t*);

inline tt__Space1DDescription * soap_new_tt__Space1DDescription(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Space1DDescription(soap, n, NULL, NULL, NULL);
}

inline tt__Space1DDescription * soap_new_req_tt__Space1DDescription(
	struct soap *soap,
	const std::string& URI,
	tt__FloatRange *XRange)
{
	tt__Space1DDescription *_p = soap_new_tt__Space1DDescription(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Space1DDescription::URI = URI;
		_p->tt__Space1DDescription::XRange = XRange;
	}
	return _p;
}

inline tt__Space1DDescription * soap_new_set_tt__Space1DDescription(
	struct soap *soap,
	const std::string& URI,
	tt__FloatRange *XRange,
	char *__item1)
{
	tt__Space1DDescription *_p = soap_new_tt__Space1DDescription(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Space1DDescription::URI = URI;
		_p->tt__Space1DDescription::XRange = XRange;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__Space1DDescription(struct soap *soap, tt__Space1DDescription const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Space1DDescription", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__Space1DDescription * SOAP_FMAC4 soap_get_tt__Space1DDescription(struct soap*, tt__Space1DDescription *, const char*, const char*);

inline int soap_read_tt__Space1DDescription(struct soap *soap, tt__Space1DDescription *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__Space1DDescription(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__Space2DDescription_DEFINED
#define SOAP_TYPE_tt__Space2DDescription_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Space2DDescription(struct soap*, const char*, int, const tt__Space2DDescription *, const char*);
SOAP_FMAC3 tt__Space2DDescription * SOAP_FMAC4 soap_in_tt__Space2DDescription(struct soap*, const char*, tt__Space2DDescription *, const char*);
SOAP_FMAC1 tt__Space2DDescription * SOAP_FMAC2 soap_instantiate_tt__Space2DDescription(struct soap*, int, const char*, const char*, size_t*);

inline tt__Space2DDescription * soap_new_tt__Space2DDescription(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Space2DDescription(soap, n, NULL, NULL, NULL);
}

inline tt__Space2DDescription * soap_new_req_tt__Space2DDescription(
	struct soap *soap,
	const std::string& URI,
	tt__FloatRange *XRange,
	tt__FloatRange *YRange)
{
	tt__Space2DDescription *_p = soap_new_tt__Space2DDescription(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Space2DDescription::URI = URI;
		_p->tt__Space2DDescription::XRange = XRange;
		_p->tt__Space2DDescription::YRange = YRange;
	}
	return _p;
}

inline tt__Space2DDescription * soap_new_set_tt__Space2DDescription(
	struct soap *soap,
	const std::string& URI,
	tt__FloatRange *XRange,
	tt__FloatRange *YRange,
	char *__item1)
{
	tt__Space2DDescription *_p = soap_new_tt__Space2DDescription(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Space2DDescription::URI = URI;
		_p->tt__Space2DDescription::XRange = XRange;
		_p->tt__Space2DDescription::YRange = YRange;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__Space2DDescription(struct soap *soap, tt__Space2DDescription const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Space2DDescription", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__Space2DDescription * SOAP_FMAC4 soap_get_tt__Space2DDescription(struct soap*, tt__Space2DDescription *, const char*, const char*);

inline int soap_read_tt__Space2DDescription(struct soap *soap, tt__Space2DDescription *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__Space2DDescription(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__PTZSpacesExtension_DEFINED
#define SOAP_TYPE_tt__PTZSpacesExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZSpacesExtension(struct soap*, const char*, int, const tt__PTZSpacesExtension *, const char*);
SOAP_FMAC3 tt__PTZSpacesExtension * SOAP_FMAC4 soap_in_tt__PTZSpacesExtension(struct soap*, const char*, tt__PTZSpacesExtension *, const char*);
SOAP_FMAC1 tt__PTZSpacesExtension * SOAP_FMAC2 soap_instantiate_tt__PTZSpacesExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZSpacesExtension * soap_new_tt__PTZSpacesExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZSpacesExtension(soap, n, NULL, NULL, NULL);
}

inline tt__PTZSpacesExtension * soap_new_req_tt__PTZSpacesExtension(
	struct soap *soap)
{
	tt__PTZSpacesExtension *_p = soap_new_tt__PTZSpacesExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTZSpacesExtension * soap_new_set_tt__PTZSpacesExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__PTZSpacesExtension *_p = soap_new_tt__PTZSpacesExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZSpacesExtension::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__PTZSpacesExtension(struct soap *soap, tt__PTZSpacesExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZSpacesExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZSpacesExtension * SOAP_FMAC4 soap_get_tt__PTZSpacesExtension(struct soap*, tt__PTZSpacesExtension *, const char*, const char*);

inline int soap_read_tt__PTZSpacesExtension(struct soap *soap, tt__PTZSpacesExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__PTZSpacesExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__PTZSpaces_DEFINED
#define SOAP_TYPE_tt__PTZSpaces_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZSpaces(struct soap*, const char*, int, const tt__PTZSpaces *, const char*);
SOAP_FMAC3 tt__PTZSpaces * SOAP_FMAC4 soap_in_tt__PTZSpaces(struct soap*, const char*, tt__PTZSpaces *, const char*);
SOAP_FMAC1 tt__PTZSpaces * SOAP_FMAC2 soap_instantiate_tt__PTZSpaces(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZSpaces * soap_new_tt__PTZSpaces(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZSpaces(soap, n, NULL, NULL, NULL);
}

inline tt__PTZSpaces * soap_new_req_tt__PTZSpaces(
	struct soap *soap)
{
	tt__PTZSpaces *_p = soap_new_tt__PTZSpaces(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTZSpaces * soap_new_set_tt__PTZSpaces(
	struct soap *soap,
	const std::vector<tt__Space2DDescription *> & AbsolutePanTiltPositionSpace,
	const std::vector<tt__Space1DDescription *> & AbsoluteZoomPositionSpace,
	const std::vector<tt__Space2DDescription *> & RelativePanTiltTranslationSpace,
	const std::vector<tt__Space1DDescription *> & RelativeZoomTranslationSpace,
	const std::vector<tt__Space2DDescription *> & ContinuousPanTiltVelocitySpace,
	const std::vector<tt__Space1DDescription *> & ContinuousZoomVelocitySpace,
	const std::vector<tt__Space1DDescription *> & PanTiltSpeedSpace,
	const std::vector<tt__Space1DDescription *> & ZoomSpeedSpace,
	tt__PTZSpacesExtension *Extension,
	char *__anyAttribute,
	char *__item1)
{
	tt__PTZSpaces *_p = soap_new_tt__PTZSpaces(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZSpaces::AbsolutePanTiltPositionSpace = AbsolutePanTiltPositionSpace;
		_p->tt__PTZSpaces::AbsoluteZoomPositionSpace = AbsoluteZoomPositionSpace;
		_p->tt__PTZSpaces::RelativePanTiltTranslationSpace = RelativePanTiltTranslationSpace;
		_p->tt__PTZSpaces::RelativeZoomTranslationSpace = RelativeZoomTranslationSpace;
		_p->tt__PTZSpaces::ContinuousPanTiltVelocitySpace = ContinuousPanTiltVelocitySpace;
		_p->tt__PTZSpaces::ContinuousZoomVelocitySpace = ContinuousZoomVelocitySpace;
		_p->tt__PTZSpaces::PanTiltSpeedSpace = PanTiltSpeedSpace;
		_p->tt__PTZSpaces::ZoomSpeedSpace = ZoomSpeedSpace;
		_p->tt__PTZSpaces::Extension = Extension;
		_p->tt__PTZSpaces::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__PTZSpaces(struct soap *soap, tt__PTZSpaces const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZSpaces", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZSpaces * SOAP_FMAC4 soap_get_tt__PTZSpaces(struct soap*, tt__PTZSpaces *, const char*, const char*);

inline int soap_read_tt__PTZSpaces(struct soap *soap, tt__PTZSpaces *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__PTZSpaces(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__ZoomLimits_DEFINED
#define SOAP_TYPE_tt__ZoomLimits_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ZoomLimits(struct soap*, const char*, int, const tt__ZoomLimits *, const char*);
SOAP_FMAC3 tt__ZoomLimits * SOAP_FMAC4 soap_in_tt__ZoomLimits(struct soap*, const char*, tt__ZoomLimits *, const char*);
SOAP_FMAC1 tt__ZoomLimits * SOAP_FMAC2 soap_instantiate_tt__ZoomLimits(struct soap*, int, const char*, const char*, size_t*);

inline tt__ZoomLimits * soap_new_tt__ZoomLimits(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ZoomLimits(soap, n, NULL, NULL, NULL);
}

inline tt__ZoomLimits * soap_new_req_tt__ZoomLimits(
	struct soap *soap,
	tt__Space1DDescription *Range)
{
	tt__ZoomLimits *_p = soap_new_tt__ZoomLimits(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ZoomLimits::Range = Range;
	}
	return _p;
}

inline tt__ZoomLimits * soap_new_set_tt__ZoomLimits(
	struct soap *soap,
	tt__Space1DDescription *Range,
	char *__item1)
{
	tt__ZoomLimits *_p = soap_new_tt__ZoomLimits(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ZoomLimits::Range = Range;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__ZoomLimits(struct soap *soap, tt__ZoomLimits const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ZoomLimits", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__ZoomLimits * SOAP_FMAC4 soap_get_tt__ZoomLimits(struct soap*, tt__ZoomLimits *, const char*, const char*);

inline int soap_read_tt__ZoomLimits(struct soap *soap, tt__ZoomLimits *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__ZoomLimits(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__PanTiltLimits_DEFINED
#define SOAP_TYPE_tt__PanTiltLimits_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PanTiltLimits(struct soap*, const char*, int, const tt__PanTiltLimits *, const char*);
SOAP_FMAC3 tt__PanTiltLimits * SOAP_FMAC4 soap_in_tt__PanTiltLimits(struct soap*, const char*, tt__PanTiltLimits *, const char*);
SOAP_FMAC1 tt__PanTiltLimits * SOAP_FMAC2 soap_instantiate_tt__PanTiltLimits(struct soap*, int, const char*, const char*, size_t*);

inline tt__PanTiltLimits * soap_new_tt__PanTiltLimits(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PanTiltLimits(soap, n, NULL, NULL, NULL);
}

inline tt__PanTiltLimits * soap_new_req_tt__PanTiltLimits(
	struct soap *soap,
	tt__Space2DDescription *Range)
{
	tt__PanTiltLimits *_p = soap_new_tt__PanTiltLimits(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PanTiltLimits::Range = Range;
	}
	return _p;
}

inline tt__PanTiltLimits * soap_new_set_tt__PanTiltLimits(
	struct soap *soap,
	tt__Space2DDescription *Range,
	char *__item1)
{
	tt__PanTiltLimits *_p = soap_new_tt__PanTiltLimits(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PanTiltLimits::Range = Range;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__PanTiltLimits(struct soap *soap, tt__PanTiltLimits const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PanTiltLimits", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__PanTiltLimits * SOAP_FMAC4 soap_get_tt__PanTiltLimits(struct soap*, tt__PanTiltLimits *, const char*, const char*);

inline int soap_read_tt__PanTiltLimits(struct soap *soap, tt__PanTiltLimits *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__PanTiltLimits(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__ReverseOptionsExtension_DEFINED
#define SOAP_TYPE_tt__ReverseOptionsExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ReverseOptionsExtension(struct soap*, const char*, int, const tt__ReverseOptionsExtension *, const char*);
SOAP_FMAC3 tt__ReverseOptionsExtension * SOAP_FMAC4 soap_in_tt__ReverseOptionsExtension(struct soap*, const char*, tt__ReverseOptionsExtension *, const char*);
SOAP_FMAC1 tt__ReverseOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__ReverseOptionsExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__ReverseOptionsExtension * soap_new_tt__ReverseOptionsExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ReverseOptionsExtension(soap, n, NULL, NULL, NULL);
}

inline tt__ReverseOptionsExtension * soap_new_req_tt__ReverseOptionsExtension(
	struct soap *soap)
{
	tt__ReverseOptionsExtension *_p = soap_new_tt__ReverseOptionsExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__ReverseOptionsExtension * soap_new_set_tt__ReverseOptionsExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__ReverseOptionsExtension *_p = soap_new_tt__ReverseOptionsExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ReverseOptionsExtension::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__ReverseOptionsExtension(struct soap *soap, tt__ReverseOptionsExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ReverseOptionsExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__ReverseOptionsExtension * SOAP_FMAC4 soap_get_tt__ReverseOptionsExtension(struct soap*, tt__ReverseOptionsExtension *, const char*, const char*);

inline int soap_read_tt__ReverseOptionsExtension(struct soap *soap, tt__ReverseOptionsExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__ReverseOptionsExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__ReverseOptions_DEFINED
#define SOAP_TYPE_tt__ReverseOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ReverseOptions(struct soap*, const char*, int, const tt__ReverseOptions *, const char*);
SOAP_FMAC3 tt__ReverseOptions * SOAP_FMAC4 soap_in_tt__ReverseOptions(struct soap*, const char*, tt__ReverseOptions *, const char*);
SOAP_FMAC1 tt__ReverseOptions * SOAP_FMAC2 soap_instantiate_tt__ReverseOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__ReverseOptions * soap_new_tt__ReverseOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ReverseOptions(soap, n, NULL, NULL, NULL);
}

inline tt__ReverseOptions * soap_new_req_tt__ReverseOptions(
	struct soap *soap)
{
	tt__ReverseOptions *_p = soap_new_tt__ReverseOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__ReverseOptions * soap_new_set_tt__ReverseOptions(
	struct soap *soap,
	const std::vector<enum tt__ReverseMode> & Mode,
	tt__ReverseOptionsExtension *Extension,
	char *__anyAttribute,
	char *__item1)
{
	tt__ReverseOptions *_p = soap_new_tt__ReverseOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ReverseOptions::Mode = Mode;
		_p->tt__ReverseOptions::Extension = Extension;
		_p->tt__ReverseOptions::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__ReverseOptions(struct soap *soap, tt__ReverseOptions const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ReverseOptions", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__ReverseOptions * SOAP_FMAC4 soap_get_tt__ReverseOptions(struct soap*, tt__ReverseOptions *, const char*, const char*);

inline int soap_read_tt__ReverseOptions(struct soap *soap, tt__ReverseOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__ReverseOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__EFlipOptionsExtension_DEFINED
#define SOAP_TYPE_tt__EFlipOptionsExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__EFlipOptionsExtension(struct soap*, const char*, int, const tt__EFlipOptionsExtension *, const char*);
SOAP_FMAC3 tt__EFlipOptionsExtension * SOAP_FMAC4 soap_in_tt__EFlipOptionsExtension(struct soap*, const char*, tt__EFlipOptionsExtension *, const char*);
SOAP_FMAC1 tt__EFlipOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__EFlipOptionsExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__EFlipOptionsExtension * soap_new_tt__EFlipOptionsExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__EFlipOptionsExtension(soap, n, NULL, NULL, NULL);
}

inline tt__EFlipOptionsExtension * soap_new_req_tt__EFlipOptionsExtension(
	struct soap *soap)
{
	tt__EFlipOptionsExtension *_p = soap_new_tt__EFlipOptionsExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__EFlipOptionsExtension * soap_new_set_tt__EFlipOptionsExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__EFlipOptionsExtension *_p = soap_new_tt__EFlipOptionsExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__EFlipOptionsExtension::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__EFlipOptionsExtension(struct soap *soap, tt__EFlipOptionsExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:EFlipOptionsExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__EFlipOptionsExtension * SOAP_FMAC4 soap_get_tt__EFlipOptionsExtension(struct soap*, tt__EFlipOptionsExtension *, const char*, const char*);

inline int soap_read_tt__EFlipOptionsExtension(struct soap *soap, tt__EFlipOptionsExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__EFlipOptionsExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__EFlipOptions_DEFINED
#define SOAP_TYPE_tt__EFlipOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__EFlipOptions(struct soap*, const char*, int, const tt__EFlipOptions *, const char*);
SOAP_FMAC3 tt__EFlipOptions * SOAP_FMAC4 soap_in_tt__EFlipOptions(struct soap*, const char*, tt__EFlipOptions *, const char*);
SOAP_FMAC1 tt__EFlipOptions * SOAP_FMAC2 soap_instantiate_tt__EFlipOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__EFlipOptions * soap_new_tt__EFlipOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__EFlipOptions(soap, n, NULL, NULL, NULL);
}

inline tt__EFlipOptions * soap_new_req_tt__EFlipOptions(
	struct soap *soap)
{
	tt__EFlipOptions *_p = soap_new_tt__EFlipOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__EFlipOptions * soap_new_set_tt__EFlipOptions(
	struct soap *soap,
	const std::vector<enum tt__EFlipMode> & Mode,
	tt__EFlipOptionsExtension *Extension,
	char *__anyAttribute,
	char *__item1)
{
	tt__EFlipOptions *_p = soap_new_tt__EFlipOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__EFlipOptions::Mode = Mode;
		_p->tt__EFlipOptions::Extension = Extension;
		_p->tt__EFlipOptions::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__EFlipOptions(struct soap *soap, tt__EFlipOptions const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:EFlipOptions", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__EFlipOptions * SOAP_FMAC4 soap_get_tt__EFlipOptions(struct soap*, tt__EFlipOptions *, const char*, const char*);

inline int soap_read_tt__EFlipOptions(struct soap *soap, tt__EFlipOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__EFlipOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__PTControlDirectionOptionsExtension_DEFINED
#define SOAP_TYPE_tt__PTControlDirectionOptionsExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTControlDirectionOptionsExtension(struct soap*, const char*, int, const tt__PTControlDirectionOptionsExtension *, const char*);
SOAP_FMAC3 tt__PTControlDirectionOptionsExtension * SOAP_FMAC4 soap_in_tt__PTControlDirectionOptionsExtension(struct soap*, const char*, tt__PTControlDirectionOptionsExtension *, const char*);
SOAP_FMAC1 tt__PTControlDirectionOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__PTControlDirectionOptionsExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTControlDirectionOptionsExtension * soap_new_tt__PTControlDirectionOptionsExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTControlDirectionOptionsExtension(soap, n, NULL, NULL, NULL);
}

inline tt__PTControlDirectionOptionsExtension * soap_new_req_tt__PTControlDirectionOptionsExtension(
	struct soap *soap)
{
	tt__PTControlDirectionOptionsExtension *_p = soap_new_tt__PTControlDirectionOptionsExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTControlDirectionOptionsExtension * soap_new_set_tt__PTControlDirectionOptionsExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__PTControlDirectionOptionsExtension *_p = soap_new_tt__PTControlDirectionOptionsExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTControlDirectionOptionsExtension::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__PTControlDirectionOptionsExtension(struct soap *soap, tt__PTControlDirectionOptionsExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTControlDirectionOptionsExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTControlDirectionOptionsExtension * SOAP_FMAC4 soap_get_tt__PTControlDirectionOptionsExtension(struct soap*, tt__PTControlDirectionOptionsExtension *, const char*, const char*);

inline int soap_read_tt__PTControlDirectionOptionsExtension(struct soap *soap, tt__PTControlDirectionOptionsExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__PTControlDirectionOptionsExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__PTControlDirectionOptions_DEFINED
#define SOAP_TYPE_tt__PTControlDirectionOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTControlDirectionOptions(struct soap*, const char*, int, const tt__PTControlDirectionOptions *, const char*);
SOAP_FMAC3 tt__PTControlDirectionOptions * SOAP_FMAC4 soap_in_tt__PTControlDirectionOptions(struct soap*, const char*, tt__PTControlDirectionOptions *, const char*);
SOAP_FMAC1 tt__PTControlDirectionOptions * SOAP_FMAC2 soap_instantiate_tt__PTControlDirectionOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTControlDirectionOptions * soap_new_tt__PTControlDirectionOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTControlDirectionOptions(soap, n, NULL, NULL, NULL);
}

inline tt__PTControlDirectionOptions * soap_new_req_tt__PTControlDirectionOptions(
	struct soap *soap)
{
	tt__PTControlDirectionOptions *_p = soap_new_tt__PTControlDirectionOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTControlDirectionOptions * soap_new_set_tt__PTControlDirectionOptions(
	struct soap *soap,
	tt__EFlipOptions *EFlip,
	tt__ReverseOptions *Reverse,
	tt__PTControlDirectionOptionsExtension *Extension,
	char *__anyAttribute,
	char *__item1)
{
	tt__PTControlDirectionOptions *_p = soap_new_tt__PTControlDirectionOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTControlDirectionOptions::EFlip = EFlip;
		_p->tt__PTControlDirectionOptions::Reverse = Reverse;
		_p->tt__PTControlDirectionOptions::Extension = Extension;
		_p->tt__PTControlDirectionOptions::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__PTControlDirectionOptions(struct soap *soap, tt__PTControlDirectionOptions const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTControlDirectionOptions", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTControlDirectionOptions * SOAP_FMAC4 soap_get_tt__PTControlDirectionOptions(struct soap*, tt__PTControlDirectionOptions *, const char*, const char*);

inline int soap_read_tt__PTControlDirectionOptions(struct soap *soap, tt__PTControlDirectionOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__PTControlDirectionOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__PTZConfigurationOptions2_DEFINED
#define SOAP_TYPE_tt__PTZConfigurationOptions2_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZConfigurationOptions2(struct soap*, const char*, int, const tt__PTZConfigurationOptions2 *, const char*);
SOAP_FMAC3 tt__PTZConfigurationOptions2 * SOAP_FMAC4 soap_in_tt__PTZConfigurationOptions2(struct soap*, const char*, tt__PTZConfigurationOptions2 *, const char*);
SOAP_FMAC1 tt__PTZConfigurationOptions2 * SOAP_FMAC2 soap_instantiate_tt__PTZConfigurationOptions2(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZConfigurationOptions2 * soap_new_tt__PTZConfigurationOptions2(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZConfigurationOptions2(soap, n, NULL, NULL, NULL);
}

inline tt__PTZConfigurationOptions2 * soap_new_req_tt__PTZConfigurationOptions2(
	struct soap *soap)
{
	tt__PTZConfigurationOptions2 *_p = soap_new_tt__PTZConfigurationOptions2(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTZConfigurationOptions2 * soap_new_set_tt__PTZConfigurationOptions2(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__PTZConfigurationOptions2 *_p = soap_new_tt__PTZConfigurationOptions2(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZConfigurationOptions2::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__PTZConfigurationOptions2(struct soap *soap, tt__PTZConfigurationOptions2 const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZConfigurationOptions2", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZConfigurationOptions2 * SOAP_FMAC4 soap_get_tt__PTZConfigurationOptions2(struct soap*, tt__PTZConfigurationOptions2 *, const char*, const char*);

inline int soap_read_tt__PTZConfigurationOptions2(struct soap *soap, tt__PTZConfigurationOptions2 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__PTZConfigurationOptions2(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__PTZConfigurationOptions_DEFINED
#define SOAP_TYPE_tt__PTZConfigurationOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZConfigurationOptions(struct soap*, const char*, int, const tt__PTZConfigurationOptions *, const char*);
SOAP_FMAC3 tt__PTZConfigurationOptions * SOAP_FMAC4 soap_in_tt__PTZConfigurationOptions(struct soap*, const char*, tt__PTZConfigurationOptions *, const char*);
SOAP_FMAC1 tt__PTZConfigurationOptions * SOAP_FMAC2 soap_instantiate_tt__PTZConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZConfigurationOptions * soap_new_tt__PTZConfigurationOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZConfigurationOptions(soap, n, NULL, NULL, NULL);
}

inline tt__PTZConfigurationOptions * soap_new_req_tt__PTZConfigurationOptions(
	struct soap *soap,
	tt__PTZSpaces *Spaces,
	tt__DurationRange *PTZTimeout)
{
	tt__PTZConfigurationOptions *_p = soap_new_tt__PTZConfigurationOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZConfigurationOptions::Spaces = Spaces;
		_p->tt__PTZConfigurationOptions::PTZTimeout = PTZTimeout;
	}
	return _p;
}

inline tt__PTZConfigurationOptions * soap_new_set_tt__PTZConfigurationOptions(
	struct soap *soap,
	tt__PTZSpaces *Spaces,
	tt__DurationRange *PTZTimeout,
	const std::vector<char *> & __any,
	tt__PTControlDirectionOptions *PTControlDirection,
	tt__PTZConfigurationOptions2 *Extension,
	std::string *PTZRamps,
	char *__anyAttribute,
	char *__item1)
{
	tt__PTZConfigurationOptions *_p = soap_new_tt__PTZConfigurationOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZConfigurationOptions::Spaces = Spaces;
		_p->tt__PTZConfigurationOptions::PTZTimeout = PTZTimeout;
		_p->tt__PTZConfigurationOptions::__any = __any;
		_p->tt__PTZConfigurationOptions::PTControlDirection = PTControlDirection;
		_p->tt__PTZConfigurationOptions::Extension = Extension;
		_p->tt__PTZConfigurationOptions::PTZRamps = PTZRamps;
		_p->tt__PTZConfigurationOptions::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__PTZConfigurationOptions(struct soap *soap, tt__PTZConfigurationOptions const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZConfigurationOptions", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZConfigurationOptions * SOAP_FMAC4 soap_get_tt__PTZConfigurationOptions(struct soap*, tt__PTZConfigurationOptions *, const char*, const char*);

inline int soap_read_tt__PTZConfigurationOptions(struct soap *soap, tt__PTZConfigurationOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__PTZConfigurationOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__Reverse_DEFINED
#define SOAP_TYPE_tt__Reverse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Reverse(struct soap*, const char*, int, const tt__Reverse *, const char*);
SOAP_FMAC3 tt__Reverse * SOAP_FMAC4 soap_in_tt__Reverse(struct soap*, const char*, tt__Reverse *, const char*);
SOAP_FMAC1 tt__Reverse * SOAP_FMAC2 soap_instantiate_tt__Reverse(struct soap*, int, const char*, const char*, size_t*);

inline tt__Reverse * soap_new_tt__Reverse(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Reverse(soap, n, NULL, NULL, NULL);
}

inline tt__Reverse * soap_new_req_tt__Reverse(
	struct soap *soap,
	enum tt__ReverseMode Mode)
{
	tt__Reverse *_p = soap_new_tt__Reverse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Reverse::Mode = Mode;
	}
	return _p;
}

inline tt__Reverse * soap_new_set_tt__Reverse(
	struct soap *soap,
	enum tt__ReverseMode Mode,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__Reverse *_p = soap_new_tt__Reverse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Reverse::Mode = Mode;
		_p->tt__Reverse::__any = __any;
		_p->tt__Reverse::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__Reverse(struct soap *soap, tt__Reverse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Reverse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__Reverse * SOAP_FMAC4 soap_get_tt__Reverse(struct soap*, tt__Reverse *, const char*, const char*);

inline int soap_read_tt__Reverse(struct soap *soap, tt__Reverse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__Reverse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__EFlip_DEFINED
#define SOAP_TYPE_tt__EFlip_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__EFlip(struct soap*, const char*, int, const tt__EFlip *, const char*);
SOAP_FMAC3 tt__EFlip * SOAP_FMAC4 soap_in_tt__EFlip(struct soap*, const char*, tt__EFlip *, const char*);
SOAP_FMAC1 tt__EFlip * SOAP_FMAC2 soap_instantiate_tt__EFlip(struct soap*, int, const char*, const char*, size_t*);

inline tt__EFlip * soap_new_tt__EFlip(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__EFlip(soap, n, NULL, NULL, NULL);
}

inline tt__EFlip * soap_new_req_tt__EFlip(
	struct soap *soap,
	enum tt__EFlipMode Mode)
{
	tt__EFlip *_p = soap_new_tt__EFlip(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__EFlip::Mode = Mode;
	}
	return _p;
}

inline tt__EFlip * soap_new_set_tt__EFlip(
	struct soap *soap,
	enum tt__EFlipMode Mode,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__EFlip *_p = soap_new_tt__EFlip(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__EFlip::Mode = Mode;
		_p->tt__EFlip::__any = __any;
		_p->tt__EFlip::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__EFlip(struct soap *soap, tt__EFlip const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:EFlip", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__EFlip * SOAP_FMAC4 soap_get_tt__EFlip(struct soap*, tt__EFlip *, const char*, const char*);

inline int soap_read_tt__EFlip(struct soap *soap, tt__EFlip *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__EFlip(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__PTControlDirectionExtension_DEFINED
#define SOAP_TYPE_tt__PTControlDirectionExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTControlDirectionExtension(struct soap*, const char*, int, const tt__PTControlDirectionExtension *, const char*);
SOAP_FMAC3 tt__PTControlDirectionExtension * SOAP_FMAC4 soap_in_tt__PTControlDirectionExtension(struct soap*, const char*, tt__PTControlDirectionExtension *, const char*);
SOAP_FMAC1 tt__PTControlDirectionExtension * SOAP_FMAC2 soap_instantiate_tt__PTControlDirectionExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTControlDirectionExtension * soap_new_tt__PTControlDirectionExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTControlDirectionExtension(soap, n, NULL, NULL, NULL);
}

inline tt__PTControlDirectionExtension * soap_new_req_tt__PTControlDirectionExtension(
	struct soap *soap)
{
	tt__PTControlDirectionExtension *_p = soap_new_tt__PTControlDirectionExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTControlDirectionExtension * soap_new_set_tt__PTControlDirectionExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__PTControlDirectionExtension *_p = soap_new_tt__PTControlDirectionExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTControlDirectionExtension::__any = __any;
		_p->tt__PTControlDirectionExtension::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__PTControlDirectionExtension(struct soap *soap, tt__PTControlDirectionExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTControlDirectionExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTControlDirectionExtension * SOAP_FMAC4 soap_get_tt__PTControlDirectionExtension(struct soap*, tt__PTControlDirectionExtension *, const char*, const char*);

inline int soap_read_tt__PTControlDirectionExtension(struct soap *soap, tt__PTControlDirectionExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__PTControlDirectionExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__PTControlDirection_DEFINED
#define SOAP_TYPE_tt__PTControlDirection_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTControlDirection(struct soap*, const char*, int, const tt__PTControlDirection *, const char*);
SOAP_FMAC3 tt__PTControlDirection * SOAP_FMAC4 soap_in_tt__PTControlDirection(struct soap*, const char*, tt__PTControlDirection *, const char*);
SOAP_FMAC1 tt__PTControlDirection * SOAP_FMAC2 soap_instantiate_tt__PTControlDirection(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTControlDirection * soap_new_tt__PTControlDirection(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTControlDirection(soap, n, NULL, NULL, NULL);
}

inline tt__PTControlDirection * soap_new_req_tt__PTControlDirection(
	struct soap *soap)
{
	tt__PTControlDirection *_p = soap_new_tt__PTControlDirection(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTControlDirection * soap_new_set_tt__PTControlDirection(
	struct soap *soap,
	tt__EFlip *EFlip,
	tt__Reverse *Reverse,
	tt__PTControlDirectionExtension *Extension,
	char *__anyAttribute,
	char *__item1)
{
	tt__PTControlDirection *_p = soap_new_tt__PTControlDirection(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTControlDirection::EFlip = EFlip;
		_p->tt__PTControlDirection::Reverse = Reverse;
		_p->tt__PTControlDirection::Extension = Extension;
		_p->tt__PTControlDirection::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__PTControlDirection(struct soap *soap, tt__PTControlDirection const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTControlDirection", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTControlDirection * SOAP_FMAC4 soap_get_tt__PTControlDirection(struct soap*, tt__PTControlDirection *, const char*, const char*);

inline int soap_read_tt__PTControlDirection(struct soap *soap, tt__PTControlDirection *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__PTControlDirection(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__PTZConfigurationExtension2_DEFINED
#define SOAP_TYPE_tt__PTZConfigurationExtension2_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZConfigurationExtension2(struct soap*, const char*, int, const tt__PTZConfigurationExtension2 *, const char*);
SOAP_FMAC3 tt__PTZConfigurationExtension2 * SOAP_FMAC4 soap_in_tt__PTZConfigurationExtension2(struct soap*, const char*, tt__PTZConfigurationExtension2 *, const char*);
SOAP_FMAC1 tt__PTZConfigurationExtension2 * SOAP_FMAC2 soap_instantiate_tt__PTZConfigurationExtension2(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZConfigurationExtension2 * soap_new_tt__PTZConfigurationExtension2(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZConfigurationExtension2(soap, n, NULL, NULL, NULL);
}

inline tt__PTZConfigurationExtension2 * soap_new_req_tt__PTZConfigurationExtension2(
	struct soap *soap)
{
	tt__PTZConfigurationExtension2 *_p = soap_new_tt__PTZConfigurationExtension2(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTZConfigurationExtension2 * soap_new_set_tt__PTZConfigurationExtension2(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__PTZConfigurationExtension2 *_p = soap_new_tt__PTZConfigurationExtension2(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZConfigurationExtension2::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__PTZConfigurationExtension2(struct soap *soap, tt__PTZConfigurationExtension2 const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZConfigurationExtension2", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZConfigurationExtension2 * SOAP_FMAC4 soap_get_tt__PTZConfigurationExtension2(struct soap*, tt__PTZConfigurationExtension2 *, const char*, const char*);

inline int soap_read_tt__PTZConfigurationExtension2(struct soap *soap, tt__PTZConfigurationExtension2 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__PTZConfigurationExtension2(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__PTZConfigurationExtension_DEFINED
#define SOAP_TYPE_tt__PTZConfigurationExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZConfigurationExtension(struct soap*, const char*, int, const tt__PTZConfigurationExtension *, const char*);
SOAP_FMAC3 tt__PTZConfigurationExtension * SOAP_FMAC4 soap_in_tt__PTZConfigurationExtension(struct soap*, const char*, tt__PTZConfigurationExtension *, const char*);
SOAP_FMAC1 tt__PTZConfigurationExtension * SOAP_FMAC2 soap_instantiate_tt__PTZConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZConfigurationExtension * soap_new_tt__PTZConfigurationExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZConfigurationExtension(soap, n, NULL, NULL, NULL);
}

inline tt__PTZConfigurationExtension * soap_new_req_tt__PTZConfigurationExtension(
	struct soap *soap)
{
	tt__PTZConfigurationExtension *_p = soap_new_tt__PTZConfigurationExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTZConfigurationExtension * soap_new_set_tt__PTZConfigurationExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	tt__PTControlDirection *PTControlDirection,
	tt__PTZConfigurationExtension2 *Extension,
	char *__item1)
{
	tt__PTZConfigurationExtension *_p = soap_new_tt__PTZConfigurationExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZConfigurationExtension::__any = __any;
		_p->tt__PTZConfigurationExtension::PTControlDirection = PTControlDirection;
		_p->tt__PTZConfigurationExtension::Extension = Extension;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__PTZConfigurationExtension(struct soap *soap, tt__PTZConfigurationExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZConfigurationExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZConfigurationExtension * SOAP_FMAC4 soap_get_tt__PTZConfigurationExtension(struct soap*, tt__PTZConfigurationExtension *, const char*, const char*);

inline int soap_read_tt__PTZConfigurationExtension(struct soap *soap, tt__PTZConfigurationExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__PTZConfigurationExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__PTZConfiguration_DEFINED
#define SOAP_TYPE_tt__PTZConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZConfiguration(struct soap*, const char*, int, const tt__PTZConfiguration *, const char*);
SOAP_FMAC3 tt__PTZConfiguration * SOAP_FMAC4 soap_in_tt__PTZConfiguration(struct soap*, const char*, tt__PTZConfiguration *, const char*);
SOAP_FMAC1 tt__PTZConfiguration * SOAP_FMAC2 soap_instantiate_tt__PTZConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZConfiguration * soap_new_tt__PTZConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZConfiguration(soap, n, NULL, NULL, NULL);
}

inline tt__PTZConfiguration * soap_new_req_tt__PTZConfiguration(
	struct soap *soap,
	const std::string& NodeToken,
	const std::string& Name1,
	int UseCount1,
	const std::string& token1)
{
	tt__PTZConfiguration *_p = soap_new_tt__PTZConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZConfiguration::NodeToken = NodeToken;
		_p->tt__ConfigurationEntity::Name = Name1;
		_p->tt__ConfigurationEntity::UseCount = UseCount1;
		_p->tt__ConfigurationEntity::token = token1;
	}
	return _p;
}

inline tt__PTZConfiguration * soap_new_set_tt__PTZConfiguration(
	struct soap *soap,
	const std::string& NodeToken,
	std::string *DefaultAbsolutePantTiltPositionSpace,
	std::string *DefaultAbsoluteZoomPositionSpace,
	std::string *DefaultRelativePanTiltTranslationSpace,
	std::string *DefaultRelativeZoomTranslationSpace,
	std::string *DefaultContinuousPanTiltVelocitySpace,
	std::string *DefaultContinuousZoomVelocitySpace,
	tt__PTZSpeed *DefaultPTZSpeed,
	LONG64 *DefaultPTZTimeout,
	tt__PanTiltLimits *PanTiltLimits,
	tt__ZoomLimits *ZoomLimits,
	tt__PTZConfigurationExtension *Extension,
	int *MoveRamp,
	int *PresetRamp,
	int *PresetTourRamp,
	char *__anyAttribute,
	const std::string& Name1,
	int UseCount1,
	const std::string& token1,
	char *__item2)
{
	tt__PTZConfiguration *_p = soap_new_tt__PTZConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZConfiguration::NodeToken = NodeToken;
		_p->tt__PTZConfiguration::DefaultAbsolutePantTiltPositionSpace = DefaultAbsolutePantTiltPositionSpace;
		_p->tt__PTZConfiguration::DefaultAbsoluteZoomPositionSpace = DefaultAbsoluteZoomPositionSpace;
		_p->tt__PTZConfiguration::DefaultRelativePanTiltTranslationSpace = DefaultRelativePanTiltTranslationSpace;
		_p->tt__PTZConfiguration::DefaultRelativeZoomTranslationSpace = DefaultRelativeZoomTranslationSpace;
		_p->tt__PTZConfiguration::DefaultContinuousPanTiltVelocitySpace = DefaultContinuousPanTiltVelocitySpace;
		_p->tt__PTZConfiguration::DefaultContinuousZoomVelocitySpace = DefaultContinuousZoomVelocitySpace;
		_p->tt__PTZConfiguration::DefaultPTZSpeed = DefaultPTZSpeed;
		_p->tt__PTZConfiguration::DefaultPTZTimeout = DefaultPTZTimeout;
		_p->tt__PTZConfiguration::PanTiltLimits = PanTiltLimits;
		_p->tt__PTZConfiguration::ZoomLimits = ZoomLimits;
		_p->tt__PTZConfiguration::Extension = Extension;
		_p->tt__PTZConfiguration::MoveRamp = MoveRamp;
		_p->tt__PTZConfiguration::PresetRamp = PresetRamp;
		_p->tt__PTZConfiguration::PresetTourRamp = PresetTourRamp;
		_p->tt__PTZConfiguration::__anyAttribute = __anyAttribute;
		_p->tt__ConfigurationEntity::Name = Name1;
		_p->tt__ConfigurationEntity::UseCount = UseCount1;
		_p->tt__ConfigurationEntity::token = token1;
		_p->xsd__anyType::__item = __item2;
	}
	return _p;
}

inline int soap_write_tt__PTZConfiguration(struct soap *soap, tt__PTZConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZConfiguration * SOAP_FMAC4 soap_get_tt__PTZConfiguration(struct soap*, tt__PTZConfiguration *, const char*, const char*);

inline int soap_read_tt__PTZConfiguration(struct soap *soap, tt__PTZConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__PTZConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourSupportedExtension_DEFINED
#define SOAP_TYPE_tt__PTZPresetTourSupportedExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourSupportedExtension(struct soap*, const char*, int, const tt__PTZPresetTourSupportedExtension *, const char*);
SOAP_FMAC3 tt__PTZPresetTourSupportedExtension * SOAP_FMAC4 soap_in_tt__PTZPresetTourSupportedExtension(struct soap*, const char*, tt__PTZPresetTourSupportedExtension *, const char*);
SOAP_FMAC1 tt__PTZPresetTourSupportedExtension * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourSupportedExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZPresetTourSupportedExtension * soap_new_tt__PTZPresetTourSupportedExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZPresetTourSupportedExtension(soap, n, NULL, NULL, NULL);
}

inline tt__PTZPresetTourSupportedExtension * soap_new_req_tt__PTZPresetTourSupportedExtension(
	struct soap *soap)
{
	tt__PTZPresetTourSupportedExtension *_p = soap_new_tt__PTZPresetTourSupportedExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTZPresetTourSupportedExtension * soap_new_set_tt__PTZPresetTourSupportedExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__PTZPresetTourSupportedExtension *_p = soap_new_tt__PTZPresetTourSupportedExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZPresetTourSupportedExtension::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__PTZPresetTourSupportedExtension(struct soap *soap, tt__PTZPresetTourSupportedExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourSupportedExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZPresetTourSupportedExtension * SOAP_FMAC4 soap_get_tt__PTZPresetTourSupportedExtension(struct soap*, tt__PTZPresetTourSupportedExtension *, const char*, const char*);

inline int soap_read_tt__PTZPresetTourSupportedExtension(struct soap *soap, tt__PTZPresetTourSupportedExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__PTZPresetTourSupportedExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourSupported_DEFINED
#define SOAP_TYPE_tt__PTZPresetTourSupported_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourSupported(struct soap*, const char*, int, const tt__PTZPresetTourSupported *, const char*);
SOAP_FMAC3 tt__PTZPresetTourSupported * SOAP_FMAC4 soap_in_tt__PTZPresetTourSupported(struct soap*, const char*, tt__PTZPresetTourSupported *, const char*);
SOAP_FMAC1 tt__PTZPresetTourSupported * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourSupported(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZPresetTourSupported * soap_new_tt__PTZPresetTourSupported(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZPresetTourSupported(soap, n, NULL, NULL, NULL);
}

inline tt__PTZPresetTourSupported * soap_new_req_tt__PTZPresetTourSupported(
	struct soap *soap,
	int MaximumNumberOfPresetTours)
{
	tt__PTZPresetTourSupported *_p = soap_new_tt__PTZPresetTourSupported(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZPresetTourSupported::MaximumNumberOfPresetTours = MaximumNumberOfPresetTours;
	}
	return _p;
}

inline tt__PTZPresetTourSupported * soap_new_set_tt__PTZPresetTourSupported(
	struct soap *soap,
	int MaximumNumberOfPresetTours,
	const std::vector<enum tt__PTZPresetTourOperation> & PTZPresetTourOperation,
	tt__PTZPresetTourSupportedExtension *Extension,
	char *__anyAttribute,
	char *__item1)
{
	tt__PTZPresetTourSupported *_p = soap_new_tt__PTZPresetTourSupported(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZPresetTourSupported::MaximumNumberOfPresetTours = MaximumNumberOfPresetTours;
		_p->tt__PTZPresetTourSupported::PTZPresetTourOperation = PTZPresetTourOperation;
		_p->tt__PTZPresetTourSupported::Extension = Extension;
		_p->tt__PTZPresetTourSupported::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__PTZPresetTourSupported(struct soap *soap, tt__PTZPresetTourSupported const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourSupported", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZPresetTourSupported * SOAP_FMAC4 soap_get_tt__PTZPresetTourSupported(struct soap*, tt__PTZPresetTourSupported *, const char*, const char*);

inline int soap_read_tt__PTZPresetTourSupported(struct soap *soap, tt__PTZPresetTourSupported *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__PTZPresetTourSupported(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__PTZNodeExtension2_DEFINED
#define SOAP_TYPE_tt__PTZNodeExtension2_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZNodeExtension2(struct soap*, const char*, int, const tt__PTZNodeExtension2 *, const char*);
SOAP_FMAC3 tt__PTZNodeExtension2 * SOAP_FMAC4 soap_in_tt__PTZNodeExtension2(struct soap*, const char*, tt__PTZNodeExtension2 *, const char*);
SOAP_FMAC1 tt__PTZNodeExtension2 * SOAP_FMAC2 soap_instantiate_tt__PTZNodeExtension2(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZNodeExtension2 * soap_new_tt__PTZNodeExtension2(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZNodeExtension2(soap, n, NULL, NULL, NULL);
}

inline tt__PTZNodeExtension2 * soap_new_req_tt__PTZNodeExtension2(
	struct soap *soap)
{
	tt__PTZNodeExtension2 *_p = soap_new_tt__PTZNodeExtension2(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTZNodeExtension2 * soap_new_set_tt__PTZNodeExtension2(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__PTZNodeExtension2 *_p = soap_new_tt__PTZNodeExtension2(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZNodeExtension2::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__PTZNodeExtension2(struct soap *soap, tt__PTZNodeExtension2 const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZNodeExtension2", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZNodeExtension2 * SOAP_FMAC4 soap_get_tt__PTZNodeExtension2(struct soap*, tt__PTZNodeExtension2 *, const char*, const char*);

inline int soap_read_tt__PTZNodeExtension2(struct soap *soap, tt__PTZNodeExtension2 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__PTZNodeExtension2(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__PTZNodeExtension_DEFINED
#define SOAP_TYPE_tt__PTZNodeExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZNodeExtension(struct soap*, const char*, int, const tt__PTZNodeExtension *, const char*);
SOAP_FMAC3 tt__PTZNodeExtension * SOAP_FMAC4 soap_in_tt__PTZNodeExtension(struct soap*, const char*, tt__PTZNodeExtension *, const char*);
SOAP_FMAC1 tt__PTZNodeExtension * SOAP_FMAC2 soap_instantiate_tt__PTZNodeExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZNodeExtension * soap_new_tt__PTZNodeExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZNodeExtension(soap, n, NULL, NULL, NULL);
}

inline tt__PTZNodeExtension * soap_new_req_tt__PTZNodeExtension(
	struct soap *soap)
{
	tt__PTZNodeExtension *_p = soap_new_tt__PTZNodeExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTZNodeExtension * soap_new_set_tt__PTZNodeExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	tt__PTZPresetTourSupported *SupportedPresetTour,
	tt__PTZNodeExtension2 *Extension,
	char *__item1)
{
	tt__PTZNodeExtension *_p = soap_new_tt__PTZNodeExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZNodeExtension::__any = __any;
		_p->tt__PTZNodeExtension::SupportedPresetTour = SupportedPresetTour;
		_p->tt__PTZNodeExtension::Extension = Extension;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__PTZNodeExtension(struct soap *soap, tt__PTZNodeExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZNodeExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZNodeExtension * SOAP_FMAC4 soap_get_tt__PTZNodeExtension(struct soap*, tt__PTZNodeExtension *, const char*, const char*);

inline int soap_read_tt__PTZNodeExtension(struct soap *soap, tt__PTZNodeExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__PTZNodeExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__PTZNode_DEFINED
#define SOAP_TYPE_tt__PTZNode_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZNode(struct soap*, const char*, int, const tt__PTZNode *, const char*);
SOAP_FMAC3 tt__PTZNode * SOAP_FMAC4 soap_in_tt__PTZNode(struct soap*, const char*, tt__PTZNode *, const char*);
SOAP_FMAC1 tt__PTZNode * SOAP_FMAC2 soap_instantiate_tt__PTZNode(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZNode * soap_new_tt__PTZNode(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZNode(soap, n, NULL, NULL, NULL);
}

inline tt__PTZNode * soap_new_req_tt__PTZNode(
	struct soap *soap,
	tt__PTZSpaces *SupportedPTZSpaces,
	int MaximumNumberOfPresets,
	bool HomeSupported,
	const std::string& token1)
{
	tt__PTZNode *_p = soap_new_tt__PTZNode(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZNode::SupportedPTZSpaces = SupportedPTZSpaces;
		_p->tt__PTZNode::MaximumNumberOfPresets = MaximumNumberOfPresets;
		_p->tt__PTZNode::HomeSupported = HomeSupported;
		_p->tt__DeviceEntity::token = token1;
	}
	return _p;
}

inline tt__PTZNode * soap_new_set_tt__PTZNode(
	struct soap *soap,
	std::string *Name,
	tt__PTZSpaces *SupportedPTZSpaces,
	int MaximumNumberOfPresets,
	bool HomeSupported,
	const std::vector<std::string> & AuxiliaryCommands,
	tt__PTZNodeExtension *Extension,
	bool *FixedHomePosition,
	char *__anyAttribute,
	const std::string& token1,
	char *__item2)
{
	tt__PTZNode *_p = soap_new_tt__PTZNode(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZNode::Name = Name;
		_p->tt__PTZNode::SupportedPTZSpaces = SupportedPTZSpaces;
		_p->tt__PTZNode::MaximumNumberOfPresets = MaximumNumberOfPresets;
		_p->tt__PTZNode::HomeSupported = HomeSupported;
		_p->tt__PTZNode::AuxiliaryCommands = AuxiliaryCommands;
		_p->tt__PTZNode::Extension = Extension;
		_p->tt__PTZNode::FixedHomePosition = FixedHomePosition;
		_p->tt__PTZNode::__anyAttribute = __anyAttribute;
		_p->tt__DeviceEntity::token = token1;
		_p->xsd__anyType::__item = __item2;
	}
	return _p;
}

inline int soap_write_tt__PTZNode(struct soap *soap, tt__PTZNode const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZNode", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZNode * SOAP_FMAC4 soap_get_tt__PTZNode(struct soap*, tt__PTZNode *, const char*, const char*);

inline int soap_read_tt__PTZNode(struct soap *soap, tt__PTZNode *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__PTZNode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__DigitalInput_DEFINED
#define SOAP_TYPE_tt__DigitalInput_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__DigitalInput(struct soap*, const char*, int, const tt__DigitalInput *, const char*);
SOAP_FMAC3 tt__DigitalInput * SOAP_FMAC4 soap_in_tt__DigitalInput(struct soap*, const char*, tt__DigitalInput *, const char*);
SOAP_FMAC1 tt__DigitalInput * SOAP_FMAC2 soap_instantiate_tt__DigitalInput(struct soap*, int, const char*, const char*, size_t*);

inline tt__DigitalInput * soap_new_tt__DigitalInput(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__DigitalInput(soap, n, NULL, NULL, NULL);
}

inline tt__DigitalInput * soap_new_req_tt__DigitalInput(
	struct soap *soap,
	const std::string& token1)
{
	tt__DigitalInput *_p = soap_new_tt__DigitalInput(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__DeviceEntity::token = token1;
	}
	return _p;
}

inline tt__DigitalInput * soap_new_set_tt__DigitalInput(
	struct soap *soap,
	const std::vector<char *> & __any,
	enum tt__DigitalIdleState *IdleState,
	char *__anyAttribute,
	const std::string& token1,
	char *__item2)
{
	tt__DigitalInput *_p = soap_new_tt__DigitalInput(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__DigitalInput::__any = __any;
		_p->tt__DigitalInput::IdleState = IdleState;
		_p->tt__DigitalInput::__anyAttribute = __anyAttribute;
		_p->tt__DeviceEntity::token = token1;
		_p->xsd__anyType::__item = __item2;
	}
	return _p;
}

inline int soap_write_tt__DigitalInput(struct soap *soap, tt__DigitalInput const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:DigitalInput", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__DigitalInput * SOAP_FMAC4 soap_get_tt__DigitalInput(struct soap*, tt__DigitalInput *, const char*, const char*);

inline int soap_read_tt__DigitalInput(struct soap *soap, tt__DigitalInput *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__DigitalInput(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__RelayOutput_DEFINED
#define SOAP_TYPE_tt__RelayOutput_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RelayOutput(struct soap*, const char*, int, const tt__RelayOutput *, const char*);
SOAP_FMAC3 tt__RelayOutput * SOAP_FMAC4 soap_in_tt__RelayOutput(struct soap*, const char*, tt__RelayOutput *, const char*);
SOAP_FMAC1 tt__RelayOutput * SOAP_FMAC2 soap_instantiate_tt__RelayOutput(struct soap*, int, const char*, const char*, size_t*);

inline tt__RelayOutput * soap_new_tt__RelayOutput(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__RelayOutput(soap, n, NULL, NULL, NULL);
}

inline tt__RelayOutput * soap_new_req_tt__RelayOutput(
	struct soap *soap,
	tt__RelayOutputSettings *Properties,
	const std::string& token1)
{
	tt__RelayOutput *_p = soap_new_tt__RelayOutput(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__RelayOutput::Properties = Properties;
		_p->tt__DeviceEntity::token = token1;
	}
	return _p;
}

inline tt__RelayOutput * soap_new_set_tt__RelayOutput(
	struct soap *soap,
	tt__RelayOutputSettings *Properties,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	const std::string& token1,
	char *__item2)
{
	tt__RelayOutput *_p = soap_new_tt__RelayOutput(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__RelayOutput::Properties = Properties;
		_p->tt__RelayOutput::__any = __any;
		_p->tt__RelayOutput::__anyAttribute = __anyAttribute;
		_p->tt__DeviceEntity::token = token1;
		_p->xsd__anyType::__item = __item2;
	}
	return _p;
}

inline int soap_write_tt__RelayOutput(struct soap *soap, tt__RelayOutput const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:RelayOutput", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__RelayOutput * SOAP_FMAC4 soap_get_tt__RelayOutput(struct soap*, tt__RelayOutput *, const char*, const char*);

inline int soap_read_tt__RelayOutput(struct soap *soap, tt__RelayOutput *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__RelayOutput(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__RelayOutputSettings_DEFINED
#define SOAP_TYPE_tt__RelayOutputSettings_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RelayOutputSettings(struct soap*, const char*, int, const tt__RelayOutputSettings *, const char*);
SOAP_FMAC3 tt__RelayOutputSettings * SOAP_FMAC4 soap_in_tt__RelayOutputSettings(struct soap*, const char*, tt__RelayOutputSettings *, const char*);
SOAP_FMAC1 tt__RelayOutputSettings * SOAP_FMAC2 soap_instantiate_tt__RelayOutputSettings(struct soap*, int, const char*, const char*, size_t*);

inline tt__RelayOutputSettings * soap_new_tt__RelayOutputSettings(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__RelayOutputSettings(soap, n, NULL, NULL, NULL);
}

inline tt__RelayOutputSettings * soap_new_req_tt__RelayOutputSettings(
	struct soap *soap,
	enum tt__RelayMode Mode,
	LONG64 DelayTime,
	enum tt__RelayIdleState IdleState)
{
	tt__RelayOutputSettings *_p = soap_new_tt__RelayOutputSettings(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__RelayOutputSettings::Mode = Mode;
		_p->tt__RelayOutputSettings::DelayTime = DelayTime;
		_p->tt__RelayOutputSettings::IdleState = IdleState;
	}
	return _p;
}

inline tt__RelayOutputSettings * soap_new_set_tt__RelayOutputSettings(
	struct soap *soap,
	enum tt__RelayMode Mode,
	LONG64 DelayTime,
	enum tt__RelayIdleState IdleState,
	char *__item1)
{
	tt__RelayOutputSettings *_p = soap_new_tt__RelayOutputSettings(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__RelayOutputSettings::Mode = Mode;
		_p->tt__RelayOutputSettings::DelayTime = DelayTime;
		_p->tt__RelayOutputSettings::IdleState = IdleState;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__RelayOutputSettings(struct soap *soap, tt__RelayOutputSettings const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:RelayOutputSettings", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__RelayOutputSettings * SOAP_FMAC4 soap_get_tt__RelayOutputSettings(struct soap*, tt__RelayOutputSettings *, const char*, const char*);

inline int soap_read_tt__RelayOutputSettings(struct soap *soap, tt__RelayOutputSettings *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__RelayOutputSettings(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__GenericEapPwdConfigurationExtension_DEFINED
#define SOAP_TYPE_tt__GenericEapPwdConfigurationExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__GenericEapPwdConfigurationExtension(struct soap*, const char*, int, const tt__GenericEapPwdConfigurationExtension *, const char*);
SOAP_FMAC3 tt__GenericEapPwdConfigurationExtension * SOAP_FMAC4 soap_in_tt__GenericEapPwdConfigurationExtension(struct soap*, const char*, tt__GenericEapPwdConfigurationExtension *, const char*);
SOAP_FMAC1 tt__GenericEapPwdConfigurationExtension * SOAP_FMAC2 soap_instantiate_tt__GenericEapPwdConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__GenericEapPwdConfigurationExtension * soap_new_tt__GenericEapPwdConfigurationExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__GenericEapPwdConfigurationExtension(soap, n, NULL, NULL, NULL);
}

inline tt__GenericEapPwdConfigurationExtension * soap_new_req_tt__GenericEapPwdConfigurationExtension(
	struct soap *soap)
{
	tt__GenericEapPwdConfigurationExtension *_p = soap_new_tt__GenericEapPwdConfigurationExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__GenericEapPwdConfigurationExtension * soap_new_set_tt__GenericEapPwdConfigurationExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__GenericEapPwdConfigurationExtension *_p = soap_new_tt__GenericEapPwdConfigurationExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__GenericEapPwdConfigurationExtension::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__GenericEapPwdConfigurationExtension(struct soap *soap, tt__GenericEapPwdConfigurationExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:GenericEapPwdConfigurationExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__GenericEapPwdConfigurationExtension * SOAP_FMAC4 soap_get_tt__GenericEapPwdConfigurationExtension(struct soap*, tt__GenericEapPwdConfigurationExtension *, const char*, const char*);

inline int soap_read_tt__GenericEapPwdConfigurationExtension(struct soap *soap, tt__GenericEapPwdConfigurationExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__GenericEapPwdConfigurationExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__TLSConfiguration_DEFINED
#define SOAP_TYPE_tt__TLSConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__TLSConfiguration(struct soap*, const char*, int, const tt__TLSConfiguration *, const char*);
SOAP_FMAC3 tt__TLSConfiguration * SOAP_FMAC4 soap_in_tt__TLSConfiguration(struct soap*, const char*, tt__TLSConfiguration *, const char*);
SOAP_FMAC1 tt__TLSConfiguration * SOAP_FMAC2 soap_instantiate_tt__TLSConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__TLSConfiguration * soap_new_tt__TLSConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__TLSConfiguration(soap, n, NULL, NULL, NULL);
}

inline tt__TLSConfiguration * soap_new_req_tt__TLSConfiguration(
	struct soap *soap,
	const std::string& CertificateID)
{
	tt__TLSConfiguration *_p = soap_new_tt__TLSConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__TLSConfiguration::CertificateID = CertificateID;
	}
	return _p;
}

inline tt__TLSConfiguration * soap_new_set_tt__TLSConfiguration(
	struct soap *soap,
	const std::string& CertificateID,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__TLSConfiguration *_p = soap_new_tt__TLSConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__TLSConfiguration::CertificateID = CertificateID;
		_p->tt__TLSConfiguration::__any = __any;
		_p->tt__TLSConfiguration::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__TLSConfiguration(struct soap *soap, tt__TLSConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:TLSConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__TLSConfiguration * SOAP_FMAC4 soap_get_tt__TLSConfiguration(struct soap*, tt__TLSConfiguration *, const char*, const char*);

inline int soap_read_tt__TLSConfiguration(struct soap *soap, tt__TLSConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__TLSConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__EapMethodExtension_DEFINED
#define SOAP_TYPE_tt__EapMethodExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__EapMethodExtension(struct soap*, const char*, int, const tt__EapMethodExtension *, const char*);
SOAP_FMAC3 tt__EapMethodExtension * SOAP_FMAC4 soap_in_tt__EapMethodExtension(struct soap*, const char*, tt__EapMethodExtension *, const char*);
SOAP_FMAC1 tt__EapMethodExtension * SOAP_FMAC2 soap_instantiate_tt__EapMethodExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__EapMethodExtension * soap_new_tt__EapMethodExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__EapMethodExtension(soap, n, NULL, NULL, NULL);
}

inline tt__EapMethodExtension * soap_new_req_tt__EapMethodExtension(
	struct soap *soap)
{
	tt__EapMethodExtension *_p = soap_new_tt__EapMethodExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__EapMethodExtension * soap_new_set_tt__EapMethodExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__EapMethodExtension *_p = soap_new_tt__EapMethodExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__EapMethodExtension::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__EapMethodExtension(struct soap *soap, tt__EapMethodExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:EapMethodExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__EapMethodExtension * SOAP_FMAC4 soap_get_tt__EapMethodExtension(struct soap*, tt__EapMethodExtension *, const char*, const char*);

inline int soap_read_tt__EapMethodExtension(struct soap *soap, tt__EapMethodExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__EapMethodExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__EAPMethodConfiguration_DEFINED
#define SOAP_TYPE_tt__EAPMethodConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__EAPMethodConfiguration(struct soap*, const char*, int, const tt__EAPMethodConfiguration *, const char*);
SOAP_FMAC3 tt__EAPMethodConfiguration * SOAP_FMAC4 soap_in_tt__EAPMethodConfiguration(struct soap*, const char*, tt__EAPMethodConfiguration *, const char*);
SOAP_FMAC1 tt__EAPMethodConfiguration * SOAP_FMAC2 soap_instantiate_tt__EAPMethodConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__EAPMethodConfiguration * soap_new_tt__EAPMethodConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__EAPMethodConfiguration(soap, n, NULL, NULL, NULL);
}

inline tt__EAPMethodConfiguration * soap_new_req_tt__EAPMethodConfiguration(
	struct soap *soap)
{
	tt__EAPMethodConfiguration *_p = soap_new_tt__EAPMethodConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__EAPMethodConfiguration * soap_new_set_tt__EAPMethodConfiguration(
	struct soap *soap,
	tt__TLSConfiguration *TLSConfiguration,
	std::string *Password,
	tt__EapMethodExtension *Extension,
	char *__anyAttribute,
	char *__item1)
{
	tt__EAPMethodConfiguration *_p = soap_new_tt__EAPMethodConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__EAPMethodConfiguration::TLSConfiguration = TLSConfiguration;
		_p->tt__EAPMethodConfiguration::Password = Password;
		_p->tt__EAPMethodConfiguration::Extension = Extension;
		_p->tt__EAPMethodConfiguration::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__EAPMethodConfiguration(struct soap *soap, tt__EAPMethodConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:EAPMethodConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__EAPMethodConfiguration * SOAP_FMAC4 soap_get_tt__EAPMethodConfiguration(struct soap*, tt__EAPMethodConfiguration *, const char*, const char*);

inline int soap_read_tt__EAPMethodConfiguration(struct soap *soap, tt__EAPMethodConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__EAPMethodConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__Dot1XConfigurationExtension_DEFINED
#define SOAP_TYPE_tt__Dot1XConfigurationExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Dot1XConfigurationExtension(struct soap*, const char*, int, const tt__Dot1XConfigurationExtension *, const char*);
SOAP_FMAC3 tt__Dot1XConfigurationExtension * SOAP_FMAC4 soap_in_tt__Dot1XConfigurationExtension(struct soap*, const char*, tt__Dot1XConfigurationExtension *, const char*);
SOAP_FMAC1 tt__Dot1XConfigurationExtension * SOAP_FMAC2 soap_instantiate_tt__Dot1XConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__Dot1XConfigurationExtension * soap_new_tt__Dot1XConfigurationExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Dot1XConfigurationExtension(soap, n, NULL, NULL, NULL);
}

inline tt__Dot1XConfigurationExtension * soap_new_req_tt__Dot1XConfigurationExtension(
	struct soap *soap)
{
	tt__Dot1XConfigurationExtension *_p = soap_new_tt__Dot1XConfigurationExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__Dot1XConfigurationExtension * soap_new_set_tt__Dot1XConfigurationExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__Dot1XConfigurationExtension *_p = soap_new_tt__Dot1XConfigurationExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Dot1XConfigurationExtension::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__Dot1XConfigurationExtension(struct soap *soap, tt__Dot1XConfigurationExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Dot1XConfigurationExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__Dot1XConfigurationExtension * SOAP_FMAC4 soap_get_tt__Dot1XConfigurationExtension(struct soap*, tt__Dot1XConfigurationExtension *, const char*, const char*);

inline int soap_read_tt__Dot1XConfigurationExtension(struct soap *soap, tt__Dot1XConfigurationExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__Dot1XConfigurationExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__Dot1XConfiguration_DEFINED
#define SOAP_TYPE_tt__Dot1XConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Dot1XConfiguration(struct soap*, const char*, int, const tt__Dot1XConfiguration *, const char*);
SOAP_FMAC3 tt__Dot1XConfiguration * SOAP_FMAC4 soap_in_tt__Dot1XConfiguration(struct soap*, const char*, tt__Dot1XConfiguration *, const char*);
SOAP_FMAC1 tt__Dot1XConfiguration * SOAP_FMAC2 soap_instantiate_tt__Dot1XConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__Dot1XConfiguration * soap_new_tt__Dot1XConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Dot1XConfiguration(soap, n, NULL, NULL, NULL);
}

inline tt__Dot1XConfiguration * soap_new_req_tt__Dot1XConfiguration(
	struct soap *soap,
	const std::string& Dot1XConfigurationToken,
	const std::string& Identity,
	int EAPMethod)
{
	tt__Dot1XConfiguration *_p = soap_new_tt__Dot1XConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Dot1XConfiguration::Dot1XConfigurationToken = Dot1XConfigurationToken;
		_p->tt__Dot1XConfiguration::Identity = Identity;
		_p->tt__Dot1XConfiguration::EAPMethod = EAPMethod;
	}
	return _p;
}

inline tt__Dot1XConfiguration * soap_new_set_tt__Dot1XConfiguration(
	struct soap *soap,
	const std::string& Dot1XConfigurationToken,
	const std::string& Identity,
	std::string *AnonymousID,
	int EAPMethod,
	const std::vector<std::string> & CACertificateID,
	tt__EAPMethodConfiguration *EAPMethodConfiguration,
	tt__Dot1XConfigurationExtension *Extension,
	char *__anyAttribute,
	char *__item1)
{
	tt__Dot1XConfiguration *_p = soap_new_tt__Dot1XConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Dot1XConfiguration::Dot1XConfigurationToken = Dot1XConfigurationToken;
		_p->tt__Dot1XConfiguration::Identity = Identity;
		_p->tt__Dot1XConfiguration::AnonymousID = AnonymousID;
		_p->tt__Dot1XConfiguration::EAPMethod = EAPMethod;
		_p->tt__Dot1XConfiguration::CACertificateID = CACertificateID;
		_p->tt__Dot1XConfiguration::EAPMethodConfiguration = EAPMethodConfiguration;
		_p->tt__Dot1XConfiguration::Extension = Extension;
		_p->tt__Dot1XConfiguration::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__Dot1XConfiguration(struct soap *soap, tt__Dot1XConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Dot1XConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__Dot1XConfiguration * SOAP_FMAC4 soap_get_tt__Dot1XConfiguration(struct soap*, tt__Dot1XConfiguration *, const char*, const char*);

inline int soap_read_tt__Dot1XConfiguration(struct soap *soap, tt__Dot1XConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__Dot1XConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__CertificateInformationExtension_DEFINED
#define SOAP_TYPE_tt__CertificateInformationExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__CertificateInformationExtension(struct soap*, const char*, int, const tt__CertificateInformationExtension *, const char*);
SOAP_FMAC3 tt__CertificateInformationExtension * SOAP_FMAC4 soap_in_tt__CertificateInformationExtension(struct soap*, const char*, tt__CertificateInformationExtension *, const char*);
SOAP_FMAC1 tt__CertificateInformationExtension * SOAP_FMAC2 soap_instantiate_tt__CertificateInformationExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__CertificateInformationExtension * soap_new_tt__CertificateInformationExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__CertificateInformationExtension(soap, n, NULL, NULL, NULL);
}

inline tt__CertificateInformationExtension * soap_new_req_tt__CertificateInformationExtension(
	struct soap *soap)
{
	tt__CertificateInformationExtension *_p = soap_new_tt__CertificateInformationExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__CertificateInformationExtension * soap_new_set_tt__CertificateInformationExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__CertificateInformationExtension *_p = soap_new_tt__CertificateInformationExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__CertificateInformationExtension::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__CertificateInformationExtension(struct soap *soap, tt__CertificateInformationExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:CertificateInformationExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__CertificateInformationExtension * SOAP_FMAC4 soap_get_tt__CertificateInformationExtension(struct soap*, tt__CertificateInformationExtension *, const char*, const char*);

inline int soap_read_tt__CertificateInformationExtension(struct soap *soap, tt__CertificateInformationExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__CertificateInformationExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__CertificateUsage_DEFINED
#define SOAP_TYPE_tt__CertificateUsage_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__CertificateUsage(struct soap*, const char*, int, const tt__CertificateUsage *, const char*);
SOAP_FMAC3 tt__CertificateUsage * SOAP_FMAC4 soap_in_tt__CertificateUsage(struct soap*, const char*, tt__CertificateUsage *, const char*);
SOAP_FMAC1 tt__CertificateUsage * SOAP_FMAC2 soap_instantiate_tt__CertificateUsage(struct soap*, int, const char*, const char*, size_t*);

inline tt__CertificateUsage * soap_new_tt__CertificateUsage(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__CertificateUsage(soap, n, NULL, NULL, NULL);
}

inline tt__CertificateUsage * soap_new_req_tt__CertificateUsage(
	struct soap *soap,
	const std::string& __item,
	bool Critical)
{
	tt__CertificateUsage *_p = soap_new_tt__CertificateUsage(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__CertificateUsage::__item = __item;
		_p->tt__CertificateUsage::Critical = Critical;
	}
	return _p;
}

inline tt__CertificateUsage * soap_new_set_tt__CertificateUsage(
	struct soap *soap,
	const std::string& __item,
	bool Critical,
	char *__item1)
{
	tt__CertificateUsage *_p = soap_new_tt__CertificateUsage(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__CertificateUsage::__item = __item;
		_p->tt__CertificateUsage::Critical = Critical;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__CertificateUsage(struct soap *soap, tt__CertificateUsage const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:CertificateUsage", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__CertificateUsage * SOAP_FMAC4 soap_get_tt__CertificateUsage(struct soap*, tt__CertificateUsage *, const char*, const char*);

inline int soap_read_tt__CertificateUsage(struct soap *soap, tt__CertificateUsage *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__CertificateUsage(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__CertificateInformation_DEFINED
#define SOAP_TYPE_tt__CertificateInformation_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__CertificateInformation(struct soap*, const char*, int, const tt__CertificateInformation *, const char*);
SOAP_FMAC3 tt__CertificateInformation * SOAP_FMAC4 soap_in_tt__CertificateInformation(struct soap*, const char*, tt__CertificateInformation *, const char*);
SOAP_FMAC1 tt__CertificateInformation * SOAP_FMAC2 soap_instantiate_tt__CertificateInformation(struct soap*, int, const char*, const char*, size_t*);

inline tt__CertificateInformation * soap_new_tt__CertificateInformation(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__CertificateInformation(soap, n, NULL, NULL, NULL);
}

inline tt__CertificateInformation * soap_new_req_tt__CertificateInformation(
	struct soap *soap,
	const std::string& CertificateID)
{
	tt__CertificateInformation *_p = soap_new_tt__CertificateInformation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__CertificateInformation::CertificateID = CertificateID;
	}
	return _p;
}

inline tt__CertificateInformation * soap_new_set_tt__CertificateInformation(
	struct soap *soap,
	const std::string& CertificateID,
	std::string *IssuerDN,
	std::string *SubjectDN,
	tt__CertificateUsage *KeyUsage,
	tt__CertificateUsage *ExtendedKeyUsage,
	int *KeyLength,
	std::string *Version,
	std::string *SerialNum,
	std::string *SignatureAlgorithm,
	tt__DateTimeRange *Validity,
	tt__CertificateInformationExtension *Extension,
	char *__anyAttribute,
	char *__item1)
{
	tt__CertificateInformation *_p = soap_new_tt__CertificateInformation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__CertificateInformation::CertificateID = CertificateID;
		_p->tt__CertificateInformation::IssuerDN = IssuerDN;
		_p->tt__CertificateInformation::SubjectDN = SubjectDN;
		_p->tt__CertificateInformation::KeyUsage = KeyUsage;
		_p->tt__CertificateInformation::ExtendedKeyUsage = ExtendedKeyUsage;
		_p->tt__CertificateInformation::KeyLength = KeyLength;
		_p->tt__CertificateInformation::Version = Version;
		_p->tt__CertificateInformation::SerialNum = SerialNum;
		_p->tt__CertificateInformation::SignatureAlgorithm = SignatureAlgorithm;
		_p->tt__CertificateInformation::Validity = Validity;
		_p->tt__CertificateInformation::Extension = Extension;
		_p->tt__CertificateInformation::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__CertificateInformation(struct soap *soap, tt__CertificateInformation const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:CertificateInformation", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__CertificateInformation * SOAP_FMAC4 soap_get_tt__CertificateInformation(struct soap*, tt__CertificateInformation *, const char*, const char*);

inline int soap_read_tt__CertificateInformation(struct soap *soap, tt__CertificateInformation *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__CertificateInformation(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__CertificateWithPrivateKey_DEFINED
#define SOAP_TYPE_tt__CertificateWithPrivateKey_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__CertificateWithPrivateKey(struct soap*, const char*, int, const tt__CertificateWithPrivateKey *, const char*);
SOAP_FMAC3 tt__CertificateWithPrivateKey * SOAP_FMAC4 soap_in_tt__CertificateWithPrivateKey(struct soap*, const char*, tt__CertificateWithPrivateKey *, const char*);
SOAP_FMAC1 tt__CertificateWithPrivateKey * SOAP_FMAC2 soap_instantiate_tt__CertificateWithPrivateKey(struct soap*, int, const char*, const char*, size_t*);

inline tt__CertificateWithPrivateKey * soap_new_tt__CertificateWithPrivateKey(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__CertificateWithPrivateKey(soap, n, NULL, NULL, NULL);
}

inline tt__CertificateWithPrivateKey * soap_new_req_tt__CertificateWithPrivateKey(
	struct soap *soap,
	tt__BinaryData *Certificate,
	tt__BinaryData *PrivateKey)
{
	tt__CertificateWithPrivateKey *_p = soap_new_tt__CertificateWithPrivateKey(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__CertificateWithPrivateKey::Certificate = Certificate;
		_p->tt__CertificateWithPrivateKey::PrivateKey = PrivateKey;
	}
	return _p;
}

inline tt__CertificateWithPrivateKey * soap_new_set_tt__CertificateWithPrivateKey(
	struct soap *soap,
	std::string *CertificateID,
	tt__BinaryData *Certificate,
	tt__BinaryData *PrivateKey,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__CertificateWithPrivateKey *_p = soap_new_tt__CertificateWithPrivateKey(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__CertificateWithPrivateKey::CertificateID = CertificateID;
		_p->tt__CertificateWithPrivateKey::Certificate = Certificate;
		_p->tt__CertificateWithPrivateKey::PrivateKey = PrivateKey;
		_p->tt__CertificateWithPrivateKey::__any = __any;
		_p->tt__CertificateWithPrivateKey::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__CertificateWithPrivateKey(struct soap *soap, tt__CertificateWithPrivateKey const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:CertificateWithPrivateKey", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__CertificateWithPrivateKey * SOAP_FMAC4 soap_get_tt__CertificateWithPrivateKey(struct soap*, tt__CertificateWithPrivateKey *, const char*, const char*);

inline int soap_read_tt__CertificateWithPrivateKey(struct soap *soap, tt__CertificateWithPrivateKey *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__CertificateWithPrivateKey(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__CertificateStatus_DEFINED
#define SOAP_TYPE_tt__CertificateStatus_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__CertificateStatus(struct soap*, const char*, int, const tt__CertificateStatus *, const char*);
SOAP_FMAC3 tt__CertificateStatus * SOAP_FMAC4 soap_in_tt__CertificateStatus(struct soap*, const char*, tt__CertificateStatus *, const char*);
SOAP_FMAC1 tt__CertificateStatus * SOAP_FMAC2 soap_instantiate_tt__CertificateStatus(struct soap*, int, const char*, const char*, size_t*);

inline tt__CertificateStatus * soap_new_tt__CertificateStatus(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__CertificateStatus(soap, n, NULL, NULL, NULL);
}

inline tt__CertificateStatus * soap_new_req_tt__CertificateStatus(
	struct soap *soap,
	const std::string& CertificateID,
	bool Status)
{
	tt__CertificateStatus *_p = soap_new_tt__CertificateStatus(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__CertificateStatus::CertificateID = CertificateID;
		_p->tt__CertificateStatus::Status = Status;
	}
	return _p;
}

inline tt__CertificateStatus * soap_new_set_tt__CertificateStatus(
	struct soap *soap,
	const std::string& CertificateID,
	bool Status,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__CertificateStatus *_p = soap_new_tt__CertificateStatus(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__CertificateStatus::CertificateID = CertificateID;
		_p->tt__CertificateStatus::Status = Status;
		_p->tt__CertificateStatus::__any = __any;
		_p->tt__CertificateStatus::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__CertificateStatus(struct soap *soap, tt__CertificateStatus const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:CertificateStatus", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__CertificateStatus * SOAP_FMAC4 soap_get_tt__CertificateStatus(struct soap*, tt__CertificateStatus *, const char*, const char*);

inline int soap_read_tt__CertificateStatus(struct soap *soap, tt__CertificateStatus *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__CertificateStatus(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__Certificate_DEFINED
#define SOAP_TYPE_tt__Certificate_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Certificate(struct soap*, const char*, int, const tt__Certificate *, const char*);
SOAP_FMAC3 tt__Certificate * SOAP_FMAC4 soap_in_tt__Certificate(struct soap*, const char*, tt__Certificate *, const char*);
SOAP_FMAC1 tt__Certificate * SOAP_FMAC2 soap_instantiate_tt__Certificate(struct soap*, int, const char*, const char*, size_t*);

inline tt__Certificate * soap_new_tt__Certificate(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Certificate(soap, n, NULL, NULL, NULL);
}

inline tt__Certificate * soap_new_req_tt__Certificate(
	struct soap *soap,
	const std::string& CertificateID,
	tt__BinaryData *Certificate)
{
	tt__Certificate *_p = soap_new_tt__Certificate(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Certificate::CertificateID = CertificateID;
		_p->tt__Certificate::Certificate = Certificate;
	}
	return _p;
}

inline tt__Certificate * soap_new_set_tt__Certificate(
	struct soap *soap,
	const std::string& CertificateID,
	tt__BinaryData *Certificate,
	char *__item1)
{
	tt__Certificate *_p = soap_new_tt__Certificate(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Certificate::CertificateID = CertificateID;
		_p->tt__Certificate::Certificate = Certificate;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__Certificate(struct soap *soap, tt__Certificate const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Certificate", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__Certificate * SOAP_FMAC4 soap_get_tt__Certificate(struct soap*, tt__Certificate *, const char*, const char*);

inline int soap_read_tt__Certificate(struct soap *soap, tt__Certificate *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__Certificate(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__CertificateGenerationParametersExtension_DEFINED
#define SOAP_TYPE_tt__CertificateGenerationParametersExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__CertificateGenerationParametersExtension(struct soap*, const char*, int, const tt__CertificateGenerationParametersExtension *, const char*);
SOAP_FMAC3 tt__CertificateGenerationParametersExtension * SOAP_FMAC4 soap_in_tt__CertificateGenerationParametersExtension(struct soap*, const char*, tt__CertificateGenerationParametersExtension *, const char*);
SOAP_FMAC1 tt__CertificateGenerationParametersExtension * SOAP_FMAC2 soap_instantiate_tt__CertificateGenerationParametersExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__CertificateGenerationParametersExtension * soap_new_tt__CertificateGenerationParametersExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__CertificateGenerationParametersExtension(soap, n, NULL, NULL, NULL);
}

inline tt__CertificateGenerationParametersExtension * soap_new_req_tt__CertificateGenerationParametersExtension(
	struct soap *soap)
{
	tt__CertificateGenerationParametersExtension *_p = soap_new_tt__CertificateGenerationParametersExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__CertificateGenerationParametersExtension * soap_new_set_tt__CertificateGenerationParametersExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__CertificateGenerationParametersExtension *_p = soap_new_tt__CertificateGenerationParametersExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__CertificateGenerationParametersExtension::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__CertificateGenerationParametersExtension(struct soap *soap, tt__CertificateGenerationParametersExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:CertificateGenerationParametersExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__CertificateGenerationParametersExtension * SOAP_FMAC4 soap_get_tt__CertificateGenerationParametersExtension(struct soap*, tt__CertificateGenerationParametersExtension *, const char*, const char*);

inline int soap_read_tt__CertificateGenerationParametersExtension(struct soap *soap, tt__CertificateGenerationParametersExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__CertificateGenerationParametersExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__CertificateGenerationParameters_DEFINED
#define SOAP_TYPE_tt__CertificateGenerationParameters_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__CertificateGenerationParameters(struct soap*, const char*, int, const tt__CertificateGenerationParameters *, const char*);
SOAP_FMAC3 tt__CertificateGenerationParameters * SOAP_FMAC4 soap_in_tt__CertificateGenerationParameters(struct soap*, const char*, tt__CertificateGenerationParameters *, const char*);
SOAP_FMAC1 tt__CertificateGenerationParameters * SOAP_FMAC2 soap_instantiate_tt__CertificateGenerationParameters(struct soap*, int, const char*, const char*, size_t*);

inline tt__CertificateGenerationParameters * soap_new_tt__CertificateGenerationParameters(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__CertificateGenerationParameters(soap, n, NULL, NULL, NULL);
}

inline tt__CertificateGenerationParameters * soap_new_req_tt__CertificateGenerationParameters(
	struct soap *soap)
{
	tt__CertificateGenerationParameters *_p = soap_new_tt__CertificateGenerationParameters(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__CertificateGenerationParameters * soap_new_set_tt__CertificateGenerationParameters(
	struct soap *soap,
	std::string *CertificateID,
	std::string *Subject,
	std::string *ValidNotBefore,
	std::string *ValidNotAfter,
	tt__CertificateGenerationParametersExtension *Extension,
	char *__anyAttribute,
	char *__item1)
{
	tt__CertificateGenerationParameters *_p = soap_new_tt__CertificateGenerationParameters(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__CertificateGenerationParameters::CertificateID = CertificateID;
		_p->tt__CertificateGenerationParameters::Subject = Subject;
		_p->tt__CertificateGenerationParameters::ValidNotBefore = ValidNotBefore;
		_p->tt__CertificateGenerationParameters::ValidNotAfter = ValidNotAfter;
		_p->tt__CertificateGenerationParameters::Extension = Extension;
		_p->tt__CertificateGenerationParameters::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__CertificateGenerationParameters(struct soap *soap, tt__CertificateGenerationParameters const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:CertificateGenerationParameters", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__CertificateGenerationParameters * SOAP_FMAC4 soap_get_tt__CertificateGenerationParameters(struct soap*, tt__CertificateGenerationParameters *, const char*, const char*);

inline int soap_read_tt__CertificateGenerationParameters(struct soap *soap, tt__CertificateGenerationParameters *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__CertificateGenerationParameters(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__UserExtension_DEFINED
#define SOAP_TYPE_tt__UserExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__UserExtension(struct soap*, const char*, int, const tt__UserExtension *, const char*);
SOAP_FMAC3 tt__UserExtension * SOAP_FMAC4 soap_in_tt__UserExtension(struct soap*, const char*, tt__UserExtension *, const char*);
SOAP_FMAC1 tt__UserExtension * SOAP_FMAC2 soap_instantiate_tt__UserExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__UserExtension * soap_new_tt__UserExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__UserExtension(soap, n, NULL, NULL, NULL);
}

inline tt__UserExtension * soap_new_req_tt__UserExtension(
	struct soap *soap)
{
	tt__UserExtension *_p = soap_new_tt__UserExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__UserExtension * soap_new_set_tt__UserExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__UserExtension *_p = soap_new_tt__UserExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__UserExtension::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__UserExtension(struct soap *soap, tt__UserExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:UserExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__UserExtension * SOAP_FMAC4 soap_get_tt__UserExtension(struct soap*, tt__UserExtension *, const char*, const char*);

inline int soap_read_tt__UserExtension(struct soap *soap, tt__UserExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__UserExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__User_DEFINED
#define SOAP_TYPE_tt__User_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__User(struct soap*, const char*, int, const tt__User *, const char*);
SOAP_FMAC3 tt__User * SOAP_FMAC4 soap_in_tt__User(struct soap*, const char*, tt__User *, const char*);
SOAP_FMAC1 tt__User * SOAP_FMAC2 soap_instantiate_tt__User(struct soap*, int, const char*, const char*, size_t*);

inline tt__User * soap_new_tt__User(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__User(soap, n, NULL, NULL, NULL);
}

inline tt__User * soap_new_req_tt__User(
	struct soap *soap,
	const std::string& Username,
	enum tt__UserLevel UserLevel)
{
	tt__User *_p = soap_new_tt__User(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__User::Username = Username;
		_p->tt__User::UserLevel = UserLevel;
	}
	return _p;
}

inline tt__User * soap_new_set_tt__User(
	struct soap *soap,
	const std::string& Username,
	std::string *Password,
	enum tt__UserLevel UserLevel,
	tt__UserExtension *Extension,
	char *__anyAttribute,
	char *__item1)
{
	tt__User *_p = soap_new_tt__User(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__User::Username = Username;
		_p->tt__User::Password = Password;
		_p->tt__User::UserLevel = UserLevel;
		_p->tt__User::Extension = Extension;
		_p->tt__User::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__User(struct soap *soap, tt__User const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:User", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__User * SOAP_FMAC4 soap_get_tt__User(struct soap*, tt__User *, const char*, const char*);

inline int soap_read_tt__User(struct soap *soap, tt__User *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__User(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__RemoteUser_DEFINED
#define SOAP_TYPE_tt__RemoteUser_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RemoteUser(struct soap*, const char*, int, const tt__RemoteUser *, const char*);
SOAP_FMAC3 tt__RemoteUser * SOAP_FMAC4 soap_in_tt__RemoteUser(struct soap*, const char*, tt__RemoteUser *, const char*);
SOAP_FMAC1 tt__RemoteUser * SOAP_FMAC2 soap_instantiate_tt__RemoteUser(struct soap*, int, const char*, const char*, size_t*);

inline tt__RemoteUser * soap_new_tt__RemoteUser(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__RemoteUser(soap, n, NULL, NULL, NULL);
}

inline tt__RemoteUser * soap_new_req_tt__RemoteUser(
	struct soap *soap,
	const std::string& Username,
	bool UseDerivedPassword)
{
	tt__RemoteUser *_p = soap_new_tt__RemoteUser(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__RemoteUser::Username = Username;
		_p->tt__RemoteUser::UseDerivedPassword = UseDerivedPassword;
	}
	return _p;
}

inline tt__RemoteUser * soap_new_set_tt__RemoteUser(
	struct soap *soap,
	const std::string& Username,
	std::string *Password,
	bool UseDerivedPassword,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__RemoteUser *_p = soap_new_tt__RemoteUser(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__RemoteUser::Username = Username;
		_p->tt__RemoteUser::Password = Password;
		_p->tt__RemoteUser::UseDerivedPassword = UseDerivedPassword;
		_p->tt__RemoteUser::__any = __any;
		_p->tt__RemoteUser::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__RemoteUser(struct soap *soap, tt__RemoteUser const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:RemoteUser", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__RemoteUser * SOAP_FMAC4 soap_get_tt__RemoteUser(struct soap*, tt__RemoteUser *, const char*, const char*);

inline int soap_read_tt__RemoteUser(struct soap *soap, tt__RemoteUser *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__RemoteUser(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__TimeZone_DEFINED
#define SOAP_TYPE_tt__TimeZone_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__TimeZone(struct soap*, const char*, int, const tt__TimeZone *, const char*);
SOAP_FMAC3 tt__TimeZone * SOAP_FMAC4 soap_in_tt__TimeZone(struct soap*, const char*, tt__TimeZone *, const char*);
SOAP_FMAC1 tt__TimeZone * SOAP_FMAC2 soap_instantiate_tt__TimeZone(struct soap*, int, const char*, const char*, size_t*);

inline tt__TimeZone * soap_new_tt__TimeZone(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__TimeZone(soap, n, NULL, NULL, NULL);
}

inline tt__TimeZone * soap_new_req_tt__TimeZone(
	struct soap *soap,
	const std::string& TZ)
{
	tt__TimeZone *_p = soap_new_tt__TimeZone(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__TimeZone::TZ = TZ;
	}
	return _p;
}

inline tt__TimeZone * soap_new_set_tt__TimeZone(
	struct soap *soap,
	const std::string& TZ,
	char *__item1)
{
	tt__TimeZone *_p = soap_new_tt__TimeZone(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__TimeZone::TZ = TZ;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__TimeZone(struct soap *soap, tt__TimeZone const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:TimeZone", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__TimeZone * SOAP_FMAC4 soap_get_tt__TimeZone(struct soap*, tt__TimeZone *, const char*, const char*);

inline int soap_read_tt__TimeZone(struct soap *soap, tt__TimeZone *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__TimeZone(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__Time_DEFINED
#define SOAP_TYPE_tt__Time_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Time(struct soap*, const char*, int, const tt__Time *, const char*);
SOAP_FMAC3 tt__Time * SOAP_FMAC4 soap_in_tt__Time(struct soap*, const char*, tt__Time *, const char*);
SOAP_FMAC1 tt__Time * SOAP_FMAC2 soap_instantiate_tt__Time(struct soap*, int, const char*, const char*, size_t*);

inline tt__Time * soap_new_tt__Time(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Time(soap, n, NULL, NULL, NULL);
}

inline tt__Time * soap_new_req_tt__Time(
	struct soap *soap,
	int Hour,
	int Minute,
	int Second)
{
	tt__Time *_p = soap_new_tt__Time(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Time::Hour = Hour;
		_p->tt__Time::Minute = Minute;
		_p->tt__Time::Second = Second;
	}
	return _p;
}

inline tt__Time * soap_new_set_tt__Time(
	struct soap *soap,
	int Hour,
	int Minute,
	int Second,
	char *__item1)
{
	tt__Time *_p = soap_new_tt__Time(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Time::Hour = Hour;
		_p->tt__Time::Minute = Minute;
		_p->tt__Time::Second = Second;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__Time(struct soap *soap, tt__Time const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Time", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__Time * SOAP_FMAC4 soap_get_tt__Time(struct soap*, tt__Time *, const char*, const char*);

inline int soap_read_tt__Time(struct soap *soap, tt__Time *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__Time(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__Date_DEFINED
#define SOAP_TYPE_tt__Date_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Date(struct soap*, const char*, int, const tt__Date *, const char*);
SOAP_FMAC3 tt__Date * SOAP_FMAC4 soap_in_tt__Date(struct soap*, const char*, tt__Date *, const char*);
SOAP_FMAC1 tt__Date * SOAP_FMAC2 soap_instantiate_tt__Date(struct soap*, int, const char*, const char*, size_t*);

inline tt__Date * soap_new_tt__Date(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Date(soap, n, NULL, NULL, NULL);
}

inline tt__Date * soap_new_req_tt__Date(
	struct soap *soap,
	int Year,
	int Month,
	int Day)
{
	tt__Date *_p = soap_new_tt__Date(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Date::Year = Year;
		_p->tt__Date::Month = Month;
		_p->tt__Date::Day = Day;
	}
	return _p;
}

inline tt__Date * soap_new_set_tt__Date(
	struct soap *soap,
	int Year,
	int Month,
	int Day,
	char *__item1)
{
	tt__Date *_p = soap_new_tt__Date(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Date::Year = Year;
		_p->tt__Date::Month = Month;
		_p->tt__Date::Day = Day;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__Date(struct soap *soap, tt__Date const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Date", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__Date * SOAP_FMAC4 soap_get_tt__Date(struct soap*, tt__Date *, const char*, const char*);

inline int soap_read_tt__Date(struct soap *soap, tt__Date *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__Date(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__DateTime_DEFINED
#define SOAP_TYPE_tt__DateTime_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__DateTime(struct soap*, const char*, int, const tt__DateTime *, const char*);
SOAP_FMAC3 tt__DateTime * SOAP_FMAC4 soap_in_tt__DateTime(struct soap*, const char*, tt__DateTime *, const char*);
SOAP_FMAC1 tt__DateTime * SOAP_FMAC2 soap_instantiate_tt__DateTime(struct soap*, int, const char*, const char*, size_t*);

inline tt__DateTime * soap_new_tt__DateTime(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__DateTime(soap, n, NULL, NULL, NULL);
}

inline tt__DateTime * soap_new_req_tt__DateTime(
	struct soap *soap,
	tt__Time *Time,
	tt__Date *Date)
{
	tt__DateTime *_p = soap_new_tt__DateTime(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__DateTime::Time = Time;
		_p->tt__DateTime::Date = Date;
	}
	return _p;
}

inline tt__DateTime * soap_new_set_tt__DateTime(
	struct soap *soap,
	tt__Time *Time,
	tt__Date *Date,
	char *__item1)
{
	tt__DateTime *_p = soap_new_tt__DateTime(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__DateTime::Time = Time;
		_p->tt__DateTime::Date = Date;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__DateTime(struct soap *soap, tt__DateTime const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:DateTime", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__DateTime * SOAP_FMAC4 soap_get_tt__DateTime(struct soap*, tt__DateTime *, const char*, const char*);

inline int soap_read_tt__DateTime(struct soap *soap, tt__DateTime *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__DateTime(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__SystemDateTimeExtension_DEFINED
#define SOAP_TYPE_tt__SystemDateTimeExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__SystemDateTimeExtension(struct soap*, const char*, int, const tt__SystemDateTimeExtension *, const char*);
SOAP_FMAC3 tt__SystemDateTimeExtension * SOAP_FMAC4 soap_in_tt__SystemDateTimeExtension(struct soap*, const char*, tt__SystemDateTimeExtension *, const char*);
SOAP_FMAC1 tt__SystemDateTimeExtension * SOAP_FMAC2 soap_instantiate_tt__SystemDateTimeExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__SystemDateTimeExtension * soap_new_tt__SystemDateTimeExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__SystemDateTimeExtension(soap, n, NULL, NULL, NULL);
}

inline tt__SystemDateTimeExtension * soap_new_req_tt__SystemDateTimeExtension(
	struct soap *soap)
{
	tt__SystemDateTimeExtension *_p = soap_new_tt__SystemDateTimeExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__SystemDateTimeExtension * soap_new_set_tt__SystemDateTimeExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__SystemDateTimeExtension *_p = soap_new_tt__SystemDateTimeExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__SystemDateTimeExtension::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__SystemDateTimeExtension(struct soap *soap, tt__SystemDateTimeExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:SystemDateTimeExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__SystemDateTimeExtension * SOAP_FMAC4 soap_get_tt__SystemDateTimeExtension(struct soap*, tt__SystemDateTimeExtension *, const char*, const char*);

inline int soap_read_tt__SystemDateTimeExtension(struct soap *soap, tt__SystemDateTimeExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__SystemDateTimeExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__SystemDateTime_DEFINED
#define SOAP_TYPE_tt__SystemDateTime_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__SystemDateTime(struct soap*, const char*, int, const tt__SystemDateTime *, const char*);
SOAP_FMAC3 tt__SystemDateTime * SOAP_FMAC4 soap_in_tt__SystemDateTime(struct soap*, const char*, tt__SystemDateTime *, const char*);
SOAP_FMAC1 tt__SystemDateTime * SOAP_FMAC2 soap_instantiate_tt__SystemDateTime(struct soap*, int, const char*, const char*, size_t*);

inline tt__SystemDateTime * soap_new_tt__SystemDateTime(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__SystemDateTime(soap, n, NULL, NULL, NULL);
}

inline tt__SystemDateTime * soap_new_req_tt__SystemDateTime(
	struct soap *soap,
	enum tt__SetDateTimeType DateTimeType,
	bool DaylightSavings)
{
	tt__SystemDateTime *_p = soap_new_tt__SystemDateTime(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__SystemDateTime::DateTimeType = DateTimeType;
		_p->tt__SystemDateTime::DaylightSavings = DaylightSavings;
	}
	return _p;
}

inline tt__SystemDateTime * soap_new_set_tt__SystemDateTime(
	struct soap *soap,
	enum tt__SetDateTimeType DateTimeType,
	bool DaylightSavings,
	tt__TimeZone *TimeZone,
	tt__DateTime *UTCDateTime,
	tt__DateTime *LocalDateTime,
	tt__SystemDateTimeExtension *Extension,
	char *__anyAttribute,
	char *__item1)
{
	tt__SystemDateTime *_p = soap_new_tt__SystemDateTime(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__SystemDateTime::DateTimeType = DateTimeType;
		_p->tt__SystemDateTime::DaylightSavings = DaylightSavings;
		_p->tt__SystemDateTime::TimeZone = TimeZone;
		_p->tt__SystemDateTime::UTCDateTime = UTCDateTime;
		_p->tt__SystemDateTime::LocalDateTime = LocalDateTime;
		_p->tt__SystemDateTime::Extension = Extension;
		_p->tt__SystemDateTime::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__SystemDateTime(struct soap *soap, tt__SystemDateTime const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:SystemDateTime", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__SystemDateTime * SOAP_FMAC4 soap_get_tt__SystemDateTime(struct soap*, tt__SystemDateTime *, const char*, const char*);

inline int soap_read_tt__SystemDateTime(struct soap *soap, tt__SystemDateTime *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__SystemDateTime(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__SystemLogUri_DEFINED
#define SOAP_TYPE_tt__SystemLogUri_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__SystemLogUri(struct soap*, const char*, int, const tt__SystemLogUri *, const char*);
SOAP_FMAC3 tt__SystemLogUri * SOAP_FMAC4 soap_in_tt__SystemLogUri(struct soap*, const char*, tt__SystemLogUri *, const char*);
SOAP_FMAC1 tt__SystemLogUri * SOAP_FMAC2 soap_instantiate_tt__SystemLogUri(struct soap*, int, const char*, const char*, size_t*);

inline tt__SystemLogUri * soap_new_tt__SystemLogUri(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__SystemLogUri(soap, n, NULL, NULL, NULL);
}

inline tt__SystemLogUri * soap_new_req_tt__SystemLogUri(
	struct soap *soap,
	enum tt__SystemLogType Type,
	const std::string& Uri)
{
	tt__SystemLogUri *_p = soap_new_tt__SystemLogUri(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__SystemLogUri::Type = Type;
		_p->tt__SystemLogUri::Uri = Uri;
	}
	return _p;
}

inline tt__SystemLogUri * soap_new_set_tt__SystemLogUri(
	struct soap *soap,
	enum tt__SystemLogType Type,
	const std::string& Uri,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__SystemLogUri *_p = soap_new_tt__SystemLogUri(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__SystemLogUri::Type = Type;
		_p->tt__SystemLogUri::Uri = Uri;
		_p->tt__SystemLogUri::__any = __any;
		_p->tt__SystemLogUri::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__SystemLogUri(struct soap *soap, tt__SystemLogUri const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:SystemLogUri", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__SystemLogUri * SOAP_FMAC4 soap_get_tt__SystemLogUri(struct soap*, tt__SystemLogUri *, const char*, const char*);

inline int soap_read_tt__SystemLogUri(struct soap *soap, tt__SystemLogUri *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__SystemLogUri(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__SystemLogUriList_DEFINED
#define SOAP_TYPE_tt__SystemLogUriList_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__SystemLogUriList(struct soap*, const char*, int, const tt__SystemLogUriList *, const char*);
SOAP_FMAC3 tt__SystemLogUriList * SOAP_FMAC4 soap_in_tt__SystemLogUriList(struct soap*, const char*, tt__SystemLogUriList *, const char*);
SOAP_FMAC1 tt__SystemLogUriList * SOAP_FMAC2 soap_instantiate_tt__SystemLogUriList(struct soap*, int, const char*, const char*, size_t*);

inline tt__SystemLogUriList * soap_new_tt__SystemLogUriList(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__SystemLogUriList(soap, n, NULL, NULL, NULL);
}

inline tt__SystemLogUriList * soap_new_req_tt__SystemLogUriList(
	struct soap *soap)
{
	tt__SystemLogUriList *_p = soap_new_tt__SystemLogUriList(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__SystemLogUriList * soap_new_set_tt__SystemLogUriList(
	struct soap *soap,
	const std::vector<tt__SystemLogUri *> & SystemLog,
	char *__item1)
{
	tt__SystemLogUriList *_p = soap_new_tt__SystemLogUriList(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__SystemLogUriList::SystemLog = SystemLog;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__SystemLogUriList(struct soap *soap, tt__SystemLogUriList const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:SystemLogUriList", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__SystemLogUriList * SOAP_FMAC4 soap_get_tt__SystemLogUriList(struct soap*, tt__SystemLogUriList *, const char*, const char*);

inline int soap_read_tt__SystemLogUriList(struct soap *soap, tt__SystemLogUriList *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__SystemLogUriList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__BackupFile_DEFINED
#define SOAP_TYPE_tt__BackupFile_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__BackupFile(struct soap*, const char*, int, const tt__BackupFile *, const char*);
SOAP_FMAC3 tt__BackupFile * SOAP_FMAC4 soap_in_tt__BackupFile(struct soap*, const char*, tt__BackupFile *, const char*);
SOAP_FMAC1 tt__BackupFile * SOAP_FMAC2 soap_instantiate_tt__BackupFile(struct soap*, int, const char*, const char*, size_t*);

inline tt__BackupFile * soap_new_tt__BackupFile(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__BackupFile(soap, n, NULL, NULL, NULL);
}

inline tt__BackupFile * soap_new_req_tt__BackupFile(
	struct soap *soap,
	const std::string& Name,
	tt__AttachmentData *Data)
{
	tt__BackupFile *_p = soap_new_tt__BackupFile(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__BackupFile::Name = Name;
		_p->tt__BackupFile::Data = Data;
	}
	return _p;
}

inline tt__BackupFile * soap_new_set_tt__BackupFile(
	struct soap *soap,
	const std::string& Name,
	tt__AttachmentData *Data,
	char *__item1)
{
	tt__BackupFile *_p = soap_new_tt__BackupFile(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__BackupFile::Name = Name;
		_p->tt__BackupFile::Data = Data;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__BackupFile(struct soap *soap, tt__BackupFile const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:BackupFile", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__BackupFile * SOAP_FMAC4 soap_get_tt__BackupFile(struct soap*, tt__BackupFile *, const char*, const char*);

inline int soap_read_tt__BackupFile(struct soap *soap, tt__BackupFile *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__BackupFile(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__AttachmentData_DEFINED
#define SOAP_TYPE_tt__AttachmentData_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AttachmentData(struct soap*, const char*, int, const tt__AttachmentData *, const char*);
SOAP_FMAC3 tt__AttachmentData * SOAP_FMAC4 soap_in_tt__AttachmentData(struct soap*, const char*, tt__AttachmentData *, const char*);
SOAP_FMAC1 tt__AttachmentData * SOAP_FMAC2 soap_instantiate_tt__AttachmentData(struct soap*, int, const char*, const char*, size_t*);

inline tt__AttachmentData * soap_new_tt__AttachmentData(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__AttachmentData(soap, n, NULL, NULL, NULL);
}

inline tt__AttachmentData * soap_new_req_tt__AttachmentData(
	struct soap *soap,
	const struct _xop__Include& xop__Include)
{
	tt__AttachmentData *_p = soap_new_tt__AttachmentData(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AttachmentData::xop__Include = xop__Include;
	}
	return _p;
}

inline tt__AttachmentData * soap_new_set_tt__AttachmentData(
	struct soap *soap,
	const struct _xop__Include& xop__Include,
	char *xmime__contentType,
	char *__item1)
{
	tt__AttachmentData *_p = soap_new_tt__AttachmentData(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AttachmentData::xop__Include = xop__Include;
		_p->tt__AttachmentData::xmime__contentType = xmime__contentType;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__AttachmentData(struct soap *soap, tt__AttachmentData const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AttachmentData", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__AttachmentData * SOAP_FMAC4 soap_get_tt__AttachmentData(struct soap*, tt__AttachmentData *, const char*, const char*);

inline int soap_read_tt__AttachmentData(struct soap *soap, tt__AttachmentData *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__AttachmentData(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__BinaryData_DEFINED
#define SOAP_TYPE_tt__BinaryData_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__BinaryData(struct soap*, const char*, int, const tt__BinaryData *, const char*);
SOAP_FMAC3 tt__BinaryData * SOAP_FMAC4 soap_in_tt__BinaryData(struct soap*, const char*, tt__BinaryData *, const char*);
SOAP_FMAC1 tt__BinaryData * SOAP_FMAC2 soap_instantiate_tt__BinaryData(struct soap*, int, const char*, const char*, size_t*);

inline tt__BinaryData * soap_new_tt__BinaryData(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__BinaryData(soap, n, NULL, NULL, NULL);
}

inline tt__BinaryData * soap_new_req_tt__BinaryData(
	struct soap *soap,
	const xsd__base64Binary& Data)
{
	tt__BinaryData *_p = soap_new_tt__BinaryData(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__BinaryData::Data = Data;
	}
	return _p;
}

inline tt__BinaryData * soap_new_set_tt__BinaryData(
	struct soap *soap,
	const xsd__base64Binary& Data,
	char *xmime__contentType,
	char *__item1)
{
	tt__BinaryData *_p = soap_new_tt__BinaryData(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__BinaryData::Data = Data;
		_p->tt__BinaryData::xmime__contentType = xmime__contentType;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__BinaryData(struct soap *soap, tt__BinaryData const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:BinaryData", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__BinaryData * SOAP_FMAC4 soap_get_tt__BinaryData(struct soap*, tt__BinaryData *, const char*, const char*);

inline int soap_read_tt__BinaryData(struct soap *soap, tt__BinaryData *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__BinaryData(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__SupportInformation_DEFINED
#define SOAP_TYPE_tt__SupportInformation_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__SupportInformation(struct soap*, const char*, int, const tt__SupportInformation *, const char*);
SOAP_FMAC3 tt__SupportInformation * SOAP_FMAC4 soap_in_tt__SupportInformation(struct soap*, const char*, tt__SupportInformation *, const char*);
SOAP_FMAC1 tt__SupportInformation * SOAP_FMAC2 soap_instantiate_tt__SupportInformation(struct soap*, int, const char*, const char*, size_t*);

inline tt__SupportInformation * soap_new_tt__SupportInformation(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__SupportInformation(soap, n, NULL, NULL, NULL);
}

inline tt__SupportInformation * soap_new_req_tt__SupportInformation(
	struct soap *soap)
{
	tt__SupportInformation *_p = soap_new_tt__SupportInformation(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__SupportInformation * soap_new_set_tt__SupportInformation(
	struct soap *soap,
	tt__AttachmentData *Binary,
	std::string *String,
	char *__item1)
{
	tt__SupportInformation *_p = soap_new_tt__SupportInformation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__SupportInformation::Binary = Binary;
		_p->tt__SupportInformation::String = String;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__SupportInformation(struct soap *soap, tt__SupportInformation const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:SupportInformation", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__SupportInformation * SOAP_FMAC4 soap_get_tt__SupportInformation(struct soap*, tt__SupportInformation *, const char*, const char*);

inline int soap_read_tt__SupportInformation(struct soap *soap, tt__SupportInformation *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__SupportInformation(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__SystemLog_DEFINED
#define SOAP_TYPE_tt__SystemLog_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__SystemLog(struct soap*, const char*, int, const tt__SystemLog *, const char*);
SOAP_FMAC3 tt__SystemLog * SOAP_FMAC4 soap_in_tt__SystemLog(struct soap*, const char*, tt__SystemLog *, const char*);
SOAP_FMAC1 tt__SystemLog * SOAP_FMAC2 soap_instantiate_tt__SystemLog(struct soap*, int, const char*, const char*, size_t*);

inline tt__SystemLog * soap_new_tt__SystemLog(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__SystemLog(soap, n, NULL, NULL, NULL);
}

inline tt__SystemLog * soap_new_req_tt__SystemLog(
	struct soap *soap)
{
	tt__SystemLog *_p = soap_new_tt__SystemLog(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__SystemLog * soap_new_set_tt__SystemLog(
	struct soap *soap,
	tt__AttachmentData *Binary,
	std::string *String,
	char *__item1)
{
	tt__SystemLog *_p = soap_new_tt__SystemLog(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__SystemLog::Binary = Binary;
		_p->tt__SystemLog::String = String;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__SystemLog(struct soap *soap, tt__SystemLog const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:SystemLog", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__SystemLog * SOAP_FMAC4 soap_get_tt__SystemLog(struct soap*, tt__SystemLog *, const char*, const char*);

inline int soap_read_tt__SystemLog(struct soap *soap, tt__SystemLog *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__SystemLog(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__AnalyticsDeviceExtension_DEFINED
#define SOAP_TYPE_tt__AnalyticsDeviceExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AnalyticsDeviceExtension(struct soap*, const char*, int, const tt__AnalyticsDeviceExtension *, const char*);
SOAP_FMAC3 tt__AnalyticsDeviceExtension * SOAP_FMAC4 soap_in_tt__AnalyticsDeviceExtension(struct soap*, const char*, tt__AnalyticsDeviceExtension *, const char*);
SOAP_FMAC1 tt__AnalyticsDeviceExtension * SOAP_FMAC2 soap_instantiate_tt__AnalyticsDeviceExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__AnalyticsDeviceExtension * soap_new_tt__AnalyticsDeviceExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__AnalyticsDeviceExtension(soap, n, NULL, NULL, NULL);
}

inline tt__AnalyticsDeviceExtension * soap_new_req_tt__AnalyticsDeviceExtension(
	struct soap *soap)
{
	tt__AnalyticsDeviceExtension *_p = soap_new_tt__AnalyticsDeviceExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__AnalyticsDeviceExtension * soap_new_set_tt__AnalyticsDeviceExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__AnalyticsDeviceExtension *_p = soap_new_tt__AnalyticsDeviceExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AnalyticsDeviceExtension::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__AnalyticsDeviceExtension(struct soap *soap, tt__AnalyticsDeviceExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AnalyticsDeviceExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__AnalyticsDeviceExtension * SOAP_FMAC4 soap_get_tt__AnalyticsDeviceExtension(struct soap*, tt__AnalyticsDeviceExtension *, const char*, const char*);

inline int soap_read_tt__AnalyticsDeviceExtension(struct soap *soap, tt__AnalyticsDeviceExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__AnalyticsDeviceExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__AnalyticsDeviceCapabilities_DEFINED
#define SOAP_TYPE_tt__AnalyticsDeviceCapabilities_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AnalyticsDeviceCapabilities(struct soap*, const char*, int, const tt__AnalyticsDeviceCapabilities *, const char*);
SOAP_FMAC3 tt__AnalyticsDeviceCapabilities * SOAP_FMAC4 soap_in_tt__AnalyticsDeviceCapabilities(struct soap*, const char*, tt__AnalyticsDeviceCapabilities *, const char*);
SOAP_FMAC1 tt__AnalyticsDeviceCapabilities * SOAP_FMAC2 soap_instantiate_tt__AnalyticsDeviceCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline tt__AnalyticsDeviceCapabilities * soap_new_tt__AnalyticsDeviceCapabilities(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__AnalyticsDeviceCapabilities(soap, n, NULL, NULL, NULL);
}

inline tt__AnalyticsDeviceCapabilities * soap_new_req_tt__AnalyticsDeviceCapabilities(
	struct soap *soap,
	const std::string& XAddr)
{
	tt__AnalyticsDeviceCapabilities *_p = soap_new_tt__AnalyticsDeviceCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AnalyticsDeviceCapabilities::XAddr = XAddr;
	}
	return _p;
}

inline tt__AnalyticsDeviceCapabilities * soap_new_set_tt__AnalyticsDeviceCapabilities(
	struct soap *soap,
	const std::string& XAddr,
	bool *RuleSupport,
	tt__AnalyticsDeviceExtension *Extension,
	char *__anyAttribute,
	char *__item1)
{
	tt__AnalyticsDeviceCapabilities *_p = soap_new_tt__AnalyticsDeviceCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AnalyticsDeviceCapabilities::XAddr = XAddr;
		_p->tt__AnalyticsDeviceCapabilities::RuleSupport = RuleSupport;
		_p->tt__AnalyticsDeviceCapabilities::Extension = Extension;
		_p->tt__AnalyticsDeviceCapabilities::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__AnalyticsDeviceCapabilities(struct soap *soap, tt__AnalyticsDeviceCapabilities const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AnalyticsDeviceCapabilities", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__AnalyticsDeviceCapabilities * SOAP_FMAC4 soap_get_tt__AnalyticsDeviceCapabilities(struct soap*, tt__AnalyticsDeviceCapabilities *, const char*, const char*);

inline int soap_read_tt__AnalyticsDeviceCapabilities(struct soap *soap, tt__AnalyticsDeviceCapabilities *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__AnalyticsDeviceCapabilities(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__ReceiverCapabilities_DEFINED
#define SOAP_TYPE_tt__ReceiverCapabilities_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ReceiverCapabilities(struct soap*, const char*, int, const tt__ReceiverCapabilities *, const char*);
SOAP_FMAC3 tt__ReceiverCapabilities * SOAP_FMAC4 soap_in_tt__ReceiverCapabilities(struct soap*, const char*, tt__ReceiverCapabilities *, const char*);
SOAP_FMAC1 tt__ReceiverCapabilities * SOAP_FMAC2 soap_instantiate_tt__ReceiverCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline tt__ReceiverCapabilities * soap_new_tt__ReceiverCapabilities(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ReceiverCapabilities(soap, n, NULL, NULL, NULL);
}

inline tt__ReceiverCapabilities * soap_new_req_tt__ReceiverCapabilities(
	struct soap *soap,
	const std::string& XAddr,
	bool RTP_USCOREMulticast,
	bool RTP_USCORETCP,
	bool RTP_USCORERTSP_USCORETCP,
	int SupportedReceivers,
	int MaximumRTSPURILength)
{
	tt__ReceiverCapabilities *_p = soap_new_tt__ReceiverCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ReceiverCapabilities::XAddr = XAddr;
		_p->tt__ReceiverCapabilities::RTP_USCOREMulticast = RTP_USCOREMulticast;
		_p->tt__ReceiverCapabilities::RTP_USCORETCP = RTP_USCORETCP;
		_p->tt__ReceiverCapabilities::RTP_USCORERTSP_USCORETCP = RTP_USCORERTSP_USCORETCP;
		_p->tt__ReceiverCapabilities::SupportedReceivers = SupportedReceivers;
		_p->tt__ReceiverCapabilities::MaximumRTSPURILength = MaximumRTSPURILength;
	}
	return _p;
}

inline tt__ReceiverCapabilities * soap_new_set_tt__ReceiverCapabilities(
	struct soap *soap,
	const std::string& XAddr,
	bool RTP_USCOREMulticast,
	bool RTP_USCORETCP,
	bool RTP_USCORERTSP_USCORETCP,
	int SupportedReceivers,
	int MaximumRTSPURILength,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__ReceiverCapabilities *_p = soap_new_tt__ReceiverCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ReceiverCapabilities::XAddr = XAddr;
		_p->tt__ReceiverCapabilities::RTP_USCOREMulticast = RTP_USCOREMulticast;
		_p->tt__ReceiverCapabilities::RTP_USCORETCP = RTP_USCORETCP;
		_p->tt__ReceiverCapabilities::RTP_USCORERTSP_USCORETCP = RTP_USCORERTSP_USCORETCP;
		_p->tt__ReceiverCapabilities::SupportedReceivers = SupportedReceivers;
		_p->tt__ReceiverCapabilities::MaximumRTSPURILength = MaximumRTSPURILength;
		_p->tt__ReceiverCapabilities::__any = __any;
		_p->tt__ReceiverCapabilities::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__ReceiverCapabilities(struct soap *soap, tt__ReceiverCapabilities const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ReceiverCapabilities", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__ReceiverCapabilities * SOAP_FMAC4 soap_get_tt__ReceiverCapabilities(struct soap*, tt__ReceiverCapabilities *, const char*, const char*);

inline int soap_read_tt__ReceiverCapabilities(struct soap *soap, tt__ReceiverCapabilities *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__ReceiverCapabilities(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__ReplayCapabilities_DEFINED
#define SOAP_TYPE_tt__ReplayCapabilities_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ReplayCapabilities(struct soap*, const char*, int, const tt__ReplayCapabilities *, const char*);
SOAP_FMAC3 tt__ReplayCapabilities * SOAP_FMAC4 soap_in_tt__ReplayCapabilities(struct soap*, const char*, tt__ReplayCapabilities *, const char*);
SOAP_FMAC1 tt__ReplayCapabilities * SOAP_FMAC2 soap_instantiate_tt__ReplayCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline tt__ReplayCapabilities * soap_new_tt__ReplayCapabilities(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ReplayCapabilities(soap, n, NULL, NULL, NULL);
}

inline tt__ReplayCapabilities * soap_new_req_tt__ReplayCapabilities(
	struct soap *soap,
	const std::string& XAddr)
{
	tt__ReplayCapabilities *_p = soap_new_tt__ReplayCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ReplayCapabilities::XAddr = XAddr;
	}
	return _p;
}

inline tt__ReplayCapabilities * soap_new_set_tt__ReplayCapabilities(
	struct soap *soap,
	const std::string& XAddr,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__ReplayCapabilities *_p = soap_new_tt__ReplayCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ReplayCapabilities::XAddr = XAddr;
		_p->tt__ReplayCapabilities::__any = __any;
		_p->tt__ReplayCapabilities::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__ReplayCapabilities(struct soap *soap, tt__ReplayCapabilities const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ReplayCapabilities", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__ReplayCapabilities * SOAP_FMAC4 soap_get_tt__ReplayCapabilities(struct soap*, tt__ReplayCapabilities *, const char*, const char*);

inline int soap_read_tt__ReplayCapabilities(struct soap *soap, tt__ReplayCapabilities *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__ReplayCapabilities(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__SearchCapabilities_DEFINED
#define SOAP_TYPE_tt__SearchCapabilities_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__SearchCapabilities(struct soap*, const char*, int, const tt__SearchCapabilities *, const char*);
SOAP_FMAC3 tt__SearchCapabilities * SOAP_FMAC4 soap_in_tt__SearchCapabilities(struct soap*, const char*, tt__SearchCapabilities *, const char*);
SOAP_FMAC1 tt__SearchCapabilities * SOAP_FMAC2 soap_instantiate_tt__SearchCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline tt__SearchCapabilities * soap_new_tt__SearchCapabilities(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__SearchCapabilities(soap, n, NULL, NULL, NULL);
}

inline tt__SearchCapabilities * soap_new_req_tt__SearchCapabilities(
	struct soap *soap,
	const std::string& XAddr,
	bool MetadataSearch)
{
	tt__SearchCapabilities *_p = soap_new_tt__SearchCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__SearchCapabilities::XAddr = XAddr;
		_p->tt__SearchCapabilities::MetadataSearch = MetadataSearch;
	}
	return _p;
}

inline tt__SearchCapabilities * soap_new_set_tt__SearchCapabilities(
	struct soap *soap,
	const std::string& XAddr,
	bool MetadataSearch,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__SearchCapabilities *_p = soap_new_tt__SearchCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__SearchCapabilities::XAddr = XAddr;
		_p->tt__SearchCapabilities::MetadataSearch = MetadataSearch;
		_p->tt__SearchCapabilities::__any = __any;
		_p->tt__SearchCapabilities::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__SearchCapabilities(struct soap *soap, tt__SearchCapabilities const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:SearchCapabilities", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__SearchCapabilities * SOAP_FMAC4 soap_get_tt__SearchCapabilities(struct soap*, tt__SearchCapabilities *, const char*, const char*);

inline int soap_read_tt__SearchCapabilities(struct soap *soap, tt__SearchCapabilities *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__SearchCapabilities(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__RecordingCapabilities_DEFINED
#define SOAP_TYPE_tt__RecordingCapabilities_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RecordingCapabilities(struct soap*, const char*, int, const tt__RecordingCapabilities *, const char*);
SOAP_FMAC3 tt__RecordingCapabilities * SOAP_FMAC4 soap_in_tt__RecordingCapabilities(struct soap*, const char*, tt__RecordingCapabilities *, const char*);
SOAP_FMAC1 tt__RecordingCapabilities * SOAP_FMAC2 soap_instantiate_tt__RecordingCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline tt__RecordingCapabilities * soap_new_tt__RecordingCapabilities(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__RecordingCapabilities(soap, n, NULL, NULL, NULL);
}

inline tt__RecordingCapabilities * soap_new_req_tt__RecordingCapabilities(
	struct soap *soap,
	const std::string& XAddr,
	bool ReceiverSource,
	bool MediaProfileSource,
	bool DynamicRecordings,
	bool DynamicTracks,
	int MaxStringLength)
{
	tt__RecordingCapabilities *_p = soap_new_tt__RecordingCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__RecordingCapabilities::XAddr = XAddr;
		_p->tt__RecordingCapabilities::ReceiverSource = ReceiverSource;
		_p->tt__RecordingCapabilities::MediaProfileSource = MediaProfileSource;
		_p->tt__RecordingCapabilities::DynamicRecordings = DynamicRecordings;
		_p->tt__RecordingCapabilities::DynamicTracks = DynamicTracks;
		_p->tt__RecordingCapabilities::MaxStringLength = MaxStringLength;
	}
	return _p;
}

inline tt__RecordingCapabilities * soap_new_set_tt__RecordingCapabilities(
	struct soap *soap,
	const std::string& XAddr,
	bool ReceiverSource,
	bool MediaProfileSource,
	bool DynamicRecordings,
	bool DynamicTracks,
	int MaxStringLength,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__RecordingCapabilities *_p = soap_new_tt__RecordingCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__RecordingCapabilities::XAddr = XAddr;
		_p->tt__RecordingCapabilities::ReceiverSource = ReceiverSource;
		_p->tt__RecordingCapabilities::MediaProfileSource = MediaProfileSource;
		_p->tt__RecordingCapabilities::DynamicRecordings = DynamicRecordings;
		_p->tt__RecordingCapabilities::DynamicTracks = DynamicTracks;
		_p->tt__RecordingCapabilities::MaxStringLength = MaxStringLength;
		_p->tt__RecordingCapabilities::__any = __any;
		_p->tt__RecordingCapabilities::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__RecordingCapabilities(struct soap *soap, tt__RecordingCapabilities const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:RecordingCapabilities", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__RecordingCapabilities * SOAP_FMAC4 soap_get_tt__RecordingCapabilities(struct soap*, tt__RecordingCapabilities *, const char*, const char*);

inline int soap_read_tt__RecordingCapabilities(struct soap *soap, tt__RecordingCapabilities *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__RecordingCapabilities(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__DisplayCapabilities_DEFINED
#define SOAP_TYPE_tt__DisplayCapabilities_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__DisplayCapabilities(struct soap*, const char*, int, const tt__DisplayCapabilities *, const char*);
SOAP_FMAC3 tt__DisplayCapabilities * SOAP_FMAC4 soap_in_tt__DisplayCapabilities(struct soap*, const char*, tt__DisplayCapabilities *, const char*);
SOAP_FMAC1 tt__DisplayCapabilities * SOAP_FMAC2 soap_instantiate_tt__DisplayCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline tt__DisplayCapabilities * soap_new_tt__DisplayCapabilities(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__DisplayCapabilities(soap, n, NULL, NULL, NULL);
}

inline tt__DisplayCapabilities * soap_new_req_tt__DisplayCapabilities(
	struct soap *soap,
	const std::string& XAddr,
	bool FixedLayout)
{
	tt__DisplayCapabilities *_p = soap_new_tt__DisplayCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__DisplayCapabilities::XAddr = XAddr;
		_p->tt__DisplayCapabilities::FixedLayout = FixedLayout;
	}
	return _p;
}

inline tt__DisplayCapabilities * soap_new_set_tt__DisplayCapabilities(
	struct soap *soap,
	const std::string& XAddr,
	bool FixedLayout,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__DisplayCapabilities *_p = soap_new_tt__DisplayCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__DisplayCapabilities::XAddr = XAddr;
		_p->tt__DisplayCapabilities::FixedLayout = FixedLayout;
		_p->tt__DisplayCapabilities::__any = __any;
		_p->tt__DisplayCapabilities::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__DisplayCapabilities(struct soap *soap, tt__DisplayCapabilities const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:DisplayCapabilities", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__DisplayCapabilities * SOAP_FMAC4 soap_get_tt__DisplayCapabilities(struct soap*, tt__DisplayCapabilities *, const char*, const char*);

inline int soap_read_tt__DisplayCapabilities(struct soap *soap, tt__DisplayCapabilities *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__DisplayCapabilities(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__DeviceIOCapabilities_DEFINED
#define SOAP_TYPE_tt__DeviceIOCapabilities_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__DeviceIOCapabilities(struct soap*, const char*, int, const tt__DeviceIOCapabilities *, const char*);
SOAP_FMAC3 tt__DeviceIOCapabilities * SOAP_FMAC4 soap_in_tt__DeviceIOCapabilities(struct soap*, const char*, tt__DeviceIOCapabilities *, const char*);
SOAP_FMAC1 tt__DeviceIOCapabilities * SOAP_FMAC2 soap_instantiate_tt__DeviceIOCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline tt__DeviceIOCapabilities * soap_new_tt__DeviceIOCapabilities(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__DeviceIOCapabilities(soap, n, NULL, NULL, NULL);
}

inline tt__DeviceIOCapabilities * soap_new_req_tt__DeviceIOCapabilities(
	struct soap *soap,
	const std::string& XAddr,
	int VideoSources,
	int VideoOutputs,
	int AudioSources,
	int AudioOutputs,
	int RelayOutputs)
{
	tt__DeviceIOCapabilities *_p = soap_new_tt__DeviceIOCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__DeviceIOCapabilities::XAddr = XAddr;
		_p->tt__DeviceIOCapabilities::VideoSources = VideoSources;
		_p->tt__DeviceIOCapabilities::VideoOutputs = VideoOutputs;
		_p->tt__DeviceIOCapabilities::AudioSources = AudioSources;
		_p->tt__DeviceIOCapabilities::AudioOutputs = AudioOutputs;
		_p->tt__DeviceIOCapabilities::RelayOutputs = RelayOutputs;
	}
	return _p;
}

inline tt__DeviceIOCapabilities * soap_new_set_tt__DeviceIOCapabilities(
	struct soap *soap,
	const std::string& XAddr,
	int VideoSources,
	int VideoOutputs,
	int AudioSources,
	int AudioOutputs,
	int RelayOutputs,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__DeviceIOCapabilities *_p = soap_new_tt__DeviceIOCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__DeviceIOCapabilities::XAddr = XAddr;
		_p->tt__DeviceIOCapabilities::VideoSources = VideoSources;
		_p->tt__DeviceIOCapabilities::VideoOutputs = VideoOutputs;
		_p->tt__DeviceIOCapabilities::AudioSources = AudioSources;
		_p->tt__DeviceIOCapabilities::AudioOutputs = AudioOutputs;
		_p->tt__DeviceIOCapabilities::RelayOutputs = RelayOutputs;
		_p->tt__DeviceIOCapabilities::__any = __any;
		_p->tt__DeviceIOCapabilities::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__DeviceIOCapabilities(struct soap *soap, tt__DeviceIOCapabilities const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:DeviceIOCapabilities", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__DeviceIOCapabilities * SOAP_FMAC4 soap_get_tt__DeviceIOCapabilities(struct soap*, tt__DeviceIOCapabilities *, const char*, const char*);

inline int soap_read_tt__DeviceIOCapabilities(struct soap *soap, tt__DeviceIOCapabilities *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__DeviceIOCapabilities(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__PTZCapabilities_DEFINED
#define SOAP_TYPE_tt__PTZCapabilities_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZCapabilities(struct soap*, const char*, int, const tt__PTZCapabilities *, const char*);
SOAP_FMAC3 tt__PTZCapabilities * SOAP_FMAC4 soap_in_tt__PTZCapabilities(struct soap*, const char*, tt__PTZCapabilities *, const char*);
SOAP_FMAC1 tt__PTZCapabilities * SOAP_FMAC2 soap_instantiate_tt__PTZCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZCapabilities * soap_new_tt__PTZCapabilities(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZCapabilities(soap, n, NULL, NULL, NULL);
}

inline tt__PTZCapabilities * soap_new_req_tt__PTZCapabilities(
	struct soap *soap,
	const std::string& XAddr)
{
	tt__PTZCapabilities *_p = soap_new_tt__PTZCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZCapabilities::XAddr = XAddr;
	}
	return _p;
}

inline tt__PTZCapabilities * soap_new_set_tt__PTZCapabilities(
	struct soap *soap,
	const std::string& XAddr,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__PTZCapabilities *_p = soap_new_tt__PTZCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZCapabilities::XAddr = XAddr;
		_p->tt__PTZCapabilities::__any = __any;
		_p->tt__PTZCapabilities::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__PTZCapabilities(struct soap *soap, tt__PTZCapabilities const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZCapabilities", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZCapabilities * SOAP_FMAC4 soap_get_tt__PTZCapabilities(struct soap*, tt__PTZCapabilities *, const char*, const char*);

inline int soap_read_tt__PTZCapabilities(struct soap *soap, tt__PTZCapabilities *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__PTZCapabilities(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__ImagingCapabilities_DEFINED
#define SOAP_TYPE_tt__ImagingCapabilities_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ImagingCapabilities(struct soap*, const char*, int, const tt__ImagingCapabilities *, const char*);
SOAP_FMAC3 tt__ImagingCapabilities * SOAP_FMAC4 soap_in_tt__ImagingCapabilities(struct soap*, const char*, tt__ImagingCapabilities *, const char*);
SOAP_FMAC1 tt__ImagingCapabilities * SOAP_FMAC2 soap_instantiate_tt__ImagingCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline tt__ImagingCapabilities * soap_new_tt__ImagingCapabilities(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ImagingCapabilities(soap, n, NULL, NULL, NULL);
}

inline tt__ImagingCapabilities * soap_new_req_tt__ImagingCapabilities(
	struct soap *soap,
	const std::string& XAddr)
{
	tt__ImagingCapabilities *_p = soap_new_tt__ImagingCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ImagingCapabilities::XAddr = XAddr;
	}
	return _p;
}

inline tt__ImagingCapabilities * soap_new_set_tt__ImagingCapabilities(
	struct soap *soap,
	const std::string& XAddr,
	char *__anyAttribute,
	char *__item1)
{
	tt__ImagingCapabilities *_p = soap_new_tt__ImagingCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ImagingCapabilities::XAddr = XAddr;
		_p->tt__ImagingCapabilities::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__ImagingCapabilities(struct soap *soap, tt__ImagingCapabilities const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ImagingCapabilities", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__ImagingCapabilities * SOAP_FMAC4 soap_get_tt__ImagingCapabilities(struct soap*, tt__ImagingCapabilities *, const char*, const char*);

inline int soap_read_tt__ImagingCapabilities(struct soap *soap, tt__ImagingCapabilities *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__ImagingCapabilities(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__OnvifVersion_DEFINED
#define SOAP_TYPE_tt__OnvifVersion_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__OnvifVersion(struct soap*, const char*, int, const tt__OnvifVersion *, const char*);
SOAP_FMAC3 tt__OnvifVersion * SOAP_FMAC4 soap_in_tt__OnvifVersion(struct soap*, const char*, tt__OnvifVersion *, const char*);
SOAP_FMAC1 tt__OnvifVersion * SOAP_FMAC2 soap_instantiate_tt__OnvifVersion(struct soap*, int, const char*, const char*, size_t*);

inline tt__OnvifVersion * soap_new_tt__OnvifVersion(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__OnvifVersion(soap, n, NULL, NULL, NULL);
}

inline tt__OnvifVersion * soap_new_req_tt__OnvifVersion(
	struct soap *soap,
	int Major,
	int Minor)
{
	tt__OnvifVersion *_p = soap_new_tt__OnvifVersion(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__OnvifVersion::Major = Major;
		_p->tt__OnvifVersion::Minor = Minor;
	}
	return _p;
}

inline tt__OnvifVersion * soap_new_set_tt__OnvifVersion(
	struct soap *soap,
	int Major,
	int Minor,
	char *__item1)
{
	tt__OnvifVersion *_p = soap_new_tt__OnvifVersion(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__OnvifVersion::Major = Major;
		_p->tt__OnvifVersion::Minor = Minor;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__OnvifVersion(struct soap *soap, tt__OnvifVersion const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:OnvifVersion", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__OnvifVersion * SOAP_FMAC4 soap_get_tt__OnvifVersion(struct soap*, tt__OnvifVersion *, const char*, const char*);

inline int soap_read_tt__OnvifVersion(struct soap *soap, tt__OnvifVersion *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__OnvifVersion(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__SystemCapabilitiesExtension2_DEFINED
#define SOAP_TYPE_tt__SystemCapabilitiesExtension2_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__SystemCapabilitiesExtension2(struct soap*, const char*, int, const tt__SystemCapabilitiesExtension2 *, const char*);
SOAP_FMAC3 tt__SystemCapabilitiesExtension2 * SOAP_FMAC4 soap_in_tt__SystemCapabilitiesExtension2(struct soap*, const char*, tt__SystemCapabilitiesExtension2 *, const char*);
SOAP_FMAC1 tt__SystemCapabilitiesExtension2 * SOAP_FMAC2 soap_instantiate_tt__SystemCapabilitiesExtension2(struct soap*, int, const char*, const char*, size_t*);

inline tt__SystemCapabilitiesExtension2 * soap_new_tt__SystemCapabilitiesExtension2(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__SystemCapabilitiesExtension2(soap, n, NULL, NULL, NULL);
}

inline tt__SystemCapabilitiesExtension2 * soap_new_req_tt__SystemCapabilitiesExtension2(
	struct soap *soap)
{
	tt__SystemCapabilitiesExtension2 *_p = soap_new_tt__SystemCapabilitiesExtension2(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__SystemCapabilitiesExtension2 * soap_new_set_tt__SystemCapabilitiesExtension2(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__SystemCapabilitiesExtension2 *_p = soap_new_tt__SystemCapabilitiesExtension2(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__SystemCapabilitiesExtension2::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__SystemCapabilitiesExtension2(struct soap *soap, tt__SystemCapabilitiesExtension2 const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:SystemCapabilitiesExtension2", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__SystemCapabilitiesExtension2 * SOAP_FMAC4 soap_get_tt__SystemCapabilitiesExtension2(struct soap*, tt__SystemCapabilitiesExtension2 *, const char*, const char*);

inline int soap_read_tt__SystemCapabilitiesExtension2(struct soap *soap, tt__SystemCapabilitiesExtension2 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__SystemCapabilitiesExtension2(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__SystemCapabilitiesExtension_DEFINED
#define SOAP_TYPE_tt__SystemCapabilitiesExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__SystemCapabilitiesExtension(struct soap*, const char*, int, const tt__SystemCapabilitiesExtension *, const char*);
SOAP_FMAC3 tt__SystemCapabilitiesExtension * SOAP_FMAC4 soap_in_tt__SystemCapabilitiesExtension(struct soap*, const char*, tt__SystemCapabilitiesExtension *, const char*);
SOAP_FMAC1 tt__SystemCapabilitiesExtension * SOAP_FMAC2 soap_instantiate_tt__SystemCapabilitiesExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__SystemCapabilitiesExtension * soap_new_tt__SystemCapabilitiesExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__SystemCapabilitiesExtension(soap, n, NULL, NULL, NULL);
}

inline tt__SystemCapabilitiesExtension * soap_new_req_tt__SystemCapabilitiesExtension(
	struct soap *soap)
{
	tt__SystemCapabilitiesExtension *_p = soap_new_tt__SystemCapabilitiesExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__SystemCapabilitiesExtension * soap_new_set_tt__SystemCapabilitiesExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	bool *HttpFirmwareUpgrade,
	bool *HttpSystemBackup,
	bool *HttpSystemLogging,
	bool *HttpSupportInformation,
	tt__SystemCapabilitiesExtension2 *Extension,
	char *__item1)
{
	tt__SystemCapabilitiesExtension *_p = soap_new_tt__SystemCapabilitiesExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__SystemCapabilitiesExtension::__any = __any;
		_p->tt__SystemCapabilitiesExtension::HttpFirmwareUpgrade = HttpFirmwareUpgrade;
		_p->tt__SystemCapabilitiesExtension::HttpSystemBackup = HttpSystemBackup;
		_p->tt__SystemCapabilitiesExtension::HttpSystemLogging = HttpSystemLogging;
		_p->tt__SystemCapabilitiesExtension::HttpSupportInformation = HttpSupportInformation;
		_p->tt__SystemCapabilitiesExtension::Extension = Extension;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__SystemCapabilitiesExtension(struct soap *soap, tt__SystemCapabilitiesExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:SystemCapabilitiesExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__SystemCapabilitiesExtension * SOAP_FMAC4 soap_get_tt__SystemCapabilitiesExtension(struct soap*, tt__SystemCapabilitiesExtension *, const char*, const char*);

inline int soap_read_tt__SystemCapabilitiesExtension(struct soap *soap, tt__SystemCapabilitiesExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__SystemCapabilitiesExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__SystemCapabilities_DEFINED
#define SOAP_TYPE_tt__SystemCapabilities_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__SystemCapabilities(struct soap*, const char*, int, const tt__SystemCapabilities *, const char*);
SOAP_FMAC3 tt__SystemCapabilities * SOAP_FMAC4 soap_in_tt__SystemCapabilities(struct soap*, const char*, tt__SystemCapabilities *, const char*);
SOAP_FMAC1 tt__SystemCapabilities * SOAP_FMAC2 soap_instantiate_tt__SystemCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline tt__SystemCapabilities * soap_new_tt__SystemCapabilities(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__SystemCapabilities(soap, n, NULL, NULL, NULL);
}

inline tt__SystemCapabilities * soap_new_req_tt__SystemCapabilities(
	struct soap *soap,
	bool DiscoveryResolve,
	bool DiscoveryBye,
	bool RemoteDiscovery,
	bool SystemBackup,
	bool SystemLogging,
	bool FirmwareUpgrade,
	const std::vector<tt__OnvifVersion *> & SupportedVersions)
{
	tt__SystemCapabilities *_p = soap_new_tt__SystemCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__SystemCapabilities::DiscoveryResolve = DiscoveryResolve;
		_p->tt__SystemCapabilities::DiscoveryBye = DiscoveryBye;
		_p->tt__SystemCapabilities::RemoteDiscovery = RemoteDiscovery;
		_p->tt__SystemCapabilities::SystemBackup = SystemBackup;
		_p->tt__SystemCapabilities::SystemLogging = SystemLogging;
		_p->tt__SystemCapabilities::FirmwareUpgrade = FirmwareUpgrade;
		_p->tt__SystemCapabilities::SupportedVersions = SupportedVersions;
	}
	return _p;
}

inline tt__SystemCapabilities * soap_new_set_tt__SystemCapabilities(
	struct soap *soap,
	bool DiscoveryResolve,
	bool DiscoveryBye,
	bool RemoteDiscovery,
	bool SystemBackup,
	bool SystemLogging,
	bool FirmwareUpgrade,
	const std::vector<tt__OnvifVersion *> & SupportedVersions,
	tt__SystemCapabilitiesExtension *Extension,
	char *__anyAttribute,
	char *__item1)
{
	tt__SystemCapabilities *_p = soap_new_tt__SystemCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__SystemCapabilities::DiscoveryResolve = DiscoveryResolve;
		_p->tt__SystemCapabilities::DiscoveryBye = DiscoveryBye;
		_p->tt__SystemCapabilities::RemoteDiscovery = RemoteDiscovery;
		_p->tt__SystemCapabilities::SystemBackup = SystemBackup;
		_p->tt__SystemCapabilities::SystemLogging = SystemLogging;
		_p->tt__SystemCapabilities::FirmwareUpgrade = FirmwareUpgrade;
		_p->tt__SystemCapabilities::SupportedVersions = SupportedVersions;
		_p->tt__SystemCapabilities::Extension = Extension;
		_p->tt__SystemCapabilities::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__SystemCapabilities(struct soap *soap, tt__SystemCapabilities const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:SystemCapabilities", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__SystemCapabilities * SOAP_FMAC4 soap_get_tt__SystemCapabilities(struct soap*, tt__SystemCapabilities *, const char*, const char*);

inline int soap_read_tt__SystemCapabilities(struct soap *soap, tt__SystemCapabilities *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__SystemCapabilities(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__SecurityCapabilitiesExtension2_DEFINED
#define SOAP_TYPE_tt__SecurityCapabilitiesExtension2_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__SecurityCapabilitiesExtension2(struct soap*, const char*, int, const tt__SecurityCapabilitiesExtension2 *, const char*);
SOAP_FMAC3 tt__SecurityCapabilitiesExtension2 * SOAP_FMAC4 soap_in_tt__SecurityCapabilitiesExtension2(struct soap*, const char*, tt__SecurityCapabilitiesExtension2 *, const char*);
SOAP_FMAC1 tt__SecurityCapabilitiesExtension2 * SOAP_FMAC2 soap_instantiate_tt__SecurityCapabilitiesExtension2(struct soap*, int, const char*, const char*, size_t*);

inline tt__SecurityCapabilitiesExtension2 * soap_new_tt__SecurityCapabilitiesExtension2(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__SecurityCapabilitiesExtension2(soap, n, NULL, NULL, NULL);
}

inline tt__SecurityCapabilitiesExtension2 * soap_new_req_tt__SecurityCapabilitiesExtension2(
	struct soap *soap,
	bool Dot1X,
	bool RemoteUserHandling)
{
	tt__SecurityCapabilitiesExtension2 *_p = soap_new_tt__SecurityCapabilitiesExtension2(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__SecurityCapabilitiesExtension2::Dot1X = Dot1X;
		_p->tt__SecurityCapabilitiesExtension2::RemoteUserHandling = RemoteUserHandling;
	}
	return _p;
}

inline tt__SecurityCapabilitiesExtension2 * soap_new_set_tt__SecurityCapabilitiesExtension2(
	struct soap *soap,
	bool Dot1X,
	const std::vector<int> & SupportedEAPMethod,
	bool RemoteUserHandling,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__SecurityCapabilitiesExtension2 *_p = soap_new_tt__SecurityCapabilitiesExtension2(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__SecurityCapabilitiesExtension2::Dot1X = Dot1X;
		_p->tt__SecurityCapabilitiesExtension2::SupportedEAPMethod = SupportedEAPMethod;
		_p->tt__SecurityCapabilitiesExtension2::RemoteUserHandling = RemoteUserHandling;
		_p->tt__SecurityCapabilitiesExtension2::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__SecurityCapabilitiesExtension2(struct soap *soap, tt__SecurityCapabilitiesExtension2 const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:SecurityCapabilitiesExtension2", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__SecurityCapabilitiesExtension2 * SOAP_FMAC4 soap_get_tt__SecurityCapabilitiesExtension2(struct soap*, tt__SecurityCapabilitiesExtension2 *, const char*, const char*);

inline int soap_read_tt__SecurityCapabilitiesExtension2(struct soap *soap, tt__SecurityCapabilitiesExtension2 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__SecurityCapabilitiesExtension2(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__SecurityCapabilitiesExtension_DEFINED
#define SOAP_TYPE_tt__SecurityCapabilitiesExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__SecurityCapabilitiesExtension(struct soap*, const char*, int, const tt__SecurityCapabilitiesExtension *, const char*);
SOAP_FMAC3 tt__SecurityCapabilitiesExtension * SOAP_FMAC4 soap_in_tt__SecurityCapabilitiesExtension(struct soap*, const char*, tt__SecurityCapabilitiesExtension *, const char*);
SOAP_FMAC1 tt__SecurityCapabilitiesExtension * SOAP_FMAC2 soap_instantiate_tt__SecurityCapabilitiesExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__SecurityCapabilitiesExtension * soap_new_tt__SecurityCapabilitiesExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__SecurityCapabilitiesExtension(soap, n, NULL, NULL, NULL);
}

inline tt__SecurityCapabilitiesExtension * soap_new_req_tt__SecurityCapabilitiesExtension(
	struct soap *soap,
	bool TLS1_x002e0)
{
	tt__SecurityCapabilitiesExtension *_p = soap_new_tt__SecurityCapabilitiesExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__SecurityCapabilitiesExtension::TLS1_x002e0 = TLS1_x002e0;
	}
	return _p;
}

inline tt__SecurityCapabilitiesExtension * soap_new_set_tt__SecurityCapabilitiesExtension(
	struct soap *soap,
	bool TLS1_x002e0,
	tt__SecurityCapabilitiesExtension2 *Extension,
	char *__item1)
{
	tt__SecurityCapabilitiesExtension *_p = soap_new_tt__SecurityCapabilitiesExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__SecurityCapabilitiesExtension::TLS1_x002e0 = TLS1_x002e0;
		_p->tt__SecurityCapabilitiesExtension::Extension = Extension;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__SecurityCapabilitiesExtension(struct soap *soap, tt__SecurityCapabilitiesExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:SecurityCapabilitiesExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__SecurityCapabilitiesExtension * SOAP_FMAC4 soap_get_tt__SecurityCapabilitiesExtension(struct soap*, tt__SecurityCapabilitiesExtension *, const char*, const char*);

inline int soap_read_tt__SecurityCapabilitiesExtension(struct soap *soap, tt__SecurityCapabilitiesExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__SecurityCapabilitiesExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__SecurityCapabilities_DEFINED
#define SOAP_TYPE_tt__SecurityCapabilities_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__SecurityCapabilities(struct soap*, const char*, int, const tt__SecurityCapabilities *, const char*);
SOAP_FMAC3 tt__SecurityCapabilities * SOAP_FMAC4 soap_in_tt__SecurityCapabilities(struct soap*, const char*, tt__SecurityCapabilities *, const char*);
SOAP_FMAC1 tt__SecurityCapabilities * SOAP_FMAC2 soap_instantiate_tt__SecurityCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline tt__SecurityCapabilities * soap_new_tt__SecurityCapabilities(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__SecurityCapabilities(soap, n, NULL, NULL, NULL);
}

inline tt__SecurityCapabilities * soap_new_req_tt__SecurityCapabilities(
	struct soap *soap,
	bool TLS1_x002e1,
	bool TLS1_x002e2,
	bool OnboardKeyGeneration,
	bool AccessPolicyConfig,
	bool X_x002e509Token,
	bool SAMLToken,
	bool KerberosToken,
	bool RELToken)
{
	tt__SecurityCapabilities *_p = soap_new_tt__SecurityCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__SecurityCapabilities::TLS1_x002e1 = TLS1_x002e1;
		_p->tt__SecurityCapabilities::TLS1_x002e2 = TLS1_x002e2;
		_p->tt__SecurityCapabilities::OnboardKeyGeneration = OnboardKeyGeneration;
		_p->tt__SecurityCapabilities::AccessPolicyConfig = AccessPolicyConfig;
		_p->tt__SecurityCapabilities::X_x002e509Token = X_x002e509Token;
		_p->tt__SecurityCapabilities::SAMLToken = SAMLToken;
		_p->tt__SecurityCapabilities::KerberosToken = KerberosToken;
		_p->tt__SecurityCapabilities::RELToken = RELToken;
	}
	return _p;
}

inline tt__SecurityCapabilities * soap_new_set_tt__SecurityCapabilities(
	struct soap *soap,
	bool TLS1_x002e1,
	bool TLS1_x002e2,
	bool OnboardKeyGeneration,
	bool AccessPolicyConfig,
	bool X_x002e509Token,
	bool SAMLToken,
	bool KerberosToken,
	bool RELToken,
	const std::vector<char *> & __any,
	tt__SecurityCapabilitiesExtension *Extension,
	char *__anyAttribute,
	char *__item1)
{
	tt__SecurityCapabilities *_p = soap_new_tt__SecurityCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__SecurityCapabilities::TLS1_x002e1 = TLS1_x002e1;
		_p->tt__SecurityCapabilities::TLS1_x002e2 = TLS1_x002e2;
		_p->tt__SecurityCapabilities::OnboardKeyGeneration = OnboardKeyGeneration;
		_p->tt__SecurityCapabilities::AccessPolicyConfig = AccessPolicyConfig;
		_p->tt__SecurityCapabilities::X_x002e509Token = X_x002e509Token;
		_p->tt__SecurityCapabilities::SAMLToken = SAMLToken;
		_p->tt__SecurityCapabilities::KerberosToken = KerberosToken;
		_p->tt__SecurityCapabilities::RELToken = RELToken;
		_p->tt__SecurityCapabilities::__any = __any;
		_p->tt__SecurityCapabilities::Extension = Extension;
		_p->tt__SecurityCapabilities::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__SecurityCapabilities(struct soap *soap, tt__SecurityCapabilities const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:SecurityCapabilities", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__SecurityCapabilities * SOAP_FMAC4 soap_get_tt__SecurityCapabilities(struct soap*, tt__SecurityCapabilities *, const char*, const char*);

inline int soap_read_tt__SecurityCapabilities(struct soap *soap, tt__SecurityCapabilities *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__SecurityCapabilities(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__NetworkCapabilitiesExtension2_DEFINED
#define SOAP_TYPE_tt__NetworkCapabilitiesExtension2_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__NetworkCapabilitiesExtension2(struct soap*, const char*, int, const tt__NetworkCapabilitiesExtension2 *, const char*);
SOAP_FMAC3 tt__NetworkCapabilitiesExtension2 * SOAP_FMAC4 soap_in_tt__NetworkCapabilitiesExtension2(struct soap*, const char*, tt__NetworkCapabilitiesExtension2 *, const char*);
SOAP_FMAC1 tt__NetworkCapabilitiesExtension2 * SOAP_FMAC2 soap_instantiate_tt__NetworkCapabilitiesExtension2(struct soap*, int, const char*, const char*, size_t*);

inline tt__NetworkCapabilitiesExtension2 * soap_new_tt__NetworkCapabilitiesExtension2(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__NetworkCapabilitiesExtension2(soap, n, NULL, NULL, NULL);
}

inline tt__NetworkCapabilitiesExtension2 * soap_new_req_tt__NetworkCapabilitiesExtension2(
	struct soap *soap)
{
	tt__NetworkCapabilitiesExtension2 *_p = soap_new_tt__NetworkCapabilitiesExtension2(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__NetworkCapabilitiesExtension2 * soap_new_set_tt__NetworkCapabilitiesExtension2(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__NetworkCapabilitiesExtension2 *_p = soap_new_tt__NetworkCapabilitiesExtension2(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__NetworkCapabilitiesExtension2::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__NetworkCapabilitiesExtension2(struct soap *soap, tt__NetworkCapabilitiesExtension2 const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkCapabilitiesExtension2", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__NetworkCapabilitiesExtension2 * SOAP_FMAC4 soap_get_tt__NetworkCapabilitiesExtension2(struct soap*, tt__NetworkCapabilitiesExtension2 *, const char*, const char*);

inline int soap_read_tt__NetworkCapabilitiesExtension2(struct soap *soap, tt__NetworkCapabilitiesExtension2 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__NetworkCapabilitiesExtension2(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__NetworkCapabilitiesExtension_DEFINED
#define SOAP_TYPE_tt__NetworkCapabilitiesExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__NetworkCapabilitiesExtension(struct soap*, const char*, int, const tt__NetworkCapabilitiesExtension *, const char*);
SOAP_FMAC3 tt__NetworkCapabilitiesExtension * SOAP_FMAC4 soap_in_tt__NetworkCapabilitiesExtension(struct soap*, const char*, tt__NetworkCapabilitiesExtension *, const char*);
SOAP_FMAC1 tt__NetworkCapabilitiesExtension * SOAP_FMAC2 soap_instantiate_tt__NetworkCapabilitiesExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__NetworkCapabilitiesExtension * soap_new_tt__NetworkCapabilitiesExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__NetworkCapabilitiesExtension(soap, n, NULL, NULL, NULL);
}

inline tt__NetworkCapabilitiesExtension * soap_new_req_tt__NetworkCapabilitiesExtension(
	struct soap *soap)
{
	tt__NetworkCapabilitiesExtension *_p = soap_new_tt__NetworkCapabilitiesExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__NetworkCapabilitiesExtension * soap_new_set_tt__NetworkCapabilitiesExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	bool *Dot11Configuration,
	tt__NetworkCapabilitiesExtension2 *Extension,
	char *__item1)
{
	tt__NetworkCapabilitiesExtension *_p = soap_new_tt__NetworkCapabilitiesExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__NetworkCapabilitiesExtension::__any = __any;
		_p->tt__NetworkCapabilitiesExtension::Dot11Configuration = Dot11Configuration;
		_p->tt__NetworkCapabilitiesExtension::Extension = Extension;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__NetworkCapabilitiesExtension(struct soap *soap, tt__NetworkCapabilitiesExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkCapabilitiesExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__NetworkCapabilitiesExtension * SOAP_FMAC4 soap_get_tt__NetworkCapabilitiesExtension(struct soap*, tt__NetworkCapabilitiesExtension *, const char*, const char*);

inline int soap_read_tt__NetworkCapabilitiesExtension(struct soap *soap, tt__NetworkCapabilitiesExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__NetworkCapabilitiesExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__NetworkCapabilities_DEFINED
#define SOAP_TYPE_tt__NetworkCapabilities_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__NetworkCapabilities(struct soap*, const char*, int, const tt__NetworkCapabilities *, const char*);
SOAP_FMAC3 tt__NetworkCapabilities * SOAP_FMAC4 soap_in_tt__NetworkCapabilities(struct soap*, const char*, tt__NetworkCapabilities *, const char*);
SOAP_FMAC1 tt__NetworkCapabilities * SOAP_FMAC2 soap_instantiate_tt__NetworkCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline tt__NetworkCapabilities * soap_new_tt__NetworkCapabilities(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__NetworkCapabilities(soap, n, NULL, NULL, NULL);
}

inline tt__NetworkCapabilities * soap_new_req_tt__NetworkCapabilities(
	struct soap *soap)
{
	tt__NetworkCapabilities *_p = soap_new_tt__NetworkCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__NetworkCapabilities * soap_new_set_tt__NetworkCapabilities(
	struct soap *soap,
	bool *IPFilter,
	bool *ZeroConfiguration,
	bool *IPVersion6,
	bool *DynDNS,
	tt__NetworkCapabilitiesExtension *Extension,
	char *__anyAttribute,
	char *__item1)
{
	tt__NetworkCapabilities *_p = soap_new_tt__NetworkCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__NetworkCapabilities::IPFilter = IPFilter;
		_p->tt__NetworkCapabilities::ZeroConfiguration = ZeroConfiguration;
		_p->tt__NetworkCapabilities::IPVersion6 = IPVersion6;
		_p->tt__NetworkCapabilities::DynDNS = DynDNS;
		_p->tt__NetworkCapabilities::Extension = Extension;
		_p->tt__NetworkCapabilities::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__NetworkCapabilities(struct soap *soap, tt__NetworkCapabilities const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkCapabilities", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__NetworkCapabilities * SOAP_FMAC4 soap_get_tt__NetworkCapabilities(struct soap*, tt__NetworkCapabilities *, const char*, const char*);

inline int soap_read_tt__NetworkCapabilities(struct soap *soap, tt__NetworkCapabilities *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__NetworkCapabilities(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__ProfileCapabilities_DEFINED
#define SOAP_TYPE_tt__ProfileCapabilities_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ProfileCapabilities(struct soap*, const char*, int, const tt__ProfileCapabilities *, const char*);
SOAP_FMAC3 tt__ProfileCapabilities * SOAP_FMAC4 soap_in_tt__ProfileCapabilities(struct soap*, const char*, tt__ProfileCapabilities *, const char*);
SOAP_FMAC1 tt__ProfileCapabilities * SOAP_FMAC2 soap_instantiate_tt__ProfileCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline tt__ProfileCapabilities * soap_new_tt__ProfileCapabilities(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ProfileCapabilities(soap, n, NULL, NULL, NULL);
}

inline tt__ProfileCapabilities * soap_new_req_tt__ProfileCapabilities(
	struct soap *soap,
	int MaximumNumberOfProfiles)
{
	tt__ProfileCapabilities *_p = soap_new_tt__ProfileCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ProfileCapabilities::MaximumNumberOfProfiles = MaximumNumberOfProfiles;
	}
	return _p;
}

inline tt__ProfileCapabilities * soap_new_set_tt__ProfileCapabilities(
	struct soap *soap,
	int MaximumNumberOfProfiles,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__ProfileCapabilities *_p = soap_new_tt__ProfileCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ProfileCapabilities::MaximumNumberOfProfiles = MaximumNumberOfProfiles;
		_p->tt__ProfileCapabilities::__any = __any;
		_p->tt__ProfileCapabilities::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__ProfileCapabilities(struct soap *soap, tt__ProfileCapabilities const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ProfileCapabilities", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__ProfileCapabilities * SOAP_FMAC4 soap_get_tt__ProfileCapabilities(struct soap*, tt__ProfileCapabilities *, const char*, const char*);

inline int soap_read_tt__ProfileCapabilities(struct soap *soap, tt__ProfileCapabilities *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__ProfileCapabilities(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__RealTimeStreamingCapabilitiesExtension_DEFINED
#define SOAP_TYPE_tt__RealTimeStreamingCapabilitiesExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RealTimeStreamingCapabilitiesExtension(struct soap*, const char*, int, const tt__RealTimeStreamingCapabilitiesExtension *, const char*);
SOAP_FMAC3 tt__RealTimeStreamingCapabilitiesExtension * SOAP_FMAC4 soap_in_tt__RealTimeStreamingCapabilitiesExtension(struct soap*, const char*, tt__RealTimeStreamingCapabilitiesExtension *, const char*);
SOAP_FMAC1 tt__RealTimeStreamingCapabilitiesExtension * SOAP_FMAC2 soap_instantiate_tt__RealTimeStreamingCapabilitiesExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__RealTimeStreamingCapabilitiesExtension * soap_new_tt__RealTimeStreamingCapabilitiesExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__RealTimeStreamingCapabilitiesExtension(soap, n, NULL, NULL, NULL);
}

inline tt__RealTimeStreamingCapabilitiesExtension * soap_new_req_tt__RealTimeStreamingCapabilitiesExtension(
	struct soap *soap)
{
	tt__RealTimeStreamingCapabilitiesExtension *_p = soap_new_tt__RealTimeStreamingCapabilitiesExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__RealTimeStreamingCapabilitiesExtension * soap_new_set_tt__RealTimeStreamingCapabilitiesExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__RealTimeStreamingCapabilitiesExtension *_p = soap_new_tt__RealTimeStreamingCapabilitiesExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__RealTimeStreamingCapabilitiesExtension::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__RealTimeStreamingCapabilitiesExtension(struct soap *soap, tt__RealTimeStreamingCapabilitiesExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:RealTimeStreamingCapabilitiesExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__RealTimeStreamingCapabilitiesExtension * SOAP_FMAC4 soap_get_tt__RealTimeStreamingCapabilitiesExtension(struct soap*, tt__RealTimeStreamingCapabilitiesExtension *, const char*, const char*);

inline int soap_read_tt__RealTimeStreamingCapabilitiesExtension(struct soap *soap, tt__RealTimeStreamingCapabilitiesExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__RealTimeStreamingCapabilitiesExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__RealTimeStreamingCapabilities_DEFINED
#define SOAP_TYPE_tt__RealTimeStreamingCapabilities_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RealTimeStreamingCapabilities(struct soap*, const char*, int, const tt__RealTimeStreamingCapabilities *, const char*);
SOAP_FMAC3 tt__RealTimeStreamingCapabilities * SOAP_FMAC4 soap_in_tt__RealTimeStreamingCapabilities(struct soap*, const char*, tt__RealTimeStreamingCapabilities *, const char*);
SOAP_FMAC1 tt__RealTimeStreamingCapabilities * SOAP_FMAC2 soap_instantiate_tt__RealTimeStreamingCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline tt__RealTimeStreamingCapabilities * soap_new_tt__RealTimeStreamingCapabilities(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__RealTimeStreamingCapabilities(soap, n, NULL, NULL, NULL);
}

inline tt__RealTimeStreamingCapabilities * soap_new_req_tt__RealTimeStreamingCapabilities(
	struct soap *soap)
{
	tt__RealTimeStreamingCapabilities *_p = soap_new_tt__RealTimeStreamingCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__RealTimeStreamingCapabilities * soap_new_set_tt__RealTimeStreamingCapabilities(
	struct soap *soap,
	bool *RTPMulticast,
	bool *RTP_USCORETCP,
	bool *RTP_USCORERTSP_USCORETCP,
	tt__RealTimeStreamingCapabilitiesExtension *Extension,
	char *__anyAttribute,
	char *__item1)
{
	tt__RealTimeStreamingCapabilities *_p = soap_new_tt__RealTimeStreamingCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__RealTimeStreamingCapabilities::RTPMulticast = RTPMulticast;
		_p->tt__RealTimeStreamingCapabilities::RTP_USCORETCP = RTP_USCORETCP;
		_p->tt__RealTimeStreamingCapabilities::RTP_USCORERTSP_USCORETCP = RTP_USCORERTSP_USCORETCP;
		_p->tt__RealTimeStreamingCapabilities::Extension = Extension;
		_p->tt__RealTimeStreamingCapabilities::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__RealTimeStreamingCapabilities(struct soap *soap, tt__RealTimeStreamingCapabilities const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:RealTimeStreamingCapabilities", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__RealTimeStreamingCapabilities * SOAP_FMAC4 soap_get_tt__RealTimeStreamingCapabilities(struct soap*, tt__RealTimeStreamingCapabilities *, const char*, const char*);

inline int soap_read_tt__RealTimeStreamingCapabilities(struct soap *soap, tt__RealTimeStreamingCapabilities *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__RealTimeStreamingCapabilities(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__MediaCapabilitiesExtension_DEFINED
#define SOAP_TYPE_tt__MediaCapabilitiesExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__MediaCapabilitiesExtension(struct soap*, const char*, int, const tt__MediaCapabilitiesExtension *, const char*);
SOAP_FMAC3 tt__MediaCapabilitiesExtension * SOAP_FMAC4 soap_in_tt__MediaCapabilitiesExtension(struct soap*, const char*, tt__MediaCapabilitiesExtension *, const char*);
SOAP_FMAC1 tt__MediaCapabilitiesExtension * SOAP_FMAC2 soap_instantiate_tt__MediaCapabilitiesExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__MediaCapabilitiesExtension * soap_new_tt__MediaCapabilitiesExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__MediaCapabilitiesExtension(soap, n, NULL, NULL, NULL);
}

inline tt__MediaCapabilitiesExtension * soap_new_req_tt__MediaCapabilitiesExtension(
	struct soap *soap,
	tt__ProfileCapabilities *ProfileCapabilities)
{
	tt__MediaCapabilitiesExtension *_p = soap_new_tt__MediaCapabilitiesExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__MediaCapabilitiesExtension::ProfileCapabilities = ProfileCapabilities;
	}
	return _p;
}

inline tt__MediaCapabilitiesExtension * soap_new_set_tt__MediaCapabilitiesExtension(
	struct soap *soap,
	tt__ProfileCapabilities *ProfileCapabilities,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__MediaCapabilitiesExtension *_p = soap_new_tt__MediaCapabilitiesExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__MediaCapabilitiesExtension::ProfileCapabilities = ProfileCapabilities;
		_p->tt__MediaCapabilitiesExtension::__any = __any;
		_p->tt__MediaCapabilitiesExtension::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__MediaCapabilitiesExtension(struct soap *soap, tt__MediaCapabilitiesExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:MediaCapabilitiesExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__MediaCapabilitiesExtension * SOAP_FMAC4 soap_get_tt__MediaCapabilitiesExtension(struct soap*, tt__MediaCapabilitiesExtension *, const char*, const char*);

inline int soap_read_tt__MediaCapabilitiesExtension(struct soap *soap, tt__MediaCapabilitiesExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__MediaCapabilitiesExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__MediaCapabilities_DEFINED
#define SOAP_TYPE_tt__MediaCapabilities_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__MediaCapabilities(struct soap*, const char*, int, const tt__MediaCapabilities *, const char*);
SOAP_FMAC3 tt__MediaCapabilities * SOAP_FMAC4 soap_in_tt__MediaCapabilities(struct soap*, const char*, tt__MediaCapabilities *, const char*);
SOAP_FMAC1 tt__MediaCapabilities * SOAP_FMAC2 soap_instantiate_tt__MediaCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline tt__MediaCapabilities * soap_new_tt__MediaCapabilities(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__MediaCapabilities(soap, n, NULL, NULL, NULL);
}

inline tt__MediaCapabilities * soap_new_req_tt__MediaCapabilities(
	struct soap *soap,
	const std::string& XAddr,
	tt__RealTimeStreamingCapabilities *StreamingCapabilities)
{
	tt__MediaCapabilities *_p = soap_new_tt__MediaCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__MediaCapabilities::XAddr = XAddr;
		_p->tt__MediaCapabilities::StreamingCapabilities = StreamingCapabilities;
	}
	return _p;
}

inline tt__MediaCapabilities * soap_new_set_tt__MediaCapabilities(
	struct soap *soap,
	const std::string& XAddr,
	tt__RealTimeStreamingCapabilities *StreamingCapabilities,
	const std::vector<char *> & __any,
	tt__MediaCapabilitiesExtension *Extension,
	char *__anyAttribute,
	char *__item1)
{
	tt__MediaCapabilities *_p = soap_new_tt__MediaCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__MediaCapabilities::XAddr = XAddr;
		_p->tt__MediaCapabilities::StreamingCapabilities = StreamingCapabilities;
		_p->tt__MediaCapabilities::__any = __any;
		_p->tt__MediaCapabilities::Extension = Extension;
		_p->tt__MediaCapabilities::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__MediaCapabilities(struct soap *soap, tt__MediaCapabilities const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:MediaCapabilities", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__MediaCapabilities * SOAP_FMAC4 soap_get_tt__MediaCapabilities(struct soap*, tt__MediaCapabilities *, const char*, const char*);

inline int soap_read_tt__MediaCapabilities(struct soap *soap, tt__MediaCapabilities *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__MediaCapabilities(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__IOCapabilitiesExtension2_DEFINED
#define SOAP_TYPE_tt__IOCapabilitiesExtension2_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IOCapabilitiesExtension2(struct soap*, const char*, int, const tt__IOCapabilitiesExtension2 *, const char*);
SOAP_FMAC3 tt__IOCapabilitiesExtension2 * SOAP_FMAC4 soap_in_tt__IOCapabilitiesExtension2(struct soap*, const char*, tt__IOCapabilitiesExtension2 *, const char*);
SOAP_FMAC1 tt__IOCapabilitiesExtension2 * SOAP_FMAC2 soap_instantiate_tt__IOCapabilitiesExtension2(struct soap*, int, const char*, const char*, size_t*);

inline tt__IOCapabilitiesExtension2 * soap_new_tt__IOCapabilitiesExtension2(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__IOCapabilitiesExtension2(soap, n, NULL, NULL, NULL);
}

inline tt__IOCapabilitiesExtension2 * soap_new_req_tt__IOCapabilitiesExtension2(
	struct soap *soap)
{
	tt__IOCapabilitiesExtension2 *_p = soap_new_tt__IOCapabilitiesExtension2(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__IOCapabilitiesExtension2 * soap_new_set_tt__IOCapabilitiesExtension2(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__IOCapabilitiesExtension2 *_p = soap_new_tt__IOCapabilitiesExtension2(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__IOCapabilitiesExtension2::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__IOCapabilitiesExtension2(struct soap *soap, tt__IOCapabilitiesExtension2 const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IOCapabilitiesExtension2", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__IOCapabilitiesExtension2 * SOAP_FMAC4 soap_get_tt__IOCapabilitiesExtension2(struct soap*, tt__IOCapabilitiesExtension2 *, const char*, const char*);

inline int soap_read_tt__IOCapabilitiesExtension2(struct soap *soap, tt__IOCapabilitiesExtension2 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__IOCapabilitiesExtension2(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__IOCapabilitiesExtension_DEFINED
#define SOAP_TYPE_tt__IOCapabilitiesExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IOCapabilitiesExtension(struct soap*, const char*, int, const tt__IOCapabilitiesExtension *, const char*);
SOAP_FMAC3 tt__IOCapabilitiesExtension * SOAP_FMAC4 soap_in_tt__IOCapabilitiesExtension(struct soap*, const char*, tt__IOCapabilitiesExtension *, const char*);
SOAP_FMAC1 tt__IOCapabilitiesExtension * SOAP_FMAC2 soap_instantiate_tt__IOCapabilitiesExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__IOCapabilitiesExtension * soap_new_tt__IOCapabilitiesExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__IOCapabilitiesExtension(soap, n, NULL, NULL, NULL);
}

inline tt__IOCapabilitiesExtension * soap_new_req_tt__IOCapabilitiesExtension(
	struct soap *soap,
	tt__IOCapabilitiesExtension2 *Extension)
{
	tt__IOCapabilitiesExtension *_p = soap_new_tt__IOCapabilitiesExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__IOCapabilitiesExtension::Extension = Extension;
	}
	return _p;
}

inline tt__IOCapabilitiesExtension * soap_new_set_tt__IOCapabilitiesExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	bool *Auxiliary,
	const std::vector<std::string> & AuxiliaryCommands,
	tt__IOCapabilitiesExtension2 *Extension,
	char *__anyAttribute,
	char *__item1)
{
	tt__IOCapabilitiesExtension *_p = soap_new_tt__IOCapabilitiesExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__IOCapabilitiesExtension::__any = __any;
		_p->tt__IOCapabilitiesExtension::Auxiliary = Auxiliary;
		_p->tt__IOCapabilitiesExtension::AuxiliaryCommands = AuxiliaryCommands;
		_p->tt__IOCapabilitiesExtension::Extension = Extension;
		_p->tt__IOCapabilitiesExtension::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__IOCapabilitiesExtension(struct soap *soap, tt__IOCapabilitiesExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IOCapabilitiesExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__IOCapabilitiesExtension * SOAP_FMAC4 soap_get_tt__IOCapabilitiesExtension(struct soap*, tt__IOCapabilitiesExtension *, const char*, const char*);

inline int soap_read_tt__IOCapabilitiesExtension(struct soap *soap, tt__IOCapabilitiesExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__IOCapabilitiesExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__IOCapabilities_DEFINED
#define SOAP_TYPE_tt__IOCapabilities_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IOCapabilities(struct soap*, const char*, int, const tt__IOCapabilities *, const char*);
SOAP_FMAC3 tt__IOCapabilities * SOAP_FMAC4 soap_in_tt__IOCapabilities(struct soap*, const char*, tt__IOCapabilities *, const char*);
SOAP_FMAC1 tt__IOCapabilities * SOAP_FMAC2 soap_instantiate_tt__IOCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline tt__IOCapabilities * soap_new_tt__IOCapabilities(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__IOCapabilities(soap, n, NULL, NULL, NULL);
}

inline tt__IOCapabilities * soap_new_req_tt__IOCapabilities(
	struct soap *soap)
{
	tt__IOCapabilities *_p = soap_new_tt__IOCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__IOCapabilities * soap_new_set_tt__IOCapabilities(
	struct soap *soap,
	int *InputConnectors,
	int *RelayOutputs,
	tt__IOCapabilitiesExtension *Extension,
	char *__anyAttribute,
	char *__item1)
{
	tt__IOCapabilities *_p = soap_new_tt__IOCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__IOCapabilities::InputConnectors = InputConnectors;
		_p->tt__IOCapabilities::RelayOutputs = RelayOutputs;
		_p->tt__IOCapabilities::Extension = Extension;
		_p->tt__IOCapabilities::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__IOCapabilities(struct soap *soap, tt__IOCapabilities const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IOCapabilities", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__IOCapabilities * SOAP_FMAC4 soap_get_tt__IOCapabilities(struct soap*, tt__IOCapabilities *, const char*, const char*);

inline int soap_read_tt__IOCapabilities(struct soap *soap, tt__IOCapabilities *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__IOCapabilities(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__EventCapabilities_DEFINED
#define SOAP_TYPE_tt__EventCapabilities_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__EventCapabilities(struct soap*, const char*, int, const tt__EventCapabilities *, const char*);
SOAP_FMAC3 tt__EventCapabilities * SOAP_FMAC4 soap_in_tt__EventCapabilities(struct soap*, const char*, tt__EventCapabilities *, const char*);
SOAP_FMAC1 tt__EventCapabilities * SOAP_FMAC2 soap_instantiate_tt__EventCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline tt__EventCapabilities * soap_new_tt__EventCapabilities(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__EventCapabilities(soap, n, NULL, NULL, NULL);
}

inline tt__EventCapabilities * soap_new_req_tt__EventCapabilities(
	struct soap *soap,
	const std::string& XAddr,
	bool WSSubscriptionPolicySupport,
	bool WSPullPointSupport,
	bool WSPausableSubscriptionManagerInterfaceSupport)
{
	tt__EventCapabilities *_p = soap_new_tt__EventCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__EventCapabilities::XAddr = XAddr;
		_p->tt__EventCapabilities::WSSubscriptionPolicySupport = WSSubscriptionPolicySupport;
		_p->tt__EventCapabilities::WSPullPointSupport = WSPullPointSupport;
		_p->tt__EventCapabilities::WSPausableSubscriptionManagerInterfaceSupport = WSPausableSubscriptionManagerInterfaceSupport;
	}
	return _p;
}

inline tt__EventCapabilities * soap_new_set_tt__EventCapabilities(
	struct soap *soap,
	const std::string& XAddr,
	bool WSSubscriptionPolicySupport,
	bool WSPullPointSupport,
	bool WSPausableSubscriptionManagerInterfaceSupport,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__EventCapabilities *_p = soap_new_tt__EventCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__EventCapabilities::XAddr = XAddr;
		_p->tt__EventCapabilities::WSSubscriptionPolicySupport = WSSubscriptionPolicySupport;
		_p->tt__EventCapabilities::WSPullPointSupport = WSPullPointSupport;
		_p->tt__EventCapabilities::WSPausableSubscriptionManagerInterfaceSupport = WSPausableSubscriptionManagerInterfaceSupport;
		_p->tt__EventCapabilities::__any = __any;
		_p->tt__EventCapabilities::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__EventCapabilities(struct soap *soap, tt__EventCapabilities const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:EventCapabilities", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__EventCapabilities * SOAP_FMAC4 soap_get_tt__EventCapabilities(struct soap*, tt__EventCapabilities *, const char*, const char*);

inline int soap_read_tt__EventCapabilities(struct soap *soap, tt__EventCapabilities *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__EventCapabilities(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__DeviceCapabilitiesExtension_DEFINED
#define SOAP_TYPE_tt__DeviceCapabilitiesExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__DeviceCapabilitiesExtension(struct soap*, const char*, int, const tt__DeviceCapabilitiesExtension *, const char*);
SOAP_FMAC3 tt__DeviceCapabilitiesExtension * SOAP_FMAC4 soap_in_tt__DeviceCapabilitiesExtension(struct soap*, const char*, tt__DeviceCapabilitiesExtension *, const char*);
SOAP_FMAC1 tt__DeviceCapabilitiesExtension * SOAP_FMAC2 soap_instantiate_tt__DeviceCapabilitiesExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__DeviceCapabilitiesExtension * soap_new_tt__DeviceCapabilitiesExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__DeviceCapabilitiesExtension(soap, n, NULL, NULL, NULL);
}

inline tt__DeviceCapabilitiesExtension * soap_new_req_tt__DeviceCapabilitiesExtension(
	struct soap *soap)
{
	tt__DeviceCapabilitiesExtension *_p = soap_new_tt__DeviceCapabilitiesExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__DeviceCapabilitiesExtension * soap_new_set_tt__DeviceCapabilitiesExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__DeviceCapabilitiesExtension *_p = soap_new_tt__DeviceCapabilitiesExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__DeviceCapabilitiesExtension::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__DeviceCapabilitiesExtension(struct soap *soap, tt__DeviceCapabilitiesExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:DeviceCapabilitiesExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__DeviceCapabilitiesExtension * SOAP_FMAC4 soap_get_tt__DeviceCapabilitiesExtension(struct soap*, tt__DeviceCapabilitiesExtension *, const char*, const char*);

inline int soap_read_tt__DeviceCapabilitiesExtension(struct soap *soap, tt__DeviceCapabilitiesExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__DeviceCapabilitiesExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__DeviceCapabilities_DEFINED
#define SOAP_TYPE_tt__DeviceCapabilities_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__DeviceCapabilities(struct soap*, const char*, int, const tt__DeviceCapabilities *, const char*);
SOAP_FMAC3 tt__DeviceCapabilities * SOAP_FMAC4 soap_in_tt__DeviceCapabilities(struct soap*, const char*, tt__DeviceCapabilities *, const char*);
SOAP_FMAC1 tt__DeviceCapabilities * SOAP_FMAC2 soap_instantiate_tt__DeviceCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline tt__DeviceCapabilities * soap_new_tt__DeviceCapabilities(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__DeviceCapabilities(soap, n, NULL, NULL, NULL);
}

inline tt__DeviceCapabilities * soap_new_req_tt__DeviceCapabilities(
	struct soap *soap,
	const std::string& XAddr)
{
	tt__DeviceCapabilities *_p = soap_new_tt__DeviceCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__DeviceCapabilities::XAddr = XAddr;
	}
	return _p;
}

inline tt__DeviceCapabilities * soap_new_set_tt__DeviceCapabilities(
	struct soap *soap,
	const std::string& XAddr,
	tt__NetworkCapabilities *Network,
	tt__SystemCapabilities *System,
	tt__IOCapabilities *IO,
	tt__SecurityCapabilities *Security,
	tt__DeviceCapabilitiesExtension *Extension,
	char *__anyAttribute,
	char *__item1)
{
	tt__DeviceCapabilities *_p = soap_new_tt__DeviceCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__DeviceCapabilities::XAddr = XAddr;
		_p->tt__DeviceCapabilities::Network = Network;
		_p->tt__DeviceCapabilities::System = System;
		_p->tt__DeviceCapabilities::IO = IO;
		_p->tt__DeviceCapabilities::Security = Security;
		_p->tt__DeviceCapabilities::Extension = Extension;
		_p->tt__DeviceCapabilities::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__DeviceCapabilities(struct soap *soap, tt__DeviceCapabilities const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:DeviceCapabilities", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__DeviceCapabilities * SOAP_FMAC4 soap_get_tt__DeviceCapabilities(struct soap*, tt__DeviceCapabilities *, const char*, const char*);

inline int soap_read_tt__DeviceCapabilities(struct soap *soap, tt__DeviceCapabilities *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__DeviceCapabilities(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__AnalyticsCapabilities_DEFINED
#define SOAP_TYPE_tt__AnalyticsCapabilities_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AnalyticsCapabilities(struct soap*, const char*, int, const tt__AnalyticsCapabilities *, const char*);
SOAP_FMAC3 tt__AnalyticsCapabilities * SOAP_FMAC4 soap_in_tt__AnalyticsCapabilities(struct soap*, const char*, tt__AnalyticsCapabilities *, const char*);
SOAP_FMAC1 tt__AnalyticsCapabilities * SOAP_FMAC2 soap_instantiate_tt__AnalyticsCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline tt__AnalyticsCapabilities * soap_new_tt__AnalyticsCapabilities(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__AnalyticsCapabilities(soap, n, NULL, NULL, NULL);
}

inline tt__AnalyticsCapabilities * soap_new_req_tt__AnalyticsCapabilities(
	struct soap *soap,
	const std::string& XAddr,
	bool RuleSupport,
	bool AnalyticsModuleSupport)
{
	tt__AnalyticsCapabilities *_p = soap_new_tt__AnalyticsCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AnalyticsCapabilities::XAddr = XAddr;
		_p->tt__AnalyticsCapabilities::RuleSupport = RuleSupport;
		_p->tt__AnalyticsCapabilities::AnalyticsModuleSupport = AnalyticsModuleSupport;
	}
	return _p;
}

inline tt__AnalyticsCapabilities * soap_new_set_tt__AnalyticsCapabilities(
	struct soap *soap,
	const std::string& XAddr,
	bool RuleSupport,
	bool AnalyticsModuleSupport,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__AnalyticsCapabilities *_p = soap_new_tt__AnalyticsCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AnalyticsCapabilities::XAddr = XAddr;
		_p->tt__AnalyticsCapabilities::RuleSupport = RuleSupport;
		_p->tt__AnalyticsCapabilities::AnalyticsModuleSupport = AnalyticsModuleSupport;
		_p->tt__AnalyticsCapabilities::__any = __any;
		_p->tt__AnalyticsCapabilities::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__AnalyticsCapabilities(struct soap *soap, tt__AnalyticsCapabilities const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AnalyticsCapabilities", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__AnalyticsCapabilities * SOAP_FMAC4 soap_get_tt__AnalyticsCapabilities(struct soap*, tt__AnalyticsCapabilities *, const char*, const char*);

inline int soap_read_tt__AnalyticsCapabilities(struct soap *soap, tt__AnalyticsCapabilities *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__AnalyticsCapabilities(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__CapabilitiesExtension2_DEFINED
#define SOAP_TYPE_tt__CapabilitiesExtension2_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__CapabilitiesExtension2(struct soap*, const char*, int, const tt__CapabilitiesExtension2 *, const char*);
SOAP_FMAC3 tt__CapabilitiesExtension2 * SOAP_FMAC4 soap_in_tt__CapabilitiesExtension2(struct soap*, const char*, tt__CapabilitiesExtension2 *, const char*);
SOAP_FMAC1 tt__CapabilitiesExtension2 * SOAP_FMAC2 soap_instantiate_tt__CapabilitiesExtension2(struct soap*, int, const char*, const char*, size_t*);

inline tt__CapabilitiesExtension2 * soap_new_tt__CapabilitiesExtension2(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__CapabilitiesExtension2(soap, n, NULL, NULL, NULL);
}

inline tt__CapabilitiesExtension2 * soap_new_req_tt__CapabilitiesExtension2(
	struct soap *soap)
{
	tt__CapabilitiesExtension2 *_p = soap_new_tt__CapabilitiesExtension2(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__CapabilitiesExtension2 * soap_new_set_tt__CapabilitiesExtension2(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__CapabilitiesExtension2 *_p = soap_new_tt__CapabilitiesExtension2(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__CapabilitiesExtension2::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__CapabilitiesExtension2(struct soap *soap, tt__CapabilitiesExtension2 const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:CapabilitiesExtension2", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__CapabilitiesExtension2 * SOAP_FMAC4 soap_get_tt__CapabilitiesExtension2(struct soap*, tt__CapabilitiesExtension2 *, const char*, const char*);

inline int soap_read_tt__CapabilitiesExtension2(struct soap *soap, tt__CapabilitiesExtension2 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__CapabilitiesExtension2(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__CapabilitiesExtension_DEFINED
#define SOAP_TYPE_tt__CapabilitiesExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__CapabilitiesExtension(struct soap*, const char*, int, const tt__CapabilitiesExtension *, const char*);
SOAP_FMAC3 tt__CapabilitiesExtension * SOAP_FMAC4 soap_in_tt__CapabilitiesExtension(struct soap*, const char*, tt__CapabilitiesExtension *, const char*);
SOAP_FMAC1 tt__CapabilitiesExtension * SOAP_FMAC2 soap_instantiate_tt__CapabilitiesExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__CapabilitiesExtension * soap_new_tt__CapabilitiesExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__CapabilitiesExtension(soap, n, NULL, NULL, NULL);
}

inline tt__CapabilitiesExtension * soap_new_req_tt__CapabilitiesExtension(
	struct soap *soap)
{
	tt__CapabilitiesExtension *_p = soap_new_tt__CapabilitiesExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__CapabilitiesExtension * soap_new_set_tt__CapabilitiesExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	tt__DeviceIOCapabilities *DeviceIO,
	tt__DisplayCapabilities *Display,
	tt__RecordingCapabilities *Recording,
	tt__SearchCapabilities *Search,
	tt__ReplayCapabilities *Replay,
	tt__ReceiverCapabilities *Receiver,
	tt__AnalyticsDeviceCapabilities *AnalyticsDevice,
	tt__CapabilitiesExtension2 *Extensions,
	char *__item1)
{
	tt__CapabilitiesExtension *_p = soap_new_tt__CapabilitiesExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__CapabilitiesExtension::__any = __any;
		_p->tt__CapabilitiesExtension::DeviceIO = DeviceIO;
		_p->tt__CapabilitiesExtension::Display = Display;
		_p->tt__CapabilitiesExtension::Recording = Recording;
		_p->tt__CapabilitiesExtension::Search = Search;
		_p->tt__CapabilitiesExtension::Replay = Replay;
		_p->tt__CapabilitiesExtension::Receiver = Receiver;
		_p->tt__CapabilitiesExtension::AnalyticsDevice = AnalyticsDevice;
		_p->tt__CapabilitiesExtension::Extensions = Extensions;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__CapabilitiesExtension(struct soap *soap, tt__CapabilitiesExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:CapabilitiesExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__CapabilitiesExtension * SOAP_FMAC4 soap_get_tt__CapabilitiesExtension(struct soap*, tt__CapabilitiesExtension *, const char*, const char*);

inline int soap_read_tt__CapabilitiesExtension(struct soap *soap, tt__CapabilitiesExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__CapabilitiesExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__Capabilities_DEFINED
#define SOAP_TYPE_tt__Capabilities_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Capabilities(struct soap*, const char*, int, const tt__Capabilities *, const char*);
SOAP_FMAC3 tt__Capabilities * SOAP_FMAC4 soap_in_tt__Capabilities(struct soap*, const char*, tt__Capabilities *, const char*);
SOAP_FMAC1 tt__Capabilities * SOAP_FMAC2 soap_instantiate_tt__Capabilities(struct soap*, int, const char*, const char*, size_t*);

inline tt__Capabilities * soap_new_tt__Capabilities(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Capabilities(soap, n, NULL, NULL, NULL);
}

inline tt__Capabilities * soap_new_req_tt__Capabilities(
	struct soap *soap)
{
	tt__Capabilities *_p = soap_new_tt__Capabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__Capabilities * soap_new_set_tt__Capabilities(
	struct soap *soap,
	tt__AnalyticsCapabilities *Analytics,
	tt__DeviceCapabilities *Device,
	tt__EventCapabilities *Events,
	tt__ImagingCapabilities *Imaging,
	tt__MediaCapabilities *Media,
	tt__PTZCapabilities *PTZ,
	tt__CapabilitiesExtension *Extension,
	char *__anyAttribute,
	char *__item1)
{
	tt__Capabilities *_p = soap_new_tt__Capabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Capabilities::Analytics = Analytics;
		_p->tt__Capabilities::Device = Device;
		_p->tt__Capabilities::Events = Events;
		_p->tt__Capabilities::Imaging = Imaging;
		_p->tt__Capabilities::Media = Media;
		_p->tt__Capabilities::PTZ = PTZ;
		_p->tt__Capabilities::Extension = Extension;
		_p->tt__Capabilities::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__Capabilities(struct soap *soap, tt__Capabilities const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Capabilities", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__Capabilities * SOAP_FMAC4 soap_get_tt__Capabilities(struct soap*, tt__Capabilities *, const char*, const char*);

inline int soap_read_tt__Capabilities(struct soap *soap, tt__Capabilities *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__Capabilities(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__Dot11AvailableNetworksExtension_DEFINED
#define SOAP_TYPE_tt__Dot11AvailableNetworksExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Dot11AvailableNetworksExtension(struct soap*, const char*, int, const tt__Dot11AvailableNetworksExtension *, const char*);
SOAP_FMAC3 tt__Dot11AvailableNetworksExtension * SOAP_FMAC4 soap_in_tt__Dot11AvailableNetworksExtension(struct soap*, const char*, tt__Dot11AvailableNetworksExtension *, const char*);
SOAP_FMAC1 tt__Dot11AvailableNetworksExtension * SOAP_FMAC2 soap_instantiate_tt__Dot11AvailableNetworksExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__Dot11AvailableNetworksExtension * soap_new_tt__Dot11AvailableNetworksExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Dot11AvailableNetworksExtension(soap, n, NULL, NULL, NULL);
}

inline tt__Dot11AvailableNetworksExtension * soap_new_req_tt__Dot11AvailableNetworksExtension(
	struct soap *soap)
{
	tt__Dot11AvailableNetworksExtension *_p = soap_new_tt__Dot11AvailableNetworksExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__Dot11AvailableNetworksExtension * soap_new_set_tt__Dot11AvailableNetworksExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__Dot11AvailableNetworksExtension *_p = soap_new_tt__Dot11AvailableNetworksExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Dot11AvailableNetworksExtension::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__Dot11AvailableNetworksExtension(struct soap *soap, tt__Dot11AvailableNetworksExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Dot11AvailableNetworksExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__Dot11AvailableNetworksExtension * SOAP_FMAC4 soap_get_tt__Dot11AvailableNetworksExtension(struct soap*, tt__Dot11AvailableNetworksExtension *, const char*, const char*);

inline int soap_read_tt__Dot11AvailableNetworksExtension(struct soap *soap, tt__Dot11AvailableNetworksExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__Dot11AvailableNetworksExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__Dot11AvailableNetworks_DEFINED
#define SOAP_TYPE_tt__Dot11AvailableNetworks_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Dot11AvailableNetworks(struct soap*, const char*, int, const tt__Dot11AvailableNetworks *, const char*);
SOAP_FMAC3 tt__Dot11AvailableNetworks * SOAP_FMAC4 soap_in_tt__Dot11AvailableNetworks(struct soap*, const char*, tt__Dot11AvailableNetworks *, const char*);
SOAP_FMAC1 tt__Dot11AvailableNetworks * SOAP_FMAC2 soap_instantiate_tt__Dot11AvailableNetworks(struct soap*, int, const char*, const char*, size_t*);

inline tt__Dot11AvailableNetworks * soap_new_tt__Dot11AvailableNetworks(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Dot11AvailableNetworks(soap, n, NULL, NULL, NULL);
}

inline tt__Dot11AvailableNetworks * soap_new_req_tt__Dot11AvailableNetworks(
	struct soap *soap,
	const xsd__hexBinary& SSID)
{
	tt__Dot11AvailableNetworks *_p = soap_new_tt__Dot11AvailableNetworks(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Dot11AvailableNetworks::SSID = SSID;
	}
	return _p;
}

inline tt__Dot11AvailableNetworks * soap_new_set_tt__Dot11AvailableNetworks(
	struct soap *soap,
	const xsd__hexBinary& SSID,
	std::string *BSSID,
	const std::vector<enum tt__Dot11AuthAndMangementSuite> & AuthAndMangementSuite,
	const std::vector<enum tt__Dot11Cipher> & PairCipher,
	const std::vector<enum tt__Dot11Cipher> & GroupCipher,
	enum tt__Dot11SignalStrength *SignalStrength,
	tt__Dot11AvailableNetworksExtension *Extension,
	char *__anyAttribute,
	char *__item1)
{
	tt__Dot11AvailableNetworks *_p = soap_new_tt__Dot11AvailableNetworks(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Dot11AvailableNetworks::SSID = SSID;
		_p->tt__Dot11AvailableNetworks::BSSID = BSSID;
		_p->tt__Dot11AvailableNetworks::AuthAndMangementSuite = AuthAndMangementSuite;
		_p->tt__Dot11AvailableNetworks::PairCipher = PairCipher;
		_p->tt__Dot11AvailableNetworks::GroupCipher = GroupCipher;
		_p->tt__Dot11AvailableNetworks::SignalStrength = SignalStrength;
		_p->tt__Dot11AvailableNetworks::Extension = Extension;
		_p->tt__Dot11AvailableNetworks::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__Dot11AvailableNetworks(struct soap *soap, tt__Dot11AvailableNetworks const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Dot11AvailableNetworks", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__Dot11AvailableNetworks * SOAP_FMAC4 soap_get_tt__Dot11AvailableNetworks(struct soap*, tt__Dot11AvailableNetworks *, const char*, const char*);

inline int soap_read_tt__Dot11AvailableNetworks(struct soap *soap, tt__Dot11AvailableNetworks *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__Dot11AvailableNetworks(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__Dot11Status_DEFINED
#define SOAP_TYPE_tt__Dot11Status_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Dot11Status(struct soap*, const char*, int, const tt__Dot11Status *, const char*);
SOAP_FMAC3 tt__Dot11Status * SOAP_FMAC4 soap_in_tt__Dot11Status(struct soap*, const char*, tt__Dot11Status *, const char*);
SOAP_FMAC1 tt__Dot11Status * SOAP_FMAC2 soap_instantiate_tt__Dot11Status(struct soap*, int, const char*, const char*, size_t*);

inline tt__Dot11Status * soap_new_tt__Dot11Status(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Dot11Status(soap, n, NULL, NULL, NULL);
}

inline tt__Dot11Status * soap_new_req_tt__Dot11Status(
	struct soap *soap,
	const xsd__hexBinary& SSID,
	const std::string& ActiveConfigAlias)
{
	tt__Dot11Status *_p = soap_new_tt__Dot11Status(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Dot11Status::SSID = SSID;
		_p->tt__Dot11Status::ActiveConfigAlias = ActiveConfigAlias;
	}
	return _p;
}

inline tt__Dot11Status * soap_new_set_tt__Dot11Status(
	struct soap *soap,
	const xsd__hexBinary& SSID,
	std::string *BSSID,
	enum tt__Dot11Cipher *PairCipher,
	enum tt__Dot11Cipher *GroupCipher,
	enum tt__Dot11SignalStrength *SignalStrength,
	const std::string& ActiveConfigAlias,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__Dot11Status *_p = soap_new_tt__Dot11Status(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Dot11Status::SSID = SSID;
		_p->tt__Dot11Status::BSSID = BSSID;
		_p->tt__Dot11Status::PairCipher = PairCipher;
		_p->tt__Dot11Status::GroupCipher = GroupCipher;
		_p->tt__Dot11Status::SignalStrength = SignalStrength;
		_p->tt__Dot11Status::ActiveConfigAlias = ActiveConfigAlias;
		_p->tt__Dot11Status::__any = __any;
		_p->tt__Dot11Status::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__Dot11Status(struct soap *soap, tt__Dot11Status const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Dot11Status", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__Dot11Status * SOAP_FMAC4 soap_get_tt__Dot11Status(struct soap*, tt__Dot11Status *, const char*, const char*);

inline int soap_read_tt__Dot11Status(struct soap *soap, tt__Dot11Status *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__Dot11Status(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__Dot11Capabilities_DEFINED
#define SOAP_TYPE_tt__Dot11Capabilities_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Dot11Capabilities(struct soap*, const char*, int, const tt__Dot11Capabilities *, const char*);
SOAP_FMAC3 tt__Dot11Capabilities * SOAP_FMAC4 soap_in_tt__Dot11Capabilities(struct soap*, const char*, tt__Dot11Capabilities *, const char*);
SOAP_FMAC1 tt__Dot11Capabilities * SOAP_FMAC2 soap_instantiate_tt__Dot11Capabilities(struct soap*, int, const char*, const char*, size_t*);

inline tt__Dot11Capabilities * soap_new_tt__Dot11Capabilities(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Dot11Capabilities(soap, n, NULL, NULL, NULL);
}

inline tt__Dot11Capabilities * soap_new_req_tt__Dot11Capabilities(
	struct soap *soap,
	bool TKIP,
	bool ScanAvailableNetworks,
	bool MultipleConfiguration,
	bool AdHocStationMode,
	bool WEP)
{
	tt__Dot11Capabilities *_p = soap_new_tt__Dot11Capabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Dot11Capabilities::TKIP = TKIP;
		_p->tt__Dot11Capabilities::ScanAvailableNetworks = ScanAvailableNetworks;
		_p->tt__Dot11Capabilities::MultipleConfiguration = MultipleConfiguration;
		_p->tt__Dot11Capabilities::AdHocStationMode = AdHocStationMode;
		_p->tt__Dot11Capabilities::WEP = WEP;
	}
	return _p;
}

inline tt__Dot11Capabilities * soap_new_set_tt__Dot11Capabilities(
	struct soap *soap,
	bool TKIP,
	bool ScanAvailableNetworks,
	bool MultipleConfiguration,
	bool AdHocStationMode,
	bool WEP,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__Dot11Capabilities *_p = soap_new_tt__Dot11Capabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Dot11Capabilities::TKIP = TKIP;
		_p->tt__Dot11Capabilities::ScanAvailableNetworks = ScanAvailableNetworks;
		_p->tt__Dot11Capabilities::MultipleConfiguration = MultipleConfiguration;
		_p->tt__Dot11Capabilities::AdHocStationMode = AdHocStationMode;
		_p->tt__Dot11Capabilities::WEP = WEP;
		_p->tt__Dot11Capabilities::__any = __any;
		_p->tt__Dot11Capabilities::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__Dot11Capabilities(struct soap *soap, tt__Dot11Capabilities const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Dot11Capabilities", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__Dot11Capabilities * SOAP_FMAC4 soap_get_tt__Dot11Capabilities(struct soap*, tt__Dot11Capabilities *, const char*, const char*);

inline int soap_read_tt__Dot11Capabilities(struct soap *soap, tt__Dot11Capabilities *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__Dot11Capabilities(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__NetworkInterfaceSetConfigurationExtension2_DEFINED
#define SOAP_TYPE_tt__NetworkInterfaceSetConfigurationExtension2_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__NetworkInterfaceSetConfigurationExtension2(struct soap*, const char*, int, const tt__NetworkInterfaceSetConfigurationExtension2 *, const char*);
SOAP_FMAC3 tt__NetworkInterfaceSetConfigurationExtension2 * SOAP_FMAC4 soap_in_tt__NetworkInterfaceSetConfigurationExtension2(struct soap*, const char*, tt__NetworkInterfaceSetConfigurationExtension2 *, const char*);
SOAP_FMAC1 tt__NetworkInterfaceSetConfigurationExtension2 * SOAP_FMAC2 soap_instantiate_tt__NetworkInterfaceSetConfigurationExtension2(struct soap*, int, const char*, const char*, size_t*);

inline tt__NetworkInterfaceSetConfigurationExtension2 * soap_new_tt__NetworkInterfaceSetConfigurationExtension2(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__NetworkInterfaceSetConfigurationExtension2(soap, n, NULL, NULL, NULL);
}

inline tt__NetworkInterfaceSetConfigurationExtension2 * soap_new_req_tt__NetworkInterfaceSetConfigurationExtension2(
	struct soap *soap)
{
	tt__NetworkInterfaceSetConfigurationExtension2 *_p = soap_new_tt__NetworkInterfaceSetConfigurationExtension2(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__NetworkInterfaceSetConfigurationExtension2 * soap_new_set_tt__NetworkInterfaceSetConfigurationExtension2(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__NetworkInterfaceSetConfigurationExtension2 *_p = soap_new_tt__NetworkInterfaceSetConfigurationExtension2(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__NetworkInterfaceSetConfigurationExtension2::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__NetworkInterfaceSetConfigurationExtension2(struct soap *soap, tt__NetworkInterfaceSetConfigurationExtension2 const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkInterfaceSetConfigurationExtension2", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__NetworkInterfaceSetConfigurationExtension2 * SOAP_FMAC4 soap_get_tt__NetworkInterfaceSetConfigurationExtension2(struct soap*, tt__NetworkInterfaceSetConfigurationExtension2 *, const char*, const char*);

inline int soap_read_tt__NetworkInterfaceSetConfigurationExtension2(struct soap *soap, tt__NetworkInterfaceSetConfigurationExtension2 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__NetworkInterfaceSetConfigurationExtension2(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__Dot11PSKSetExtension_DEFINED
#define SOAP_TYPE_tt__Dot11PSKSetExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Dot11PSKSetExtension(struct soap*, const char*, int, const tt__Dot11PSKSetExtension *, const char*);
SOAP_FMAC3 tt__Dot11PSKSetExtension * SOAP_FMAC4 soap_in_tt__Dot11PSKSetExtension(struct soap*, const char*, tt__Dot11PSKSetExtension *, const char*);
SOAP_FMAC1 tt__Dot11PSKSetExtension * SOAP_FMAC2 soap_instantiate_tt__Dot11PSKSetExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__Dot11PSKSetExtension * soap_new_tt__Dot11PSKSetExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Dot11PSKSetExtension(soap, n, NULL, NULL, NULL);
}

inline tt__Dot11PSKSetExtension * soap_new_req_tt__Dot11PSKSetExtension(
	struct soap *soap)
{
	tt__Dot11PSKSetExtension *_p = soap_new_tt__Dot11PSKSetExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__Dot11PSKSetExtension * soap_new_set_tt__Dot11PSKSetExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__Dot11PSKSetExtension *_p = soap_new_tt__Dot11PSKSetExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Dot11PSKSetExtension::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__Dot11PSKSetExtension(struct soap *soap, tt__Dot11PSKSetExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Dot11PSKSetExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__Dot11PSKSetExtension * SOAP_FMAC4 soap_get_tt__Dot11PSKSetExtension(struct soap*, tt__Dot11PSKSetExtension *, const char*, const char*);

inline int soap_read_tt__Dot11PSKSetExtension(struct soap *soap, tt__Dot11PSKSetExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__Dot11PSKSetExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__Dot11PSKSet_DEFINED
#define SOAP_TYPE_tt__Dot11PSKSet_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Dot11PSKSet(struct soap*, const char*, int, const tt__Dot11PSKSet *, const char*);
SOAP_FMAC3 tt__Dot11PSKSet * SOAP_FMAC4 soap_in_tt__Dot11PSKSet(struct soap*, const char*, tt__Dot11PSKSet *, const char*);
SOAP_FMAC1 tt__Dot11PSKSet * SOAP_FMAC2 soap_instantiate_tt__Dot11PSKSet(struct soap*, int, const char*, const char*, size_t*);

inline tt__Dot11PSKSet * soap_new_tt__Dot11PSKSet(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Dot11PSKSet(soap, n, NULL, NULL, NULL);
}

inline tt__Dot11PSKSet * soap_new_req_tt__Dot11PSKSet(
	struct soap *soap)
{
	tt__Dot11PSKSet *_p = soap_new_tt__Dot11PSKSet(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__Dot11PSKSet * soap_new_set_tt__Dot11PSKSet(
	struct soap *soap,
	xsd__hexBinary *Key,
	std::string *Passphrase,
	tt__Dot11PSKSetExtension *Extension,
	char *__anyAttribute,
	char *__item1)
{
	tt__Dot11PSKSet *_p = soap_new_tt__Dot11PSKSet(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Dot11PSKSet::Key = Key;
		_p->tt__Dot11PSKSet::Passphrase = Passphrase;
		_p->tt__Dot11PSKSet::Extension = Extension;
		_p->tt__Dot11PSKSet::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__Dot11PSKSet(struct soap *soap, tt__Dot11PSKSet const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Dot11PSKSet", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__Dot11PSKSet * SOAP_FMAC4 soap_get_tt__Dot11PSKSet(struct soap*, tt__Dot11PSKSet *, const char*, const char*);

inline int soap_read_tt__Dot11PSKSet(struct soap *soap, tt__Dot11PSKSet *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__Dot11PSKSet(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__Dot11SecurityConfigurationExtension_DEFINED
#define SOAP_TYPE_tt__Dot11SecurityConfigurationExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Dot11SecurityConfigurationExtension(struct soap*, const char*, int, const tt__Dot11SecurityConfigurationExtension *, const char*);
SOAP_FMAC3 tt__Dot11SecurityConfigurationExtension * SOAP_FMAC4 soap_in_tt__Dot11SecurityConfigurationExtension(struct soap*, const char*, tt__Dot11SecurityConfigurationExtension *, const char*);
SOAP_FMAC1 tt__Dot11SecurityConfigurationExtension * SOAP_FMAC2 soap_instantiate_tt__Dot11SecurityConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__Dot11SecurityConfigurationExtension * soap_new_tt__Dot11SecurityConfigurationExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Dot11SecurityConfigurationExtension(soap, n, NULL, NULL, NULL);
}

inline tt__Dot11SecurityConfigurationExtension * soap_new_req_tt__Dot11SecurityConfigurationExtension(
	struct soap *soap)
{
	tt__Dot11SecurityConfigurationExtension *_p = soap_new_tt__Dot11SecurityConfigurationExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__Dot11SecurityConfigurationExtension * soap_new_set_tt__Dot11SecurityConfigurationExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__Dot11SecurityConfigurationExtension *_p = soap_new_tt__Dot11SecurityConfigurationExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Dot11SecurityConfigurationExtension::__any = __any;
		_p->tt__Dot11SecurityConfigurationExtension::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__Dot11SecurityConfigurationExtension(struct soap *soap, tt__Dot11SecurityConfigurationExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Dot11SecurityConfigurationExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__Dot11SecurityConfigurationExtension * SOAP_FMAC4 soap_get_tt__Dot11SecurityConfigurationExtension(struct soap*, tt__Dot11SecurityConfigurationExtension *, const char*, const char*);

inline int soap_read_tt__Dot11SecurityConfigurationExtension(struct soap *soap, tt__Dot11SecurityConfigurationExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__Dot11SecurityConfigurationExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__Dot11SecurityConfiguration_DEFINED
#define SOAP_TYPE_tt__Dot11SecurityConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Dot11SecurityConfiguration(struct soap*, const char*, int, const tt__Dot11SecurityConfiguration *, const char*);
SOAP_FMAC3 tt__Dot11SecurityConfiguration * SOAP_FMAC4 soap_in_tt__Dot11SecurityConfiguration(struct soap*, const char*, tt__Dot11SecurityConfiguration *, const char*);
SOAP_FMAC1 tt__Dot11SecurityConfiguration * SOAP_FMAC2 soap_instantiate_tt__Dot11SecurityConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__Dot11SecurityConfiguration * soap_new_tt__Dot11SecurityConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Dot11SecurityConfiguration(soap, n, NULL, NULL, NULL);
}

inline tt__Dot11SecurityConfiguration * soap_new_req_tt__Dot11SecurityConfiguration(
	struct soap *soap,
	enum tt__Dot11SecurityMode Mode)
{
	tt__Dot11SecurityConfiguration *_p = soap_new_tt__Dot11SecurityConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Dot11SecurityConfiguration::Mode = Mode;
	}
	return _p;
}

inline tt__Dot11SecurityConfiguration * soap_new_set_tt__Dot11SecurityConfiguration(
	struct soap *soap,
	enum tt__Dot11SecurityMode Mode,
	enum tt__Dot11Cipher *Algorithm,
	tt__Dot11PSKSet *PSK,
	std::string *Dot1X,
	tt__Dot11SecurityConfigurationExtension *Extension,
	char *__anyAttribute,
	char *__item1)
{
	tt__Dot11SecurityConfiguration *_p = soap_new_tt__Dot11SecurityConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Dot11SecurityConfiguration::Mode = Mode;
		_p->tt__Dot11SecurityConfiguration::Algorithm = Algorithm;
		_p->tt__Dot11SecurityConfiguration::PSK = PSK;
		_p->tt__Dot11SecurityConfiguration::Dot1X = Dot1X;
		_p->tt__Dot11SecurityConfiguration::Extension = Extension;
		_p->tt__Dot11SecurityConfiguration::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__Dot11SecurityConfiguration(struct soap *soap, tt__Dot11SecurityConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Dot11SecurityConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__Dot11SecurityConfiguration * SOAP_FMAC4 soap_get_tt__Dot11SecurityConfiguration(struct soap*, tt__Dot11SecurityConfiguration *, const char*, const char*);

inline int soap_read_tt__Dot11SecurityConfiguration(struct soap *soap, tt__Dot11SecurityConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__Dot11SecurityConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__Dot11Configuration_DEFINED
#define SOAP_TYPE_tt__Dot11Configuration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Dot11Configuration(struct soap*, const char*, int, const tt__Dot11Configuration *, const char*);
SOAP_FMAC3 tt__Dot11Configuration * SOAP_FMAC4 soap_in_tt__Dot11Configuration(struct soap*, const char*, tt__Dot11Configuration *, const char*);
SOAP_FMAC1 tt__Dot11Configuration * SOAP_FMAC2 soap_instantiate_tt__Dot11Configuration(struct soap*, int, const char*, const char*, size_t*);

inline tt__Dot11Configuration * soap_new_tt__Dot11Configuration(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Dot11Configuration(soap, n, NULL, NULL, NULL);
}

inline tt__Dot11Configuration * soap_new_req_tt__Dot11Configuration(
	struct soap *soap,
	const xsd__hexBinary& SSID,
	enum tt__Dot11StationMode Mode,
	const std::string& Alias,
	const std::string& Priority,
	tt__Dot11SecurityConfiguration *Security)
{
	tt__Dot11Configuration *_p = soap_new_tt__Dot11Configuration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Dot11Configuration::SSID = SSID;
		_p->tt__Dot11Configuration::Mode = Mode;
		_p->tt__Dot11Configuration::Alias = Alias;
		_p->tt__Dot11Configuration::Priority = Priority;
		_p->tt__Dot11Configuration::Security = Security;
	}
	return _p;
}

inline tt__Dot11Configuration * soap_new_set_tt__Dot11Configuration(
	struct soap *soap,
	const xsd__hexBinary& SSID,
	enum tt__Dot11StationMode Mode,
	const std::string& Alias,
	const std::string& Priority,
	tt__Dot11SecurityConfiguration *Security,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__Dot11Configuration *_p = soap_new_tt__Dot11Configuration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Dot11Configuration::SSID = SSID;
		_p->tt__Dot11Configuration::Mode = Mode;
		_p->tt__Dot11Configuration::Alias = Alias;
		_p->tt__Dot11Configuration::Priority = Priority;
		_p->tt__Dot11Configuration::Security = Security;
		_p->tt__Dot11Configuration::__any = __any;
		_p->tt__Dot11Configuration::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__Dot11Configuration(struct soap *soap, tt__Dot11Configuration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Dot11Configuration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__Dot11Configuration * SOAP_FMAC4 soap_get_tt__Dot11Configuration(struct soap*, tt__Dot11Configuration *, const char*, const char*);

inline int soap_read_tt__Dot11Configuration(struct soap *soap, tt__Dot11Configuration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__Dot11Configuration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__IPAddressFilterExtension_DEFINED
#define SOAP_TYPE_tt__IPAddressFilterExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IPAddressFilterExtension(struct soap*, const char*, int, const tt__IPAddressFilterExtension *, const char*);
SOAP_FMAC3 tt__IPAddressFilterExtension * SOAP_FMAC4 soap_in_tt__IPAddressFilterExtension(struct soap*, const char*, tt__IPAddressFilterExtension *, const char*);
SOAP_FMAC1 tt__IPAddressFilterExtension * SOAP_FMAC2 soap_instantiate_tt__IPAddressFilterExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__IPAddressFilterExtension * soap_new_tt__IPAddressFilterExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__IPAddressFilterExtension(soap, n, NULL, NULL, NULL);
}

inline tt__IPAddressFilterExtension * soap_new_req_tt__IPAddressFilterExtension(
	struct soap *soap)
{
	tt__IPAddressFilterExtension *_p = soap_new_tt__IPAddressFilterExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__IPAddressFilterExtension * soap_new_set_tt__IPAddressFilterExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__IPAddressFilterExtension *_p = soap_new_tt__IPAddressFilterExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__IPAddressFilterExtension::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__IPAddressFilterExtension(struct soap *soap, tt__IPAddressFilterExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IPAddressFilterExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__IPAddressFilterExtension * SOAP_FMAC4 soap_get_tt__IPAddressFilterExtension(struct soap*, tt__IPAddressFilterExtension *, const char*, const char*);

inline int soap_read_tt__IPAddressFilterExtension(struct soap *soap, tt__IPAddressFilterExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__IPAddressFilterExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__IPAddressFilter_DEFINED
#define SOAP_TYPE_tt__IPAddressFilter_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IPAddressFilter(struct soap*, const char*, int, const tt__IPAddressFilter *, const char*);
SOAP_FMAC3 tt__IPAddressFilter * SOAP_FMAC4 soap_in_tt__IPAddressFilter(struct soap*, const char*, tt__IPAddressFilter *, const char*);
SOAP_FMAC1 tt__IPAddressFilter * SOAP_FMAC2 soap_instantiate_tt__IPAddressFilter(struct soap*, int, const char*, const char*, size_t*);

inline tt__IPAddressFilter * soap_new_tt__IPAddressFilter(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__IPAddressFilter(soap, n, NULL, NULL, NULL);
}

inline tt__IPAddressFilter * soap_new_req_tt__IPAddressFilter(
	struct soap *soap,
	enum tt__IPAddressFilterType Type)
{
	tt__IPAddressFilter *_p = soap_new_tt__IPAddressFilter(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__IPAddressFilter::Type = Type;
	}
	return _p;
}

inline tt__IPAddressFilter * soap_new_set_tt__IPAddressFilter(
	struct soap *soap,
	enum tt__IPAddressFilterType Type,
	const std::vector<tt__PrefixedIPv4Address *> & IPv4Address,
	const std::vector<tt__PrefixedIPv6Address *> & IPv6Address,
	tt__IPAddressFilterExtension *Extension,
	char *__anyAttribute,
	char *__item1)
{
	tt__IPAddressFilter *_p = soap_new_tt__IPAddressFilter(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__IPAddressFilter::Type = Type;
		_p->tt__IPAddressFilter::IPv4Address = IPv4Address;
		_p->tt__IPAddressFilter::IPv6Address = IPv6Address;
		_p->tt__IPAddressFilter::Extension = Extension;
		_p->tt__IPAddressFilter::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__IPAddressFilter(struct soap *soap, tt__IPAddressFilter const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IPAddressFilter", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__IPAddressFilter * SOAP_FMAC4 soap_get_tt__IPAddressFilter(struct soap*, tt__IPAddressFilter *, const char*, const char*);

inline int soap_read_tt__IPAddressFilter(struct soap *soap, tt__IPAddressFilter *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__IPAddressFilter(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__NetworkZeroConfigurationExtension2_DEFINED
#define SOAP_TYPE_tt__NetworkZeroConfigurationExtension2_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__NetworkZeroConfigurationExtension2(struct soap*, const char*, int, const tt__NetworkZeroConfigurationExtension2 *, const char*);
SOAP_FMAC3 tt__NetworkZeroConfigurationExtension2 * SOAP_FMAC4 soap_in_tt__NetworkZeroConfigurationExtension2(struct soap*, const char*, tt__NetworkZeroConfigurationExtension2 *, const char*);
SOAP_FMAC1 tt__NetworkZeroConfigurationExtension2 * SOAP_FMAC2 soap_instantiate_tt__NetworkZeroConfigurationExtension2(struct soap*, int, const char*, const char*, size_t*);

inline tt__NetworkZeroConfigurationExtension2 * soap_new_tt__NetworkZeroConfigurationExtension2(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__NetworkZeroConfigurationExtension2(soap, n, NULL, NULL, NULL);
}

inline tt__NetworkZeroConfigurationExtension2 * soap_new_req_tt__NetworkZeroConfigurationExtension2(
	struct soap *soap)
{
	tt__NetworkZeroConfigurationExtension2 *_p = soap_new_tt__NetworkZeroConfigurationExtension2(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__NetworkZeroConfigurationExtension2 * soap_new_set_tt__NetworkZeroConfigurationExtension2(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__NetworkZeroConfigurationExtension2 *_p = soap_new_tt__NetworkZeroConfigurationExtension2(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__NetworkZeroConfigurationExtension2::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__NetworkZeroConfigurationExtension2(struct soap *soap, tt__NetworkZeroConfigurationExtension2 const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkZeroConfigurationExtension2", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__NetworkZeroConfigurationExtension2 * SOAP_FMAC4 soap_get_tt__NetworkZeroConfigurationExtension2(struct soap*, tt__NetworkZeroConfigurationExtension2 *, const char*, const char*);

inline int soap_read_tt__NetworkZeroConfigurationExtension2(struct soap *soap, tt__NetworkZeroConfigurationExtension2 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__NetworkZeroConfigurationExtension2(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__NetworkZeroConfigurationExtension_DEFINED
#define SOAP_TYPE_tt__NetworkZeroConfigurationExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__NetworkZeroConfigurationExtension(struct soap*, const char*, int, const tt__NetworkZeroConfigurationExtension *, const char*);
SOAP_FMAC3 tt__NetworkZeroConfigurationExtension * SOAP_FMAC4 soap_in_tt__NetworkZeroConfigurationExtension(struct soap*, const char*, tt__NetworkZeroConfigurationExtension *, const char*);
SOAP_FMAC1 tt__NetworkZeroConfigurationExtension * SOAP_FMAC2 soap_instantiate_tt__NetworkZeroConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__NetworkZeroConfigurationExtension * soap_new_tt__NetworkZeroConfigurationExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__NetworkZeroConfigurationExtension(soap, n, NULL, NULL, NULL);
}

inline tt__NetworkZeroConfigurationExtension * soap_new_req_tt__NetworkZeroConfigurationExtension(
	struct soap *soap)
{
	tt__NetworkZeroConfigurationExtension *_p = soap_new_tt__NetworkZeroConfigurationExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__NetworkZeroConfigurationExtension * soap_new_set_tt__NetworkZeroConfigurationExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	const std::vector<tt__NetworkZeroConfiguration *> & Additional,
	tt__NetworkZeroConfigurationExtension2 *Extension,
	char *__item1)
{
	tt__NetworkZeroConfigurationExtension *_p = soap_new_tt__NetworkZeroConfigurationExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__NetworkZeroConfigurationExtension::__any = __any;
		_p->tt__NetworkZeroConfigurationExtension::Additional = Additional;
		_p->tt__NetworkZeroConfigurationExtension::Extension = Extension;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__NetworkZeroConfigurationExtension(struct soap *soap, tt__NetworkZeroConfigurationExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkZeroConfigurationExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__NetworkZeroConfigurationExtension * SOAP_FMAC4 soap_get_tt__NetworkZeroConfigurationExtension(struct soap*, tt__NetworkZeroConfigurationExtension *, const char*, const char*);

inline int soap_read_tt__NetworkZeroConfigurationExtension(struct soap *soap, tt__NetworkZeroConfigurationExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__NetworkZeroConfigurationExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__NetworkZeroConfiguration_DEFINED
#define SOAP_TYPE_tt__NetworkZeroConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__NetworkZeroConfiguration(struct soap*, const char*, int, const tt__NetworkZeroConfiguration *, const char*);
SOAP_FMAC3 tt__NetworkZeroConfiguration * SOAP_FMAC4 soap_in_tt__NetworkZeroConfiguration(struct soap*, const char*, tt__NetworkZeroConfiguration *, const char*);
SOAP_FMAC1 tt__NetworkZeroConfiguration * SOAP_FMAC2 soap_instantiate_tt__NetworkZeroConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__NetworkZeroConfiguration * soap_new_tt__NetworkZeroConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__NetworkZeroConfiguration(soap, n, NULL, NULL, NULL);
}

inline tt__NetworkZeroConfiguration * soap_new_req_tt__NetworkZeroConfiguration(
	struct soap *soap,
	const std::string& InterfaceToken,
	bool Enabled)
{
	tt__NetworkZeroConfiguration *_p = soap_new_tt__NetworkZeroConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__NetworkZeroConfiguration::InterfaceToken = InterfaceToken;
		_p->tt__NetworkZeroConfiguration::Enabled = Enabled;
	}
	return _p;
}

inline tt__NetworkZeroConfiguration * soap_new_set_tt__NetworkZeroConfiguration(
	struct soap *soap,
	const std::string& InterfaceToken,
	bool Enabled,
	const std::vector<std::string> & Addresses,
	tt__NetworkZeroConfigurationExtension *Extension,
	char *__anyAttribute,
	char *__item1)
{
	tt__NetworkZeroConfiguration *_p = soap_new_tt__NetworkZeroConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__NetworkZeroConfiguration::InterfaceToken = InterfaceToken;
		_p->tt__NetworkZeroConfiguration::Enabled = Enabled;
		_p->tt__NetworkZeroConfiguration::Addresses = Addresses;
		_p->tt__NetworkZeroConfiguration::Extension = Extension;
		_p->tt__NetworkZeroConfiguration::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__NetworkZeroConfiguration(struct soap *soap, tt__NetworkZeroConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkZeroConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__NetworkZeroConfiguration * SOAP_FMAC4 soap_get_tt__NetworkZeroConfiguration(struct soap*, tt__NetworkZeroConfiguration *, const char*, const char*);

inline int soap_read_tt__NetworkZeroConfiguration(struct soap *soap, tt__NetworkZeroConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__NetworkZeroConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__NetworkGateway_DEFINED
#define SOAP_TYPE_tt__NetworkGateway_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__NetworkGateway(struct soap*, const char*, int, const tt__NetworkGateway *, const char*);
SOAP_FMAC3 tt__NetworkGateway * SOAP_FMAC4 soap_in_tt__NetworkGateway(struct soap*, const char*, tt__NetworkGateway *, const char*);
SOAP_FMAC1 tt__NetworkGateway * SOAP_FMAC2 soap_instantiate_tt__NetworkGateway(struct soap*, int, const char*, const char*, size_t*);

inline tt__NetworkGateway * soap_new_tt__NetworkGateway(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__NetworkGateway(soap, n, NULL, NULL, NULL);
}

inline tt__NetworkGateway * soap_new_req_tt__NetworkGateway(
	struct soap *soap)
{
	tt__NetworkGateway *_p = soap_new_tt__NetworkGateway(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__NetworkGateway * soap_new_set_tt__NetworkGateway(
	struct soap *soap,
	const std::vector<std::string> & IPv4Address,
	const std::vector<std::string> & IPv6Address,
	char *__item1)
{
	tt__NetworkGateway *_p = soap_new_tt__NetworkGateway(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__NetworkGateway::IPv4Address = IPv4Address;
		_p->tt__NetworkGateway::IPv6Address = IPv6Address;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__NetworkGateway(struct soap *soap, tt__NetworkGateway const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkGateway", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__NetworkGateway * SOAP_FMAC4 soap_get_tt__NetworkGateway(struct soap*, tt__NetworkGateway *, const char*, const char*);

inline int soap_read_tt__NetworkGateway(struct soap *soap, tt__NetworkGateway *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__NetworkGateway(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__IPv4NetworkInterfaceSetConfiguration_DEFINED
#define SOAP_TYPE_tt__IPv4NetworkInterfaceSetConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IPv4NetworkInterfaceSetConfiguration(struct soap*, const char*, int, const tt__IPv4NetworkInterfaceSetConfiguration *, const char*);
SOAP_FMAC3 tt__IPv4NetworkInterfaceSetConfiguration * SOAP_FMAC4 soap_in_tt__IPv4NetworkInterfaceSetConfiguration(struct soap*, const char*, tt__IPv4NetworkInterfaceSetConfiguration *, const char*);
SOAP_FMAC1 tt__IPv4NetworkInterfaceSetConfiguration * SOAP_FMAC2 soap_instantiate_tt__IPv4NetworkInterfaceSetConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__IPv4NetworkInterfaceSetConfiguration * soap_new_tt__IPv4NetworkInterfaceSetConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__IPv4NetworkInterfaceSetConfiguration(soap, n, NULL, NULL, NULL);
}

inline tt__IPv4NetworkInterfaceSetConfiguration * soap_new_req_tt__IPv4NetworkInterfaceSetConfiguration(
	struct soap *soap)
{
	tt__IPv4NetworkInterfaceSetConfiguration *_p = soap_new_tt__IPv4NetworkInterfaceSetConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__IPv4NetworkInterfaceSetConfiguration * soap_new_set_tt__IPv4NetworkInterfaceSetConfiguration(
	struct soap *soap,
	bool *Enabled,
	const std::vector<tt__PrefixedIPv4Address *> & Manual,
	bool *DHCP,
	char *__item1)
{
	tt__IPv4NetworkInterfaceSetConfiguration *_p = soap_new_tt__IPv4NetworkInterfaceSetConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__IPv4NetworkInterfaceSetConfiguration::Enabled = Enabled;
		_p->tt__IPv4NetworkInterfaceSetConfiguration::Manual = Manual;
		_p->tt__IPv4NetworkInterfaceSetConfiguration::DHCP = DHCP;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__IPv4NetworkInterfaceSetConfiguration(struct soap *soap, tt__IPv4NetworkInterfaceSetConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IPv4NetworkInterfaceSetConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__IPv4NetworkInterfaceSetConfiguration * SOAP_FMAC4 soap_get_tt__IPv4NetworkInterfaceSetConfiguration(struct soap*, tt__IPv4NetworkInterfaceSetConfiguration *, const char*, const char*);

inline int soap_read_tt__IPv4NetworkInterfaceSetConfiguration(struct soap *soap, tt__IPv4NetworkInterfaceSetConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__IPv4NetworkInterfaceSetConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__IPv6NetworkInterfaceSetConfiguration_DEFINED
#define SOAP_TYPE_tt__IPv6NetworkInterfaceSetConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IPv6NetworkInterfaceSetConfiguration(struct soap*, const char*, int, const tt__IPv6NetworkInterfaceSetConfiguration *, const char*);
SOAP_FMAC3 tt__IPv6NetworkInterfaceSetConfiguration * SOAP_FMAC4 soap_in_tt__IPv6NetworkInterfaceSetConfiguration(struct soap*, const char*, tt__IPv6NetworkInterfaceSetConfiguration *, const char*);
SOAP_FMAC1 tt__IPv6NetworkInterfaceSetConfiguration * SOAP_FMAC2 soap_instantiate_tt__IPv6NetworkInterfaceSetConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__IPv6NetworkInterfaceSetConfiguration * soap_new_tt__IPv6NetworkInterfaceSetConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__IPv6NetworkInterfaceSetConfiguration(soap, n, NULL, NULL, NULL);
}

inline tt__IPv6NetworkInterfaceSetConfiguration * soap_new_req_tt__IPv6NetworkInterfaceSetConfiguration(
	struct soap *soap)
{
	tt__IPv6NetworkInterfaceSetConfiguration *_p = soap_new_tt__IPv6NetworkInterfaceSetConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__IPv6NetworkInterfaceSetConfiguration * soap_new_set_tt__IPv6NetworkInterfaceSetConfiguration(
	struct soap *soap,
	bool *Enabled,
	bool *AcceptRouterAdvert,
	const std::vector<tt__PrefixedIPv6Address *> & Manual,
	enum tt__IPv6DHCPConfiguration *DHCP,
	char *__item1)
{
	tt__IPv6NetworkInterfaceSetConfiguration *_p = soap_new_tt__IPv6NetworkInterfaceSetConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__IPv6NetworkInterfaceSetConfiguration::Enabled = Enabled;
		_p->tt__IPv6NetworkInterfaceSetConfiguration::AcceptRouterAdvert = AcceptRouterAdvert;
		_p->tt__IPv6NetworkInterfaceSetConfiguration::Manual = Manual;
		_p->tt__IPv6NetworkInterfaceSetConfiguration::DHCP = DHCP;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__IPv6NetworkInterfaceSetConfiguration(struct soap *soap, tt__IPv6NetworkInterfaceSetConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IPv6NetworkInterfaceSetConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__IPv6NetworkInterfaceSetConfiguration * SOAP_FMAC4 soap_get_tt__IPv6NetworkInterfaceSetConfiguration(struct soap*, tt__IPv6NetworkInterfaceSetConfiguration *, const char*, const char*);

inline int soap_read_tt__IPv6NetworkInterfaceSetConfiguration(struct soap *soap, tt__IPv6NetworkInterfaceSetConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__IPv6NetworkInterfaceSetConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__NetworkInterfaceSetConfigurationExtension_DEFINED
#define SOAP_TYPE_tt__NetworkInterfaceSetConfigurationExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__NetworkInterfaceSetConfigurationExtension(struct soap*, const char*, int, const tt__NetworkInterfaceSetConfigurationExtension *, const char*);
SOAP_FMAC3 tt__NetworkInterfaceSetConfigurationExtension * SOAP_FMAC4 soap_in_tt__NetworkInterfaceSetConfigurationExtension(struct soap*, const char*, tt__NetworkInterfaceSetConfigurationExtension *, const char*);
SOAP_FMAC1 tt__NetworkInterfaceSetConfigurationExtension * SOAP_FMAC2 soap_instantiate_tt__NetworkInterfaceSetConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__NetworkInterfaceSetConfigurationExtension * soap_new_tt__NetworkInterfaceSetConfigurationExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__NetworkInterfaceSetConfigurationExtension(soap, n, NULL, NULL, NULL);
}

inline tt__NetworkInterfaceSetConfigurationExtension * soap_new_req_tt__NetworkInterfaceSetConfigurationExtension(
	struct soap *soap)
{
	tt__NetworkInterfaceSetConfigurationExtension *_p = soap_new_tt__NetworkInterfaceSetConfigurationExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__NetworkInterfaceSetConfigurationExtension * soap_new_set_tt__NetworkInterfaceSetConfigurationExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	const std::vector<tt__Dot3Configuration *> & Dot3,
	const std::vector<tt__Dot11Configuration *> & Dot11,
	tt__NetworkInterfaceSetConfigurationExtension2 *Extension,
	char *__item1)
{
	tt__NetworkInterfaceSetConfigurationExtension *_p = soap_new_tt__NetworkInterfaceSetConfigurationExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__NetworkInterfaceSetConfigurationExtension::__any = __any;
		_p->tt__NetworkInterfaceSetConfigurationExtension::Dot3 = Dot3;
		_p->tt__NetworkInterfaceSetConfigurationExtension::Dot11 = Dot11;
		_p->tt__NetworkInterfaceSetConfigurationExtension::Extension = Extension;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__NetworkInterfaceSetConfigurationExtension(struct soap *soap, tt__NetworkInterfaceSetConfigurationExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkInterfaceSetConfigurationExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__NetworkInterfaceSetConfigurationExtension * SOAP_FMAC4 soap_get_tt__NetworkInterfaceSetConfigurationExtension(struct soap*, tt__NetworkInterfaceSetConfigurationExtension *, const char*, const char*);

inline int soap_read_tt__NetworkInterfaceSetConfigurationExtension(struct soap *soap, tt__NetworkInterfaceSetConfigurationExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__NetworkInterfaceSetConfigurationExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__NetworkInterfaceSetConfiguration_DEFINED
#define SOAP_TYPE_tt__NetworkInterfaceSetConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__NetworkInterfaceSetConfiguration(struct soap*, const char*, int, const tt__NetworkInterfaceSetConfiguration *, const char*);
SOAP_FMAC3 tt__NetworkInterfaceSetConfiguration * SOAP_FMAC4 soap_in_tt__NetworkInterfaceSetConfiguration(struct soap*, const char*, tt__NetworkInterfaceSetConfiguration *, const char*);
SOAP_FMAC1 tt__NetworkInterfaceSetConfiguration * SOAP_FMAC2 soap_instantiate_tt__NetworkInterfaceSetConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__NetworkInterfaceSetConfiguration * soap_new_tt__NetworkInterfaceSetConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__NetworkInterfaceSetConfiguration(soap, n, NULL, NULL, NULL);
}

inline tt__NetworkInterfaceSetConfiguration * soap_new_req_tt__NetworkInterfaceSetConfiguration(
	struct soap *soap)
{
	tt__NetworkInterfaceSetConfiguration *_p = soap_new_tt__NetworkInterfaceSetConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__NetworkInterfaceSetConfiguration * soap_new_set_tt__NetworkInterfaceSetConfiguration(
	struct soap *soap,
	bool *Enabled,
	tt__NetworkInterfaceConnectionSetting *Link,
	int *MTU,
	tt__IPv4NetworkInterfaceSetConfiguration *IPv4,
	tt__IPv6NetworkInterfaceSetConfiguration *IPv6,
	tt__NetworkInterfaceSetConfigurationExtension *Extension,
	char *__anyAttribute,
	char *__item1)
{
	tt__NetworkInterfaceSetConfiguration *_p = soap_new_tt__NetworkInterfaceSetConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__NetworkInterfaceSetConfiguration::Enabled = Enabled;
		_p->tt__NetworkInterfaceSetConfiguration::Link = Link;
		_p->tt__NetworkInterfaceSetConfiguration::MTU = MTU;
		_p->tt__NetworkInterfaceSetConfiguration::IPv4 = IPv4;
		_p->tt__NetworkInterfaceSetConfiguration::IPv6 = IPv6;
		_p->tt__NetworkInterfaceSetConfiguration::Extension = Extension;
		_p->tt__NetworkInterfaceSetConfiguration::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__NetworkInterfaceSetConfiguration(struct soap *soap, tt__NetworkInterfaceSetConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkInterfaceSetConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__NetworkInterfaceSetConfiguration * SOAP_FMAC4 soap_get_tt__NetworkInterfaceSetConfiguration(struct soap*, tt__NetworkInterfaceSetConfiguration *, const char*, const char*);

inline int soap_read_tt__NetworkInterfaceSetConfiguration(struct soap *soap, tt__NetworkInterfaceSetConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__NetworkInterfaceSetConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__DynamicDNSInformationExtension_DEFINED
#define SOAP_TYPE_tt__DynamicDNSInformationExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__DynamicDNSInformationExtension(struct soap*, const char*, int, const tt__DynamicDNSInformationExtension *, const char*);
SOAP_FMAC3 tt__DynamicDNSInformationExtension * SOAP_FMAC4 soap_in_tt__DynamicDNSInformationExtension(struct soap*, const char*, tt__DynamicDNSInformationExtension *, const char*);
SOAP_FMAC1 tt__DynamicDNSInformationExtension * SOAP_FMAC2 soap_instantiate_tt__DynamicDNSInformationExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__DynamicDNSInformationExtension * soap_new_tt__DynamicDNSInformationExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__DynamicDNSInformationExtension(soap, n, NULL, NULL, NULL);
}

inline tt__DynamicDNSInformationExtension * soap_new_req_tt__DynamicDNSInformationExtension(
	struct soap *soap)
{
	tt__DynamicDNSInformationExtension *_p = soap_new_tt__DynamicDNSInformationExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__DynamicDNSInformationExtension * soap_new_set_tt__DynamicDNSInformationExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__DynamicDNSInformationExtension *_p = soap_new_tt__DynamicDNSInformationExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__DynamicDNSInformationExtension::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__DynamicDNSInformationExtension(struct soap *soap, tt__DynamicDNSInformationExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:DynamicDNSInformationExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__DynamicDNSInformationExtension * SOAP_FMAC4 soap_get_tt__DynamicDNSInformationExtension(struct soap*, tt__DynamicDNSInformationExtension *, const char*, const char*);

inline int soap_read_tt__DynamicDNSInformationExtension(struct soap *soap, tt__DynamicDNSInformationExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__DynamicDNSInformationExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__DynamicDNSInformation_DEFINED
#define SOAP_TYPE_tt__DynamicDNSInformation_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__DynamicDNSInformation(struct soap*, const char*, int, const tt__DynamicDNSInformation *, const char*);
SOAP_FMAC3 tt__DynamicDNSInformation * SOAP_FMAC4 soap_in_tt__DynamicDNSInformation(struct soap*, const char*, tt__DynamicDNSInformation *, const char*);
SOAP_FMAC1 tt__DynamicDNSInformation * SOAP_FMAC2 soap_instantiate_tt__DynamicDNSInformation(struct soap*, int, const char*, const char*, size_t*);

inline tt__DynamicDNSInformation * soap_new_tt__DynamicDNSInformation(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__DynamicDNSInformation(soap, n, NULL, NULL, NULL);
}

inline tt__DynamicDNSInformation * soap_new_req_tt__DynamicDNSInformation(
	struct soap *soap,
	enum tt__DynamicDNSType Type)
{
	tt__DynamicDNSInformation *_p = soap_new_tt__DynamicDNSInformation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__DynamicDNSInformation::Type = Type;
	}
	return _p;
}

inline tt__DynamicDNSInformation * soap_new_set_tt__DynamicDNSInformation(
	struct soap *soap,
	enum tt__DynamicDNSType Type,
	std::string *Name,
	LONG64 *TTL,
	tt__DynamicDNSInformationExtension *Extension,
	char *__anyAttribute,
	char *__item1)
{
	tt__DynamicDNSInformation *_p = soap_new_tt__DynamicDNSInformation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__DynamicDNSInformation::Type = Type;
		_p->tt__DynamicDNSInformation::Name = Name;
		_p->tt__DynamicDNSInformation::TTL = TTL;
		_p->tt__DynamicDNSInformation::Extension = Extension;
		_p->tt__DynamicDNSInformation::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__DynamicDNSInformation(struct soap *soap, tt__DynamicDNSInformation const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:DynamicDNSInformation", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__DynamicDNSInformation * SOAP_FMAC4 soap_get_tt__DynamicDNSInformation(struct soap*, tt__DynamicDNSInformation *, const char*, const char*);

inline int soap_read_tt__DynamicDNSInformation(struct soap *soap, tt__DynamicDNSInformation *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__DynamicDNSInformation(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__NTPInformationExtension_DEFINED
#define SOAP_TYPE_tt__NTPInformationExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__NTPInformationExtension(struct soap*, const char*, int, const tt__NTPInformationExtension *, const char*);
SOAP_FMAC3 tt__NTPInformationExtension * SOAP_FMAC4 soap_in_tt__NTPInformationExtension(struct soap*, const char*, tt__NTPInformationExtension *, const char*);
SOAP_FMAC1 tt__NTPInformationExtension * SOAP_FMAC2 soap_instantiate_tt__NTPInformationExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__NTPInformationExtension * soap_new_tt__NTPInformationExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__NTPInformationExtension(soap, n, NULL, NULL, NULL);
}

inline tt__NTPInformationExtension * soap_new_req_tt__NTPInformationExtension(
	struct soap *soap)
{
	tt__NTPInformationExtension *_p = soap_new_tt__NTPInformationExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__NTPInformationExtension * soap_new_set_tt__NTPInformationExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__NTPInformationExtension *_p = soap_new_tt__NTPInformationExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__NTPInformationExtension::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__NTPInformationExtension(struct soap *soap, tt__NTPInformationExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NTPInformationExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__NTPInformationExtension * SOAP_FMAC4 soap_get_tt__NTPInformationExtension(struct soap*, tt__NTPInformationExtension *, const char*, const char*);

inline int soap_read_tt__NTPInformationExtension(struct soap *soap, tt__NTPInformationExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__NTPInformationExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__NTPInformation_DEFINED
#define SOAP_TYPE_tt__NTPInformation_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__NTPInformation(struct soap*, const char*, int, const tt__NTPInformation *, const char*);
SOAP_FMAC3 tt__NTPInformation * SOAP_FMAC4 soap_in_tt__NTPInformation(struct soap*, const char*, tt__NTPInformation *, const char*);
SOAP_FMAC1 tt__NTPInformation * SOAP_FMAC2 soap_instantiate_tt__NTPInformation(struct soap*, int, const char*, const char*, size_t*);

inline tt__NTPInformation * soap_new_tt__NTPInformation(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__NTPInformation(soap, n, NULL, NULL, NULL);
}

inline tt__NTPInformation * soap_new_req_tt__NTPInformation(
	struct soap *soap,
	bool FromDHCP)
{
	tt__NTPInformation *_p = soap_new_tt__NTPInformation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__NTPInformation::FromDHCP = FromDHCP;
	}
	return _p;
}

inline tt__NTPInformation * soap_new_set_tt__NTPInformation(
	struct soap *soap,
	bool FromDHCP,
	const std::vector<tt__NetworkHost *> & NTPFromDHCP,
	const std::vector<tt__NetworkHost *> & NTPManual,
	tt__NTPInformationExtension *Extension,
	char *__anyAttribute,
	char *__item1)
{
	tt__NTPInformation *_p = soap_new_tt__NTPInformation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__NTPInformation::FromDHCP = FromDHCP;
		_p->tt__NTPInformation::NTPFromDHCP = NTPFromDHCP;
		_p->tt__NTPInformation::NTPManual = NTPManual;
		_p->tt__NTPInformation::Extension = Extension;
		_p->tt__NTPInformation::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__NTPInformation(struct soap *soap, tt__NTPInformation const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NTPInformation", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__NTPInformation * SOAP_FMAC4 soap_get_tt__NTPInformation(struct soap*, tt__NTPInformation *, const char*, const char*);

inline int soap_read_tt__NTPInformation(struct soap *soap, tt__NTPInformation *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__NTPInformation(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__DNSInformationExtension_DEFINED
#define SOAP_TYPE_tt__DNSInformationExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__DNSInformationExtension(struct soap*, const char*, int, const tt__DNSInformationExtension *, const char*);
SOAP_FMAC3 tt__DNSInformationExtension * SOAP_FMAC4 soap_in_tt__DNSInformationExtension(struct soap*, const char*, tt__DNSInformationExtension *, const char*);
SOAP_FMAC1 tt__DNSInformationExtension * SOAP_FMAC2 soap_instantiate_tt__DNSInformationExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__DNSInformationExtension * soap_new_tt__DNSInformationExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__DNSInformationExtension(soap, n, NULL, NULL, NULL);
}

inline tt__DNSInformationExtension * soap_new_req_tt__DNSInformationExtension(
	struct soap *soap)
{
	tt__DNSInformationExtension *_p = soap_new_tt__DNSInformationExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__DNSInformationExtension * soap_new_set_tt__DNSInformationExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__DNSInformationExtension *_p = soap_new_tt__DNSInformationExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__DNSInformationExtension::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__DNSInformationExtension(struct soap *soap, tt__DNSInformationExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:DNSInformationExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__DNSInformationExtension * SOAP_FMAC4 soap_get_tt__DNSInformationExtension(struct soap*, tt__DNSInformationExtension *, const char*, const char*);

inline int soap_read_tt__DNSInformationExtension(struct soap *soap, tt__DNSInformationExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__DNSInformationExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__DNSInformation_DEFINED
#define SOAP_TYPE_tt__DNSInformation_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__DNSInformation(struct soap*, const char*, int, const tt__DNSInformation *, const char*);
SOAP_FMAC3 tt__DNSInformation * SOAP_FMAC4 soap_in_tt__DNSInformation(struct soap*, const char*, tt__DNSInformation *, const char*);
SOAP_FMAC1 tt__DNSInformation * SOAP_FMAC2 soap_instantiate_tt__DNSInformation(struct soap*, int, const char*, const char*, size_t*);

inline tt__DNSInformation * soap_new_tt__DNSInformation(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__DNSInformation(soap, n, NULL, NULL, NULL);
}

inline tt__DNSInformation * soap_new_req_tt__DNSInformation(
	struct soap *soap,
	bool FromDHCP)
{
	tt__DNSInformation *_p = soap_new_tt__DNSInformation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__DNSInformation::FromDHCP = FromDHCP;
	}
	return _p;
}

inline tt__DNSInformation * soap_new_set_tt__DNSInformation(
	struct soap *soap,
	bool FromDHCP,
	const std::vector<std::string> & SearchDomain,
	const std::vector<tt__IPAddress *> & DNSFromDHCP,
	const std::vector<tt__IPAddress *> & DNSManual,
	tt__DNSInformationExtension *Extension,
	char *__anyAttribute,
	char *__item1)
{
	tt__DNSInformation *_p = soap_new_tt__DNSInformation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__DNSInformation::FromDHCP = FromDHCP;
		_p->tt__DNSInformation::SearchDomain = SearchDomain;
		_p->tt__DNSInformation::DNSFromDHCP = DNSFromDHCP;
		_p->tt__DNSInformation::DNSManual = DNSManual;
		_p->tt__DNSInformation::Extension = Extension;
		_p->tt__DNSInformation::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__DNSInformation(struct soap *soap, tt__DNSInformation const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:DNSInformation", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__DNSInformation * SOAP_FMAC4 soap_get_tt__DNSInformation(struct soap*, tt__DNSInformation *, const char*, const char*);

inline int soap_read_tt__DNSInformation(struct soap *soap, tt__DNSInformation *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__DNSInformation(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__HostnameInformationExtension_DEFINED
#define SOAP_TYPE_tt__HostnameInformationExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__HostnameInformationExtension(struct soap*, const char*, int, const tt__HostnameInformationExtension *, const char*);
SOAP_FMAC3 tt__HostnameInformationExtension * SOAP_FMAC4 soap_in_tt__HostnameInformationExtension(struct soap*, const char*, tt__HostnameInformationExtension *, const char*);
SOAP_FMAC1 tt__HostnameInformationExtension * SOAP_FMAC2 soap_instantiate_tt__HostnameInformationExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__HostnameInformationExtension * soap_new_tt__HostnameInformationExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__HostnameInformationExtension(soap, n, NULL, NULL, NULL);
}

inline tt__HostnameInformationExtension * soap_new_req_tt__HostnameInformationExtension(
	struct soap *soap)
{
	tt__HostnameInformationExtension *_p = soap_new_tt__HostnameInformationExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__HostnameInformationExtension * soap_new_set_tt__HostnameInformationExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__HostnameInformationExtension *_p = soap_new_tt__HostnameInformationExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__HostnameInformationExtension::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__HostnameInformationExtension(struct soap *soap, tt__HostnameInformationExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:HostnameInformationExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__HostnameInformationExtension * SOAP_FMAC4 soap_get_tt__HostnameInformationExtension(struct soap*, tt__HostnameInformationExtension *, const char*, const char*);

inline int soap_read_tt__HostnameInformationExtension(struct soap *soap, tt__HostnameInformationExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__HostnameInformationExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__HostnameInformation_DEFINED
#define SOAP_TYPE_tt__HostnameInformation_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__HostnameInformation(struct soap*, const char*, int, const tt__HostnameInformation *, const char*);
SOAP_FMAC3 tt__HostnameInformation * SOAP_FMAC4 soap_in_tt__HostnameInformation(struct soap*, const char*, tt__HostnameInformation *, const char*);
SOAP_FMAC1 tt__HostnameInformation * SOAP_FMAC2 soap_instantiate_tt__HostnameInformation(struct soap*, int, const char*, const char*, size_t*);

inline tt__HostnameInformation * soap_new_tt__HostnameInformation(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__HostnameInformation(soap, n, NULL, NULL, NULL);
}

inline tt__HostnameInformation * soap_new_req_tt__HostnameInformation(
	struct soap *soap,
	bool FromDHCP)
{
	tt__HostnameInformation *_p = soap_new_tt__HostnameInformation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__HostnameInformation::FromDHCP = FromDHCP;
	}
	return _p;
}

inline tt__HostnameInformation * soap_new_set_tt__HostnameInformation(
	struct soap *soap,
	bool FromDHCP,
	std::string *Name,
	tt__HostnameInformationExtension *Extension,
	char *__anyAttribute,
	char *__item1)
{
	tt__HostnameInformation *_p = soap_new_tt__HostnameInformation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__HostnameInformation::FromDHCP = FromDHCP;
		_p->tt__HostnameInformation::Name = Name;
		_p->tt__HostnameInformation::Extension = Extension;
		_p->tt__HostnameInformation::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__HostnameInformation(struct soap *soap, tt__HostnameInformation const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:HostnameInformation", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__HostnameInformation * SOAP_FMAC4 soap_get_tt__HostnameInformation(struct soap*, tt__HostnameInformation *, const char*, const char*);

inline int soap_read_tt__HostnameInformation(struct soap *soap, tt__HostnameInformation *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__HostnameInformation(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__PrefixedIPv6Address_DEFINED
#define SOAP_TYPE_tt__PrefixedIPv6Address_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PrefixedIPv6Address(struct soap*, const char*, int, const tt__PrefixedIPv6Address *, const char*);
SOAP_FMAC3 tt__PrefixedIPv6Address * SOAP_FMAC4 soap_in_tt__PrefixedIPv6Address(struct soap*, const char*, tt__PrefixedIPv6Address *, const char*);
SOAP_FMAC1 tt__PrefixedIPv6Address * SOAP_FMAC2 soap_instantiate_tt__PrefixedIPv6Address(struct soap*, int, const char*, const char*, size_t*);

inline tt__PrefixedIPv6Address * soap_new_tt__PrefixedIPv6Address(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PrefixedIPv6Address(soap, n, NULL, NULL, NULL);
}

inline tt__PrefixedIPv6Address * soap_new_req_tt__PrefixedIPv6Address(
	struct soap *soap,
	const std::string& Address,
	int PrefixLength)
{
	tt__PrefixedIPv6Address *_p = soap_new_tt__PrefixedIPv6Address(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PrefixedIPv6Address::Address = Address;
		_p->tt__PrefixedIPv6Address::PrefixLength = PrefixLength;
	}
	return _p;
}

inline tt__PrefixedIPv6Address * soap_new_set_tt__PrefixedIPv6Address(
	struct soap *soap,
	const std::string& Address,
	int PrefixLength,
	char *__item1)
{
	tt__PrefixedIPv6Address *_p = soap_new_tt__PrefixedIPv6Address(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PrefixedIPv6Address::Address = Address;
		_p->tt__PrefixedIPv6Address::PrefixLength = PrefixLength;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__PrefixedIPv6Address(struct soap *soap, tt__PrefixedIPv6Address const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PrefixedIPv6Address", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__PrefixedIPv6Address * SOAP_FMAC4 soap_get_tt__PrefixedIPv6Address(struct soap*, tt__PrefixedIPv6Address *, const char*, const char*);

inline int soap_read_tt__PrefixedIPv6Address(struct soap *soap, tt__PrefixedIPv6Address *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__PrefixedIPv6Address(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__PrefixedIPv4Address_DEFINED
#define SOAP_TYPE_tt__PrefixedIPv4Address_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PrefixedIPv4Address(struct soap*, const char*, int, const tt__PrefixedIPv4Address *, const char*);
SOAP_FMAC3 tt__PrefixedIPv4Address * SOAP_FMAC4 soap_in_tt__PrefixedIPv4Address(struct soap*, const char*, tt__PrefixedIPv4Address *, const char*);
SOAP_FMAC1 tt__PrefixedIPv4Address * SOAP_FMAC2 soap_instantiate_tt__PrefixedIPv4Address(struct soap*, int, const char*, const char*, size_t*);

inline tt__PrefixedIPv4Address * soap_new_tt__PrefixedIPv4Address(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PrefixedIPv4Address(soap, n, NULL, NULL, NULL);
}

inline tt__PrefixedIPv4Address * soap_new_req_tt__PrefixedIPv4Address(
	struct soap *soap,
	const std::string& Address,
	int PrefixLength)
{
	tt__PrefixedIPv4Address *_p = soap_new_tt__PrefixedIPv4Address(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PrefixedIPv4Address::Address = Address;
		_p->tt__PrefixedIPv4Address::PrefixLength = PrefixLength;
	}
	return _p;
}

inline tt__PrefixedIPv4Address * soap_new_set_tt__PrefixedIPv4Address(
	struct soap *soap,
	const std::string& Address,
	int PrefixLength,
	char *__item1)
{
	tt__PrefixedIPv4Address *_p = soap_new_tt__PrefixedIPv4Address(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PrefixedIPv4Address::Address = Address;
		_p->tt__PrefixedIPv4Address::PrefixLength = PrefixLength;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__PrefixedIPv4Address(struct soap *soap, tt__PrefixedIPv4Address const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PrefixedIPv4Address", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__PrefixedIPv4Address * SOAP_FMAC4 soap_get_tt__PrefixedIPv4Address(struct soap*, tt__PrefixedIPv4Address *, const char*, const char*);

inline int soap_read_tt__PrefixedIPv4Address(struct soap *soap, tt__PrefixedIPv4Address *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__PrefixedIPv4Address(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__IPAddress_DEFINED
#define SOAP_TYPE_tt__IPAddress_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IPAddress(struct soap*, const char*, int, const tt__IPAddress *, const char*);
SOAP_FMAC3 tt__IPAddress * SOAP_FMAC4 soap_in_tt__IPAddress(struct soap*, const char*, tt__IPAddress *, const char*);
SOAP_FMAC1 tt__IPAddress * SOAP_FMAC2 soap_instantiate_tt__IPAddress(struct soap*, int, const char*, const char*, size_t*);

inline tt__IPAddress * soap_new_tt__IPAddress(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__IPAddress(soap, n, NULL, NULL, NULL);
}

inline tt__IPAddress * soap_new_req_tt__IPAddress(
	struct soap *soap,
	enum tt__IPType Type)
{
	tt__IPAddress *_p = soap_new_tt__IPAddress(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__IPAddress::Type = Type;
	}
	return _p;
}

inline tt__IPAddress * soap_new_set_tt__IPAddress(
	struct soap *soap,
	enum tt__IPType Type,
	std::string *IPv4Address,
	std::string *IPv6Address,
	char *__item1)
{
	tt__IPAddress *_p = soap_new_tt__IPAddress(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__IPAddress::Type = Type;
		_p->tt__IPAddress::IPv4Address = IPv4Address;
		_p->tt__IPAddress::IPv6Address = IPv6Address;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__IPAddress(struct soap *soap, tt__IPAddress const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IPAddress", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__IPAddress * SOAP_FMAC4 soap_get_tt__IPAddress(struct soap*, tt__IPAddress *, const char*, const char*);

inline int soap_read_tt__IPAddress(struct soap *soap, tt__IPAddress *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__IPAddress(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__NetworkHostExtension_DEFINED
#define SOAP_TYPE_tt__NetworkHostExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__NetworkHostExtension(struct soap*, const char*, int, const tt__NetworkHostExtension *, const char*);
SOAP_FMAC3 tt__NetworkHostExtension * SOAP_FMAC4 soap_in_tt__NetworkHostExtension(struct soap*, const char*, tt__NetworkHostExtension *, const char*);
SOAP_FMAC1 tt__NetworkHostExtension * SOAP_FMAC2 soap_instantiate_tt__NetworkHostExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__NetworkHostExtension * soap_new_tt__NetworkHostExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__NetworkHostExtension(soap, n, NULL, NULL, NULL);
}

inline tt__NetworkHostExtension * soap_new_req_tt__NetworkHostExtension(
	struct soap *soap)
{
	tt__NetworkHostExtension *_p = soap_new_tt__NetworkHostExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__NetworkHostExtension * soap_new_set_tt__NetworkHostExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__NetworkHostExtension *_p = soap_new_tt__NetworkHostExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__NetworkHostExtension::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__NetworkHostExtension(struct soap *soap, tt__NetworkHostExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkHostExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__NetworkHostExtension * SOAP_FMAC4 soap_get_tt__NetworkHostExtension(struct soap*, tt__NetworkHostExtension *, const char*, const char*);

inline int soap_read_tt__NetworkHostExtension(struct soap *soap, tt__NetworkHostExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__NetworkHostExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__NetworkHost_DEFINED
#define SOAP_TYPE_tt__NetworkHost_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__NetworkHost(struct soap*, const char*, int, const tt__NetworkHost *, const char*);
SOAP_FMAC3 tt__NetworkHost * SOAP_FMAC4 soap_in_tt__NetworkHost(struct soap*, const char*, tt__NetworkHost *, const char*);
SOAP_FMAC1 tt__NetworkHost * SOAP_FMAC2 soap_instantiate_tt__NetworkHost(struct soap*, int, const char*, const char*, size_t*);

inline tt__NetworkHost * soap_new_tt__NetworkHost(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__NetworkHost(soap, n, NULL, NULL, NULL);
}

inline tt__NetworkHost * soap_new_req_tt__NetworkHost(
	struct soap *soap,
	enum tt__NetworkHostType Type)
{
	tt__NetworkHost *_p = soap_new_tt__NetworkHost(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__NetworkHost::Type = Type;
	}
	return _p;
}

inline tt__NetworkHost * soap_new_set_tt__NetworkHost(
	struct soap *soap,
	enum tt__NetworkHostType Type,
	std::string *IPv4Address,
	std::string *IPv6Address,
	std::string *DNSname,
	tt__NetworkHostExtension *Extension,
	char *__anyAttribute,
	char *__item1)
{
	tt__NetworkHost *_p = soap_new_tt__NetworkHost(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__NetworkHost::Type = Type;
		_p->tt__NetworkHost::IPv4Address = IPv4Address;
		_p->tt__NetworkHost::IPv6Address = IPv6Address;
		_p->tt__NetworkHost::DNSname = DNSname;
		_p->tt__NetworkHost::Extension = Extension;
		_p->tt__NetworkHost::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__NetworkHost(struct soap *soap, tt__NetworkHost const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkHost", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__NetworkHost * SOAP_FMAC4 soap_get_tt__NetworkHost(struct soap*, tt__NetworkHost *, const char*, const char*);

inline int soap_read_tt__NetworkHost(struct soap *soap, tt__NetworkHost *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__NetworkHost(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__NetworkProtocolExtension_DEFINED
#define SOAP_TYPE_tt__NetworkProtocolExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__NetworkProtocolExtension(struct soap*, const char*, int, const tt__NetworkProtocolExtension *, const char*);
SOAP_FMAC3 tt__NetworkProtocolExtension * SOAP_FMAC4 soap_in_tt__NetworkProtocolExtension(struct soap*, const char*, tt__NetworkProtocolExtension *, const char*);
SOAP_FMAC1 tt__NetworkProtocolExtension * SOAP_FMAC2 soap_instantiate_tt__NetworkProtocolExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__NetworkProtocolExtension * soap_new_tt__NetworkProtocolExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__NetworkProtocolExtension(soap, n, NULL, NULL, NULL);
}

inline tt__NetworkProtocolExtension * soap_new_req_tt__NetworkProtocolExtension(
	struct soap *soap)
{
	tt__NetworkProtocolExtension *_p = soap_new_tt__NetworkProtocolExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__NetworkProtocolExtension * soap_new_set_tt__NetworkProtocolExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__NetworkProtocolExtension *_p = soap_new_tt__NetworkProtocolExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__NetworkProtocolExtension::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__NetworkProtocolExtension(struct soap *soap, tt__NetworkProtocolExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkProtocolExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__NetworkProtocolExtension * SOAP_FMAC4 soap_get_tt__NetworkProtocolExtension(struct soap*, tt__NetworkProtocolExtension *, const char*, const char*);

inline int soap_read_tt__NetworkProtocolExtension(struct soap *soap, tt__NetworkProtocolExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__NetworkProtocolExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__NetworkProtocol_DEFINED
#define SOAP_TYPE_tt__NetworkProtocol_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__NetworkProtocol(struct soap*, const char*, int, const tt__NetworkProtocol *, const char*);
SOAP_FMAC3 tt__NetworkProtocol * SOAP_FMAC4 soap_in_tt__NetworkProtocol(struct soap*, const char*, tt__NetworkProtocol *, const char*);
SOAP_FMAC1 tt__NetworkProtocol * SOAP_FMAC2 soap_instantiate_tt__NetworkProtocol(struct soap*, int, const char*, const char*, size_t*);

inline tt__NetworkProtocol * soap_new_tt__NetworkProtocol(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__NetworkProtocol(soap, n, NULL, NULL, NULL);
}

inline tt__NetworkProtocol * soap_new_req_tt__NetworkProtocol(
	struct soap *soap,
	enum tt__NetworkProtocolType Name,
	bool Enabled,
	const std::vector<int> & Port)
{
	tt__NetworkProtocol *_p = soap_new_tt__NetworkProtocol(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__NetworkProtocol::Name = Name;
		_p->tt__NetworkProtocol::Enabled = Enabled;
		_p->tt__NetworkProtocol::Port = Port;
	}
	return _p;
}

inline tt__NetworkProtocol * soap_new_set_tt__NetworkProtocol(
	struct soap *soap,
	enum tt__NetworkProtocolType Name,
	bool Enabled,
	const std::vector<int> & Port,
	tt__NetworkProtocolExtension *Extension,
	char *__anyAttribute,
	char *__item1)
{
	tt__NetworkProtocol *_p = soap_new_tt__NetworkProtocol(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__NetworkProtocol::Name = Name;
		_p->tt__NetworkProtocol::Enabled = Enabled;
		_p->tt__NetworkProtocol::Port = Port;
		_p->tt__NetworkProtocol::Extension = Extension;
		_p->tt__NetworkProtocol::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__NetworkProtocol(struct soap *soap, tt__NetworkProtocol const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkProtocol", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__NetworkProtocol * SOAP_FMAC4 soap_get_tt__NetworkProtocol(struct soap*, tt__NetworkProtocol *, const char*, const char*);

inline int soap_read_tt__NetworkProtocol(struct soap *soap, tt__NetworkProtocol *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__NetworkProtocol(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__IPv6ConfigurationExtension_DEFINED
#define SOAP_TYPE_tt__IPv6ConfigurationExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IPv6ConfigurationExtension(struct soap*, const char*, int, const tt__IPv6ConfigurationExtension *, const char*);
SOAP_FMAC3 tt__IPv6ConfigurationExtension * SOAP_FMAC4 soap_in_tt__IPv6ConfigurationExtension(struct soap*, const char*, tt__IPv6ConfigurationExtension *, const char*);
SOAP_FMAC1 tt__IPv6ConfigurationExtension * SOAP_FMAC2 soap_instantiate_tt__IPv6ConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__IPv6ConfigurationExtension * soap_new_tt__IPv6ConfigurationExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__IPv6ConfigurationExtension(soap, n, NULL, NULL, NULL);
}

inline tt__IPv6ConfigurationExtension * soap_new_req_tt__IPv6ConfigurationExtension(
	struct soap *soap)
{
	tt__IPv6ConfigurationExtension *_p = soap_new_tt__IPv6ConfigurationExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__IPv6ConfigurationExtension * soap_new_set_tt__IPv6ConfigurationExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__IPv6ConfigurationExtension *_p = soap_new_tt__IPv6ConfigurationExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__IPv6ConfigurationExtension::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__IPv6ConfigurationExtension(struct soap *soap, tt__IPv6ConfigurationExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IPv6ConfigurationExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__IPv6ConfigurationExtension * SOAP_FMAC4 soap_get_tt__IPv6ConfigurationExtension(struct soap*, tt__IPv6ConfigurationExtension *, const char*, const char*);

inline int soap_read_tt__IPv6ConfigurationExtension(struct soap *soap, tt__IPv6ConfigurationExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__IPv6ConfigurationExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__IPv6Configuration_DEFINED
#define SOAP_TYPE_tt__IPv6Configuration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IPv6Configuration(struct soap*, const char*, int, const tt__IPv6Configuration *, const char*);
SOAP_FMAC3 tt__IPv6Configuration * SOAP_FMAC4 soap_in_tt__IPv6Configuration(struct soap*, const char*, tt__IPv6Configuration *, const char*);
SOAP_FMAC1 tt__IPv6Configuration * SOAP_FMAC2 soap_instantiate_tt__IPv6Configuration(struct soap*, int, const char*, const char*, size_t*);

inline tt__IPv6Configuration * soap_new_tt__IPv6Configuration(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__IPv6Configuration(soap, n, NULL, NULL, NULL);
}

inline tt__IPv6Configuration * soap_new_req_tt__IPv6Configuration(
	struct soap *soap,
	enum tt__IPv6DHCPConfiguration DHCP)
{
	tt__IPv6Configuration *_p = soap_new_tt__IPv6Configuration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__IPv6Configuration::DHCP = DHCP;
	}
	return _p;
}

inline tt__IPv6Configuration * soap_new_set_tt__IPv6Configuration(
	struct soap *soap,
	bool *AcceptRouterAdvert,
	enum tt__IPv6DHCPConfiguration DHCP,
	const std::vector<tt__PrefixedIPv6Address *> & Manual,
	const std::vector<tt__PrefixedIPv6Address *> & LinkLocal,
	const std::vector<tt__PrefixedIPv6Address *> & FromDHCP,
	const std::vector<tt__PrefixedIPv6Address *> & FromRA,
	tt__IPv6ConfigurationExtension *Extension,
	char *__anyAttribute,
	char *__item1)
{
	tt__IPv6Configuration *_p = soap_new_tt__IPv6Configuration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__IPv6Configuration::AcceptRouterAdvert = AcceptRouterAdvert;
		_p->tt__IPv6Configuration::DHCP = DHCP;
		_p->tt__IPv6Configuration::Manual = Manual;
		_p->tt__IPv6Configuration::LinkLocal = LinkLocal;
		_p->tt__IPv6Configuration::FromDHCP = FromDHCP;
		_p->tt__IPv6Configuration::FromRA = FromRA;
		_p->tt__IPv6Configuration::Extension = Extension;
		_p->tt__IPv6Configuration::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__IPv6Configuration(struct soap *soap, tt__IPv6Configuration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IPv6Configuration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__IPv6Configuration * SOAP_FMAC4 soap_get_tt__IPv6Configuration(struct soap*, tt__IPv6Configuration *, const char*, const char*);

inline int soap_read_tt__IPv6Configuration(struct soap *soap, tt__IPv6Configuration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__IPv6Configuration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__IPv4Configuration_DEFINED
#define SOAP_TYPE_tt__IPv4Configuration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IPv4Configuration(struct soap*, const char*, int, const tt__IPv4Configuration *, const char*);
SOAP_FMAC3 tt__IPv4Configuration * SOAP_FMAC4 soap_in_tt__IPv4Configuration(struct soap*, const char*, tt__IPv4Configuration *, const char*);
SOAP_FMAC1 tt__IPv4Configuration * SOAP_FMAC2 soap_instantiate_tt__IPv4Configuration(struct soap*, int, const char*, const char*, size_t*);

inline tt__IPv4Configuration * soap_new_tt__IPv4Configuration(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__IPv4Configuration(soap, n, NULL, NULL, NULL);
}

inline tt__IPv4Configuration * soap_new_req_tt__IPv4Configuration(
	struct soap *soap,
	bool DHCP)
{
	tt__IPv4Configuration *_p = soap_new_tt__IPv4Configuration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__IPv4Configuration::DHCP = DHCP;
	}
	return _p;
}

inline tt__IPv4Configuration * soap_new_set_tt__IPv4Configuration(
	struct soap *soap,
	const std::vector<tt__PrefixedIPv4Address *> & Manual,
	tt__PrefixedIPv4Address *LinkLocal,
	tt__PrefixedIPv4Address *FromDHCP,
	bool DHCP,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__IPv4Configuration *_p = soap_new_tt__IPv4Configuration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__IPv4Configuration::Manual = Manual;
		_p->tt__IPv4Configuration::LinkLocal = LinkLocal;
		_p->tt__IPv4Configuration::FromDHCP = FromDHCP;
		_p->tt__IPv4Configuration::DHCP = DHCP;
		_p->tt__IPv4Configuration::__any = __any;
		_p->tt__IPv4Configuration::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__IPv4Configuration(struct soap *soap, tt__IPv4Configuration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IPv4Configuration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__IPv4Configuration * SOAP_FMAC4 soap_get_tt__IPv4Configuration(struct soap*, tt__IPv4Configuration *, const char*, const char*);

inline int soap_read_tt__IPv4Configuration(struct soap *soap, tt__IPv4Configuration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__IPv4Configuration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__IPv4NetworkInterface_DEFINED
#define SOAP_TYPE_tt__IPv4NetworkInterface_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IPv4NetworkInterface(struct soap*, const char*, int, const tt__IPv4NetworkInterface *, const char*);
SOAP_FMAC3 tt__IPv4NetworkInterface * SOAP_FMAC4 soap_in_tt__IPv4NetworkInterface(struct soap*, const char*, tt__IPv4NetworkInterface *, const char*);
SOAP_FMAC1 tt__IPv4NetworkInterface * SOAP_FMAC2 soap_instantiate_tt__IPv4NetworkInterface(struct soap*, int, const char*, const char*, size_t*);

inline tt__IPv4NetworkInterface * soap_new_tt__IPv4NetworkInterface(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__IPv4NetworkInterface(soap, n, NULL, NULL, NULL);
}

inline tt__IPv4NetworkInterface * soap_new_req_tt__IPv4NetworkInterface(
	struct soap *soap,
	bool Enabled,
	tt__IPv4Configuration *Config)
{
	tt__IPv4NetworkInterface *_p = soap_new_tt__IPv4NetworkInterface(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__IPv4NetworkInterface::Enabled = Enabled;
		_p->tt__IPv4NetworkInterface::Config = Config;
	}
	return _p;
}

inline tt__IPv4NetworkInterface * soap_new_set_tt__IPv4NetworkInterface(
	struct soap *soap,
	bool Enabled,
	tt__IPv4Configuration *Config,
	char *__item1)
{
	tt__IPv4NetworkInterface *_p = soap_new_tt__IPv4NetworkInterface(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__IPv4NetworkInterface::Enabled = Enabled;
		_p->tt__IPv4NetworkInterface::Config = Config;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__IPv4NetworkInterface(struct soap *soap, tt__IPv4NetworkInterface const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IPv4NetworkInterface", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__IPv4NetworkInterface * SOAP_FMAC4 soap_get_tt__IPv4NetworkInterface(struct soap*, tt__IPv4NetworkInterface *, const char*, const char*);

inline int soap_read_tt__IPv4NetworkInterface(struct soap *soap, tt__IPv4NetworkInterface *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__IPv4NetworkInterface(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__IPv6NetworkInterface_DEFINED
#define SOAP_TYPE_tt__IPv6NetworkInterface_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IPv6NetworkInterface(struct soap*, const char*, int, const tt__IPv6NetworkInterface *, const char*);
SOAP_FMAC3 tt__IPv6NetworkInterface * SOAP_FMAC4 soap_in_tt__IPv6NetworkInterface(struct soap*, const char*, tt__IPv6NetworkInterface *, const char*);
SOAP_FMAC1 tt__IPv6NetworkInterface * SOAP_FMAC2 soap_instantiate_tt__IPv6NetworkInterface(struct soap*, int, const char*, const char*, size_t*);

inline tt__IPv6NetworkInterface * soap_new_tt__IPv6NetworkInterface(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__IPv6NetworkInterface(soap, n, NULL, NULL, NULL);
}

inline tt__IPv6NetworkInterface * soap_new_req_tt__IPv6NetworkInterface(
	struct soap *soap,
	bool Enabled)
{
	tt__IPv6NetworkInterface *_p = soap_new_tt__IPv6NetworkInterface(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__IPv6NetworkInterface::Enabled = Enabled;
	}
	return _p;
}

inline tt__IPv6NetworkInterface * soap_new_set_tt__IPv6NetworkInterface(
	struct soap *soap,
	bool Enabled,
	tt__IPv6Configuration *Config,
	char *__item1)
{
	tt__IPv6NetworkInterface *_p = soap_new_tt__IPv6NetworkInterface(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__IPv6NetworkInterface::Enabled = Enabled;
		_p->tt__IPv6NetworkInterface::Config = Config;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__IPv6NetworkInterface(struct soap *soap, tt__IPv6NetworkInterface const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IPv6NetworkInterface", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__IPv6NetworkInterface * SOAP_FMAC4 soap_get_tt__IPv6NetworkInterface(struct soap*, tt__IPv6NetworkInterface *, const char*, const char*);

inline int soap_read_tt__IPv6NetworkInterface(struct soap *soap, tt__IPv6NetworkInterface *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__IPv6NetworkInterface(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__NetworkInterfaceInfo_DEFINED
#define SOAP_TYPE_tt__NetworkInterfaceInfo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__NetworkInterfaceInfo(struct soap*, const char*, int, const tt__NetworkInterfaceInfo *, const char*);
SOAP_FMAC3 tt__NetworkInterfaceInfo * SOAP_FMAC4 soap_in_tt__NetworkInterfaceInfo(struct soap*, const char*, tt__NetworkInterfaceInfo *, const char*);
SOAP_FMAC1 tt__NetworkInterfaceInfo * SOAP_FMAC2 soap_instantiate_tt__NetworkInterfaceInfo(struct soap*, int, const char*, const char*, size_t*);

inline tt__NetworkInterfaceInfo * soap_new_tt__NetworkInterfaceInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__NetworkInterfaceInfo(soap, n, NULL, NULL, NULL);
}

inline tt__NetworkInterfaceInfo * soap_new_req_tt__NetworkInterfaceInfo(
	struct soap *soap,
	const std::string& HwAddress)
{
	tt__NetworkInterfaceInfo *_p = soap_new_tt__NetworkInterfaceInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__NetworkInterfaceInfo::HwAddress = HwAddress;
	}
	return _p;
}

inline tt__NetworkInterfaceInfo * soap_new_set_tt__NetworkInterfaceInfo(
	struct soap *soap,
	std::string *Name,
	const std::string& HwAddress,
	int *MTU,
	char *__item1)
{
	tt__NetworkInterfaceInfo *_p = soap_new_tt__NetworkInterfaceInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__NetworkInterfaceInfo::Name = Name;
		_p->tt__NetworkInterfaceInfo::HwAddress = HwAddress;
		_p->tt__NetworkInterfaceInfo::MTU = MTU;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__NetworkInterfaceInfo(struct soap *soap, tt__NetworkInterfaceInfo const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkInterfaceInfo", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__NetworkInterfaceInfo * SOAP_FMAC4 soap_get_tt__NetworkInterfaceInfo(struct soap*, tt__NetworkInterfaceInfo *, const char*, const char*);

inline int soap_read_tt__NetworkInterfaceInfo(struct soap *soap, tt__NetworkInterfaceInfo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__NetworkInterfaceInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__NetworkInterfaceConnectionSetting_DEFINED
#define SOAP_TYPE_tt__NetworkInterfaceConnectionSetting_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__NetworkInterfaceConnectionSetting(struct soap*, const char*, int, const tt__NetworkInterfaceConnectionSetting *, const char*);
SOAP_FMAC3 tt__NetworkInterfaceConnectionSetting * SOAP_FMAC4 soap_in_tt__NetworkInterfaceConnectionSetting(struct soap*, const char*, tt__NetworkInterfaceConnectionSetting *, const char*);
SOAP_FMAC1 tt__NetworkInterfaceConnectionSetting * SOAP_FMAC2 soap_instantiate_tt__NetworkInterfaceConnectionSetting(struct soap*, int, const char*, const char*, size_t*);

inline tt__NetworkInterfaceConnectionSetting * soap_new_tt__NetworkInterfaceConnectionSetting(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__NetworkInterfaceConnectionSetting(soap, n, NULL, NULL, NULL);
}

inline tt__NetworkInterfaceConnectionSetting * soap_new_req_tt__NetworkInterfaceConnectionSetting(
	struct soap *soap,
	bool AutoNegotiation,
	int Speed,
	enum tt__Duplex Duplex)
{
	tt__NetworkInterfaceConnectionSetting *_p = soap_new_tt__NetworkInterfaceConnectionSetting(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__NetworkInterfaceConnectionSetting::AutoNegotiation = AutoNegotiation;
		_p->tt__NetworkInterfaceConnectionSetting::Speed = Speed;
		_p->tt__NetworkInterfaceConnectionSetting::Duplex = Duplex;
	}
	return _p;
}

inline tt__NetworkInterfaceConnectionSetting * soap_new_set_tt__NetworkInterfaceConnectionSetting(
	struct soap *soap,
	bool AutoNegotiation,
	int Speed,
	enum tt__Duplex Duplex,
	char *__item1)
{
	tt__NetworkInterfaceConnectionSetting *_p = soap_new_tt__NetworkInterfaceConnectionSetting(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__NetworkInterfaceConnectionSetting::AutoNegotiation = AutoNegotiation;
		_p->tt__NetworkInterfaceConnectionSetting::Speed = Speed;
		_p->tt__NetworkInterfaceConnectionSetting::Duplex = Duplex;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__NetworkInterfaceConnectionSetting(struct soap *soap, tt__NetworkInterfaceConnectionSetting const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkInterfaceConnectionSetting", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__NetworkInterfaceConnectionSetting * SOAP_FMAC4 soap_get_tt__NetworkInterfaceConnectionSetting(struct soap*, tt__NetworkInterfaceConnectionSetting *, const char*, const char*);

inline int soap_read_tt__NetworkInterfaceConnectionSetting(struct soap *soap, tt__NetworkInterfaceConnectionSetting *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__NetworkInterfaceConnectionSetting(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__NetworkInterfaceLink_DEFINED
#define SOAP_TYPE_tt__NetworkInterfaceLink_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__NetworkInterfaceLink(struct soap*, const char*, int, const tt__NetworkInterfaceLink *, const char*);
SOAP_FMAC3 tt__NetworkInterfaceLink * SOAP_FMAC4 soap_in_tt__NetworkInterfaceLink(struct soap*, const char*, tt__NetworkInterfaceLink *, const char*);
SOAP_FMAC1 tt__NetworkInterfaceLink * SOAP_FMAC2 soap_instantiate_tt__NetworkInterfaceLink(struct soap*, int, const char*, const char*, size_t*);

inline tt__NetworkInterfaceLink * soap_new_tt__NetworkInterfaceLink(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__NetworkInterfaceLink(soap, n, NULL, NULL, NULL);
}

inline tt__NetworkInterfaceLink * soap_new_req_tt__NetworkInterfaceLink(
	struct soap *soap,
	tt__NetworkInterfaceConnectionSetting *AdminSettings,
	tt__NetworkInterfaceConnectionSetting *OperSettings,
	int InterfaceType)
{
	tt__NetworkInterfaceLink *_p = soap_new_tt__NetworkInterfaceLink(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__NetworkInterfaceLink::AdminSettings = AdminSettings;
		_p->tt__NetworkInterfaceLink::OperSettings = OperSettings;
		_p->tt__NetworkInterfaceLink::InterfaceType = InterfaceType;
	}
	return _p;
}

inline tt__NetworkInterfaceLink * soap_new_set_tt__NetworkInterfaceLink(
	struct soap *soap,
	tt__NetworkInterfaceConnectionSetting *AdminSettings,
	tt__NetworkInterfaceConnectionSetting *OperSettings,
	int InterfaceType,
	char *__item1)
{
	tt__NetworkInterfaceLink *_p = soap_new_tt__NetworkInterfaceLink(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__NetworkInterfaceLink::AdminSettings = AdminSettings;
		_p->tt__NetworkInterfaceLink::OperSettings = OperSettings;
		_p->tt__NetworkInterfaceLink::InterfaceType = InterfaceType;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__NetworkInterfaceLink(struct soap *soap, tt__NetworkInterfaceLink const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkInterfaceLink", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__NetworkInterfaceLink * SOAP_FMAC4 soap_get_tt__NetworkInterfaceLink(struct soap*, tt__NetworkInterfaceLink *, const char*, const char*);

inline int soap_read_tt__NetworkInterfaceLink(struct soap *soap, tt__NetworkInterfaceLink *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__NetworkInterfaceLink(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__NetworkInterfaceExtension2_DEFINED
#define SOAP_TYPE_tt__NetworkInterfaceExtension2_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__NetworkInterfaceExtension2(struct soap*, const char*, int, const tt__NetworkInterfaceExtension2 *, const char*);
SOAP_FMAC3 tt__NetworkInterfaceExtension2 * SOAP_FMAC4 soap_in_tt__NetworkInterfaceExtension2(struct soap*, const char*, tt__NetworkInterfaceExtension2 *, const char*);
SOAP_FMAC1 tt__NetworkInterfaceExtension2 * SOAP_FMAC2 soap_instantiate_tt__NetworkInterfaceExtension2(struct soap*, int, const char*, const char*, size_t*);

inline tt__NetworkInterfaceExtension2 * soap_new_tt__NetworkInterfaceExtension2(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__NetworkInterfaceExtension2(soap, n, NULL, NULL, NULL);
}

inline tt__NetworkInterfaceExtension2 * soap_new_req_tt__NetworkInterfaceExtension2(
	struct soap *soap)
{
	tt__NetworkInterfaceExtension2 *_p = soap_new_tt__NetworkInterfaceExtension2(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__NetworkInterfaceExtension2 * soap_new_set_tt__NetworkInterfaceExtension2(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__NetworkInterfaceExtension2 *_p = soap_new_tt__NetworkInterfaceExtension2(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__NetworkInterfaceExtension2::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__NetworkInterfaceExtension2(struct soap *soap, tt__NetworkInterfaceExtension2 const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkInterfaceExtension2", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__NetworkInterfaceExtension2 * SOAP_FMAC4 soap_get_tt__NetworkInterfaceExtension2(struct soap*, tt__NetworkInterfaceExtension2 *, const char*, const char*);

inline int soap_read_tt__NetworkInterfaceExtension2(struct soap *soap, tt__NetworkInterfaceExtension2 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__NetworkInterfaceExtension2(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__Dot3Configuration_DEFINED
#define SOAP_TYPE_tt__Dot3Configuration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Dot3Configuration(struct soap*, const char*, int, const tt__Dot3Configuration *, const char*);
SOAP_FMAC3 tt__Dot3Configuration * SOAP_FMAC4 soap_in_tt__Dot3Configuration(struct soap*, const char*, tt__Dot3Configuration *, const char*);
SOAP_FMAC1 tt__Dot3Configuration * SOAP_FMAC2 soap_instantiate_tt__Dot3Configuration(struct soap*, int, const char*, const char*, size_t*);

inline tt__Dot3Configuration * soap_new_tt__Dot3Configuration(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Dot3Configuration(soap, n, NULL, NULL, NULL);
}

inline tt__Dot3Configuration * soap_new_req_tt__Dot3Configuration(
	struct soap *soap)
{
	tt__Dot3Configuration *_p = soap_new_tt__Dot3Configuration(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__Dot3Configuration * soap_new_set_tt__Dot3Configuration(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__Dot3Configuration *_p = soap_new_tt__Dot3Configuration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Dot3Configuration::__any = __any;
		_p->tt__Dot3Configuration::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__Dot3Configuration(struct soap *soap, tt__Dot3Configuration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Dot3Configuration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__Dot3Configuration * SOAP_FMAC4 soap_get_tt__Dot3Configuration(struct soap*, tt__Dot3Configuration *, const char*, const char*);

inline int soap_read_tt__Dot3Configuration(struct soap *soap, tt__Dot3Configuration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__Dot3Configuration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__NetworkInterfaceExtension_DEFINED
#define SOAP_TYPE_tt__NetworkInterfaceExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__NetworkInterfaceExtension(struct soap*, const char*, int, const tt__NetworkInterfaceExtension *, const char*);
SOAP_FMAC3 tt__NetworkInterfaceExtension * SOAP_FMAC4 soap_in_tt__NetworkInterfaceExtension(struct soap*, const char*, tt__NetworkInterfaceExtension *, const char*);
SOAP_FMAC1 tt__NetworkInterfaceExtension * SOAP_FMAC2 soap_instantiate_tt__NetworkInterfaceExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__NetworkInterfaceExtension * soap_new_tt__NetworkInterfaceExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__NetworkInterfaceExtension(soap, n, NULL, NULL, NULL);
}

inline tt__NetworkInterfaceExtension * soap_new_req_tt__NetworkInterfaceExtension(
	struct soap *soap,
	int InterfaceType)
{
	tt__NetworkInterfaceExtension *_p = soap_new_tt__NetworkInterfaceExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__NetworkInterfaceExtension::InterfaceType = InterfaceType;
	}
	return _p;
}

inline tt__NetworkInterfaceExtension * soap_new_set_tt__NetworkInterfaceExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	int InterfaceType,
	const std::vector<tt__Dot3Configuration *> & Dot3,
	const std::vector<tt__Dot11Configuration *> & Dot11,
	tt__NetworkInterfaceExtension2 *Extension,
	char *__item1)
{
	tt__NetworkInterfaceExtension *_p = soap_new_tt__NetworkInterfaceExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__NetworkInterfaceExtension::__any = __any;
		_p->tt__NetworkInterfaceExtension::InterfaceType = InterfaceType;
		_p->tt__NetworkInterfaceExtension::Dot3 = Dot3;
		_p->tt__NetworkInterfaceExtension::Dot11 = Dot11;
		_p->tt__NetworkInterfaceExtension::Extension = Extension;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__NetworkInterfaceExtension(struct soap *soap, tt__NetworkInterfaceExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkInterfaceExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__NetworkInterfaceExtension * SOAP_FMAC4 soap_get_tt__NetworkInterfaceExtension(struct soap*, tt__NetworkInterfaceExtension *, const char*, const char*);

inline int soap_read_tt__NetworkInterfaceExtension(struct soap *soap, tt__NetworkInterfaceExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__NetworkInterfaceExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__NetworkInterface_DEFINED
#define SOAP_TYPE_tt__NetworkInterface_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__NetworkInterface(struct soap*, const char*, int, const tt__NetworkInterface *, const char*);
SOAP_FMAC3 tt__NetworkInterface * SOAP_FMAC4 soap_in_tt__NetworkInterface(struct soap*, const char*, tt__NetworkInterface *, const char*);
SOAP_FMAC1 tt__NetworkInterface * SOAP_FMAC2 soap_instantiate_tt__NetworkInterface(struct soap*, int, const char*, const char*, size_t*);

inline tt__NetworkInterface * soap_new_tt__NetworkInterface(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__NetworkInterface(soap, n, NULL, NULL, NULL);
}

inline tt__NetworkInterface * soap_new_req_tt__NetworkInterface(
	struct soap *soap,
	bool Enabled,
	const std::string& token1)
{
	tt__NetworkInterface *_p = soap_new_tt__NetworkInterface(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__NetworkInterface::Enabled = Enabled;
		_p->tt__DeviceEntity::token = token1;
	}
	return _p;
}

inline tt__NetworkInterface * soap_new_set_tt__NetworkInterface(
	struct soap *soap,
	bool Enabled,
	tt__NetworkInterfaceInfo *Info,
	tt__NetworkInterfaceLink *Link,
	tt__IPv4NetworkInterface *IPv4,
	tt__IPv6NetworkInterface *IPv6,
	tt__NetworkInterfaceExtension *Extension,
	char *__anyAttribute,
	const std::string& token1,
	char *__item2)
{
	tt__NetworkInterface *_p = soap_new_tt__NetworkInterface(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__NetworkInterface::Enabled = Enabled;
		_p->tt__NetworkInterface::Info = Info;
		_p->tt__NetworkInterface::Link = Link;
		_p->tt__NetworkInterface::IPv4 = IPv4;
		_p->tt__NetworkInterface::IPv6 = IPv6;
		_p->tt__NetworkInterface::Extension = Extension;
		_p->tt__NetworkInterface::__anyAttribute = __anyAttribute;
		_p->tt__DeviceEntity::token = token1;
		_p->xsd__anyType::__item = __item2;
	}
	return _p;
}

inline int soap_write_tt__NetworkInterface(struct soap *soap, tt__NetworkInterface const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkInterface", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__NetworkInterface * SOAP_FMAC4 soap_get_tt__NetworkInterface(struct soap*, tt__NetworkInterface *, const char*, const char*);

inline int soap_read_tt__NetworkInterface(struct soap *soap, tt__NetworkInterface *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__NetworkInterface(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__Scope_DEFINED
#define SOAP_TYPE_tt__Scope_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Scope(struct soap*, const char*, int, const tt__Scope *, const char*);
SOAP_FMAC3 tt__Scope * SOAP_FMAC4 soap_in_tt__Scope(struct soap*, const char*, tt__Scope *, const char*);
SOAP_FMAC1 tt__Scope * SOAP_FMAC2 soap_instantiate_tt__Scope(struct soap*, int, const char*, const char*, size_t*);

inline tt__Scope * soap_new_tt__Scope(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Scope(soap, n, NULL, NULL, NULL);
}

inline tt__Scope * soap_new_req_tt__Scope(
	struct soap *soap,
	enum tt__ScopeDefinition ScopeDef,
	const std::string& ScopeItem)
{
	tt__Scope *_p = soap_new_tt__Scope(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Scope::ScopeDef = ScopeDef;
		_p->tt__Scope::ScopeItem = ScopeItem;
	}
	return _p;
}

inline tt__Scope * soap_new_set_tt__Scope(
	struct soap *soap,
	enum tt__ScopeDefinition ScopeDef,
	const std::string& ScopeItem,
	char *__item1)
{
	tt__Scope *_p = soap_new_tt__Scope(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Scope::ScopeDef = ScopeDef;
		_p->tt__Scope::ScopeItem = ScopeItem;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__Scope(struct soap *soap, tt__Scope const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Scope", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__Scope * SOAP_FMAC4 soap_get_tt__Scope(struct soap*, tt__Scope *, const char*, const char*);

inline int soap_read_tt__Scope(struct soap *soap, tt__Scope *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__Scope(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__MediaUri_DEFINED
#define SOAP_TYPE_tt__MediaUri_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__MediaUri(struct soap*, const char*, int, const tt__MediaUri *, const char*);
SOAP_FMAC3 tt__MediaUri * SOAP_FMAC4 soap_in_tt__MediaUri(struct soap*, const char*, tt__MediaUri *, const char*);
SOAP_FMAC1 tt__MediaUri * SOAP_FMAC2 soap_instantiate_tt__MediaUri(struct soap*, int, const char*, const char*, size_t*);

inline tt__MediaUri * soap_new_tt__MediaUri(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__MediaUri(soap, n, NULL, NULL, NULL);
}

inline tt__MediaUri * soap_new_req_tt__MediaUri(
	struct soap *soap,
	const std::string& Uri,
	bool InvalidAfterConnect,
	bool InvalidAfterReboot,
	LONG64 Timeout)
{
	tt__MediaUri *_p = soap_new_tt__MediaUri(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__MediaUri::Uri = Uri;
		_p->tt__MediaUri::InvalidAfterConnect = InvalidAfterConnect;
		_p->tt__MediaUri::InvalidAfterReboot = InvalidAfterReboot;
		_p->tt__MediaUri::Timeout = Timeout;
	}
	return _p;
}

inline tt__MediaUri * soap_new_set_tt__MediaUri(
	struct soap *soap,
	const std::string& Uri,
	bool InvalidAfterConnect,
	bool InvalidAfterReboot,
	LONG64 Timeout,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__MediaUri *_p = soap_new_tt__MediaUri(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__MediaUri::Uri = Uri;
		_p->tt__MediaUri::InvalidAfterConnect = InvalidAfterConnect;
		_p->tt__MediaUri::InvalidAfterReboot = InvalidAfterReboot;
		_p->tt__MediaUri::Timeout = Timeout;
		_p->tt__MediaUri::__any = __any;
		_p->tt__MediaUri::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__MediaUri(struct soap *soap, tt__MediaUri const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:MediaUri", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__MediaUri * SOAP_FMAC4 soap_get_tt__MediaUri(struct soap*, tt__MediaUri *, const char*, const char*);

inline int soap_read_tt__MediaUri(struct soap *soap, tt__MediaUri *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__MediaUri(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__Transport_DEFINED
#define SOAP_TYPE_tt__Transport_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Transport(struct soap*, const char*, int, const tt__Transport *, const char*);
SOAP_FMAC3 tt__Transport * SOAP_FMAC4 soap_in_tt__Transport(struct soap*, const char*, tt__Transport *, const char*);
SOAP_FMAC1 tt__Transport * SOAP_FMAC2 soap_instantiate_tt__Transport(struct soap*, int, const char*, const char*, size_t*);

inline tt__Transport * soap_new_tt__Transport(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Transport(soap, n, NULL, NULL, NULL);
}

inline tt__Transport * soap_new_req_tt__Transport(
	struct soap *soap,
	enum tt__TransportProtocol Protocol)
{
	tt__Transport *_p = soap_new_tt__Transport(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Transport::Protocol = Protocol;
	}
	return _p;
}

inline tt__Transport * soap_new_set_tt__Transport(
	struct soap *soap,
	enum tt__TransportProtocol Protocol,
	tt__Transport *Tunnel,
	char *__item1)
{
	tt__Transport *_p = soap_new_tt__Transport(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Transport::Protocol = Protocol;
		_p->tt__Transport::Tunnel = Tunnel;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__Transport(struct soap *soap, tt__Transport const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Transport", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__Transport * SOAP_FMAC4 soap_get_tt__Transport(struct soap*, tt__Transport *, const char*, const char*);

inline int soap_read_tt__Transport(struct soap *soap, tt__Transport *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__Transport(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__StreamSetup_DEFINED
#define SOAP_TYPE_tt__StreamSetup_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__StreamSetup(struct soap*, const char*, int, const tt__StreamSetup *, const char*);
SOAP_FMAC3 tt__StreamSetup * SOAP_FMAC4 soap_in_tt__StreamSetup(struct soap*, const char*, tt__StreamSetup *, const char*);
SOAP_FMAC1 tt__StreamSetup * SOAP_FMAC2 soap_instantiate_tt__StreamSetup(struct soap*, int, const char*, const char*, size_t*);

inline tt__StreamSetup * soap_new_tt__StreamSetup(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__StreamSetup(soap, n, NULL, NULL, NULL);
}

inline tt__StreamSetup * soap_new_req_tt__StreamSetup(
	struct soap *soap,
	enum tt__StreamType Stream,
	tt__Transport *Transport)
{
	tt__StreamSetup *_p = soap_new_tt__StreamSetup(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__StreamSetup::Stream = Stream;
		_p->tt__StreamSetup::Transport = Transport;
	}
	return _p;
}

inline tt__StreamSetup * soap_new_set_tt__StreamSetup(
	struct soap *soap,
	enum tt__StreamType Stream,
	tt__Transport *Transport,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__StreamSetup *_p = soap_new_tt__StreamSetup(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__StreamSetup::Stream = Stream;
		_p->tt__StreamSetup::Transport = Transport;
		_p->tt__StreamSetup::__any = __any;
		_p->tt__StreamSetup::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__StreamSetup(struct soap *soap, tt__StreamSetup const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:StreamSetup", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__StreamSetup * SOAP_FMAC4 soap_get_tt__StreamSetup(struct soap*, tt__StreamSetup *, const char*, const char*);

inline int soap_read_tt__StreamSetup(struct soap *soap, tt__StreamSetup *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__StreamSetup(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__MulticastConfiguration_DEFINED
#define SOAP_TYPE_tt__MulticastConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__MulticastConfiguration(struct soap*, const char*, int, const tt__MulticastConfiguration *, const char*);
SOAP_FMAC3 tt__MulticastConfiguration * SOAP_FMAC4 soap_in_tt__MulticastConfiguration(struct soap*, const char*, tt__MulticastConfiguration *, const char*);
SOAP_FMAC1 tt__MulticastConfiguration * SOAP_FMAC2 soap_instantiate_tt__MulticastConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__MulticastConfiguration * soap_new_tt__MulticastConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__MulticastConfiguration(soap, n, NULL, NULL, NULL);
}

inline tt__MulticastConfiguration * soap_new_req_tt__MulticastConfiguration(
	struct soap *soap,
	tt__IPAddress *Address,
	int Port,
	int TTL,
	bool AutoStart)
{
	tt__MulticastConfiguration *_p = soap_new_tt__MulticastConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__MulticastConfiguration::Address = Address;
		_p->tt__MulticastConfiguration::Port = Port;
		_p->tt__MulticastConfiguration::TTL = TTL;
		_p->tt__MulticastConfiguration::AutoStart = AutoStart;
	}
	return _p;
}

inline tt__MulticastConfiguration * soap_new_set_tt__MulticastConfiguration(
	struct soap *soap,
	tt__IPAddress *Address,
	int Port,
	int TTL,
	bool AutoStart,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__MulticastConfiguration *_p = soap_new_tt__MulticastConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__MulticastConfiguration::Address = Address;
		_p->tt__MulticastConfiguration::Port = Port;
		_p->tt__MulticastConfiguration::TTL = TTL;
		_p->tt__MulticastConfiguration::AutoStart = AutoStart;
		_p->tt__MulticastConfiguration::__any = __any;
		_p->tt__MulticastConfiguration::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__MulticastConfiguration(struct soap *soap, tt__MulticastConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:MulticastConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__MulticastConfiguration * SOAP_FMAC4 soap_get_tt__MulticastConfiguration(struct soap*, tt__MulticastConfiguration *, const char*, const char*);

inline int soap_read_tt__MulticastConfiguration(struct soap *soap, tt__MulticastConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__MulticastConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__AudioDecoderConfigurationOptionsExtension_DEFINED
#define SOAP_TYPE_tt__AudioDecoderConfigurationOptionsExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AudioDecoderConfigurationOptionsExtension(struct soap*, const char*, int, const tt__AudioDecoderConfigurationOptionsExtension *, const char*);
SOAP_FMAC3 tt__AudioDecoderConfigurationOptionsExtension * SOAP_FMAC4 soap_in_tt__AudioDecoderConfigurationOptionsExtension(struct soap*, const char*, tt__AudioDecoderConfigurationOptionsExtension *, const char*);
SOAP_FMAC1 tt__AudioDecoderConfigurationOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__AudioDecoderConfigurationOptionsExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__AudioDecoderConfigurationOptionsExtension * soap_new_tt__AudioDecoderConfigurationOptionsExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__AudioDecoderConfigurationOptionsExtension(soap, n, NULL, NULL, NULL);
}

inline tt__AudioDecoderConfigurationOptionsExtension * soap_new_req_tt__AudioDecoderConfigurationOptionsExtension(
	struct soap *soap)
{
	tt__AudioDecoderConfigurationOptionsExtension *_p = soap_new_tt__AudioDecoderConfigurationOptionsExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__AudioDecoderConfigurationOptionsExtension * soap_new_set_tt__AudioDecoderConfigurationOptionsExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__AudioDecoderConfigurationOptionsExtension *_p = soap_new_tt__AudioDecoderConfigurationOptionsExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AudioDecoderConfigurationOptionsExtension::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__AudioDecoderConfigurationOptionsExtension(struct soap *soap, tt__AudioDecoderConfigurationOptionsExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AudioDecoderConfigurationOptionsExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__AudioDecoderConfigurationOptionsExtension * SOAP_FMAC4 soap_get_tt__AudioDecoderConfigurationOptionsExtension(struct soap*, tt__AudioDecoderConfigurationOptionsExtension *, const char*, const char*);

inline int soap_read_tt__AudioDecoderConfigurationOptionsExtension(struct soap *soap, tt__AudioDecoderConfigurationOptionsExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__AudioDecoderConfigurationOptionsExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__G726DecOptions_DEFINED
#define SOAP_TYPE_tt__G726DecOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__G726DecOptions(struct soap*, const char*, int, const tt__G726DecOptions *, const char*);
SOAP_FMAC3 tt__G726DecOptions * SOAP_FMAC4 soap_in_tt__G726DecOptions(struct soap*, const char*, tt__G726DecOptions *, const char*);
SOAP_FMAC1 tt__G726DecOptions * SOAP_FMAC2 soap_instantiate_tt__G726DecOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__G726DecOptions * soap_new_tt__G726DecOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__G726DecOptions(soap, n, NULL, NULL, NULL);
}

inline tt__G726DecOptions * soap_new_req_tt__G726DecOptions(
	struct soap *soap,
	tt__IntList *Bitrate,
	tt__IntList *SampleRateRange)
{
	tt__G726DecOptions *_p = soap_new_tt__G726DecOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__G726DecOptions::Bitrate = Bitrate;
		_p->tt__G726DecOptions::SampleRateRange = SampleRateRange;
	}
	return _p;
}

inline tt__G726DecOptions * soap_new_set_tt__G726DecOptions(
	struct soap *soap,
	tt__IntList *Bitrate,
	tt__IntList *SampleRateRange,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__G726DecOptions *_p = soap_new_tt__G726DecOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__G726DecOptions::Bitrate = Bitrate;
		_p->tt__G726DecOptions::SampleRateRange = SampleRateRange;
		_p->tt__G726DecOptions::__any = __any;
		_p->tt__G726DecOptions::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__G726DecOptions(struct soap *soap, tt__G726DecOptions const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:G726DecOptions", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__G726DecOptions * SOAP_FMAC4 soap_get_tt__G726DecOptions(struct soap*, tt__G726DecOptions *, const char*, const char*);

inline int soap_read_tt__G726DecOptions(struct soap *soap, tt__G726DecOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__G726DecOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__AACDecOptions_DEFINED
#define SOAP_TYPE_tt__AACDecOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AACDecOptions(struct soap*, const char*, int, const tt__AACDecOptions *, const char*);
SOAP_FMAC3 tt__AACDecOptions * SOAP_FMAC4 soap_in_tt__AACDecOptions(struct soap*, const char*, tt__AACDecOptions *, const char*);
SOAP_FMAC1 tt__AACDecOptions * SOAP_FMAC2 soap_instantiate_tt__AACDecOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__AACDecOptions * soap_new_tt__AACDecOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__AACDecOptions(soap, n, NULL, NULL, NULL);
}

inline tt__AACDecOptions * soap_new_req_tt__AACDecOptions(
	struct soap *soap,
	tt__IntList *Bitrate,
	tt__IntList *SampleRateRange)
{
	tt__AACDecOptions *_p = soap_new_tt__AACDecOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AACDecOptions::Bitrate = Bitrate;
		_p->tt__AACDecOptions::SampleRateRange = SampleRateRange;
	}
	return _p;
}

inline tt__AACDecOptions * soap_new_set_tt__AACDecOptions(
	struct soap *soap,
	tt__IntList *Bitrate,
	tt__IntList *SampleRateRange,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__AACDecOptions *_p = soap_new_tt__AACDecOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AACDecOptions::Bitrate = Bitrate;
		_p->tt__AACDecOptions::SampleRateRange = SampleRateRange;
		_p->tt__AACDecOptions::__any = __any;
		_p->tt__AACDecOptions::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__AACDecOptions(struct soap *soap, tt__AACDecOptions const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AACDecOptions", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__AACDecOptions * SOAP_FMAC4 soap_get_tt__AACDecOptions(struct soap*, tt__AACDecOptions *, const char*, const char*);

inline int soap_read_tt__AACDecOptions(struct soap *soap, tt__AACDecOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__AACDecOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__G711DecOptions_DEFINED
#define SOAP_TYPE_tt__G711DecOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__G711DecOptions(struct soap*, const char*, int, const tt__G711DecOptions *, const char*);
SOAP_FMAC3 tt__G711DecOptions * SOAP_FMAC4 soap_in_tt__G711DecOptions(struct soap*, const char*, tt__G711DecOptions *, const char*);
SOAP_FMAC1 tt__G711DecOptions * SOAP_FMAC2 soap_instantiate_tt__G711DecOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__G711DecOptions * soap_new_tt__G711DecOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__G711DecOptions(soap, n, NULL, NULL, NULL);
}

inline tt__G711DecOptions * soap_new_req_tt__G711DecOptions(
	struct soap *soap,
	tt__IntList *Bitrate,
	tt__IntList *SampleRateRange)
{
	tt__G711DecOptions *_p = soap_new_tt__G711DecOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__G711DecOptions::Bitrate = Bitrate;
		_p->tt__G711DecOptions::SampleRateRange = SampleRateRange;
	}
	return _p;
}

inline tt__G711DecOptions * soap_new_set_tt__G711DecOptions(
	struct soap *soap,
	tt__IntList *Bitrate,
	tt__IntList *SampleRateRange,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__G711DecOptions *_p = soap_new_tt__G711DecOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__G711DecOptions::Bitrate = Bitrate;
		_p->tt__G711DecOptions::SampleRateRange = SampleRateRange;
		_p->tt__G711DecOptions::__any = __any;
		_p->tt__G711DecOptions::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__G711DecOptions(struct soap *soap, tt__G711DecOptions const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:G711DecOptions", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__G711DecOptions * SOAP_FMAC4 soap_get_tt__G711DecOptions(struct soap*, tt__G711DecOptions *, const char*, const char*);

inline int soap_read_tt__G711DecOptions(struct soap *soap, tt__G711DecOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__G711DecOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__AudioDecoderConfigurationOptions_DEFINED
#define SOAP_TYPE_tt__AudioDecoderConfigurationOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AudioDecoderConfigurationOptions(struct soap*, const char*, int, const tt__AudioDecoderConfigurationOptions *, const char*);
SOAP_FMAC3 tt__AudioDecoderConfigurationOptions * SOAP_FMAC4 soap_in_tt__AudioDecoderConfigurationOptions(struct soap*, const char*, tt__AudioDecoderConfigurationOptions *, const char*);
SOAP_FMAC1 tt__AudioDecoderConfigurationOptions * SOAP_FMAC2 soap_instantiate_tt__AudioDecoderConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__AudioDecoderConfigurationOptions * soap_new_tt__AudioDecoderConfigurationOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__AudioDecoderConfigurationOptions(soap, n, NULL, NULL, NULL);
}

inline tt__AudioDecoderConfigurationOptions * soap_new_req_tt__AudioDecoderConfigurationOptions(
	struct soap *soap)
{
	tt__AudioDecoderConfigurationOptions *_p = soap_new_tt__AudioDecoderConfigurationOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__AudioDecoderConfigurationOptions * soap_new_set_tt__AudioDecoderConfigurationOptions(
	struct soap *soap,
	tt__AACDecOptions *AACDecOptions,
	tt__G711DecOptions *G711DecOptions,
	tt__G726DecOptions *G726DecOptions,
	tt__AudioDecoderConfigurationOptionsExtension *Extension,
	char *__anyAttribute,
	char *__item1)
{
	tt__AudioDecoderConfigurationOptions *_p = soap_new_tt__AudioDecoderConfigurationOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AudioDecoderConfigurationOptions::AACDecOptions = AACDecOptions;
		_p->tt__AudioDecoderConfigurationOptions::G711DecOptions = G711DecOptions;
		_p->tt__AudioDecoderConfigurationOptions::G726DecOptions = G726DecOptions;
		_p->tt__AudioDecoderConfigurationOptions::Extension = Extension;
		_p->tt__AudioDecoderConfigurationOptions::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__AudioDecoderConfigurationOptions(struct soap *soap, tt__AudioDecoderConfigurationOptions const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AudioDecoderConfigurationOptions", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__AudioDecoderConfigurationOptions * SOAP_FMAC4 soap_get_tt__AudioDecoderConfigurationOptions(struct soap*, tt__AudioDecoderConfigurationOptions *, const char*, const char*);

inline int soap_read_tt__AudioDecoderConfigurationOptions(struct soap *soap, tt__AudioDecoderConfigurationOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__AudioDecoderConfigurationOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__AudioDecoderConfiguration_DEFINED
#define SOAP_TYPE_tt__AudioDecoderConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AudioDecoderConfiguration(struct soap*, const char*, int, const tt__AudioDecoderConfiguration *, const char*);
SOAP_FMAC3 tt__AudioDecoderConfiguration * SOAP_FMAC4 soap_in_tt__AudioDecoderConfiguration(struct soap*, const char*, tt__AudioDecoderConfiguration *, const char*);
SOAP_FMAC1 tt__AudioDecoderConfiguration * SOAP_FMAC2 soap_instantiate_tt__AudioDecoderConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__AudioDecoderConfiguration * soap_new_tt__AudioDecoderConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__AudioDecoderConfiguration(soap, n, NULL, NULL, NULL);
}

inline tt__AudioDecoderConfiguration * soap_new_req_tt__AudioDecoderConfiguration(
	struct soap *soap,
	const std::string& Name1,
	int UseCount1,
	const std::string& token1)
{
	tt__AudioDecoderConfiguration *_p = soap_new_tt__AudioDecoderConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ConfigurationEntity::Name = Name1;
		_p->tt__ConfigurationEntity::UseCount = UseCount1;
		_p->tt__ConfigurationEntity::token = token1;
	}
	return _p;
}

inline tt__AudioDecoderConfiguration * soap_new_set_tt__AudioDecoderConfiguration(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	const std::string& Name1,
	int UseCount1,
	const std::string& token1,
	char *__item2)
{
	tt__AudioDecoderConfiguration *_p = soap_new_tt__AudioDecoderConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AudioDecoderConfiguration::__any = __any;
		_p->tt__AudioDecoderConfiguration::__anyAttribute = __anyAttribute;
		_p->tt__ConfigurationEntity::Name = Name1;
		_p->tt__ConfigurationEntity::UseCount = UseCount1;
		_p->tt__ConfigurationEntity::token = token1;
		_p->xsd__anyType::__item = __item2;
	}
	return _p;
}

inline int soap_write_tt__AudioDecoderConfiguration(struct soap *soap, tt__AudioDecoderConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AudioDecoderConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__AudioDecoderConfiguration * SOAP_FMAC4 soap_get_tt__AudioDecoderConfiguration(struct soap*, tt__AudioDecoderConfiguration *, const char*, const char*);

inline int soap_read_tt__AudioDecoderConfiguration(struct soap *soap, tt__AudioDecoderConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__AudioDecoderConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__AudioOutputConfigurationOptions_DEFINED
#define SOAP_TYPE_tt__AudioOutputConfigurationOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AudioOutputConfigurationOptions(struct soap*, const char*, int, const tt__AudioOutputConfigurationOptions *, const char*);
SOAP_FMAC3 tt__AudioOutputConfigurationOptions * SOAP_FMAC4 soap_in_tt__AudioOutputConfigurationOptions(struct soap*, const char*, tt__AudioOutputConfigurationOptions *, const char*);
SOAP_FMAC1 tt__AudioOutputConfigurationOptions * SOAP_FMAC2 soap_instantiate_tt__AudioOutputConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__AudioOutputConfigurationOptions * soap_new_tt__AudioOutputConfigurationOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__AudioOutputConfigurationOptions(soap, n, NULL, NULL, NULL);
}

inline tt__AudioOutputConfigurationOptions * soap_new_req_tt__AudioOutputConfigurationOptions(
	struct soap *soap,
	const std::vector<std::string> & OutputTokensAvailable,
	tt__IntRange *OutputLevelRange)
{
	tt__AudioOutputConfigurationOptions *_p = soap_new_tt__AudioOutputConfigurationOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AudioOutputConfigurationOptions::OutputTokensAvailable = OutputTokensAvailable;
		_p->tt__AudioOutputConfigurationOptions::OutputLevelRange = OutputLevelRange;
	}
	return _p;
}

inline tt__AudioOutputConfigurationOptions * soap_new_set_tt__AudioOutputConfigurationOptions(
	struct soap *soap,
	const std::vector<std::string> & OutputTokensAvailable,
	const std::vector<std::string> & SendPrimacyOptions,
	tt__IntRange *OutputLevelRange,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__AudioOutputConfigurationOptions *_p = soap_new_tt__AudioOutputConfigurationOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AudioOutputConfigurationOptions::OutputTokensAvailable = OutputTokensAvailable;
		_p->tt__AudioOutputConfigurationOptions::SendPrimacyOptions = SendPrimacyOptions;
		_p->tt__AudioOutputConfigurationOptions::OutputLevelRange = OutputLevelRange;
		_p->tt__AudioOutputConfigurationOptions::__any = __any;
		_p->tt__AudioOutputConfigurationOptions::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__AudioOutputConfigurationOptions(struct soap *soap, tt__AudioOutputConfigurationOptions const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AudioOutputConfigurationOptions", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__AudioOutputConfigurationOptions * SOAP_FMAC4 soap_get_tt__AudioOutputConfigurationOptions(struct soap*, tt__AudioOutputConfigurationOptions *, const char*, const char*);

inline int soap_read_tt__AudioOutputConfigurationOptions(struct soap *soap, tt__AudioOutputConfigurationOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__AudioOutputConfigurationOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__AudioOutputConfiguration_DEFINED
#define SOAP_TYPE_tt__AudioOutputConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AudioOutputConfiguration(struct soap*, const char*, int, const tt__AudioOutputConfiguration *, const char*);
SOAP_FMAC3 tt__AudioOutputConfiguration * SOAP_FMAC4 soap_in_tt__AudioOutputConfiguration(struct soap*, const char*, tt__AudioOutputConfiguration *, const char*);
SOAP_FMAC1 tt__AudioOutputConfiguration * SOAP_FMAC2 soap_instantiate_tt__AudioOutputConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__AudioOutputConfiguration * soap_new_tt__AudioOutputConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__AudioOutputConfiguration(soap, n, NULL, NULL, NULL);
}

inline tt__AudioOutputConfiguration * soap_new_req_tt__AudioOutputConfiguration(
	struct soap *soap,
	const std::string& OutputToken,
	int OutputLevel,
	const std::string& Name1,
	int UseCount1,
	const std::string& token1)
{
	tt__AudioOutputConfiguration *_p = soap_new_tt__AudioOutputConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AudioOutputConfiguration::OutputToken = OutputToken;
		_p->tt__AudioOutputConfiguration::OutputLevel = OutputLevel;
		_p->tt__ConfigurationEntity::Name = Name1;
		_p->tt__ConfigurationEntity::UseCount = UseCount1;
		_p->tt__ConfigurationEntity::token = token1;
	}
	return _p;
}

inline tt__AudioOutputConfiguration * soap_new_set_tt__AudioOutputConfiguration(
	struct soap *soap,
	const std::string& OutputToken,
	std::string *SendPrimacy,
	int OutputLevel,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	const std::string& Name1,
	int UseCount1,
	const std::string& token1,
	char *__item2)
{
	tt__AudioOutputConfiguration *_p = soap_new_tt__AudioOutputConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AudioOutputConfiguration::OutputToken = OutputToken;
		_p->tt__AudioOutputConfiguration::SendPrimacy = SendPrimacy;
		_p->tt__AudioOutputConfiguration::OutputLevel = OutputLevel;
		_p->tt__AudioOutputConfiguration::__any = __any;
		_p->tt__AudioOutputConfiguration::__anyAttribute = __anyAttribute;
		_p->tt__ConfigurationEntity::Name = Name1;
		_p->tt__ConfigurationEntity::UseCount = UseCount1;
		_p->tt__ConfigurationEntity::token = token1;
		_p->xsd__anyType::__item = __item2;
	}
	return _p;
}

inline int soap_write_tt__AudioOutputConfiguration(struct soap *soap, tt__AudioOutputConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AudioOutputConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__AudioOutputConfiguration * SOAP_FMAC4 soap_get_tt__AudioOutputConfiguration(struct soap*, tt__AudioOutputConfiguration *, const char*, const char*);

inline int soap_read_tt__AudioOutputConfiguration(struct soap *soap, tt__AudioOutputConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__AudioOutputConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__AudioOutput_DEFINED
#define SOAP_TYPE_tt__AudioOutput_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AudioOutput(struct soap*, const char*, int, const tt__AudioOutput *, const char*);
SOAP_FMAC3 tt__AudioOutput * SOAP_FMAC4 soap_in_tt__AudioOutput(struct soap*, const char*, tt__AudioOutput *, const char*);
SOAP_FMAC1 tt__AudioOutput * SOAP_FMAC2 soap_instantiate_tt__AudioOutput(struct soap*, int, const char*, const char*, size_t*);

inline tt__AudioOutput * soap_new_tt__AudioOutput(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__AudioOutput(soap, n, NULL, NULL, NULL);
}

inline tt__AudioOutput * soap_new_req_tt__AudioOutput(
	struct soap *soap,
	const std::string& token1)
{
	tt__AudioOutput *_p = soap_new_tt__AudioOutput(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__DeviceEntity::token = token1;
	}
	return _p;
}

inline tt__AudioOutput * soap_new_set_tt__AudioOutput(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	const std::string& token1,
	char *__item2)
{
	tt__AudioOutput *_p = soap_new_tt__AudioOutput(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AudioOutput::__any = __any;
		_p->tt__AudioOutput::__anyAttribute = __anyAttribute;
		_p->tt__DeviceEntity::token = token1;
		_p->xsd__anyType::__item = __item2;
	}
	return _p;
}

inline int soap_write_tt__AudioOutput(struct soap *soap, tt__AudioOutput const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AudioOutput", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__AudioOutput * SOAP_FMAC4 soap_get_tt__AudioOutput(struct soap*, tt__AudioOutput *, const char*, const char*);

inline int soap_read_tt__AudioOutput(struct soap *soap, tt__AudioOutput *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__AudioOutput(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__VideoDecoderConfigurationOptionsExtension_DEFINED
#define SOAP_TYPE_tt__VideoDecoderConfigurationOptionsExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__VideoDecoderConfigurationOptionsExtension(struct soap*, const char*, int, const tt__VideoDecoderConfigurationOptionsExtension *, const char*);
SOAP_FMAC3 tt__VideoDecoderConfigurationOptionsExtension * SOAP_FMAC4 soap_in_tt__VideoDecoderConfigurationOptionsExtension(struct soap*, const char*, tt__VideoDecoderConfigurationOptionsExtension *, const char*);
SOAP_FMAC1 tt__VideoDecoderConfigurationOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__VideoDecoderConfigurationOptionsExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__VideoDecoderConfigurationOptionsExtension * soap_new_tt__VideoDecoderConfigurationOptionsExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__VideoDecoderConfigurationOptionsExtension(soap, n, NULL, NULL, NULL);
}

inline tt__VideoDecoderConfigurationOptionsExtension * soap_new_req_tt__VideoDecoderConfigurationOptionsExtension(
	struct soap *soap)
{
	tt__VideoDecoderConfigurationOptionsExtension *_p = soap_new_tt__VideoDecoderConfigurationOptionsExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__VideoDecoderConfigurationOptionsExtension * soap_new_set_tt__VideoDecoderConfigurationOptionsExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__VideoDecoderConfigurationOptionsExtension *_p = soap_new_tt__VideoDecoderConfigurationOptionsExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__VideoDecoderConfigurationOptionsExtension::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__VideoDecoderConfigurationOptionsExtension(struct soap *soap, tt__VideoDecoderConfigurationOptionsExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:VideoDecoderConfigurationOptionsExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__VideoDecoderConfigurationOptionsExtension * SOAP_FMAC4 soap_get_tt__VideoDecoderConfigurationOptionsExtension(struct soap*, tt__VideoDecoderConfigurationOptionsExtension *, const char*, const char*);

inline int soap_read_tt__VideoDecoderConfigurationOptionsExtension(struct soap *soap, tt__VideoDecoderConfigurationOptionsExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__VideoDecoderConfigurationOptionsExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__Mpeg4DecOptions_DEFINED
#define SOAP_TYPE_tt__Mpeg4DecOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Mpeg4DecOptions(struct soap*, const char*, int, const tt__Mpeg4DecOptions *, const char*);
SOAP_FMAC3 tt__Mpeg4DecOptions * SOAP_FMAC4 soap_in_tt__Mpeg4DecOptions(struct soap*, const char*, tt__Mpeg4DecOptions *, const char*);
SOAP_FMAC1 tt__Mpeg4DecOptions * SOAP_FMAC2 soap_instantiate_tt__Mpeg4DecOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__Mpeg4DecOptions * soap_new_tt__Mpeg4DecOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Mpeg4DecOptions(soap, n, NULL, NULL, NULL);
}

inline tt__Mpeg4DecOptions * soap_new_req_tt__Mpeg4DecOptions(
	struct soap *soap,
	const std::vector<tt__VideoResolution *> & ResolutionsAvailable,
	const std::vector<enum tt__Mpeg4Profile> & SupportedMpeg4Profiles,
	tt__IntRange *SupportedInputBitrate,
	tt__IntRange *SupportedFrameRate)
{
	tt__Mpeg4DecOptions *_p = soap_new_tt__Mpeg4DecOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Mpeg4DecOptions::ResolutionsAvailable = ResolutionsAvailable;
		_p->tt__Mpeg4DecOptions::SupportedMpeg4Profiles = SupportedMpeg4Profiles;
		_p->tt__Mpeg4DecOptions::SupportedInputBitrate = SupportedInputBitrate;
		_p->tt__Mpeg4DecOptions::SupportedFrameRate = SupportedFrameRate;
	}
	return _p;
}

inline tt__Mpeg4DecOptions * soap_new_set_tt__Mpeg4DecOptions(
	struct soap *soap,
	const std::vector<tt__VideoResolution *> & ResolutionsAvailable,
	const std::vector<enum tt__Mpeg4Profile> & SupportedMpeg4Profiles,
	tt__IntRange *SupportedInputBitrate,
	tt__IntRange *SupportedFrameRate,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__Mpeg4DecOptions *_p = soap_new_tt__Mpeg4DecOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Mpeg4DecOptions::ResolutionsAvailable = ResolutionsAvailable;
		_p->tt__Mpeg4DecOptions::SupportedMpeg4Profiles = SupportedMpeg4Profiles;
		_p->tt__Mpeg4DecOptions::SupportedInputBitrate = SupportedInputBitrate;
		_p->tt__Mpeg4DecOptions::SupportedFrameRate = SupportedFrameRate;
		_p->tt__Mpeg4DecOptions::__any = __any;
		_p->tt__Mpeg4DecOptions::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__Mpeg4DecOptions(struct soap *soap, tt__Mpeg4DecOptions const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Mpeg4DecOptions", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__Mpeg4DecOptions * SOAP_FMAC4 soap_get_tt__Mpeg4DecOptions(struct soap*, tt__Mpeg4DecOptions *, const char*, const char*);

inline int soap_read_tt__Mpeg4DecOptions(struct soap *soap, tt__Mpeg4DecOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__Mpeg4DecOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__JpegDecOptions_DEFINED
#define SOAP_TYPE_tt__JpegDecOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__JpegDecOptions(struct soap*, const char*, int, const tt__JpegDecOptions *, const char*);
SOAP_FMAC3 tt__JpegDecOptions * SOAP_FMAC4 soap_in_tt__JpegDecOptions(struct soap*, const char*, tt__JpegDecOptions *, const char*);
SOAP_FMAC1 tt__JpegDecOptions * SOAP_FMAC2 soap_instantiate_tt__JpegDecOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__JpegDecOptions * soap_new_tt__JpegDecOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__JpegDecOptions(soap, n, NULL, NULL, NULL);
}

inline tt__JpegDecOptions * soap_new_req_tt__JpegDecOptions(
	struct soap *soap,
	const std::vector<tt__VideoResolution *> & ResolutionsAvailable,
	tt__IntRange *SupportedInputBitrate,
	tt__IntRange *SupportedFrameRate)
{
	tt__JpegDecOptions *_p = soap_new_tt__JpegDecOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__JpegDecOptions::ResolutionsAvailable = ResolutionsAvailable;
		_p->tt__JpegDecOptions::SupportedInputBitrate = SupportedInputBitrate;
		_p->tt__JpegDecOptions::SupportedFrameRate = SupportedFrameRate;
	}
	return _p;
}

inline tt__JpegDecOptions * soap_new_set_tt__JpegDecOptions(
	struct soap *soap,
	const std::vector<tt__VideoResolution *> & ResolutionsAvailable,
	tt__IntRange *SupportedInputBitrate,
	tt__IntRange *SupportedFrameRate,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__JpegDecOptions *_p = soap_new_tt__JpegDecOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__JpegDecOptions::ResolutionsAvailable = ResolutionsAvailable;
		_p->tt__JpegDecOptions::SupportedInputBitrate = SupportedInputBitrate;
		_p->tt__JpegDecOptions::SupportedFrameRate = SupportedFrameRate;
		_p->tt__JpegDecOptions::__any = __any;
		_p->tt__JpegDecOptions::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__JpegDecOptions(struct soap *soap, tt__JpegDecOptions const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:JpegDecOptions", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__JpegDecOptions * SOAP_FMAC4 soap_get_tt__JpegDecOptions(struct soap*, tt__JpegDecOptions *, const char*, const char*);

inline int soap_read_tt__JpegDecOptions(struct soap *soap, tt__JpegDecOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__JpegDecOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__H264DecOptions_DEFINED
#define SOAP_TYPE_tt__H264DecOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__H264DecOptions(struct soap*, const char*, int, const tt__H264DecOptions *, const char*);
SOAP_FMAC3 tt__H264DecOptions * SOAP_FMAC4 soap_in_tt__H264DecOptions(struct soap*, const char*, tt__H264DecOptions *, const char*);
SOAP_FMAC1 tt__H264DecOptions * SOAP_FMAC2 soap_instantiate_tt__H264DecOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__H264DecOptions * soap_new_tt__H264DecOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__H264DecOptions(soap, n, NULL, NULL, NULL);
}

inline tt__H264DecOptions * soap_new_req_tt__H264DecOptions(
	struct soap *soap,
	const std::vector<tt__VideoResolution *> & ResolutionsAvailable,
	const std::vector<enum tt__H264Profile> & SupportedH264Profiles,
	tt__IntRange *SupportedInputBitrate,
	tt__IntRange *SupportedFrameRate)
{
	tt__H264DecOptions *_p = soap_new_tt__H264DecOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__H264DecOptions::ResolutionsAvailable = ResolutionsAvailable;
		_p->tt__H264DecOptions::SupportedH264Profiles = SupportedH264Profiles;
		_p->tt__H264DecOptions::SupportedInputBitrate = SupportedInputBitrate;
		_p->tt__H264DecOptions::SupportedFrameRate = SupportedFrameRate;
	}
	return _p;
}

inline tt__H264DecOptions * soap_new_set_tt__H264DecOptions(
	struct soap *soap,
	const std::vector<tt__VideoResolution *> & ResolutionsAvailable,
	const std::vector<enum tt__H264Profile> & SupportedH264Profiles,
	tt__IntRange *SupportedInputBitrate,
	tt__IntRange *SupportedFrameRate,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__H264DecOptions *_p = soap_new_tt__H264DecOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__H264DecOptions::ResolutionsAvailable = ResolutionsAvailable;
		_p->tt__H264DecOptions::SupportedH264Profiles = SupportedH264Profiles;
		_p->tt__H264DecOptions::SupportedInputBitrate = SupportedInputBitrate;
		_p->tt__H264DecOptions::SupportedFrameRate = SupportedFrameRate;
		_p->tt__H264DecOptions::__any = __any;
		_p->tt__H264DecOptions::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__H264DecOptions(struct soap *soap, tt__H264DecOptions const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:H264DecOptions", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__H264DecOptions * SOAP_FMAC4 soap_get_tt__H264DecOptions(struct soap*, tt__H264DecOptions *, const char*, const char*);

inline int soap_read_tt__H264DecOptions(struct soap *soap, tt__H264DecOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__H264DecOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__VideoDecoderConfigurationOptions_DEFINED
#define SOAP_TYPE_tt__VideoDecoderConfigurationOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__VideoDecoderConfigurationOptions(struct soap*, const char*, int, const tt__VideoDecoderConfigurationOptions *, const char*);
SOAP_FMAC3 tt__VideoDecoderConfigurationOptions * SOAP_FMAC4 soap_in_tt__VideoDecoderConfigurationOptions(struct soap*, const char*, tt__VideoDecoderConfigurationOptions *, const char*);
SOAP_FMAC1 tt__VideoDecoderConfigurationOptions * SOAP_FMAC2 soap_instantiate_tt__VideoDecoderConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__VideoDecoderConfigurationOptions * soap_new_tt__VideoDecoderConfigurationOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__VideoDecoderConfigurationOptions(soap, n, NULL, NULL, NULL);
}

inline tt__VideoDecoderConfigurationOptions * soap_new_req_tt__VideoDecoderConfigurationOptions(
	struct soap *soap)
{
	tt__VideoDecoderConfigurationOptions *_p = soap_new_tt__VideoDecoderConfigurationOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__VideoDecoderConfigurationOptions * soap_new_set_tt__VideoDecoderConfigurationOptions(
	struct soap *soap,
	tt__JpegDecOptions *JpegDecOptions,
	tt__H264DecOptions *H264DecOptions,
	tt__Mpeg4DecOptions *Mpeg4DecOptions,
	tt__VideoDecoderConfigurationOptionsExtension *Extension,
	char *__anyAttribute,
	char *__item1)
{
	tt__VideoDecoderConfigurationOptions *_p = soap_new_tt__VideoDecoderConfigurationOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__VideoDecoderConfigurationOptions::JpegDecOptions = JpegDecOptions;
		_p->tt__VideoDecoderConfigurationOptions::H264DecOptions = H264DecOptions;
		_p->tt__VideoDecoderConfigurationOptions::Mpeg4DecOptions = Mpeg4DecOptions;
		_p->tt__VideoDecoderConfigurationOptions::Extension = Extension;
		_p->tt__VideoDecoderConfigurationOptions::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__VideoDecoderConfigurationOptions(struct soap *soap, tt__VideoDecoderConfigurationOptions const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:VideoDecoderConfigurationOptions", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__VideoDecoderConfigurationOptions * SOAP_FMAC4 soap_get_tt__VideoDecoderConfigurationOptions(struct soap*, tt__VideoDecoderConfigurationOptions *, const char*, const char*);

inline int soap_read_tt__VideoDecoderConfigurationOptions(struct soap *soap, tt__VideoDecoderConfigurationOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__VideoDecoderConfigurationOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__VideoOutputConfigurationOptions_DEFINED
#define SOAP_TYPE_tt__VideoOutputConfigurationOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__VideoOutputConfigurationOptions(struct soap*, const char*, int, const tt__VideoOutputConfigurationOptions *, const char*);
SOAP_FMAC3 tt__VideoOutputConfigurationOptions * SOAP_FMAC4 soap_in_tt__VideoOutputConfigurationOptions(struct soap*, const char*, tt__VideoOutputConfigurationOptions *, const char*);
SOAP_FMAC1 tt__VideoOutputConfigurationOptions * SOAP_FMAC2 soap_instantiate_tt__VideoOutputConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__VideoOutputConfigurationOptions * soap_new_tt__VideoOutputConfigurationOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__VideoOutputConfigurationOptions(soap, n, NULL, NULL, NULL);
}

inline tt__VideoOutputConfigurationOptions * soap_new_req_tt__VideoOutputConfigurationOptions(
	struct soap *soap)
{
	tt__VideoOutputConfigurationOptions *_p = soap_new_tt__VideoOutputConfigurationOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__VideoOutputConfigurationOptions * soap_new_set_tt__VideoOutputConfigurationOptions(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__VideoOutputConfigurationOptions *_p = soap_new_tt__VideoOutputConfigurationOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__VideoOutputConfigurationOptions::__any = __any;
		_p->tt__VideoOutputConfigurationOptions::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__VideoOutputConfigurationOptions(struct soap *soap, tt__VideoOutputConfigurationOptions const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:VideoOutputConfigurationOptions", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__VideoOutputConfigurationOptions * SOAP_FMAC4 soap_get_tt__VideoOutputConfigurationOptions(struct soap*, tt__VideoOutputConfigurationOptions *, const char*, const char*);

inline int soap_read_tt__VideoOutputConfigurationOptions(struct soap *soap, tt__VideoOutputConfigurationOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__VideoOutputConfigurationOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__VideoOutputConfiguration_DEFINED
#define SOAP_TYPE_tt__VideoOutputConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__VideoOutputConfiguration(struct soap*, const char*, int, const tt__VideoOutputConfiguration *, const char*);
SOAP_FMAC3 tt__VideoOutputConfiguration * SOAP_FMAC4 soap_in_tt__VideoOutputConfiguration(struct soap*, const char*, tt__VideoOutputConfiguration *, const char*);
SOAP_FMAC1 tt__VideoOutputConfiguration * SOAP_FMAC2 soap_instantiate_tt__VideoOutputConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__VideoOutputConfiguration * soap_new_tt__VideoOutputConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__VideoOutputConfiguration(soap, n, NULL, NULL, NULL);
}

inline tt__VideoOutputConfiguration * soap_new_req_tt__VideoOutputConfiguration(
	struct soap *soap,
	const std::string& OutputToken,
	const std::string& Name1,
	int UseCount1,
	const std::string& token1)
{
	tt__VideoOutputConfiguration *_p = soap_new_tt__VideoOutputConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__VideoOutputConfiguration::OutputToken = OutputToken;
		_p->tt__ConfigurationEntity::Name = Name1;
		_p->tt__ConfigurationEntity::UseCount = UseCount1;
		_p->tt__ConfigurationEntity::token = token1;
	}
	return _p;
}

inline tt__VideoOutputConfiguration * soap_new_set_tt__VideoOutputConfiguration(
	struct soap *soap,
	const std::string& OutputToken,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	const std::string& Name1,
	int UseCount1,
	const std::string& token1,
	char *__item2)
{
	tt__VideoOutputConfiguration *_p = soap_new_tt__VideoOutputConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__VideoOutputConfiguration::OutputToken = OutputToken;
		_p->tt__VideoOutputConfiguration::__any = __any;
		_p->tt__VideoOutputConfiguration::__anyAttribute = __anyAttribute;
		_p->tt__ConfigurationEntity::Name = Name1;
		_p->tt__ConfigurationEntity::UseCount = UseCount1;
		_p->tt__ConfigurationEntity::token = token1;
		_p->xsd__anyType::__item = __item2;
	}
	return _p;
}

inline int soap_write_tt__VideoOutputConfiguration(struct soap *soap, tt__VideoOutputConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:VideoOutputConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__VideoOutputConfiguration * SOAP_FMAC4 soap_get_tt__VideoOutputConfiguration(struct soap*, tt__VideoOutputConfiguration *, const char*, const char*);

inline int soap_read_tt__VideoOutputConfiguration(struct soap *soap, tt__VideoOutputConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__VideoOutputConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__VideoOutputExtension_DEFINED
#define SOAP_TYPE_tt__VideoOutputExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__VideoOutputExtension(struct soap*, const char*, int, const tt__VideoOutputExtension *, const char*);
SOAP_FMAC3 tt__VideoOutputExtension * SOAP_FMAC4 soap_in_tt__VideoOutputExtension(struct soap*, const char*, tt__VideoOutputExtension *, const char*);
SOAP_FMAC1 tt__VideoOutputExtension * SOAP_FMAC2 soap_instantiate_tt__VideoOutputExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__VideoOutputExtension * soap_new_tt__VideoOutputExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__VideoOutputExtension(soap, n, NULL, NULL, NULL);
}

inline tt__VideoOutputExtension * soap_new_req_tt__VideoOutputExtension(
	struct soap *soap)
{
	tt__VideoOutputExtension *_p = soap_new_tt__VideoOutputExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__VideoOutputExtension * soap_new_set_tt__VideoOutputExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__VideoOutputExtension *_p = soap_new_tt__VideoOutputExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__VideoOutputExtension::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__VideoOutputExtension(struct soap *soap, tt__VideoOutputExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:VideoOutputExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__VideoOutputExtension * SOAP_FMAC4 soap_get_tt__VideoOutputExtension(struct soap*, tt__VideoOutputExtension *, const char*, const char*);

inline int soap_read_tt__VideoOutputExtension(struct soap *soap, tt__VideoOutputExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__VideoOutputExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__VideoOutput_DEFINED
#define SOAP_TYPE_tt__VideoOutput_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__VideoOutput(struct soap*, const char*, int, const tt__VideoOutput *, const char*);
SOAP_FMAC3 tt__VideoOutput * SOAP_FMAC4 soap_in_tt__VideoOutput(struct soap*, const char*, tt__VideoOutput *, const char*);
SOAP_FMAC1 tt__VideoOutput * SOAP_FMAC2 soap_instantiate_tt__VideoOutput(struct soap*, int, const char*, const char*, size_t*);

inline tt__VideoOutput * soap_new_tt__VideoOutput(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__VideoOutput(soap, n, NULL, NULL, NULL);
}

inline tt__VideoOutput * soap_new_req_tt__VideoOutput(
	struct soap *soap,
	tt__Layout *Layout,
	const std::string& token1)
{
	tt__VideoOutput *_p = soap_new_tt__VideoOutput(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__VideoOutput::Layout = Layout;
		_p->tt__DeviceEntity::token = token1;
	}
	return _p;
}

inline tt__VideoOutput * soap_new_set_tt__VideoOutput(
	struct soap *soap,
	tt__Layout *Layout,
	tt__VideoResolution *Resolution,
	float *RefreshRate,
	float *AspectRatio,
	tt__VideoOutputExtension *Extension,
	char *__anyAttribute,
	const std::string& token1,
	char *__item2)
{
	tt__VideoOutput *_p = soap_new_tt__VideoOutput(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__VideoOutput::Layout = Layout;
		_p->tt__VideoOutput::Resolution = Resolution;
		_p->tt__VideoOutput::RefreshRate = RefreshRate;
		_p->tt__VideoOutput::AspectRatio = AspectRatio;
		_p->tt__VideoOutput::Extension = Extension;
		_p->tt__VideoOutput::__anyAttribute = __anyAttribute;
		_p->tt__DeviceEntity::token = token1;
		_p->xsd__anyType::__item = __item2;
	}
	return _p;
}

inline int soap_write_tt__VideoOutput(struct soap *soap, tt__VideoOutput const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:VideoOutput", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__VideoOutput * SOAP_FMAC4 soap_get_tt__VideoOutput(struct soap*, tt__VideoOutput *, const char*, const char*);

inline int soap_read_tt__VideoOutput(struct soap *soap, tt__VideoOutput *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__VideoOutput(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__PTZStatusFilterOptionsExtension_DEFINED
#define SOAP_TYPE_tt__PTZStatusFilterOptionsExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZStatusFilterOptionsExtension(struct soap*, const char*, int, const tt__PTZStatusFilterOptionsExtension *, const char*);
SOAP_FMAC3 tt__PTZStatusFilterOptionsExtension * SOAP_FMAC4 soap_in_tt__PTZStatusFilterOptionsExtension(struct soap*, const char*, tt__PTZStatusFilterOptionsExtension *, const char*);
SOAP_FMAC1 tt__PTZStatusFilterOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__PTZStatusFilterOptionsExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZStatusFilterOptionsExtension * soap_new_tt__PTZStatusFilterOptionsExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZStatusFilterOptionsExtension(soap, n, NULL, NULL, NULL);
}

inline tt__PTZStatusFilterOptionsExtension * soap_new_req_tt__PTZStatusFilterOptionsExtension(
	struct soap *soap)
{
	tt__PTZStatusFilterOptionsExtension *_p = soap_new_tt__PTZStatusFilterOptionsExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTZStatusFilterOptionsExtension * soap_new_set_tt__PTZStatusFilterOptionsExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__PTZStatusFilterOptionsExtension *_p = soap_new_tt__PTZStatusFilterOptionsExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZStatusFilterOptionsExtension::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__PTZStatusFilterOptionsExtension(struct soap *soap, tt__PTZStatusFilterOptionsExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZStatusFilterOptionsExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZStatusFilterOptionsExtension * SOAP_FMAC4 soap_get_tt__PTZStatusFilterOptionsExtension(struct soap*, tt__PTZStatusFilterOptionsExtension *, const char*, const char*);

inline int soap_read_tt__PTZStatusFilterOptionsExtension(struct soap *soap, tt__PTZStatusFilterOptionsExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__PTZStatusFilterOptionsExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__PTZStatusFilterOptions_DEFINED
#define SOAP_TYPE_tt__PTZStatusFilterOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZStatusFilterOptions(struct soap*, const char*, int, const tt__PTZStatusFilterOptions *, const char*);
SOAP_FMAC3 tt__PTZStatusFilterOptions * SOAP_FMAC4 soap_in_tt__PTZStatusFilterOptions(struct soap*, const char*, tt__PTZStatusFilterOptions *, const char*);
SOAP_FMAC1 tt__PTZStatusFilterOptions * SOAP_FMAC2 soap_instantiate_tt__PTZStatusFilterOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZStatusFilterOptions * soap_new_tt__PTZStatusFilterOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZStatusFilterOptions(soap, n, NULL, NULL, NULL);
}

inline tt__PTZStatusFilterOptions * soap_new_req_tt__PTZStatusFilterOptions(
	struct soap *soap,
	bool PanTiltStatusSupported,
	bool ZoomStatusSupported)
{
	tt__PTZStatusFilterOptions *_p = soap_new_tt__PTZStatusFilterOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZStatusFilterOptions::PanTiltStatusSupported = PanTiltStatusSupported;
		_p->tt__PTZStatusFilterOptions::ZoomStatusSupported = ZoomStatusSupported;
	}
	return _p;
}

inline tt__PTZStatusFilterOptions * soap_new_set_tt__PTZStatusFilterOptions(
	struct soap *soap,
	bool PanTiltStatusSupported,
	bool ZoomStatusSupported,
	const std::vector<char *> & __any,
	bool *PanTiltPositionSupported,
	bool *ZoomPositionSupported,
	tt__PTZStatusFilterOptionsExtension *Extension,
	char *__anyAttribute,
	char *__item1)
{
	tt__PTZStatusFilterOptions *_p = soap_new_tt__PTZStatusFilterOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZStatusFilterOptions::PanTiltStatusSupported = PanTiltStatusSupported;
		_p->tt__PTZStatusFilterOptions::ZoomStatusSupported = ZoomStatusSupported;
		_p->tt__PTZStatusFilterOptions::__any = __any;
		_p->tt__PTZStatusFilterOptions::PanTiltPositionSupported = PanTiltPositionSupported;
		_p->tt__PTZStatusFilterOptions::ZoomPositionSupported = ZoomPositionSupported;
		_p->tt__PTZStatusFilterOptions::Extension = Extension;
		_p->tt__PTZStatusFilterOptions::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__PTZStatusFilterOptions(struct soap *soap, tt__PTZStatusFilterOptions const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZStatusFilterOptions", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZStatusFilterOptions * SOAP_FMAC4 soap_get_tt__PTZStatusFilterOptions(struct soap*, tt__PTZStatusFilterOptions *, const char*, const char*);

inline int soap_read_tt__PTZStatusFilterOptions(struct soap *soap, tt__PTZStatusFilterOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__PTZStatusFilterOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__MetadataConfigurationOptionsExtension2_DEFINED
#define SOAP_TYPE_tt__MetadataConfigurationOptionsExtension2_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__MetadataConfigurationOptionsExtension2(struct soap*, const char*, int, const tt__MetadataConfigurationOptionsExtension2 *, const char*);
SOAP_FMAC3 tt__MetadataConfigurationOptionsExtension2 * SOAP_FMAC4 soap_in_tt__MetadataConfigurationOptionsExtension2(struct soap*, const char*, tt__MetadataConfigurationOptionsExtension2 *, const char*);
SOAP_FMAC1 tt__MetadataConfigurationOptionsExtension2 * SOAP_FMAC2 soap_instantiate_tt__MetadataConfigurationOptionsExtension2(struct soap*, int, const char*, const char*, size_t*);

inline tt__MetadataConfigurationOptionsExtension2 * soap_new_tt__MetadataConfigurationOptionsExtension2(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__MetadataConfigurationOptionsExtension2(soap, n, NULL, NULL, NULL);
}

inline tt__MetadataConfigurationOptionsExtension2 * soap_new_req_tt__MetadataConfigurationOptionsExtension2(
	struct soap *soap)
{
	tt__MetadataConfigurationOptionsExtension2 *_p = soap_new_tt__MetadataConfigurationOptionsExtension2(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__MetadataConfigurationOptionsExtension2 * soap_new_set_tt__MetadataConfigurationOptionsExtension2(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__MetadataConfigurationOptionsExtension2 *_p = soap_new_tt__MetadataConfigurationOptionsExtension2(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__MetadataConfigurationOptionsExtension2::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__MetadataConfigurationOptionsExtension2(struct soap *soap, tt__MetadataConfigurationOptionsExtension2 const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:MetadataConfigurationOptionsExtension2", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__MetadataConfigurationOptionsExtension2 * SOAP_FMAC4 soap_get_tt__MetadataConfigurationOptionsExtension2(struct soap*, tt__MetadataConfigurationOptionsExtension2 *, const char*, const char*);

inline int soap_read_tt__MetadataConfigurationOptionsExtension2(struct soap *soap, tt__MetadataConfigurationOptionsExtension2 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__MetadataConfigurationOptionsExtension2(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__MetadataConfigurationOptionsExtension_DEFINED
#define SOAP_TYPE_tt__MetadataConfigurationOptionsExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__MetadataConfigurationOptionsExtension(struct soap*, const char*, int, const tt__MetadataConfigurationOptionsExtension *, const char*);
SOAP_FMAC3 tt__MetadataConfigurationOptionsExtension * SOAP_FMAC4 soap_in_tt__MetadataConfigurationOptionsExtension(struct soap*, const char*, tt__MetadataConfigurationOptionsExtension *, const char*);
SOAP_FMAC1 tt__MetadataConfigurationOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__MetadataConfigurationOptionsExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__MetadataConfigurationOptionsExtension * soap_new_tt__MetadataConfigurationOptionsExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__MetadataConfigurationOptionsExtension(soap, n, NULL, NULL, NULL);
}

inline tt__MetadataConfigurationOptionsExtension * soap_new_req_tt__MetadataConfigurationOptionsExtension(
	struct soap *soap)
{
	tt__MetadataConfigurationOptionsExtension *_p = soap_new_tt__MetadataConfigurationOptionsExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__MetadataConfigurationOptionsExtension * soap_new_set_tt__MetadataConfigurationOptionsExtension(
	struct soap *soap,
	const std::vector<std::string> & CompressionType,
	tt__MetadataConfigurationOptionsExtension2 *Extension,
	char *__item1)
{
	tt__MetadataConfigurationOptionsExtension *_p = soap_new_tt__MetadataConfigurationOptionsExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__MetadataConfigurationOptionsExtension::CompressionType = CompressionType;
		_p->tt__MetadataConfigurationOptionsExtension::Extension = Extension;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__MetadataConfigurationOptionsExtension(struct soap *soap, tt__MetadataConfigurationOptionsExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:MetadataConfigurationOptionsExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__MetadataConfigurationOptionsExtension * SOAP_FMAC4 soap_get_tt__MetadataConfigurationOptionsExtension(struct soap*, tt__MetadataConfigurationOptionsExtension *, const char*, const char*);

inline int soap_read_tt__MetadataConfigurationOptionsExtension(struct soap *soap, tt__MetadataConfigurationOptionsExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__MetadataConfigurationOptionsExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__MetadataConfigurationOptions_DEFINED
#define SOAP_TYPE_tt__MetadataConfigurationOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__MetadataConfigurationOptions(struct soap*, const char*, int, const tt__MetadataConfigurationOptions *, const char*);
SOAP_FMAC3 tt__MetadataConfigurationOptions * SOAP_FMAC4 soap_in_tt__MetadataConfigurationOptions(struct soap*, const char*, tt__MetadataConfigurationOptions *, const char*);
SOAP_FMAC1 tt__MetadataConfigurationOptions * SOAP_FMAC2 soap_instantiate_tt__MetadataConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__MetadataConfigurationOptions * soap_new_tt__MetadataConfigurationOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__MetadataConfigurationOptions(soap, n, NULL, NULL, NULL);
}

inline tt__MetadataConfigurationOptions * soap_new_req_tt__MetadataConfigurationOptions(
	struct soap *soap,
	tt__PTZStatusFilterOptions *PTZStatusFilterOptions)
{
	tt__MetadataConfigurationOptions *_p = soap_new_tt__MetadataConfigurationOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__MetadataConfigurationOptions::PTZStatusFilterOptions = PTZStatusFilterOptions;
	}
	return _p;
}

inline tt__MetadataConfigurationOptions * soap_new_set_tt__MetadataConfigurationOptions(
	struct soap *soap,
	tt__PTZStatusFilterOptions *PTZStatusFilterOptions,
	const std::vector<char *> & __any,
	tt__MetadataConfigurationOptionsExtension *Extension,
	char *__anyAttribute,
	char *__item1)
{
	tt__MetadataConfigurationOptions *_p = soap_new_tt__MetadataConfigurationOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__MetadataConfigurationOptions::PTZStatusFilterOptions = PTZStatusFilterOptions;
		_p->tt__MetadataConfigurationOptions::__any = __any;
		_p->tt__MetadataConfigurationOptions::Extension = Extension;
		_p->tt__MetadataConfigurationOptions::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__MetadataConfigurationOptions(struct soap *soap, tt__MetadataConfigurationOptions const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:MetadataConfigurationOptions", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__MetadataConfigurationOptions * SOAP_FMAC4 soap_get_tt__MetadataConfigurationOptions(struct soap*, tt__MetadataConfigurationOptions *, const char*, const char*);

inline int soap_read_tt__MetadataConfigurationOptions(struct soap *soap, tt__MetadataConfigurationOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__MetadataConfigurationOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__EventSubscription_DEFINED
#define SOAP_TYPE_tt__EventSubscription_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__EventSubscription(struct soap*, const char*, int, const tt__EventSubscription *, const char*);
SOAP_FMAC3 tt__EventSubscription * SOAP_FMAC4 soap_in_tt__EventSubscription(struct soap*, const char*, tt__EventSubscription *, const char*);
SOAP_FMAC1 tt__EventSubscription * SOAP_FMAC2 soap_instantiate_tt__EventSubscription(struct soap*, int, const char*, const char*, size_t*);

inline tt__EventSubscription * soap_new_tt__EventSubscription(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__EventSubscription(soap, n, NULL, NULL, NULL);
}

inline tt__EventSubscription * soap_new_req_tt__EventSubscription(
	struct soap *soap)
{
	tt__EventSubscription *_p = soap_new_tt__EventSubscription(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__EventSubscription * soap_new_set_tt__EventSubscription(
	struct soap *soap,
	wsnt__FilterType *Filter,
	_tt__EventSubscription_SubscriptionPolicy *SubscriptionPolicy,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__EventSubscription *_p = soap_new_tt__EventSubscription(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__EventSubscription::Filter = Filter;
		_p->tt__EventSubscription::SubscriptionPolicy = SubscriptionPolicy;
		_p->tt__EventSubscription::__any = __any;
		_p->tt__EventSubscription::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__EventSubscription(struct soap *soap, tt__EventSubscription const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:EventSubscription", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__EventSubscription * SOAP_FMAC4 soap_get_tt__EventSubscription(struct soap*, tt__EventSubscription *, const char*, const char*);

inline int soap_read_tt__EventSubscription(struct soap *soap, tt__EventSubscription *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__EventSubscription(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__PTZFilter_DEFINED
#define SOAP_TYPE_tt__PTZFilter_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZFilter(struct soap*, const char*, int, const tt__PTZFilter *, const char*);
SOAP_FMAC3 tt__PTZFilter * SOAP_FMAC4 soap_in_tt__PTZFilter(struct soap*, const char*, tt__PTZFilter *, const char*);
SOAP_FMAC1 tt__PTZFilter * SOAP_FMAC2 soap_instantiate_tt__PTZFilter(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZFilter * soap_new_tt__PTZFilter(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZFilter(soap, n, NULL, NULL, NULL);
}

inline tt__PTZFilter * soap_new_req_tt__PTZFilter(
	struct soap *soap,
	bool Status,
	bool Position)
{
	tt__PTZFilter *_p = soap_new_tt__PTZFilter(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZFilter::Status = Status;
		_p->tt__PTZFilter::Position = Position;
	}
	return _p;
}

inline tt__PTZFilter * soap_new_set_tt__PTZFilter(
	struct soap *soap,
	bool Status,
	bool Position,
	char *__anyAttribute,
	char *__item1)
{
	tt__PTZFilter *_p = soap_new_tt__PTZFilter(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZFilter::Status = Status;
		_p->tt__PTZFilter::Position = Position;
		_p->tt__PTZFilter::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__PTZFilter(struct soap *soap, tt__PTZFilter const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZFilter", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZFilter * SOAP_FMAC4 soap_get_tt__PTZFilter(struct soap*, tt__PTZFilter *, const char*, const char*);

inline int soap_read_tt__PTZFilter(struct soap *soap, tt__PTZFilter *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__PTZFilter(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__MetadataConfigurationExtension_DEFINED
#define SOAP_TYPE_tt__MetadataConfigurationExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__MetadataConfigurationExtension(struct soap*, const char*, int, const tt__MetadataConfigurationExtension *, const char*);
SOAP_FMAC3 tt__MetadataConfigurationExtension * SOAP_FMAC4 soap_in_tt__MetadataConfigurationExtension(struct soap*, const char*, tt__MetadataConfigurationExtension *, const char*);
SOAP_FMAC1 tt__MetadataConfigurationExtension * SOAP_FMAC2 soap_instantiate_tt__MetadataConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__MetadataConfigurationExtension * soap_new_tt__MetadataConfigurationExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__MetadataConfigurationExtension(soap, n, NULL, NULL, NULL);
}

inline tt__MetadataConfigurationExtension * soap_new_req_tt__MetadataConfigurationExtension(
	struct soap *soap)
{
	tt__MetadataConfigurationExtension *_p = soap_new_tt__MetadataConfigurationExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__MetadataConfigurationExtension * soap_new_set_tt__MetadataConfigurationExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__MetadataConfigurationExtension *_p = soap_new_tt__MetadataConfigurationExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__MetadataConfigurationExtension::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__MetadataConfigurationExtension(struct soap *soap, tt__MetadataConfigurationExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:MetadataConfigurationExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__MetadataConfigurationExtension * SOAP_FMAC4 soap_get_tt__MetadataConfigurationExtension(struct soap*, tt__MetadataConfigurationExtension *, const char*, const char*);

inline int soap_read_tt__MetadataConfigurationExtension(struct soap *soap, tt__MetadataConfigurationExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__MetadataConfigurationExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__MetadataConfiguration_DEFINED
#define SOAP_TYPE_tt__MetadataConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__MetadataConfiguration(struct soap*, const char*, int, const tt__MetadataConfiguration *, const char*);
SOAP_FMAC3 tt__MetadataConfiguration * SOAP_FMAC4 soap_in_tt__MetadataConfiguration(struct soap*, const char*, tt__MetadataConfiguration *, const char*);
SOAP_FMAC1 tt__MetadataConfiguration * SOAP_FMAC2 soap_instantiate_tt__MetadataConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__MetadataConfiguration * soap_new_tt__MetadataConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__MetadataConfiguration(soap, n, NULL, NULL, NULL);
}

inline tt__MetadataConfiguration * soap_new_req_tt__MetadataConfiguration(
	struct soap *soap,
	tt__MulticastConfiguration *Multicast,
	LONG64 SessionTimeout,
	const std::string& Name1,
	int UseCount1,
	const std::string& token1)
{
	tt__MetadataConfiguration *_p = soap_new_tt__MetadataConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__MetadataConfiguration::Multicast = Multicast;
		_p->tt__MetadataConfiguration::SessionTimeout = SessionTimeout;
		_p->tt__ConfigurationEntity::Name = Name1;
		_p->tt__ConfigurationEntity::UseCount = UseCount1;
		_p->tt__ConfigurationEntity::token = token1;
	}
	return _p;
}

inline tt__MetadataConfiguration * soap_new_set_tt__MetadataConfiguration(
	struct soap *soap,
	tt__PTZFilter *PTZStatus,
	tt__EventSubscription *Events,
	bool *Analytics,
	tt__MulticastConfiguration *Multicast,
	LONG64 SessionTimeout,
	const std::vector<char *> & __any,
	tt__AnalyticsEngineConfiguration *AnalyticsEngineConfiguration,
	tt__MetadataConfigurationExtension *Extension,
	std::string *CompressionType,
	char *__anyAttribute,
	const std::string& Name1,
	int UseCount1,
	const std::string& token1,
	char *__item2)
{
	tt__MetadataConfiguration *_p = soap_new_tt__MetadataConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__MetadataConfiguration::PTZStatus = PTZStatus;
		_p->tt__MetadataConfiguration::Events = Events;
		_p->tt__MetadataConfiguration::Analytics = Analytics;
		_p->tt__MetadataConfiguration::Multicast = Multicast;
		_p->tt__MetadataConfiguration::SessionTimeout = SessionTimeout;
		_p->tt__MetadataConfiguration::__any = __any;
		_p->tt__MetadataConfiguration::AnalyticsEngineConfiguration = AnalyticsEngineConfiguration;
		_p->tt__MetadataConfiguration::Extension = Extension;
		_p->tt__MetadataConfiguration::CompressionType = CompressionType;
		_p->tt__MetadataConfiguration::__anyAttribute = __anyAttribute;
		_p->tt__ConfigurationEntity::Name = Name1;
		_p->tt__ConfigurationEntity::UseCount = UseCount1;
		_p->tt__ConfigurationEntity::token = token1;
		_p->xsd__anyType::__item = __item2;
	}
	return _p;
}

inline int soap_write_tt__MetadataConfiguration(struct soap *soap, tt__MetadataConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:MetadataConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__MetadataConfiguration * SOAP_FMAC4 soap_get_tt__MetadataConfiguration(struct soap*, tt__MetadataConfiguration *, const char*, const char*);

inline int soap_read_tt__MetadataConfiguration(struct soap *soap, tt__MetadataConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__MetadataConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__VideoAnalyticsConfiguration_DEFINED
#define SOAP_TYPE_tt__VideoAnalyticsConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__VideoAnalyticsConfiguration(struct soap*, const char*, int, const tt__VideoAnalyticsConfiguration *, const char*);
SOAP_FMAC3 tt__VideoAnalyticsConfiguration * SOAP_FMAC4 soap_in_tt__VideoAnalyticsConfiguration(struct soap*, const char*, tt__VideoAnalyticsConfiguration *, const char*);
SOAP_FMAC1 tt__VideoAnalyticsConfiguration * SOAP_FMAC2 soap_instantiate_tt__VideoAnalyticsConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__VideoAnalyticsConfiguration * soap_new_tt__VideoAnalyticsConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__VideoAnalyticsConfiguration(soap, n, NULL, NULL, NULL);
}

inline tt__VideoAnalyticsConfiguration * soap_new_req_tt__VideoAnalyticsConfiguration(
	struct soap *soap,
	tt__AnalyticsEngineConfiguration *AnalyticsEngineConfiguration,
	tt__RuleEngineConfiguration *RuleEngineConfiguration,
	const std::string& Name1,
	int UseCount1,
	const std::string& token1)
{
	tt__VideoAnalyticsConfiguration *_p = soap_new_tt__VideoAnalyticsConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__VideoAnalyticsConfiguration::AnalyticsEngineConfiguration = AnalyticsEngineConfiguration;
		_p->tt__VideoAnalyticsConfiguration::RuleEngineConfiguration = RuleEngineConfiguration;
		_p->tt__ConfigurationEntity::Name = Name1;
		_p->tt__ConfigurationEntity::UseCount = UseCount1;
		_p->tt__ConfigurationEntity::token = token1;
	}
	return _p;
}

inline tt__VideoAnalyticsConfiguration * soap_new_set_tt__VideoAnalyticsConfiguration(
	struct soap *soap,
	tt__AnalyticsEngineConfiguration *AnalyticsEngineConfiguration,
	tt__RuleEngineConfiguration *RuleEngineConfiguration,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	const std::string& Name1,
	int UseCount1,
	const std::string& token1,
	char *__item2)
{
	tt__VideoAnalyticsConfiguration *_p = soap_new_tt__VideoAnalyticsConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__VideoAnalyticsConfiguration::AnalyticsEngineConfiguration = AnalyticsEngineConfiguration;
		_p->tt__VideoAnalyticsConfiguration::RuleEngineConfiguration = RuleEngineConfiguration;
		_p->tt__VideoAnalyticsConfiguration::__any = __any;
		_p->tt__VideoAnalyticsConfiguration::__anyAttribute = __anyAttribute;
		_p->tt__ConfigurationEntity::Name = Name1;
		_p->tt__ConfigurationEntity::UseCount = UseCount1;
		_p->tt__ConfigurationEntity::token = token1;
		_p->xsd__anyType::__item = __item2;
	}
	return _p;
}

inline int soap_write_tt__VideoAnalyticsConfiguration(struct soap *soap, tt__VideoAnalyticsConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:VideoAnalyticsConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__VideoAnalyticsConfiguration * SOAP_FMAC4 soap_get_tt__VideoAnalyticsConfiguration(struct soap*, tt__VideoAnalyticsConfiguration *, const char*, const char*);

inline int soap_read_tt__VideoAnalyticsConfiguration(struct soap *soap, tt__VideoAnalyticsConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__VideoAnalyticsConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__AudioEncoder2ConfigurationOptions_DEFINED
#define SOAP_TYPE_tt__AudioEncoder2ConfigurationOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AudioEncoder2ConfigurationOptions(struct soap*, const char*, int, const tt__AudioEncoder2ConfigurationOptions *, const char*);
SOAP_FMAC3 tt__AudioEncoder2ConfigurationOptions * SOAP_FMAC4 soap_in_tt__AudioEncoder2ConfigurationOptions(struct soap*, const char*, tt__AudioEncoder2ConfigurationOptions *, const char*);
SOAP_FMAC1 tt__AudioEncoder2ConfigurationOptions * SOAP_FMAC2 soap_instantiate_tt__AudioEncoder2ConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__AudioEncoder2ConfigurationOptions * soap_new_tt__AudioEncoder2ConfigurationOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__AudioEncoder2ConfigurationOptions(soap, n, NULL, NULL, NULL);
}

inline tt__AudioEncoder2ConfigurationOptions * soap_new_req_tt__AudioEncoder2ConfigurationOptions(
	struct soap *soap,
	const std::string& Encoding,
	tt__IntList *BitrateList,
	tt__IntList *SampleRateList)
{
	tt__AudioEncoder2ConfigurationOptions *_p = soap_new_tt__AudioEncoder2ConfigurationOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AudioEncoder2ConfigurationOptions::Encoding = Encoding;
		_p->tt__AudioEncoder2ConfigurationOptions::BitrateList = BitrateList;
		_p->tt__AudioEncoder2ConfigurationOptions::SampleRateList = SampleRateList;
	}
	return _p;
}

inline tt__AudioEncoder2ConfigurationOptions * soap_new_set_tt__AudioEncoder2ConfigurationOptions(
	struct soap *soap,
	const std::string& Encoding,
	tt__IntList *BitrateList,
	tt__IntList *SampleRateList,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__AudioEncoder2ConfigurationOptions *_p = soap_new_tt__AudioEncoder2ConfigurationOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AudioEncoder2ConfigurationOptions::Encoding = Encoding;
		_p->tt__AudioEncoder2ConfigurationOptions::BitrateList = BitrateList;
		_p->tt__AudioEncoder2ConfigurationOptions::SampleRateList = SampleRateList;
		_p->tt__AudioEncoder2ConfigurationOptions::__any = __any;
		_p->tt__AudioEncoder2ConfigurationOptions::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__AudioEncoder2ConfigurationOptions(struct soap *soap, tt__AudioEncoder2ConfigurationOptions const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AudioEncoder2ConfigurationOptions", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__AudioEncoder2ConfigurationOptions * SOAP_FMAC4 soap_get_tt__AudioEncoder2ConfigurationOptions(struct soap*, tt__AudioEncoder2ConfigurationOptions *, const char*, const char*);

inline int soap_read_tt__AudioEncoder2ConfigurationOptions(struct soap *soap, tt__AudioEncoder2ConfigurationOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__AudioEncoder2ConfigurationOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__AudioEncoder2Configuration_DEFINED
#define SOAP_TYPE_tt__AudioEncoder2Configuration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AudioEncoder2Configuration(struct soap*, const char*, int, const tt__AudioEncoder2Configuration *, const char*);
SOAP_FMAC3 tt__AudioEncoder2Configuration * SOAP_FMAC4 soap_in_tt__AudioEncoder2Configuration(struct soap*, const char*, tt__AudioEncoder2Configuration *, const char*);
SOAP_FMAC1 tt__AudioEncoder2Configuration * SOAP_FMAC2 soap_instantiate_tt__AudioEncoder2Configuration(struct soap*, int, const char*, const char*, size_t*);

inline tt__AudioEncoder2Configuration * soap_new_tt__AudioEncoder2Configuration(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__AudioEncoder2Configuration(soap, n, NULL, NULL, NULL);
}

inline tt__AudioEncoder2Configuration * soap_new_req_tt__AudioEncoder2Configuration(
	struct soap *soap,
	const std::string& Encoding,
	int Bitrate,
	int SampleRate,
	const std::string& Name1,
	int UseCount1,
	const std::string& token1)
{
	tt__AudioEncoder2Configuration *_p = soap_new_tt__AudioEncoder2Configuration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AudioEncoder2Configuration::Encoding = Encoding;
		_p->tt__AudioEncoder2Configuration::Bitrate = Bitrate;
		_p->tt__AudioEncoder2Configuration::SampleRate = SampleRate;
		_p->tt__ConfigurationEntity::Name = Name1;
		_p->tt__ConfigurationEntity::UseCount = UseCount1;
		_p->tt__ConfigurationEntity::token = token1;
	}
	return _p;
}

inline tt__AudioEncoder2Configuration * soap_new_set_tt__AudioEncoder2Configuration(
	struct soap *soap,
	const std::string& Encoding,
	tt__MulticastConfiguration *Multicast,
	int Bitrate,
	int SampleRate,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	const std::string& Name1,
	int UseCount1,
	const std::string& token1,
	char *__item2)
{
	tt__AudioEncoder2Configuration *_p = soap_new_tt__AudioEncoder2Configuration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AudioEncoder2Configuration::Encoding = Encoding;
		_p->tt__AudioEncoder2Configuration::Multicast = Multicast;
		_p->tt__AudioEncoder2Configuration::Bitrate = Bitrate;
		_p->tt__AudioEncoder2Configuration::SampleRate = SampleRate;
		_p->tt__AudioEncoder2Configuration::__any = __any;
		_p->tt__AudioEncoder2Configuration::__anyAttribute = __anyAttribute;
		_p->tt__ConfigurationEntity::Name = Name1;
		_p->tt__ConfigurationEntity::UseCount = UseCount1;
		_p->tt__ConfigurationEntity::token = token1;
		_p->xsd__anyType::__item = __item2;
	}
	return _p;
}

inline int soap_write_tt__AudioEncoder2Configuration(struct soap *soap, tt__AudioEncoder2Configuration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AudioEncoder2Configuration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__AudioEncoder2Configuration * SOAP_FMAC4 soap_get_tt__AudioEncoder2Configuration(struct soap*, tt__AudioEncoder2Configuration *, const char*, const char*);

inline int soap_read_tt__AudioEncoder2Configuration(struct soap *soap, tt__AudioEncoder2Configuration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__AudioEncoder2Configuration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__AudioEncoderConfigurationOption_DEFINED
#define SOAP_TYPE_tt__AudioEncoderConfigurationOption_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AudioEncoderConfigurationOption(struct soap*, const char*, int, const tt__AudioEncoderConfigurationOption *, const char*);
SOAP_FMAC3 tt__AudioEncoderConfigurationOption * SOAP_FMAC4 soap_in_tt__AudioEncoderConfigurationOption(struct soap*, const char*, tt__AudioEncoderConfigurationOption *, const char*);
SOAP_FMAC1 tt__AudioEncoderConfigurationOption * SOAP_FMAC2 soap_instantiate_tt__AudioEncoderConfigurationOption(struct soap*, int, const char*, const char*, size_t*);

inline tt__AudioEncoderConfigurationOption * soap_new_tt__AudioEncoderConfigurationOption(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__AudioEncoderConfigurationOption(soap, n, NULL, NULL, NULL);
}

inline tt__AudioEncoderConfigurationOption * soap_new_req_tt__AudioEncoderConfigurationOption(
	struct soap *soap,
	enum tt__AudioEncoding Encoding,
	tt__IntList *BitrateList,
	tt__IntList *SampleRateList)
{
	tt__AudioEncoderConfigurationOption *_p = soap_new_tt__AudioEncoderConfigurationOption(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AudioEncoderConfigurationOption::Encoding = Encoding;
		_p->tt__AudioEncoderConfigurationOption::BitrateList = BitrateList;
		_p->tt__AudioEncoderConfigurationOption::SampleRateList = SampleRateList;
	}
	return _p;
}

inline tt__AudioEncoderConfigurationOption * soap_new_set_tt__AudioEncoderConfigurationOption(
	struct soap *soap,
	enum tt__AudioEncoding Encoding,
	tt__IntList *BitrateList,
	tt__IntList *SampleRateList,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__AudioEncoderConfigurationOption *_p = soap_new_tt__AudioEncoderConfigurationOption(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AudioEncoderConfigurationOption::Encoding = Encoding;
		_p->tt__AudioEncoderConfigurationOption::BitrateList = BitrateList;
		_p->tt__AudioEncoderConfigurationOption::SampleRateList = SampleRateList;
		_p->tt__AudioEncoderConfigurationOption::__any = __any;
		_p->tt__AudioEncoderConfigurationOption::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__AudioEncoderConfigurationOption(struct soap *soap, tt__AudioEncoderConfigurationOption const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AudioEncoderConfigurationOption", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__AudioEncoderConfigurationOption * SOAP_FMAC4 soap_get_tt__AudioEncoderConfigurationOption(struct soap*, tt__AudioEncoderConfigurationOption *, const char*, const char*);

inline int soap_read_tt__AudioEncoderConfigurationOption(struct soap *soap, tt__AudioEncoderConfigurationOption *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__AudioEncoderConfigurationOption(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__AudioEncoderConfigurationOptions_DEFINED
#define SOAP_TYPE_tt__AudioEncoderConfigurationOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AudioEncoderConfigurationOptions(struct soap*, const char*, int, const tt__AudioEncoderConfigurationOptions *, const char*);
SOAP_FMAC3 tt__AudioEncoderConfigurationOptions * SOAP_FMAC4 soap_in_tt__AudioEncoderConfigurationOptions(struct soap*, const char*, tt__AudioEncoderConfigurationOptions *, const char*);
SOAP_FMAC1 tt__AudioEncoderConfigurationOptions * SOAP_FMAC2 soap_instantiate_tt__AudioEncoderConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__AudioEncoderConfigurationOptions * soap_new_tt__AudioEncoderConfigurationOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__AudioEncoderConfigurationOptions(soap, n, NULL, NULL, NULL);
}

inline tt__AudioEncoderConfigurationOptions * soap_new_req_tt__AudioEncoderConfigurationOptions(
	struct soap *soap)
{
	tt__AudioEncoderConfigurationOptions *_p = soap_new_tt__AudioEncoderConfigurationOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__AudioEncoderConfigurationOptions * soap_new_set_tt__AudioEncoderConfigurationOptions(
	struct soap *soap,
	const std::vector<tt__AudioEncoderConfigurationOption *> & Options,
	char *__anyAttribute,
	char *__item1)
{
	tt__AudioEncoderConfigurationOptions *_p = soap_new_tt__AudioEncoderConfigurationOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AudioEncoderConfigurationOptions::Options = Options;
		_p->tt__AudioEncoderConfigurationOptions::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__AudioEncoderConfigurationOptions(struct soap *soap, tt__AudioEncoderConfigurationOptions const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AudioEncoderConfigurationOptions", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__AudioEncoderConfigurationOptions * SOAP_FMAC4 soap_get_tt__AudioEncoderConfigurationOptions(struct soap*, tt__AudioEncoderConfigurationOptions *, const char*, const char*);

inline int soap_read_tt__AudioEncoderConfigurationOptions(struct soap *soap, tt__AudioEncoderConfigurationOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__AudioEncoderConfigurationOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__AudioEncoderConfiguration_DEFINED
#define SOAP_TYPE_tt__AudioEncoderConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AudioEncoderConfiguration(struct soap*, const char*, int, const tt__AudioEncoderConfiguration *, const char*);
SOAP_FMAC3 tt__AudioEncoderConfiguration * SOAP_FMAC4 soap_in_tt__AudioEncoderConfiguration(struct soap*, const char*, tt__AudioEncoderConfiguration *, const char*);
SOAP_FMAC1 tt__AudioEncoderConfiguration * SOAP_FMAC2 soap_instantiate_tt__AudioEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__AudioEncoderConfiguration * soap_new_tt__AudioEncoderConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__AudioEncoderConfiguration(soap, n, NULL, NULL, NULL);
}

inline tt__AudioEncoderConfiguration * soap_new_req_tt__AudioEncoderConfiguration(
	struct soap *soap,
	enum tt__AudioEncoding Encoding,
	int Bitrate,
	int SampleRate,
	tt__MulticastConfiguration *Multicast,
	LONG64 SessionTimeout,
	const std::string& Name1,
	int UseCount1,
	const std::string& token1)
{
	tt__AudioEncoderConfiguration *_p = soap_new_tt__AudioEncoderConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AudioEncoderConfiguration::Encoding = Encoding;
		_p->tt__AudioEncoderConfiguration::Bitrate = Bitrate;
		_p->tt__AudioEncoderConfiguration::SampleRate = SampleRate;
		_p->tt__AudioEncoderConfiguration::Multicast = Multicast;
		_p->tt__AudioEncoderConfiguration::SessionTimeout = SessionTimeout;
		_p->tt__ConfigurationEntity::Name = Name1;
		_p->tt__ConfigurationEntity::UseCount = UseCount1;
		_p->tt__ConfigurationEntity::token = token1;
	}
	return _p;
}

inline tt__AudioEncoderConfiguration * soap_new_set_tt__AudioEncoderConfiguration(
	struct soap *soap,
	enum tt__AudioEncoding Encoding,
	int Bitrate,
	int SampleRate,
	tt__MulticastConfiguration *Multicast,
	LONG64 SessionTimeout,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	const std::string& Name1,
	int UseCount1,
	const std::string& token1,
	char *__item2)
{
	tt__AudioEncoderConfiguration *_p = soap_new_tt__AudioEncoderConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AudioEncoderConfiguration::Encoding = Encoding;
		_p->tt__AudioEncoderConfiguration::Bitrate = Bitrate;
		_p->tt__AudioEncoderConfiguration::SampleRate = SampleRate;
		_p->tt__AudioEncoderConfiguration::Multicast = Multicast;
		_p->tt__AudioEncoderConfiguration::SessionTimeout = SessionTimeout;
		_p->tt__AudioEncoderConfiguration::__any = __any;
		_p->tt__AudioEncoderConfiguration::__anyAttribute = __anyAttribute;
		_p->tt__ConfigurationEntity::Name = Name1;
		_p->tt__ConfigurationEntity::UseCount = UseCount1;
		_p->tt__ConfigurationEntity::token = token1;
		_p->xsd__anyType::__item = __item2;
	}
	return _p;
}

inline int soap_write_tt__AudioEncoderConfiguration(struct soap *soap, tt__AudioEncoderConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AudioEncoderConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__AudioEncoderConfiguration * SOAP_FMAC4 soap_get_tt__AudioEncoderConfiguration(struct soap*, tt__AudioEncoderConfiguration *, const char*, const char*);

inline int soap_read_tt__AudioEncoderConfiguration(struct soap *soap, tt__AudioEncoderConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__AudioEncoderConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__AudioSourceOptionsExtension_DEFINED
#define SOAP_TYPE_tt__AudioSourceOptionsExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AudioSourceOptionsExtension(struct soap*, const char*, int, const tt__AudioSourceOptionsExtension *, const char*);
SOAP_FMAC3 tt__AudioSourceOptionsExtension * SOAP_FMAC4 soap_in_tt__AudioSourceOptionsExtension(struct soap*, const char*, tt__AudioSourceOptionsExtension *, const char*);
SOAP_FMAC1 tt__AudioSourceOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__AudioSourceOptionsExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__AudioSourceOptionsExtension * soap_new_tt__AudioSourceOptionsExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__AudioSourceOptionsExtension(soap, n, NULL, NULL, NULL);
}

inline tt__AudioSourceOptionsExtension * soap_new_req_tt__AudioSourceOptionsExtension(
	struct soap *soap)
{
	tt__AudioSourceOptionsExtension *_p = soap_new_tt__AudioSourceOptionsExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__AudioSourceOptionsExtension * soap_new_set_tt__AudioSourceOptionsExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__AudioSourceOptionsExtension *_p = soap_new_tt__AudioSourceOptionsExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AudioSourceOptionsExtension::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__AudioSourceOptionsExtension(struct soap *soap, tt__AudioSourceOptionsExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AudioSourceOptionsExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__AudioSourceOptionsExtension * SOAP_FMAC4 soap_get_tt__AudioSourceOptionsExtension(struct soap*, tt__AudioSourceOptionsExtension *, const char*, const char*);

inline int soap_read_tt__AudioSourceOptionsExtension(struct soap *soap, tt__AudioSourceOptionsExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__AudioSourceOptionsExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__AudioSourceConfigurationOptions_DEFINED
#define SOAP_TYPE_tt__AudioSourceConfigurationOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AudioSourceConfigurationOptions(struct soap*, const char*, int, const tt__AudioSourceConfigurationOptions *, const char*);
SOAP_FMAC3 tt__AudioSourceConfigurationOptions * SOAP_FMAC4 soap_in_tt__AudioSourceConfigurationOptions(struct soap*, const char*, tt__AudioSourceConfigurationOptions *, const char*);
SOAP_FMAC1 tt__AudioSourceConfigurationOptions * SOAP_FMAC2 soap_instantiate_tt__AudioSourceConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__AudioSourceConfigurationOptions * soap_new_tt__AudioSourceConfigurationOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__AudioSourceConfigurationOptions(soap, n, NULL, NULL, NULL);
}

inline tt__AudioSourceConfigurationOptions * soap_new_req_tt__AudioSourceConfigurationOptions(
	struct soap *soap,
	const std::vector<std::string> & InputTokensAvailable)
{
	tt__AudioSourceConfigurationOptions *_p = soap_new_tt__AudioSourceConfigurationOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AudioSourceConfigurationOptions::InputTokensAvailable = InputTokensAvailable;
	}
	return _p;
}

inline tt__AudioSourceConfigurationOptions * soap_new_set_tt__AudioSourceConfigurationOptions(
	struct soap *soap,
	const std::vector<std::string> & InputTokensAvailable,
	tt__AudioSourceOptionsExtension *Extension,
	char *__anyAttribute,
	char *__item1)
{
	tt__AudioSourceConfigurationOptions *_p = soap_new_tt__AudioSourceConfigurationOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AudioSourceConfigurationOptions::InputTokensAvailable = InputTokensAvailable;
		_p->tt__AudioSourceConfigurationOptions::Extension = Extension;
		_p->tt__AudioSourceConfigurationOptions::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__AudioSourceConfigurationOptions(struct soap *soap, tt__AudioSourceConfigurationOptions const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AudioSourceConfigurationOptions", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__AudioSourceConfigurationOptions * SOAP_FMAC4 soap_get_tt__AudioSourceConfigurationOptions(struct soap*, tt__AudioSourceConfigurationOptions *, const char*, const char*);

inline int soap_read_tt__AudioSourceConfigurationOptions(struct soap *soap, tt__AudioSourceConfigurationOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__AudioSourceConfigurationOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__AudioSourceConfiguration_DEFINED
#define SOAP_TYPE_tt__AudioSourceConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AudioSourceConfiguration(struct soap*, const char*, int, const tt__AudioSourceConfiguration *, const char*);
SOAP_FMAC3 tt__AudioSourceConfiguration * SOAP_FMAC4 soap_in_tt__AudioSourceConfiguration(struct soap*, const char*, tt__AudioSourceConfiguration *, const char*);
SOAP_FMAC1 tt__AudioSourceConfiguration * SOAP_FMAC2 soap_instantiate_tt__AudioSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__AudioSourceConfiguration * soap_new_tt__AudioSourceConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__AudioSourceConfiguration(soap, n, NULL, NULL, NULL);
}

inline tt__AudioSourceConfiguration * soap_new_req_tt__AudioSourceConfiguration(
	struct soap *soap,
	const std::string& SourceToken,
	const std::string& Name1,
	int UseCount1,
	const std::string& token1)
{
	tt__AudioSourceConfiguration *_p = soap_new_tt__AudioSourceConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AudioSourceConfiguration::SourceToken = SourceToken;
		_p->tt__ConfigurationEntity::Name = Name1;
		_p->tt__ConfigurationEntity::UseCount = UseCount1;
		_p->tt__ConfigurationEntity::token = token1;
	}
	return _p;
}

inline tt__AudioSourceConfiguration * soap_new_set_tt__AudioSourceConfiguration(
	struct soap *soap,
	const std::string& SourceToken,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	const std::string& Name1,
	int UseCount1,
	const std::string& token1,
	char *__item2)
{
	tt__AudioSourceConfiguration *_p = soap_new_tt__AudioSourceConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AudioSourceConfiguration::SourceToken = SourceToken;
		_p->tt__AudioSourceConfiguration::__any = __any;
		_p->tt__AudioSourceConfiguration::__anyAttribute = __anyAttribute;
		_p->tt__ConfigurationEntity::Name = Name1;
		_p->tt__ConfigurationEntity::UseCount = UseCount1;
		_p->tt__ConfigurationEntity::token = token1;
		_p->xsd__anyType::__item = __item2;
	}
	return _p;
}

inline int soap_write_tt__AudioSourceConfiguration(struct soap *soap, tt__AudioSourceConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AudioSourceConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__AudioSourceConfiguration * SOAP_FMAC4 soap_get_tt__AudioSourceConfiguration(struct soap*, tt__AudioSourceConfiguration *, const char*, const char*);

inline int soap_read_tt__AudioSourceConfiguration(struct soap *soap, tt__AudioSourceConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__AudioSourceConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__VideoEncoder2ConfigurationOptions_DEFINED
#define SOAP_TYPE_tt__VideoEncoder2ConfigurationOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__VideoEncoder2ConfigurationOptions(struct soap*, const char*, int, const tt__VideoEncoder2ConfigurationOptions *, const char*);
SOAP_FMAC3 tt__VideoEncoder2ConfigurationOptions * SOAP_FMAC4 soap_in_tt__VideoEncoder2ConfigurationOptions(struct soap*, const char*, tt__VideoEncoder2ConfigurationOptions *, const char*);
SOAP_FMAC1 tt__VideoEncoder2ConfigurationOptions * SOAP_FMAC2 soap_instantiate_tt__VideoEncoder2ConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__VideoEncoder2ConfigurationOptions * soap_new_tt__VideoEncoder2ConfigurationOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__VideoEncoder2ConfigurationOptions(soap, n, NULL, NULL, NULL);
}

inline tt__VideoEncoder2ConfigurationOptions * soap_new_req_tt__VideoEncoder2ConfigurationOptions(
	struct soap *soap,
	const std::string& Encoding,
	tt__FloatRange *QualityRange,
	const std::vector<tt__VideoResolution2 *> & ResolutionsAvailable,
	tt__IntRange *BitrateRange)
{
	tt__VideoEncoder2ConfigurationOptions *_p = soap_new_tt__VideoEncoder2ConfigurationOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__VideoEncoder2ConfigurationOptions::Encoding = Encoding;
		_p->tt__VideoEncoder2ConfigurationOptions::QualityRange = QualityRange;
		_p->tt__VideoEncoder2ConfigurationOptions::ResolutionsAvailable = ResolutionsAvailable;
		_p->tt__VideoEncoder2ConfigurationOptions::BitrateRange = BitrateRange;
	}
	return _p;
}

inline tt__VideoEncoder2ConfigurationOptions * soap_new_set_tt__VideoEncoder2ConfigurationOptions(
	struct soap *soap,
	const std::string& Encoding,
	tt__FloatRange *QualityRange,
	const std::vector<tt__VideoResolution2 *> & ResolutionsAvailable,
	tt__IntRange *BitrateRange,
	const std::vector<char *> & __any,
	std::string *GovLengthRange,
	std::string *FrameRatesSupported,
	std::string *ProfilesSupported,
	bool *ConstantBitRateSupported,
	char *__anyAttribute,
	char *__item1)
{
	tt__VideoEncoder2ConfigurationOptions *_p = soap_new_tt__VideoEncoder2ConfigurationOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__VideoEncoder2ConfigurationOptions::Encoding = Encoding;
		_p->tt__VideoEncoder2ConfigurationOptions::QualityRange = QualityRange;
		_p->tt__VideoEncoder2ConfigurationOptions::ResolutionsAvailable = ResolutionsAvailable;
		_p->tt__VideoEncoder2ConfigurationOptions::BitrateRange = BitrateRange;
		_p->tt__VideoEncoder2ConfigurationOptions::__any = __any;
		_p->tt__VideoEncoder2ConfigurationOptions::GovLengthRange = GovLengthRange;
		_p->tt__VideoEncoder2ConfigurationOptions::FrameRatesSupported = FrameRatesSupported;
		_p->tt__VideoEncoder2ConfigurationOptions::ProfilesSupported = ProfilesSupported;
		_p->tt__VideoEncoder2ConfigurationOptions::ConstantBitRateSupported = ConstantBitRateSupported;
		_p->tt__VideoEncoder2ConfigurationOptions::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__VideoEncoder2ConfigurationOptions(struct soap *soap, tt__VideoEncoder2ConfigurationOptions const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:VideoEncoder2ConfigurationOptions", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__VideoEncoder2ConfigurationOptions * SOAP_FMAC4 soap_get_tt__VideoEncoder2ConfigurationOptions(struct soap*, tt__VideoEncoder2ConfigurationOptions *, const char*, const char*);

inline int soap_read_tt__VideoEncoder2ConfigurationOptions(struct soap *soap, tt__VideoEncoder2ConfigurationOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__VideoEncoder2ConfigurationOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__VideoRateControl2_DEFINED
#define SOAP_TYPE_tt__VideoRateControl2_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__VideoRateControl2(struct soap*, const char*, int, const tt__VideoRateControl2 *, const char*);
SOAP_FMAC3 tt__VideoRateControl2 * SOAP_FMAC4 soap_in_tt__VideoRateControl2(struct soap*, const char*, tt__VideoRateControl2 *, const char*);
SOAP_FMAC1 tt__VideoRateControl2 * SOAP_FMAC2 soap_instantiate_tt__VideoRateControl2(struct soap*, int, const char*, const char*, size_t*);

inline tt__VideoRateControl2 * soap_new_tt__VideoRateControl2(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__VideoRateControl2(soap, n, NULL, NULL, NULL);
}

inline tt__VideoRateControl2 * soap_new_req_tt__VideoRateControl2(
	struct soap *soap,
	float FrameRateLimit,
	int BitrateLimit)
{
	tt__VideoRateControl2 *_p = soap_new_tt__VideoRateControl2(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__VideoRateControl2::FrameRateLimit = FrameRateLimit;
		_p->tt__VideoRateControl2::BitrateLimit = BitrateLimit;
	}
	return _p;
}

inline tt__VideoRateControl2 * soap_new_set_tt__VideoRateControl2(
	struct soap *soap,
	float FrameRateLimit,
	int BitrateLimit,
	const std::vector<char *> & __any,
	bool *ConstantBitRate,
	char *__anyAttribute,
	char *__item1)
{
	tt__VideoRateControl2 *_p = soap_new_tt__VideoRateControl2(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__VideoRateControl2::FrameRateLimit = FrameRateLimit;
		_p->tt__VideoRateControl2::BitrateLimit = BitrateLimit;
		_p->tt__VideoRateControl2::__any = __any;
		_p->tt__VideoRateControl2::ConstantBitRate = ConstantBitRate;
		_p->tt__VideoRateControl2::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__VideoRateControl2(struct soap *soap, tt__VideoRateControl2 const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:VideoRateControl2", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__VideoRateControl2 * SOAP_FMAC4 soap_get_tt__VideoRateControl2(struct soap*, tt__VideoRateControl2 *, const char*, const char*);

inline int soap_read_tt__VideoRateControl2(struct soap *soap, tt__VideoRateControl2 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__VideoRateControl2(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__VideoResolution2_DEFINED
#define SOAP_TYPE_tt__VideoResolution2_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__VideoResolution2(struct soap*, const char*, int, const tt__VideoResolution2 *, const char*);
SOAP_FMAC3 tt__VideoResolution2 * SOAP_FMAC4 soap_in_tt__VideoResolution2(struct soap*, const char*, tt__VideoResolution2 *, const char*);
SOAP_FMAC1 tt__VideoResolution2 * SOAP_FMAC2 soap_instantiate_tt__VideoResolution2(struct soap*, int, const char*, const char*, size_t*);

inline tt__VideoResolution2 * soap_new_tt__VideoResolution2(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__VideoResolution2(soap, n, NULL, NULL, NULL);
}

inline tt__VideoResolution2 * soap_new_req_tt__VideoResolution2(
	struct soap *soap,
	int Width,
	int Height)
{
	tt__VideoResolution2 *_p = soap_new_tt__VideoResolution2(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__VideoResolution2::Width = Width;
		_p->tt__VideoResolution2::Height = Height;
	}
	return _p;
}

inline tt__VideoResolution2 * soap_new_set_tt__VideoResolution2(
	struct soap *soap,
	int Width,
	int Height,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__VideoResolution2 *_p = soap_new_tt__VideoResolution2(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__VideoResolution2::Width = Width;
		_p->tt__VideoResolution2::Height = Height;
		_p->tt__VideoResolution2::__any = __any;
		_p->tt__VideoResolution2::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__VideoResolution2(struct soap *soap, tt__VideoResolution2 const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:VideoResolution2", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__VideoResolution2 * SOAP_FMAC4 soap_get_tt__VideoResolution2(struct soap*, tt__VideoResolution2 *, const char*, const char*);

inline int soap_read_tt__VideoResolution2(struct soap *soap, tt__VideoResolution2 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__VideoResolution2(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__VideoEncoder2Configuration_DEFINED
#define SOAP_TYPE_tt__VideoEncoder2Configuration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__VideoEncoder2Configuration(struct soap*, const char*, int, const tt__VideoEncoder2Configuration *, const char*);
SOAP_FMAC3 tt__VideoEncoder2Configuration * SOAP_FMAC4 soap_in_tt__VideoEncoder2Configuration(struct soap*, const char*, tt__VideoEncoder2Configuration *, const char*);
SOAP_FMAC1 tt__VideoEncoder2Configuration * SOAP_FMAC2 soap_instantiate_tt__VideoEncoder2Configuration(struct soap*, int, const char*, const char*, size_t*);

inline tt__VideoEncoder2Configuration * soap_new_tt__VideoEncoder2Configuration(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__VideoEncoder2Configuration(soap, n, NULL, NULL, NULL);
}

inline tt__VideoEncoder2Configuration * soap_new_req_tt__VideoEncoder2Configuration(
	struct soap *soap,
	const std::string& Encoding,
	tt__VideoResolution2 *Resolution,
	float Quality,
	const std::string& Name1,
	int UseCount1,
	const std::string& token1)
{
	tt__VideoEncoder2Configuration *_p = soap_new_tt__VideoEncoder2Configuration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__VideoEncoder2Configuration::Encoding = Encoding;
		_p->tt__VideoEncoder2Configuration::Resolution = Resolution;
		_p->tt__VideoEncoder2Configuration::Quality = Quality;
		_p->tt__ConfigurationEntity::Name = Name1;
		_p->tt__ConfigurationEntity::UseCount = UseCount1;
		_p->tt__ConfigurationEntity::token = token1;
	}
	return _p;
}

inline tt__VideoEncoder2Configuration * soap_new_set_tt__VideoEncoder2Configuration(
	struct soap *soap,
	const std::string& Encoding,
	tt__VideoResolution2 *Resolution,
	tt__VideoRateControl2 *RateControl,
	tt__MulticastConfiguration *Multicast,
	float Quality,
	const std::vector<char *> & __any,
	int *GovLength,
	std::string *Profile,
	char *__anyAttribute,
	const std::string& Name1,
	int UseCount1,
	const std::string& token1,
	char *__item2)
{
	tt__VideoEncoder2Configuration *_p = soap_new_tt__VideoEncoder2Configuration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__VideoEncoder2Configuration::Encoding = Encoding;
		_p->tt__VideoEncoder2Configuration::Resolution = Resolution;
		_p->tt__VideoEncoder2Configuration::RateControl = RateControl;
		_p->tt__VideoEncoder2Configuration::Multicast = Multicast;
		_p->tt__VideoEncoder2Configuration::Quality = Quality;
		_p->tt__VideoEncoder2Configuration::__any = __any;
		_p->tt__VideoEncoder2Configuration::GovLength = GovLength;
		_p->tt__VideoEncoder2Configuration::Profile = Profile;
		_p->tt__VideoEncoder2Configuration::__anyAttribute = __anyAttribute;
		_p->tt__ConfigurationEntity::Name = Name1;
		_p->tt__ConfigurationEntity::UseCount = UseCount1;
		_p->tt__ConfigurationEntity::token = token1;
		_p->xsd__anyType::__item = __item2;
	}
	return _p;
}

inline int soap_write_tt__VideoEncoder2Configuration(struct soap *soap, tt__VideoEncoder2Configuration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:VideoEncoder2Configuration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__VideoEncoder2Configuration * SOAP_FMAC4 soap_get_tt__VideoEncoder2Configuration(struct soap*, tt__VideoEncoder2Configuration *, const char*, const char*);

inline int soap_read_tt__VideoEncoder2Configuration(struct soap *soap, tt__VideoEncoder2Configuration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__VideoEncoder2Configuration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__H264Options2_DEFINED
#define SOAP_TYPE_tt__H264Options2_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__H264Options2(struct soap*, const char*, int, const tt__H264Options2 *, const char*);
SOAP_FMAC3 tt__H264Options2 * SOAP_FMAC4 soap_in_tt__H264Options2(struct soap*, const char*, tt__H264Options2 *, const char*);
SOAP_FMAC1 tt__H264Options2 * SOAP_FMAC2 soap_instantiate_tt__H264Options2(struct soap*, int, const char*, const char*, size_t*);

inline tt__H264Options2 * soap_new_tt__H264Options2(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__H264Options2(soap, n, NULL, NULL, NULL);
}

inline tt__H264Options2 * soap_new_req_tt__H264Options2(
	struct soap *soap,
	tt__IntRange *BitrateRange,
	const std::vector<tt__VideoResolution *> & ResolutionsAvailable1,
	tt__IntRange *GovLengthRange1,
	tt__IntRange *FrameRateRange1,
	tt__IntRange *EncodingIntervalRange1,
	const std::vector<enum tt__H264Profile> & H264ProfilesSupported1)
{
	tt__H264Options2 *_p = soap_new_tt__H264Options2(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__H264Options2::BitrateRange = BitrateRange;
		_p->tt__H264Options::ResolutionsAvailable = ResolutionsAvailable1;
		_p->tt__H264Options::GovLengthRange = GovLengthRange1;
		_p->tt__H264Options::FrameRateRange = FrameRateRange1;
		_p->tt__H264Options::EncodingIntervalRange = EncodingIntervalRange1;
		_p->tt__H264Options::H264ProfilesSupported = H264ProfilesSupported1;
	}
	return _p;
}

inline tt__H264Options2 * soap_new_set_tt__H264Options2(
	struct soap *soap,
	tt__IntRange *BitrateRange,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	const std::vector<tt__VideoResolution *> & ResolutionsAvailable1,
	tt__IntRange *GovLengthRange1,
	tt__IntRange *FrameRateRange1,
	tt__IntRange *EncodingIntervalRange1,
	const std::vector<enum tt__H264Profile> & H264ProfilesSupported1,
	char *__item2)
{
	tt__H264Options2 *_p = soap_new_tt__H264Options2(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__H264Options2::BitrateRange = BitrateRange;
		_p->tt__H264Options2::__any = __any;
		_p->tt__H264Options2::__anyAttribute = __anyAttribute;
		_p->tt__H264Options::ResolutionsAvailable = ResolutionsAvailable1;
		_p->tt__H264Options::GovLengthRange = GovLengthRange1;
		_p->tt__H264Options::FrameRateRange = FrameRateRange1;
		_p->tt__H264Options::EncodingIntervalRange = EncodingIntervalRange1;
		_p->tt__H264Options::H264ProfilesSupported = H264ProfilesSupported1;
		_p->xsd__anyType::__item = __item2;
	}
	return _p;
}

inline int soap_write_tt__H264Options2(struct soap *soap, tt__H264Options2 const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:H264Options2", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__H264Options2 * SOAP_FMAC4 soap_get_tt__H264Options2(struct soap*, tt__H264Options2 *, const char*, const char*);

inline int soap_read_tt__H264Options2(struct soap *soap, tt__H264Options2 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__H264Options2(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__H264Options_DEFINED
#define SOAP_TYPE_tt__H264Options_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__H264Options(struct soap*, const char*, int, const tt__H264Options *, const char*);
SOAP_FMAC3 tt__H264Options * SOAP_FMAC4 soap_in_tt__H264Options(struct soap*, const char*, tt__H264Options *, const char*);
SOAP_FMAC1 tt__H264Options * SOAP_FMAC2 soap_instantiate_tt__H264Options(struct soap*, int, const char*, const char*, size_t*);

inline tt__H264Options * soap_new_tt__H264Options(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__H264Options(soap, n, NULL, NULL, NULL);
}

inline tt__H264Options * soap_new_req_tt__H264Options(
	struct soap *soap,
	const std::vector<tt__VideoResolution *> & ResolutionsAvailable,
	tt__IntRange *GovLengthRange,
	tt__IntRange *FrameRateRange,
	tt__IntRange *EncodingIntervalRange,
	const std::vector<enum tt__H264Profile> & H264ProfilesSupported)
{
	tt__H264Options *_p = soap_new_tt__H264Options(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__H264Options::ResolutionsAvailable = ResolutionsAvailable;
		_p->tt__H264Options::GovLengthRange = GovLengthRange;
		_p->tt__H264Options::FrameRateRange = FrameRateRange;
		_p->tt__H264Options::EncodingIntervalRange = EncodingIntervalRange;
		_p->tt__H264Options::H264ProfilesSupported = H264ProfilesSupported;
	}
	return _p;
}

inline tt__H264Options * soap_new_set_tt__H264Options(
	struct soap *soap,
	const std::vector<tt__VideoResolution *> & ResolutionsAvailable,
	tt__IntRange *GovLengthRange,
	tt__IntRange *FrameRateRange,
	tt__IntRange *EncodingIntervalRange,
	const std::vector<enum tt__H264Profile> & H264ProfilesSupported,
	char *__item1)
{
	tt__H264Options *_p = soap_new_tt__H264Options(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__H264Options::ResolutionsAvailable = ResolutionsAvailable;
		_p->tt__H264Options::GovLengthRange = GovLengthRange;
		_p->tt__H264Options::FrameRateRange = FrameRateRange;
		_p->tt__H264Options::EncodingIntervalRange = EncodingIntervalRange;
		_p->tt__H264Options::H264ProfilesSupported = H264ProfilesSupported;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__H264Options(struct soap *soap, tt__H264Options const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:H264Options", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__H264Options * SOAP_FMAC4 soap_get_tt__H264Options(struct soap*, tt__H264Options *, const char*, const char*);

inline int soap_read_tt__H264Options(struct soap *soap, tt__H264Options *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__H264Options(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__Mpeg4Options2_DEFINED
#define SOAP_TYPE_tt__Mpeg4Options2_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Mpeg4Options2(struct soap*, const char*, int, const tt__Mpeg4Options2 *, const char*);
SOAP_FMAC3 tt__Mpeg4Options2 * SOAP_FMAC4 soap_in_tt__Mpeg4Options2(struct soap*, const char*, tt__Mpeg4Options2 *, const char*);
SOAP_FMAC1 tt__Mpeg4Options2 * SOAP_FMAC2 soap_instantiate_tt__Mpeg4Options2(struct soap*, int, const char*, const char*, size_t*);

inline tt__Mpeg4Options2 * soap_new_tt__Mpeg4Options2(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Mpeg4Options2(soap, n, NULL, NULL, NULL);
}

inline tt__Mpeg4Options2 * soap_new_req_tt__Mpeg4Options2(
	struct soap *soap,
	tt__IntRange *BitrateRange,
	const std::vector<tt__VideoResolution *> & ResolutionsAvailable1,
	tt__IntRange *GovLengthRange1,
	tt__IntRange *FrameRateRange1,
	tt__IntRange *EncodingIntervalRange1,
	const std::vector<enum tt__Mpeg4Profile> & Mpeg4ProfilesSupported1)
{
	tt__Mpeg4Options2 *_p = soap_new_tt__Mpeg4Options2(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Mpeg4Options2::BitrateRange = BitrateRange;
		_p->tt__Mpeg4Options::ResolutionsAvailable = ResolutionsAvailable1;
		_p->tt__Mpeg4Options::GovLengthRange = GovLengthRange1;
		_p->tt__Mpeg4Options::FrameRateRange = FrameRateRange1;
		_p->tt__Mpeg4Options::EncodingIntervalRange = EncodingIntervalRange1;
		_p->tt__Mpeg4Options::Mpeg4ProfilesSupported = Mpeg4ProfilesSupported1;
	}
	return _p;
}

inline tt__Mpeg4Options2 * soap_new_set_tt__Mpeg4Options2(
	struct soap *soap,
	tt__IntRange *BitrateRange,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	const std::vector<tt__VideoResolution *> & ResolutionsAvailable1,
	tt__IntRange *GovLengthRange1,
	tt__IntRange *FrameRateRange1,
	tt__IntRange *EncodingIntervalRange1,
	const std::vector<enum tt__Mpeg4Profile> & Mpeg4ProfilesSupported1,
	char *__item2)
{
	tt__Mpeg4Options2 *_p = soap_new_tt__Mpeg4Options2(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Mpeg4Options2::BitrateRange = BitrateRange;
		_p->tt__Mpeg4Options2::__any = __any;
		_p->tt__Mpeg4Options2::__anyAttribute = __anyAttribute;
		_p->tt__Mpeg4Options::ResolutionsAvailable = ResolutionsAvailable1;
		_p->tt__Mpeg4Options::GovLengthRange = GovLengthRange1;
		_p->tt__Mpeg4Options::FrameRateRange = FrameRateRange1;
		_p->tt__Mpeg4Options::EncodingIntervalRange = EncodingIntervalRange1;
		_p->tt__Mpeg4Options::Mpeg4ProfilesSupported = Mpeg4ProfilesSupported1;
		_p->xsd__anyType::__item = __item2;
	}
	return _p;
}

inline int soap_write_tt__Mpeg4Options2(struct soap *soap, tt__Mpeg4Options2 const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Mpeg4Options2", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__Mpeg4Options2 * SOAP_FMAC4 soap_get_tt__Mpeg4Options2(struct soap*, tt__Mpeg4Options2 *, const char*, const char*);

inline int soap_read_tt__Mpeg4Options2(struct soap *soap, tt__Mpeg4Options2 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__Mpeg4Options2(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__Mpeg4Options_DEFINED
#define SOAP_TYPE_tt__Mpeg4Options_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Mpeg4Options(struct soap*, const char*, int, const tt__Mpeg4Options *, const char*);
SOAP_FMAC3 tt__Mpeg4Options * SOAP_FMAC4 soap_in_tt__Mpeg4Options(struct soap*, const char*, tt__Mpeg4Options *, const char*);
SOAP_FMAC1 tt__Mpeg4Options * SOAP_FMAC2 soap_instantiate_tt__Mpeg4Options(struct soap*, int, const char*, const char*, size_t*);

inline tt__Mpeg4Options * soap_new_tt__Mpeg4Options(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Mpeg4Options(soap, n, NULL, NULL, NULL);
}

inline tt__Mpeg4Options * soap_new_req_tt__Mpeg4Options(
	struct soap *soap,
	const std::vector<tt__VideoResolution *> & ResolutionsAvailable,
	tt__IntRange *GovLengthRange,
	tt__IntRange *FrameRateRange,
	tt__IntRange *EncodingIntervalRange,
	const std::vector<enum tt__Mpeg4Profile> & Mpeg4ProfilesSupported)
{
	tt__Mpeg4Options *_p = soap_new_tt__Mpeg4Options(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Mpeg4Options::ResolutionsAvailable = ResolutionsAvailable;
		_p->tt__Mpeg4Options::GovLengthRange = GovLengthRange;
		_p->tt__Mpeg4Options::FrameRateRange = FrameRateRange;
		_p->tt__Mpeg4Options::EncodingIntervalRange = EncodingIntervalRange;
		_p->tt__Mpeg4Options::Mpeg4ProfilesSupported = Mpeg4ProfilesSupported;
	}
	return _p;
}

inline tt__Mpeg4Options * soap_new_set_tt__Mpeg4Options(
	struct soap *soap,
	const std::vector<tt__VideoResolution *> & ResolutionsAvailable,
	tt__IntRange *GovLengthRange,
	tt__IntRange *FrameRateRange,
	tt__IntRange *EncodingIntervalRange,
	const std::vector<enum tt__Mpeg4Profile> & Mpeg4ProfilesSupported,
	char *__item1)
{
	tt__Mpeg4Options *_p = soap_new_tt__Mpeg4Options(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Mpeg4Options::ResolutionsAvailable = ResolutionsAvailable;
		_p->tt__Mpeg4Options::GovLengthRange = GovLengthRange;
		_p->tt__Mpeg4Options::FrameRateRange = FrameRateRange;
		_p->tt__Mpeg4Options::EncodingIntervalRange = EncodingIntervalRange;
		_p->tt__Mpeg4Options::Mpeg4ProfilesSupported = Mpeg4ProfilesSupported;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__Mpeg4Options(struct soap *soap, tt__Mpeg4Options const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Mpeg4Options", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__Mpeg4Options * SOAP_FMAC4 soap_get_tt__Mpeg4Options(struct soap*, tt__Mpeg4Options *, const char*, const char*);

inline int soap_read_tt__Mpeg4Options(struct soap *soap, tt__Mpeg4Options *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__Mpeg4Options(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__JpegOptions2_DEFINED
#define SOAP_TYPE_tt__JpegOptions2_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__JpegOptions2(struct soap*, const char*, int, const tt__JpegOptions2 *, const char*);
SOAP_FMAC3 tt__JpegOptions2 * SOAP_FMAC4 soap_in_tt__JpegOptions2(struct soap*, const char*, tt__JpegOptions2 *, const char*);
SOAP_FMAC1 tt__JpegOptions2 * SOAP_FMAC2 soap_instantiate_tt__JpegOptions2(struct soap*, int, const char*, const char*, size_t*);

inline tt__JpegOptions2 * soap_new_tt__JpegOptions2(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__JpegOptions2(soap, n, NULL, NULL, NULL);
}

inline tt__JpegOptions2 * soap_new_req_tt__JpegOptions2(
	struct soap *soap,
	tt__IntRange *BitrateRange,
	const std::vector<tt__VideoResolution *> & ResolutionsAvailable1,
	tt__IntRange *FrameRateRange1,
	tt__IntRange *EncodingIntervalRange1)
{
	tt__JpegOptions2 *_p = soap_new_tt__JpegOptions2(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__JpegOptions2::BitrateRange = BitrateRange;
		_p->tt__JpegOptions::ResolutionsAvailable = ResolutionsAvailable1;
		_p->tt__JpegOptions::FrameRateRange = FrameRateRange1;
		_p->tt__JpegOptions::EncodingIntervalRange = EncodingIntervalRange1;
	}
	return _p;
}

inline tt__JpegOptions2 * soap_new_set_tt__JpegOptions2(
	struct soap *soap,
	tt__IntRange *BitrateRange,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	const std::vector<tt__VideoResolution *> & ResolutionsAvailable1,
	tt__IntRange *FrameRateRange1,
	tt__IntRange *EncodingIntervalRange1,
	char *__item2)
{
	tt__JpegOptions2 *_p = soap_new_tt__JpegOptions2(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__JpegOptions2::BitrateRange = BitrateRange;
		_p->tt__JpegOptions2::__any = __any;
		_p->tt__JpegOptions2::__anyAttribute = __anyAttribute;
		_p->tt__JpegOptions::ResolutionsAvailable = ResolutionsAvailable1;
		_p->tt__JpegOptions::FrameRateRange = FrameRateRange1;
		_p->tt__JpegOptions::EncodingIntervalRange = EncodingIntervalRange1;
		_p->xsd__anyType::__item = __item2;
	}
	return _p;
}

inline int soap_write_tt__JpegOptions2(struct soap *soap, tt__JpegOptions2 const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:JpegOptions2", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__JpegOptions2 * SOAP_FMAC4 soap_get_tt__JpegOptions2(struct soap*, tt__JpegOptions2 *, const char*, const char*);

inline int soap_read_tt__JpegOptions2(struct soap *soap, tt__JpegOptions2 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__JpegOptions2(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__JpegOptions_DEFINED
#define SOAP_TYPE_tt__JpegOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__JpegOptions(struct soap*, const char*, int, const tt__JpegOptions *, const char*);
SOAP_FMAC3 tt__JpegOptions * SOAP_FMAC4 soap_in_tt__JpegOptions(struct soap*, const char*, tt__JpegOptions *, const char*);
SOAP_FMAC1 tt__JpegOptions * SOAP_FMAC2 soap_instantiate_tt__JpegOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__JpegOptions * soap_new_tt__JpegOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__JpegOptions(soap, n, NULL, NULL, NULL);
}

inline tt__JpegOptions * soap_new_req_tt__JpegOptions(
	struct soap *soap,
	const std::vector<tt__VideoResolution *> & ResolutionsAvailable,
	tt__IntRange *FrameRateRange,
	tt__IntRange *EncodingIntervalRange)
{
	tt__JpegOptions *_p = soap_new_tt__JpegOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__JpegOptions::ResolutionsAvailable = ResolutionsAvailable;
		_p->tt__JpegOptions::FrameRateRange = FrameRateRange;
		_p->tt__JpegOptions::EncodingIntervalRange = EncodingIntervalRange;
	}
	return _p;
}

inline tt__JpegOptions * soap_new_set_tt__JpegOptions(
	struct soap *soap,
	const std::vector<tt__VideoResolution *> & ResolutionsAvailable,
	tt__IntRange *FrameRateRange,
	tt__IntRange *EncodingIntervalRange,
	char *__item1)
{
	tt__JpegOptions *_p = soap_new_tt__JpegOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__JpegOptions::ResolutionsAvailable = ResolutionsAvailable;
		_p->tt__JpegOptions::FrameRateRange = FrameRateRange;
		_p->tt__JpegOptions::EncodingIntervalRange = EncodingIntervalRange;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__JpegOptions(struct soap *soap, tt__JpegOptions const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:JpegOptions", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__JpegOptions * SOAP_FMAC4 soap_get_tt__JpegOptions(struct soap*, tt__JpegOptions *, const char*, const char*);

inline int soap_read_tt__JpegOptions(struct soap *soap, tt__JpegOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__JpegOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__VideoEncoderOptionsExtension2_DEFINED
#define SOAP_TYPE_tt__VideoEncoderOptionsExtension2_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__VideoEncoderOptionsExtension2(struct soap*, const char*, int, const tt__VideoEncoderOptionsExtension2 *, const char*);
SOAP_FMAC3 tt__VideoEncoderOptionsExtension2 * SOAP_FMAC4 soap_in_tt__VideoEncoderOptionsExtension2(struct soap*, const char*, tt__VideoEncoderOptionsExtension2 *, const char*);
SOAP_FMAC1 tt__VideoEncoderOptionsExtension2 * SOAP_FMAC2 soap_instantiate_tt__VideoEncoderOptionsExtension2(struct soap*, int, const char*, const char*, size_t*);

inline tt__VideoEncoderOptionsExtension2 * soap_new_tt__VideoEncoderOptionsExtension2(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__VideoEncoderOptionsExtension2(soap, n, NULL, NULL, NULL);
}

inline tt__VideoEncoderOptionsExtension2 * soap_new_req_tt__VideoEncoderOptionsExtension2(
	struct soap *soap)
{
	tt__VideoEncoderOptionsExtension2 *_p = soap_new_tt__VideoEncoderOptionsExtension2(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__VideoEncoderOptionsExtension2 * soap_new_set_tt__VideoEncoderOptionsExtension2(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__VideoEncoderOptionsExtension2 *_p = soap_new_tt__VideoEncoderOptionsExtension2(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__VideoEncoderOptionsExtension2::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__VideoEncoderOptionsExtension2(struct soap *soap, tt__VideoEncoderOptionsExtension2 const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:VideoEncoderOptionsExtension2", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__VideoEncoderOptionsExtension2 * SOAP_FMAC4 soap_get_tt__VideoEncoderOptionsExtension2(struct soap*, tt__VideoEncoderOptionsExtension2 *, const char*, const char*);

inline int soap_read_tt__VideoEncoderOptionsExtension2(struct soap *soap, tt__VideoEncoderOptionsExtension2 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__VideoEncoderOptionsExtension2(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__VideoEncoderOptionsExtension_DEFINED
#define SOAP_TYPE_tt__VideoEncoderOptionsExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__VideoEncoderOptionsExtension(struct soap*, const char*, int, const tt__VideoEncoderOptionsExtension *, const char*);
SOAP_FMAC3 tt__VideoEncoderOptionsExtension * SOAP_FMAC4 soap_in_tt__VideoEncoderOptionsExtension(struct soap*, const char*, tt__VideoEncoderOptionsExtension *, const char*);
SOAP_FMAC1 tt__VideoEncoderOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__VideoEncoderOptionsExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__VideoEncoderOptionsExtension * soap_new_tt__VideoEncoderOptionsExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__VideoEncoderOptionsExtension(soap, n, NULL, NULL, NULL);
}

inline tt__VideoEncoderOptionsExtension * soap_new_req_tt__VideoEncoderOptionsExtension(
	struct soap *soap)
{
	tt__VideoEncoderOptionsExtension *_p = soap_new_tt__VideoEncoderOptionsExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__VideoEncoderOptionsExtension * soap_new_set_tt__VideoEncoderOptionsExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	tt__JpegOptions2 *JPEG,
	tt__Mpeg4Options2 *MPEG4,
	tt__H264Options2 *H264,
	tt__VideoEncoderOptionsExtension2 *Extension,
	char *__item1)
{
	tt__VideoEncoderOptionsExtension *_p = soap_new_tt__VideoEncoderOptionsExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__VideoEncoderOptionsExtension::__any = __any;
		_p->tt__VideoEncoderOptionsExtension::JPEG = JPEG;
		_p->tt__VideoEncoderOptionsExtension::MPEG4 = MPEG4;
		_p->tt__VideoEncoderOptionsExtension::H264 = H264;
		_p->tt__VideoEncoderOptionsExtension::Extension = Extension;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__VideoEncoderOptionsExtension(struct soap *soap, tt__VideoEncoderOptionsExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:VideoEncoderOptionsExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__VideoEncoderOptionsExtension * SOAP_FMAC4 soap_get_tt__VideoEncoderOptionsExtension(struct soap*, tt__VideoEncoderOptionsExtension *, const char*, const char*);

inline int soap_read_tt__VideoEncoderOptionsExtension(struct soap *soap, tt__VideoEncoderOptionsExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__VideoEncoderOptionsExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__VideoEncoderConfigurationOptions_DEFINED
#define SOAP_TYPE_tt__VideoEncoderConfigurationOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__VideoEncoderConfigurationOptions(struct soap*, const char*, int, const tt__VideoEncoderConfigurationOptions *, const char*);
SOAP_FMAC3 tt__VideoEncoderConfigurationOptions * SOAP_FMAC4 soap_in_tt__VideoEncoderConfigurationOptions(struct soap*, const char*, tt__VideoEncoderConfigurationOptions *, const char*);
SOAP_FMAC1 tt__VideoEncoderConfigurationOptions * SOAP_FMAC2 soap_instantiate_tt__VideoEncoderConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__VideoEncoderConfigurationOptions * soap_new_tt__VideoEncoderConfigurationOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__VideoEncoderConfigurationOptions(soap, n, NULL, NULL, NULL);
}

inline tt__VideoEncoderConfigurationOptions * soap_new_req_tt__VideoEncoderConfigurationOptions(
	struct soap *soap,
	tt__FloatRange *QualityRange)
{
	tt__VideoEncoderConfigurationOptions *_p = soap_new_tt__VideoEncoderConfigurationOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__VideoEncoderConfigurationOptions::QualityRange = QualityRange;
	}
	return _p;
}

inline tt__VideoEncoderConfigurationOptions * soap_new_set_tt__VideoEncoderConfigurationOptions(
	struct soap *soap,
	tt__FloatRange *QualityRange,
	tt__JpegOptions *JPEG,
	tt__Mpeg4Options *MPEG4,
	tt__H264Options *H264,
	tt__VideoEncoderOptionsExtension *Extension,
	char *__anyAttribute,
	char *__item1)
{
	tt__VideoEncoderConfigurationOptions *_p = soap_new_tt__VideoEncoderConfigurationOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__VideoEncoderConfigurationOptions::QualityRange = QualityRange;
		_p->tt__VideoEncoderConfigurationOptions::JPEG = JPEG;
		_p->tt__VideoEncoderConfigurationOptions::MPEG4 = MPEG4;
		_p->tt__VideoEncoderConfigurationOptions::H264 = H264;
		_p->tt__VideoEncoderConfigurationOptions::Extension = Extension;
		_p->tt__VideoEncoderConfigurationOptions::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__VideoEncoderConfigurationOptions(struct soap *soap, tt__VideoEncoderConfigurationOptions const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:VideoEncoderConfigurationOptions", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__VideoEncoderConfigurationOptions * SOAP_FMAC4 soap_get_tt__VideoEncoderConfigurationOptions(struct soap*, tt__VideoEncoderConfigurationOptions *, const char*, const char*);

inline int soap_read_tt__VideoEncoderConfigurationOptions(struct soap *soap, tt__VideoEncoderConfigurationOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__VideoEncoderConfigurationOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__H264Configuration_DEFINED
#define SOAP_TYPE_tt__H264Configuration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__H264Configuration(struct soap*, const char*, int, const tt__H264Configuration *, const char*);
SOAP_FMAC3 tt__H264Configuration * SOAP_FMAC4 soap_in_tt__H264Configuration(struct soap*, const char*, tt__H264Configuration *, const char*);
SOAP_FMAC1 tt__H264Configuration * SOAP_FMAC2 soap_instantiate_tt__H264Configuration(struct soap*, int, const char*, const char*, size_t*);

inline tt__H264Configuration * soap_new_tt__H264Configuration(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__H264Configuration(soap, n, NULL, NULL, NULL);
}

inline tt__H264Configuration * soap_new_req_tt__H264Configuration(
	struct soap *soap,
	int GovLength,
	enum tt__H264Profile H264Profile)
{
	tt__H264Configuration *_p = soap_new_tt__H264Configuration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__H264Configuration::GovLength = GovLength;
		_p->tt__H264Configuration::H264Profile = H264Profile;
	}
	return _p;
}

inline tt__H264Configuration * soap_new_set_tt__H264Configuration(
	struct soap *soap,
	int GovLength,
	enum tt__H264Profile H264Profile,
	char *__item1)
{
	tt__H264Configuration *_p = soap_new_tt__H264Configuration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__H264Configuration::GovLength = GovLength;
		_p->tt__H264Configuration::H264Profile = H264Profile;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__H264Configuration(struct soap *soap, tt__H264Configuration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:H264Configuration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__H264Configuration * SOAP_FMAC4 soap_get_tt__H264Configuration(struct soap*, tt__H264Configuration *, const char*, const char*);

inline int soap_read_tt__H264Configuration(struct soap *soap, tt__H264Configuration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__H264Configuration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__Mpeg4Configuration_DEFINED
#define SOAP_TYPE_tt__Mpeg4Configuration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Mpeg4Configuration(struct soap*, const char*, int, const tt__Mpeg4Configuration *, const char*);
SOAP_FMAC3 tt__Mpeg4Configuration * SOAP_FMAC4 soap_in_tt__Mpeg4Configuration(struct soap*, const char*, tt__Mpeg4Configuration *, const char*);
SOAP_FMAC1 tt__Mpeg4Configuration * SOAP_FMAC2 soap_instantiate_tt__Mpeg4Configuration(struct soap*, int, const char*, const char*, size_t*);

inline tt__Mpeg4Configuration * soap_new_tt__Mpeg4Configuration(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Mpeg4Configuration(soap, n, NULL, NULL, NULL);
}

inline tt__Mpeg4Configuration * soap_new_req_tt__Mpeg4Configuration(
	struct soap *soap,
	int GovLength,
	enum tt__Mpeg4Profile Mpeg4Profile)
{
	tt__Mpeg4Configuration *_p = soap_new_tt__Mpeg4Configuration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Mpeg4Configuration::GovLength = GovLength;
		_p->tt__Mpeg4Configuration::Mpeg4Profile = Mpeg4Profile;
	}
	return _p;
}

inline tt__Mpeg4Configuration * soap_new_set_tt__Mpeg4Configuration(
	struct soap *soap,
	int GovLength,
	enum tt__Mpeg4Profile Mpeg4Profile,
	char *__item1)
{
	tt__Mpeg4Configuration *_p = soap_new_tt__Mpeg4Configuration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Mpeg4Configuration::GovLength = GovLength;
		_p->tt__Mpeg4Configuration::Mpeg4Profile = Mpeg4Profile;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__Mpeg4Configuration(struct soap *soap, tt__Mpeg4Configuration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Mpeg4Configuration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__Mpeg4Configuration * SOAP_FMAC4 soap_get_tt__Mpeg4Configuration(struct soap*, tt__Mpeg4Configuration *, const char*, const char*);

inline int soap_read_tt__Mpeg4Configuration(struct soap *soap, tt__Mpeg4Configuration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__Mpeg4Configuration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__VideoRateControl_DEFINED
#define SOAP_TYPE_tt__VideoRateControl_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__VideoRateControl(struct soap*, const char*, int, const tt__VideoRateControl *, const char*);
SOAP_FMAC3 tt__VideoRateControl * SOAP_FMAC4 soap_in_tt__VideoRateControl(struct soap*, const char*, tt__VideoRateControl *, const char*);
SOAP_FMAC1 tt__VideoRateControl * SOAP_FMAC2 soap_instantiate_tt__VideoRateControl(struct soap*, int, const char*, const char*, size_t*);

inline tt__VideoRateControl * soap_new_tt__VideoRateControl(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__VideoRateControl(soap, n, NULL, NULL, NULL);
}

inline tt__VideoRateControl * soap_new_req_tt__VideoRateControl(
	struct soap *soap,
	int FrameRateLimit,
	int EncodingInterval,
	int BitrateLimit)
{
	tt__VideoRateControl *_p = soap_new_tt__VideoRateControl(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__VideoRateControl::FrameRateLimit = FrameRateLimit;
		_p->tt__VideoRateControl::EncodingInterval = EncodingInterval;
		_p->tt__VideoRateControl::BitrateLimit = BitrateLimit;
	}
	return _p;
}

inline tt__VideoRateControl * soap_new_set_tt__VideoRateControl(
	struct soap *soap,
	int FrameRateLimit,
	int EncodingInterval,
	int BitrateLimit,
	char *__item1)
{
	tt__VideoRateControl *_p = soap_new_tt__VideoRateControl(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__VideoRateControl::FrameRateLimit = FrameRateLimit;
		_p->tt__VideoRateControl::EncodingInterval = EncodingInterval;
		_p->tt__VideoRateControl::BitrateLimit = BitrateLimit;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__VideoRateControl(struct soap *soap, tt__VideoRateControl const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:VideoRateControl", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__VideoRateControl * SOAP_FMAC4 soap_get_tt__VideoRateControl(struct soap*, tt__VideoRateControl *, const char*, const char*);

inline int soap_read_tt__VideoRateControl(struct soap *soap, tt__VideoRateControl *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__VideoRateControl(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__VideoResolution_DEFINED
#define SOAP_TYPE_tt__VideoResolution_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__VideoResolution(struct soap*, const char*, int, const tt__VideoResolution *, const char*);
SOAP_FMAC3 tt__VideoResolution * SOAP_FMAC4 soap_in_tt__VideoResolution(struct soap*, const char*, tt__VideoResolution *, const char*);
SOAP_FMAC1 tt__VideoResolution * SOAP_FMAC2 soap_instantiate_tt__VideoResolution(struct soap*, int, const char*, const char*, size_t*);

inline tt__VideoResolution * soap_new_tt__VideoResolution(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__VideoResolution(soap, n, NULL, NULL, NULL);
}

inline tt__VideoResolution * soap_new_req_tt__VideoResolution(
	struct soap *soap,
	int Width,
	int Height)
{
	tt__VideoResolution *_p = soap_new_tt__VideoResolution(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__VideoResolution::Width = Width;
		_p->tt__VideoResolution::Height = Height;
	}
	return _p;
}

inline tt__VideoResolution * soap_new_set_tt__VideoResolution(
	struct soap *soap,
	int Width,
	int Height,
	char *__item1)
{
	tt__VideoResolution *_p = soap_new_tt__VideoResolution(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__VideoResolution::Width = Width;
		_p->tt__VideoResolution::Height = Height;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__VideoResolution(struct soap *soap, tt__VideoResolution const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:VideoResolution", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__VideoResolution * SOAP_FMAC4 soap_get_tt__VideoResolution(struct soap*, tt__VideoResolution *, const char*, const char*);

inline int soap_read_tt__VideoResolution(struct soap *soap, tt__VideoResolution *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__VideoResolution(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__VideoEncoderConfiguration_DEFINED
#define SOAP_TYPE_tt__VideoEncoderConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__VideoEncoderConfiguration(struct soap*, const char*, int, const tt__VideoEncoderConfiguration *, const char*);
SOAP_FMAC3 tt__VideoEncoderConfiguration * SOAP_FMAC4 soap_in_tt__VideoEncoderConfiguration(struct soap*, const char*, tt__VideoEncoderConfiguration *, const char*);
SOAP_FMAC1 tt__VideoEncoderConfiguration * SOAP_FMAC2 soap_instantiate_tt__VideoEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__VideoEncoderConfiguration * soap_new_tt__VideoEncoderConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__VideoEncoderConfiguration(soap, n, NULL, NULL, NULL);
}

inline tt__VideoEncoderConfiguration * soap_new_req_tt__VideoEncoderConfiguration(
	struct soap *soap,
	enum tt__VideoEncoding Encoding,
	tt__VideoResolution *Resolution,
	float Quality,
	tt__MulticastConfiguration *Multicast,
	LONG64 SessionTimeout,
	const std::string& Name1,
	int UseCount1,
	const std::string& token1)
{
	tt__VideoEncoderConfiguration *_p = soap_new_tt__VideoEncoderConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__VideoEncoderConfiguration::Encoding = Encoding;
		_p->tt__VideoEncoderConfiguration::Resolution = Resolution;
		_p->tt__VideoEncoderConfiguration::Quality = Quality;
		_p->tt__VideoEncoderConfiguration::Multicast = Multicast;
		_p->tt__VideoEncoderConfiguration::SessionTimeout = SessionTimeout;
		_p->tt__ConfigurationEntity::Name = Name1;
		_p->tt__ConfigurationEntity::UseCount = UseCount1;
		_p->tt__ConfigurationEntity::token = token1;
	}
	return _p;
}

inline tt__VideoEncoderConfiguration * soap_new_set_tt__VideoEncoderConfiguration(
	struct soap *soap,
	enum tt__VideoEncoding Encoding,
	tt__VideoResolution *Resolution,
	float Quality,
	tt__VideoRateControl *RateControl,
	tt__Mpeg4Configuration *MPEG4,
	tt__H264Configuration *H264,
	tt__MulticastConfiguration *Multicast,
	LONG64 SessionTimeout,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	const std::string& Name1,
	int UseCount1,
	const std::string& token1,
	char *__item2)
{
	tt__VideoEncoderConfiguration *_p = soap_new_tt__VideoEncoderConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__VideoEncoderConfiguration::Encoding = Encoding;
		_p->tt__VideoEncoderConfiguration::Resolution = Resolution;
		_p->tt__VideoEncoderConfiguration::Quality = Quality;
		_p->tt__VideoEncoderConfiguration::RateControl = RateControl;
		_p->tt__VideoEncoderConfiguration::MPEG4 = MPEG4;
		_p->tt__VideoEncoderConfiguration::H264 = H264;
		_p->tt__VideoEncoderConfiguration::Multicast = Multicast;
		_p->tt__VideoEncoderConfiguration::SessionTimeout = SessionTimeout;
		_p->tt__VideoEncoderConfiguration::__any = __any;
		_p->tt__VideoEncoderConfiguration::__anyAttribute = __anyAttribute;
		_p->tt__ConfigurationEntity::Name = Name1;
		_p->tt__ConfigurationEntity::UseCount = UseCount1;
		_p->tt__ConfigurationEntity::token = token1;
		_p->xsd__anyType::__item = __item2;
	}
	return _p;
}

inline int soap_write_tt__VideoEncoderConfiguration(struct soap *soap, tt__VideoEncoderConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:VideoEncoderConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__VideoEncoderConfiguration * SOAP_FMAC4 soap_get_tt__VideoEncoderConfiguration(struct soap*, tt__VideoEncoderConfiguration *, const char*, const char*);

inline int soap_read_tt__VideoEncoderConfiguration(struct soap *soap, tt__VideoEncoderConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__VideoEncoderConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__RotateOptionsExtension_DEFINED
#define SOAP_TYPE_tt__RotateOptionsExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RotateOptionsExtension(struct soap*, const char*, int, const tt__RotateOptionsExtension *, const char*);
SOAP_FMAC3 tt__RotateOptionsExtension * SOAP_FMAC4 soap_in_tt__RotateOptionsExtension(struct soap*, const char*, tt__RotateOptionsExtension *, const char*);
SOAP_FMAC1 tt__RotateOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__RotateOptionsExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__RotateOptionsExtension * soap_new_tt__RotateOptionsExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__RotateOptionsExtension(soap, n, NULL, NULL, NULL);
}

inline tt__RotateOptionsExtension * soap_new_req_tt__RotateOptionsExtension(
	struct soap *soap)
{
	tt__RotateOptionsExtension *_p = soap_new_tt__RotateOptionsExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__RotateOptionsExtension * soap_new_set_tt__RotateOptionsExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__RotateOptionsExtension *_p = soap_new_tt__RotateOptionsExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__RotateOptionsExtension::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__RotateOptionsExtension(struct soap *soap, tt__RotateOptionsExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:RotateOptionsExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__RotateOptionsExtension * SOAP_FMAC4 soap_get_tt__RotateOptionsExtension(struct soap*, tt__RotateOptionsExtension *, const char*, const char*);

inline int soap_read_tt__RotateOptionsExtension(struct soap *soap, tt__RotateOptionsExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__RotateOptionsExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__RotateOptions_DEFINED
#define SOAP_TYPE_tt__RotateOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RotateOptions(struct soap*, const char*, int, const tt__RotateOptions *, const char*);
SOAP_FMAC3 tt__RotateOptions * SOAP_FMAC4 soap_in_tt__RotateOptions(struct soap*, const char*, tt__RotateOptions *, const char*);
SOAP_FMAC1 tt__RotateOptions * SOAP_FMAC2 soap_instantiate_tt__RotateOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__RotateOptions * soap_new_tt__RotateOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__RotateOptions(soap, n, NULL, NULL, NULL);
}

inline tt__RotateOptions * soap_new_req_tt__RotateOptions(
	struct soap *soap,
	const std::vector<enum tt__RotateMode> & Mode)
{
	tt__RotateOptions *_p = soap_new_tt__RotateOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__RotateOptions::Mode = Mode;
	}
	return _p;
}

inline tt__RotateOptions * soap_new_set_tt__RotateOptions(
	struct soap *soap,
	const std::vector<enum tt__RotateMode> & Mode,
	tt__IntList *DegreeList,
	tt__RotateOptionsExtension *Extension,
	char *__anyAttribute,
	char *__item1)
{
	tt__RotateOptions *_p = soap_new_tt__RotateOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__RotateOptions::Mode = Mode;
		_p->tt__RotateOptions::DegreeList = DegreeList;
		_p->tt__RotateOptions::Extension = Extension;
		_p->tt__RotateOptions::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__RotateOptions(struct soap *soap, tt__RotateOptions const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:RotateOptions", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__RotateOptions * SOAP_FMAC4 soap_get_tt__RotateOptions(struct soap*, tt__RotateOptions *, const char*, const char*);

inline int soap_read_tt__RotateOptions(struct soap *soap, tt__RotateOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__RotateOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__VideoSourceConfigurationOptionsExtension2_DEFINED
#define SOAP_TYPE_tt__VideoSourceConfigurationOptionsExtension2_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__VideoSourceConfigurationOptionsExtension2(struct soap*, const char*, int, const tt__VideoSourceConfigurationOptionsExtension2 *, const char*);
SOAP_FMAC3 tt__VideoSourceConfigurationOptionsExtension2 * SOAP_FMAC4 soap_in_tt__VideoSourceConfigurationOptionsExtension2(struct soap*, const char*, tt__VideoSourceConfigurationOptionsExtension2 *, const char*);
SOAP_FMAC1 tt__VideoSourceConfigurationOptionsExtension2 * SOAP_FMAC2 soap_instantiate_tt__VideoSourceConfigurationOptionsExtension2(struct soap*, int, const char*, const char*, size_t*);

inline tt__VideoSourceConfigurationOptionsExtension2 * soap_new_tt__VideoSourceConfigurationOptionsExtension2(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__VideoSourceConfigurationOptionsExtension2(soap, n, NULL, NULL, NULL);
}

inline tt__VideoSourceConfigurationOptionsExtension2 * soap_new_req_tt__VideoSourceConfigurationOptionsExtension2(
	struct soap *soap)
{
	tt__VideoSourceConfigurationOptionsExtension2 *_p = soap_new_tt__VideoSourceConfigurationOptionsExtension2(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__VideoSourceConfigurationOptionsExtension2 * soap_new_set_tt__VideoSourceConfigurationOptionsExtension2(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__VideoSourceConfigurationOptionsExtension2 *_p = soap_new_tt__VideoSourceConfigurationOptionsExtension2(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__VideoSourceConfigurationOptionsExtension2::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__VideoSourceConfigurationOptionsExtension2(struct soap *soap, tt__VideoSourceConfigurationOptionsExtension2 const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:VideoSourceConfigurationOptionsExtension2", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__VideoSourceConfigurationOptionsExtension2 * SOAP_FMAC4 soap_get_tt__VideoSourceConfigurationOptionsExtension2(struct soap*, tt__VideoSourceConfigurationOptionsExtension2 *, const char*, const char*);

inline int soap_read_tt__VideoSourceConfigurationOptionsExtension2(struct soap *soap, tt__VideoSourceConfigurationOptionsExtension2 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__VideoSourceConfigurationOptionsExtension2(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__VideoSourceConfigurationOptionsExtension_DEFINED
#define SOAP_TYPE_tt__VideoSourceConfigurationOptionsExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__VideoSourceConfigurationOptionsExtension(struct soap*, const char*, int, const tt__VideoSourceConfigurationOptionsExtension *, const char*);
SOAP_FMAC3 tt__VideoSourceConfigurationOptionsExtension * SOAP_FMAC4 soap_in_tt__VideoSourceConfigurationOptionsExtension(struct soap*, const char*, tt__VideoSourceConfigurationOptionsExtension *, const char*);
SOAP_FMAC1 tt__VideoSourceConfigurationOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__VideoSourceConfigurationOptionsExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__VideoSourceConfigurationOptionsExtension * soap_new_tt__VideoSourceConfigurationOptionsExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__VideoSourceConfigurationOptionsExtension(soap, n, NULL, NULL, NULL);
}

inline tt__VideoSourceConfigurationOptionsExtension * soap_new_req_tt__VideoSourceConfigurationOptionsExtension(
	struct soap *soap)
{
	tt__VideoSourceConfigurationOptionsExtension *_p = soap_new_tt__VideoSourceConfigurationOptionsExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__VideoSourceConfigurationOptionsExtension * soap_new_set_tt__VideoSourceConfigurationOptionsExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	tt__RotateOptions *Rotate,
	tt__VideoSourceConfigurationOptionsExtension2 *Extension,
	char *__item1)
{
	tt__VideoSourceConfigurationOptionsExtension *_p = soap_new_tt__VideoSourceConfigurationOptionsExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__VideoSourceConfigurationOptionsExtension::__any = __any;
		_p->tt__VideoSourceConfigurationOptionsExtension::Rotate = Rotate;
		_p->tt__VideoSourceConfigurationOptionsExtension::Extension = Extension;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__VideoSourceConfigurationOptionsExtension(struct soap *soap, tt__VideoSourceConfigurationOptionsExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:VideoSourceConfigurationOptionsExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__VideoSourceConfigurationOptionsExtension * SOAP_FMAC4 soap_get_tt__VideoSourceConfigurationOptionsExtension(struct soap*, tt__VideoSourceConfigurationOptionsExtension *, const char*, const char*);

inline int soap_read_tt__VideoSourceConfigurationOptionsExtension(struct soap *soap, tt__VideoSourceConfigurationOptionsExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__VideoSourceConfigurationOptionsExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__VideoSourceConfigurationOptions_DEFINED
#define SOAP_TYPE_tt__VideoSourceConfigurationOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__VideoSourceConfigurationOptions(struct soap*, const char*, int, const tt__VideoSourceConfigurationOptions *, const char*);
SOAP_FMAC3 tt__VideoSourceConfigurationOptions * SOAP_FMAC4 soap_in_tt__VideoSourceConfigurationOptions(struct soap*, const char*, tt__VideoSourceConfigurationOptions *, const char*);
SOAP_FMAC1 tt__VideoSourceConfigurationOptions * SOAP_FMAC2 soap_instantiate_tt__VideoSourceConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__VideoSourceConfigurationOptions * soap_new_tt__VideoSourceConfigurationOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__VideoSourceConfigurationOptions(soap, n, NULL, NULL, NULL);
}

inline tt__VideoSourceConfigurationOptions * soap_new_req_tt__VideoSourceConfigurationOptions(
	struct soap *soap,
	tt__IntRectangleRange *BoundsRange,
	const std::vector<std::string> & VideoSourceTokensAvailable)
{
	tt__VideoSourceConfigurationOptions *_p = soap_new_tt__VideoSourceConfigurationOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__VideoSourceConfigurationOptions::BoundsRange = BoundsRange;
		_p->tt__VideoSourceConfigurationOptions::VideoSourceTokensAvailable = VideoSourceTokensAvailable;
	}
	return _p;
}

inline tt__VideoSourceConfigurationOptions * soap_new_set_tt__VideoSourceConfigurationOptions(
	struct soap *soap,
	tt__IntRectangleRange *BoundsRange,
	const std::vector<std::string> & VideoSourceTokensAvailable,
	tt__VideoSourceConfigurationOptionsExtension *Extension,
	char *__anyAttribute,
	char *__item1)
{
	tt__VideoSourceConfigurationOptions *_p = soap_new_tt__VideoSourceConfigurationOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__VideoSourceConfigurationOptions::BoundsRange = BoundsRange;
		_p->tt__VideoSourceConfigurationOptions::VideoSourceTokensAvailable = VideoSourceTokensAvailable;
		_p->tt__VideoSourceConfigurationOptions::Extension = Extension;
		_p->tt__VideoSourceConfigurationOptions::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__VideoSourceConfigurationOptions(struct soap *soap, tt__VideoSourceConfigurationOptions const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:VideoSourceConfigurationOptions", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__VideoSourceConfigurationOptions * SOAP_FMAC4 soap_get_tt__VideoSourceConfigurationOptions(struct soap*, tt__VideoSourceConfigurationOptions *, const char*, const char*);

inline int soap_read_tt__VideoSourceConfigurationOptions(struct soap *soap, tt__VideoSourceConfigurationOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__VideoSourceConfigurationOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__LensDescription_DEFINED
#define SOAP_TYPE_tt__LensDescription_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__LensDescription(struct soap*, const char*, int, const tt__LensDescription *, const char*);
SOAP_FMAC3 tt__LensDescription * SOAP_FMAC4 soap_in_tt__LensDescription(struct soap*, const char*, tt__LensDescription *, const char*);
SOAP_FMAC1 tt__LensDescription * SOAP_FMAC2 soap_instantiate_tt__LensDescription(struct soap*, int, const char*, const char*, size_t*);

inline tt__LensDescription * soap_new_tt__LensDescription(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__LensDescription(soap, n, NULL, NULL, NULL);
}

inline tt__LensDescription * soap_new_req_tt__LensDescription(
	struct soap *soap,
	tt__LensOffset *Offset,
	const std::vector<tt__LensProjection *> & Projection,
	float XFactor)
{
	tt__LensDescription *_p = soap_new_tt__LensDescription(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__LensDescription::Offset = Offset;
		_p->tt__LensDescription::Projection = Projection;
		_p->tt__LensDescription::XFactor = XFactor;
	}
	return _p;
}

inline tt__LensDescription * soap_new_set_tt__LensDescription(
	struct soap *soap,
	tt__LensOffset *Offset,
	const std::vector<tt__LensProjection *> & Projection,
	float XFactor,
	const std::vector<char *> & __any,
	float *FocalLength,
	char *__anyAttribute,
	char *__item1)
{
	tt__LensDescription *_p = soap_new_tt__LensDescription(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__LensDescription::Offset = Offset;
		_p->tt__LensDescription::Projection = Projection;
		_p->tt__LensDescription::XFactor = XFactor;
		_p->tt__LensDescription::__any = __any;
		_p->tt__LensDescription::FocalLength = FocalLength;
		_p->tt__LensDescription::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__LensDescription(struct soap *soap, tt__LensDescription const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:LensDescription", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__LensDescription * SOAP_FMAC4 soap_get_tt__LensDescription(struct soap*, tt__LensDescription *, const char*, const char*);

inline int soap_read_tt__LensDescription(struct soap *soap, tt__LensDescription *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__LensDescription(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__LensOffset_DEFINED
#define SOAP_TYPE_tt__LensOffset_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__LensOffset(struct soap*, const char*, int, const tt__LensOffset *, const char*);
SOAP_FMAC3 tt__LensOffset * SOAP_FMAC4 soap_in_tt__LensOffset(struct soap*, const char*, tt__LensOffset *, const char*);
SOAP_FMAC1 tt__LensOffset * SOAP_FMAC2 soap_instantiate_tt__LensOffset(struct soap*, int, const char*, const char*, size_t*);

inline tt__LensOffset * soap_new_tt__LensOffset(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__LensOffset(soap, n, NULL, NULL, NULL);
}

inline tt__LensOffset * soap_new_req_tt__LensOffset(
	struct soap *soap)
{
	tt__LensOffset *_p = soap_new_tt__LensOffset(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__LensOffset * soap_new_set_tt__LensOffset(
	struct soap *soap,
	float *x,
	float *y,
	char *__anyAttribute,
	char *__item1)
{
	tt__LensOffset *_p = soap_new_tt__LensOffset(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__LensOffset::x = x;
		_p->tt__LensOffset::y = y;
		_p->tt__LensOffset::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__LensOffset(struct soap *soap, tt__LensOffset const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:LensOffset", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__LensOffset * SOAP_FMAC4 soap_get_tt__LensOffset(struct soap*, tt__LensOffset *, const char*, const char*);

inline int soap_read_tt__LensOffset(struct soap *soap, tt__LensOffset *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__LensOffset(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__LensProjection_DEFINED
#define SOAP_TYPE_tt__LensProjection_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__LensProjection(struct soap*, const char*, int, const tt__LensProjection *, const char*);
SOAP_FMAC3 tt__LensProjection * SOAP_FMAC4 soap_in_tt__LensProjection(struct soap*, const char*, tt__LensProjection *, const char*);
SOAP_FMAC1 tt__LensProjection * SOAP_FMAC2 soap_instantiate_tt__LensProjection(struct soap*, int, const char*, const char*, size_t*);

inline tt__LensProjection * soap_new_tt__LensProjection(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__LensProjection(soap, n, NULL, NULL, NULL);
}

inline tt__LensProjection * soap_new_req_tt__LensProjection(
	struct soap *soap,
	float Angle,
	float Radius)
{
	tt__LensProjection *_p = soap_new_tt__LensProjection(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__LensProjection::Angle = Angle;
		_p->tt__LensProjection::Radius = Radius;
	}
	return _p;
}

inline tt__LensProjection * soap_new_set_tt__LensProjection(
	struct soap *soap,
	float Angle,
	float Radius,
	float *Transmittance,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__LensProjection *_p = soap_new_tt__LensProjection(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__LensProjection::Angle = Angle;
		_p->tt__LensProjection::Radius = Radius;
		_p->tt__LensProjection::Transmittance = Transmittance;
		_p->tt__LensProjection::__any = __any;
		_p->tt__LensProjection::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__LensProjection(struct soap *soap, tt__LensProjection const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:LensProjection", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__LensProjection * SOAP_FMAC4 soap_get_tt__LensProjection(struct soap*, tt__LensProjection *, const char*, const char*);

inline int soap_read_tt__LensProjection(struct soap *soap, tt__LensProjection *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__LensProjection(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__RotateExtension_DEFINED
#define SOAP_TYPE_tt__RotateExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RotateExtension(struct soap*, const char*, int, const tt__RotateExtension *, const char*);
SOAP_FMAC3 tt__RotateExtension * SOAP_FMAC4 soap_in_tt__RotateExtension(struct soap*, const char*, tt__RotateExtension *, const char*);
SOAP_FMAC1 tt__RotateExtension * SOAP_FMAC2 soap_instantiate_tt__RotateExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__RotateExtension * soap_new_tt__RotateExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__RotateExtension(soap, n, NULL, NULL, NULL);
}

inline tt__RotateExtension * soap_new_req_tt__RotateExtension(
	struct soap *soap)
{
	tt__RotateExtension *_p = soap_new_tt__RotateExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__RotateExtension * soap_new_set_tt__RotateExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__RotateExtension *_p = soap_new_tt__RotateExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__RotateExtension::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__RotateExtension(struct soap *soap, tt__RotateExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:RotateExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__RotateExtension * SOAP_FMAC4 soap_get_tt__RotateExtension(struct soap*, tt__RotateExtension *, const char*, const char*);

inline int soap_read_tt__RotateExtension(struct soap *soap, tt__RotateExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__RotateExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__Rotate_DEFINED
#define SOAP_TYPE_tt__Rotate_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Rotate(struct soap*, const char*, int, const tt__Rotate *, const char*);
SOAP_FMAC3 tt__Rotate * SOAP_FMAC4 soap_in_tt__Rotate(struct soap*, const char*, tt__Rotate *, const char*);
SOAP_FMAC1 tt__Rotate * SOAP_FMAC2 soap_instantiate_tt__Rotate(struct soap*, int, const char*, const char*, size_t*);

inline tt__Rotate * soap_new_tt__Rotate(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Rotate(soap, n, NULL, NULL, NULL);
}

inline tt__Rotate * soap_new_req_tt__Rotate(
	struct soap *soap,
	enum tt__RotateMode Mode)
{
	tt__Rotate *_p = soap_new_tt__Rotate(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Rotate::Mode = Mode;
	}
	return _p;
}

inline tt__Rotate * soap_new_set_tt__Rotate(
	struct soap *soap,
	enum tt__RotateMode Mode,
	int *Degree,
	tt__RotateExtension *Extension,
	char *__anyAttribute,
	char *__item1)
{
	tt__Rotate *_p = soap_new_tt__Rotate(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Rotate::Mode = Mode;
		_p->tt__Rotate::Degree = Degree;
		_p->tt__Rotate::Extension = Extension;
		_p->tt__Rotate::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__Rotate(struct soap *soap, tt__Rotate const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Rotate", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__Rotate * SOAP_FMAC4 soap_get_tt__Rotate(struct soap*, tt__Rotate *, const char*, const char*);

inline int soap_read_tt__Rotate(struct soap *soap, tt__Rotate *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__Rotate(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__VideoSourceConfigurationExtension2_DEFINED
#define SOAP_TYPE_tt__VideoSourceConfigurationExtension2_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__VideoSourceConfigurationExtension2(struct soap*, const char*, int, const tt__VideoSourceConfigurationExtension2 *, const char*);
SOAP_FMAC3 tt__VideoSourceConfigurationExtension2 * SOAP_FMAC4 soap_in_tt__VideoSourceConfigurationExtension2(struct soap*, const char*, tt__VideoSourceConfigurationExtension2 *, const char*);
SOAP_FMAC1 tt__VideoSourceConfigurationExtension2 * SOAP_FMAC2 soap_instantiate_tt__VideoSourceConfigurationExtension2(struct soap*, int, const char*, const char*, size_t*);

inline tt__VideoSourceConfigurationExtension2 * soap_new_tt__VideoSourceConfigurationExtension2(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__VideoSourceConfigurationExtension2(soap, n, NULL, NULL, NULL);
}

inline tt__VideoSourceConfigurationExtension2 * soap_new_req_tt__VideoSourceConfigurationExtension2(
	struct soap *soap)
{
	tt__VideoSourceConfigurationExtension2 *_p = soap_new_tt__VideoSourceConfigurationExtension2(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__VideoSourceConfigurationExtension2 * soap_new_set_tt__VideoSourceConfigurationExtension2(
	struct soap *soap,
	const std::vector<tt__LensDescription *> & LensDescription,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__VideoSourceConfigurationExtension2 *_p = soap_new_tt__VideoSourceConfigurationExtension2(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__VideoSourceConfigurationExtension2::LensDescription = LensDescription;
		_p->tt__VideoSourceConfigurationExtension2::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__VideoSourceConfigurationExtension2(struct soap *soap, tt__VideoSourceConfigurationExtension2 const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:VideoSourceConfigurationExtension2", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__VideoSourceConfigurationExtension2 * SOAP_FMAC4 soap_get_tt__VideoSourceConfigurationExtension2(struct soap*, tt__VideoSourceConfigurationExtension2 *, const char*, const char*);

inline int soap_read_tt__VideoSourceConfigurationExtension2(struct soap *soap, tt__VideoSourceConfigurationExtension2 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__VideoSourceConfigurationExtension2(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__VideoSourceConfigurationExtension_DEFINED
#define SOAP_TYPE_tt__VideoSourceConfigurationExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__VideoSourceConfigurationExtension(struct soap*, const char*, int, const tt__VideoSourceConfigurationExtension *, const char*);
SOAP_FMAC3 tt__VideoSourceConfigurationExtension * SOAP_FMAC4 soap_in_tt__VideoSourceConfigurationExtension(struct soap*, const char*, tt__VideoSourceConfigurationExtension *, const char*);
SOAP_FMAC1 tt__VideoSourceConfigurationExtension * SOAP_FMAC2 soap_instantiate_tt__VideoSourceConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__VideoSourceConfigurationExtension * soap_new_tt__VideoSourceConfigurationExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__VideoSourceConfigurationExtension(soap, n, NULL, NULL, NULL);
}

inline tt__VideoSourceConfigurationExtension * soap_new_req_tt__VideoSourceConfigurationExtension(
	struct soap *soap)
{
	tt__VideoSourceConfigurationExtension *_p = soap_new_tt__VideoSourceConfigurationExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__VideoSourceConfigurationExtension * soap_new_set_tt__VideoSourceConfigurationExtension(
	struct soap *soap,
	tt__Rotate *Rotate,
	tt__VideoSourceConfigurationExtension2 *Extension,
	char *__item1)
{
	tt__VideoSourceConfigurationExtension *_p = soap_new_tt__VideoSourceConfigurationExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__VideoSourceConfigurationExtension::Rotate = Rotate;
		_p->tt__VideoSourceConfigurationExtension::Extension = Extension;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__VideoSourceConfigurationExtension(struct soap *soap, tt__VideoSourceConfigurationExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:VideoSourceConfigurationExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__VideoSourceConfigurationExtension * SOAP_FMAC4 soap_get_tt__VideoSourceConfigurationExtension(struct soap*, tt__VideoSourceConfigurationExtension *, const char*, const char*);

inline int soap_read_tt__VideoSourceConfigurationExtension(struct soap *soap, tt__VideoSourceConfigurationExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__VideoSourceConfigurationExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__VideoSourceConfiguration_DEFINED
#define SOAP_TYPE_tt__VideoSourceConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__VideoSourceConfiguration(struct soap*, const char*, int, const tt__VideoSourceConfiguration *, const char*);
SOAP_FMAC3 tt__VideoSourceConfiguration * SOAP_FMAC4 soap_in_tt__VideoSourceConfiguration(struct soap*, const char*, tt__VideoSourceConfiguration *, const char*);
SOAP_FMAC1 tt__VideoSourceConfiguration * SOAP_FMAC2 soap_instantiate_tt__VideoSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__VideoSourceConfiguration * soap_new_tt__VideoSourceConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__VideoSourceConfiguration(soap, n, NULL, NULL, NULL);
}

inline tt__VideoSourceConfiguration * soap_new_req_tt__VideoSourceConfiguration(
	struct soap *soap,
	const std::string& SourceToken,
	tt__IntRectangle *Bounds,
	const std::string& Name1,
	int UseCount1,
	const std::string& token1)
{
	tt__VideoSourceConfiguration *_p = soap_new_tt__VideoSourceConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__VideoSourceConfiguration::SourceToken = SourceToken;
		_p->tt__VideoSourceConfiguration::Bounds = Bounds;
		_p->tt__ConfigurationEntity::Name = Name1;
		_p->tt__ConfigurationEntity::UseCount = UseCount1;
		_p->tt__ConfigurationEntity::token = token1;
	}
	return _p;
}

inline tt__VideoSourceConfiguration * soap_new_set_tt__VideoSourceConfiguration(
	struct soap *soap,
	const std::string& SourceToken,
	tt__IntRectangle *Bounds,
	const std::vector<char *> & __any,
	tt__VideoSourceConfigurationExtension *Extension,
	char *__anyAttribute,
	const std::string& Name1,
	int UseCount1,
	const std::string& token1,
	char *__item2)
{
	tt__VideoSourceConfiguration *_p = soap_new_tt__VideoSourceConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__VideoSourceConfiguration::SourceToken = SourceToken;
		_p->tt__VideoSourceConfiguration::Bounds = Bounds;
		_p->tt__VideoSourceConfiguration::__any = __any;
		_p->tt__VideoSourceConfiguration::Extension = Extension;
		_p->tt__VideoSourceConfiguration::__anyAttribute = __anyAttribute;
		_p->tt__ConfigurationEntity::Name = Name1;
		_p->tt__ConfigurationEntity::UseCount = UseCount1;
		_p->tt__ConfigurationEntity::token = token1;
		_p->xsd__anyType::__item = __item2;
	}
	return _p;
}

inline int soap_write_tt__VideoSourceConfiguration(struct soap *soap, tt__VideoSourceConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:VideoSourceConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__VideoSourceConfiguration * SOAP_FMAC4 soap_get_tt__VideoSourceConfiguration(struct soap*, tt__VideoSourceConfiguration *, const char*, const char*);

inline int soap_read_tt__VideoSourceConfiguration(struct soap *soap, tt__VideoSourceConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__VideoSourceConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__ConfigurationEntity_DEFINED
#define SOAP_TYPE_tt__ConfigurationEntity_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ConfigurationEntity(struct soap*, const char*, int, const tt__ConfigurationEntity *, const char*);
SOAP_FMAC3 tt__ConfigurationEntity * SOAP_FMAC4 soap_in_tt__ConfigurationEntity(struct soap*, const char*, tt__ConfigurationEntity *, const char*);
SOAP_FMAC1 tt__ConfigurationEntity * SOAP_FMAC2 soap_instantiate_tt__ConfigurationEntity(struct soap*, int, const char*, const char*, size_t*);

inline tt__ConfigurationEntity * soap_new_tt__ConfigurationEntity(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ConfigurationEntity(soap, n, NULL, NULL, NULL);
}

inline tt__ConfigurationEntity * soap_new_req_tt__ConfigurationEntity(
	struct soap *soap,
	const std::string& Name,
	int UseCount,
	const std::string& token)
{
	tt__ConfigurationEntity *_p = soap_new_tt__ConfigurationEntity(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ConfigurationEntity::Name = Name;
		_p->tt__ConfigurationEntity::UseCount = UseCount;
		_p->tt__ConfigurationEntity::token = token;
	}
	return _p;
}

inline tt__ConfigurationEntity * soap_new_set_tt__ConfigurationEntity(
	struct soap *soap,
	const std::string& Name,
	int UseCount,
	const std::string& token,
	char *__item1)
{
	tt__ConfigurationEntity *_p = soap_new_tt__ConfigurationEntity(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ConfigurationEntity::Name = Name;
		_p->tt__ConfigurationEntity::UseCount = UseCount;
		_p->tt__ConfigurationEntity::token = token;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__ConfigurationEntity(struct soap *soap, tt__ConfigurationEntity const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ConfigurationEntity", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__ConfigurationEntity * SOAP_FMAC4 soap_get_tt__ConfigurationEntity(struct soap*, tt__ConfigurationEntity *, const char*, const char*);

inline int soap_read_tt__ConfigurationEntity(struct soap *soap, tt__ConfigurationEntity *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__ConfigurationEntity(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__ProfileExtension2_DEFINED
#define SOAP_TYPE_tt__ProfileExtension2_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ProfileExtension2(struct soap*, const char*, int, const tt__ProfileExtension2 *, const char*);
SOAP_FMAC3 tt__ProfileExtension2 * SOAP_FMAC4 soap_in_tt__ProfileExtension2(struct soap*, const char*, tt__ProfileExtension2 *, const char*);
SOAP_FMAC1 tt__ProfileExtension2 * SOAP_FMAC2 soap_instantiate_tt__ProfileExtension2(struct soap*, int, const char*, const char*, size_t*);

inline tt__ProfileExtension2 * soap_new_tt__ProfileExtension2(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ProfileExtension2(soap, n, NULL, NULL, NULL);
}

inline tt__ProfileExtension2 * soap_new_req_tt__ProfileExtension2(
	struct soap *soap)
{
	tt__ProfileExtension2 *_p = soap_new_tt__ProfileExtension2(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__ProfileExtension2 * soap_new_set_tt__ProfileExtension2(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__ProfileExtension2 *_p = soap_new_tt__ProfileExtension2(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ProfileExtension2::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__ProfileExtension2(struct soap *soap, tt__ProfileExtension2 const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ProfileExtension2", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__ProfileExtension2 * SOAP_FMAC4 soap_get_tt__ProfileExtension2(struct soap*, tt__ProfileExtension2 *, const char*, const char*);

inline int soap_read_tt__ProfileExtension2(struct soap *soap, tt__ProfileExtension2 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__ProfileExtension2(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__ProfileExtension_DEFINED
#define SOAP_TYPE_tt__ProfileExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ProfileExtension(struct soap*, const char*, int, const tt__ProfileExtension *, const char*);
SOAP_FMAC3 tt__ProfileExtension * SOAP_FMAC4 soap_in_tt__ProfileExtension(struct soap*, const char*, tt__ProfileExtension *, const char*);
SOAP_FMAC1 tt__ProfileExtension * SOAP_FMAC2 soap_instantiate_tt__ProfileExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__ProfileExtension * soap_new_tt__ProfileExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ProfileExtension(soap, n, NULL, NULL, NULL);
}

inline tt__ProfileExtension * soap_new_req_tt__ProfileExtension(
	struct soap *soap)
{
	tt__ProfileExtension *_p = soap_new_tt__ProfileExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__ProfileExtension * soap_new_set_tt__ProfileExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	tt__AudioOutputConfiguration *AudioOutputConfiguration,
	tt__AudioDecoderConfiguration *AudioDecoderConfiguration,
	tt__ProfileExtension2 *Extension,
	char *__anyAttribute,
	char *__item1)
{
	tt__ProfileExtension *_p = soap_new_tt__ProfileExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ProfileExtension::__any = __any;
		_p->tt__ProfileExtension::AudioOutputConfiguration = AudioOutputConfiguration;
		_p->tt__ProfileExtension::AudioDecoderConfiguration = AudioDecoderConfiguration;
		_p->tt__ProfileExtension::Extension = Extension;
		_p->tt__ProfileExtension::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__ProfileExtension(struct soap *soap, tt__ProfileExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ProfileExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__ProfileExtension * SOAP_FMAC4 soap_get_tt__ProfileExtension(struct soap*, tt__ProfileExtension *, const char*, const char*);

inline int soap_read_tt__ProfileExtension(struct soap *soap, tt__ProfileExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__ProfileExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__Profile_DEFINED
#define SOAP_TYPE_tt__Profile_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Profile(struct soap*, const char*, int, const tt__Profile *, const char*);
SOAP_FMAC3 tt__Profile * SOAP_FMAC4 soap_in_tt__Profile(struct soap*, const char*, tt__Profile *, const char*);
SOAP_FMAC1 tt__Profile * SOAP_FMAC2 soap_instantiate_tt__Profile(struct soap*, int, const char*, const char*, size_t*);

inline tt__Profile * soap_new_tt__Profile(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Profile(soap, n, NULL, NULL, NULL);
}

inline tt__Profile * soap_new_req_tt__Profile(
	struct soap *soap,
	const std::string& Name,
	const std::string& token)
{
	tt__Profile *_p = soap_new_tt__Profile(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Profile::Name = Name;
		_p->tt__Profile::token = token;
	}
	return _p;
}

inline tt__Profile * soap_new_set_tt__Profile(
	struct soap *soap,
	const std::string& Name,
	tt__VideoSourceConfiguration *VideoSourceConfiguration,
	tt__AudioSourceConfiguration *AudioSourceConfiguration,
	tt__VideoEncoderConfiguration *VideoEncoderConfiguration,
	tt__AudioEncoderConfiguration *AudioEncoderConfiguration,
	tt__VideoAnalyticsConfiguration *VideoAnalyticsConfiguration,
	tt__PTZConfiguration *PTZConfiguration,
	tt__MetadataConfiguration *MetadataConfiguration,
	tt__ProfileExtension *Extension,
	const std::string& token,
	bool *fixed,
	char *__anyAttribute,
	char *__item1)
{
	tt__Profile *_p = soap_new_tt__Profile(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Profile::Name = Name;
		_p->tt__Profile::VideoSourceConfiguration = VideoSourceConfiguration;
		_p->tt__Profile::AudioSourceConfiguration = AudioSourceConfiguration;
		_p->tt__Profile::VideoEncoderConfiguration = VideoEncoderConfiguration;
		_p->tt__Profile::AudioEncoderConfiguration = AudioEncoderConfiguration;
		_p->tt__Profile::VideoAnalyticsConfiguration = VideoAnalyticsConfiguration;
		_p->tt__Profile::PTZConfiguration = PTZConfiguration;
		_p->tt__Profile::MetadataConfiguration = MetadataConfiguration;
		_p->tt__Profile::Extension = Extension;
		_p->tt__Profile::token = token;
		_p->tt__Profile::fixed = fixed;
		_p->tt__Profile::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__Profile(struct soap *soap, tt__Profile const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Profile", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__Profile * SOAP_FMAC4 soap_get_tt__Profile(struct soap*, tt__Profile *, const char*, const char*);

inline int soap_read_tt__Profile(struct soap *soap, tt__Profile *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__Profile(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__AudioSource_DEFINED
#define SOAP_TYPE_tt__AudioSource_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AudioSource(struct soap*, const char*, int, const tt__AudioSource *, const char*);
SOAP_FMAC3 tt__AudioSource * SOAP_FMAC4 soap_in_tt__AudioSource(struct soap*, const char*, tt__AudioSource *, const char*);
SOAP_FMAC1 tt__AudioSource * SOAP_FMAC2 soap_instantiate_tt__AudioSource(struct soap*, int, const char*, const char*, size_t*);

inline tt__AudioSource * soap_new_tt__AudioSource(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__AudioSource(soap, n, NULL, NULL, NULL);
}

inline tt__AudioSource * soap_new_req_tt__AudioSource(
	struct soap *soap,
	int Channels,
	const std::string& token1)
{
	tt__AudioSource *_p = soap_new_tt__AudioSource(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AudioSource::Channels = Channels;
		_p->tt__DeviceEntity::token = token1;
	}
	return _p;
}

inline tt__AudioSource * soap_new_set_tt__AudioSource(
	struct soap *soap,
	int Channels,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	const std::string& token1,
	char *__item2)
{
	tt__AudioSource *_p = soap_new_tt__AudioSource(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AudioSource::Channels = Channels;
		_p->tt__AudioSource::__any = __any;
		_p->tt__AudioSource::__anyAttribute = __anyAttribute;
		_p->tt__DeviceEntity::token = token1;
		_p->xsd__anyType::__item = __item2;
	}
	return _p;
}

inline int soap_write_tt__AudioSource(struct soap *soap, tt__AudioSource const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AudioSource", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__AudioSource * SOAP_FMAC4 soap_get_tt__AudioSource(struct soap*, tt__AudioSource *, const char*, const char*);

inline int soap_read_tt__AudioSource(struct soap *soap, tt__AudioSource *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__AudioSource(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__VideoSourceExtension2_DEFINED
#define SOAP_TYPE_tt__VideoSourceExtension2_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__VideoSourceExtension2(struct soap*, const char*, int, const tt__VideoSourceExtension2 *, const char*);
SOAP_FMAC3 tt__VideoSourceExtension2 * SOAP_FMAC4 soap_in_tt__VideoSourceExtension2(struct soap*, const char*, tt__VideoSourceExtension2 *, const char*);
SOAP_FMAC1 tt__VideoSourceExtension2 * SOAP_FMAC2 soap_instantiate_tt__VideoSourceExtension2(struct soap*, int, const char*, const char*, size_t*);

inline tt__VideoSourceExtension2 * soap_new_tt__VideoSourceExtension2(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__VideoSourceExtension2(soap, n, NULL, NULL, NULL);
}

inline tt__VideoSourceExtension2 * soap_new_req_tt__VideoSourceExtension2(
	struct soap *soap)
{
	tt__VideoSourceExtension2 *_p = soap_new_tt__VideoSourceExtension2(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__VideoSourceExtension2 * soap_new_set_tt__VideoSourceExtension2(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__item1)
{
	tt__VideoSourceExtension2 *_p = soap_new_tt__VideoSourceExtension2(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__VideoSourceExtension2::__any = __any;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__VideoSourceExtension2(struct soap *soap, tt__VideoSourceExtension2 const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:VideoSourceExtension2", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__VideoSourceExtension2 * SOAP_FMAC4 soap_get_tt__VideoSourceExtension2(struct soap*, tt__VideoSourceExtension2 *, const char*, const char*);

inline int soap_read_tt__VideoSourceExtension2(struct soap *soap, tt__VideoSourceExtension2 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__VideoSourceExtension2(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__VideoSourceExtension_DEFINED
#define SOAP_TYPE_tt__VideoSourceExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__VideoSourceExtension(struct soap*, const char*, int, const tt__VideoSourceExtension *, const char*);
SOAP_FMAC3 tt__VideoSourceExtension * SOAP_FMAC4 soap_in_tt__VideoSourceExtension(struct soap*, const char*, tt__VideoSourceExtension *, const char*);
SOAP_FMAC1 tt__VideoSourceExtension * SOAP_FMAC2 soap_instantiate_tt__VideoSourceExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__VideoSourceExtension * soap_new_tt__VideoSourceExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__VideoSourceExtension(soap, n, NULL, NULL, NULL);
}

inline tt__VideoSourceExtension * soap_new_req_tt__VideoSourceExtension(
	struct soap *soap)
{
	tt__VideoSourceExtension *_p = soap_new_tt__VideoSourceExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__VideoSourceExtension * soap_new_set_tt__VideoSourceExtension(
	struct soap *soap,
	const std::vector<char *> & __any,
	tt__ImagingSettings20 *Imaging,
	tt__VideoSourceExtension2 *Extension,
	char *__item1)
{
	tt__VideoSourceExtension *_p = soap_new_tt__VideoSourceExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__VideoSourceExtension::__any = __any;
		_p->tt__VideoSourceExtension::Imaging = Imaging;
		_p->tt__VideoSourceExtension::Extension = Extension;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__VideoSourceExtension(struct soap *soap, tt__VideoSourceExtension const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:VideoSourceExtension", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__VideoSourceExtension * SOAP_FMAC4 soap_get_tt__VideoSourceExtension(struct soap*, tt__VideoSourceExtension *, const char*, const char*);

inline int soap_read_tt__VideoSourceExtension(struct soap *soap, tt__VideoSourceExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__VideoSourceExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__VideoSource_DEFINED
#define SOAP_TYPE_tt__VideoSource_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__VideoSource(struct soap*, const char*, int, const tt__VideoSource *, const char*);
SOAP_FMAC3 tt__VideoSource * SOAP_FMAC4 soap_in_tt__VideoSource(struct soap*, const char*, tt__VideoSource *, const char*);
SOAP_FMAC1 tt__VideoSource * SOAP_FMAC2 soap_instantiate_tt__VideoSource(struct soap*, int, const char*, const char*, size_t*);

inline tt__VideoSource * soap_new_tt__VideoSource(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__VideoSource(soap, n, NULL, NULL, NULL);
}

inline tt__VideoSource * soap_new_req_tt__VideoSource(
	struct soap *soap,
	float Framerate,
	tt__VideoResolution *Resolution,
	const std::string& token1)
{
	tt__VideoSource *_p = soap_new_tt__VideoSource(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__VideoSource::Framerate = Framerate;
		_p->tt__VideoSource::Resolution = Resolution;
		_p->tt__DeviceEntity::token = token1;
	}
	return _p;
}

inline tt__VideoSource * soap_new_set_tt__VideoSource(
	struct soap *soap,
	float Framerate,
	tt__VideoResolution *Resolution,
	tt__ImagingSettings *Imaging,
	tt__VideoSourceExtension *Extension,
	char *__anyAttribute,
	const std::string& token1,
	char *__item2)
{
	tt__VideoSource *_p = soap_new_tt__VideoSource(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__VideoSource::Framerate = Framerate;
		_p->tt__VideoSource::Resolution = Resolution;
		_p->tt__VideoSource::Imaging = Imaging;
		_p->tt__VideoSource::Extension = Extension;
		_p->tt__VideoSource::__anyAttribute = __anyAttribute;
		_p->tt__DeviceEntity::token = token1;
		_p->xsd__anyType::__item = __item2;
	}
	return _p;
}

inline int soap_write_tt__VideoSource(struct soap *soap, tt__VideoSource const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:VideoSource", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__VideoSource * SOAP_FMAC4 soap_get_tt__VideoSource(struct soap*, tt__VideoSource *, const char*, const char*);

inline int soap_read_tt__VideoSource(struct soap *soap, tt__VideoSource *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__VideoSource(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__AnyHolder_DEFINED
#define SOAP_TYPE_tt__AnyHolder_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AnyHolder(struct soap*, const char*, int, const tt__AnyHolder *, const char*);
SOAP_FMAC3 tt__AnyHolder * SOAP_FMAC4 soap_in_tt__AnyHolder(struct soap*, const char*, tt__AnyHolder *, const char*);
SOAP_FMAC1 tt__AnyHolder * SOAP_FMAC2 soap_instantiate_tt__AnyHolder(struct soap*, int, const char*, const char*, size_t*);

inline tt__AnyHolder * soap_new_tt__AnyHolder(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__AnyHolder(soap, n, NULL, NULL, NULL);
}

inline tt__AnyHolder * soap_new_req_tt__AnyHolder(
	struct soap *soap)
{
	tt__AnyHolder *_p = soap_new_tt__AnyHolder(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__AnyHolder * soap_new_set_tt__AnyHolder(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tt__AnyHolder *_p = soap_new_tt__AnyHolder(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AnyHolder::__any = __any;
		_p->tt__AnyHolder::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__AnyHolder(struct soap *soap, tt__AnyHolder const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AnyHolder", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__AnyHolder * SOAP_FMAC4 soap_get_tt__AnyHolder(struct soap*, tt__AnyHolder *, const char*, const char*);

inline int soap_read_tt__AnyHolder(struct soap *soap, tt__AnyHolder *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__AnyHolder(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__FloatList_DEFINED
#define SOAP_TYPE_tt__FloatList_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__FloatList(struct soap*, const char*, int, const tt__FloatList *, const char*);
SOAP_FMAC3 tt__FloatList * SOAP_FMAC4 soap_in_tt__FloatList(struct soap*, const char*, tt__FloatList *, const char*);
SOAP_FMAC1 tt__FloatList * SOAP_FMAC2 soap_instantiate_tt__FloatList(struct soap*, int, const char*, const char*, size_t*);

inline tt__FloatList * soap_new_tt__FloatList(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__FloatList(soap, n, NULL, NULL, NULL);
}

inline tt__FloatList * soap_new_req_tt__FloatList(
	struct soap *soap)
{
	tt__FloatList *_p = soap_new_tt__FloatList(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__FloatList * soap_new_set_tt__FloatList(
	struct soap *soap,
	const std::vector<float> & Items,
	char *__item1)
{
	tt__FloatList *_p = soap_new_tt__FloatList(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__FloatList::Items = Items;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__FloatList(struct soap *soap, tt__FloatList const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:FloatList", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__FloatList * SOAP_FMAC4 soap_get_tt__FloatList(struct soap*, tt__FloatList *, const char*, const char*);

inline int soap_read_tt__FloatList(struct soap *soap, tt__FloatList *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__FloatList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__IntList_DEFINED
#define SOAP_TYPE_tt__IntList_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IntList(struct soap*, const char*, int, const tt__IntList *, const char*);
SOAP_FMAC3 tt__IntList * SOAP_FMAC4 soap_in_tt__IntList(struct soap*, const char*, tt__IntList *, const char*);
SOAP_FMAC1 tt__IntList * SOAP_FMAC2 soap_instantiate_tt__IntList(struct soap*, int, const char*, const char*, size_t*);

inline tt__IntList * soap_new_tt__IntList(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__IntList(soap, n, NULL, NULL, NULL);
}

inline tt__IntList * soap_new_req_tt__IntList(
	struct soap *soap)
{
	tt__IntList *_p = soap_new_tt__IntList(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__IntList * soap_new_set_tt__IntList(
	struct soap *soap,
	const std::vector<int> & Items,
	char *__item1)
{
	tt__IntList *_p = soap_new_tt__IntList(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__IntList::Items = Items;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__IntList(struct soap *soap, tt__IntList const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IntList", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__IntList * SOAP_FMAC4 soap_get_tt__IntList(struct soap*, tt__IntList *, const char*, const char*);

inline int soap_read_tt__IntList(struct soap *soap, tt__IntList *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__IntList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__DurationRange_DEFINED
#define SOAP_TYPE_tt__DurationRange_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__DurationRange(struct soap*, const char*, int, const tt__DurationRange *, const char*);
SOAP_FMAC3 tt__DurationRange * SOAP_FMAC4 soap_in_tt__DurationRange(struct soap*, const char*, tt__DurationRange *, const char*);
SOAP_FMAC1 tt__DurationRange * SOAP_FMAC2 soap_instantiate_tt__DurationRange(struct soap*, int, const char*, const char*, size_t*);

inline tt__DurationRange * soap_new_tt__DurationRange(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__DurationRange(soap, n, NULL, NULL, NULL);
}

inline tt__DurationRange * soap_new_req_tt__DurationRange(
	struct soap *soap,
	LONG64 Min,
	LONG64 Max)
{
	tt__DurationRange *_p = soap_new_tt__DurationRange(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__DurationRange::Min = Min;
		_p->tt__DurationRange::Max = Max;
	}
	return _p;
}

inline tt__DurationRange * soap_new_set_tt__DurationRange(
	struct soap *soap,
	LONG64 Min,
	LONG64 Max,
	char *__item1)
{
	tt__DurationRange *_p = soap_new_tt__DurationRange(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__DurationRange::Min = Min;
		_p->tt__DurationRange::Max = Max;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__DurationRange(struct soap *soap, tt__DurationRange const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:DurationRange", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__DurationRange * SOAP_FMAC4 soap_get_tt__DurationRange(struct soap*, tt__DurationRange *, const char*, const char*);

inline int soap_read_tt__DurationRange(struct soap *soap, tt__DurationRange *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__DurationRange(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__FloatRange_DEFINED
#define SOAP_TYPE_tt__FloatRange_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__FloatRange(struct soap*, const char*, int, const tt__FloatRange *, const char*);
SOAP_FMAC3 tt__FloatRange * SOAP_FMAC4 soap_in_tt__FloatRange(struct soap*, const char*, tt__FloatRange *, const char*);
SOAP_FMAC1 tt__FloatRange * SOAP_FMAC2 soap_instantiate_tt__FloatRange(struct soap*, int, const char*, const char*, size_t*);

inline tt__FloatRange * soap_new_tt__FloatRange(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__FloatRange(soap, n, NULL, NULL, NULL);
}

inline tt__FloatRange * soap_new_req_tt__FloatRange(
	struct soap *soap,
	float Min,
	float Max)
{
	tt__FloatRange *_p = soap_new_tt__FloatRange(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__FloatRange::Min = Min;
		_p->tt__FloatRange::Max = Max;
	}
	return _p;
}

inline tt__FloatRange * soap_new_set_tt__FloatRange(
	struct soap *soap,
	float Min,
	float Max,
	char *__item1)
{
	tt__FloatRange *_p = soap_new_tt__FloatRange(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__FloatRange::Min = Min;
		_p->tt__FloatRange::Max = Max;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__FloatRange(struct soap *soap, tt__FloatRange const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:FloatRange", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__FloatRange * SOAP_FMAC4 soap_get_tt__FloatRange(struct soap*, tt__FloatRange *, const char*, const char*);

inline int soap_read_tt__FloatRange(struct soap *soap, tt__FloatRange *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__FloatRange(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__IntRange_DEFINED
#define SOAP_TYPE_tt__IntRange_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IntRange(struct soap*, const char*, int, const tt__IntRange *, const char*);
SOAP_FMAC3 tt__IntRange * SOAP_FMAC4 soap_in_tt__IntRange(struct soap*, const char*, tt__IntRange *, const char*);
SOAP_FMAC1 tt__IntRange * SOAP_FMAC2 soap_instantiate_tt__IntRange(struct soap*, int, const char*, const char*, size_t*);

inline tt__IntRange * soap_new_tt__IntRange(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__IntRange(soap, n, NULL, NULL, NULL);
}

inline tt__IntRange * soap_new_req_tt__IntRange(
	struct soap *soap,
	int Min,
	int Max)
{
	tt__IntRange *_p = soap_new_tt__IntRange(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__IntRange::Min = Min;
		_p->tt__IntRange::Max = Max;
	}
	return _p;
}

inline tt__IntRange * soap_new_set_tt__IntRange(
	struct soap *soap,
	int Min,
	int Max,
	char *__item1)
{
	tt__IntRange *_p = soap_new_tt__IntRange(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__IntRange::Min = Min;
		_p->tt__IntRange::Max = Max;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__IntRange(struct soap *soap, tt__IntRange const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IntRange", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__IntRange * SOAP_FMAC4 soap_get_tt__IntRange(struct soap*, tt__IntRange *, const char*, const char*);

inline int soap_read_tt__IntRange(struct soap *soap, tt__IntRange *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__IntRange(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__IntRectangleRange_DEFINED
#define SOAP_TYPE_tt__IntRectangleRange_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IntRectangleRange(struct soap*, const char*, int, const tt__IntRectangleRange *, const char*);
SOAP_FMAC3 tt__IntRectangleRange * SOAP_FMAC4 soap_in_tt__IntRectangleRange(struct soap*, const char*, tt__IntRectangleRange *, const char*);
SOAP_FMAC1 tt__IntRectangleRange * SOAP_FMAC2 soap_instantiate_tt__IntRectangleRange(struct soap*, int, const char*, const char*, size_t*);

inline tt__IntRectangleRange * soap_new_tt__IntRectangleRange(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__IntRectangleRange(soap, n, NULL, NULL, NULL);
}

inline tt__IntRectangleRange * soap_new_req_tt__IntRectangleRange(
	struct soap *soap,
	tt__IntRange *XRange,
	tt__IntRange *YRange,
	tt__IntRange *WidthRange,
	tt__IntRange *HeightRange)
{
	tt__IntRectangleRange *_p = soap_new_tt__IntRectangleRange(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__IntRectangleRange::XRange = XRange;
		_p->tt__IntRectangleRange::YRange = YRange;
		_p->tt__IntRectangleRange::WidthRange = WidthRange;
		_p->tt__IntRectangleRange::HeightRange = HeightRange;
	}
	return _p;
}

inline tt__IntRectangleRange * soap_new_set_tt__IntRectangleRange(
	struct soap *soap,
	tt__IntRange *XRange,
	tt__IntRange *YRange,
	tt__IntRange *WidthRange,
	tt__IntRange *HeightRange,
	char *__item1)
{
	tt__IntRectangleRange *_p = soap_new_tt__IntRectangleRange(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__IntRectangleRange::XRange = XRange;
		_p->tt__IntRectangleRange::YRange = YRange;
		_p->tt__IntRectangleRange::WidthRange = WidthRange;
		_p->tt__IntRectangleRange::HeightRange = HeightRange;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__IntRectangleRange(struct soap *soap, tt__IntRectangleRange const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IntRectangleRange", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__IntRectangleRange * SOAP_FMAC4 soap_get_tt__IntRectangleRange(struct soap*, tt__IntRectangleRange *, const char*, const char*);

inline int soap_read_tt__IntRectangleRange(struct soap *soap, tt__IntRectangleRange *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__IntRectangleRange(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__IntRectangle_DEFINED
#define SOAP_TYPE_tt__IntRectangle_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IntRectangle(struct soap*, const char*, int, const tt__IntRectangle *, const char*);
SOAP_FMAC3 tt__IntRectangle * SOAP_FMAC4 soap_in_tt__IntRectangle(struct soap*, const char*, tt__IntRectangle *, const char*);
SOAP_FMAC1 tt__IntRectangle * SOAP_FMAC2 soap_instantiate_tt__IntRectangle(struct soap*, int, const char*, const char*, size_t*);

inline tt__IntRectangle * soap_new_tt__IntRectangle(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__IntRectangle(soap, n, NULL, NULL, NULL);
}

inline tt__IntRectangle * soap_new_req_tt__IntRectangle(
	struct soap *soap,
	int x,
	int y,
	int width,
	int height)
{
	tt__IntRectangle *_p = soap_new_tt__IntRectangle(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__IntRectangle::x = x;
		_p->tt__IntRectangle::y = y;
		_p->tt__IntRectangle::width = width;
		_p->tt__IntRectangle::height = height;
	}
	return _p;
}

inline tt__IntRectangle * soap_new_set_tt__IntRectangle(
	struct soap *soap,
	int x,
	int y,
	int width,
	int height,
	char *__item1)
{
	tt__IntRectangle *_p = soap_new_tt__IntRectangle(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__IntRectangle::x = x;
		_p->tt__IntRectangle::y = y;
		_p->tt__IntRectangle::width = width;
		_p->tt__IntRectangle::height = height;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__IntRectangle(struct soap *soap, tt__IntRectangle const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IntRectangle", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__IntRectangle * SOAP_FMAC4 soap_get_tt__IntRectangle(struct soap*, tt__IntRectangle *, const char*, const char*);

inline int soap_read_tt__IntRectangle(struct soap *soap, tt__IntRectangle *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__IntRectangle(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tt__DeviceEntity_DEFINED
#define SOAP_TYPE_tt__DeviceEntity_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__DeviceEntity(struct soap*, const char*, int, const tt__DeviceEntity *, const char*);
SOAP_FMAC3 tt__DeviceEntity * SOAP_FMAC4 soap_in_tt__DeviceEntity(struct soap*, const char*, tt__DeviceEntity *, const char*);
SOAP_FMAC1 tt__DeviceEntity * SOAP_FMAC2 soap_instantiate_tt__DeviceEntity(struct soap*, int, const char*, const char*, size_t*);

inline tt__DeviceEntity * soap_new_tt__DeviceEntity(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__DeviceEntity(soap, n, NULL, NULL, NULL);
}

inline tt__DeviceEntity * soap_new_req_tt__DeviceEntity(
	struct soap *soap,
	const std::string& token)
{
	tt__DeviceEntity *_p = soap_new_tt__DeviceEntity(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__DeviceEntity::token = token;
	}
	return _p;
}

inline tt__DeviceEntity * soap_new_set_tt__DeviceEntity(
	struct soap *soap,
	const std::string& token,
	char *__item1)
{
	tt__DeviceEntity *_p = soap_new_tt__DeviceEntity(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__DeviceEntity::token = token;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tt__DeviceEntity(struct soap *soap, tt__DeviceEntity const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:DeviceEntity", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tt__DeviceEntity * SOAP_FMAC4 soap_get_tt__DeviceEntity(struct soap*, tt__DeviceEntity *, const char*, const char*);

inline int soap_read_tt__DeviceEntity(struct soap *soap, tt__DeviceEntity *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tt__DeviceEntity(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__DeleteStorageConfigurationResponse_DEFINED
#define SOAP_TYPE__tds__DeleteStorageConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__DeleteStorageConfigurationResponse(struct soap*, const char*, int, const _tds__DeleteStorageConfigurationResponse *, const char*);
SOAP_FMAC3 _tds__DeleteStorageConfigurationResponse * SOAP_FMAC4 soap_in__tds__DeleteStorageConfigurationResponse(struct soap*, const char*, _tds__DeleteStorageConfigurationResponse *, const char*);
SOAP_FMAC1 _tds__DeleteStorageConfigurationResponse * SOAP_FMAC2 soap_instantiate__tds__DeleteStorageConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__DeleteStorageConfigurationResponse * soap_new__tds__DeleteStorageConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__DeleteStorageConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__DeleteStorageConfigurationResponse * soap_new_req__tds__DeleteStorageConfigurationResponse(
	struct soap *soap)
{
	_tds__DeleteStorageConfigurationResponse *_p = soap_new__tds__DeleteStorageConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__DeleteStorageConfigurationResponse * soap_new_set__tds__DeleteStorageConfigurationResponse(
	struct soap *soap)
{
	_tds__DeleteStorageConfigurationResponse *_p = soap_new__tds__DeleteStorageConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__DeleteStorageConfigurationResponse(struct soap *soap, _tds__DeleteStorageConfigurationResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:DeleteStorageConfigurationResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__DeleteStorageConfigurationResponse * SOAP_FMAC4 soap_get__tds__DeleteStorageConfigurationResponse(struct soap*, _tds__DeleteStorageConfigurationResponse *, const char*, const char*);

inline int soap_read__tds__DeleteStorageConfigurationResponse(struct soap *soap, _tds__DeleteStorageConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__DeleteStorageConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__DeleteStorageConfiguration_DEFINED
#define SOAP_TYPE__tds__DeleteStorageConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__DeleteStorageConfiguration(struct soap*, const char*, int, const _tds__DeleteStorageConfiguration *, const char*);
SOAP_FMAC3 _tds__DeleteStorageConfiguration * SOAP_FMAC4 soap_in__tds__DeleteStorageConfiguration(struct soap*, const char*, _tds__DeleteStorageConfiguration *, const char*);
SOAP_FMAC1 _tds__DeleteStorageConfiguration * SOAP_FMAC2 soap_instantiate__tds__DeleteStorageConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _tds__DeleteStorageConfiguration * soap_new__tds__DeleteStorageConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__DeleteStorageConfiguration(soap, n, NULL, NULL, NULL);
}

inline _tds__DeleteStorageConfiguration * soap_new_req__tds__DeleteStorageConfiguration(
	struct soap *soap,
	const std::string& Token)
{
	_tds__DeleteStorageConfiguration *_p = soap_new__tds__DeleteStorageConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__DeleteStorageConfiguration::Token = Token;
	}
	return _p;
}

inline _tds__DeleteStorageConfiguration * soap_new_set__tds__DeleteStorageConfiguration(
	struct soap *soap,
	const std::string& Token)
{
	_tds__DeleteStorageConfiguration *_p = soap_new__tds__DeleteStorageConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__DeleteStorageConfiguration::Token = Token;
	}
	return _p;
}

inline int soap_write__tds__DeleteStorageConfiguration(struct soap *soap, _tds__DeleteStorageConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:DeleteStorageConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__DeleteStorageConfiguration * SOAP_FMAC4 soap_get__tds__DeleteStorageConfiguration(struct soap*, _tds__DeleteStorageConfiguration *, const char*, const char*);

inline int soap_read__tds__DeleteStorageConfiguration(struct soap *soap, _tds__DeleteStorageConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__DeleteStorageConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__SetStorageConfigurationResponse_DEFINED
#define SOAP_TYPE__tds__SetStorageConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetStorageConfigurationResponse(struct soap*, const char*, int, const _tds__SetStorageConfigurationResponse *, const char*);
SOAP_FMAC3 _tds__SetStorageConfigurationResponse * SOAP_FMAC4 soap_in__tds__SetStorageConfigurationResponse(struct soap*, const char*, _tds__SetStorageConfigurationResponse *, const char*);
SOAP_FMAC1 _tds__SetStorageConfigurationResponse * SOAP_FMAC2 soap_instantiate__tds__SetStorageConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetStorageConfigurationResponse * soap_new__tds__SetStorageConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetStorageConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__SetStorageConfigurationResponse * soap_new_req__tds__SetStorageConfigurationResponse(
	struct soap *soap)
{
	_tds__SetStorageConfigurationResponse *_p = soap_new__tds__SetStorageConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__SetStorageConfigurationResponse * soap_new_set__tds__SetStorageConfigurationResponse(
	struct soap *soap)
{
	_tds__SetStorageConfigurationResponse *_p = soap_new__tds__SetStorageConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__SetStorageConfigurationResponse(struct soap *soap, _tds__SetStorageConfigurationResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetStorageConfigurationResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetStorageConfigurationResponse * SOAP_FMAC4 soap_get__tds__SetStorageConfigurationResponse(struct soap*, _tds__SetStorageConfigurationResponse *, const char*, const char*);

inline int soap_read__tds__SetStorageConfigurationResponse(struct soap *soap, _tds__SetStorageConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__SetStorageConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__SetStorageConfiguration_DEFINED
#define SOAP_TYPE__tds__SetStorageConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetStorageConfiguration(struct soap*, const char*, int, const _tds__SetStorageConfiguration *, const char*);
SOAP_FMAC3 _tds__SetStorageConfiguration * SOAP_FMAC4 soap_in__tds__SetStorageConfiguration(struct soap*, const char*, _tds__SetStorageConfiguration *, const char*);
SOAP_FMAC1 _tds__SetStorageConfiguration * SOAP_FMAC2 soap_instantiate__tds__SetStorageConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetStorageConfiguration * soap_new__tds__SetStorageConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetStorageConfiguration(soap, n, NULL, NULL, NULL);
}

inline _tds__SetStorageConfiguration * soap_new_req__tds__SetStorageConfiguration(
	struct soap *soap,
	tds__StorageConfiguration *StorageConfiguration)
{
	_tds__SetStorageConfiguration *_p = soap_new__tds__SetStorageConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetStorageConfiguration::StorageConfiguration = StorageConfiguration;
	}
	return _p;
}

inline _tds__SetStorageConfiguration * soap_new_set__tds__SetStorageConfiguration(
	struct soap *soap,
	tds__StorageConfiguration *StorageConfiguration)
{
	_tds__SetStorageConfiguration *_p = soap_new__tds__SetStorageConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetStorageConfiguration::StorageConfiguration = StorageConfiguration;
	}
	return _p;
}

inline int soap_write__tds__SetStorageConfiguration(struct soap *soap, _tds__SetStorageConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetStorageConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetStorageConfiguration * SOAP_FMAC4 soap_get__tds__SetStorageConfiguration(struct soap*, _tds__SetStorageConfiguration *, const char*, const char*);

inline int soap_read__tds__SetStorageConfiguration(struct soap *soap, _tds__SetStorageConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__SetStorageConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__GetStorageConfigurationResponse_DEFINED
#define SOAP_TYPE__tds__GetStorageConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetStorageConfigurationResponse(struct soap*, const char*, int, const _tds__GetStorageConfigurationResponse *, const char*);
SOAP_FMAC3 _tds__GetStorageConfigurationResponse * SOAP_FMAC4 soap_in__tds__GetStorageConfigurationResponse(struct soap*, const char*, _tds__GetStorageConfigurationResponse *, const char*);
SOAP_FMAC1 _tds__GetStorageConfigurationResponse * SOAP_FMAC2 soap_instantiate__tds__GetStorageConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetStorageConfigurationResponse * soap_new__tds__GetStorageConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetStorageConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__GetStorageConfigurationResponse * soap_new_req__tds__GetStorageConfigurationResponse(
	struct soap *soap,
	tds__StorageConfiguration *StorageConfiguration)
{
	_tds__GetStorageConfigurationResponse *_p = soap_new__tds__GetStorageConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetStorageConfigurationResponse::StorageConfiguration = StorageConfiguration;
	}
	return _p;
}

inline _tds__GetStorageConfigurationResponse * soap_new_set__tds__GetStorageConfigurationResponse(
	struct soap *soap,
	tds__StorageConfiguration *StorageConfiguration)
{
	_tds__GetStorageConfigurationResponse *_p = soap_new__tds__GetStorageConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetStorageConfigurationResponse::StorageConfiguration = StorageConfiguration;
	}
	return _p;
}

inline int soap_write__tds__GetStorageConfigurationResponse(struct soap *soap, _tds__GetStorageConfigurationResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetStorageConfigurationResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetStorageConfigurationResponse * SOAP_FMAC4 soap_get__tds__GetStorageConfigurationResponse(struct soap*, _tds__GetStorageConfigurationResponse *, const char*, const char*);

inline int soap_read__tds__GetStorageConfigurationResponse(struct soap *soap, _tds__GetStorageConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__GetStorageConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__GetStorageConfiguration_DEFINED
#define SOAP_TYPE__tds__GetStorageConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetStorageConfiguration(struct soap*, const char*, int, const _tds__GetStorageConfiguration *, const char*);
SOAP_FMAC3 _tds__GetStorageConfiguration * SOAP_FMAC4 soap_in__tds__GetStorageConfiguration(struct soap*, const char*, _tds__GetStorageConfiguration *, const char*);
SOAP_FMAC1 _tds__GetStorageConfiguration * SOAP_FMAC2 soap_instantiate__tds__GetStorageConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetStorageConfiguration * soap_new__tds__GetStorageConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetStorageConfiguration(soap, n, NULL, NULL, NULL);
}

inline _tds__GetStorageConfiguration * soap_new_req__tds__GetStorageConfiguration(
	struct soap *soap,
	const std::string& Token)
{
	_tds__GetStorageConfiguration *_p = soap_new__tds__GetStorageConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetStorageConfiguration::Token = Token;
	}
	return _p;
}

inline _tds__GetStorageConfiguration * soap_new_set__tds__GetStorageConfiguration(
	struct soap *soap,
	const std::string& Token)
{
	_tds__GetStorageConfiguration *_p = soap_new__tds__GetStorageConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetStorageConfiguration::Token = Token;
	}
	return _p;
}

inline int soap_write__tds__GetStorageConfiguration(struct soap *soap, _tds__GetStorageConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetStorageConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetStorageConfiguration * SOAP_FMAC4 soap_get__tds__GetStorageConfiguration(struct soap*, _tds__GetStorageConfiguration *, const char*, const char*);

inline int soap_read__tds__GetStorageConfiguration(struct soap *soap, _tds__GetStorageConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__GetStorageConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__CreateStorageConfigurationResponse_DEFINED
#define SOAP_TYPE__tds__CreateStorageConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__CreateStorageConfigurationResponse(struct soap*, const char*, int, const _tds__CreateStorageConfigurationResponse *, const char*);
SOAP_FMAC3 _tds__CreateStorageConfigurationResponse * SOAP_FMAC4 soap_in__tds__CreateStorageConfigurationResponse(struct soap*, const char*, _tds__CreateStorageConfigurationResponse *, const char*);
SOAP_FMAC1 _tds__CreateStorageConfigurationResponse * SOAP_FMAC2 soap_instantiate__tds__CreateStorageConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__CreateStorageConfigurationResponse * soap_new__tds__CreateStorageConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__CreateStorageConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__CreateStorageConfigurationResponse * soap_new_req__tds__CreateStorageConfigurationResponse(
	struct soap *soap,
	const std::string& Token)
{
	_tds__CreateStorageConfigurationResponse *_p = soap_new__tds__CreateStorageConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__CreateStorageConfigurationResponse::Token = Token;
	}
	return _p;
}

inline _tds__CreateStorageConfigurationResponse * soap_new_set__tds__CreateStorageConfigurationResponse(
	struct soap *soap,
	const std::string& Token)
{
	_tds__CreateStorageConfigurationResponse *_p = soap_new__tds__CreateStorageConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__CreateStorageConfigurationResponse::Token = Token;
	}
	return _p;
}

inline int soap_write__tds__CreateStorageConfigurationResponse(struct soap *soap, _tds__CreateStorageConfigurationResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:CreateStorageConfigurationResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__CreateStorageConfigurationResponse * SOAP_FMAC4 soap_get__tds__CreateStorageConfigurationResponse(struct soap*, _tds__CreateStorageConfigurationResponse *, const char*, const char*);

inline int soap_read__tds__CreateStorageConfigurationResponse(struct soap *soap, _tds__CreateStorageConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__CreateStorageConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__CreateStorageConfiguration_DEFINED
#define SOAP_TYPE__tds__CreateStorageConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__CreateStorageConfiguration(struct soap*, const char*, int, const _tds__CreateStorageConfiguration *, const char*);
SOAP_FMAC3 _tds__CreateStorageConfiguration * SOAP_FMAC4 soap_in__tds__CreateStorageConfiguration(struct soap*, const char*, _tds__CreateStorageConfiguration *, const char*);
SOAP_FMAC1 _tds__CreateStorageConfiguration * SOAP_FMAC2 soap_instantiate__tds__CreateStorageConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _tds__CreateStorageConfiguration * soap_new__tds__CreateStorageConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__CreateStorageConfiguration(soap, n, NULL, NULL, NULL);
}

inline _tds__CreateStorageConfiguration * soap_new_req__tds__CreateStorageConfiguration(
	struct soap *soap,
	tds__StorageConfigurationData *StorageConfiguration)
{
	_tds__CreateStorageConfiguration *_p = soap_new__tds__CreateStorageConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__CreateStorageConfiguration::StorageConfiguration = StorageConfiguration;
	}
	return _p;
}

inline _tds__CreateStorageConfiguration * soap_new_set__tds__CreateStorageConfiguration(
	struct soap *soap,
	tds__StorageConfigurationData *StorageConfiguration)
{
	_tds__CreateStorageConfiguration *_p = soap_new__tds__CreateStorageConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__CreateStorageConfiguration::StorageConfiguration = StorageConfiguration;
	}
	return _p;
}

inline int soap_write__tds__CreateStorageConfiguration(struct soap *soap, _tds__CreateStorageConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:CreateStorageConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__CreateStorageConfiguration * SOAP_FMAC4 soap_get__tds__CreateStorageConfiguration(struct soap*, _tds__CreateStorageConfiguration *, const char*, const char*);

inline int soap_read__tds__CreateStorageConfiguration(struct soap *soap, _tds__CreateStorageConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__CreateStorageConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__GetStorageConfigurationsResponse_DEFINED
#define SOAP_TYPE__tds__GetStorageConfigurationsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetStorageConfigurationsResponse(struct soap*, const char*, int, const _tds__GetStorageConfigurationsResponse *, const char*);
SOAP_FMAC3 _tds__GetStorageConfigurationsResponse * SOAP_FMAC4 soap_in__tds__GetStorageConfigurationsResponse(struct soap*, const char*, _tds__GetStorageConfigurationsResponse *, const char*);
SOAP_FMAC1 _tds__GetStorageConfigurationsResponse * SOAP_FMAC2 soap_instantiate__tds__GetStorageConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetStorageConfigurationsResponse * soap_new__tds__GetStorageConfigurationsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetStorageConfigurationsResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__GetStorageConfigurationsResponse * soap_new_req__tds__GetStorageConfigurationsResponse(
	struct soap *soap)
{
	_tds__GetStorageConfigurationsResponse *_p = soap_new__tds__GetStorageConfigurationsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__GetStorageConfigurationsResponse * soap_new_set__tds__GetStorageConfigurationsResponse(
	struct soap *soap,
	const std::vector<tds__StorageConfiguration *> & StorageConfigurations)
{
	_tds__GetStorageConfigurationsResponse *_p = soap_new__tds__GetStorageConfigurationsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetStorageConfigurationsResponse::StorageConfigurations = StorageConfigurations;
	}
	return _p;
}

inline int soap_write__tds__GetStorageConfigurationsResponse(struct soap *soap, _tds__GetStorageConfigurationsResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetStorageConfigurationsResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetStorageConfigurationsResponse * SOAP_FMAC4 soap_get__tds__GetStorageConfigurationsResponse(struct soap*, _tds__GetStorageConfigurationsResponse *, const char*, const char*);

inline int soap_read__tds__GetStorageConfigurationsResponse(struct soap *soap, _tds__GetStorageConfigurationsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__GetStorageConfigurationsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__GetStorageConfigurations_DEFINED
#define SOAP_TYPE__tds__GetStorageConfigurations_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetStorageConfigurations(struct soap*, const char*, int, const _tds__GetStorageConfigurations *, const char*);
SOAP_FMAC3 _tds__GetStorageConfigurations * SOAP_FMAC4 soap_in__tds__GetStorageConfigurations(struct soap*, const char*, _tds__GetStorageConfigurations *, const char*);
SOAP_FMAC1 _tds__GetStorageConfigurations * SOAP_FMAC2 soap_instantiate__tds__GetStorageConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetStorageConfigurations * soap_new__tds__GetStorageConfigurations(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetStorageConfigurations(soap, n, NULL, NULL, NULL);
}

inline _tds__GetStorageConfigurations * soap_new_req__tds__GetStorageConfigurations(
	struct soap *soap)
{
	_tds__GetStorageConfigurations *_p = soap_new__tds__GetStorageConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__GetStorageConfigurations * soap_new_set__tds__GetStorageConfigurations(
	struct soap *soap)
{
	_tds__GetStorageConfigurations *_p = soap_new__tds__GetStorageConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__GetStorageConfigurations(struct soap *soap, _tds__GetStorageConfigurations const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetStorageConfigurations", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetStorageConfigurations * SOAP_FMAC4 soap_get__tds__GetStorageConfigurations(struct soap*, _tds__GetStorageConfigurations *, const char*, const char*);

inline int soap_read__tds__GetStorageConfigurations(struct soap *soap, _tds__GetStorageConfigurations *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__GetStorageConfigurations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__StartSystemRestoreResponse_DEFINED
#define SOAP_TYPE__tds__StartSystemRestoreResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__StartSystemRestoreResponse(struct soap*, const char*, int, const _tds__StartSystemRestoreResponse *, const char*);
SOAP_FMAC3 _tds__StartSystemRestoreResponse * SOAP_FMAC4 soap_in__tds__StartSystemRestoreResponse(struct soap*, const char*, _tds__StartSystemRestoreResponse *, const char*);
SOAP_FMAC1 _tds__StartSystemRestoreResponse * SOAP_FMAC2 soap_instantiate__tds__StartSystemRestoreResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__StartSystemRestoreResponse * soap_new__tds__StartSystemRestoreResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__StartSystemRestoreResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__StartSystemRestoreResponse * soap_new_req__tds__StartSystemRestoreResponse(
	struct soap *soap,
	const std::string& UploadUri,
	LONG64 ExpectedDownTime)
{
	_tds__StartSystemRestoreResponse *_p = soap_new__tds__StartSystemRestoreResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__StartSystemRestoreResponse::UploadUri = UploadUri;
		_p->_tds__StartSystemRestoreResponse::ExpectedDownTime = ExpectedDownTime;
	}
	return _p;
}

inline _tds__StartSystemRestoreResponse * soap_new_set__tds__StartSystemRestoreResponse(
	struct soap *soap,
	const std::string& UploadUri,
	LONG64 ExpectedDownTime)
{
	_tds__StartSystemRestoreResponse *_p = soap_new__tds__StartSystemRestoreResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__StartSystemRestoreResponse::UploadUri = UploadUri;
		_p->_tds__StartSystemRestoreResponse::ExpectedDownTime = ExpectedDownTime;
	}
	return _p;
}

inline int soap_write__tds__StartSystemRestoreResponse(struct soap *soap, _tds__StartSystemRestoreResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:StartSystemRestoreResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__StartSystemRestoreResponse * SOAP_FMAC4 soap_get__tds__StartSystemRestoreResponse(struct soap*, _tds__StartSystemRestoreResponse *, const char*, const char*);

inline int soap_read__tds__StartSystemRestoreResponse(struct soap *soap, _tds__StartSystemRestoreResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__StartSystemRestoreResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__StartSystemRestore_DEFINED
#define SOAP_TYPE__tds__StartSystemRestore_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__StartSystemRestore(struct soap*, const char*, int, const _tds__StartSystemRestore *, const char*);
SOAP_FMAC3 _tds__StartSystemRestore * SOAP_FMAC4 soap_in__tds__StartSystemRestore(struct soap*, const char*, _tds__StartSystemRestore *, const char*);
SOAP_FMAC1 _tds__StartSystemRestore * SOAP_FMAC2 soap_instantiate__tds__StartSystemRestore(struct soap*, int, const char*, const char*, size_t*);

inline _tds__StartSystemRestore * soap_new__tds__StartSystemRestore(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__StartSystemRestore(soap, n, NULL, NULL, NULL);
}

inline _tds__StartSystemRestore * soap_new_req__tds__StartSystemRestore(
	struct soap *soap)
{
	_tds__StartSystemRestore *_p = soap_new__tds__StartSystemRestore(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__StartSystemRestore * soap_new_set__tds__StartSystemRestore(
	struct soap *soap)
{
	_tds__StartSystemRestore *_p = soap_new__tds__StartSystemRestore(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__StartSystemRestore(struct soap *soap, _tds__StartSystemRestore const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:StartSystemRestore", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__StartSystemRestore * SOAP_FMAC4 soap_get__tds__StartSystemRestore(struct soap*, _tds__StartSystemRestore *, const char*, const char*);

inline int soap_read__tds__StartSystemRestore(struct soap *soap, _tds__StartSystemRestore *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__StartSystemRestore(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__StartFirmwareUpgradeResponse_DEFINED
#define SOAP_TYPE__tds__StartFirmwareUpgradeResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__StartFirmwareUpgradeResponse(struct soap*, const char*, int, const _tds__StartFirmwareUpgradeResponse *, const char*);
SOAP_FMAC3 _tds__StartFirmwareUpgradeResponse * SOAP_FMAC4 soap_in__tds__StartFirmwareUpgradeResponse(struct soap*, const char*, _tds__StartFirmwareUpgradeResponse *, const char*);
SOAP_FMAC1 _tds__StartFirmwareUpgradeResponse * SOAP_FMAC2 soap_instantiate__tds__StartFirmwareUpgradeResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__StartFirmwareUpgradeResponse * soap_new__tds__StartFirmwareUpgradeResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__StartFirmwareUpgradeResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__StartFirmwareUpgradeResponse * soap_new_req__tds__StartFirmwareUpgradeResponse(
	struct soap *soap,
	const std::string& UploadUri,
	LONG64 UploadDelay,
	LONG64 ExpectedDownTime)
{
	_tds__StartFirmwareUpgradeResponse *_p = soap_new__tds__StartFirmwareUpgradeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__StartFirmwareUpgradeResponse::UploadUri = UploadUri;
		_p->_tds__StartFirmwareUpgradeResponse::UploadDelay = UploadDelay;
		_p->_tds__StartFirmwareUpgradeResponse::ExpectedDownTime = ExpectedDownTime;
	}
	return _p;
}

inline _tds__StartFirmwareUpgradeResponse * soap_new_set__tds__StartFirmwareUpgradeResponse(
	struct soap *soap,
	const std::string& UploadUri,
	LONG64 UploadDelay,
	LONG64 ExpectedDownTime)
{
	_tds__StartFirmwareUpgradeResponse *_p = soap_new__tds__StartFirmwareUpgradeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__StartFirmwareUpgradeResponse::UploadUri = UploadUri;
		_p->_tds__StartFirmwareUpgradeResponse::UploadDelay = UploadDelay;
		_p->_tds__StartFirmwareUpgradeResponse::ExpectedDownTime = ExpectedDownTime;
	}
	return _p;
}

inline int soap_write__tds__StartFirmwareUpgradeResponse(struct soap *soap, _tds__StartFirmwareUpgradeResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:StartFirmwareUpgradeResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__StartFirmwareUpgradeResponse * SOAP_FMAC4 soap_get__tds__StartFirmwareUpgradeResponse(struct soap*, _tds__StartFirmwareUpgradeResponse *, const char*, const char*);

inline int soap_read__tds__StartFirmwareUpgradeResponse(struct soap *soap, _tds__StartFirmwareUpgradeResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__StartFirmwareUpgradeResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__StartFirmwareUpgrade_DEFINED
#define SOAP_TYPE__tds__StartFirmwareUpgrade_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__StartFirmwareUpgrade(struct soap*, const char*, int, const _tds__StartFirmwareUpgrade *, const char*);
SOAP_FMAC3 _tds__StartFirmwareUpgrade * SOAP_FMAC4 soap_in__tds__StartFirmwareUpgrade(struct soap*, const char*, _tds__StartFirmwareUpgrade *, const char*);
SOAP_FMAC1 _tds__StartFirmwareUpgrade * SOAP_FMAC2 soap_instantiate__tds__StartFirmwareUpgrade(struct soap*, int, const char*, const char*, size_t*);

inline _tds__StartFirmwareUpgrade * soap_new__tds__StartFirmwareUpgrade(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__StartFirmwareUpgrade(soap, n, NULL, NULL, NULL);
}

inline _tds__StartFirmwareUpgrade * soap_new_req__tds__StartFirmwareUpgrade(
	struct soap *soap)
{
	_tds__StartFirmwareUpgrade *_p = soap_new__tds__StartFirmwareUpgrade(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__StartFirmwareUpgrade * soap_new_set__tds__StartFirmwareUpgrade(
	struct soap *soap)
{
	_tds__StartFirmwareUpgrade *_p = soap_new__tds__StartFirmwareUpgrade(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__StartFirmwareUpgrade(struct soap *soap, _tds__StartFirmwareUpgrade const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:StartFirmwareUpgrade", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__StartFirmwareUpgrade * SOAP_FMAC4 soap_get__tds__StartFirmwareUpgrade(struct soap*, _tds__StartFirmwareUpgrade *, const char*, const char*);

inline int soap_read__tds__StartFirmwareUpgrade(struct soap *soap, _tds__StartFirmwareUpgrade *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__StartFirmwareUpgrade(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__GetSystemUrisResponse_DEFINED
#define SOAP_TYPE__tds__GetSystemUrisResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetSystemUrisResponse(struct soap*, const char*, int, const _tds__GetSystemUrisResponse *, const char*);
SOAP_FMAC3 _tds__GetSystemUrisResponse * SOAP_FMAC4 soap_in__tds__GetSystemUrisResponse(struct soap*, const char*, _tds__GetSystemUrisResponse *, const char*);
SOAP_FMAC1 _tds__GetSystemUrisResponse * SOAP_FMAC2 soap_instantiate__tds__GetSystemUrisResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetSystemUrisResponse * soap_new__tds__GetSystemUrisResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetSystemUrisResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__GetSystemUrisResponse * soap_new_req__tds__GetSystemUrisResponse(
	struct soap *soap)
{
	_tds__GetSystemUrisResponse *_p = soap_new__tds__GetSystemUrisResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__GetSystemUrisResponse * soap_new_set__tds__GetSystemUrisResponse(
	struct soap *soap,
	tt__SystemLogUriList *SystemLogUris,
	std::string *SupportInfoUri,
	std::string *SystemBackupUri,
	_tds__GetSystemUrisResponse_Extension *Extension)
{
	_tds__GetSystemUrisResponse *_p = soap_new__tds__GetSystemUrisResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetSystemUrisResponse::SystemLogUris = SystemLogUris;
		_p->_tds__GetSystemUrisResponse::SupportInfoUri = SupportInfoUri;
		_p->_tds__GetSystemUrisResponse::SystemBackupUri = SystemBackupUri;
		_p->_tds__GetSystemUrisResponse::Extension = Extension;
	}
	return _p;
}

inline int soap_write__tds__GetSystemUrisResponse(struct soap *soap, _tds__GetSystemUrisResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetSystemUrisResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetSystemUrisResponse * SOAP_FMAC4 soap_get__tds__GetSystemUrisResponse(struct soap*, _tds__GetSystemUrisResponse *, const char*, const char*);

inline int soap_read__tds__GetSystemUrisResponse(struct soap *soap, _tds__GetSystemUrisResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__GetSystemUrisResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__GetSystemUris_DEFINED
#define SOAP_TYPE__tds__GetSystemUris_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetSystemUris(struct soap*, const char*, int, const _tds__GetSystemUris *, const char*);
SOAP_FMAC3 _tds__GetSystemUris * SOAP_FMAC4 soap_in__tds__GetSystemUris(struct soap*, const char*, _tds__GetSystemUris *, const char*);
SOAP_FMAC1 _tds__GetSystemUris * SOAP_FMAC2 soap_instantiate__tds__GetSystemUris(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetSystemUris * soap_new__tds__GetSystemUris(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetSystemUris(soap, n, NULL, NULL, NULL);
}

inline _tds__GetSystemUris * soap_new_req__tds__GetSystemUris(
	struct soap *soap)
{
	_tds__GetSystemUris *_p = soap_new__tds__GetSystemUris(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__GetSystemUris * soap_new_set__tds__GetSystemUris(
	struct soap *soap)
{
	_tds__GetSystemUris *_p = soap_new__tds__GetSystemUris(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__GetSystemUris(struct soap *soap, _tds__GetSystemUris const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetSystemUris", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetSystemUris * SOAP_FMAC4 soap_get__tds__GetSystemUris(struct soap*, _tds__GetSystemUris *, const char*, const char*);

inline int soap_read__tds__GetSystemUris(struct soap *soap, _tds__GetSystemUris *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__GetSystemUris(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__ScanAvailableDot11NetworksResponse_DEFINED
#define SOAP_TYPE__tds__ScanAvailableDot11NetworksResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__ScanAvailableDot11NetworksResponse(struct soap*, const char*, int, const _tds__ScanAvailableDot11NetworksResponse *, const char*);
SOAP_FMAC3 _tds__ScanAvailableDot11NetworksResponse * SOAP_FMAC4 soap_in__tds__ScanAvailableDot11NetworksResponse(struct soap*, const char*, _tds__ScanAvailableDot11NetworksResponse *, const char*);
SOAP_FMAC1 _tds__ScanAvailableDot11NetworksResponse * SOAP_FMAC2 soap_instantiate__tds__ScanAvailableDot11NetworksResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__ScanAvailableDot11NetworksResponse * soap_new__tds__ScanAvailableDot11NetworksResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__ScanAvailableDot11NetworksResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__ScanAvailableDot11NetworksResponse * soap_new_req__tds__ScanAvailableDot11NetworksResponse(
	struct soap *soap)
{
	_tds__ScanAvailableDot11NetworksResponse *_p = soap_new__tds__ScanAvailableDot11NetworksResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__ScanAvailableDot11NetworksResponse * soap_new_set__tds__ScanAvailableDot11NetworksResponse(
	struct soap *soap,
	const std::vector<tt__Dot11AvailableNetworks *> & Networks)
{
	_tds__ScanAvailableDot11NetworksResponse *_p = soap_new__tds__ScanAvailableDot11NetworksResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__ScanAvailableDot11NetworksResponse::Networks = Networks;
	}
	return _p;
}

inline int soap_write__tds__ScanAvailableDot11NetworksResponse(struct soap *soap, _tds__ScanAvailableDot11NetworksResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:ScanAvailableDot11NetworksResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__ScanAvailableDot11NetworksResponse * SOAP_FMAC4 soap_get__tds__ScanAvailableDot11NetworksResponse(struct soap*, _tds__ScanAvailableDot11NetworksResponse *, const char*, const char*);

inline int soap_read__tds__ScanAvailableDot11NetworksResponse(struct soap *soap, _tds__ScanAvailableDot11NetworksResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__ScanAvailableDot11NetworksResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__ScanAvailableDot11Networks_DEFINED
#define SOAP_TYPE__tds__ScanAvailableDot11Networks_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__ScanAvailableDot11Networks(struct soap*, const char*, int, const _tds__ScanAvailableDot11Networks *, const char*);
SOAP_FMAC3 _tds__ScanAvailableDot11Networks * SOAP_FMAC4 soap_in__tds__ScanAvailableDot11Networks(struct soap*, const char*, _tds__ScanAvailableDot11Networks *, const char*);
SOAP_FMAC1 _tds__ScanAvailableDot11Networks * SOAP_FMAC2 soap_instantiate__tds__ScanAvailableDot11Networks(struct soap*, int, const char*, const char*, size_t*);

inline _tds__ScanAvailableDot11Networks * soap_new__tds__ScanAvailableDot11Networks(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__ScanAvailableDot11Networks(soap, n, NULL, NULL, NULL);
}

inline _tds__ScanAvailableDot11Networks * soap_new_req__tds__ScanAvailableDot11Networks(
	struct soap *soap,
	const std::string& InterfaceToken)
{
	_tds__ScanAvailableDot11Networks *_p = soap_new__tds__ScanAvailableDot11Networks(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__ScanAvailableDot11Networks::InterfaceToken = InterfaceToken;
	}
	return _p;
}

inline _tds__ScanAvailableDot11Networks * soap_new_set__tds__ScanAvailableDot11Networks(
	struct soap *soap,
	const std::string& InterfaceToken)
{
	_tds__ScanAvailableDot11Networks *_p = soap_new__tds__ScanAvailableDot11Networks(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__ScanAvailableDot11Networks::InterfaceToken = InterfaceToken;
	}
	return _p;
}

inline int soap_write__tds__ScanAvailableDot11Networks(struct soap *soap, _tds__ScanAvailableDot11Networks const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:ScanAvailableDot11Networks", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__ScanAvailableDot11Networks * SOAP_FMAC4 soap_get__tds__ScanAvailableDot11Networks(struct soap*, _tds__ScanAvailableDot11Networks *, const char*, const char*);

inline int soap_read__tds__ScanAvailableDot11Networks(struct soap *soap, _tds__ScanAvailableDot11Networks *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__ScanAvailableDot11Networks(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__GetDot11StatusResponse_DEFINED
#define SOAP_TYPE__tds__GetDot11StatusResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetDot11StatusResponse(struct soap*, const char*, int, const _tds__GetDot11StatusResponse *, const char*);
SOAP_FMAC3 _tds__GetDot11StatusResponse * SOAP_FMAC4 soap_in__tds__GetDot11StatusResponse(struct soap*, const char*, _tds__GetDot11StatusResponse *, const char*);
SOAP_FMAC1 _tds__GetDot11StatusResponse * SOAP_FMAC2 soap_instantiate__tds__GetDot11StatusResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetDot11StatusResponse * soap_new__tds__GetDot11StatusResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetDot11StatusResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__GetDot11StatusResponse * soap_new_req__tds__GetDot11StatusResponse(
	struct soap *soap,
	tt__Dot11Status *Status)
{
	_tds__GetDot11StatusResponse *_p = soap_new__tds__GetDot11StatusResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetDot11StatusResponse::Status = Status;
	}
	return _p;
}

inline _tds__GetDot11StatusResponse * soap_new_set__tds__GetDot11StatusResponse(
	struct soap *soap,
	tt__Dot11Status *Status)
{
	_tds__GetDot11StatusResponse *_p = soap_new__tds__GetDot11StatusResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetDot11StatusResponse::Status = Status;
	}
	return _p;
}

inline int soap_write__tds__GetDot11StatusResponse(struct soap *soap, _tds__GetDot11StatusResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetDot11StatusResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetDot11StatusResponse * SOAP_FMAC4 soap_get__tds__GetDot11StatusResponse(struct soap*, _tds__GetDot11StatusResponse *, const char*, const char*);

inline int soap_read__tds__GetDot11StatusResponse(struct soap *soap, _tds__GetDot11StatusResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__GetDot11StatusResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__GetDot11Status_DEFINED
#define SOAP_TYPE__tds__GetDot11Status_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetDot11Status(struct soap*, const char*, int, const _tds__GetDot11Status *, const char*);
SOAP_FMAC3 _tds__GetDot11Status * SOAP_FMAC4 soap_in__tds__GetDot11Status(struct soap*, const char*, _tds__GetDot11Status *, const char*);
SOAP_FMAC1 _tds__GetDot11Status * SOAP_FMAC2 soap_instantiate__tds__GetDot11Status(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetDot11Status * soap_new__tds__GetDot11Status(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetDot11Status(soap, n, NULL, NULL, NULL);
}

inline _tds__GetDot11Status * soap_new_req__tds__GetDot11Status(
	struct soap *soap,
	const std::string& InterfaceToken)
{
	_tds__GetDot11Status *_p = soap_new__tds__GetDot11Status(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetDot11Status::InterfaceToken = InterfaceToken;
	}
	return _p;
}

inline _tds__GetDot11Status * soap_new_set__tds__GetDot11Status(
	struct soap *soap,
	const std::string& InterfaceToken)
{
	_tds__GetDot11Status *_p = soap_new__tds__GetDot11Status(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetDot11Status::InterfaceToken = InterfaceToken;
	}
	return _p;
}

inline int soap_write__tds__GetDot11Status(struct soap *soap, _tds__GetDot11Status const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetDot11Status", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetDot11Status * SOAP_FMAC4 soap_get__tds__GetDot11Status(struct soap*, _tds__GetDot11Status *, const char*, const char*);

inline int soap_read__tds__GetDot11Status(struct soap *soap, _tds__GetDot11Status *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__GetDot11Status(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__GetDot11CapabilitiesResponse_DEFINED
#define SOAP_TYPE__tds__GetDot11CapabilitiesResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetDot11CapabilitiesResponse(struct soap*, const char*, int, const _tds__GetDot11CapabilitiesResponse *, const char*);
SOAP_FMAC3 _tds__GetDot11CapabilitiesResponse * SOAP_FMAC4 soap_in__tds__GetDot11CapabilitiesResponse(struct soap*, const char*, _tds__GetDot11CapabilitiesResponse *, const char*);
SOAP_FMAC1 _tds__GetDot11CapabilitiesResponse * SOAP_FMAC2 soap_instantiate__tds__GetDot11CapabilitiesResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetDot11CapabilitiesResponse * soap_new__tds__GetDot11CapabilitiesResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetDot11CapabilitiesResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__GetDot11CapabilitiesResponse * soap_new_req__tds__GetDot11CapabilitiesResponse(
	struct soap *soap,
	tt__Dot11Capabilities *Capabilities)
{
	_tds__GetDot11CapabilitiesResponse *_p = soap_new__tds__GetDot11CapabilitiesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetDot11CapabilitiesResponse::Capabilities = Capabilities;
	}
	return _p;
}

inline _tds__GetDot11CapabilitiesResponse * soap_new_set__tds__GetDot11CapabilitiesResponse(
	struct soap *soap,
	tt__Dot11Capabilities *Capabilities)
{
	_tds__GetDot11CapabilitiesResponse *_p = soap_new__tds__GetDot11CapabilitiesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetDot11CapabilitiesResponse::Capabilities = Capabilities;
	}
	return _p;
}

inline int soap_write__tds__GetDot11CapabilitiesResponse(struct soap *soap, _tds__GetDot11CapabilitiesResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetDot11CapabilitiesResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetDot11CapabilitiesResponse * SOAP_FMAC4 soap_get__tds__GetDot11CapabilitiesResponse(struct soap*, _tds__GetDot11CapabilitiesResponse *, const char*, const char*);

inline int soap_read__tds__GetDot11CapabilitiesResponse(struct soap *soap, _tds__GetDot11CapabilitiesResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__GetDot11CapabilitiesResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__GetDot11Capabilities_DEFINED
#define SOAP_TYPE__tds__GetDot11Capabilities_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetDot11Capabilities(struct soap*, const char*, int, const _tds__GetDot11Capabilities *, const char*);
SOAP_FMAC3 _tds__GetDot11Capabilities * SOAP_FMAC4 soap_in__tds__GetDot11Capabilities(struct soap*, const char*, _tds__GetDot11Capabilities *, const char*);
SOAP_FMAC1 _tds__GetDot11Capabilities * SOAP_FMAC2 soap_instantiate__tds__GetDot11Capabilities(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetDot11Capabilities * soap_new__tds__GetDot11Capabilities(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetDot11Capabilities(soap, n, NULL, NULL, NULL);
}

inline _tds__GetDot11Capabilities * soap_new_req__tds__GetDot11Capabilities(
	struct soap *soap)
{
	_tds__GetDot11Capabilities *_p = soap_new__tds__GetDot11Capabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__GetDot11Capabilities * soap_new_set__tds__GetDot11Capabilities(
	struct soap *soap,
	const std::vector<char *> & __any)
{
	_tds__GetDot11Capabilities *_p = soap_new__tds__GetDot11Capabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetDot11Capabilities::__any = __any;
	}
	return _p;
}

inline int soap_write__tds__GetDot11Capabilities(struct soap *soap, _tds__GetDot11Capabilities const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetDot11Capabilities", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetDot11Capabilities * SOAP_FMAC4 soap_get__tds__GetDot11Capabilities(struct soap*, _tds__GetDot11Capabilities *, const char*, const char*);

inline int soap_read__tds__GetDot11Capabilities(struct soap *soap, _tds__GetDot11Capabilities *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__GetDot11Capabilities(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__SendAuxiliaryCommandResponse_DEFINED
#define SOAP_TYPE__tds__SendAuxiliaryCommandResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SendAuxiliaryCommandResponse(struct soap*, const char*, int, const _tds__SendAuxiliaryCommandResponse *, const char*);
SOAP_FMAC3 _tds__SendAuxiliaryCommandResponse * SOAP_FMAC4 soap_in__tds__SendAuxiliaryCommandResponse(struct soap*, const char*, _tds__SendAuxiliaryCommandResponse *, const char*);
SOAP_FMAC1 _tds__SendAuxiliaryCommandResponse * SOAP_FMAC2 soap_instantiate__tds__SendAuxiliaryCommandResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SendAuxiliaryCommandResponse * soap_new__tds__SendAuxiliaryCommandResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SendAuxiliaryCommandResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__SendAuxiliaryCommandResponse * soap_new_req__tds__SendAuxiliaryCommandResponse(
	struct soap *soap)
{
	_tds__SendAuxiliaryCommandResponse *_p = soap_new__tds__SendAuxiliaryCommandResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__SendAuxiliaryCommandResponse * soap_new_set__tds__SendAuxiliaryCommandResponse(
	struct soap *soap,
	std::string *AuxiliaryCommandResponse)
{
	_tds__SendAuxiliaryCommandResponse *_p = soap_new__tds__SendAuxiliaryCommandResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SendAuxiliaryCommandResponse::AuxiliaryCommandResponse = AuxiliaryCommandResponse;
	}
	return _p;
}

inline int soap_write__tds__SendAuxiliaryCommandResponse(struct soap *soap, _tds__SendAuxiliaryCommandResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SendAuxiliaryCommandResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SendAuxiliaryCommandResponse * SOAP_FMAC4 soap_get__tds__SendAuxiliaryCommandResponse(struct soap*, _tds__SendAuxiliaryCommandResponse *, const char*, const char*);

inline int soap_read__tds__SendAuxiliaryCommandResponse(struct soap *soap, _tds__SendAuxiliaryCommandResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__SendAuxiliaryCommandResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__SendAuxiliaryCommand_DEFINED
#define SOAP_TYPE__tds__SendAuxiliaryCommand_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SendAuxiliaryCommand(struct soap*, const char*, int, const _tds__SendAuxiliaryCommand *, const char*);
SOAP_FMAC3 _tds__SendAuxiliaryCommand * SOAP_FMAC4 soap_in__tds__SendAuxiliaryCommand(struct soap*, const char*, _tds__SendAuxiliaryCommand *, const char*);
SOAP_FMAC1 _tds__SendAuxiliaryCommand * SOAP_FMAC2 soap_instantiate__tds__SendAuxiliaryCommand(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SendAuxiliaryCommand * soap_new__tds__SendAuxiliaryCommand(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SendAuxiliaryCommand(soap, n, NULL, NULL, NULL);
}

inline _tds__SendAuxiliaryCommand * soap_new_req__tds__SendAuxiliaryCommand(
	struct soap *soap,
	const std::string& AuxiliaryCommand)
{
	_tds__SendAuxiliaryCommand *_p = soap_new__tds__SendAuxiliaryCommand(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SendAuxiliaryCommand::AuxiliaryCommand = AuxiliaryCommand;
	}
	return _p;
}

inline _tds__SendAuxiliaryCommand * soap_new_set__tds__SendAuxiliaryCommand(
	struct soap *soap,
	const std::string& AuxiliaryCommand)
{
	_tds__SendAuxiliaryCommand *_p = soap_new__tds__SendAuxiliaryCommand(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SendAuxiliaryCommand::AuxiliaryCommand = AuxiliaryCommand;
	}
	return _p;
}

inline int soap_write__tds__SendAuxiliaryCommand(struct soap *soap, _tds__SendAuxiliaryCommand const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SendAuxiliaryCommand", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SendAuxiliaryCommand * SOAP_FMAC4 soap_get__tds__SendAuxiliaryCommand(struct soap*, _tds__SendAuxiliaryCommand *, const char*, const char*);

inline int soap_read__tds__SendAuxiliaryCommand(struct soap *soap, _tds__SendAuxiliaryCommand *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__SendAuxiliaryCommand(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__SetRelayOutputStateResponse_DEFINED
#define SOAP_TYPE__tds__SetRelayOutputStateResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetRelayOutputStateResponse(struct soap*, const char*, int, const _tds__SetRelayOutputStateResponse *, const char*);
SOAP_FMAC3 _tds__SetRelayOutputStateResponse * SOAP_FMAC4 soap_in__tds__SetRelayOutputStateResponse(struct soap*, const char*, _tds__SetRelayOutputStateResponse *, const char*);
SOAP_FMAC1 _tds__SetRelayOutputStateResponse * SOAP_FMAC2 soap_instantiate__tds__SetRelayOutputStateResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetRelayOutputStateResponse * soap_new__tds__SetRelayOutputStateResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetRelayOutputStateResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__SetRelayOutputStateResponse * soap_new_req__tds__SetRelayOutputStateResponse(
	struct soap *soap)
{
	_tds__SetRelayOutputStateResponse *_p = soap_new__tds__SetRelayOutputStateResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__SetRelayOutputStateResponse * soap_new_set__tds__SetRelayOutputStateResponse(
	struct soap *soap)
{
	_tds__SetRelayOutputStateResponse *_p = soap_new__tds__SetRelayOutputStateResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__SetRelayOutputStateResponse(struct soap *soap, _tds__SetRelayOutputStateResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetRelayOutputStateResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetRelayOutputStateResponse * SOAP_FMAC4 soap_get__tds__SetRelayOutputStateResponse(struct soap*, _tds__SetRelayOutputStateResponse *, const char*, const char*);

inline int soap_read__tds__SetRelayOutputStateResponse(struct soap *soap, _tds__SetRelayOutputStateResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__SetRelayOutputStateResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__SetRelayOutputState_DEFINED
#define SOAP_TYPE__tds__SetRelayOutputState_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetRelayOutputState(struct soap*, const char*, int, const _tds__SetRelayOutputState *, const char*);
SOAP_FMAC3 _tds__SetRelayOutputState * SOAP_FMAC4 soap_in__tds__SetRelayOutputState(struct soap*, const char*, _tds__SetRelayOutputState *, const char*);
SOAP_FMAC1 _tds__SetRelayOutputState * SOAP_FMAC2 soap_instantiate__tds__SetRelayOutputState(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetRelayOutputState * soap_new__tds__SetRelayOutputState(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetRelayOutputState(soap, n, NULL, NULL, NULL);
}

inline _tds__SetRelayOutputState * soap_new_req__tds__SetRelayOutputState(
	struct soap *soap,
	const std::string& RelayOutputToken,
	enum tt__RelayLogicalState LogicalState)
{
	_tds__SetRelayOutputState *_p = soap_new__tds__SetRelayOutputState(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetRelayOutputState::RelayOutputToken = RelayOutputToken;
		_p->_tds__SetRelayOutputState::LogicalState = LogicalState;
	}
	return _p;
}

inline _tds__SetRelayOutputState * soap_new_set__tds__SetRelayOutputState(
	struct soap *soap,
	const std::string& RelayOutputToken,
	enum tt__RelayLogicalState LogicalState)
{
	_tds__SetRelayOutputState *_p = soap_new__tds__SetRelayOutputState(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetRelayOutputState::RelayOutputToken = RelayOutputToken;
		_p->_tds__SetRelayOutputState::LogicalState = LogicalState;
	}
	return _p;
}

inline int soap_write__tds__SetRelayOutputState(struct soap *soap, _tds__SetRelayOutputState const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetRelayOutputState", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetRelayOutputState * SOAP_FMAC4 soap_get__tds__SetRelayOutputState(struct soap*, _tds__SetRelayOutputState *, const char*, const char*);

inline int soap_read__tds__SetRelayOutputState(struct soap *soap, _tds__SetRelayOutputState *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__SetRelayOutputState(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__SetRelayOutputSettingsResponse_DEFINED
#define SOAP_TYPE__tds__SetRelayOutputSettingsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetRelayOutputSettingsResponse(struct soap*, const char*, int, const _tds__SetRelayOutputSettingsResponse *, const char*);
SOAP_FMAC3 _tds__SetRelayOutputSettingsResponse * SOAP_FMAC4 soap_in__tds__SetRelayOutputSettingsResponse(struct soap*, const char*, _tds__SetRelayOutputSettingsResponse *, const char*);
SOAP_FMAC1 _tds__SetRelayOutputSettingsResponse * SOAP_FMAC2 soap_instantiate__tds__SetRelayOutputSettingsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetRelayOutputSettingsResponse * soap_new__tds__SetRelayOutputSettingsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetRelayOutputSettingsResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__SetRelayOutputSettingsResponse * soap_new_req__tds__SetRelayOutputSettingsResponse(
	struct soap *soap)
{
	_tds__SetRelayOutputSettingsResponse *_p = soap_new__tds__SetRelayOutputSettingsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__SetRelayOutputSettingsResponse * soap_new_set__tds__SetRelayOutputSettingsResponse(
	struct soap *soap)
{
	_tds__SetRelayOutputSettingsResponse *_p = soap_new__tds__SetRelayOutputSettingsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__SetRelayOutputSettingsResponse(struct soap *soap, _tds__SetRelayOutputSettingsResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetRelayOutputSettingsResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetRelayOutputSettingsResponse * SOAP_FMAC4 soap_get__tds__SetRelayOutputSettingsResponse(struct soap*, _tds__SetRelayOutputSettingsResponse *, const char*, const char*);

inline int soap_read__tds__SetRelayOutputSettingsResponse(struct soap *soap, _tds__SetRelayOutputSettingsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__SetRelayOutputSettingsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__SetRelayOutputSettings_DEFINED
#define SOAP_TYPE__tds__SetRelayOutputSettings_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetRelayOutputSettings(struct soap*, const char*, int, const _tds__SetRelayOutputSettings *, const char*);
SOAP_FMAC3 _tds__SetRelayOutputSettings * SOAP_FMAC4 soap_in__tds__SetRelayOutputSettings(struct soap*, const char*, _tds__SetRelayOutputSettings *, const char*);
SOAP_FMAC1 _tds__SetRelayOutputSettings * SOAP_FMAC2 soap_instantiate__tds__SetRelayOutputSettings(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetRelayOutputSettings * soap_new__tds__SetRelayOutputSettings(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetRelayOutputSettings(soap, n, NULL, NULL, NULL);
}

inline _tds__SetRelayOutputSettings * soap_new_req__tds__SetRelayOutputSettings(
	struct soap *soap,
	const std::string& RelayOutputToken,
	tt__RelayOutputSettings *Properties)
{
	_tds__SetRelayOutputSettings *_p = soap_new__tds__SetRelayOutputSettings(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetRelayOutputSettings::RelayOutputToken = RelayOutputToken;
		_p->_tds__SetRelayOutputSettings::Properties = Properties;
	}
	return _p;
}

inline _tds__SetRelayOutputSettings * soap_new_set__tds__SetRelayOutputSettings(
	struct soap *soap,
	const std::string& RelayOutputToken,
	tt__RelayOutputSettings *Properties)
{
	_tds__SetRelayOutputSettings *_p = soap_new__tds__SetRelayOutputSettings(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetRelayOutputSettings::RelayOutputToken = RelayOutputToken;
		_p->_tds__SetRelayOutputSettings::Properties = Properties;
	}
	return _p;
}

inline int soap_write__tds__SetRelayOutputSettings(struct soap *soap, _tds__SetRelayOutputSettings const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetRelayOutputSettings", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetRelayOutputSettings * SOAP_FMAC4 soap_get__tds__SetRelayOutputSettings(struct soap*, _tds__SetRelayOutputSettings *, const char*, const char*);

inline int soap_read__tds__SetRelayOutputSettings(struct soap *soap, _tds__SetRelayOutputSettings *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__SetRelayOutputSettings(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__GetRelayOutputsResponse_DEFINED
#define SOAP_TYPE__tds__GetRelayOutputsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetRelayOutputsResponse(struct soap*, const char*, int, const _tds__GetRelayOutputsResponse *, const char*);
SOAP_FMAC3 _tds__GetRelayOutputsResponse * SOAP_FMAC4 soap_in__tds__GetRelayOutputsResponse(struct soap*, const char*, _tds__GetRelayOutputsResponse *, const char*);
SOAP_FMAC1 _tds__GetRelayOutputsResponse * SOAP_FMAC2 soap_instantiate__tds__GetRelayOutputsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetRelayOutputsResponse * soap_new__tds__GetRelayOutputsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetRelayOutputsResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__GetRelayOutputsResponse * soap_new_req__tds__GetRelayOutputsResponse(
	struct soap *soap)
{
	_tds__GetRelayOutputsResponse *_p = soap_new__tds__GetRelayOutputsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__GetRelayOutputsResponse * soap_new_set__tds__GetRelayOutputsResponse(
	struct soap *soap,
	const std::vector<tt__RelayOutput *> & RelayOutputs)
{
	_tds__GetRelayOutputsResponse *_p = soap_new__tds__GetRelayOutputsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetRelayOutputsResponse::RelayOutputs = RelayOutputs;
	}
	return _p;
}

inline int soap_write__tds__GetRelayOutputsResponse(struct soap *soap, _tds__GetRelayOutputsResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetRelayOutputsResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetRelayOutputsResponse * SOAP_FMAC4 soap_get__tds__GetRelayOutputsResponse(struct soap*, _tds__GetRelayOutputsResponse *, const char*, const char*);

inline int soap_read__tds__GetRelayOutputsResponse(struct soap *soap, _tds__GetRelayOutputsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__GetRelayOutputsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__GetRelayOutputs_DEFINED
#define SOAP_TYPE__tds__GetRelayOutputs_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetRelayOutputs(struct soap*, const char*, int, const _tds__GetRelayOutputs *, const char*);
SOAP_FMAC3 _tds__GetRelayOutputs * SOAP_FMAC4 soap_in__tds__GetRelayOutputs(struct soap*, const char*, _tds__GetRelayOutputs *, const char*);
SOAP_FMAC1 _tds__GetRelayOutputs * SOAP_FMAC2 soap_instantiate__tds__GetRelayOutputs(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetRelayOutputs * soap_new__tds__GetRelayOutputs(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetRelayOutputs(soap, n, NULL, NULL, NULL);
}

inline _tds__GetRelayOutputs * soap_new_req__tds__GetRelayOutputs(
	struct soap *soap)
{
	_tds__GetRelayOutputs *_p = soap_new__tds__GetRelayOutputs(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__GetRelayOutputs * soap_new_set__tds__GetRelayOutputs(
	struct soap *soap)
{
	_tds__GetRelayOutputs *_p = soap_new__tds__GetRelayOutputs(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__GetRelayOutputs(struct soap *soap, _tds__GetRelayOutputs const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetRelayOutputs", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetRelayOutputs * SOAP_FMAC4 soap_get__tds__GetRelayOutputs(struct soap*, _tds__GetRelayOutputs *, const char*, const char*);

inline int soap_read__tds__GetRelayOutputs(struct soap *soap, _tds__GetRelayOutputs *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__GetRelayOutputs(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__DeleteDot1XConfigurationResponse_DEFINED
#define SOAP_TYPE__tds__DeleteDot1XConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__DeleteDot1XConfigurationResponse(struct soap*, const char*, int, const _tds__DeleteDot1XConfigurationResponse *, const char*);
SOAP_FMAC3 _tds__DeleteDot1XConfigurationResponse * SOAP_FMAC4 soap_in__tds__DeleteDot1XConfigurationResponse(struct soap*, const char*, _tds__DeleteDot1XConfigurationResponse *, const char*);
SOAP_FMAC1 _tds__DeleteDot1XConfigurationResponse * SOAP_FMAC2 soap_instantiate__tds__DeleteDot1XConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__DeleteDot1XConfigurationResponse * soap_new__tds__DeleteDot1XConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__DeleteDot1XConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__DeleteDot1XConfigurationResponse * soap_new_req__tds__DeleteDot1XConfigurationResponse(
	struct soap *soap)
{
	_tds__DeleteDot1XConfigurationResponse *_p = soap_new__tds__DeleteDot1XConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__DeleteDot1XConfigurationResponse * soap_new_set__tds__DeleteDot1XConfigurationResponse(
	struct soap *soap)
{
	_tds__DeleteDot1XConfigurationResponse *_p = soap_new__tds__DeleteDot1XConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__DeleteDot1XConfigurationResponse(struct soap *soap, _tds__DeleteDot1XConfigurationResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:DeleteDot1XConfigurationResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__DeleteDot1XConfigurationResponse * SOAP_FMAC4 soap_get__tds__DeleteDot1XConfigurationResponse(struct soap*, _tds__DeleteDot1XConfigurationResponse *, const char*, const char*);

inline int soap_read__tds__DeleteDot1XConfigurationResponse(struct soap *soap, _tds__DeleteDot1XConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__DeleteDot1XConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__DeleteDot1XConfiguration_DEFINED
#define SOAP_TYPE__tds__DeleteDot1XConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__DeleteDot1XConfiguration(struct soap*, const char*, int, const _tds__DeleteDot1XConfiguration *, const char*);
SOAP_FMAC3 _tds__DeleteDot1XConfiguration * SOAP_FMAC4 soap_in__tds__DeleteDot1XConfiguration(struct soap*, const char*, _tds__DeleteDot1XConfiguration *, const char*);
SOAP_FMAC1 _tds__DeleteDot1XConfiguration * SOAP_FMAC2 soap_instantiate__tds__DeleteDot1XConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _tds__DeleteDot1XConfiguration * soap_new__tds__DeleteDot1XConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__DeleteDot1XConfiguration(soap, n, NULL, NULL, NULL);
}

inline _tds__DeleteDot1XConfiguration * soap_new_req__tds__DeleteDot1XConfiguration(
	struct soap *soap)
{
	_tds__DeleteDot1XConfiguration *_p = soap_new__tds__DeleteDot1XConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__DeleteDot1XConfiguration * soap_new_set__tds__DeleteDot1XConfiguration(
	struct soap *soap,
	const std::vector<std::string> & Dot1XConfigurationToken)
{
	_tds__DeleteDot1XConfiguration *_p = soap_new__tds__DeleteDot1XConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__DeleteDot1XConfiguration::Dot1XConfigurationToken = Dot1XConfigurationToken;
	}
	return _p;
}

inline int soap_write__tds__DeleteDot1XConfiguration(struct soap *soap, _tds__DeleteDot1XConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:DeleteDot1XConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__DeleteDot1XConfiguration * SOAP_FMAC4 soap_get__tds__DeleteDot1XConfiguration(struct soap*, _tds__DeleteDot1XConfiguration *, const char*, const char*);

inline int soap_read__tds__DeleteDot1XConfiguration(struct soap *soap, _tds__DeleteDot1XConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__DeleteDot1XConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__GetDot1XConfigurationsResponse_DEFINED
#define SOAP_TYPE__tds__GetDot1XConfigurationsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetDot1XConfigurationsResponse(struct soap*, const char*, int, const _tds__GetDot1XConfigurationsResponse *, const char*);
SOAP_FMAC3 _tds__GetDot1XConfigurationsResponse * SOAP_FMAC4 soap_in__tds__GetDot1XConfigurationsResponse(struct soap*, const char*, _tds__GetDot1XConfigurationsResponse *, const char*);
SOAP_FMAC1 _tds__GetDot1XConfigurationsResponse * SOAP_FMAC2 soap_instantiate__tds__GetDot1XConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetDot1XConfigurationsResponse * soap_new__tds__GetDot1XConfigurationsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetDot1XConfigurationsResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__GetDot1XConfigurationsResponse * soap_new_req__tds__GetDot1XConfigurationsResponse(
	struct soap *soap)
{
	_tds__GetDot1XConfigurationsResponse *_p = soap_new__tds__GetDot1XConfigurationsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__GetDot1XConfigurationsResponse * soap_new_set__tds__GetDot1XConfigurationsResponse(
	struct soap *soap,
	const std::vector<tt__Dot1XConfiguration *> & Dot1XConfiguration)
{
	_tds__GetDot1XConfigurationsResponse *_p = soap_new__tds__GetDot1XConfigurationsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetDot1XConfigurationsResponse::Dot1XConfiguration = Dot1XConfiguration;
	}
	return _p;
}

inline int soap_write__tds__GetDot1XConfigurationsResponse(struct soap *soap, _tds__GetDot1XConfigurationsResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetDot1XConfigurationsResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetDot1XConfigurationsResponse * SOAP_FMAC4 soap_get__tds__GetDot1XConfigurationsResponse(struct soap*, _tds__GetDot1XConfigurationsResponse *, const char*, const char*);

inline int soap_read__tds__GetDot1XConfigurationsResponse(struct soap *soap, _tds__GetDot1XConfigurationsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__GetDot1XConfigurationsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__GetDot1XConfigurations_DEFINED
#define SOAP_TYPE__tds__GetDot1XConfigurations_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetDot1XConfigurations(struct soap*, const char*, int, const _tds__GetDot1XConfigurations *, const char*);
SOAP_FMAC3 _tds__GetDot1XConfigurations * SOAP_FMAC4 soap_in__tds__GetDot1XConfigurations(struct soap*, const char*, _tds__GetDot1XConfigurations *, const char*);
SOAP_FMAC1 _tds__GetDot1XConfigurations * SOAP_FMAC2 soap_instantiate__tds__GetDot1XConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetDot1XConfigurations * soap_new__tds__GetDot1XConfigurations(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetDot1XConfigurations(soap, n, NULL, NULL, NULL);
}

inline _tds__GetDot1XConfigurations * soap_new_req__tds__GetDot1XConfigurations(
	struct soap *soap)
{
	_tds__GetDot1XConfigurations *_p = soap_new__tds__GetDot1XConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__GetDot1XConfigurations * soap_new_set__tds__GetDot1XConfigurations(
	struct soap *soap)
{
	_tds__GetDot1XConfigurations *_p = soap_new__tds__GetDot1XConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__GetDot1XConfigurations(struct soap *soap, _tds__GetDot1XConfigurations const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetDot1XConfigurations", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetDot1XConfigurations * SOAP_FMAC4 soap_get__tds__GetDot1XConfigurations(struct soap*, _tds__GetDot1XConfigurations *, const char*, const char*);

inline int soap_read__tds__GetDot1XConfigurations(struct soap *soap, _tds__GetDot1XConfigurations *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__GetDot1XConfigurations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__GetDot1XConfigurationResponse_DEFINED
#define SOAP_TYPE__tds__GetDot1XConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetDot1XConfigurationResponse(struct soap*, const char*, int, const _tds__GetDot1XConfigurationResponse *, const char*);
SOAP_FMAC3 _tds__GetDot1XConfigurationResponse * SOAP_FMAC4 soap_in__tds__GetDot1XConfigurationResponse(struct soap*, const char*, _tds__GetDot1XConfigurationResponse *, const char*);
SOAP_FMAC1 _tds__GetDot1XConfigurationResponse * SOAP_FMAC2 soap_instantiate__tds__GetDot1XConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetDot1XConfigurationResponse * soap_new__tds__GetDot1XConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetDot1XConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__GetDot1XConfigurationResponse * soap_new_req__tds__GetDot1XConfigurationResponse(
	struct soap *soap,
	tt__Dot1XConfiguration *Dot1XConfiguration)
{
	_tds__GetDot1XConfigurationResponse *_p = soap_new__tds__GetDot1XConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetDot1XConfigurationResponse::Dot1XConfiguration = Dot1XConfiguration;
	}
	return _p;
}

inline _tds__GetDot1XConfigurationResponse * soap_new_set__tds__GetDot1XConfigurationResponse(
	struct soap *soap,
	tt__Dot1XConfiguration *Dot1XConfiguration)
{
	_tds__GetDot1XConfigurationResponse *_p = soap_new__tds__GetDot1XConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetDot1XConfigurationResponse::Dot1XConfiguration = Dot1XConfiguration;
	}
	return _p;
}

inline int soap_write__tds__GetDot1XConfigurationResponse(struct soap *soap, _tds__GetDot1XConfigurationResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetDot1XConfigurationResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetDot1XConfigurationResponse * SOAP_FMAC4 soap_get__tds__GetDot1XConfigurationResponse(struct soap*, _tds__GetDot1XConfigurationResponse *, const char*, const char*);

inline int soap_read__tds__GetDot1XConfigurationResponse(struct soap *soap, _tds__GetDot1XConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__GetDot1XConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__GetDot1XConfiguration_DEFINED
#define SOAP_TYPE__tds__GetDot1XConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetDot1XConfiguration(struct soap*, const char*, int, const _tds__GetDot1XConfiguration *, const char*);
SOAP_FMAC3 _tds__GetDot1XConfiguration * SOAP_FMAC4 soap_in__tds__GetDot1XConfiguration(struct soap*, const char*, _tds__GetDot1XConfiguration *, const char*);
SOAP_FMAC1 _tds__GetDot1XConfiguration * SOAP_FMAC2 soap_instantiate__tds__GetDot1XConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetDot1XConfiguration * soap_new__tds__GetDot1XConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetDot1XConfiguration(soap, n, NULL, NULL, NULL);
}

inline _tds__GetDot1XConfiguration * soap_new_req__tds__GetDot1XConfiguration(
	struct soap *soap,
	const std::string& Dot1XConfigurationToken)
{
	_tds__GetDot1XConfiguration *_p = soap_new__tds__GetDot1XConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetDot1XConfiguration::Dot1XConfigurationToken = Dot1XConfigurationToken;
	}
	return _p;
}

inline _tds__GetDot1XConfiguration * soap_new_set__tds__GetDot1XConfiguration(
	struct soap *soap,
	const std::string& Dot1XConfigurationToken)
{
	_tds__GetDot1XConfiguration *_p = soap_new__tds__GetDot1XConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetDot1XConfiguration::Dot1XConfigurationToken = Dot1XConfigurationToken;
	}
	return _p;
}

inline int soap_write__tds__GetDot1XConfiguration(struct soap *soap, _tds__GetDot1XConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetDot1XConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetDot1XConfiguration * SOAP_FMAC4 soap_get__tds__GetDot1XConfiguration(struct soap*, _tds__GetDot1XConfiguration *, const char*, const char*);

inline int soap_read__tds__GetDot1XConfiguration(struct soap *soap, _tds__GetDot1XConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__GetDot1XConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__SetDot1XConfigurationResponse_DEFINED
#define SOAP_TYPE__tds__SetDot1XConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetDot1XConfigurationResponse(struct soap*, const char*, int, const _tds__SetDot1XConfigurationResponse *, const char*);
SOAP_FMAC3 _tds__SetDot1XConfigurationResponse * SOAP_FMAC4 soap_in__tds__SetDot1XConfigurationResponse(struct soap*, const char*, _tds__SetDot1XConfigurationResponse *, const char*);
SOAP_FMAC1 _tds__SetDot1XConfigurationResponse * SOAP_FMAC2 soap_instantiate__tds__SetDot1XConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetDot1XConfigurationResponse * soap_new__tds__SetDot1XConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetDot1XConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__SetDot1XConfigurationResponse * soap_new_req__tds__SetDot1XConfigurationResponse(
	struct soap *soap)
{
	_tds__SetDot1XConfigurationResponse *_p = soap_new__tds__SetDot1XConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__SetDot1XConfigurationResponse * soap_new_set__tds__SetDot1XConfigurationResponse(
	struct soap *soap)
{
	_tds__SetDot1XConfigurationResponse *_p = soap_new__tds__SetDot1XConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__SetDot1XConfigurationResponse(struct soap *soap, _tds__SetDot1XConfigurationResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetDot1XConfigurationResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetDot1XConfigurationResponse * SOAP_FMAC4 soap_get__tds__SetDot1XConfigurationResponse(struct soap*, _tds__SetDot1XConfigurationResponse *, const char*, const char*);

inline int soap_read__tds__SetDot1XConfigurationResponse(struct soap *soap, _tds__SetDot1XConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__SetDot1XConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__SetDot1XConfiguration_DEFINED
#define SOAP_TYPE__tds__SetDot1XConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetDot1XConfiguration(struct soap*, const char*, int, const _tds__SetDot1XConfiguration *, const char*);
SOAP_FMAC3 _tds__SetDot1XConfiguration * SOAP_FMAC4 soap_in__tds__SetDot1XConfiguration(struct soap*, const char*, _tds__SetDot1XConfiguration *, const char*);
SOAP_FMAC1 _tds__SetDot1XConfiguration * SOAP_FMAC2 soap_instantiate__tds__SetDot1XConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetDot1XConfiguration * soap_new__tds__SetDot1XConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetDot1XConfiguration(soap, n, NULL, NULL, NULL);
}

inline _tds__SetDot1XConfiguration * soap_new_req__tds__SetDot1XConfiguration(
	struct soap *soap,
	tt__Dot1XConfiguration *Dot1XConfiguration)
{
	_tds__SetDot1XConfiguration *_p = soap_new__tds__SetDot1XConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetDot1XConfiguration::Dot1XConfiguration = Dot1XConfiguration;
	}
	return _p;
}

inline _tds__SetDot1XConfiguration * soap_new_set__tds__SetDot1XConfiguration(
	struct soap *soap,
	tt__Dot1XConfiguration *Dot1XConfiguration)
{
	_tds__SetDot1XConfiguration *_p = soap_new__tds__SetDot1XConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetDot1XConfiguration::Dot1XConfiguration = Dot1XConfiguration;
	}
	return _p;
}

inline int soap_write__tds__SetDot1XConfiguration(struct soap *soap, _tds__SetDot1XConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetDot1XConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetDot1XConfiguration * SOAP_FMAC4 soap_get__tds__SetDot1XConfiguration(struct soap*, _tds__SetDot1XConfiguration *, const char*, const char*);

inline int soap_read__tds__SetDot1XConfiguration(struct soap *soap, _tds__SetDot1XConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__SetDot1XConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__CreateDot1XConfigurationResponse_DEFINED
#define SOAP_TYPE__tds__CreateDot1XConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__CreateDot1XConfigurationResponse(struct soap*, const char*, int, const _tds__CreateDot1XConfigurationResponse *, const char*);
SOAP_FMAC3 _tds__CreateDot1XConfigurationResponse * SOAP_FMAC4 soap_in__tds__CreateDot1XConfigurationResponse(struct soap*, const char*, _tds__CreateDot1XConfigurationResponse *, const char*);
SOAP_FMAC1 _tds__CreateDot1XConfigurationResponse * SOAP_FMAC2 soap_instantiate__tds__CreateDot1XConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__CreateDot1XConfigurationResponse * soap_new__tds__CreateDot1XConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__CreateDot1XConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__CreateDot1XConfigurationResponse * soap_new_req__tds__CreateDot1XConfigurationResponse(
	struct soap *soap)
{
	_tds__CreateDot1XConfigurationResponse *_p = soap_new__tds__CreateDot1XConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__CreateDot1XConfigurationResponse * soap_new_set__tds__CreateDot1XConfigurationResponse(
	struct soap *soap)
{
	_tds__CreateDot1XConfigurationResponse *_p = soap_new__tds__CreateDot1XConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__CreateDot1XConfigurationResponse(struct soap *soap, _tds__CreateDot1XConfigurationResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:CreateDot1XConfigurationResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__CreateDot1XConfigurationResponse * SOAP_FMAC4 soap_get__tds__CreateDot1XConfigurationResponse(struct soap*, _tds__CreateDot1XConfigurationResponse *, const char*, const char*);

inline int soap_read__tds__CreateDot1XConfigurationResponse(struct soap *soap, _tds__CreateDot1XConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__CreateDot1XConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__CreateDot1XConfiguration_DEFINED
#define SOAP_TYPE__tds__CreateDot1XConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__CreateDot1XConfiguration(struct soap*, const char*, int, const _tds__CreateDot1XConfiguration *, const char*);
SOAP_FMAC3 _tds__CreateDot1XConfiguration * SOAP_FMAC4 soap_in__tds__CreateDot1XConfiguration(struct soap*, const char*, _tds__CreateDot1XConfiguration *, const char*);
SOAP_FMAC1 _tds__CreateDot1XConfiguration * SOAP_FMAC2 soap_instantiate__tds__CreateDot1XConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _tds__CreateDot1XConfiguration * soap_new__tds__CreateDot1XConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__CreateDot1XConfiguration(soap, n, NULL, NULL, NULL);
}

inline _tds__CreateDot1XConfiguration * soap_new_req__tds__CreateDot1XConfiguration(
	struct soap *soap,
	tt__Dot1XConfiguration *Dot1XConfiguration)
{
	_tds__CreateDot1XConfiguration *_p = soap_new__tds__CreateDot1XConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__CreateDot1XConfiguration::Dot1XConfiguration = Dot1XConfiguration;
	}
	return _p;
}

inline _tds__CreateDot1XConfiguration * soap_new_set__tds__CreateDot1XConfiguration(
	struct soap *soap,
	tt__Dot1XConfiguration *Dot1XConfiguration)
{
	_tds__CreateDot1XConfiguration *_p = soap_new__tds__CreateDot1XConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__CreateDot1XConfiguration::Dot1XConfiguration = Dot1XConfiguration;
	}
	return _p;
}

inline int soap_write__tds__CreateDot1XConfiguration(struct soap *soap, _tds__CreateDot1XConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:CreateDot1XConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__CreateDot1XConfiguration * SOAP_FMAC4 soap_get__tds__CreateDot1XConfiguration(struct soap*, _tds__CreateDot1XConfiguration *, const char*, const char*);

inline int soap_read__tds__CreateDot1XConfiguration(struct soap *soap, _tds__CreateDot1XConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__CreateDot1XConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__LoadCACertificatesResponse_DEFINED
#define SOAP_TYPE__tds__LoadCACertificatesResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__LoadCACertificatesResponse(struct soap*, const char*, int, const _tds__LoadCACertificatesResponse *, const char*);
SOAP_FMAC3 _tds__LoadCACertificatesResponse * SOAP_FMAC4 soap_in__tds__LoadCACertificatesResponse(struct soap*, const char*, _tds__LoadCACertificatesResponse *, const char*);
SOAP_FMAC1 _tds__LoadCACertificatesResponse * SOAP_FMAC2 soap_instantiate__tds__LoadCACertificatesResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__LoadCACertificatesResponse * soap_new__tds__LoadCACertificatesResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__LoadCACertificatesResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__LoadCACertificatesResponse * soap_new_req__tds__LoadCACertificatesResponse(
	struct soap *soap)
{
	_tds__LoadCACertificatesResponse *_p = soap_new__tds__LoadCACertificatesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__LoadCACertificatesResponse * soap_new_set__tds__LoadCACertificatesResponse(
	struct soap *soap)
{
	_tds__LoadCACertificatesResponse *_p = soap_new__tds__LoadCACertificatesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__LoadCACertificatesResponse(struct soap *soap, _tds__LoadCACertificatesResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:LoadCACertificatesResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__LoadCACertificatesResponse * SOAP_FMAC4 soap_get__tds__LoadCACertificatesResponse(struct soap*, _tds__LoadCACertificatesResponse *, const char*, const char*);

inline int soap_read__tds__LoadCACertificatesResponse(struct soap *soap, _tds__LoadCACertificatesResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__LoadCACertificatesResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__LoadCACertificates_DEFINED
#define SOAP_TYPE__tds__LoadCACertificates_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__LoadCACertificates(struct soap*, const char*, int, const _tds__LoadCACertificates *, const char*);
SOAP_FMAC3 _tds__LoadCACertificates * SOAP_FMAC4 soap_in__tds__LoadCACertificates(struct soap*, const char*, _tds__LoadCACertificates *, const char*);
SOAP_FMAC1 _tds__LoadCACertificates * SOAP_FMAC2 soap_instantiate__tds__LoadCACertificates(struct soap*, int, const char*, const char*, size_t*);

inline _tds__LoadCACertificates * soap_new__tds__LoadCACertificates(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__LoadCACertificates(soap, n, NULL, NULL, NULL);
}

inline _tds__LoadCACertificates * soap_new_req__tds__LoadCACertificates(
	struct soap *soap,
	const std::vector<tt__Certificate *> & CACertificate)
{
	_tds__LoadCACertificates *_p = soap_new__tds__LoadCACertificates(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__LoadCACertificates::CACertificate = CACertificate;
	}
	return _p;
}

inline _tds__LoadCACertificates * soap_new_set__tds__LoadCACertificates(
	struct soap *soap,
	const std::vector<tt__Certificate *> & CACertificate)
{
	_tds__LoadCACertificates *_p = soap_new__tds__LoadCACertificates(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__LoadCACertificates::CACertificate = CACertificate;
	}
	return _p;
}

inline int soap_write__tds__LoadCACertificates(struct soap *soap, _tds__LoadCACertificates const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:LoadCACertificates", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__LoadCACertificates * SOAP_FMAC4 soap_get__tds__LoadCACertificates(struct soap*, _tds__LoadCACertificates *, const char*, const char*);

inline int soap_read__tds__LoadCACertificates(struct soap *soap, _tds__LoadCACertificates *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__LoadCACertificates(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__GetCertificateInformationResponse_DEFINED
#define SOAP_TYPE__tds__GetCertificateInformationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetCertificateInformationResponse(struct soap*, const char*, int, const _tds__GetCertificateInformationResponse *, const char*);
SOAP_FMAC3 _tds__GetCertificateInformationResponse * SOAP_FMAC4 soap_in__tds__GetCertificateInformationResponse(struct soap*, const char*, _tds__GetCertificateInformationResponse *, const char*);
SOAP_FMAC1 _tds__GetCertificateInformationResponse * SOAP_FMAC2 soap_instantiate__tds__GetCertificateInformationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetCertificateInformationResponse * soap_new__tds__GetCertificateInformationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetCertificateInformationResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__GetCertificateInformationResponse * soap_new_req__tds__GetCertificateInformationResponse(
	struct soap *soap,
	tt__CertificateInformation *CertificateInformation)
{
	_tds__GetCertificateInformationResponse *_p = soap_new__tds__GetCertificateInformationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetCertificateInformationResponse::CertificateInformation = CertificateInformation;
	}
	return _p;
}

inline _tds__GetCertificateInformationResponse * soap_new_set__tds__GetCertificateInformationResponse(
	struct soap *soap,
	tt__CertificateInformation *CertificateInformation)
{
	_tds__GetCertificateInformationResponse *_p = soap_new__tds__GetCertificateInformationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetCertificateInformationResponse::CertificateInformation = CertificateInformation;
	}
	return _p;
}

inline int soap_write__tds__GetCertificateInformationResponse(struct soap *soap, _tds__GetCertificateInformationResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetCertificateInformationResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetCertificateInformationResponse * SOAP_FMAC4 soap_get__tds__GetCertificateInformationResponse(struct soap*, _tds__GetCertificateInformationResponse *, const char*, const char*);

inline int soap_read__tds__GetCertificateInformationResponse(struct soap *soap, _tds__GetCertificateInformationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__GetCertificateInformationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__GetCertificateInformation_DEFINED
#define SOAP_TYPE__tds__GetCertificateInformation_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetCertificateInformation(struct soap*, const char*, int, const _tds__GetCertificateInformation *, const char*);
SOAP_FMAC3 _tds__GetCertificateInformation * SOAP_FMAC4 soap_in__tds__GetCertificateInformation(struct soap*, const char*, _tds__GetCertificateInformation *, const char*);
SOAP_FMAC1 _tds__GetCertificateInformation * SOAP_FMAC2 soap_instantiate__tds__GetCertificateInformation(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetCertificateInformation * soap_new__tds__GetCertificateInformation(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetCertificateInformation(soap, n, NULL, NULL, NULL);
}

inline _tds__GetCertificateInformation * soap_new_req__tds__GetCertificateInformation(
	struct soap *soap,
	const std::string& CertificateID)
{
	_tds__GetCertificateInformation *_p = soap_new__tds__GetCertificateInformation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetCertificateInformation::CertificateID = CertificateID;
	}
	return _p;
}

inline _tds__GetCertificateInformation * soap_new_set__tds__GetCertificateInformation(
	struct soap *soap,
	const std::string& CertificateID)
{
	_tds__GetCertificateInformation *_p = soap_new__tds__GetCertificateInformation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetCertificateInformation::CertificateID = CertificateID;
	}
	return _p;
}

inline int soap_write__tds__GetCertificateInformation(struct soap *soap, _tds__GetCertificateInformation const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetCertificateInformation", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetCertificateInformation * SOAP_FMAC4 soap_get__tds__GetCertificateInformation(struct soap*, _tds__GetCertificateInformation *, const char*, const char*);

inline int soap_read__tds__GetCertificateInformation(struct soap *soap, _tds__GetCertificateInformation *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__GetCertificateInformation(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__LoadCertificateWithPrivateKeyResponse_DEFINED
#define SOAP_TYPE__tds__LoadCertificateWithPrivateKeyResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__LoadCertificateWithPrivateKeyResponse(struct soap*, const char*, int, const _tds__LoadCertificateWithPrivateKeyResponse *, const char*);
SOAP_FMAC3 _tds__LoadCertificateWithPrivateKeyResponse * SOAP_FMAC4 soap_in__tds__LoadCertificateWithPrivateKeyResponse(struct soap*, const char*, _tds__LoadCertificateWithPrivateKeyResponse *, const char*);
SOAP_FMAC1 _tds__LoadCertificateWithPrivateKeyResponse * SOAP_FMAC2 soap_instantiate__tds__LoadCertificateWithPrivateKeyResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__LoadCertificateWithPrivateKeyResponse * soap_new__tds__LoadCertificateWithPrivateKeyResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__LoadCertificateWithPrivateKeyResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__LoadCertificateWithPrivateKeyResponse * soap_new_req__tds__LoadCertificateWithPrivateKeyResponse(
	struct soap *soap)
{
	_tds__LoadCertificateWithPrivateKeyResponse *_p = soap_new__tds__LoadCertificateWithPrivateKeyResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__LoadCertificateWithPrivateKeyResponse * soap_new_set__tds__LoadCertificateWithPrivateKeyResponse(
	struct soap *soap)
{
	_tds__LoadCertificateWithPrivateKeyResponse *_p = soap_new__tds__LoadCertificateWithPrivateKeyResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__LoadCertificateWithPrivateKeyResponse(struct soap *soap, _tds__LoadCertificateWithPrivateKeyResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:LoadCertificateWithPrivateKeyResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__LoadCertificateWithPrivateKeyResponse * SOAP_FMAC4 soap_get__tds__LoadCertificateWithPrivateKeyResponse(struct soap*, _tds__LoadCertificateWithPrivateKeyResponse *, const char*, const char*);

inline int soap_read__tds__LoadCertificateWithPrivateKeyResponse(struct soap *soap, _tds__LoadCertificateWithPrivateKeyResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__LoadCertificateWithPrivateKeyResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__LoadCertificateWithPrivateKey_DEFINED
#define SOAP_TYPE__tds__LoadCertificateWithPrivateKey_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__LoadCertificateWithPrivateKey(struct soap*, const char*, int, const _tds__LoadCertificateWithPrivateKey *, const char*);
SOAP_FMAC3 _tds__LoadCertificateWithPrivateKey * SOAP_FMAC4 soap_in__tds__LoadCertificateWithPrivateKey(struct soap*, const char*, _tds__LoadCertificateWithPrivateKey *, const char*);
SOAP_FMAC1 _tds__LoadCertificateWithPrivateKey * SOAP_FMAC2 soap_instantiate__tds__LoadCertificateWithPrivateKey(struct soap*, int, const char*, const char*, size_t*);

inline _tds__LoadCertificateWithPrivateKey * soap_new__tds__LoadCertificateWithPrivateKey(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__LoadCertificateWithPrivateKey(soap, n, NULL, NULL, NULL);
}

inline _tds__LoadCertificateWithPrivateKey * soap_new_req__tds__LoadCertificateWithPrivateKey(
	struct soap *soap,
	const std::vector<tt__CertificateWithPrivateKey *> & CertificateWithPrivateKey)
{
	_tds__LoadCertificateWithPrivateKey *_p = soap_new__tds__LoadCertificateWithPrivateKey(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__LoadCertificateWithPrivateKey::CertificateWithPrivateKey = CertificateWithPrivateKey;
	}
	return _p;
}

inline _tds__LoadCertificateWithPrivateKey * soap_new_set__tds__LoadCertificateWithPrivateKey(
	struct soap *soap,
	const std::vector<tt__CertificateWithPrivateKey *> & CertificateWithPrivateKey)
{
	_tds__LoadCertificateWithPrivateKey *_p = soap_new__tds__LoadCertificateWithPrivateKey(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__LoadCertificateWithPrivateKey::CertificateWithPrivateKey = CertificateWithPrivateKey;
	}
	return _p;
}

inline int soap_write__tds__LoadCertificateWithPrivateKey(struct soap *soap, _tds__LoadCertificateWithPrivateKey const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:LoadCertificateWithPrivateKey", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__LoadCertificateWithPrivateKey * SOAP_FMAC4 soap_get__tds__LoadCertificateWithPrivateKey(struct soap*, _tds__LoadCertificateWithPrivateKey *, const char*, const char*);

inline int soap_read__tds__LoadCertificateWithPrivateKey(struct soap *soap, _tds__LoadCertificateWithPrivateKey *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__LoadCertificateWithPrivateKey(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__GetCACertificatesResponse_DEFINED
#define SOAP_TYPE__tds__GetCACertificatesResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetCACertificatesResponse(struct soap*, const char*, int, const _tds__GetCACertificatesResponse *, const char*);
SOAP_FMAC3 _tds__GetCACertificatesResponse * SOAP_FMAC4 soap_in__tds__GetCACertificatesResponse(struct soap*, const char*, _tds__GetCACertificatesResponse *, const char*);
SOAP_FMAC1 _tds__GetCACertificatesResponse * SOAP_FMAC2 soap_instantiate__tds__GetCACertificatesResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetCACertificatesResponse * soap_new__tds__GetCACertificatesResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetCACertificatesResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__GetCACertificatesResponse * soap_new_req__tds__GetCACertificatesResponse(
	struct soap *soap)
{
	_tds__GetCACertificatesResponse *_p = soap_new__tds__GetCACertificatesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__GetCACertificatesResponse * soap_new_set__tds__GetCACertificatesResponse(
	struct soap *soap,
	const std::vector<tt__Certificate *> & CACertificate)
{
	_tds__GetCACertificatesResponse *_p = soap_new__tds__GetCACertificatesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetCACertificatesResponse::CACertificate = CACertificate;
	}
	return _p;
}

inline int soap_write__tds__GetCACertificatesResponse(struct soap *soap, _tds__GetCACertificatesResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetCACertificatesResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetCACertificatesResponse * SOAP_FMAC4 soap_get__tds__GetCACertificatesResponse(struct soap*, _tds__GetCACertificatesResponse *, const char*, const char*);

inline int soap_read__tds__GetCACertificatesResponse(struct soap *soap, _tds__GetCACertificatesResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__GetCACertificatesResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__GetCACertificates_DEFINED
#define SOAP_TYPE__tds__GetCACertificates_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetCACertificates(struct soap*, const char*, int, const _tds__GetCACertificates *, const char*);
SOAP_FMAC3 _tds__GetCACertificates * SOAP_FMAC4 soap_in__tds__GetCACertificates(struct soap*, const char*, _tds__GetCACertificates *, const char*);
SOAP_FMAC1 _tds__GetCACertificates * SOAP_FMAC2 soap_instantiate__tds__GetCACertificates(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetCACertificates * soap_new__tds__GetCACertificates(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetCACertificates(soap, n, NULL, NULL, NULL);
}

inline _tds__GetCACertificates * soap_new_req__tds__GetCACertificates(
	struct soap *soap)
{
	_tds__GetCACertificates *_p = soap_new__tds__GetCACertificates(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__GetCACertificates * soap_new_set__tds__GetCACertificates(
	struct soap *soap)
{
	_tds__GetCACertificates *_p = soap_new__tds__GetCACertificates(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__GetCACertificates(struct soap *soap, _tds__GetCACertificates const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetCACertificates", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetCACertificates * SOAP_FMAC4 soap_get__tds__GetCACertificates(struct soap*, _tds__GetCACertificates *, const char*, const char*);

inline int soap_read__tds__GetCACertificates(struct soap *soap, _tds__GetCACertificates *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__GetCACertificates(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__SetClientCertificateModeResponse_DEFINED
#define SOAP_TYPE__tds__SetClientCertificateModeResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetClientCertificateModeResponse(struct soap*, const char*, int, const _tds__SetClientCertificateModeResponse *, const char*);
SOAP_FMAC3 _tds__SetClientCertificateModeResponse * SOAP_FMAC4 soap_in__tds__SetClientCertificateModeResponse(struct soap*, const char*, _tds__SetClientCertificateModeResponse *, const char*);
SOAP_FMAC1 _tds__SetClientCertificateModeResponse * SOAP_FMAC2 soap_instantiate__tds__SetClientCertificateModeResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetClientCertificateModeResponse * soap_new__tds__SetClientCertificateModeResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetClientCertificateModeResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__SetClientCertificateModeResponse * soap_new_req__tds__SetClientCertificateModeResponse(
	struct soap *soap)
{
	_tds__SetClientCertificateModeResponse *_p = soap_new__tds__SetClientCertificateModeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__SetClientCertificateModeResponse * soap_new_set__tds__SetClientCertificateModeResponse(
	struct soap *soap)
{
	_tds__SetClientCertificateModeResponse *_p = soap_new__tds__SetClientCertificateModeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__SetClientCertificateModeResponse(struct soap *soap, _tds__SetClientCertificateModeResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetClientCertificateModeResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetClientCertificateModeResponse * SOAP_FMAC4 soap_get__tds__SetClientCertificateModeResponse(struct soap*, _tds__SetClientCertificateModeResponse *, const char*, const char*);

inline int soap_read__tds__SetClientCertificateModeResponse(struct soap *soap, _tds__SetClientCertificateModeResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__SetClientCertificateModeResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__SetClientCertificateMode_DEFINED
#define SOAP_TYPE__tds__SetClientCertificateMode_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetClientCertificateMode(struct soap*, const char*, int, const _tds__SetClientCertificateMode *, const char*);
SOAP_FMAC3 _tds__SetClientCertificateMode * SOAP_FMAC4 soap_in__tds__SetClientCertificateMode(struct soap*, const char*, _tds__SetClientCertificateMode *, const char*);
SOAP_FMAC1 _tds__SetClientCertificateMode * SOAP_FMAC2 soap_instantiate__tds__SetClientCertificateMode(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetClientCertificateMode * soap_new__tds__SetClientCertificateMode(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetClientCertificateMode(soap, n, NULL, NULL, NULL);
}

inline _tds__SetClientCertificateMode * soap_new_req__tds__SetClientCertificateMode(
	struct soap *soap,
	bool Enabled)
{
	_tds__SetClientCertificateMode *_p = soap_new__tds__SetClientCertificateMode(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetClientCertificateMode::Enabled = Enabled;
	}
	return _p;
}

inline _tds__SetClientCertificateMode * soap_new_set__tds__SetClientCertificateMode(
	struct soap *soap,
	bool Enabled)
{
	_tds__SetClientCertificateMode *_p = soap_new__tds__SetClientCertificateMode(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetClientCertificateMode::Enabled = Enabled;
	}
	return _p;
}

inline int soap_write__tds__SetClientCertificateMode(struct soap *soap, _tds__SetClientCertificateMode const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetClientCertificateMode", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetClientCertificateMode * SOAP_FMAC4 soap_get__tds__SetClientCertificateMode(struct soap*, _tds__SetClientCertificateMode *, const char*, const char*);

inline int soap_read__tds__SetClientCertificateMode(struct soap *soap, _tds__SetClientCertificateMode *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__SetClientCertificateMode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__GetClientCertificateModeResponse_DEFINED
#define SOAP_TYPE__tds__GetClientCertificateModeResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetClientCertificateModeResponse(struct soap*, const char*, int, const _tds__GetClientCertificateModeResponse *, const char*);
SOAP_FMAC3 _tds__GetClientCertificateModeResponse * SOAP_FMAC4 soap_in__tds__GetClientCertificateModeResponse(struct soap*, const char*, _tds__GetClientCertificateModeResponse *, const char*);
SOAP_FMAC1 _tds__GetClientCertificateModeResponse * SOAP_FMAC2 soap_instantiate__tds__GetClientCertificateModeResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetClientCertificateModeResponse * soap_new__tds__GetClientCertificateModeResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetClientCertificateModeResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__GetClientCertificateModeResponse * soap_new_req__tds__GetClientCertificateModeResponse(
	struct soap *soap,
	bool Enabled)
{
	_tds__GetClientCertificateModeResponse *_p = soap_new__tds__GetClientCertificateModeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetClientCertificateModeResponse::Enabled = Enabled;
	}
	return _p;
}

inline _tds__GetClientCertificateModeResponse * soap_new_set__tds__GetClientCertificateModeResponse(
	struct soap *soap,
	bool Enabled)
{
	_tds__GetClientCertificateModeResponse *_p = soap_new__tds__GetClientCertificateModeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetClientCertificateModeResponse::Enabled = Enabled;
	}
	return _p;
}

inline int soap_write__tds__GetClientCertificateModeResponse(struct soap *soap, _tds__GetClientCertificateModeResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetClientCertificateModeResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetClientCertificateModeResponse * SOAP_FMAC4 soap_get__tds__GetClientCertificateModeResponse(struct soap*, _tds__GetClientCertificateModeResponse *, const char*, const char*);

inline int soap_read__tds__GetClientCertificateModeResponse(struct soap *soap, _tds__GetClientCertificateModeResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__GetClientCertificateModeResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__GetClientCertificateMode_DEFINED
#define SOAP_TYPE__tds__GetClientCertificateMode_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetClientCertificateMode(struct soap*, const char*, int, const _tds__GetClientCertificateMode *, const char*);
SOAP_FMAC3 _tds__GetClientCertificateMode * SOAP_FMAC4 soap_in__tds__GetClientCertificateMode(struct soap*, const char*, _tds__GetClientCertificateMode *, const char*);
SOAP_FMAC1 _tds__GetClientCertificateMode * SOAP_FMAC2 soap_instantiate__tds__GetClientCertificateMode(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetClientCertificateMode * soap_new__tds__GetClientCertificateMode(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetClientCertificateMode(soap, n, NULL, NULL, NULL);
}

inline _tds__GetClientCertificateMode * soap_new_req__tds__GetClientCertificateMode(
	struct soap *soap)
{
	_tds__GetClientCertificateMode *_p = soap_new__tds__GetClientCertificateMode(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__GetClientCertificateMode * soap_new_set__tds__GetClientCertificateMode(
	struct soap *soap)
{
	_tds__GetClientCertificateMode *_p = soap_new__tds__GetClientCertificateMode(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__GetClientCertificateMode(struct soap *soap, _tds__GetClientCertificateMode const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetClientCertificateMode", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetClientCertificateMode * SOAP_FMAC4 soap_get__tds__GetClientCertificateMode(struct soap*, _tds__GetClientCertificateMode *, const char*, const char*);

inline int soap_read__tds__GetClientCertificateMode(struct soap *soap, _tds__GetClientCertificateMode *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__GetClientCertificateMode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__LoadCertificatesResponse_DEFINED
#define SOAP_TYPE__tds__LoadCertificatesResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__LoadCertificatesResponse(struct soap*, const char*, int, const _tds__LoadCertificatesResponse *, const char*);
SOAP_FMAC3 _tds__LoadCertificatesResponse * SOAP_FMAC4 soap_in__tds__LoadCertificatesResponse(struct soap*, const char*, _tds__LoadCertificatesResponse *, const char*);
SOAP_FMAC1 _tds__LoadCertificatesResponse * SOAP_FMAC2 soap_instantiate__tds__LoadCertificatesResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__LoadCertificatesResponse * soap_new__tds__LoadCertificatesResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__LoadCertificatesResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__LoadCertificatesResponse * soap_new_req__tds__LoadCertificatesResponse(
	struct soap *soap)
{
	_tds__LoadCertificatesResponse *_p = soap_new__tds__LoadCertificatesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__LoadCertificatesResponse * soap_new_set__tds__LoadCertificatesResponse(
	struct soap *soap)
{
	_tds__LoadCertificatesResponse *_p = soap_new__tds__LoadCertificatesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__LoadCertificatesResponse(struct soap *soap, _tds__LoadCertificatesResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:LoadCertificatesResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__LoadCertificatesResponse * SOAP_FMAC4 soap_get__tds__LoadCertificatesResponse(struct soap*, _tds__LoadCertificatesResponse *, const char*, const char*);

inline int soap_read__tds__LoadCertificatesResponse(struct soap *soap, _tds__LoadCertificatesResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__LoadCertificatesResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__LoadCertificates_DEFINED
#define SOAP_TYPE__tds__LoadCertificates_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__LoadCertificates(struct soap*, const char*, int, const _tds__LoadCertificates *, const char*);
SOAP_FMAC3 _tds__LoadCertificates * SOAP_FMAC4 soap_in__tds__LoadCertificates(struct soap*, const char*, _tds__LoadCertificates *, const char*);
SOAP_FMAC1 _tds__LoadCertificates * SOAP_FMAC2 soap_instantiate__tds__LoadCertificates(struct soap*, int, const char*, const char*, size_t*);

inline _tds__LoadCertificates * soap_new__tds__LoadCertificates(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__LoadCertificates(soap, n, NULL, NULL, NULL);
}

inline _tds__LoadCertificates * soap_new_req__tds__LoadCertificates(
	struct soap *soap,
	const std::vector<tt__Certificate *> & NVTCertificate)
{
	_tds__LoadCertificates *_p = soap_new__tds__LoadCertificates(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__LoadCertificates::NVTCertificate = NVTCertificate;
	}
	return _p;
}

inline _tds__LoadCertificates * soap_new_set__tds__LoadCertificates(
	struct soap *soap,
	const std::vector<tt__Certificate *> & NVTCertificate)
{
	_tds__LoadCertificates *_p = soap_new__tds__LoadCertificates(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__LoadCertificates::NVTCertificate = NVTCertificate;
	}
	return _p;
}

inline int soap_write__tds__LoadCertificates(struct soap *soap, _tds__LoadCertificates const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:LoadCertificates", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__LoadCertificates * SOAP_FMAC4 soap_get__tds__LoadCertificates(struct soap*, _tds__LoadCertificates *, const char*, const char*);

inline int soap_read__tds__LoadCertificates(struct soap *soap, _tds__LoadCertificates *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__LoadCertificates(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__GetPkcs10RequestResponse_DEFINED
#define SOAP_TYPE__tds__GetPkcs10RequestResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetPkcs10RequestResponse(struct soap*, const char*, int, const _tds__GetPkcs10RequestResponse *, const char*);
SOAP_FMAC3 _tds__GetPkcs10RequestResponse * SOAP_FMAC4 soap_in__tds__GetPkcs10RequestResponse(struct soap*, const char*, _tds__GetPkcs10RequestResponse *, const char*);
SOAP_FMAC1 _tds__GetPkcs10RequestResponse * SOAP_FMAC2 soap_instantiate__tds__GetPkcs10RequestResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetPkcs10RequestResponse * soap_new__tds__GetPkcs10RequestResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetPkcs10RequestResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__GetPkcs10RequestResponse * soap_new_req__tds__GetPkcs10RequestResponse(
	struct soap *soap,
	tt__BinaryData *Pkcs10Request)
{
	_tds__GetPkcs10RequestResponse *_p = soap_new__tds__GetPkcs10RequestResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetPkcs10RequestResponse::Pkcs10Request = Pkcs10Request;
	}
	return _p;
}

inline _tds__GetPkcs10RequestResponse * soap_new_set__tds__GetPkcs10RequestResponse(
	struct soap *soap,
	tt__BinaryData *Pkcs10Request)
{
	_tds__GetPkcs10RequestResponse *_p = soap_new__tds__GetPkcs10RequestResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetPkcs10RequestResponse::Pkcs10Request = Pkcs10Request;
	}
	return _p;
}

inline int soap_write__tds__GetPkcs10RequestResponse(struct soap *soap, _tds__GetPkcs10RequestResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetPkcs10RequestResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetPkcs10RequestResponse * SOAP_FMAC4 soap_get__tds__GetPkcs10RequestResponse(struct soap*, _tds__GetPkcs10RequestResponse *, const char*, const char*);

inline int soap_read__tds__GetPkcs10RequestResponse(struct soap *soap, _tds__GetPkcs10RequestResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__GetPkcs10RequestResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__GetPkcs10Request_DEFINED
#define SOAP_TYPE__tds__GetPkcs10Request_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetPkcs10Request(struct soap*, const char*, int, const _tds__GetPkcs10Request *, const char*);
SOAP_FMAC3 _tds__GetPkcs10Request * SOAP_FMAC4 soap_in__tds__GetPkcs10Request(struct soap*, const char*, _tds__GetPkcs10Request *, const char*);
SOAP_FMAC1 _tds__GetPkcs10Request * SOAP_FMAC2 soap_instantiate__tds__GetPkcs10Request(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetPkcs10Request * soap_new__tds__GetPkcs10Request(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetPkcs10Request(soap, n, NULL, NULL, NULL);
}

inline _tds__GetPkcs10Request * soap_new_req__tds__GetPkcs10Request(
	struct soap *soap,
	const std::string& CertificateID)
{
	_tds__GetPkcs10Request *_p = soap_new__tds__GetPkcs10Request(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetPkcs10Request::CertificateID = CertificateID;
	}
	return _p;
}

inline _tds__GetPkcs10Request * soap_new_set__tds__GetPkcs10Request(
	struct soap *soap,
	const std::string& CertificateID,
	std::string *Subject,
	tt__BinaryData *Attributes)
{
	_tds__GetPkcs10Request *_p = soap_new__tds__GetPkcs10Request(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetPkcs10Request::CertificateID = CertificateID;
		_p->_tds__GetPkcs10Request::Subject = Subject;
		_p->_tds__GetPkcs10Request::Attributes = Attributes;
	}
	return _p;
}

inline int soap_write__tds__GetPkcs10Request(struct soap *soap, _tds__GetPkcs10Request const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetPkcs10Request", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetPkcs10Request * SOAP_FMAC4 soap_get__tds__GetPkcs10Request(struct soap*, _tds__GetPkcs10Request *, const char*, const char*);

inline int soap_read__tds__GetPkcs10Request(struct soap *soap, _tds__GetPkcs10Request *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__GetPkcs10Request(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__DeleteCertificatesResponse_DEFINED
#define SOAP_TYPE__tds__DeleteCertificatesResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__DeleteCertificatesResponse(struct soap*, const char*, int, const _tds__DeleteCertificatesResponse *, const char*);
SOAP_FMAC3 _tds__DeleteCertificatesResponse * SOAP_FMAC4 soap_in__tds__DeleteCertificatesResponse(struct soap*, const char*, _tds__DeleteCertificatesResponse *, const char*);
SOAP_FMAC1 _tds__DeleteCertificatesResponse * SOAP_FMAC2 soap_instantiate__tds__DeleteCertificatesResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__DeleteCertificatesResponse * soap_new__tds__DeleteCertificatesResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__DeleteCertificatesResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__DeleteCertificatesResponse * soap_new_req__tds__DeleteCertificatesResponse(
	struct soap *soap)
{
	_tds__DeleteCertificatesResponse *_p = soap_new__tds__DeleteCertificatesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__DeleteCertificatesResponse * soap_new_set__tds__DeleteCertificatesResponse(
	struct soap *soap)
{
	_tds__DeleteCertificatesResponse *_p = soap_new__tds__DeleteCertificatesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__DeleteCertificatesResponse(struct soap *soap, _tds__DeleteCertificatesResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:DeleteCertificatesResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__DeleteCertificatesResponse * SOAP_FMAC4 soap_get__tds__DeleteCertificatesResponse(struct soap*, _tds__DeleteCertificatesResponse *, const char*, const char*);

inline int soap_read__tds__DeleteCertificatesResponse(struct soap *soap, _tds__DeleteCertificatesResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__DeleteCertificatesResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__DeleteCertificates_DEFINED
#define SOAP_TYPE__tds__DeleteCertificates_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__DeleteCertificates(struct soap*, const char*, int, const _tds__DeleteCertificates *, const char*);
SOAP_FMAC3 _tds__DeleteCertificates * SOAP_FMAC4 soap_in__tds__DeleteCertificates(struct soap*, const char*, _tds__DeleteCertificates *, const char*);
SOAP_FMAC1 _tds__DeleteCertificates * SOAP_FMAC2 soap_instantiate__tds__DeleteCertificates(struct soap*, int, const char*, const char*, size_t*);

inline _tds__DeleteCertificates * soap_new__tds__DeleteCertificates(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__DeleteCertificates(soap, n, NULL, NULL, NULL);
}

inline _tds__DeleteCertificates * soap_new_req__tds__DeleteCertificates(
	struct soap *soap,
	const std::vector<std::string> & CertificateID)
{
	_tds__DeleteCertificates *_p = soap_new__tds__DeleteCertificates(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__DeleteCertificates::CertificateID = CertificateID;
	}
	return _p;
}

inline _tds__DeleteCertificates * soap_new_set__tds__DeleteCertificates(
	struct soap *soap,
	const std::vector<std::string> & CertificateID)
{
	_tds__DeleteCertificates *_p = soap_new__tds__DeleteCertificates(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__DeleteCertificates::CertificateID = CertificateID;
	}
	return _p;
}

inline int soap_write__tds__DeleteCertificates(struct soap *soap, _tds__DeleteCertificates const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:DeleteCertificates", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__DeleteCertificates * SOAP_FMAC4 soap_get__tds__DeleteCertificates(struct soap*, _tds__DeleteCertificates *, const char*, const char*);

inline int soap_read__tds__DeleteCertificates(struct soap *soap, _tds__DeleteCertificates *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__DeleteCertificates(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__SetCertificatesStatusResponse_DEFINED
#define SOAP_TYPE__tds__SetCertificatesStatusResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetCertificatesStatusResponse(struct soap*, const char*, int, const _tds__SetCertificatesStatusResponse *, const char*);
SOAP_FMAC3 _tds__SetCertificatesStatusResponse * SOAP_FMAC4 soap_in__tds__SetCertificatesStatusResponse(struct soap*, const char*, _tds__SetCertificatesStatusResponse *, const char*);
SOAP_FMAC1 _tds__SetCertificatesStatusResponse * SOAP_FMAC2 soap_instantiate__tds__SetCertificatesStatusResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetCertificatesStatusResponse * soap_new__tds__SetCertificatesStatusResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetCertificatesStatusResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__SetCertificatesStatusResponse * soap_new_req__tds__SetCertificatesStatusResponse(
	struct soap *soap)
{
	_tds__SetCertificatesStatusResponse *_p = soap_new__tds__SetCertificatesStatusResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__SetCertificatesStatusResponse * soap_new_set__tds__SetCertificatesStatusResponse(
	struct soap *soap)
{
	_tds__SetCertificatesStatusResponse *_p = soap_new__tds__SetCertificatesStatusResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__SetCertificatesStatusResponse(struct soap *soap, _tds__SetCertificatesStatusResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetCertificatesStatusResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetCertificatesStatusResponse * SOAP_FMAC4 soap_get__tds__SetCertificatesStatusResponse(struct soap*, _tds__SetCertificatesStatusResponse *, const char*, const char*);

inline int soap_read__tds__SetCertificatesStatusResponse(struct soap *soap, _tds__SetCertificatesStatusResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__SetCertificatesStatusResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__SetCertificatesStatus_DEFINED
#define SOAP_TYPE__tds__SetCertificatesStatus_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetCertificatesStatus(struct soap*, const char*, int, const _tds__SetCertificatesStatus *, const char*);
SOAP_FMAC3 _tds__SetCertificatesStatus * SOAP_FMAC4 soap_in__tds__SetCertificatesStatus(struct soap*, const char*, _tds__SetCertificatesStatus *, const char*);
SOAP_FMAC1 _tds__SetCertificatesStatus * SOAP_FMAC2 soap_instantiate__tds__SetCertificatesStatus(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetCertificatesStatus * soap_new__tds__SetCertificatesStatus(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetCertificatesStatus(soap, n, NULL, NULL, NULL);
}

inline _tds__SetCertificatesStatus * soap_new_req__tds__SetCertificatesStatus(
	struct soap *soap)
{
	_tds__SetCertificatesStatus *_p = soap_new__tds__SetCertificatesStatus(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__SetCertificatesStatus * soap_new_set__tds__SetCertificatesStatus(
	struct soap *soap,
	const std::vector<tt__CertificateStatus *> & CertificateStatus)
{
	_tds__SetCertificatesStatus *_p = soap_new__tds__SetCertificatesStatus(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetCertificatesStatus::CertificateStatus = CertificateStatus;
	}
	return _p;
}

inline int soap_write__tds__SetCertificatesStatus(struct soap *soap, _tds__SetCertificatesStatus const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetCertificatesStatus", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetCertificatesStatus * SOAP_FMAC4 soap_get__tds__SetCertificatesStatus(struct soap*, _tds__SetCertificatesStatus *, const char*, const char*);

inline int soap_read__tds__SetCertificatesStatus(struct soap *soap, _tds__SetCertificatesStatus *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__SetCertificatesStatus(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__GetCertificatesStatusResponse_DEFINED
#define SOAP_TYPE__tds__GetCertificatesStatusResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetCertificatesStatusResponse(struct soap*, const char*, int, const _tds__GetCertificatesStatusResponse *, const char*);
SOAP_FMAC3 _tds__GetCertificatesStatusResponse * SOAP_FMAC4 soap_in__tds__GetCertificatesStatusResponse(struct soap*, const char*, _tds__GetCertificatesStatusResponse *, const char*);
SOAP_FMAC1 _tds__GetCertificatesStatusResponse * SOAP_FMAC2 soap_instantiate__tds__GetCertificatesStatusResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetCertificatesStatusResponse * soap_new__tds__GetCertificatesStatusResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetCertificatesStatusResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__GetCertificatesStatusResponse * soap_new_req__tds__GetCertificatesStatusResponse(
	struct soap *soap)
{
	_tds__GetCertificatesStatusResponse *_p = soap_new__tds__GetCertificatesStatusResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__GetCertificatesStatusResponse * soap_new_set__tds__GetCertificatesStatusResponse(
	struct soap *soap,
	const std::vector<tt__CertificateStatus *> & CertificateStatus)
{
	_tds__GetCertificatesStatusResponse *_p = soap_new__tds__GetCertificatesStatusResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetCertificatesStatusResponse::CertificateStatus = CertificateStatus;
	}
	return _p;
}

inline int soap_write__tds__GetCertificatesStatusResponse(struct soap *soap, _tds__GetCertificatesStatusResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetCertificatesStatusResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetCertificatesStatusResponse * SOAP_FMAC4 soap_get__tds__GetCertificatesStatusResponse(struct soap*, _tds__GetCertificatesStatusResponse *, const char*, const char*);

inline int soap_read__tds__GetCertificatesStatusResponse(struct soap *soap, _tds__GetCertificatesStatusResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__GetCertificatesStatusResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__GetCertificatesStatus_DEFINED
#define SOAP_TYPE__tds__GetCertificatesStatus_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetCertificatesStatus(struct soap*, const char*, int, const _tds__GetCertificatesStatus *, const char*);
SOAP_FMAC3 _tds__GetCertificatesStatus * SOAP_FMAC4 soap_in__tds__GetCertificatesStatus(struct soap*, const char*, _tds__GetCertificatesStatus *, const char*);
SOAP_FMAC1 _tds__GetCertificatesStatus * SOAP_FMAC2 soap_instantiate__tds__GetCertificatesStatus(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetCertificatesStatus * soap_new__tds__GetCertificatesStatus(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetCertificatesStatus(soap, n, NULL, NULL, NULL);
}

inline _tds__GetCertificatesStatus * soap_new_req__tds__GetCertificatesStatus(
	struct soap *soap)
{
	_tds__GetCertificatesStatus *_p = soap_new__tds__GetCertificatesStatus(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__GetCertificatesStatus * soap_new_set__tds__GetCertificatesStatus(
	struct soap *soap)
{
	_tds__GetCertificatesStatus *_p = soap_new__tds__GetCertificatesStatus(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__GetCertificatesStatus(struct soap *soap, _tds__GetCertificatesStatus const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetCertificatesStatus", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetCertificatesStatus * SOAP_FMAC4 soap_get__tds__GetCertificatesStatus(struct soap*, _tds__GetCertificatesStatus *, const char*, const char*);

inline int soap_read__tds__GetCertificatesStatus(struct soap *soap, _tds__GetCertificatesStatus *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__GetCertificatesStatus(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__GetCertificatesResponse_DEFINED
#define SOAP_TYPE__tds__GetCertificatesResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetCertificatesResponse(struct soap*, const char*, int, const _tds__GetCertificatesResponse *, const char*);
SOAP_FMAC3 _tds__GetCertificatesResponse * SOAP_FMAC4 soap_in__tds__GetCertificatesResponse(struct soap*, const char*, _tds__GetCertificatesResponse *, const char*);
SOAP_FMAC1 _tds__GetCertificatesResponse * SOAP_FMAC2 soap_instantiate__tds__GetCertificatesResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetCertificatesResponse * soap_new__tds__GetCertificatesResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetCertificatesResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__GetCertificatesResponse * soap_new_req__tds__GetCertificatesResponse(
	struct soap *soap)
{
	_tds__GetCertificatesResponse *_p = soap_new__tds__GetCertificatesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__GetCertificatesResponse * soap_new_set__tds__GetCertificatesResponse(
	struct soap *soap,
	const std::vector<tt__Certificate *> & NvtCertificate)
{
	_tds__GetCertificatesResponse *_p = soap_new__tds__GetCertificatesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetCertificatesResponse::NvtCertificate = NvtCertificate;
	}
	return _p;
}

inline int soap_write__tds__GetCertificatesResponse(struct soap *soap, _tds__GetCertificatesResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetCertificatesResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetCertificatesResponse * SOAP_FMAC4 soap_get__tds__GetCertificatesResponse(struct soap*, _tds__GetCertificatesResponse *, const char*, const char*);

inline int soap_read__tds__GetCertificatesResponse(struct soap *soap, _tds__GetCertificatesResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__GetCertificatesResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__GetCertificates_DEFINED
#define SOAP_TYPE__tds__GetCertificates_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetCertificates(struct soap*, const char*, int, const _tds__GetCertificates *, const char*);
SOAP_FMAC3 _tds__GetCertificates * SOAP_FMAC4 soap_in__tds__GetCertificates(struct soap*, const char*, _tds__GetCertificates *, const char*);
SOAP_FMAC1 _tds__GetCertificates * SOAP_FMAC2 soap_instantiate__tds__GetCertificates(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetCertificates * soap_new__tds__GetCertificates(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetCertificates(soap, n, NULL, NULL, NULL);
}

inline _tds__GetCertificates * soap_new_req__tds__GetCertificates(
	struct soap *soap)
{
	_tds__GetCertificates *_p = soap_new__tds__GetCertificates(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__GetCertificates * soap_new_set__tds__GetCertificates(
	struct soap *soap)
{
	_tds__GetCertificates *_p = soap_new__tds__GetCertificates(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__GetCertificates(struct soap *soap, _tds__GetCertificates const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetCertificates", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetCertificates * SOAP_FMAC4 soap_get__tds__GetCertificates(struct soap*, _tds__GetCertificates *, const char*, const char*);

inline int soap_read__tds__GetCertificates(struct soap *soap, _tds__GetCertificates *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__GetCertificates(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__CreateCertificateResponse_DEFINED
#define SOAP_TYPE__tds__CreateCertificateResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__CreateCertificateResponse(struct soap*, const char*, int, const _tds__CreateCertificateResponse *, const char*);
SOAP_FMAC3 _tds__CreateCertificateResponse * SOAP_FMAC4 soap_in__tds__CreateCertificateResponse(struct soap*, const char*, _tds__CreateCertificateResponse *, const char*);
SOAP_FMAC1 _tds__CreateCertificateResponse * SOAP_FMAC2 soap_instantiate__tds__CreateCertificateResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__CreateCertificateResponse * soap_new__tds__CreateCertificateResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__CreateCertificateResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__CreateCertificateResponse * soap_new_req__tds__CreateCertificateResponse(
	struct soap *soap,
	tt__Certificate *NvtCertificate)
{
	_tds__CreateCertificateResponse *_p = soap_new__tds__CreateCertificateResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__CreateCertificateResponse::NvtCertificate = NvtCertificate;
	}
	return _p;
}

inline _tds__CreateCertificateResponse * soap_new_set__tds__CreateCertificateResponse(
	struct soap *soap,
	tt__Certificate *NvtCertificate)
{
	_tds__CreateCertificateResponse *_p = soap_new__tds__CreateCertificateResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__CreateCertificateResponse::NvtCertificate = NvtCertificate;
	}
	return _p;
}

inline int soap_write__tds__CreateCertificateResponse(struct soap *soap, _tds__CreateCertificateResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:CreateCertificateResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__CreateCertificateResponse * SOAP_FMAC4 soap_get__tds__CreateCertificateResponse(struct soap*, _tds__CreateCertificateResponse *, const char*, const char*);

inline int soap_read__tds__CreateCertificateResponse(struct soap *soap, _tds__CreateCertificateResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__CreateCertificateResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__CreateCertificate_DEFINED
#define SOAP_TYPE__tds__CreateCertificate_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__CreateCertificate(struct soap*, const char*, int, const _tds__CreateCertificate *, const char*);
SOAP_FMAC3 _tds__CreateCertificate * SOAP_FMAC4 soap_in__tds__CreateCertificate(struct soap*, const char*, _tds__CreateCertificate *, const char*);
SOAP_FMAC1 _tds__CreateCertificate * SOAP_FMAC2 soap_instantiate__tds__CreateCertificate(struct soap*, int, const char*, const char*, size_t*);

inline _tds__CreateCertificate * soap_new__tds__CreateCertificate(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__CreateCertificate(soap, n, NULL, NULL, NULL);
}

inline _tds__CreateCertificate * soap_new_req__tds__CreateCertificate(
	struct soap *soap)
{
	_tds__CreateCertificate *_p = soap_new__tds__CreateCertificate(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__CreateCertificate * soap_new_set__tds__CreateCertificate(
	struct soap *soap,
	std::string *CertificateID,
	std::string *Subject,
	time_t *ValidNotBefore,
	time_t *ValidNotAfter)
{
	_tds__CreateCertificate *_p = soap_new__tds__CreateCertificate(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__CreateCertificate::CertificateID = CertificateID;
		_p->_tds__CreateCertificate::Subject = Subject;
		_p->_tds__CreateCertificate::ValidNotBefore = ValidNotBefore;
		_p->_tds__CreateCertificate::ValidNotAfter = ValidNotAfter;
	}
	return _p;
}

inline int soap_write__tds__CreateCertificate(struct soap *soap, _tds__CreateCertificate const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:CreateCertificate", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__CreateCertificate * SOAP_FMAC4 soap_get__tds__CreateCertificate(struct soap*, _tds__CreateCertificate *, const char*, const char*);

inline int soap_read__tds__CreateCertificate(struct soap *soap, _tds__CreateCertificate *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__CreateCertificate(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__SetAccessPolicyResponse_DEFINED
#define SOAP_TYPE__tds__SetAccessPolicyResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetAccessPolicyResponse(struct soap*, const char*, int, const _tds__SetAccessPolicyResponse *, const char*);
SOAP_FMAC3 _tds__SetAccessPolicyResponse * SOAP_FMAC4 soap_in__tds__SetAccessPolicyResponse(struct soap*, const char*, _tds__SetAccessPolicyResponse *, const char*);
SOAP_FMAC1 _tds__SetAccessPolicyResponse * SOAP_FMAC2 soap_instantiate__tds__SetAccessPolicyResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetAccessPolicyResponse * soap_new__tds__SetAccessPolicyResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetAccessPolicyResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__SetAccessPolicyResponse * soap_new_req__tds__SetAccessPolicyResponse(
	struct soap *soap)
{
	_tds__SetAccessPolicyResponse *_p = soap_new__tds__SetAccessPolicyResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__SetAccessPolicyResponse * soap_new_set__tds__SetAccessPolicyResponse(
	struct soap *soap)
{
	_tds__SetAccessPolicyResponse *_p = soap_new__tds__SetAccessPolicyResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__SetAccessPolicyResponse(struct soap *soap, _tds__SetAccessPolicyResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetAccessPolicyResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetAccessPolicyResponse * SOAP_FMAC4 soap_get__tds__SetAccessPolicyResponse(struct soap*, _tds__SetAccessPolicyResponse *, const char*, const char*);

inline int soap_read__tds__SetAccessPolicyResponse(struct soap *soap, _tds__SetAccessPolicyResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__SetAccessPolicyResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__SetAccessPolicy_DEFINED
#define SOAP_TYPE__tds__SetAccessPolicy_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetAccessPolicy(struct soap*, const char*, int, const _tds__SetAccessPolicy *, const char*);
SOAP_FMAC3 _tds__SetAccessPolicy * SOAP_FMAC4 soap_in__tds__SetAccessPolicy(struct soap*, const char*, _tds__SetAccessPolicy *, const char*);
SOAP_FMAC1 _tds__SetAccessPolicy * SOAP_FMAC2 soap_instantiate__tds__SetAccessPolicy(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetAccessPolicy * soap_new__tds__SetAccessPolicy(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetAccessPolicy(soap, n, NULL, NULL, NULL);
}

inline _tds__SetAccessPolicy * soap_new_req__tds__SetAccessPolicy(
	struct soap *soap,
	tt__BinaryData *PolicyFile)
{
	_tds__SetAccessPolicy *_p = soap_new__tds__SetAccessPolicy(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetAccessPolicy::PolicyFile = PolicyFile;
	}
	return _p;
}

inline _tds__SetAccessPolicy * soap_new_set__tds__SetAccessPolicy(
	struct soap *soap,
	tt__BinaryData *PolicyFile)
{
	_tds__SetAccessPolicy *_p = soap_new__tds__SetAccessPolicy(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetAccessPolicy::PolicyFile = PolicyFile;
	}
	return _p;
}

inline int soap_write__tds__SetAccessPolicy(struct soap *soap, _tds__SetAccessPolicy const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetAccessPolicy", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetAccessPolicy * SOAP_FMAC4 soap_get__tds__SetAccessPolicy(struct soap*, _tds__SetAccessPolicy *, const char*, const char*);

inline int soap_read__tds__SetAccessPolicy(struct soap *soap, _tds__SetAccessPolicy *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__SetAccessPolicy(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__GetAccessPolicyResponse_DEFINED
#define SOAP_TYPE__tds__GetAccessPolicyResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetAccessPolicyResponse(struct soap*, const char*, int, const _tds__GetAccessPolicyResponse *, const char*);
SOAP_FMAC3 _tds__GetAccessPolicyResponse * SOAP_FMAC4 soap_in__tds__GetAccessPolicyResponse(struct soap*, const char*, _tds__GetAccessPolicyResponse *, const char*);
SOAP_FMAC1 _tds__GetAccessPolicyResponse * SOAP_FMAC2 soap_instantiate__tds__GetAccessPolicyResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetAccessPolicyResponse * soap_new__tds__GetAccessPolicyResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetAccessPolicyResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__GetAccessPolicyResponse * soap_new_req__tds__GetAccessPolicyResponse(
	struct soap *soap,
	tt__BinaryData *PolicyFile)
{
	_tds__GetAccessPolicyResponse *_p = soap_new__tds__GetAccessPolicyResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetAccessPolicyResponse::PolicyFile = PolicyFile;
	}
	return _p;
}

inline _tds__GetAccessPolicyResponse * soap_new_set__tds__GetAccessPolicyResponse(
	struct soap *soap,
	tt__BinaryData *PolicyFile)
{
	_tds__GetAccessPolicyResponse *_p = soap_new__tds__GetAccessPolicyResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetAccessPolicyResponse::PolicyFile = PolicyFile;
	}
	return _p;
}

inline int soap_write__tds__GetAccessPolicyResponse(struct soap *soap, _tds__GetAccessPolicyResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetAccessPolicyResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetAccessPolicyResponse * SOAP_FMAC4 soap_get__tds__GetAccessPolicyResponse(struct soap*, _tds__GetAccessPolicyResponse *, const char*, const char*);

inline int soap_read__tds__GetAccessPolicyResponse(struct soap *soap, _tds__GetAccessPolicyResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__GetAccessPolicyResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__GetAccessPolicy_DEFINED
#define SOAP_TYPE__tds__GetAccessPolicy_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetAccessPolicy(struct soap*, const char*, int, const _tds__GetAccessPolicy *, const char*);
SOAP_FMAC3 _tds__GetAccessPolicy * SOAP_FMAC4 soap_in__tds__GetAccessPolicy(struct soap*, const char*, _tds__GetAccessPolicy *, const char*);
SOAP_FMAC1 _tds__GetAccessPolicy * SOAP_FMAC2 soap_instantiate__tds__GetAccessPolicy(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetAccessPolicy * soap_new__tds__GetAccessPolicy(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetAccessPolicy(soap, n, NULL, NULL, NULL);
}

inline _tds__GetAccessPolicy * soap_new_req__tds__GetAccessPolicy(
	struct soap *soap)
{
	_tds__GetAccessPolicy *_p = soap_new__tds__GetAccessPolicy(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__GetAccessPolicy * soap_new_set__tds__GetAccessPolicy(
	struct soap *soap)
{
	_tds__GetAccessPolicy *_p = soap_new__tds__GetAccessPolicy(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__GetAccessPolicy(struct soap *soap, _tds__GetAccessPolicy const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetAccessPolicy", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetAccessPolicy * SOAP_FMAC4 soap_get__tds__GetAccessPolicy(struct soap*, _tds__GetAccessPolicy *, const char*, const char*);

inline int soap_read__tds__GetAccessPolicy(struct soap *soap, _tds__GetAccessPolicy *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__GetAccessPolicy(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__RemoveIPAddressFilterResponse_DEFINED
#define SOAP_TYPE__tds__RemoveIPAddressFilterResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__RemoveIPAddressFilterResponse(struct soap*, const char*, int, const _tds__RemoveIPAddressFilterResponse *, const char*);
SOAP_FMAC3 _tds__RemoveIPAddressFilterResponse * SOAP_FMAC4 soap_in__tds__RemoveIPAddressFilterResponse(struct soap*, const char*, _tds__RemoveIPAddressFilterResponse *, const char*);
SOAP_FMAC1 _tds__RemoveIPAddressFilterResponse * SOAP_FMAC2 soap_instantiate__tds__RemoveIPAddressFilterResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__RemoveIPAddressFilterResponse * soap_new__tds__RemoveIPAddressFilterResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__RemoveIPAddressFilterResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__RemoveIPAddressFilterResponse * soap_new_req__tds__RemoveIPAddressFilterResponse(
	struct soap *soap)
{
	_tds__RemoveIPAddressFilterResponse *_p = soap_new__tds__RemoveIPAddressFilterResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__RemoveIPAddressFilterResponse * soap_new_set__tds__RemoveIPAddressFilterResponse(
	struct soap *soap)
{
	_tds__RemoveIPAddressFilterResponse *_p = soap_new__tds__RemoveIPAddressFilterResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__RemoveIPAddressFilterResponse(struct soap *soap, _tds__RemoveIPAddressFilterResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:RemoveIPAddressFilterResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__RemoveIPAddressFilterResponse * SOAP_FMAC4 soap_get__tds__RemoveIPAddressFilterResponse(struct soap*, _tds__RemoveIPAddressFilterResponse *, const char*, const char*);

inline int soap_read__tds__RemoveIPAddressFilterResponse(struct soap *soap, _tds__RemoveIPAddressFilterResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__RemoveIPAddressFilterResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__RemoveIPAddressFilter_DEFINED
#define SOAP_TYPE__tds__RemoveIPAddressFilter_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__RemoveIPAddressFilter(struct soap*, const char*, int, const _tds__RemoveIPAddressFilter *, const char*);
SOAP_FMAC3 _tds__RemoveIPAddressFilter * SOAP_FMAC4 soap_in__tds__RemoveIPAddressFilter(struct soap*, const char*, _tds__RemoveIPAddressFilter *, const char*);
SOAP_FMAC1 _tds__RemoveIPAddressFilter * SOAP_FMAC2 soap_instantiate__tds__RemoveIPAddressFilter(struct soap*, int, const char*, const char*, size_t*);

inline _tds__RemoveIPAddressFilter * soap_new__tds__RemoveIPAddressFilter(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__RemoveIPAddressFilter(soap, n, NULL, NULL, NULL);
}

inline _tds__RemoveIPAddressFilter * soap_new_req__tds__RemoveIPAddressFilter(
	struct soap *soap,
	tt__IPAddressFilter *IPAddressFilter)
{
	_tds__RemoveIPAddressFilter *_p = soap_new__tds__RemoveIPAddressFilter(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__RemoveIPAddressFilter::IPAddressFilter = IPAddressFilter;
	}
	return _p;
}

inline _tds__RemoveIPAddressFilter * soap_new_set__tds__RemoveIPAddressFilter(
	struct soap *soap,
	tt__IPAddressFilter *IPAddressFilter)
{
	_tds__RemoveIPAddressFilter *_p = soap_new__tds__RemoveIPAddressFilter(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__RemoveIPAddressFilter::IPAddressFilter = IPAddressFilter;
	}
	return _p;
}

inline int soap_write__tds__RemoveIPAddressFilter(struct soap *soap, _tds__RemoveIPAddressFilter const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:RemoveIPAddressFilter", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__RemoveIPAddressFilter * SOAP_FMAC4 soap_get__tds__RemoveIPAddressFilter(struct soap*, _tds__RemoveIPAddressFilter *, const char*, const char*);

inline int soap_read__tds__RemoveIPAddressFilter(struct soap *soap, _tds__RemoveIPAddressFilter *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__RemoveIPAddressFilter(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__AddIPAddressFilterResponse_DEFINED
#define SOAP_TYPE__tds__AddIPAddressFilterResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__AddIPAddressFilterResponse(struct soap*, const char*, int, const _tds__AddIPAddressFilterResponse *, const char*);
SOAP_FMAC3 _tds__AddIPAddressFilterResponse * SOAP_FMAC4 soap_in__tds__AddIPAddressFilterResponse(struct soap*, const char*, _tds__AddIPAddressFilterResponse *, const char*);
SOAP_FMAC1 _tds__AddIPAddressFilterResponse * SOAP_FMAC2 soap_instantiate__tds__AddIPAddressFilterResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__AddIPAddressFilterResponse * soap_new__tds__AddIPAddressFilterResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__AddIPAddressFilterResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__AddIPAddressFilterResponse * soap_new_req__tds__AddIPAddressFilterResponse(
	struct soap *soap)
{
	_tds__AddIPAddressFilterResponse *_p = soap_new__tds__AddIPAddressFilterResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__AddIPAddressFilterResponse * soap_new_set__tds__AddIPAddressFilterResponse(
	struct soap *soap)
{
	_tds__AddIPAddressFilterResponse *_p = soap_new__tds__AddIPAddressFilterResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__AddIPAddressFilterResponse(struct soap *soap, _tds__AddIPAddressFilterResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:AddIPAddressFilterResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__AddIPAddressFilterResponse * SOAP_FMAC4 soap_get__tds__AddIPAddressFilterResponse(struct soap*, _tds__AddIPAddressFilterResponse *, const char*, const char*);

inline int soap_read__tds__AddIPAddressFilterResponse(struct soap *soap, _tds__AddIPAddressFilterResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__AddIPAddressFilterResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__AddIPAddressFilter_DEFINED
#define SOAP_TYPE__tds__AddIPAddressFilter_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__AddIPAddressFilter(struct soap*, const char*, int, const _tds__AddIPAddressFilter *, const char*);
SOAP_FMAC3 _tds__AddIPAddressFilter * SOAP_FMAC4 soap_in__tds__AddIPAddressFilter(struct soap*, const char*, _tds__AddIPAddressFilter *, const char*);
SOAP_FMAC1 _tds__AddIPAddressFilter * SOAP_FMAC2 soap_instantiate__tds__AddIPAddressFilter(struct soap*, int, const char*, const char*, size_t*);

inline _tds__AddIPAddressFilter * soap_new__tds__AddIPAddressFilter(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__AddIPAddressFilter(soap, n, NULL, NULL, NULL);
}

inline _tds__AddIPAddressFilter * soap_new_req__tds__AddIPAddressFilter(
	struct soap *soap,
	tt__IPAddressFilter *IPAddressFilter)
{
	_tds__AddIPAddressFilter *_p = soap_new__tds__AddIPAddressFilter(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__AddIPAddressFilter::IPAddressFilter = IPAddressFilter;
	}
	return _p;
}

inline _tds__AddIPAddressFilter * soap_new_set__tds__AddIPAddressFilter(
	struct soap *soap,
	tt__IPAddressFilter *IPAddressFilter)
{
	_tds__AddIPAddressFilter *_p = soap_new__tds__AddIPAddressFilter(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__AddIPAddressFilter::IPAddressFilter = IPAddressFilter;
	}
	return _p;
}

inline int soap_write__tds__AddIPAddressFilter(struct soap *soap, _tds__AddIPAddressFilter const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:AddIPAddressFilter", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__AddIPAddressFilter * SOAP_FMAC4 soap_get__tds__AddIPAddressFilter(struct soap*, _tds__AddIPAddressFilter *, const char*, const char*);

inline int soap_read__tds__AddIPAddressFilter(struct soap *soap, _tds__AddIPAddressFilter *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__AddIPAddressFilter(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__SetIPAddressFilterResponse_DEFINED
#define SOAP_TYPE__tds__SetIPAddressFilterResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetIPAddressFilterResponse(struct soap*, const char*, int, const _tds__SetIPAddressFilterResponse *, const char*);
SOAP_FMAC3 _tds__SetIPAddressFilterResponse * SOAP_FMAC4 soap_in__tds__SetIPAddressFilterResponse(struct soap*, const char*, _tds__SetIPAddressFilterResponse *, const char*);
SOAP_FMAC1 _tds__SetIPAddressFilterResponse * SOAP_FMAC2 soap_instantiate__tds__SetIPAddressFilterResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetIPAddressFilterResponse * soap_new__tds__SetIPAddressFilterResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetIPAddressFilterResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__SetIPAddressFilterResponse * soap_new_req__tds__SetIPAddressFilterResponse(
	struct soap *soap)
{
	_tds__SetIPAddressFilterResponse *_p = soap_new__tds__SetIPAddressFilterResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__SetIPAddressFilterResponse * soap_new_set__tds__SetIPAddressFilterResponse(
	struct soap *soap)
{
	_tds__SetIPAddressFilterResponse *_p = soap_new__tds__SetIPAddressFilterResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__SetIPAddressFilterResponse(struct soap *soap, _tds__SetIPAddressFilterResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetIPAddressFilterResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetIPAddressFilterResponse * SOAP_FMAC4 soap_get__tds__SetIPAddressFilterResponse(struct soap*, _tds__SetIPAddressFilterResponse *, const char*, const char*);

inline int soap_read__tds__SetIPAddressFilterResponse(struct soap *soap, _tds__SetIPAddressFilterResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__SetIPAddressFilterResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__SetIPAddressFilter_DEFINED
#define SOAP_TYPE__tds__SetIPAddressFilter_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetIPAddressFilter(struct soap*, const char*, int, const _tds__SetIPAddressFilter *, const char*);
SOAP_FMAC3 _tds__SetIPAddressFilter * SOAP_FMAC4 soap_in__tds__SetIPAddressFilter(struct soap*, const char*, _tds__SetIPAddressFilter *, const char*);
SOAP_FMAC1 _tds__SetIPAddressFilter * SOAP_FMAC2 soap_instantiate__tds__SetIPAddressFilter(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetIPAddressFilter * soap_new__tds__SetIPAddressFilter(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetIPAddressFilter(soap, n, NULL, NULL, NULL);
}

inline _tds__SetIPAddressFilter * soap_new_req__tds__SetIPAddressFilter(
	struct soap *soap,
	tt__IPAddressFilter *IPAddressFilter)
{
	_tds__SetIPAddressFilter *_p = soap_new__tds__SetIPAddressFilter(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetIPAddressFilter::IPAddressFilter = IPAddressFilter;
	}
	return _p;
}

inline _tds__SetIPAddressFilter * soap_new_set__tds__SetIPAddressFilter(
	struct soap *soap,
	tt__IPAddressFilter *IPAddressFilter)
{
	_tds__SetIPAddressFilter *_p = soap_new__tds__SetIPAddressFilter(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetIPAddressFilter::IPAddressFilter = IPAddressFilter;
	}
	return _p;
}

inline int soap_write__tds__SetIPAddressFilter(struct soap *soap, _tds__SetIPAddressFilter const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetIPAddressFilter", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetIPAddressFilter * SOAP_FMAC4 soap_get__tds__SetIPAddressFilter(struct soap*, _tds__SetIPAddressFilter *, const char*, const char*);

inline int soap_read__tds__SetIPAddressFilter(struct soap *soap, _tds__SetIPAddressFilter *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__SetIPAddressFilter(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__GetIPAddressFilterResponse_DEFINED
#define SOAP_TYPE__tds__GetIPAddressFilterResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetIPAddressFilterResponse(struct soap*, const char*, int, const _tds__GetIPAddressFilterResponse *, const char*);
SOAP_FMAC3 _tds__GetIPAddressFilterResponse * SOAP_FMAC4 soap_in__tds__GetIPAddressFilterResponse(struct soap*, const char*, _tds__GetIPAddressFilterResponse *, const char*);
SOAP_FMAC1 _tds__GetIPAddressFilterResponse * SOAP_FMAC2 soap_instantiate__tds__GetIPAddressFilterResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetIPAddressFilterResponse * soap_new__tds__GetIPAddressFilterResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetIPAddressFilterResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__GetIPAddressFilterResponse * soap_new_req__tds__GetIPAddressFilterResponse(
	struct soap *soap,
	tt__IPAddressFilter *IPAddressFilter)
{
	_tds__GetIPAddressFilterResponse *_p = soap_new__tds__GetIPAddressFilterResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetIPAddressFilterResponse::IPAddressFilter = IPAddressFilter;
	}
	return _p;
}

inline _tds__GetIPAddressFilterResponse * soap_new_set__tds__GetIPAddressFilterResponse(
	struct soap *soap,
	tt__IPAddressFilter *IPAddressFilter)
{
	_tds__GetIPAddressFilterResponse *_p = soap_new__tds__GetIPAddressFilterResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetIPAddressFilterResponse::IPAddressFilter = IPAddressFilter;
	}
	return _p;
}

inline int soap_write__tds__GetIPAddressFilterResponse(struct soap *soap, _tds__GetIPAddressFilterResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetIPAddressFilterResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetIPAddressFilterResponse * SOAP_FMAC4 soap_get__tds__GetIPAddressFilterResponse(struct soap*, _tds__GetIPAddressFilterResponse *, const char*, const char*);

inline int soap_read__tds__GetIPAddressFilterResponse(struct soap *soap, _tds__GetIPAddressFilterResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__GetIPAddressFilterResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__GetIPAddressFilter_DEFINED
#define SOAP_TYPE__tds__GetIPAddressFilter_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetIPAddressFilter(struct soap*, const char*, int, const _tds__GetIPAddressFilter *, const char*);
SOAP_FMAC3 _tds__GetIPAddressFilter * SOAP_FMAC4 soap_in__tds__GetIPAddressFilter(struct soap*, const char*, _tds__GetIPAddressFilter *, const char*);
SOAP_FMAC1 _tds__GetIPAddressFilter * SOAP_FMAC2 soap_instantiate__tds__GetIPAddressFilter(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetIPAddressFilter * soap_new__tds__GetIPAddressFilter(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetIPAddressFilter(soap, n, NULL, NULL, NULL);
}

inline _tds__GetIPAddressFilter * soap_new_req__tds__GetIPAddressFilter(
	struct soap *soap)
{
	_tds__GetIPAddressFilter *_p = soap_new__tds__GetIPAddressFilter(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__GetIPAddressFilter * soap_new_set__tds__GetIPAddressFilter(
	struct soap *soap)
{
	_tds__GetIPAddressFilter *_p = soap_new__tds__GetIPAddressFilter(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__GetIPAddressFilter(struct soap *soap, _tds__GetIPAddressFilter const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetIPAddressFilter", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetIPAddressFilter * SOAP_FMAC4 soap_get__tds__GetIPAddressFilter(struct soap*, _tds__GetIPAddressFilter *, const char*, const char*);

inline int soap_read__tds__GetIPAddressFilter(struct soap *soap, _tds__GetIPAddressFilter *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__GetIPAddressFilter(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__SetZeroConfigurationResponse_DEFINED
#define SOAP_TYPE__tds__SetZeroConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetZeroConfigurationResponse(struct soap*, const char*, int, const _tds__SetZeroConfigurationResponse *, const char*);
SOAP_FMAC3 _tds__SetZeroConfigurationResponse * SOAP_FMAC4 soap_in__tds__SetZeroConfigurationResponse(struct soap*, const char*, _tds__SetZeroConfigurationResponse *, const char*);
SOAP_FMAC1 _tds__SetZeroConfigurationResponse * SOAP_FMAC2 soap_instantiate__tds__SetZeroConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetZeroConfigurationResponse * soap_new__tds__SetZeroConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetZeroConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__SetZeroConfigurationResponse * soap_new_req__tds__SetZeroConfigurationResponse(
	struct soap *soap)
{
	_tds__SetZeroConfigurationResponse *_p = soap_new__tds__SetZeroConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__SetZeroConfigurationResponse * soap_new_set__tds__SetZeroConfigurationResponse(
	struct soap *soap)
{
	_tds__SetZeroConfigurationResponse *_p = soap_new__tds__SetZeroConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__SetZeroConfigurationResponse(struct soap *soap, _tds__SetZeroConfigurationResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetZeroConfigurationResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetZeroConfigurationResponse * SOAP_FMAC4 soap_get__tds__SetZeroConfigurationResponse(struct soap*, _tds__SetZeroConfigurationResponse *, const char*, const char*);

inline int soap_read__tds__SetZeroConfigurationResponse(struct soap *soap, _tds__SetZeroConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__SetZeroConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__SetZeroConfiguration_DEFINED
#define SOAP_TYPE__tds__SetZeroConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetZeroConfiguration(struct soap*, const char*, int, const _tds__SetZeroConfiguration *, const char*);
SOAP_FMAC3 _tds__SetZeroConfiguration * SOAP_FMAC4 soap_in__tds__SetZeroConfiguration(struct soap*, const char*, _tds__SetZeroConfiguration *, const char*);
SOAP_FMAC1 _tds__SetZeroConfiguration * SOAP_FMAC2 soap_instantiate__tds__SetZeroConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetZeroConfiguration * soap_new__tds__SetZeroConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetZeroConfiguration(soap, n, NULL, NULL, NULL);
}

inline _tds__SetZeroConfiguration * soap_new_req__tds__SetZeroConfiguration(
	struct soap *soap,
	const std::string& InterfaceToken,
	bool Enabled)
{
	_tds__SetZeroConfiguration *_p = soap_new__tds__SetZeroConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetZeroConfiguration::InterfaceToken = InterfaceToken;
		_p->_tds__SetZeroConfiguration::Enabled = Enabled;
	}
	return _p;
}

inline _tds__SetZeroConfiguration * soap_new_set__tds__SetZeroConfiguration(
	struct soap *soap,
	const std::string& InterfaceToken,
	bool Enabled)
{
	_tds__SetZeroConfiguration *_p = soap_new__tds__SetZeroConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetZeroConfiguration::InterfaceToken = InterfaceToken;
		_p->_tds__SetZeroConfiguration::Enabled = Enabled;
	}
	return _p;
}

inline int soap_write__tds__SetZeroConfiguration(struct soap *soap, _tds__SetZeroConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetZeroConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetZeroConfiguration * SOAP_FMAC4 soap_get__tds__SetZeroConfiguration(struct soap*, _tds__SetZeroConfiguration *, const char*, const char*);

inline int soap_read__tds__SetZeroConfiguration(struct soap *soap, _tds__SetZeroConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__SetZeroConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__GetZeroConfigurationResponse_DEFINED
#define SOAP_TYPE__tds__GetZeroConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetZeroConfigurationResponse(struct soap*, const char*, int, const _tds__GetZeroConfigurationResponse *, const char*);
SOAP_FMAC3 _tds__GetZeroConfigurationResponse * SOAP_FMAC4 soap_in__tds__GetZeroConfigurationResponse(struct soap*, const char*, _tds__GetZeroConfigurationResponse *, const char*);
SOAP_FMAC1 _tds__GetZeroConfigurationResponse * SOAP_FMAC2 soap_instantiate__tds__GetZeroConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetZeroConfigurationResponse * soap_new__tds__GetZeroConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetZeroConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__GetZeroConfigurationResponse * soap_new_req__tds__GetZeroConfigurationResponse(
	struct soap *soap,
	tt__NetworkZeroConfiguration *ZeroConfiguration)
{
	_tds__GetZeroConfigurationResponse *_p = soap_new__tds__GetZeroConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetZeroConfigurationResponse::ZeroConfiguration = ZeroConfiguration;
	}
	return _p;
}

inline _tds__GetZeroConfigurationResponse * soap_new_set__tds__GetZeroConfigurationResponse(
	struct soap *soap,
	tt__NetworkZeroConfiguration *ZeroConfiguration)
{
	_tds__GetZeroConfigurationResponse *_p = soap_new__tds__GetZeroConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetZeroConfigurationResponse::ZeroConfiguration = ZeroConfiguration;
	}
	return _p;
}

inline int soap_write__tds__GetZeroConfigurationResponse(struct soap *soap, _tds__GetZeroConfigurationResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetZeroConfigurationResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetZeroConfigurationResponse * SOAP_FMAC4 soap_get__tds__GetZeroConfigurationResponse(struct soap*, _tds__GetZeroConfigurationResponse *, const char*, const char*);

inline int soap_read__tds__GetZeroConfigurationResponse(struct soap *soap, _tds__GetZeroConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__GetZeroConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__GetZeroConfiguration_DEFINED
#define SOAP_TYPE__tds__GetZeroConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetZeroConfiguration(struct soap*, const char*, int, const _tds__GetZeroConfiguration *, const char*);
SOAP_FMAC3 _tds__GetZeroConfiguration * SOAP_FMAC4 soap_in__tds__GetZeroConfiguration(struct soap*, const char*, _tds__GetZeroConfiguration *, const char*);
SOAP_FMAC1 _tds__GetZeroConfiguration * SOAP_FMAC2 soap_instantiate__tds__GetZeroConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetZeroConfiguration * soap_new__tds__GetZeroConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetZeroConfiguration(soap, n, NULL, NULL, NULL);
}

inline _tds__GetZeroConfiguration * soap_new_req__tds__GetZeroConfiguration(
	struct soap *soap)
{
	_tds__GetZeroConfiguration *_p = soap_new__tds__GetZeroConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__GetZeroConfiguration * soap_new_set__tds__GetZeroConfiguration(
	struct soap *soap)
{
	_tds__GetZeroConfiguration *_p = soap_new__tds__GetZeroConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__GetZeroConfiguration(struct soap *soap, _tds__GetZeroConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetZeroConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetZeroConfiguration * SOAP_FMAC4 soap_get__tds__GetZeroConfiguration(struct soap*, _tds__GetZeroConfiguration *, const char*, const char*);

inline int soap_read__tds__GetZeroConfiguration(struct soap *soap, _tds__GetZeroConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__GetZeroConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__SetNetworkDefaultGatewayResponse_DEFINED
#define SOAP_TYPE__tds__SetNetworkDefaultGatewayResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetNetworkDefaultGatewayResponse(struct soap*, const char*, int, const _tds__SetNetworkDefaultGatewayResponse *, const char*);
SOAP_FMAC3 _tds__SetNetworkDefaultGatewayResponse * SOAP_FMAC4 soap_in__tds__SetNetworkDefaultGatewayResponse(struct soap*, const char*, _tds__SetNetworkDefaultGatewayResponse *, const char*);
SOAP_FMAC1 _tds__SetNetworkDefaultGatewayResponse * SOAP_FMAC2 soap_instantiate__tds__SetNetworkDefaultGatewayResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetNetworkDefaultGatewayResponse * soap_new__tds__SetNetworkDefaultGatewayResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetNetworkDefaultGatewayResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__SetNetworkDefaultGatewayResponse * soap_new_req__tds__SetNetworkDefaultGatewayResponse(
	struct soap *soap)
{
	_tds__SetNetworkDefaultGatewayResponse *_p = soap_new__tds__SetNetworkDefaultGatewayResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__SetNetworkDefaultGatewayResponse * soap_new_set__tds__SetNetworkDefaultGatewayResponse(
	struct soap *soap)
{
	_tds__SetNetworkDefaultGatewayResponse *_p = soap_new__tds__SetNetworkDefaultGatewayResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__SetNetworkDefaultGatewayResponse(struct soap *soap, _tds__SetNetworkDefaultGatewayResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetNetworkDefaultGatewayResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetNetworkDefaultGatewayResponse * SOAP_FMAC4 soap_get__tds__SetNetworkDefaultGatewayResponse(struct soap*, _tds__SetNetworkDefaultGatewayResponse *, const char*, const char*);

inline int soap_read__tds__SetNetworkDefaultGatewayResponse(struct soap *soap, _tds__SetNetworkDefaultGatewayResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__SetNetworkDefaultGatewayResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__SetNetworkDefaultGateway_DEFINED
#define SOAP_TYPE__tds__SetNetworkDefaultGateway_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetNetworkDefaultGateway(struct soap*, const char*, int, const _tds__SetNetworkDefaultGateway *, const char*);
SOAP_FMAC3 _tds__SetNetworkDefaultGateway * SOAP_FMAC4 soap_in__tds__SetNetworkDefaultGateway(struct soap*, const char*, _tds__SetNetworkDefaultGateway *, const char*);
SOAP_FMAC1 _tds__SetNetworkDefaultGateway * SOAP_FMAC2 soap_instantiate__tds__SetNetworkDefaultGateway(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetNetworkDefaultGateway * soap_new__tds__SetNetworkDefaultGateway(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetNetworkDefaultGateway(soap, n, NULL, NULL, NULL);
}

inline _tds__SetNetworkDefaultGateway * soap_new_req__tds__SetNetworkDefaultGateway(
	struct soap *soap)
{
	_tds__SetNetworkDefaultGateway *_p = soap_new__tds__SetNetworkDefaultGateway(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__SetNetworkDefaultGateway * soap_new_set__tds__SetNetworkDefaultGateway(
	struct soap *soap,
	const std::vector<std::string> & IPv4Address,
	const std::vector<std::string> & IPv6Address)
{
	_tds__SetNetworkDefaultGateway *_p = soap_new__tds__SetNetworkDefaultGateway(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetNetworkDefaultGateway::IPv4Address = IPv4Address;
		_p->_tds__SetNetworkDefaultGateway::IPv6Address = IPv6Address;
	}
	return _p;
}

inline int soap_write__tds__SetNetworkDefaultGateway(struct soap *soap, _tds__SetNetworkDefaultGateway const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetNetworkDefaultGateway", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetNetworkDefaultGateway * SOAP_FMAC4 soap_get__tds__SetNetworkDefaultGateway(struct soap*, _tds__SetNetworkDefaultGateway *, const char*, const char*);

inline int soap_read__tds__SetNetworkDefaultGateway(struct soap *soap, _tds__SetNetworkDefaultGateway *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__SetNetworkDefaultGateway(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__GetNetworkDefaultGatewayResponse_DEFINED
#define SOAP_TYPE__tds__GetNetworkDefaultGatewayResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetNetworkDefaultGatewayResponse(struct soap*, const char*, int, const _tds__GetNetworkDefaultGatewayResponse *, const char*);
SOAP_FMAC3 _tds__GetNetworkDefaultGatewayResponse * SOAP_FMAC4 soap_in__tds__GetNetworkDefaultGatewayResponse(struct soap*, const char*, _tds__GetNetworkDefaultGatewayResponse *, const char*);
SOAP_FMAC1 _tds__GetNetworkDefaultGatewayResponse * SOAP_FMAC2 soap_instantiate__tds__GetNetworkDefaultGatewayResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetNetworkDefaultGatewayResponse * soap_new__tds__GetNetworkDefaultGatewayResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetNetworkDefaultGatewayResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__GetNetworkDefaultGatewayResponse * soap_new_req__tds__GetNetworkDefaultGatewayResponse(
	struct soap *soap,
	tt__NetworkGateway *NetworkGateway)
{
	_tds__GetNetworkDefaultGatewayResponse *_p = soap_new__tds__GetNetworkDefaultGatewayResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetNetworkDefaultGatewayResponse::NetworkGateway = NetworkGateway;
	}
	return _p;
}

inline _tds__GetNetworkDefaultGatewayResponse * soap_new_set__tds__GetNetworkDefaultGatewayResponse(
	struct soap *soap,
	tt__NetworkGateway *NetworkGateway)
{
	_tds__GetNetworkDefaultGatewayResponse *_p = soap_new__tds__GetNetworkDefaultGatewayResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetNetworkDefaultGatewayResponse::NetworkGateway = NetworkGateway;
	}
	return _p;
}

inline int soap_write__tds__GetNetworkDefaultGatewayResponse(struct soap *soap, _tds__GetNetworkDefaultGatewayResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetNetworkDefaultGatewayResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetNetworkDefaultGatewayResponse * SOAP_FMAC4 soap_get__tds__GetNetworkDefaultGatewayResponse(struct soap*, _tds__GetNetworkDefaultGatewayResponse *, const char*, const char*);

inline int soap_read__tds__GetNetworkDefaultGatewayResponse(struct soap *soap, _tds__GetNetworkDefaultGatewayResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__GetNetworkDefaultGatewayResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__GetNetworkDefaultGateway_DEFINED
#define SOAP_TYPE__tds__GetNetworkDefaultGateway_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetNetworkDefaultGateway(struct soap*, const char*, int, const _tds__GetNetworkDefaultGateway *, const char*);
SOAP_FMAC3 _tds__GetNetworkDefaultGateway * SOAP_FMAC4 soap_in__tds__GetNetworkDefaultGateway(struct soap*, const char*, _tds__GetNetworkDefaultGateway *, const char*);
SOAP_FMAC1 _tds__GetNetworkDefaultGateway * SOAP_FMAC2 soap_instantiate__tds__GetNetworkDefaultGateway(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetNetworkDefaultGateway * soap_new__tds__GetNetworkDefaultGateway(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetNetworkDefaultGateway(soap, n, NULL, NULL, NULL);
}

inline _tds__GetNetworkDefaultGateway * soap_new_req__tds__GetNetworkDefaultGateway(
	struct soap *soap)
{
	_tds__GetNetworkDefaultGateway *_p = soap_new__tds__GetNetworkDefaultGateway(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__GetNetworkDefaultGateway * soap_new_set__tds__GetNetworkDefaultGateway(
	struct soap *soap)
{
	_tds__GetNetworkDefaultGateway *_p = soap_new__tds__GetNetworkDefaultGateway(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__GetNetworkDefaultGateway(struct soap *soap, _tds__GetNetworkDefaultGateway const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetNetworkDefaultGateway", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetNetworkDefaultGateway * SOAP_FMAC4 soap_get__tds__GetNetworkDefaultGateway(struct soap*, _tds__GetNetworkDefaultGateway *, const char*, const char*);

inline int soap_read__tds__GetNetworkDefaultGateway(struct soap *soap, _tds__GetNetworkDefaultGateway *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__GetNetworkDefaultGateway(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__SetNetworkProtocolsResponse_DEFINED
#define SOAP_TYPE__tds__SetNetworkProtocolsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetNetworkProtocolsResponse(struct soap*, const char*, int, const _tds__SetNetworkProtocolsResponse *, const char*);
SOAP_FMAC3 _tds__SetNetworkProtocolsResponse * SOAP_FMAC4 soap_in__tds__SetNetworkProtocolsResponse(struct soap*, const char*, _tds__SetNetworkProtocolsResponse *, const char*);
SOAP_FMAC1 _tds__SetNetworkProtocolsResponse * SOAP_FMAC2 soap_instantiate__tds__SetNetworkProtocolsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetNetworkProtocolsResponse * soap_new__tds__SetNetworkProtocolsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetNetworkProtocolsResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__SetNetworkProtocolsResponse * soap_new_req__tds__SetNetworkProtocolsResponse(
	struct soap *soap)
{
	_tds__SetNetworkProtocolsResponse *_p = soap_new__tds__SetNetworkProtocolsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__SetNetworkProtocolsResponse * soap_new_set__tds__SetNetworkProtocolsResponse(
	struct soap *soap)
{
	_tds__SetNetworkProtocolsResponse *_p = soap_new__tds__SetNetworkProtocolsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__SetNetworkProtocolsResponse(struct soap *soap, _tds__SetNetworkProtocolsResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetNetworkProtocolsResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetNetworkProtocolsResponse * SOAP_FMAC4 soap_get__tds__SetNetworkProtocolsResponse(struct soap*, _tds__SetNetworkProtocolsResponse *, const char*, const char*);

inline int soap_read__tds__SetNetworkProtocolsResponse(struct soap *soap, _tds__SetNetworkProtocolsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__SetNetworkProtocolsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__SetNetworkProtocols_DEFINED
#define SOAP_TYPE__tds__SetNetworkProtocols_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetNetworkProtocols(struct soap*, const char*, int, const _tds__SetNetworkProtocols *, const char*);
SOAP_FMAC3 _tds__SetNetworkProtocols * SOAP_FMAC4 soap_in__tds__SetNetworkProtocols(struct soap*, const char*, _tds__SetNetworkProtocols *, const char*);
SOAP_FMAC1 _tds__SetNetworkProtocols * SOAP_FMAC2 soap_instantiate__tds__SetNetworkProtocols(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetNetworkProtocols * soap_new__tds__SetNetworkProtocols(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetNetworkProtocols(soap, n, NULL, NULL, NULL);
}

inline _tds__SetNetworkProtocols * soap_new_req__tds__SetNetworkProtocols(
	struct soap *soap,
	const std::vector<tt__NetworkProtocol *> & NetworkProtocols)
{
	_tds__SetNetworkProtocols *_p = soap_new__tds__SetNetworkProtocols(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetNetworkProtocols::NetworkProtocols = NetworkProtocols;
	}
	return _p;
}

inline _tds__SetNetworkProtocols * soap_new_set__tds__SetNetworkProtocols(
	struct soap *soap,
	const std::vector<tt__NetworkProtocol *> & NetworkProtocols)
{
	_tds__SetNetworkProtocols *_p = soap_new__tds__SetNetworkProtocols(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetNetworkProtocols::NetworkProtocols = NetworkProtocols;
	}
	return _p;
}

inline int soap_write__tds__SetNetworkProtocols(struct soap *soap, _tds__SetNetworkProtocols const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetNetworkProtocols", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetNetworkProtocols * SOAP_FMAC4 soap_get__tds__SetNetworkProtocols(struct soap*, _tds__SetNetworkProtocols *, const char*, const char*);

inline int soap_read__tds__SetNetworkProtocols(struct soap *soap, _tds__SetNetworkProtocols *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__SetNetworkProtocols(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__GetNetworkProtocolsResponse_DEFINED
#define SOAP_TYPE__tds__GetNetworkProtocolsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetNetworkProtocolsResponse(struct soap*, const char*, int, const _tds__GetNetworkProtocolsResponse *, const char*);
SOAP_FMAC3 _tds__GetNetworkProtocolsResponse * SOAP_FMAC4 soap_in__tds__GetNetworkProtocolsResponse(struct soap*, const char*, _tds__GetNetworkProtocolsResponse *, const char*);
SOAP_FMAC1 _tds__GetNetworkProtocolsResponse * SOAP_FMAC2 soap_instantiate__tds__GetNetworkProtocolsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetNetworkProtocolsResponse * soap_new__tds__GetNetworkProtocolsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetNetworkProtocolsResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__GetNetworkProtocolsResponse * soap_new_req__tds__GetNetworkProtocolsResponse(
	struct soap *soap)
{
	_tds__GetNetworkProtocolsResponse *_p = soap_new__tds__GetNetworkProtocolsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__GetNetworkProtocolsResponse * soap_new_set__tds__GetNetworkProtocolsResponse(
	struct soap *soap,
	const std::vector<tt__NetworkProtocol *> & NetworkProtocols)
{
	_tds__GetNetworkProtocolsResponse *_p = soap_new__tds__GetNetworkProtocolsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetNetworkProtocolsResponse::NetworkProtocols = NetworkProtocols;
	}
	return _p;
}

inline int soap_write__tds__GetNetworkProtocolsResponse(struct soap *soap, _tds__GetNetworkProtocolsResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetNetworkProtocolsResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetNetworkProtocolsResponse * SOAP_FMAC4 soap_get__tds__GetNetworkProtocolsResponse(struct soap*, _tds__GetNetworkProtocolsResponse *, const char*, const char*);

inline int soap_read__tds__GetNetworkProtocolsResponse(struct soap *soap, _tds__GetNetworkProtocolsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__GetNetworkProtocolsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__GetNetworkProtocols_DEFINED
#define SOAP_TYPE__tds__GetNetworkProtocols_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetNetworkProtocols(struct soap*, const char*, int, const _tds__GetNetworkProtocols *, const char*);
SOAP_FMAC3 _tds__GetNetworkProtocols * SOAP_FMAC4 soap_in__tds__GetNetworkProtocols(struct soap*, const char*, _tds__GetNetworkProtocols *, const char*);
SOAP_FMAC1 _tds__GetNetworkProtocols * SOAP_FMAC2 soap_instantiate__tds__GetNetworkProtocols(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetNetworkProtocols * soap_new__tds__GetNetworkProtocols(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetNetworkProtocols(soap, n, NULL, NULL, NULL);
}

inline _tds__GetNetworkProtocols * soap_new_req__tds__GetNetworkProtocols(
	struct soap *soap)
{
	_tds__GetNetworkProtocols *_p = soap_new__tds__GetNetworkProtocols(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__GetNetworkProtocols * soap_new_set__tds__GetNetworkProtocols(
	struct soap *soap)
{
	_tds__GetNetworkProtocols *_p = soap_new__tds__GetNetworkProtocols(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__GetNetworkProtocols(struct soap *soap, _tds__GetNetworkProtocols const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetNetworkProtocols", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetNetworkProtocols * SOAP_FMAC4 soap_get__tds__GetNetworkProtocols(struct soap*, _tds__GetNetworkProtocols *, const char*, const char*);

inline int soap_read__tds__GetNetworkProtocols(struct soap *soap, _tds__GetNetworkProtocols *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__GetNetworkProtocols(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__SetNetworkInterfacesResponse_DEFINED
#define SOAP_TYPE__tds__SetNetworkInterfacesResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetNetworkInterfacesResponse(struct soap*, const char*, int, const _tds__SetNetworkInterfacesResponse *, const char*);
SOAP_FMAC3 _tds__SetNetworkInterfacesResponse * SOAP_FMAC4 soap_in__tds__SetNetworkInterfacesResponse(struct soap*, const char*, _tds__SetNetworkInterfacesResponse *, const char*);
SOAP_FMAC1 _tds__SetNetworkInterfacesResponse * SOAP_FMAC2 soap_instantiate__tds__SetNetworkInterfacesResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetNetworkInterfacesResponse * soap_new__tds__SetNetworkInterfacesResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetNetworkInterfacesResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__SetNetworkInterfacesResponse * soap_new_req__tds__SetNetworkInterfacesResponse(
	struct soap *soap,
	bool RebootNeeded)
{
	_tds__SetNetworkInterfacesResponse *_p = soap_new__tds__SetNetworkInterfacesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetNetworkInterfacesResponse::RebootNeeded = RebootNeeded;
	}
	return _p;
}

inline _tds__SetNetworkInterfacesResponse * soap_new_set__tds__SetNetworkInterfacesResponse(
	struct soap *soap,
	bool RebootNeeded)
{
	_tds__SetNetworkInterfacesResponse *_p = soap_new__tds__SetNetworkInterfacesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetNetworkInterfacesResponse::RebootNeeded = RebootNeeded;
	}
	return _p;
}

inline int soap_write__tds__SetNetworkInterfacesResponse(struct soap *soap, _tds__SetNetworkInterfacesResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetNetworkInterfacesResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetNetworkInterfacesResponse * SOAP_FMAC4 soap_get__tds__SetNetworkInterfacesResponse(struct soap*, _tds__SetNetworkInterfacesResponse *, const char*, const char*);

inline int soap_read__tds__SetNetworkInterfacesResponse(struct soap *soap, _tds__SetNetworkInterfacesResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__SetNetworkInterfacesResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__SetNetworkInterfaces_DEFINED
#define SOAP_TYPE__tds__SetNetworkInterfaces_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetNetworkInterfaces(struct soap*, const char*, int, const _tds__SetNetworkInterfaces *, const char*);
SOAP_FMAC3 _tds__SetNetworkInterfaces * SOAP_FMAC4 soap_in__tds__SetNetworkInterfaces(struct soap*, const char*, _tds__SetNetworkInterfaces *, const char*);
SOAP_FMAC1 _tds__SetNetworkInterfaces * SOAP_FMAC2 soap_instantiate__tds__SetNetworkInterfaces(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetNetworkInterfaces * soap_new__tds__SetNetworkInterfaces(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetNetworkInterfaces(soap, n, NULL, NULL, NULL);
}

inline _tds__SetNetworkInterfaces * soap_new_req__tds__SetNetworkInterfaces(
	struct soap *soap,
	const std::string& InterfaceToken,
	tt__NetworkInterfaceSetConfiguration *NetworkInterface)
{
	_tds__SetNetworkInterfaces *_p = soap_new__tds__SetNetworkInterfaces(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetNetworkInterfaces::InterfaceToken = InterfaceToken;
		_p->_tds__SetNetworkInterfaces::NetworkInterface = NetworkInterface;
	}
	return _p;
}

inline _tds__SetNetworkInterfaces * soap_new_set__tds__SetNetworkInterfaces(
	struct soap *soap,
	const std::string& InterfaceToken,
	tt__NetworkInterfaceSetConfiguration *NetworkInterface)
{
	_tds__SetNetworkInterfaces *_p = soap_new__tds__SetNetworkInterfaces(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetNetworkInterfaces::InterfaceToken = InterfaceToken;
		_p->_tds__SetNetworkInterfaces::NetworkInterface = NetworkInterface;
	}
	return _p;
}

inline int soap_write__tds__SetNetworkInterfaces(struct soap *soap, _tds__SetNetworkInterfaces const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetNetworkInterfaces", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetNetworkInterfaces * SOAP_FMAC4 soap_get__tds__SetNetworkInterfaces(struct soap*, _tds__SetNetworkInterfaces *, const char*, const char*);

inline int soap_read__tds__SetNetworkInterfaces(struct soap *soap, _tds__SetNetworkInterfaces *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__SetNetworkInterfaces(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__GetNetworkInterfacesResponse_DEFINED
#define SOAP_TYPE__tds__GetNetworkInterfacesResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetNetworkInterfacesResponse(struct soap*, const char*, int, const _tds__GetNetworkInterfacesResponse *, const char*);
SOAP_FMAC3 _tds__GetNetworkInterfacesResponse * SOAP_FMAC4 soap_in__tds__GetNetworkInterfacesResponse(struct soap*, const char*, _tds__GetNetworkInterfacesResponse *, const char*);
SOAP_FMAC1 _tds__GetNetworkInterfacesResponse * SOAP_FMAC2 soap_instantiate__tds__GetNetworkInterfacesResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetNetworkInterfacesResponse * soap_new__tds__GetNetworkInterfacesResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetNetworkInterfacesResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__GetNetworkInterfacesResponse * soap_new_req__tds__GetNetworkInterfacesResponse(
	struct soap *soap,
	const std::vector<tt__NetworkInterface *> & NetworkInterfaces)
{
	_tds__GetNetworkInterfacesResponse *_p = soap_new__tds__GetNetworkInterfacesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetNetworkInterfacesResponse::NetworkInterfaces = NetworkInterfaces;
	}
	return _p;
}

inline _tds__GetNetworkInterfacesResponse * soap_new_set__tds__GetNetworkInterfacesResponse(
	struct soap *soap,
	const std::vector<tt__NetworkInterface *> & NetworkInterfaces)
{
	_tds__GetNetworkInterfacesResponse *_p = soap_new__tds__GetNetworkInterfacesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetNetworkInterfacesResponse::NetworkInterfaces = NetworkInterfaces;
	}
	return _p;
}

inline int soap_write__tds__GetNetworkInterfacesResponse(struct soap *soap, _tds__GetNetworkInterfacesResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetNetworkInterfacesResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetNetworkInterfacesResponse * SOAP_FMAC4 soap_get__tds__GetNetworkInterfacesResponse(struct soap*, _tds__GetNetworkInterfacesResponse *, const char*, const char*);

inline int soap_read__tds__GetNetworkInterfacesResponse(struct soap *soap, _tds__GetNetworkInterfacesResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__GetNetworkInterfacesResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__GetNetworkInterfaces_DEFINED
#define SOAP_TYPE__tds__GetNetworkInterfaces_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetNetworkInterfaces(struct soap*, const char*, int, const _tds__GetNetworkInterfaces *, const char*);
SOAP_FMAC3 _tds__GetNetworkInterfaces * SOAP_FMAC4 soap_in__tds__GetNetworkInterfaces(struct soap*, const char*, _tds__GetNetworkInterfaces *, const char*);
SOAP_FMAC1 _tds__GetNetworkInterfaces * SOAP_FMAC2 soap_instantiate__tds__GetNetworkInterfaces(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetNetworkInterfaces * soap_new__tds__GetNetworkInterfaces(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetNetworkInterfaces(soap, n, NULL, NULL, NULL);
}

inline _tds__GetNetworkInterfaces * soap_new_req__tds__GetNetworkInterfaces(
	struct soap *soap)
{
	_tds__GetNetworkInterfaces *_p = soap_new__tds__GetNetworkInterfaces(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__GetNetworkInterfaces * soap_new_set__tds__GetNetworkInterfaces(
	struct soap *soap)
{
	_tds__GetNetworkInterfaces *_p = soap_new__tds__GetNetworkInterfaces(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__GetNetworkInterfaces(struct soap *soap, _tds__GetNetworkInterfaces const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetNetworkInterfaces", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetNetworkInterfaces * SOAP_FMAC4 soap_get__tds__GetNetworkInterfaces(struct soap*, _tds__GetNetworkInterfaces *, const char*, const char*);

inline int soap_read__tds__GetNetworkInterfaces(struct soap *soap, _tds__GetNetworkInterfaces *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__GetNetworkInterfaces(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__SetDynamicDNSResponse_DEFINED
#define SOAP_TYPE__tds__SetDynamicDNSResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetDynamicDNSResponse(struct soap*, const char*, int, const _tds__SetDynamicDNSResponse *, const char*);
SOAP_FMAC3 _tds__SetDynamicDNSResponse * SOAP_FMAC4 soap_in__tds__SetDynamicDNSResponse(struct soap*, const char*, _tds__SetDynamicDNSResponse *, const char*);
SOAP_FMAC1 _tds__SetDynamicDNSResponse * SOAP_FMAC2 soap_instantiate__tds__SetDynamicDNSResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetDynamicDNSResponse * soap_new__tds__SetDynamicDNSResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetDynamicDNSResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__SetDynamicDNSResponse * soap_new_req__tds__SetDynamicDNSResponse(
	struct soap *soap)
{
	_tds__SetDynamicDNSResponse *_p = soap_new__tds__SetDynamicDNSResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__SetDynamicDNSResponse * soap_new_set__tds__SetDynamicDNSResponse(
	struct soap *soap)
{
	_tds__SetDynamicDNSResponse *_p = soap_new__tds__SetDynamicDNSResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__SetDynamicDNSResponse(struct soap *soap, _tds__SetDynamicDNSResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetDynamicDNSResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetDynamicDNSResponse * SOAP_FMAC4 soap_get__tds__SetDynamicDNSResponse(struct soap*, _tds__SetDynamicDNSResponse *, const char*, const char*);

inline int soap_read__tds__SetDynamicDNSResponse(struct soap *soap, _tds__SetDynamicDNSResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__SetDynamicDNSResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__SetDynamicDNS_DEFINED
#define SOAP_TYPE__tds__SetDynamicDNS_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetDynamicDNS(struct soap*, const char*, int, const _tds__SetDynamicDNS *, const char*);
SOAP_FMAC3 _tds__SetDynamicDNS * SOAP_FMAC4 soap_in__tds__SetDynamicDNS(struct soap*, const char*, _tds__SetDynamicDNS *, const char*);
SOAP_FMAC1 _tds__SetDynamicDNS * SOAP_FMAC2 soap_instantiate__tds__SetDynamicDNS(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetDynamicDNS * soap_new__tds__SetDynamicDNS(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetDynamicDNS(soap, n, NULL, NULL, NULL);
}

inline _tds__SetDynamicDNS * soap_new_req__tds__SetDynamicDNS(
	struct soap *soap,
	enum tt__DynamicDNSType Type)
{
	_tds__SetDynamicDNS *_p = soap_new__tds__SetDynamicDNS(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetDynamicDNS::Type = Type;
	}
	return _p;
}

inline _tds__SetDynamicDNS * soap_new_set__tds__SetDynamicDNS(
	struct soap *soap,
	enum tt__DynamicDNSType Type,
	std::string *Name,
	LONG64 *TTL)
{
	_tds__SetDynamicDNS *_p = soap_new__tds__SetDynamicDNS(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetDynamicDNS::Type = Type;
		_p->_tds__SetDynamicDNS::Name = Name;
		_p->_tds__SetDynamicDNS::TTL = TTL;
	}
	return _p;
}

inline int soap_write__tds__SetDynamicDNS(struct soap *soap, _tds__SetDynamicDNS const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetDynamicDNS", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetDynamicDNS * SOAP_FMAC4 soap_get__tds__SetDynamicDNS(struct soap*, _tds__SetDynamicDNS *, const char*, const char*);

inline int soap_read__tds__SetDynamicDNS(struct soap *soap, _tds__SetDynamicDNS *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__SetDynamicDNS(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__GetDynamicDNSResponse_DEFINED
#define SOAP_TYPE__tds__GetDynamicDNSResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetDynamicDNSResponse(struct soap*, const char*, int, const _tds__GetDynamicDNSResponse *, const char*);
SOAP_FMAC3 _tds__GetDynamicDNSResponse * SOAP_FMAC4 soap_in__tds__GetDynamicDNSResponse(struct soap*, const char*, _tds__GetDynamicDNSResponse *, const char*);
SOAP_FMAC1 _tds__GetDynamicDNSResponse * SOAP_FMAC2 soap_instantiate__tds__GetDynamicDNSResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetDynamicDNSResponse * soap_new__tds__GetDynamicDNSResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetDynamicDNSResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__GetDynamicDNSResponse * soap_new_req__tds__GetDynamicDNSResponse(
	struct soap *soap,
	tt__DynamicDNSInformation *DynamicDNSInformation)
{
	_tds__GetDynamicDNSResponse *_p = soap_new__tds__GetDynamicDNSResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetDynamicDNSResponse::DynamicDNSInformation = DynamicDNSInformation;
	}
	return _p;
}

inline _tds__GetDynamicDNSResponse * soap_new_set__tds__GetDynamicDNSResponse(
	struct soap *soap,
	tt__DynamicDNSInformation *DynamicDNSInformation)
{
	_tds__GetDynamicDNSResponse *_p = soap_new__tds__GetDynamicDNSResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetDynamicDNSResponse::DynamicDNSInformation = DynamicDNSInformation;
	}
	return _p;
}

inline int soap_write__tds__GetDynamicDNSResponse(struct soap *soap, _tds__GetDynamicDNSResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetDynamicDNSResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetDynamicDNSResponse * SOAP_FMAC4 soap_get__tds__GetDynamicDNSResponse(struct soap*, _tds__GetDynamicDNSResponse *, const char*, const char*);

inline int soap_read__tds__GetDynamicDNSResponse(struct soap *soap, _tds__GetDynamicDNSResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__GetDynamicDNSResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__GetDynamicDNS_DEFINED
#define SOAP_TYPE__tds__GetDynamicDNS_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetDynamicDNS(struct soap*, const char*, int, const _tds__GetDynamicDNS *, const char*);
SOAP_FMAC3 _tds__GetDynamicDNS * SOAP_FMAC4 soap_in__tds__GetDynamicDNS(struct soap*, const char*, _tds__GetDynamicDNS *, const char*);
SOAP_FMAC1 _tds__GetDynamicDNS * SOAP_FMAC2 soap_instantiate__tds__GetDynamicDNS(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetDynamicDNS * soap_new__tds__GetDynamicDNS(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetDynamicDNS(soap, n, NULL, NULL, NULL);
}

inline _tds__GetDynamicDNS * soap_new_req__tds__GetDynamicDNS(
	struct soap *soap)
{
	_tds__GetDynamicDNS *_p = soap_new__tds__GetDynamicDNS(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__GetDynamicDNS * soap_new_set__tds__GetDynamicDNS(
	struct soap *soap)
{
	_tds__GetDynamicDNS *_p = soap_new__tds__GetDynamicDNS(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__GetDynamicDNS(struct soap *soap, _tds__GetDynamicDNS const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetDynamicDNS", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetDynamicDNS * SOAP_FMAC4 soap_get__tds__GetDynamicDNS(struct soap*, _tds__GetDynamicDNS *, const char*, const char*);

inline int soap_read__tds__GetDynamicDNS(struct soap *soap, _tds__GetDynamicDNS *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__GetDynamicDNS(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__SetNTPResponse_DEFINED
#define SOAP_TYPE__tds__SetNTPResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetNTPResponse(struct soap*, const char*, int, const _tds__SetNTPResponse *, const char*);
SOAP_FMAC3 _tds__SetNTPResponse * SOAP_FMAC4 soap_in__tds__SetNTPResponse(struct soap*, const char*, _tds__SetNTPResponse *, const char*);
SOAP_FMAC1 _tds__SetNTPResponse * SOAP_FMAC2 soap_instantiate__tds__SetNTPResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetNTPResponse * soap_new__tds__SetNTPResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetNTPResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__SetNTPResponse * soap_new_req__tds__SetNTPResponse(
	struct soap *soap)
{
	_tds__SetNTPResponse *_p = soap_new__tds__SetNTPResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__SetNTPResponse * soap_new_set__tds__SetNTPResponse(
	struct soap *soap)
{
	_tds__SetNTPResponse *_p = soap_new__tds__SetNTPResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__SetNTPResponse(struct soap *soap, _tds__SetNTPResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetNTPResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetNTPResponse * SOAP_FMAC4 soap_get__tds__SetNTPResponse(struct soap*, _tds__SetNTPResponse *, const char*, const char*);

inline int soap_read__tds__SetNTPResponse(struct soap *soap, _tds__SetNTPResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__SetNTPResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__SetNTP_DEFINED
#define SOAP_TYPE__tds__SetNTP_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetNTP(struct soap*, const char*, int, const _tds__SetNTP *, const char*);
SOAP_FMAC3 _tds__SetNTP * SOAP_FMAC4 soap_in__tds__SetNTP(struct soap*, const char*, _tds__SetNTP *, const char*);
SOAP_FMAC1 _tds__SetNTP * SOAP_FMAC2 soap_instantiate__tds__SetNTP(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetNTP * soap_new__tds__SetNTP(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetNTP(soap, n, NULL, NULL, NULL);
}

inline _tds__SetNTP * soap_new_req__tds__SetNTP(
	struct soap *soap,
	bool FromDHCP)
{
	_tds__SetNTP *_p = soap_new__tds__SetNTP(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetNTP::FromDHCP = FromDHCP;
	}
	return _p;
}

inline _tds__SetNTP * soap_new_set__tds__SetNTP(
	struct soap *soap,
	bool FromDHCP,
	const std::vector<tt__NetworkHost *> & NTPManual)
{
	_tds__SetNTP *_p = soap_new__tds__SetNTP(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetNTP::FromDHCP = FromDHCP;
		_p->_tds__SetNTP::NTPManual = NTPManual;
	}
	return _p;
}

inline int soap_write__tds__SetNTP(struct soap *soap, _tds__SetNTP const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetNTP", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetNTP * SOAP_FMAC4 soap_get__tds__SetNTP(struct soap*, _tds__SetNTP *, const char*, const char*);

inline int soap_read__tds__SetNTP(struct soap *soap, _tds__SetNTP *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__SetNTP(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__GetNTPResponse_DEFINED
#define SOAP_TYPE__tds__GetNTPResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetNTPResponse(struct soap*, const char*, int, const _tds__GetNTPResponse *, const char*);
SOAP_FMAC3 _tds__GetNTPResponse * SOAP_FMAC4 soap_in__tds__GetNTPResponse(struct soap*, const char*, _tds__GetNTPResponse *, const char*);
SOAP_FMAC1 _tds__GetNTPResponse * SOAP_FMAC2 soap_instantiate__tds__GetNTPResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetNTPResponse * soap_new__tds__GetNTPResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetNTPResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__GetNTPResponse * soap_new_req__tds__GetNTPResponse(
	struct soap *soap,
	tt__NTPInformation *NTPInformation)
{
	_tds__GetNTPResponse *_p = soap_new__tds__GetNTPResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetNTPResponse::NTPInformation = NTPInformation;
	}
	return _p;
}

inline _tds__GetNTPResponse * soap_new_set__tds__GetNTPResponse(
	struct soap *soap,
	tt__NTPInformation *NTPInformation)
{
	_tds__GetNTPResponse *_p = soap_new__tds__GetNTPResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetNTPResponse::NTPInformation = NTPInformation;
	}
	return _p;
}

inline int soap_write__tds__GetNTPResponse(struct soap *soap, _tds__GetNTPResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetNTPResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetNTPResponse * SOAP_FMAC4 soap_get__tds__GetNTPResponse(struct soap*, _tds__GetNTPResponse *, const char*, const char*);

inline int soap_read__tds__GetNTPResponse(struct soap *soap, _tds__GetNTPResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__GetNTPResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__GetNTP_DEFINED
#define SOAP_TYPE__tds__GetNTP_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetNTP(struct soap*, const char*, int, const _tds__GetNTP *, const char*);
SOAP_FMAC3 _tds__GetNTP * SOAP_FMAC4 soap_in__tds__GetNTP(struct soap*, const char*, _tds__GetNTP *, const char*);
SOAP_FMAC1 _tds__GetNTP * SOAP_FMAC2 soap_instantiate__tds__GetNTP(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetNTP * soap_new__tds__GetNTP(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetNTP(soap, n, NULL, NULL, NULL);
}

inline _tds__GetNTP * soap_new_req__tds__GetNTP(
	struct soap *soap)
{
	_tds__GetNTP *_p = soap_new__tds__GetNTP(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__GetNTP * soap_new_set__tds__GetNTP(
	struct soap *soap)
{
	_tds__GetNTP *_p = soap_new__tds__GetNTP(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__GetNTP(struct soap *soap, _tds__GetNTP const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetNTP", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetNTP * SOAP_FMAC4 soap_get__tds__GetNTP(struct soap*, _tds__GetNTP *, const char*, const char*);

inline int soap_read__tds__GetNTP(struct soap *soap, _tds__GetNTP *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__GetNTP(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__SetDNSResponse_DEFINED
#define SOAP_TYPE__tds__SetDNSResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetDNSResponse(struct soap*, const char*, int, const _tds__SetDNSResponse *, const char*);
SOAP_FMAC3 _tds__SetDNSResponse * SOAP_FMAC4 soap_in__tds__SetDNSResponse(struct soap*, const char*, _tds__SetDNSResponse *, const char*);
SOAP_FMAC1 _tds__SetDNSResponse * SOAP_FMAC2 soap_instantiate__tds__SetDNSResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetDNSResponse * soap_new__tds__SetDNSResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetDNSResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__SetDNSResponse * soap_new_req__tds__SetDNSResponse(
	struct soap *soap)
{
	_tds__SetDNSResponse *_p = soap_new__tds__SetDNSResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__SetDNSResponse * soap_new_set__tds__SetDNSResponse(
	struct soap *soap)
{
	_tds__SetDNSResponse *_p = soap_new__tds__SetDNSResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__SetDNSResponse(struct soap *soap, _tds__SetDNSResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetDNSResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetDNSResponse * SOAP_FMAC4 soap_get__tds__SetDNSResponse(struct soap*, _tds__SetDNSResponse *, const char*, const char*);

inline int soap_read__tds__SetDNSResponse(struct soap *soap, _tds__SetDNSResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__SetDNSResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__SetDNS_DEFINED
#define SOAP_TYPE__tds__SetDNS_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetDNS(struct soap*, const char*, int, const _tds__SetDNS *, const char*);
SOAP_FMAC3 _tds__SetDNS * SOAP_FMAC4 soap_in__tds__SetDNS(struct soap*, const char*, _tds__SetDNS *, const char*);
SOAP_FMAC1 _tds__SetDNS * SOAP_FMAC2 soap_instantiate__tds__SetDNS(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetDNS * soap_new__tds__SetDNS(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetDNS(soap, n, NULL, NULL, NULL);
}

inline _tds__SetDNS * soap_new_req__tds__SetDNS(
	struct soap *soap,
	bool FromDHCP)
{
	_tds__SetDNS *_p = soap_new__tds__SetDNS(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetDNS::FromDHCP = FromDHCP;
	}
	return _p;
}

inline _tds__SetDNS * soap_new_set__tds__SetDNS(
	struct soap *soap,
	bool FromDHCP,
	const std::vector<std::string> & SearchDomain,
	const std::vector<tt__IPAddress *> & DNSManual)
{
	_tds__SetDNS *_p = soap_new__tds__SetDNS(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetDNS::FromDHCP = FromDHCP;
		_p->_tds__SetDNS::SearchDomain = SearchDomain;
		_p->_tds__SetDNS::DNSManual = DNSManual;
	}
	return _p;
}

inline int soap_write__tds__SetDNS(struct soap *soap, _tds__SetDNS const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetDNS", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetDNS * SOAP_FMAC4 soap_get__tds__SetDNS(struct soap*, _tds__SetDNS *, const char*, const char*);

inline int soap_read__tds__SetDNS(struct soap *soap, _tds__SetDNS *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__SetDNS(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__GetDNSResponse_DEFINED
#define SOAP_TYPE__tds__GetDNSResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetDNSResponse(struct soap*, const char*, int, const _tds__GetDNSResponse *, const char*);
SOAP_FMAC3 _tds__GetDNSResponse * SOAP_FMAC4 soap_in__tds__GetDNSResponse(struct soap*, const char*, _tds__GetDNSResponse *, const char*);
SOAP_FMAC1 _tds__GetDNSResponse * SOAP_FMAC2 soap_instantiate__tds__GetDNSResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetDNSResponse * soap_new__tds__GetDNSResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetDNSResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__GetDNSResponse * soap_new_req__tds__GetDNSResponse(
	struct soap *soap,
	tt__DNSInformation *DNSInformation)
{
	_tds__GetDNSResponse *_p = soap_new__tds__GetDNSResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetDNSResponse::DNSInformation = DNSInformation;
	}
	return _p;
}

inline _tds__GetDNSResponse * soap_new_set__tds__GetDNSResponse(
	struct soap *soap,
	tt__DNSInformation *DNSInformation)
{
	_tds__GetDNSResponse *_p = soap_new__tds__GetDNSResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetDNSResponse::DNSInformation = DNSInformation;
	}
	return _p;
}

inline int soap_write__tds__GetDNSResponse(struct soap *soap, _tds__GetDNSResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetDNSResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetDNSResponse * SOAP_FMAC4 soap_get__tds__GetDNSResponse(struct soap*, _tds__GetDNSResponse *, const char*, const char*);

inline int soap_read__tds__GetDNSResponse(struct soap *soap, _tds__GetDNSResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__GetDNSResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__GetDNS_DEFINED
#define SOAP_TYPE__tds__GetDNS_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetDNS(struct soap*, const char*, int, const _tds__GetDNS *, const char*);
SOAP_FMAC3 _tds__GetDNS * SOAP_FMAC4 soap_in__tds__GetDNS(struct soap*, const char*, _tds__GetDNS *, const char*);
SOAP_FMAC1 _tds__GetDNS * SOAP_FMAC2 soap_instantiate__tds__GetDNS(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetDNS * soap_new__tds__GetDNS(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetDNS(soap, n, NULL, NULL, NULL);
}

inline _tds__GetDNS * soap_new_req__tds__GetDNS(
	struct soap *soap)
{
	_tds__GetDNS *_p = soap_new__tds__GetDNS(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__GetDNS * soap_new_set__tds__GetDNS(
	struct soap *soap)
{
	_tds__GetDNS *_p = soap_new__tds__GetDNS(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__GetDNS(struct soap *soap, _tds__GetDNS const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetDNS", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetDNS * SOAP_FMAC4 soap_get__tds__GetDNS(struct soap*, _tds__GetDNS *, const char*, const char*);

inline int soap_read__tds__GetDNS(struct soap *soap, _tds__GetDNS *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__GetDNS(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__SetHostnameFromDHCPResponse_DEFINED
#define SOAP_TYPE__tds__SetHostnameFromDHCPResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetHostnameFromDHCPResponse(struct soap*, const char*, int, const _tds__SetHostnameFromDHCPResponse *, const char*);
SOAP_FMAC3 _tds__SetHostnameFromDHCPResponse * SOAP_FMAC4 soap_in__tds__SetHostnameFromDHCPResponse(struct soap*, const char*, _tds__SetHostnameFromDHCPResponse *, const char*);
SOAP_FMAC1 _tds__SetHostnameFromDHCPResponse * SOAP_FMAC2 soap_instantiate__tds__SetHostnameFromDHCPResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetHostnameFromDHCPResponse * soap_new__tds__SetHostnameFromDHCPResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetHostnameFromDHCPResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__SetHostnameFromDHCPResponse * soap_new_req__tds__SetHostnameFromDHCPResponse(
	struct soap *soap,
	bool RebootNeeded)
{
	_tds__SetHostnameFromDHCPResponse *_p = soap_new__tds__SetHostnameFromDHCPResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetHostnameFromDHCPResponse::RebootNeeded = RebootNeeded;
	}
	return _p;
}

inline _tds__SetHostnameFromDHCPResponse * soap_new_set__tds__SetHostnameFromDHCPResponse(
	struct soap *soap,
	bool RebootNeeded)
{
	_tds__SetHostnameFromDHCPResponse *_p = soap_new__tds__SetHostnameFromDHCPResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetHostnameFromDHCPResponse::RebootNeeded = RebootNeeded;
	}
	return _p;
}

inline int soap_write__tds__SetHostnameFromDHCPResponse(struct soap *soap, _tds__SetHostnameFromDHCPResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetHostnameFromDHCPResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetHostnameFromDHCPResponse * SOAP_FMAC4 soap_get__tds__SetHostnameFromDHCPResponse(struct soap*, _tds__SetHostnameFromDHCPResponse *, const char*, const char*);

inline int soap_read__tds__SetHostnameFromDHCPResponse(struct soap *soap, _tds__SetHostnameFromDHCPResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__SetHostnameFromDHCPResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__SetHostnameFromDHCP_DEFINED
#define SOAP_TYPE__tds__SetHostnameFromDHCP_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetHostnameFromDHCP(struct soap*, const char*, int, const _tds__SetHostnameFromDHCP *, const char*);
SOAP_FMAC3 _tds__SetHostnameFromDHCP * SOAP_FMAC4 soap_in__tds__SetHostnameFromDHCP(struct soap*, const char*, _tds__SetHostnameFromDHCP *, const char*);
SOAP_FMAC1 _tds__SetHostnameFromDHCP * SOAP_FMAC2 soap_instantiate__tds__SetHostnameFromDHCP(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetHostnameFromDHCP * soap_new__tds__SetHostnameFromDHCP(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetHostnameFromDHCP(soap, n, NULL, NULL, NULL);
}

inline _tds__SetHostnameFromDHCP * soap_new_req__tds__SetHostnameFromDHCP(
	struct soap *soap,
	bool FromDHCP)
{
	_tds__SetHostnameFromDHCP *_p = soap_new__tds__SetHostnameFromDHCP(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetHostnameFromDHCP::FromDHCP = FromDHCP;
	}
	return _p;
}

inline _tds__SetHostnameFromDHCP * soap_new_set__tds__SetHostnameFromDHCP(
	struct soap *soap,
	bool FromDHCP)
{
	_tds__SetHostnameFromDHCP *_p = soap_new__tds__SetHostnameFromDHCP(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetHostnameFromDHCP::FromDHCP = FromDHCP;
	}
	return _p;
}

inline int soap_write__tds__SetHostnameFromDHCP(struct soap *soap, _tds__SetHostnameFromDHCP const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetHostnameFromDHCP", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetHostnameFromDHCP * SOAP_FMAC4 soap_get__tds__SetHostnameFromDHCP(struct soap*, _tds__SetHostnameFromDHCP *, const char*, const char*);

inline int soap_read__tds__SetHostnameFromDHCP(struct soap *soap, _tds__SetHostnameFromDHCP *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__SetHostnameFromDHCP(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__SetHostnameResponse_DEFINED
#define SOAP_TYPE__tds__SetHostnameResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetHostnameResponse(struct soap*, const char*, int, const _tds__SetHostnameResponse *, const char*);
SOAP_FMAC3 _tds__SetHostnameResponse * SOAP_FMAC4 soap_in__tds__SetHostnameResponse(struct soap*, const char*, _tds__SetHostnameResponse *, const char*);
SOAP_FMAC1 _tds__SetHostnameResponse * SOAP_FMAC2 soap_instantiate__tds__SetHostnameResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetHostnameResponse * soap_new__tds__SetHostnameResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetHostnameResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__SetHostnameResponse * soap_new_req__tds__SetHostnameResponse(
	struct soap *soap)
{
	_tds__SetHostnameResponse *_p = soap_new__tds__SetHostnameResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__SetHostnameResponse * soap_new_set__tds__SetHostnameResponse(
	struct soap *soap)
{
	_tds__SetHostnameResponse *_p = soap_new__tds__SetHostnameResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__SetHostnameResponse(struct soap *soap, _tds__SetHostnameResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetHostnameResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetHostnameResponse * SOAP_FMAC4 soap_get__tds__SetHostnameResponse(struct soap*, _tds__SetHostnameResponse *, const char*, const char*);

inline int soap_read__tds__SetHostnameResponse(struct soap *soap, _tds__SetHostnameResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__SetHostnameResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__SetHostname_DEFINED
#define SOAP_TYPE__tds__SetHostname_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetHostname(struct soap*, const char*, int, const _tds__SetHostname *, const char*);
SOAP_FMAC3 _tds__SetHostname * SOAP_FMAC4 soap_in__tds__SetHostname(struct soap*, const char*, _tds__SetHostname *, const char*);
SOAP_FMAC1 _tds__SetHostname * SOAP_FMAC2 soap_instantiate__tds__SetHostname(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetHostname * soap_new__tds__SetHostname(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetHostname(soap, n, NULL, NULL, NULL);
}

inline _tds__SetHostname * soap_new_req__tds__SetHostname(
	struct soap *soap,
	const std::string& Name)
{
	_tds__SetHostname *_p = soap_new__tds__SetHostname(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetHostname::Name = Name;
	}
	return _p;
}

inline _tds__SetHostname * soap_new_set__tds__SetHostname(
	struct soap *soap,
	const std::string& Name)
{
	_tds__SetHostname *_p = soap_new__tds__SetHostname(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetHostname::Name = Name;
	}
	return _p;
}

inline int soap_write__tds__SetHostname(struct soap *soap, _tds__SetHostname const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetHostname", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetHostname * SOAP_FMAC4 soap_get__tds__SetHostname(struct soap*, _tds__SetHostname *, const char*, const char*);

inline int soap_read__tds__SetHostname(struct soap *soap, _tds__SetHostname *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__SetHostname(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__GetHostnameResponse_DEFINED
#define SOAP_TYPE__tds__GetHostnameResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetHostnameResponse(struct soap*, const char*, int, const _tds__GetHostnameResponse *, const char*);
SOAP_FMAC3 _tds__GetHostnameResponse * SOAP_FMAC4 soap_in__tds__GetHostnameResponse(struct soap*, const char*, _tds__GetHostnameResponse *, const char*);
SOAP_FMAC1 _tds__GetHostnameResponse * SOAP_FMAC2 soap_instantiate__tds__GetHostnameResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetHostnameResponse * soap_new__tds__GetHostnameResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetHostnameResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__GetHostnameResponse * soap_new_req__tds__GetHostnameResponse(
	struct soap *soap,
	tt__HostnameInformation *HostnameInformation)
{
	_tds__GetHostnameResponse *_p = soap_new__tds__GetHostnameResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetHostnameResponse::HostnameInformation = HostnameInformation;
	}
	return _p;
}

inline _tds__GetHostnameResponse * soap_new_set__tds__GetHostnameResponse(
	struct soap *soap,
	tt__HostnameInformation *HostnameInformation)
{
	_tds__GetHostnameResponse *_p = soap_new__tds__GetHostnameResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetHostnameResponse::HostnameInformation = HostnameInformation;
	}
	return _p;
}

inline int soap_write__tds__GetHostnameResponse(struct soap *soap, _tds__GetHostnameResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetHostnameResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetHostnameResponse * SOAP_FMAC4 soap_get__tds__GetHostnameResponse(struct soap*, _tds__GetHostnameResponse *, const char*, const char*);

inline int soap_read__tds__GetHostnameResponse(struct soap *soap, _tds__GetHostnameResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__GetHostnameResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__GetHostname_DEFINED
#define SOAP_TYPE__tds__GetHostname_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetHostname(struct soap*, const char*, int, const _tds__GetHostname *, const char*);
SOAP_FMAC3 _tds__GetHostname * SOAP_FMAC4 soap_in__tds__GetHostname(struct soap*, const char*, _tds__GetHostname *, const char*);
SOAP_FMAC1 _tds__GetHostname * SOAP_FMAC2 soap_instantiate__tds__GetHostname(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetHostname * soap_new__tds__GetHostname(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetHostname(soap, n, NULL, NULL, NULL);
}

inline _tds__GetHostname * soap_new_req__tds__GetHostname(
	struct soap *soap)
{
	_tds__GetHostname *_p = soap_new__tds__GetHostname(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__GetHostname * soap_new_set__tds__GetHostname(
	struct soap *soap)
{
	_tds__GetHostname *_p = soap_new__tds__GetHostname(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__GetHostname(struct soap *soap, _tds__GetHostname const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetHostname", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetHostname * SOAP_FMAC4 soap_get__tds__GetHostname(struct soap*, _tds__GetHostname *, const char*, const char*);

inline int soap_read__tds__GetHostname(struct soap *soap, _tds__GetHostname *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__GetHostname(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__GetCapabilitiesResponse_DEFINED
#define SOAP_TYPE__tds__GetCapabilitiesResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetCapabilitiesResponse(struct soap*, const char*, int, const _tds__GetCapabilitiesResponse *, const char*);
SOAP_FMAC3 _tds__GetCapabilitiesResponse * SOAP_FMAC4 soap_in__tds__GetCapabilitiesResponse(struct soap*, const char*, _tds__GetCapabilitiesResponse *, const char*);
SOAP_FMAC1 _tds__GetCapabilitiesResponse * SOAP_FMAC2 soap_instantiate__tds__GetCapabilitiesResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetCapabilitiesResponse * soap_new__tds__GetCapabilitiesResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetCapabilitiesResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__GetCapabilitiesResponse * soap_new_req__tds__GetCapabilitiesResponse(
	struct soap *soap,
	tt__Capabilities *Capabilities)
{
	_tds__GetCapabilitiesResponse *_p = soap_new__tds__GetCapabilitiesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetCapabilitiesResponse::Capabilities = Capabilities;
	}
	return _p;
}

inline _tds__GetCapabilitiesResponse * soap_new_set__tds__GetCapabilitiesResponse(
	struct soap *soap,
	tt__Capabilities *Capabilities)
{
	_tds__GetCapabilitiesResponse *_p = soap_new__tds__GetCapabilitiesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetCapabilitiesResponse::Capabilities = Capabilities;
	}
	return _p;
}

inline int soap_write__tds__GetCapabilitiesResponse(struct soap *soap, _tds__GetCapabilitiesResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetCapabilitiesResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetCapabilitiesResponse * SOAP_FMAC4 soap_get__tds__GetCapabilitiesResponse(struct soap*, _tds__GetCapabilitiesResponse *, const char*, const char*);

inline int soap_read__tds__GetCapabilitiesResponse(struct soap *soap, _tds__GetCapabilitiesResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__GetCapabilitiesResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__GetCapabilities_DEFINED
#define SOAP_TYPE__tds__GetCapabilities_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetCapabilities(struct soap*, const char*, int, const _tds__GetCapabilities *, const char*);
SOAP_FMAC3 _tds__GetCapabilities * SOAP_FMAC4 soap_in__tds__GetCapabilities(struct soap*, const char*, _tds__GetCapabilities *, const char*);
SOAP_FMAC1 _tds__GetCapabilities * SOAP_FMAC2 soap_instantiate__tds__GetCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetCapabilities * soap_new__tds__GetCapabilities(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetCapabilities(soap, n, NULL, NULL, NULL);
}

inline _tds__GetCapabilities * soap_new_req__tds__GetCapabilities(
	struct soap *soap)
{
	_tds__GetCapabilities *_p = soap_new__tds__GetCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__GetCapabilities * soap_new_set__tds__GetCapabilities(
	struct soap *soap,
	const std::vector<enum tt__CapabilityCategory> & Category)
{
	_tds__GetCapabilities *_p = soap_new__tds__GetCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetCapabilities::Category = Category;
	}
	return _p;
}

inline int soap_write__tds__GetCapabilities(struct soap *soap, _tds__GetCapabilities const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetCapabilities", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetCapabilities * SOAP_FMAC4 soap_get__tds__GetCapabilities(struct soap*, _tds__GetCapabilities *, const char*, const char*);

inline int soap_read__tds__GetCapabilities(struct soap *soap, _tds__GetCapabilities *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__GetCapabilities(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__GetWsdlUrlResponse_DEFINED
#define SOAP_TYPE__tds__GetWsdlUrlResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetWsdlUrlResponse(struct soap*, const char*, int, const _tds__GetWsdlUrlResponse *, const char*);
SOAP_FMAC3 _tds__GetWsdlUrlResponse * SOAP_FMAC4 soap_in__tds__GetWsdlUrlResponse(struct soap*, const char*, _tds__GetWsdlUrlResponse *, const char*);
SOAP_FMAC1 _tds__GetWsdlUrlResponse * SOAP_FMAC2 soap_instantiate__tds__GetWsdlUrlResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetWsdlUrlResponse * soap_new__tds__GetWsdlUrlResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetWsdlUrlResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__GetWsdlUrlResponse * soap_new_req__tds__GetWsdlUrlResponse(
	struct soap *soap,
	const std::string& WsdlUrl)
{
	_tds__GetWsdlUrlResponse *_p = soap_new__tds__GetWsdlUrlResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetWsdlUrlResponse::WsdlUrl = WsdlUrl;
	}
	return _p;
}

inline _tds__GetWsdlUrlResponse * soap_new_set__tds__GetWsdlUrlResponse(
	struct soap *soap,
	const std::string& WsdlUrl)
{
	_tds__GetWsdlUrlResponse *_p = soap_new__tds__GetWsdlUrlResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetWsdlUrlResponse::WsdlUrl = WsdlUrl;
	}
	return _p;
}

inline int soap_write__tds__GetWsdlUrlResponse(struct soap *soap, _tds__GetWsdlUrlResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetWsdlUrlResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetWsdlUrlResponse * SOAP_FMAC4 soap_get__tds__GetWsdlUrlResponse(struct soap*, _tds__GetWsdlUrlResponse *, const char*, const char*);

inline int soap_read__tds__GetWsdlUrlResponse(struct soap *soap, _tds__GetWsdlUrlResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__GetWsdlUrlResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__GetWsdlUrl_DEFINED
#define SOAP_TYPE__tds__GetWsdlUrl_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetWsdlUrl(struct soap*, const char*, int, const _tds__GetWsdlUrl *, const char*);
SOAP_FMAC3 _tds__GetWsdlUrl * SOAP_FMAC4 soap_in__tds__GetWsdlUrl(struct soap*, const char*, _tds__GetWsdlUrl *, const char*);
SOAP_FMAC1 _tds__GetWsdlUrl * SOAP_FMAC2 soap_instantiate__tds__GetWsdlUrl(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetWsdlUrl * soap_new__tds__GetWsdlUrl(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetWsdlUrl(soap, n, NULL, NULL, NULL);
}

inline _tds__GetWsdlUrl * soap_new_req__tds__GetWsdlUrl(
	struct soap *soap)
{
	_tds__GetWsdlUrl *_p = soap_new__tds__GetWsdlUrl(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__GetWsdlUrl * soap_new_set__tds__GetWsdlUrl(
	struct soap *soap)
{
	_tds__GetWsdlUrl *_p = soap_new__tds__GetWsdlUrl(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__GetWsdlUrl(struct soap *soap, _tds__GetWsdlUrl const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetWsdlUrl", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetWsdlUrl * SOAP_FMAC4 soap_get__tds__GetWsdlUrl(struct soap*, _tds__GetWsdlUrl *, const char*, const char*);

inline int soap_read__tds__GetWsdlUrl(struct soap *soap, _tds__GetWsdlUrl *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__GetWsdlUrl(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__SetUserResponse_DEFINED
#define SOAP_TYPE__tds__SetUserResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetUserResponse(struct soap*, const char*, int, const _tds__SetUserResponse *, const char*);
SOAP_FMAC3 _tds__SetUserResponse * SOAP_FMAC4 soap_in__tds__SetUserResponse(struct soap*, const char*, _tds__SetUserResponse *, const char*);
SOAP_FMAC1 _tds__SetUserResponse * SOAP_FMAC2 soap_instantiate__tds__SetUserResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetUserResponse * soap_new__tds__SetUserResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetUserResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__SetUserResponse * soap_new_req__tds__SetUserResponse(
	struct soap *soap)
{
	_tds__SetUserResponse *_p = soap_new__tds__SetUserResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__SetUserResponse * soap_new_set__tds__SetUserResponse(
	struct soap *soap)
{
	_tds__SetUserResponse *_p = soap_new__tds__SetUserResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__SetUserResponse(struct soap *soap, _tds__SetUserResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetUserResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetUserResponse * SOAP_FMAC4 soap_get__tds__SetUserResponse(struct soap*, _tds__SetUserResponse *, const char*, const char*);

inline int soap_read__tds__SetUserResponse(struct soap *soap, _tds__SetUserResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__SetUserResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__SetUser_DEFINED
#define SOAP_TYPE__tds__SetUser_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetUser(struct soap*, const char*, int, const _tds__SetUser *, const char*);
SOAP_FMAC3 _tds__SetUser * SOAP_FMAC4 soap_in__tds__SetUser(struct soap*, const char*, _tds__SetUser *, const char*);
SOAP_FMAC1 _tds__SetUser * SOAP_FMAC2 soap_instantiate__tds__SetUser(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetUser * soap_new__tds__SetUser(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetUser(soap, n, NULL, NULL, NULL);
}

inline _tds__SetUser * soap_new_req__tds__SetUser(
	struct soap *soap,
	const std::vector<tt__User *> & User)
{
	_tds__SetUser *_p = soap_new__tds__SetUser(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetUser::User = User;
	}
	return _p;
}

inline _tds__SetUser * soap_new_set__tds__SetUser(
	struct soap *soap,
	const std::vector<tt__User *> & User)
{
	_tds__SetUser *_p = soap_new__tds__SetUser(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetUser::User = User;
	}
	return _p;
}

inline int soap_write__tds__SetUser(struct soap *soap, _tds__SetUser const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetUser", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetUser * SOAP_FMAC4 soap_get__tds__SetUser(struct soap*, _tds__SetUser *, const char*, const char*);

inline int soap_read__tds__SetUser(struct soap *soap, _tds__SetUser *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__SetUser(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__DeleteUsersResponse_DEFINED
#define SOAP_TYPE__tds__DeleteUsersResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__DeleteUsersResponse(struct soap*, const char*, int, const _tds__DeleteUsersResponse *, const char*);
SOAP_FMAC3 _tds__DeleteUsersResponse * SOAP_FMAC4 soap_in__tds__DeleteUsersResponse(struct soap*, const char*, _tds__DeleteUsersResponse *, const char*);
SOAP_FMAC1 _tds__DeleteUsersResponse * SOAP_FMAC2 soap_instantiate__tds__DeleteUsersResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__DeleteUsersResponse * soap_new__tds__DeleteUsersResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__DeleteUsersResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__DeleteUsersResponse * soap_new_req__tds__DeleteUsersResponse(
	struct soap *soap)
{
	_tds__DeleteUsersResponse *_p = soap_new__tds__DeleteUsersResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__DeleteUsersResponse * soap_new_set__tds__DeleteUsersResponse(
	struct soap *soap)
{
	_tds__DeleteUsersResponse *_p = soap_new__tds__DeleteUsersResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__DeleteUsersResponse(struct soap *soap, _tds__DeleteUsersResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:DeleteUsersResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__DeleteUsersResponse * SOAP_FMAC4 soap_get__tds__DeleteUsersResponse(struct soap*, _tds__DeleteUsersResponse *, const char*, const char*);

inline int soap_read__tds__DeleteUsersResponse(struct soap *soap, _tds__DeleteUsersResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__DeleteUsersResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__DeleteUsers_DEFINED
#define SOAP_TYPE__tds__DeleteUsers_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__DeleteUsers(struct soap*, const char*, int, const _tds__DeleteUsers *, const char*);
SOAP_FMAC3 _tds__DeleteUsers * SOAP_FMAC4 soap_in__tds__DeleteUsers(struct soap*, const char*, _tds__DeleteUsers *, const char*);
SOAP_FMAC1 _tds__DeleteUsers * SOAP_FMAC2 soap_instantiate__tds__DeleteUsers(struct soap*, int, const char*, const char*, size_t*);

inline _tds__DeleteUsers * soap_new__tds__DeleteUsers(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__DeleteUsers(soap, n, NULL, NULL, NULL);
}

inline _tds__DeleteUsers * soap_new_req__tds__DeleteUsers(
	struct soap *soap,
	const std::vector<std::string> & Username)
{
	_tds__DeleteUsers *_p = soap_new__tds__DeleteUsers(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__DeleteUsers::Username = Username;
	}
	return _p;
}

inline _tds__DeleteUsers * soap_new_set__tds__DeleteUsers(
	struct soap *soap,
	const std::vector<std::string> & Username)
{
	_tds__DeleteUsers *_p = soap_new__tds__DeleteUsers(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__DeleteUsers::Username = Username;
	}
	return _p;
}

inline int soap_write__tds__DeleteUsers(struct soap *soap, _tds__DeleteUsers const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:DeleteUsers", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__DeleteUsers * SOAP_FMAC4 soap_get__tds__DeleteUsers(struct soap*, _tds__DeleteUsers *, const char*, const char*);

inline int soap_read__tds__DeleteUsers(struct soap *soap, _tds__DeleteUsers *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__DeleteUsers(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__CreateUsersResponse_DEFINED
#define SOAP_TYPE__tds__CreateUsersResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__CreateUsersResponse(struct soap*, const char*, int, const _tds__CreateUsersResponse *, const char*);
SOAP_FMAC3 _tds__CreateUsersResponse * SOAP_FMAC4 soap_in__tds__CreateUsersResponse(struct soap*, const char*, _tds__CreateUsersResponse *, const char*);
SOAP_FMAC1 _tds__CreateUsersResponse * SOAP_FMAC2 soap_instantiate__tds__CreateUsersResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__CreateUsersResponse * soap_new__tds__CreateUsersResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__CreateUsersResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__CreateUsersResponse * soap_new_req__tds__CreateUsersResponse(
	struct soap *soap)
{
	_tds__CreateUsersResponse *_p = soap_new__tds__CreateUsersResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__CreateUsersResponse * soap_new_set__tds__CreateUsersResponse(
	struct soap *soap)
{
	_tds__CreateUsersResponse *_p = soap_new__tds__CreateUsersResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__CreateUsersResponse(struct soap *soap, _tds__CreateUsersResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:CreateUsersResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__CreateUsersResponse * SOAP_FMAC4 soap_get__tds__CreateUsersResponse(struct soap*, _tds__CreateUsersResponse *, const char*, const char*);

inline int soap_read__tds__CreateUsersResponse(struct soap *soap, _tds__CreateUsersResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__CreateUsersResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__CreateUsers_DEFINED
#define SOAP_TYPE__tds__CreateUsers_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__CreateUsers(struct soap*, const char*, int, const _tds__CreateUsers *, const char*);
SOAP_FMAC3 _tds__CreateUsers * SOAP_FMAC4 soap_in__tds__CreateUsers(struct soap*, const char*, _tds__CreateUsers *, const char*);
SOAP_FMAC1 _tds__CreateUsers * SOAP_FMAC2 soap_instantiate__tds__CreateUsers(struct soap*, int, const char*, const char*, size_t*);

inline _tds__CreateUsers * soap_new__tds__CreateUsers(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__CreateUsers(soap, n, NULL, NULL, NULL);
}

inline _tds__CreateUsers * soap_new_req__tds__CreateUsers(
	struct soap *soap,
	const std::vector<tt__User *> & User)
{
	_tds__CreateUsers *_p = soap_new__tds__CreateUsers(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__CreateUsers::User = User;
	}
	return _p;
}

inline _tds__CreateUsers * soap_new_set__tds__CreateUsers(
	struct soap *soap,
	const std::vector<tt__User *> & User)
{
	_tds__CreateUsers *_p = soap_new__tds__CreateUsers(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__CreateUsers::User = User;
	}
	return _p;
}

inline int soap_write__tds__CreateUsers(struct soap *soap, _tds__CreateUsers const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:CreateUsers", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__CreateUsers * SOAP_FMAC4 soap_get__tds__CreateUsers(struct soap*, _tds__CreateUsers *, const char*, const char*);

inline int soap_read__tds__CreateUsers(struct soap *soap, _tds__CreateUsers *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__CreateUsers(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__GetUsersResponse_DEFINED
#define SOAP_TYPE__tds__GetUsersResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetUsersResponse(struct soap*, const char*, int, const _tds__GetUsersResponse *, const char*);
SOAP_FMAC3 _tds__GetUsersResponse * SOAP_FMAC4 soap_in__tds__GetUsersResponse(struct soap*, const char*, _tds__GetUsersResponse *, const char*);
SOAP_FMAC1 _tds__GetUsersResponse * SOAP_FMAC2 soap_instantiate__tds__GetUsersResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetUsersResponse * soap_new__tds__GetUsersResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetUsersResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__GetUsersResponse * soap_new_req__tds__GetUsersResponse(
	struct soap *soap)
{
	_tds__GetUsersResponse *_p = soap_new__tds__GetUsersResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__GetUsersResponse * soap_new_set__tds__GetUsersResponse(
	struct soap *soap,
	const std::vector<tt__User *> & User)
{
	_tds__GetUsersResponse *_p = soap_new__tds__GetUsersResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetUsersResponse::User = User;
	}
	return _p;
}

inline int soap_write__tds__GetUsersResponse(struct soap *soap, _tds__GetUsersResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetUsersResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetUsersResponse * SOAP_FMAC4 soap_get__tds__GetUsersResponse(struct soap*, _tds__GetUsersResponse *, const char*, const char*);

inline int soap_read__tds__GetUsersResponse(struct soap *soap, _tds__GetUsersResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__GetUsersResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__GetUsers_DEFINED
#define SOAP_TYPE__tds__GetUsers_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetUsers(struct soap*, const char*, int, const _tds__GetUsers *, const char*);
SOAP_FMAC3 _tds__GetUsers * SOAP_FMAC4 soap_in__tds__GetUsers(struct soap*, const char*, _tds__GetUsers *, const char*);
SOAP_FMAC1 _tds__GetUsers * SOAP_FMAC2 soap_instantiate__tds__GetUsers(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetUsers * soap_new__tds__GetUsers(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetUsers(soap, n, NULL, NULL, NULL);
}

inline _tds__GetUsers * soap_new_req__tds__GetUsers(
	struct soap *soap)
{
	_tds__GetUsers *_p = soap_new__tds__GetUsers(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__GetUsers * soap_new_set__tds__GetUsers(
	struct soap *soap)
{
	_tds__GetUsers *_p = soap_new__tds__GetUsers(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__GetUsers(struct soap *soap, _tds__GetUsers const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetUsers", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetUsers * SOAP_FMAC4 soap_get__tds__GetUsers(struct soap*, _tds__GetUsers *, const char*, const char*);

inline int soap_read__tds__GetUsers(struct soap *soap, _tds__GetUsers *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__GetUsers(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__SetRemoteUserResponse_DEFINED
#define SOAP_TYPE__tds__SetRemoteUserResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetRemoteUserResponse(struct soap*, const char*, int, const _tds__SetRemoteUserResponse *, const char*);
SOAP_FMAC3 _tds__SetRemoteUserResponse * SOAP_FMAC4 soap_in__tds__SetRemoteUserResponse(struct soap*, const char*, _tds__SetRemoteUserResponse *, const char*);
SOAP_FMAC1 _tds__SetRemoteUserResponse * SOAP_FMAC2 soap_instantiate__tds__SetRemoteUserResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetRemoteUserResponse * soap_new__tds__SetRemoteUserResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetRemoteUserResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__SetRemoteUserResponse * soap_new_req__tds__SetRemoteUserResponse(
	struct soap *soap)
{
	_tds__SetRemoteUserResponse *_p = soap_new__tds__SetRemoteUserResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__SetRemoteUserResponse * soap_new_set__tds__SetRemoteUserResponse(
	struct soap *soap)
{
	_tds__SetRemoteUserResponse *_p = soap_new__tds__SetRemoteUserResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__SetRemoteUserResponse(struct soap *soap, _tds__SetRemoteUserResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetRemoteUserResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetRemoteUserResponse * SOAP_FMAC4 soap_get__tds__SetRemoteUserResponse(struct soap*, _tds__SetRemoteUserResponse *, const char*, const char*);

inline int soap_read__tds__SetRemoteUserResponse(struct soap *soap, _tds__SetRemoteUserResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__SetRemoteUserResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__SetRemoteUser_DEFINED
#define SOAP_TYPE__tds__SetRemoteUser_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetRemoteUser(struct soap*, const char*, int, const _tds__SetRemoteUser *, const char*);
SOAP_FMAC3 _tds__SetRemoteUser * SOAP_FMAC4 soap_in__tds__SetRemoteUser(struct soap*, const char*, _tds__SetRemoteUser *, const char*);
SOAP_FMAC1 _tds__SetRemoteUser * SOAP_FMAC2 soap_instantiate__tds__SetRemoteUser(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetRemoteUser * soap_new__tds__SetRemoteUser(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetRemoteUser(soap, n, NULL, NULL, NULL);
}

inline _tds__SetRemoteUser * soap_new_req__tds__SetRemoteUser(
	struct soap *soap)
{
	_tds__SetRemoteUser *_p = soap_new__tds__SetRemoteUser(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__SetRemoteUser * soap_new_set__tds__SetRemoteUser(
	struct soap *soap,
	tt__RemoteUser *RemoteUser)
{
	_tds__SetRemoteUser *_p = soap_new__tds__SetRemoteUser(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetRemoteUser::RemoteUser = RemoteUser;
	}
	return _p;
}

inline int soap_write__tds__SetRemoteUser(struct soap *soap, _tds__SetRemoteUser const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetRemoteUser", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetRemoteUser * SOAP_FMAC4 soap_get__tds__SetRemoteUser(struct soap*, _tds__SetRemoteUser *, const char*, const char*);

inline int soap_read__tds__SetRemoteUser(struct soap *soap, _tds__SetRemoteUser *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__SetRemoteUser(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__GetRemoteUserResponse_DEFINED
#define SOAP_TYPE__tds__GetRemoteUserResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetRemoteUserResponse(struct soap*, const char*, int, const _tds__GetRemoteUserResponse *, const char*);
SOAP_FMAC3 _tds__GetRemoteUserResponse * SOAP_FMAC4 soap_in__tds__GetRemoteUserResponse(struct soap*, const char*, _tds__GetRemoteUserResponse *, const char*);
SOAP_FMAC1 _tds__GetRemoteUserResponse * SOAP_FMAC2 soap_instantiate__tds__GetRemoteUserResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetRemoteUserResponse * soap_new__tds__GetRemoteUserResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetRemoteUserResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__GetRemoteUserResponse * soap_new_req__tds__GetRemoteUserResponse(
	struct soap *soap)
{
	_tds__GetRemoteUserResponse *_p = soap_new__tds__GetRemoteUserResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__GetRemoteUserResponse * soap_new_set__tds__GetRemoteUserResponse(
	struct soap *soap,
	tt__RemoteUser *RemoteUser)
{
	_tds__GetRemoteUserResponse *_p = soap_new__tds__GetRemoteUserResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetRemoteUserResponse::RemoteUser = RemoteUser;
	}
	return _p;
}

inline int soap_write__tds__GetRemoteUserResponse(struct soap *soap, _tds__GetRemoteUserResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetRemoteUserResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetRemoteUserResponse * SOAP_FMAC4 soap_get__tds__GetRemoteUserResponse(struct soap*, _tds__GetRemoteUserResponse *, const char*, const char*);

inline int soap_read__tds__GetRemoteUserResponse(struct soap *soap, _tds__GetRemoteUserResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__GetRemoteUserResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__GetRemoteUser_DEFINED
#define SOAP_TYPE__tds__GetRemoteUser_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetRemoteUser(struct soap*, const char*, int, const _tds__GetRemoteUser *, const char*);
SOAP_FMAC3 _tds__GetRemoteUser * SOAP_FMAC4 soap_in__tds__GetRemoteUser(struct soap*, const char*, _tds__GetRemoteUser *, const char*);
SOAP_FMAC1 _tds__GetRemoteUser * SOAP_FMAC2 soap_instantiate__tds__GetRemoteUser(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetRemoteUser * soap_new__tds__GetRemoteUser(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetRemoteUser(soap, n, NULL, NULL, NULL);
}

inline _tds__GetRemoteUser * soap_new_req__tds__GetRemoteUser(
	struct soap *soap)
{
	_tds__GetRemoteUser *_p = soap_new__tds__GetRemoteUser(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__GetRemoteUser * soap_new_set__tds__GetRemoteUser(
	struct soap *soap)
{
	_tds__GetRemoteUser *_p = soap_new__tds__GetRemoteUser(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__GetRemoteUser(struct soap *soap, _tds__GetRemoteUser const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetRemoteUser", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetRemoteUser * SOAP_FMAC4 soap_get__tds__GetRemoteUser(struct soap*, _tds__GetRemoteUser *, const char*, const char*);

inline int soap_read__tds__GetRemoteUser(struct soap *soap, _tds__GetRemoteUser *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__GetRemoteUser(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__GetEndpointReferenceResponse_DEFINED
#define SOAP_TYPE__tds__GetEndpointReferenceResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetEndpointReferenceResponse(struct soap*, const char*, int, const _tds__GetEndpointReferenceResponse *, const char*);
SOAP_FMAC3 _tds__GetEndpointReferenceResponse * SOAP_FMAC4 soap_in__tds__GetEndpointReferenceResponse(struct soap*, const char*, _tds__GetEndpointReferenceResponse *, const char*);
SOAP_FMAC1 _tds__GetEndpointReferenceResponse * SOAP_FMAC2 soap_instantiate__tds__GetEndpointReferenceResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetEndpointReferenceResponse * soap_new__tds__GetEndpointReferenceResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetEndpointReferenceResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__GetEndpointReferenceResponse * soap_new_req__tds__GetEndpointReferenceResponse(
	struct soap *soap,
	const std::string& GUID)
{
	_tds__GetEndpointReferenceResponse *_p = soap_new__tds__GetEndpointReferenceResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetEndpointReferenceResponse::GUID = GUID;
	}
	return _p;
}

inline _tds__GetEndpointReferenceResponse * soap_new_set__tds__GetEndpointReferenceResponse(
	struct soap *soap,
	const std::string& GUID,
	const std::vector<char *> & __any)
{
	_tds__GetEndpointReferenceResponse *_p = soap_new__tds__GetEndpointReferenceResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetEndpointReferenceResponse::GUID = GUID;
		_p->_tds__GetEndpointReferenceResponse::__any = __any;
	}
	return _p;
}

inline int soap_write__tds__GetEndpointReferenceResponse(struct soap *soap, _tds__GetEndpointReferenceResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetEndpointReferenceResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetEndpointReferenceResponse * SOAP_FMAC4 soap_get__tds__GetEndpointReferenceResponse(struct soap*, _tds__GetEndpointReferenceResponse *, const char*, const char*);

inline int soap_read__tds__GetEndpointReferenceResponse(struct soap *soap, _tds__GetEndpointReferenceResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__GetEndpointReferenceResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__GetEndpointReference_DEFINED
#define SOAP_TYPE__tds__GetEndpointReference_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetEndpointReference(struct soap*, const char*, int, const _tds__GetEndpointReference *, const char*);
SOAP_FMAC3 _tds__GetEndpointReference * SOAP_FMAC4 soap_in__tds__GetEndpointReference(struct soap*, const char*, _tds__GetEndpointReference *, const char*);
SOAP_FMAC1 _tds__GetEndpointReference * SOAP_FMAC2 soap_instantiate__tds__GetEndpointReference(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetEndpointReference * soap_new__tds__GetEndpointReference(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetEndpointReference(soap, n, NULL, NULL, NULL);
}

inline _tds__GetEndpointReference * soap_new_req__tds__GetEndpointReference(
	struct soap *soap)
{
	_tds__GetEndpointReference *_p = soap_new__tds__GetEndpointReference(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__GetEndpointReference * soap_new_set__tds__GetEndpointReference(
	struct soap *soap)
{
	_tds__GetEndpointReference *_p = soap_new__tds__GetEndpointReference(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__GetEndpointReference(struct soap *soap, _tds__GetEndpointReference const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetEndpointReference", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetEndpointReference * SOAP_FMAC4 soap_get__tds__GetEndpointReference(struct soap*, _tds__GetEndpointReference *, const char*, const char*);

inline int soap_read__tds__GetEndpointReference(struct soap *soap, _tds__GetEndpointReference *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__GetEndpointReference(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__SetDPAddressesResponse_DEFINED
#define SOAP_TYPE__tds__SetDPAddressesResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetDPAddressesResponse(struct soap*, const char*, int, const _tds__SetDPAddressesResponse *, const char*);
SOAP_FMAC3 _tds__SetDPAddressesResponse * SOAP_FMAC4 soap_in__tds__SetDPAddressesResponse(struct soap*, const char*, _tds__SetDPAddressesResponse *, const char*);
SOAP_FMAC1 _tds__SetDPAddressesResponse * SOAP_FMAC2 soap_instantiate__tds__SetDPAddressesResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetDPAddressesResponse * soap_new__tds__SetDPAddressesResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetDPAddressesResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__SetDPAddressesResponse * soap_new_req__tds__SetDPAddressesResponse(
	struct soap *soap)
{
	_tds__SetDPAddressesResponse *_p = soap_new__tds__SetDPAddressesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__SetDPAddressesResponse * soap_new_set__tds__SetDPAddressesResponse(
	struct soap *soap)
{
	_tds__SetDPAddressesResponse *_p = soap_new__tds__SetDPAddressesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__SetDPAddressesResponse(struct soap *soap, _tds__SetDPAddressesResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetDPAddressesResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetDPAddressesResponse * SOAP_FMAC4 soap_get__tds__SetDPAddressesResponse(struct soap*, _tds__SetDPAddressesResponse *, const char*, const char*);

inline int soap_read__tds__SetDPAddressesResponse(struct soap *soap, _tds__SetDPAddressesResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__SetDPAddressesResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__SetDPAddresses_DEFINED
#define SOAP_TYPE__tds__SetDPAddresses_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetDPAddresses(struct soap*, const char*, int, const _tds__SetDPAddresses *, const char*);
SOAP_FMAC3 _tds__SetDPAddresses * SOAP_FMAC4 soap_in__tds__SetDPAddresses(struct soap*, const char*, _tds__SetDPAddresses *, const char*);
SOAP_FMAC1 _tds__SetDPAddresses * SOAP_FMAC2 soap_instantiate__tds__SetDPAddresses(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetDPAddresses * soap_new__tds__SetDPAddresses(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetDPAddresses(soap, n, NULL, NULL, NULL);
}

inline _tds__SetDPAddresses * soap_new_req__tds__SetDPAddresses(
	struct soap *soap)
{
	_tds__SetDPAddresses *_p = soap_new__tds__SetDPAddresses(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__SetDPAddresses * soap_new_set__tds__SetDPAddresses(
	struct soap *soap,
	const std::vector<tt__NetworkHost *> & DPAddress)
{
	_tds__SetDPAddresses *_p = soap_new__tds__SetDPAddresses(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetDPAddresses::DPAddress = DPAddress;
	}
	return _p;
}

inline int soap_write__tds__SetDPAddresses(struct soap *soap, _tds__SetDPAddresses const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetDPAddresses", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetDPAddresses * SOAP_FMAC4 soap_get__tds__SetDPAddresses(struct soap*, _tds__SetDPAddresses *, const char*, const char*);

inline int soap_read__tds__SetDPAddresses(struct soap *soap, _tds__SetDPAddresses *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__SetDPAddresses(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__GetDPAddressesResponse_DEFINED
#define SOAP_TYPE__tds__GetDPAddressesResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetDPAddressesResponse(struct soap*, const char*, int, const _tds__GetDPAddressesResponse *, const char*);
SOAP_FMAC3 _tds__GetDPAddressesResponse * SOAP_FMAC4 soap_in__tds__GetDPAddressesResponse(struct soap*, const char*, _tds__GetDPAddressesResponse *, const char*);
SOAP_FMAC1 _tds__GetDPAddressesResponse * SOAP_FMAC2 soap_instantiate__tds__GetDPAddressesResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetDPAddressesResponse * soap_new__tds__GetDPAddressesResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetDPAddressesResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__GetDPAddressesResponse * soap_new_req__tds__GetDPAddressesResponse(
	struct soap *soap)
{
	_tds__GetDPAddressesResponse *_p = soap_new__tds__GetDPAddressesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__GetDPAddressesResponse * soap_new_set__tds__GetDPAddressesResponse(
	struct soap *soap,
	const std::vector<tt__NetworkHost *> & DPAddress)
{
	_tds__GetDPAddressesResponse *_p = soap_new__tds__GetDPAddressesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetDPAddressesResponse::DPAddress = DPAddress;
	}
	return _p;
}

inline int soap_write__tds__GetDPAddressesResponse(struct soap *soap, _tds__GetDPAddressesResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetDPAddressesResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetDPAddressesResponse * SOAP_FMAC4 soap_get__tds__GetDPAddressesResponse(struct soap*, _tds__GetDPAddressesResponse *, const char*, const char*);

inline int soap_read__tds__GetDPAddressesResponse(struct soap *soap, _tds__GetDPAddressesResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__GetDPAddressesResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__GetDPAddresses_DEFINED
#define SOAP_TYPE__tds__GetDPAddresses_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetDPAddresses(struct soap*, const char*, int, const _tds__GetDPAddresses *, const char*);
SOAP_FMAC3 _tds__GetDPAddresses * SOAP_FMAC4 soap_in__tds__GetDPAddresses(struct soap*, const char*, _tds__GetDPAddresses *, const char*);
SOAP_FMAC1 _tds__GetDPAddresses * SOAP_FMAC2 soap_instantiate__tds__GetDPAddresses(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetDPAddresses * soap_new__tds__GetDPAddresses(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetDPAddresses(soap, n, NULL, NULL, NULL);
}

inline _tds__GetDPAddresses * soap_new_req__tds__GetDPAddresses(
	struct soap *soap)
{
	_tds__GetDPAddresses *_p = soap_new__tds__GetDPAddresses(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__GetDPAddresses * soap_new_set__tds__GetDPAddresses(
	struct soap *soap)
{
	_tds__GetDPAddresses *_p = soap_new__tds__GetDPAddresses(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__GetDPAddresses(struct soap *soap, _tds__GetDPAddresses const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetDPAddresses", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetDPAddresses * SOAP_FMAC4 soap_get__tds__GetDPAddresses(struct soap*, _tds__GetDPAddresses *, const char*, const char*);

inline int soap_read__tds__GetDPAddresses(struct soap *soap, _tds__GetDPAddresses *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__GetDPAddresses(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__SetRemoteDiscoveryModeResponse_DEFINED
#define SOAP_TYPE__tds__SetRemoteDiscoveryModeResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetRemoteDiscoveryModeResponse(struct soap*, const char*, int, const _tds__SetRemoteDiscoveryModeResponse *, const char*);
SOAP_FMAC3 _tds__SetRemoteDiscoveryModeResponse * SOAP_FMAC4 soap_in__tds__SetRemoteDiscoveryModeResponse(struct soap*, const char*, _tds__SetRemoteDiscoveryModeResponse *, const char*);
SOAP_FMAC1 _tds__SetRemoteDiscoveryModeResponse * SOAP_FMAC2 soap_instantiate__tds__SetRemoteDiscoveryModeResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetRemoteDiscoveryModeResponse * soap_new__tds__SetRemoteDiscoveryModeResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetRemoteDiscoveryModeResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__SetRemoteDiscoveryModeResponse * soap_new_req__tds__SetRemoteDiscoveryModeResponse(
	struct soap *soap)
{
	_tds__SetRemoteDiscoveryModeResponse *_p = soap_new__tds__SetRemoteDiscoveryModeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__SetRemoteDiscoveryModeResponse * soap_new_set__tds__SetRemoteDiscoveryModeResponse(
	struct soap *soap)
{
	_tds__SetRemoteDiscoveryModeResponse *_p = soap_new__tds__SetRemoteDiscoveryModeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__SetRemoteDiscoveryModeResponse(struct soap *soap, _tds__SetRemoteDiscoveryModeResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetRemoteDiscoveryModeResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetRemoteDiscoveryModeResponse * SOAP_FMAC4 soap_get__tds__SetRemoteDiscoveryModeResponse(struct soap*, _tds__SetRemoteDiscoveryModeResponse *, const char*, const char*);

inline int soap_read__tds__SetRemoteDiscoveryModeResponse(struct soap *soap, _tds__SetRemoteDiscoveryModeResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__SetRemoteDiscoveryModeResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__SetRemoteDiscoveryMode_DEFINED
#define SOAP_TYPE__tds__SetRemoteDiscoveryMode_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetRemoteDiscoveryMode(struct soap*, const char*, int, const _tds__SetRemoteDiscoveryMode *, const char*);
SOAP_FMAC3 _tds__SetRemoteDiscoveryMode * SOAP_FMAC4 soap_in__tds__SetRemoteDiscoveryMode(struct soap*, const char*, _tds__SetRemoteDiscoveryMode *, const char*);
SOAP_FMAC1 _tds__SetRemoteDiscoveryMode * SOAP_FMAC2 soap_instantiate__tds__SetRemoteDiscoveryMode(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetRemoteDiscoveryMode * soap_new__tds__SetRemoteDiscoveryMode(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetRemoteDiscoveryMode(soap, n, NULL, NULL, NULL);
}

inline _tds__SetRemoteDiscoveryMode * soap_new_req__tds__SetRemoteDiscoveryMode(
	struct soap *soap,
	enum tt__DiscoveryMode RemoteDiscoveryMode)
{
	_tds__SetRemoteDiscoveryMode *_p = soap_new__tds__SetRemoteDiscoveryMode(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetRemoteDiscoveryMode::RemoteDiscoveryMode = RemoteDiscoveryMode;
	}
	return _p;
}

inline _tds__SetRemoteDiscoveryMode * soap_new_set__tds__SetRemoteDiscoveryMode(
	struct soap *soap,
	enum tt__DiscoveryMode RemoteDiscoveryMode)
{
	_tds__SetRemoteDiscoveryMode *_p = soap_new__tds__SetRemoteDiscoveryMode(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetRemoteDiscoveryMode::RemoteDiscoveryMode = RemoteDiscoveryMode;
	}
	return _p;
}

inline int soap_write__tds__SetRemoteDiscoveryMode(struct soap *soap, _tds__SetRemoteDiscoveryMode const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetRemoteDiscoveryMode", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetRemoteDiscoveryMode * SOAP_FMAC4 soap_get__tds__SetRemoteDiscoveryMode(struct soap*, _tds__SetRemoteDiscoveryMode *, const char*, const char*);

inline int soap_read__tds__SetRemoteDiscoveryMode(struct soap *soap, _tds__SetRemoteDiscoveryMode *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__SetRemoteDiscoveryMode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__GetRemoteDiscoveryModeResponse_DEFINED
#define SOAP_TYPE__tds__GetRemoteDiscoveryModeResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetRemoteDiscoveryModeResponse(struct soap*, const char*, int, const _tds__GetRemoteDiscoveryModeResponse *, const char*);
SOAP_FMAC3 _tds__GetRemoteDiscoveryModeResponse * SOAP_FMAC4 soap_in__tds__GetRemoteDiscoveryModeResponse(struct soap*, const char*, _tds__GetRemoteDiscoveryModeResponse *, const char*);
SOAP_FMAC1 _tds__GetRemoteDiscoveryModeResponse * SOAP_FMAC2 soap_instantiate__tds__GetRemoteDiscoveryModeResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetRemoteDiscoveryModeResponse * soap_new__tds__GetRemoteDiscoveryModeResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetRemoteDiscoveryModeResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__GetRemoteDiscoveryModeResponse * soap_new_req__tds__GetRemoteDiscoveryModeResponse(
	struct soap *soap,
	enum tt__DiscoveryMode RemoteDiscoveryMode)
{
	_tds__GetRemoteDiscoveryModeResponse *_p = soap_new__tds__GetRemoteDiscoveryModeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetRemoteDiscoveryModeResponse::RemoteDiscoveryMode = RemoteDiscoveryMode;
	}
	return _p;
}

inline _tds__GetRemoteDiscoveryModeResponse * soap_new_set__tds__GetRemoteDiscoveryModeResponse(
	struct soap *soap,
	enum tt__DiscoveryMode RemoteDiscoveryMode)
{
	_tds__GetRemoteDiscoveryModeResponse *_p = soap_new__tds__GetRemoteDiscoveryModeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetRemoteDiscoveryModeResponse::RemoteDiscoveryMode = RemoteDiscoveryMode;
	}
	return _p;
}

inline int soap_write__tds__GetRemoteDiscoveryModeResponse(struct soap *soap, _tds__GetRemoteDiscoveryModeResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetRemoteDiscoveryModeResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetRemoteDiscoveryModeResponse * SOAP_FMAC4 soap_get__tds__GetRemoteDiscoveryModeResponse(struct soap*, _tds__GetRemoteDiscoveryModeResponse *, const char*, const char*);

inline int soap_read__tds__GetRemoteDiscoveryModeResponse(struct soap *soap, _tds__GetRemoteDiscoveryModeResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__GetRemoteDiscoveryModeResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__GetRemoteDiscoveryMode_DEFINED
#define SOAP_TYPE__tds__GetRemoteDiscoveryMode_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetRemoteDiscoveryMode(struct soap*, const char*, int, const _tds__GetRemoteDiscoveryMode *, const char*);
SOAP_FMAC3 _tds__GetRemoteDiscoveryMode * SOAP_FMAC4 soap_in__tds__GetRemoteDiscoveryMode(struct soap*, const char*, _tds__GetRemoteDiscoveryMode *, const char*);
SOAP_FMAC1 _tds__GetRemoteDiscoveryMode * SOAP_FMAC2 soap_instantiate__tds__GetRemoteDiscoveryMode(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetRemoteDiscoveryMode * soap_new__tds__GetRemoteDiscoveryMode(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetRemoteDiscoveryMode(soap, n, NULL, NULL, NULL);
}

inline _tds__GetRemoteDiscoveryMode * soap_new_req__tds__GetRemoteDiscoveryMode(
	struct soap *soap)
{
	_tds__GetRemoteDiscoveryMode *_p = soap_new__tds__GetRemoteDiscoveryMode(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__GetRemoteDiscoveryMode * soap_new_set__tds__GetRemoteDiscoveryMode(
	struct soap *soap)
{
	_tds__GetRemoteDiscoveryMode *_p = soap_new__tds__GetRemoteDiscoveryMode(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__GetRemoteDiscoveryMode(struct soap *soap, _tds__GetRemoteDiscoveryMode const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetRemoteDiscoveryMode", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetRemoteDiscoveryMode * SOAP_FMAC4 soap_get__tds__GetRemoteDiscoveryMode(struct soap*, _tds__GetRemoteDiscoveryMode *, const char*, const char*);

inline int soap_read__tds__GetRemoteDiscoveryMode(struct soap *soap, _tds__GetRemoteDiscoveryMode *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__GetRemoteDiscoveryMode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__SetDiscoveryModeResponse_DEFINED
#define SOAP_TYPE__tds__SetDiscoveryModeResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetDiscoveryModeResponse(struct soap*, const char*, int, const _tds__SetDiscoveryModeResponse *, const char*);
SOAP_FMAC3 _tds__SetDiscoveryModeResponse * SOAP_FMAC4 soap_in__tds__SetDiscoveryModeResponse(struct soap*, const char*, _tds__SetDiscoveryModeResponse *, const char*);
SOAP_FMAC1 _tds__SetDiscoveryModeResponse * SOAP_FMAC2 soap_instantiate__tds__SetDiscoveryModeResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetDiscoveryModeResponse * soap_new__tds__SetDiscoveryModeResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetDiscoveryModeResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__SetDiscoveryModeResponse * soap_new_req__tds__SetDiscoveryModeResponse(
	struct soap *soap)
{
	_tds__SetDiscoveryModeResponse *_p = soap_new__tds__SetDiscoveryModeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__SetDiscoveryModeResponse * soap_new_set__tds__SetDiscoveryModeResponse(
	struct soap *soap)
{
	_tds__SetDiscoveryModeResponse *_p = soap_new__tds__SetDiscoveryModeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__SetDiscoveryModeResponse(struct soap *soap, _tds__SetDiscoveryModeResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetDiscoveryModeResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetDiscoveryModeResponse * SOAP_FMAC4 soap_get__tds__SetDiscoveryModeResponse(struct soap*, _tds__SetDiscoveryModeResponse *, const char*, const char*);

inline int soap_read__tds__SetDiscoveryModeResponse(struct soap *soap, _tds__SetDiscoveryModeResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__SetDiscoveryModeResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__SetDiscoveryMode_DEFINED
#define SOAP_TYPE__tds__SetDiscoveryMode_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetDiscoveryMode(struct soap*, const char*, int, const _tds__SetDiscoveryMode *, const char*);
SOAP_FMAC3 _tds__SetDiscoveryMode * SOAP_FMAC4 soap_in__tds__SetDiscoveryMode(struct soap*, const char*, _tds__SetDiscoveryMode *, const char*);
SOAP_FMAC1 _tds__SetDiscoveryMode * SOAP_FMAC2 soap_instantiate__tds__SetDiscoveryMode(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetDiscoveryMode * soap_new__tds__SetDiscoveryMode(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetDiscoveryMode(soap, n, NULL, NULL, NULL);
}

inline _tds__SetDiscoveryMode * soap_new_req__tds__SetDiscoveryMode(
	struct soap *soap,
	enum tt__DiscoveryMode DiscoveryMode)
{
	_tds__SetDiscoveryMode *_p = soap_new__tds__SetDiscoveryMode(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetDiscoveryMode::DiscoveryMode = DiscoveryMode;
	}
	return _p;
}

inline _tds__SetDiscoveryMode * soap_new_set__tds__SetDiscoveryMode(
	struct soap *soap,
	enum tt__DiscoveryMode DiscoveryMode)
{
	_tds__SetDiscoveryMode *_p = soap_new__tds__SetDiscoveryMode(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetDiscoveryMode::DiscoveryMode = DiscoveryMode;
	}
	return _p;
}

inline int soap_write__tds__SetDiscoveryMode(struct soap *soap, _tds__SetDiscoveryMode const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetDiscoveryMode", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetDiscoveryMode * SOAP_FMAC4 soap_get__tds__SetDiscoveryMode(struct soap*, _tds__SetDiscoveryMode *, const char*, const char*);

inline int soap_read__tds__SetDiscoveryMode(struct soap *soap, _tds__SetDiscoveryMode *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__SetDiscoveryMode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__GetDiscoveryModeResponse_DEFINED
#define SOAP_TYPE__tds__GetDiscoveryModeResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetDiscoveryModeResponse(struct soap*, const char*, int, const _tds__GetDiscoveryModeResponse *, const char*);
SOAP_FMAC3 _tds__GetDiscoveryModeResponse * SOAP_FMAC4 soap_in__tds__GetDiscoveryModeResponse(struct soap*, const char*, _tds__GetDiscoveryModeResponse *, const char*);
SOAP_FMAC1 _tds__GetDiscoveryModeResponse * SOAP_FMAC2 soap_instantiate__tds__GetDiscoveryModeResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetDiscoveryModeResponse * soap_new__tds__GetDiscoveryModeResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetDiscoveryModeResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__GetDiscoveryModeResponse * soap_new_req__tds__GetDiscoveryModeResponse(
	struct soap *soap,
	enum tt__DiscoveryMode DiscoveryMode)
{
	_tds__GetDiscoveryModeResponse *_p = soap_new__tds__GetDiscoveryModeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetDiscoveryModeResponse::DiscoveryMode = DiscoveryMode;
	}
	return _p;
}

inline _tds__GetDiscoveryModeResponse * soap_new_set__tds__GetDiscoveryModeResponse(
	struct soap *soap,
	enum tt__DiscoveryMode DiscoveryMode)
{
	_tds__GetDiscoveryModeResponse *_p = soap_new__tds__GetDiscoveryModeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetDiscoveryModeResponse::DiscoveryMode = DiscoveryMode;
	}
	return _p;
}

inline int soap_write__tds__GetDiscoveryModeResponse(struct soap *soap, _tds__GetDiscoveryModeResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetDiscoveryModeResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetDiscoveryModeResponse * SOAP_FMAC4 soap_get__tds__GetDiscoveryModeResponse(struct soap*, _tds__GetDiscoveryModeResponse *, const char*, const char*);

inline int soap_read__tds__GetDiscoveryModeResponse(struct soap *soap, _tds__GetDiscoveryModeResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__GetDiscoveryModeResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__GetDiscoveryMode_DEFINED
#define SOAP_TYPE__tds__GetDiscoveryMode_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetDiscoveryMode(struct soap*, const char*, int, const _tds__GetDiscoveryMode *, const char*);
SOAP_FMAC3 _tds__GetDiscoveryMode * SOAP_FMAC4 soap_in__tds__GetDiscoveryMode(struct soap*, const char*, _tds__GetDiscoveryMode *, const char*);
SOAP_FMAC1 _tds__GetDiscoveryMode * SOAP_FMAC2 soap_instantiate__tds__GetDiscoveryMode(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetDiscoveryMode * soap_new__tds__GetDiscoveryMode(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetDiscoveryMode(soap, n, NULL, NULL, NULL);
}

inline _tds__GetDiscoveryMode * soap_new_req__tds__GetDiscoveryMode(
	struct soap *soap)
{
	_tds__GetDiscoveryMode *_p = soap_new__tds__GetDiscoveryMode(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__GetDiscoveryMode * soap_new_set__tds__GetDiscoveryMode(
	struct soap *soap)
{
	_tds__GetDiscoveryMode *_p = soap_new__tds__GetDiscoveryMode(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__GetDiscoveryMode(struct soap *soap, _tds__GetDiscoveryMode const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetDiscoveryMode", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetDiscoveryMode * SOAP_FMAC4 soap_get__tds__GetDiscoveryMode(struct soap*, _tds__GetDiscoveryMode *, const char*, const char*);

inline int soap_read__tds__GetDiscoveryMode(struct soap *soap, _tds__GetDiscoveryMode *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__GetDiscoveryMode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__RemoveScopesResponse_DEFINED
#define SOAP_TYPE__tds__RemoveScopesResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__RemoveScopesResponse(struct soap*, const char*, int, const _tds__RemoveScopesResponse *, const char*);
SOAP_FMAC3 _tds__RemoveScopesResponse * SOAP_FMAC4 soap_in__tds__RemoveScopesResponse(struct soap*, const char*, _tds__RemoveScopesResponse *, const char*);
SOAP_FMAC1 _tds__RemoveScopesResponse * SOAP_FMAC2 soap_instantiate__tds__RemoveScopesResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__RemoveScopesResponse * soap_new__tds__RemoveScopesResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__RemoveScopesResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__RemoveScopesResponse * soap_new_req__tds__RemoveScopesResponse(
	struct soap *soap)
{
	_tds__RemoveScopesResponse *_p = soap_new__tds__RemoveScopesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__RemoveScopesResponse * soap_new_set__tds__RemoveScopesResponse(
	struct soap *soap,
	const std::vector<std::string> & ScopeItem)
{
	_tds__RemoveScopesResponse *_p = soap_new__tds__RemoveScopesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__RemoveScopesResponse::ScopeItem = ScopeItem;
	}
	return _p;
}

inline int soap_write__tds__RemoveScopesResponse(struct soap *soap, _tds__RemoveScopesResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:RemoveScopesResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__RemoveScopesResponse * SOAP_FMAC4 soap_get__tds__RemoveScopesResponse(struct soap*, _tds__RemoveScopesResponse *, const char*, const char*);

inline int soap_read__tds__RemoveScopesResponse(struct soap *soap, _tds__RemoveScopesResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__RemoveScopesResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__RemoveScopes_DEFINED
#define SOAP_TYPE__tds__RemoveScopes_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__RemoveScopes(struct soap*, const char*, int, const _tds__RemoveScopes *, const char*);
SOAP_FMAC3 _tds__RemoveScopes * SOAP_FMAC4 soap_in__tds__RemoveScopes(struct soap*, const char*, _tds__RemoveScopes *, const char*);
SOAP_FMAC1 _tds__RemoveScopes * SOAP_FMAC2 soap_instantiate__tds__RemoveScopes(struct soap*, int, const char*, const char*, size_t*);

inline _tds__RemoveScopes * soap_new__tds__RemoveScopes(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__RemoveScopes(soap, n, NULL, NULL, NULL);
}

inline _tds__RemoveScopes * soap_new_req__tds__RemoveScopes(
	struct soap *soap,
	const std::vector<std::string> & ScopeItem)
{
	_tds__RemoveScopes *_p = soap_new__tds__RemoveScopes(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__RemoveScopes::ScopeItem = ScopeItem;
	}
	return _p;
}

inline _tds__RemoveScopes * soap_new_set__tds__RemoveScopes(
	struct soap *soap,
	const std::vector<std::string> & ScopeItem)
{
	_tds__RemoveScopes *_p = soap_new__tds__RemoveScopes(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__RemoveScopes::ScopeItem = ScopeItem;
	}
	return _p;
}

inline int soap_write__tds__RemoveScopes(struct soap *soap, _tds__RemoveScopes const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:RemoveScopes", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__RemoveScopes * SOAP_FMAC4 soap_get__tds__RemoveScopes(struct soap*, _tds__RemoveScopes *, const char*, const char*);

inline int soap_read__tds__RemoveScopes(struct soap *soap, _tds__RemoveScopes *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__RemoveScopes(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__AddScopesResponse_DEFINED
#define SOAP_TYPE__tds__AddScopesResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__AddScopesResponse(struct soap*, const char*, int, const _tds__AddScopesResponse *, const char*);
SOAP_FMAC3 _tds__AddScopesResponse * SOAP_FMAC4 soap_in__tds__AddScopesResponse(struct soap*, const char*, _tds__AddScopesResponse *, const char*);
SOAP_FMAC1 _tds__AddScopesResponse * SOAP_FMAC2 soap_instantiate__tds__AddScopesResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__AddScopesResponse * soap_new__tds__AddScopesResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__AddScopesResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__AddScopesResponse * soap_new_req__tds__AddScopesResponse(
	struct soap *soap)
{
	_tds__AddScopesResponse *_p = soap_new__tds__AddScopesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__AddScopesResponse * soap_new_set__tds__AddScopesResponse(
	struct soap *soap)
{
	_tds__AddScopesResponse *_p = soap_new__tds__AddScopesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__AddScopesResponse(struct soap *soap, _tds__AddScopesResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:AddScopesResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__AddScopesResponse * SOAP_FMAC4 soap_get__tds__AddScopesResponse(struct soap*, _tds__AddScopesResponse *, const char*, const char*);

inline int soap_read__tds__AddScopesResponse(struct soap *soap, _tds__AddScopesResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__AddScopesResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__AddScopes_DEFINED
#define SOAP_TYPE__tds__AddScopes_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__AddScopes(struct soap*, const char*, int, const _tds__AddScopes *, const char*);
SOAP_FMAC3 _tds__AddScopes * SOAP_FMAC4 soap_in__tds__AddScopes(struct soap*, const char*, _tds__AddScopes *, const char*);
SOAP_FMAC1 _tds__AddScopes * SOAP_FMAC2 soap_instantiate__tds__AddScopes(struct soap*, int, const char*, const char*, size_t*);

inline _tds__AddScopes * soap_new__tds__AddScopes(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__AddScopes(soap, n, NULL, NULL, NULL);
}

inline _tds__AddScopes * soap_new_req__tds__AddScopes(
	struct soap *soap,
	const std::vector<std::string> & ScopeItem)
{
	_tds__AddScopes *_p = soap_new__tds__AddScopes(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__AddScopes::ScopeItem = ScopeItem;
	}
	return _p;
}

inline _tds__AddScopes * soap_new_set__tds__AddScopes(
	struct soap *soap,
	const std::vector<std::string> & ScopeItem)
{
	_tds__AddScopes *_p = soap_new__tds__AddScopes(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__AddScopes::ScopeItem = ScopeItem;
	}
	return _p;
}

inline int soap_write__tds__AddScopes(struct soap *soap, _tds__AddScopes const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:AddScopes", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__AddScopes * SOAP_FMAC4 soap_get__tds__AddScopes(struct soap*, _tds__AddScopes *, const char*, const char*);

inline int soap_read__tds__AddScopes(struct soap *soap, _tds__AddScopes *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__AddScopes(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__SetScopesResponse_DEFINED
#define SOAP_TYPE__tds__SetScopesResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetScopesResponse(struct soap*, const char*, int, const _tds__SetScopesResponse *, const char*);
SOAP_FMAC3 _tds__SetScopesResponse * SOAP_FMAC4 soap_in__tds__SetScopesResponse(struct soap*, const char*, _tds__SetScopesResponse *, const char*);
SOAP_FMAC1 _tds__SetScopesResponse * SOAP_FMAC2 soap_instantiate__tds__SetScopesResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetScopesResponse * soap_new__tds__SetScopesResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetScopesResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__SetScopesResponse * soap_new_req__tds__SetScopesResponse(
	struct soap *soap)
{
	_tds__SetScopesResponse *_p = soap_new__tds__SetScopesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__SetScopesResponse * soap_new_set__tds__SetScopesResponse(
	struct soap *soap)
{
	_tds__SetScopesResponse *_p = soap_new__tds__SetScopesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__SetScopesResponse(struct soap *soap, _tds__SetScopesResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetScopesResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetScopesResponse * SOAP_FMAC4 soap_get__tds__SetScopesResponse(struct soap*, _tds__SetScopesResponse *, const char*, const char*);

inline int soap_read__tds__SetScopesResponse(struct soap *soap, _tds__SetScopesResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__SetScopesResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__SetScopes_DEFINED
#define SOAP_TYPE__tds__SetScopes_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetScopes(struct soap*, const char*, int, const _tds__SetScopes *, const char*);
SOAP_FMAC3 _tds__SetScopes * SOAP_FMAC4 soap_in__tds__SetScopes(struct soap*, const char*, _tds__SetScopes *, const char*);
SOAP_FMAC1 _tds__SetScopes * SOAP_FMAC2 soap_instantiate__tds__SetScopes(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetScopes * soap_new__tds__SetScopes(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetScopes(soap, n, NULL, NULL, NULL);
}

inline _tds__SetScopes * soap_new_req__tds__SetScopes(
	struct soap *soap,
	const std::vector<std::string> & Scopes)
{
	_tds__SetScopes *_p = soap_new__tds__SetScopes(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetScopes::Scopes = Scopes;
	}
	return _p;
}

inline _tds__SetScopes * soap_new_set__tds__SetScopes(
	struct soap *soap,
	const std::vector<std::string> & Scopes)
{
	_tds__SetScopes *_p = soap_new__tds__SetScopes(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetScopes::Scopes = Scopes;
	}
	return _p;
}

inline int soap_write__tds__SetScopes(struct soap *soap, _tds__SetScopes const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetScopes", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetScopes * SOAP_FMAC4 soap_get__tds__SetScopes(struct soap*, _tds__SetScopes *, const char*, const char*);

inline int soap_read__tds__SetScopes(struct soap *soap, _tds__SetScopes *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__SetScopes(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__GetScopesResponse_DEFINED
#define SOAP_TYPE__tds__GetScopesResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetScopesResponse(struct soap*, const char*, int, const _tds__GetScopesResponse *, const char*);
SOAP_FMAC3 _tds__GetScopesResponse * SOAP_FMAC4 soap_in__tds__GetScopesResponse(struct soap*, const char*, _tds__GetScopesResponse *, const char*);
SOAP_FMAC1 _tds__GetScopesResponse * SOAP_FMAC2 soap_instantiate__tds__GetScopesResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetScopesResponse * soap_new__tds__GetScopesResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetScopesResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__GetScopesResponse * soap_new_req__tds__GetScopesResponse(
	struct soap *soap,
	const std::vector<tt__Scope *> & Scopes)
{
	_tds__GetScopesResponse *_p = soap_new__tds__GetScopesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetScopesResponse::Scopes = Scopes;
	}
	return _p;
}

inline _tds__GetScopesResponse * soap_new_set__tds__GetScopesResponse(
	struct soap *soap,
	const std::vector<tt__Scope *> & Scopes)
{
	_tds__GetScopesResponse *_p = soap_new__tds__GetScopesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetScopesResponse::Scopes = Scopes;
	}
	return _p;
}

inline int soap_write__tds__GetScopesResponse(struct soap *soap, _tds__GetScopesResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetScopesResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetScopesResponse * SOAP_FMAC4 soap_get__tds__GetScopesResponse(struct soap*, _tds__GetScopesResponse *, const char*, const char*);

inline int soap_read__tds__GetScopesResponse(struct soap *soap, _tds__GetScopesResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__GetScopesResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__GetScopes_DEFINED
#define SOAP_TYPE__tds__GetScopes_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetScopes(struct soap*, const char*, int, const _tds__GetScopes *, const char*);
SOAP_FMAC3 _tds__GetScopes * SOAP_FMAC4 soap_in__tds__GetScopes(struct soap*, const char*, _tds__GetScopes *, const char*);
SOAP_FMAC1 _tds__GetScopes * SOAP_FMAC2 soap_instantiate__tds__GetScopes(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetScopes * soap_new__tds__GetScopes(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetScopes(soap, n, NULL, NULL, NULL);
}

inline _tds__GetScopes * soap_new_req__tds__GetScopes(
	struct soap *soap)
{
	_tds__GetScopes *_p = soap_new__tds__GetScopes(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__GetScopes * soap_new_set__tds__GetScopes(
	struct soap *soap)
{
	_tds__GetScopes *_p = soap_new__tds__GetScopes(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__GetScopes(struct soap *soap, _tds__GetScopes const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetScopes", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetScopes * SOAP_FMAC4 soap_get__tds__GetScopes(struct soap*, _tds__GetScopes *, const char*, const char*);

inline int soap_read__tds__GetScopes(struct soap *soap, _tds__GetScopes *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__GetScopes(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__GetSystemLogResponse_DEFINED
#define SOAP_TYPE__tds__GetSystemLogResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetSystemLogResponse(struct soap*, const char*, int, const _tds__GetSystemLogResponse *, const char*);
SOAP_FMAC3 _tds__GetSystemLogResponse * SOAP_FMAC4 soap_in__tds__GetSystemLogResponse(struct soap*, const char*, _tds__GetSystemLogResponse *, const char*);
SOAP_FMAC1 _tds__GetSystemLogResponse * SOAP_FMAC2 soap_instantiate__tds__GetSystemLogResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetSystemLogResponse * soap_new__tds__GetSystemLogResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetSystemLogResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__GetSystemLogResponse * soap_new_req__tds__GetSystemLogResponse(
	struct soap *soap,
	tt__SystemLog *SystemLog)
{
	_tds__GetSystemLogResponse *_p = soap_new__tds__GetSystemLogResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetSystemLogResponse::SystemLog = SystemLog;
	}
	return _p;
}

inline _tds__GetSystemLogResponse * soap_new_set__tds__GetSystemLogResponse(
	struct soap *soap,
	tt__SystemLog *SystemLog)
{
	_tds__GetSystemLogResponse *_p = soap_new__tds__GetSystemLogResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetSystemLogResponse::SystemLog = SystemLog;
	}
	return _p;
}

inline int soap_write__tds__GetSystemLogResponse(struct soap *soap, _tds__GetSystemLogResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetSystemLogResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetSystemLogResponse * SOAP_FMAC4 soap_get__tds__GetSystemLogResponse(struct soap*, _tds__GetSystemLogResponse *, const char*, const char*);

inline int soap_read__tds__GetSystemLogResponse(struct soap *soap, _tds__GetSystemLogResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__GetSystemLogResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__GetSystemLog_DEFINED
#define SOAP_TYPE__tds__GetSystemLog_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetSystemLog(struct soap*, const char*, int, const _tds__GetSystemLog *, const char*);
SOAP_FMAC3 _tds__GetSystemLog * SOAP_FMAC4 soap_in__tds__GetSystemLog(struct soap*, const char*, _tds__GetSystemLog *, const char*);
SOAP_FMAC1 _tds__GetSystemLog * SOAP_FMAC2 soap_instantiate__tds__GetSystemLog(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetSystemLog * soap_new__tds__GetSystemLog(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetSystemLog(soap, n, NULL, NULL, NULL);
}

inline _tds__GetSystemLog * soap_new_req__tds__GetSystemLog(
	struct soap *soap,
	enum tt__SystemLogType LogType)
{
	_tds__GetSystemLog *_p = soap_new__tds__GetSystemLog(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetSystemLog::LogType = LogType;
	}
	return _p;
}

inline _tds__GetSystemLog * soap_new_set__tds__GetSystemLog(
	struct soap *soap,
	enum tt__SystemLogType LogType)
{
	_tds__GetSystemLog *_p = soap_new__tds__GetSystemLog(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetSystemLog::LogType = LogType;
	}
	return _p;
}

inline int soap_write__tds__GetSystemLog(struct soap *soap, _tds__GetSystemLog const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetSystemLog", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetSystemLog * SOAP_FMAC4 soap_get__tds__GetSystemLog(struct soap*, _tds__GetSystemLog *, const char*, const char*);

inline int soap_read__tds__GetSystemLog(struct soap *soap, _tds__GetSystemLog *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__GetSystemLog(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__GetSystemSupportInformationResponse_DEFINED
#define SOAP_TYPE__tds__GetSystemSupportInformationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetSystemSupportInformationResponse(struct soap*, const char*, int, const _tds__GetSystemSupportInformationResponse *, const char*);
SOAP_FMAC3 _tds__GetSystemSupportInformationResponse * SOAP_FMAC4 soap_in__tds__GetSystemSupportInformationResponse(struct soap*, const char*, _tds__GetSystemSupportInformationResponse *, const char*);
SOAP_FMAC1 _tds__GetSystemSupportInformationResponse * SOAP_FMAC2 soap_instantiate__tds__GetSystemSupportInformationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetSystemSupportInformationResponse * soap_new__tds__GetSystemSupportInformationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetSystemSupportInformationResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__GetSystemSupportInformationResponse * soap_new_req__tds__GetSystemSupportInformationResponse(
	struct soap *soap,
	tt__SupportInformation *SupportInformation)
{
	_tds__GetSystemSupportInformationResponse *_p = soap_new__tds__GetSystemSupportInformationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetSystemSupportInformationResponse::SupportInformation = SupportInformation;
	}
	return _p;
}

inline _tds__GetSystemSupportInformationResponse * soap_new_set__tds__GetSystemSupportInformationResponse(
	struct soap *soap,
	tt__SupportInformation *SupportInformation)
{
	_tds__GetSystemSupportInformationResponse *_p = soap_new__tds__GetSystemSupportInformationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetSystemSupportInformationResponse::SupportInformation = SupportInformation;
	}
	return _p;
}

inline int soap_write__tds__GetSystemSupportInformationResponse(struct soap *soap, _tds__GetSystemSupportInformationResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetSystemSupportInformationResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetSystemSupportInformationResponse * SOAP_FMAC4 soap_get__tds__GetSystemSupportInformationResponse(struct soap*, _tds__GetSystemSupportInformationResponse *, const char*, const char*);

inline int soap_read__tds__GetSystemSupportInformationResponse(struct soap *soap, _tds__GetSystemSupportInformationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__GetSystemSupportInformationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__GetSystemSupportInformation_DEFINED
#define SOAP_TYPE__tds__GetSystemSupportInformation_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetSystemSupportInformation(struct soap*, const char*, int, const _tds__GetSystemSupportInformation *, const char*);
SOAP_FMAC3 _tds__GetSystemSupportInformation * SOAP_FMAC4 soap_in__tds__GetSystemSupportInformation(struct soap*, const char*, _tds__GetSystemSupportInformation *, const char*);
SOAP_FMAC1 _tds__GetSystemSupportInformation * SOAP_FMAC2 soap_instantiate__tds__GetSystemSupportInformation(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetSystemSupportInformation * soap_new__tds__GetSystemSupportInformation(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetSystemSupportInformation(soap, n, NULL, NULL, NULL);
}

inline _tds__GetSystemSupportInformation * soap_new_req__tds__GetSystemSupportInformation(
	struct soap *soap)
{
	_tds__GetSystemSupportInformation *_p = soap_new__tds__GetSystemSupportInformation(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__GetSystemSupportInformation * soap_new_set__tds__GetSystemSupportInformation(
	struct soap *soap)
{
	_tds__GetSystemSupportInformation *_p = soap_new__tds__GetSystemSupportInformation(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__GetSystemSupportInformation(struct soap *soap, _tds__GetSystemSupportInformation const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetSystemSupportInformation", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetSystemSupportInformation * SOAP_FMAC4 soap_get__tds__GetSystemSupportInformation(struct soap*, _tds__GetSystemSupportInformation *, const char*, const char*);

inline int soap_read__tds__GetSystemSupportInformation(struct soap *soap, _tds__GetSystemSupportInformation *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__GetSystemSupportInformation(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__GetSystemBackupResponse_DEFINED
#define SOAP_TYPE__tds__GetSystemBackupResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetSystemBackupResponse(struct soap*, const char*, int, const _tds__GetSystemBackupResponse *, const char*);
SOAP_FMAC3 _tds__GetSystemBackupResponse * SOAP_FMAC4 soap_in__tds__GetSystemBackupResponse(struct soap*, const char*, _tds__GetSystemBackupResponse *, const char*);
SOAP_FMAC1 _tds__GetSystemBackupResponse * SOAP_FMAC2 soap_instantiate__tds__GetSystemBackupResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetSystemBackupResponse * soap_new__tds__GetSystemBackupResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetSystemBackupResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__GetSystemBackupResponse * soap_new_req__tds__GetSystemBackupResponse(
	struct soap *soap,
	const std::vector<tt__BackupFile *> & BackupFiles)
{
	_tds__GetSystemBackupResponse *_p = soap_new__tds__GetSystemBackupResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetSystemBackupResponse::BackupFiles = BackupFiles;
	}
	return _p;
}

inline _tds__GetSystemBackupResponse * soap_new_set__tds__GetSystemBackupResponse(
	struct soap *soap,
	const std::vector<tt__BackupFile *> & BackupFiles)
{
	_tds__GetSystemBackupResponse *_p = soap_new__tds__GetSystemBackupResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetSystemBackupResponse::BackupFiles = BackupFiles;
	}
	return _p;
}

inline int soap_write__tds__GetSystemBackupResponse(struct soap *soap, _tds__GetSystemBackupResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetSystemBackupResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetSystemBackupResponse * SOAP_FMAC4 soap_get__tds__GetSystemBackupResponse(struct soap*, _tds__GetSystemBackupResponse *, const char*, const char*);

inline int soap_read__tds__GetSystemBackupResponse(struct soap *soap, _tds__GetSystemBackupResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__GetSystemBackupResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__GetSystemBackup_DEFINED
#define SOAP_TYPE__tds__GetSystemBackup_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetSystemBackup(struct soap*, const char*, int, const _tds__GetSystemBackup *, const char*);
SOAP_FMAC3 _tds__GetSystemBackup * SOAP_FMAC4 soap_in__tds__GetSystemBackup(struct soap*, const char*, _tds__GetSystemBackup *, const char*);
SOAP_FMAC1 _tds__GetSystemBackup * SOAP_FMAC2 soap_instantiate__tds__GetSystemBackup(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetSystemBackup * soap_new__tds__GetSystemBackup(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetSystemBackup(soap, n, NULL, NULL, NULL);
}

inline _tds__GetSystemBackup * soap_new_req__tds__GetSystemBackup(
	struct soap *soap)
{
	_tds__GetSystemBackup *_p = soap_new__tds__GetSystemBackup(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__GetSystemBackup * soap_new_set__tds__GetSystemBackup(
	struct soap *soap)
{
	_tds__GetSystemBackup *_p = soap_new__tds__GetSystemBackup(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__GetSystemBackup(struct soap *soap, _tds__GetSystemBackup const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetSystemBackup", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetSystemBackup * SOAP_FMAC4 soap_get__tds__GetSystemBackup(struct soap*, _tds__GetSystemBackup *, const char*, const char*);

inline int soap_read__tds__GetSystemBackup(struct soap *soap, _tds__GetSystemBackup *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__GetSystemBackup(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__RestoreSystemResponse_DEFINED
#define SOAP_TYPE__tds__RestoreSystemResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__RestoreSystemResponse(struct soap*, const char*, int, const _tds__RestoreSystemResponse *, const char*);
SOAP_FMAC3 _tds__RestoreSystemResponse * SOAP_FMAC4 soap_in__tds__RestoreSystemResponse(struct soap*, const char*, _tds__RestoreSystemResponse *, const char*);
SOAP_FMAC1 _tds__RestoreSystemResponse * SOAP_FMAC2 soap_instantiate__tds__RestoreSystemResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__RestoreSystemResponse * soap_new__tds__RestoreSystemResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__RestoreSystemResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__RestoreSystemResponse * soap_new_req__tds__RestoreSystemResponse(
	struct soap *soap)
{
	_tds__RestoreSystemResponse *_p = soap_new__tds__RestoreSystemResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__RestoreSystemResponse * soap_new_set__tds__RestoreSystemResponse(
	struct soap *soap)
{
	_tds__RestoreSystemResponse *_p = soap_new__tds__RestoreSystemResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__RestoreSystemResponse(struct soap *soap, _tds__RestoreSystemResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:RestoreSystemResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__RestoreSystemResponse * SOAP_FMAC4 soap_get__tds__RestoreSystemResponse(struct soap*, _tds__RestoreSystemResponse *, const char*, const char*);

inline int soap_read__tds__RestoreSystemResponse(struct soap *soap, _tds__RestoreSystemResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__RestoreSystemResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__RestoreSystem_DEFINED
#define SOAP_TYPE__tds__RestoreSystem_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__RestoreSystem(struct soap*, const char*, int, const _tds__RestoreSystem *, const char*);
SOAP_FMAC3 _tds__RestoreSystem * SOAP_FMAC4 soap_in__tds__RestoreSystem(struct soap*, const char*, _tds__RestoreSystem *, const char*);
SOAP_FMAC1 _tds__RestoreSystem * SOAP_FMAC2 soap_instantiate__tds__RestoreSystem(struct soap*, int, const char*, const char*, size_t*);

inline _tds__RestoreSystem * soap_new__tds__RestoreSystem(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__RestoreSystem(soap, n, NULL, NULL, NULL);
}

inline _tds__RestoreSystem * soap_new_req__tds__RestoreSystem(
	struct soap *soap,
	const std::vector<tt__BackupFile *> & BackupFiles)
{
	_tds__RestoreSystem *_p = soap_new__tds__RestoreSystem(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__RestoreSystem::BackupFiles = BackupFiles;
	}
	return _p;
}

inline _tds__RestoreSystem * soap_new_set__tds__RestoreSystem(
	struct soap *soap,
	const std::vector<tt__BackupFile *> & BackupFiles)
{
	_tds__RestoreSystem *_p = soap_new__tds__RestoreSystem(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__RestoreSystem::BackupFiles = BackupFiles;
	}
	return _p;
}

inline int soap_write__tds__RestoreSystem(struct soap *soap, _tds__RestoreSystem const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:RestoreSystem", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__RestoreSystem * SOAP_FMAC4 soap_get__tds__RestoreSystem(struct soap*, _tds__RestoreSystem *, const char*, const char*);

inline int soap_read__tds__RestoreSystem(struct soap *soap, _tds__RestoreSystem *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__RestoreSystem(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__SystemRebootResponse_DEFINED
#define SOAP_TYPE__tds__SystemRebootResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SystemRebootResponse(struct soap*, const char*, int, const _tds__SystemRebootResponse *, const char*);
SOAP_FMAC3 _tds__SystemRebootResponse * SOAP_FMAC4 soap_in__tds__SystemRebootResponse(struct soap*, const char*, _tds__SystemRebootResponse *, const char*);
SOAP_FMAC1 _tds__SystemRebootResponse * SOAP_FMAC2 soap_instantiate__tds__SystemRebootResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SystemRebootResponse * soap_new__tds__SystemRebootResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SystemRebootResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__SystemRebootResponse * soap_new_req__tds__SystemRebootResponse(
	struct soap *soap,
	const std::string& Message)
{
	_tds__SystemRebootResponse *_p = soap_new__tds__SystemRebootResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SystemRebootResponse::Message = Message;
	}
	return _p;
}

inline _tds__SystemRebootResponse * soap_new_set__tds__SystemRebootResponse(
	struct soap *soap,
	const std::string& Message)
{
	_tds__SystemRebootResponse *_p = soap_new__tds__SystemRebootResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SystemRebootResponse::Message = Message;
	}
	return _p;
}

inline int soap_write__tds__SystemRebootResponse(struct soap *soap, _tds__SystemRebootResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SystemRebootResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SystemRebootResponse * SOAP_FMAC4 soap_get__tds__SystemRebootResponse(struct soap*, _tds__SystemRebootResponse *, const char*, const char*);

inline int soap_read__tds__SystemRebootResponse(struct soap *soap, _tds__SystemRebootResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__SystemRebootResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__SystemReboot_DEFINED
#define SOAP_TYPE__tds__SystemReboot_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SystemReboot(struct soap*, const char*, int, const _tds__SystemReboot *, const char*);
SOAP_FMAC3 _tds__SystemReboot * SOAP_FMAC4 soap_in__tds__SystemReboot(struct soap*, const char*, _tds__SystemReboot *, const char*);
SOAP_FMAC1 _tds__SystemReboot * SOAP_FMAC2 soap_instantiate__tds__SystemReboot(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SystemReboot * soap_new__tds__SystemReboot(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SystemReboot(soap, n, NULL, NULL, NULL);
}

inline _tds__SystemReboot * soap_new_req__tds__SystemReboot(
	struct soap *soap)
{
	_tds__SystemReboot *_p = soap_new__tds__SystemReboot(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__SystemReboot * soap_new_set__tds__SystemReboot(
	struct soap *soap)
{
	_tds__SystemReboot *_p = soap_new__tds__SystemReboot(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__SystemReboot(struct soap *soap, _tds__SystemReboot const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SystemReboot", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SystemReboot * SOAP_FMAC4 soap_get__tds__SystemReboot(struct soap*, _tds__SystemReboot *, const char*, const char*);

inline int soap_read__tds__SystemReboot(struct soap *soap, _tds__SystemReboot *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__SystemReboot(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__UpgradeSystemFirmwareResponse_DEFINED
#define SOAP_TYPE__tds__UpgradeSystemFirmwareResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__UpgradeSystemFirmwareResponse(struct soap*, const char*, int, const _tds__UpgradeSystemFirmwareResponse *, const char*);
SOAP_FMAC3 _tds__UpgradeSystemFirmwareResponse * SOAP_FMAC4 soap_in__tds__UpgradeSystemFirmwareResponse(struct soap*, const char*, _tds__UpgradeSystemFirmwareResponse *, const char*);
SOAP_FMAC1 _tds__UpgradeSystemFirmwareResponse * SOAP_FMAC2 soap_instantiate__tds__UpgradeSystemFirmwareResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__UpgradeSystemFirmwareResponse * soap_new__tds__UpgradeSystemFirmwareResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__UpgradeSystemFirmwareResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__UpgradeSystemFirmwareResponse * soap_new_req__tds__UpgradeSystemFirmwareResponse(
	struct soap *soap)
{
	_tds__UpgradeSystemFirmwareResponse *_p = soap_new__tds__UpgradeSystemFirmwareResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__UpgradeSystemFirmwareResponse * soap_new_set__tds__UpgradeSystemFirmwareResponse(
	struct soap *soap,
	std::string *Message)
{
	_tds__UpgradeSystemFirmwareResponse *_p = soap_new__tds__UpgradeSystemFirmwareResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__UpgradeSystemFirmwareResponse::Message = Message;
	}
	return _p;
}

inline int soap_write__tds__UpgradeSystemFirmwareResponse(struct soap *soap, _tds__UpgradeSystemFirmwareResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:UpgradeSystemFirmwareResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__UpgradeSystemFirmwareResponse * SOAP_FMAC4 soap_get__tds__UpgradeSystemFirmwareResponse(struct soap*, _tds__UpgradeSystemFirmwareResponse *, const char*, const char*);

inline int soap_read__tds__UpgradeSystemFirmwareResponse(struct soap *soap, _tds__UpgradeSystemFirmwareResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__UpgradeSystemFirmwareResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__UpgradeSystemFirmware_DEFINED
#define SOAP_TYPE__tds__UpgradeSystemFirmware_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__UpgradeSystemFirmware(struct soap*, const char*, int, const _tds__UpgradeSystemFirmware *, const char*);
SOAP_FMAC3 _tds__UpgradeSystemFirmware * SOAP_FMAC4 soap_in__tds__UpgradeSystemFirmware(struct soap*, const char*, _tds__UpgradeSystemFirmware *, const char*);
SOAP_FMAC1 _tds__UpgradeSystemFirmware * SOAP_FMAC2 soap_instantiate__tds__UpgradeSystemFirmware(struct soap*, int, const char*, const char*, size_t*);

inline _tds__UpgradeSystemFirmware * soap_new__tds__UpgradeSystemFirmware(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__UpgradeSystemFirmware(soap, n, NULL, NULL, NULL);
}

inline _tds__UpgradeSystemFirmware * soap_new_req__tds__UpgradeSystemFirmware(
	struct soap *soap,
	tt__AttachmentData *Firmware)
{
	_tds__UpgradeSystemFirmware *_p = soap_new__tds__UpgradeSystemFirmware(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__UpgradeSystemFirmware::Firmware = Firmware;
	}
	return _p;
}

inline _tds__UpgradeSystemFirmware * soap_new_set__tds__UpgradeSystemFirmware(
	struct soap *soap,
	tt__AttachmentData *Firmware)
{
	_tds__UpgradeSystemFirmware *_p = soap_new__tds__UpgradeSystemFirmware(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__UpgradeSystemFirmware::Firmware = Firmware;
	}
	return _p;
}

inline int soap_write__tds__UpgradeSystemFirmware(struct soap *soap, _tds__UpgradeSystemFirmware const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:UpgradeSystemFirmware", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__UpgradeSystemFirmware * SOAP_FMAC4 soap_get__tds__UpgradeSystemFirmware(struct soap*, _tds__UpgradeSystemFirmware *, const char*, const char*);

inline int soap_read__tds__UpgradeSystemFirmware(struct soap *soap, _tds__UpgradeSystemFirmware *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__UpgradeSystemFirmware(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__SetSystemFactoryDefaultResponse_DEFINED
#define SOAP_TYPE__tds__SetSystemFactoryDefaultResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetSystemFactoryDefaultResponse(struct soap*, const char*, int, const _tds__SetSystemFactoryDefaultResponse *, const char*);
SOAP_FMAC3 _tds__SetSystemFactoryDefaultResponse * SOAP_FMAC4 soap_in__tds__SetSystemFactoryDefaultResponse(struct soap*, const char*, _tds__SetSystemFactoryDefaultResponse *, const char*);
SOAP_FMAC1 _tds__SetSystemFactoryDefaultResponse * SOAP_FMAC2 soap_instantiate__tds__SetSystemFactoryDefaultResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetSystemFactoryDefaultResponse * soap_new__tds__SetSystemFactoryDefaultResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetSystemFactoryDefaultResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__SetSystemFactoryDefaultResponse * soap_new_req__tds__SetSystemFactoryDefaultResponse(
	struct soap *soap)
{
	_tds__SetSystemFactoryDefaultResponse *_p = soap_new__tds__SetSystemFactoryDefaultResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__SetSystemFactoryDefaultResponse * soap_new_set__tds__SetSystemFactoryDefaultResponse(
	struct soap *soap)
{
	_tds__SetSystemFactoryDefaultResponse *_p = soap_new__tds__SetSystemFactoryDefaultResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__SetSystemFactoryDefaultResponse(struct soap *soap, _tds__SetSystemFactoryDefaultResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetSystemFactoryDefaultResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetSystemFactoryDefaultResponse * SOAP_FMAC4 soap_get__tds__SetSystemFactoryDefaultResponse(struct soap*, _tds__SetSystemFactoryDefaultResponse *, const char*, const char*);

inline int soap_read__tds__SetSystemFactoryDefaultResponse(struct soap *soap, _tds__SetSystemFactoryDefaultResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__SetSystemFactoryDefaultResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__SetSystemFactoryDefault_DEFINED
#define SOAP_TYPE__tds__SetSystemFactoryDefault_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetSystemFactoryDefault(struct soap*, const char*, int, const _tds__SetSystemFactoryDefault *, const char*);
SOAP_FMAC3 _tds__SetSystemFactoryDefault * SOAP_FMAC4 soap_in__tds__SetSystemFactoryDefault(struct soap*, const char*, _tds__SetSystemFactoryDefault *, const char*);
SOAP_FMAC1 _tds__SetSystemFactoryDefault * SOAP_FMAC2 soap_instantiate__tds__SetSystemFactoryDefault(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetSystemFactoryDefault * soap_new__tds__SetSystemFactoryDefault(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetSystemFactoryDefault(soap, n, NULL, NULL, NULL);
}

inline _tds__SetSystemFactoryDefault * soap_new_req__tds__SetSystemFactoryDefault(
	struct soap *soap,
	enum tt__FactoryDefaultType FactoryDefault)
{
	_tds__SetSystemFactoryDefault *_p = soap_new__tds__SetSystemFactoryDefault(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetSystemFactoryDefault::FactoryDefault = FactoryDefault;
	}
	return _p;
}

inline _tds__SetSystemFactoryDefault * soap_new_set__tds__SetSystemFactoryDefault(
	struct soap *soap,
	enum tt__FactoryDefaultType FactoryDefault)
{
	_tds__SetSystemFactoryDefault *_p = soap_new__tds__SetSystemFactoryDefault(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetSystemFactoryDefault::FactoryDefault = FactoryDefault;
	}
	return _p;
}

inline int soap_write__tds__SetSystemFactoryDefault(struct soap *soap, _tds__SetSystemFactoryDefault const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetSystemFactoryDefault", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetSystemFactoryDefault * SOAP_FMAC4 soap_get__tds__SetSystemFactoryDefault(struct soap*, _tds__SetSystemFactoryDefault *, const char*, const char*);

inline int soap_read__tds__SetSystemFactoryDefault(struct soap *soap, _tds__SetSystemFactoryDefault *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__SetSystemFactoryDefault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__GetSystemDateAndTimeResponse_DEFINED
#define SOAP_TYPE__tds__GetSystemDateAndTimeResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetSystemDateAndTimeResponse(struct soap*, const char*, int, const _tds__GetSystemDateAndTimeResponse *, const char*);
SOAP_FMAC3 _tds__GetSystemDateAndTimeResponse * SOAP_FMAC4 soap_in__tds__GetSystemDateAndTimeResponse(struct soap*, const char*, _tds__GetSystemDateAndTimeResponse *, const char*);
SOAP_FMAC1 _tds__GetSystemDateAndTimeResponse * SOAP_FMAC2 soap_instantiate__tds__GetSystemDateAndTimeResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetSystemDateAndTimeResponse * soap_new__tds__GetSystemDateAndTimeResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetSystemDateAndTimeResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__GetSystemDateAndTimeResponse * soap_new_req__tds__GetSystemDateAndTimeResponse(
	struct soap *soap,
	tt__SystemDateTime *SystemDateAndTime)
{
	_tds__GetSystemDateAndTimeResponse *_p = soap_new__tds__GetSystemDateAndTimeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetSystemDateAndTimeResponse::SystemDateAndTime = SystemDateAndTime;
	}
	return _p;
}

inline _tds__GetSystemDateAndTimeResponse * soap_new_set__tds__GetSystemDateAndTimeResponse(
	struct soap *soap,
	tt__SystemDateTime *SystemDateAndTime)
{
	_tds__GetSystemDateAndTimeResponse *_p = soap_new__tds__GetSystemDateAndTimeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetSystemDateAndTimeResponse::SystemDateAndTime = SystemDateAndTime;
	}
	return _p;
}

inline int soap_write__tds__GetSystemDateAndTimeResponse(struct soap *soap, _tds__GetSystemDateAndTimeResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetSystemDateAndTimeResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetSystemDateAndTimeResponse * SOAP_FMAC4 soap_get__tds__GetSystemDateAndTimeResponse(struct soap*, _tds__GetSystemDateAndTimeResponse *, const char*, const char*);

inline int soap_read__tds__GetSystemDateAndTimeResponse(struct soap *soap, _tds__GetSystemDateAndTimeResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__GetSystemDateAndTimeResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__GetSystemDateAndTime_DEFINED
#define SOAP_TYPE__tds__GetSystemDateAndTime_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetSystemDateAndTime(struct soap*, const char*, int, const _tds__GetSystemDateAndTime *, const char*);
SOAP_FMAC3 _tds__GetSystemDateAndTime * SOAP_FMAC4 soap_in__tds__GetSystemDateAndTime(struct soap*, const char*, _tds__GetSystemDateAndTime *, const char*);
SOAP_FMAC1 _tds__GetSystemDateAndTime * SOAP_FMAC2 soap_instantiate__tds__GetSystemDateAndTime(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetSystemDateAndTime * soap_new__tds__GetSystemDateAndTime(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetSystemDateAndTime(soap, n, NULL, NULL, NULL);
}

inline _tds__GetSystemDateAndTime * soap_new_req__tds__GetSystemDateAndTime(
	struct soap *soap)
{
	_tds__GetSystemDateAndTime *_p = soap_new__tds__GetSystemDateAndTime(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__GetSystemDateAndTime * soap_new_set__tds__GetSystemDateAndTime(
	struct soap *soap)
{
	_tds__GetSystemDateAndTime *_p = soap_new__tds__GetSystemDateAndTime(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__GetSystemDateAndTime(struct soap *soap, _tds__GetSystemDateAndTime const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetSystemDateAndTime", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetSystemDateAndTime * SOAP_FMAC4 soap_get__tds__GetSystemDateAndTime(struct soap*, _tds__GetSystemDateAndTime *, const char*, const char*);

inline int soap_read__tds__GetSystemDateAndTime(struct soap *soap, _tds__GetSystemDateAndTime *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__GetSystemDateAndTime(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__SetSystemDateAndTimeResponse_DEFINED
#define SOAP_TYPE__tds__SetSystemDateAndTimeResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetSystemDateAndTimeResponse(struct soap*, const char*, int, const _tds__SetSystemDateAndTimeResponse *, const char*);
SOAP_FMAC3 _tds__SetSystemDateAndTimeResponse * SOAP_FMAC4 soap_in__tds__SetSystemDateAndTimeResponse(struct soap*, const char*, _tds__SetSystemDateAndTimeResponse *, const char*);
SOAP_FMAC1 _tds__SetSystemDateAndTimeResponse * SOAP_FMAC2 soap_instantiate__tds__SetSystemDateAndTimeResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetSystemDateAndTimeResponse * soap_new__tds__SetSystemDateAndTimeResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetSystemDateAndTimeResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__SetSystemDateAndTimeResponse * soap_new_req__tds__SetSystemDateAndTimeResponse(
	struct soap *soap)
{
	_tds__SetSystemDateAndTimeResponse *_p = soap_new__tds__SetSystemDateAndTimeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__SetSystemDateAndTimeResponse * soap_new_set__tds__SetSystemDateAndTimeResponse(
	struct soap *soap)
{
	_tds__SetSystemDateAndTimeResponse *_p = soap_new__tds__SetSystemDateAndTimeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__SetSystemDateAndTimeResponse(struct soap *soap, _tds__SetSystemDateAndTimeResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetSystemDateAndTimeResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetSystemDateAndTimeResponse * SOAP_FMAC4 soap_get__tds__SetSystemDateAndTimeResponse(struct soap*, _tds__SetSystemDateAndTimeResponse *, const char*, const char*);

inline int soap_read__tds__SetSystemDateAndTimeResponse(struct soap *soap, _tds__SetSystemDateAndTimeResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__SetSystemDateAndTimeResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__SetSystemDateAndTime_DEFINED
#define SOAP_TYPE__tds__SetSystemDateAndTime_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetSystemDateAndTime(struct soap*, const char*, int, const _tds__SetSystemDateAndTime *, const char*);
SOAP_FMAC3 _tds__SetSystemDateAndTime * SOAP_FMAC4 soap_in__tds__SetSystemDateAndTime(struct soap*, const char*, _tds__SetSystemDateAndTime *, const char*);
SOAP_FMAC1 _tds__SetSystemDateAndTime * SOAP_FMAC2 soap_instantiate__tds__SetSystemDateAndTime(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetSystemDateAndTime * soap_new__tds__SetSystemDateAndTime(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetSystemDateAndTime(soap, n, NULL, NULL, NULL);
}

inline _tds__SetSystemDateAndTime * soap_new_req__tds__SetSystemDateAndTime(
	struct soap *soap,
	enum tt__SetDateTimeType DateTimeType,
	bool DaylightSavings)
{
	_tds__SetSystemDateAndTime *_p = soap_new__tds__SetSystemDateAndTime(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetSystemDateAndTime::DateTimeType = DateTimeType;
		_p->_tds__SetSystemDateAndTime::DaylightSavings = DaylightSavings;
	}
	return _p;
}

inline _tds__SetSystemDateAndTime * soap_new_set__tds__SetSystemDateAndTime(
	struct soap *soap,
	enum tt__SetDateTimeType DateTimeType,
	bool DaylightSavings,
	tt__TimeZone *TimeZone,
	tt__DateTime *UTCDateTime)
{
	_tds__SetSystemDateAndTime *_p = soap_new__tds__SetSystemDateAndTime(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetSystemDateAndTime::DateTimeType = DateTimeType;
		_p->_tds__SetSystemDateAndTime::DaylightSavings = DaylightSavings;
		_p->_tds__SetSystemDateAndTime::TimeZone = TimeZone;
		_p->_tds__SetSystemDateAndTime::UTCDateTime = UTCDateTime;
	}
	return _p;
}

inline int soap_write__tds__SetSystemDateAndTime(struct soap *soap, _tds__SetSystemDateAndTime const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetSystemDateAndTime", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetSystemDateAndTime * SOAP_FMAC4 soap_get__tds__SetSystemDateAndTime(struct soap*, _tds__SetSystemDateAndTime *, const char*, const char*);

inline int soap_read__tds__SetSystemDateAndTime(struct soap *soap, _tds__SetSystemDateAndTime *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__SetSystemDateAndTime(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__GetDeviceInformationResponse_DEFINED
#define SOAP_TYPE__tds__GetDeviceInformationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetDeviceInformationResponse(struct soap*, const char*, int, const _tds__GetDeviceInformationResponse *, const char*);
SOAP_FMAC3 _tds__GetDeviceInformationResponse * SOAP_FMAC4 soap_in__tds__GetDeviceInformationResponse(struct soap*, const char*, _tds__GetDeviceInformationResponse *, const char*);
SOAP_FMAC1 _tds__GetDeviceInformationResponse * SOAP_FMAC2 soap_instantiate__tds__GetDeviceInformationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetDeviceInformationResponse * soap_new__tds__GetDeviceInformationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetDeviceInformationResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__GetDeviceInformationResponse * soap_new_req__tds__GetDeviceInformationResponse(
	struct soap *soap,
	const std::string& Manufacturer,
	const std::string& Model,
	const std::string& FirmwareVersion,
	const std::string& SerialNumber,
	const std::string& HardwareId)
{
	_tds__GetDeviceInformationResponse *_p = soap_new__tds__GetDeviceInformationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetDeviceInformationResponse::Manufacturer = Manufacturer;
		_p->_tds__GetDeviceInformationResponse::Model = Model;
		_p->_tds__GetDeviceInformationResponse::FirmwareVersion = FirmwareVersion;
		_p->_tds__GetDeviceInformationResponse::SerialNumber = SerialNumber;
		_p->_tds__GetDeviceInformationResponse::HardwareId = HardwareId;
	}
	return _p;
}

inline _tds__GetDeviceInformationResponse * soap_new_set__tds__GetDeviceInformationResponse(
	struct soap *soap,
	const std::string& Manufacturer,
	const std::string& Model,
	const std::string& FirmwareVersion,
	const std::string& SerialNumber,
	const std::string& HardwareId)
{
	_tds__GetDeviceInformationResponse *_p = soap_new__tds__GetDeviceInformationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetDeviceInformationResponse::Manufacturer = Manufacturer;
		_p->_tds__GetDeviceInformationResponse::Model = Model;
		_p->_tds__GetDeviceInformationResponse::FirmwareVersion = FirmwareVersion;
		_p->_tds__GetDeviceInformationResponse::SerialNumber = SerialNumber;
		_p->_tds__GetDeviceInformationResponse::HardwareId = HardwareId;
	}
	return _p;
}

inline int soap_write__tds__GetDeviceInformationResponse(struct soap *soap, _tds__GetDeviceInformationResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetDeviceInformationResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetDeviceInformationResponse * SOAP_FMAC4 soap_get__tds__GetDeviceInformationResponse(struct soap*, _tds__GetDeviceInformationResponse *, const char*, const char*);

inline int soap_read__tds__GetDeviceInformationResponse(struct soap *soap, _tds__GetDeviceInformationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__GetDeviceInformationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__GetDeviceInformation_DEFINED
#define SOAP_TYPE__tds__GetDeviceInformation_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetDeviceInformation(struct soap*, const char*, int, const _tds__GetDeviceInformation *, const char*);
SOAP_FMAC3 _tds__GetDeviceInformation * SOAP_FMAC4 soap_in__tds__GetDeviceInformation(struct soap*, const char*, _tds__GetDeviceInformation *, const char*);
SOAP_FMAC1 _tds__GetDeviceInformation * SOAP_FMAC2 soap_instantiate__tds__GetDeviceInformation(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetDeviceInformation * soap_new__tds__GetDeviceInformation(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetDeviceInformation(soap, n, NULL, NULL, NULL);
}

inline _tds__GetDeviceInformation * soap_new_req__tds__GetDeviceInformation(
	struct soap *soap)
{
	_tds__GetDeviceInformation *_p = soap_new__tds__GetDeviceInformation(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__GetDeviceInformation * soap_new_set__tds__GetDeviceInformation(
	struct soap *soap)
{
	_tds__GetDeviceInformation *_p = soap_new__tds__GetDeviceInformation(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__GetDeviceInformation(struct soap *soap, _tds__GetDeviceInformation const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetDeviceInformation", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetDeviceInformation * SOAP_FMAC4 soap_get__tds__GetDeviceInformation(struct soap*, _tds__GetDeviceInformation *, const char*, const char*);

inline int soap_read__tds__GetDeviceInformation(struct soap *soap, _tds__GetDeviceInformation *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__GetDeviceInformation(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__GetServiceCapabilitiesResponse_DEFINED
#define SOAP_TYPE__tds__GetServiceCapabilitiesResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetServiceCapabilitiesResponse(struct soap*, const char*, int, const _tds__GetServiceCapabilitiesResponse *, const char*);
SOAP_FMAC3 _tds__GetServiceCapabilitiesResponse * SOAP_FMAC4 soap_in__tds__GetServiceCapabilitiesResponse(struct soap*, const char*, _tds__GetServiceCapabilitiesResponse *, const char*);
SOAP_FMAC1 _tds__GetServiceCapabilitiesResponse * SOAP_FMAC2 soap_instantiate__tds__GetServiceCapabilitiesResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetServiceCapabilitiesResponse * soap_new__tds__GetServiceCapabilitiesResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetServiceCapabilitiesResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__GetServiceCapabilitiesResponse * soap_new_req__tds__GetServiceCapabilitiesResponse(
	struct soap *soap,
	tds__DeviceServiceCapabilities *Capabilities)
{
	_tds__GetServiceCapabilitiesResponse *_p = soap_new__tds__GetServiceCapabilitiesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetServiceCapabilitiesResponse::Capabilities = Capabilities;
	}
	return _p;
}

inline _tds__GetServiceCapabilitiesResponse * soap_new_set__tds__GetServiceCapabilitiesResponse(
	struct soap *soap,
	tds__DeviceServiceCapabilities *Capabilities)
{
	_tds__GetServiceCapabilitiesResponse *_p = soap_new__tds__GetServiceCapabilitiesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetServiceCapabilitiesResponse::Capabilities = Capabilities;
	}
	return _p;
}

inline int soap_write__tds__GetServiceCapabilitiesResponse(struct soap *soap, _tds__GetServiceCapabilitiesResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetServiceCapabilitiesResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetServiceCapabilitiesResponse * SOAP_FMAC4 soap_get__tds__GetServiceCapabilitiesResponse(struct soap*, _tds__GetServiceCapabilitiesResponse *, const char*, const char*);

inline int soap_read__tds__GetServiceCapabilitiesResponse(struct soap *soap, _tds__GetServiceCapabilitiesResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__GetServiceCapabilitiesResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__GetServiceCapabilities_DEFINED
#define SOAP_TYPE__tds__GetServiceCapabilities_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetServiceCapabilities(struct soap*, const char*, int, const _tds__GetServiceCapabilities *, const char*);
SOAP_FMAC3 _tds__GetServiceCapabilities * SOAP_FMAC4 soap_in__tds__GetServiceCapabilities(struct soap*, const char*, _tds__GetServiceCapabilities *, const char*);
SOAP_FMAC1 _tds__GetServiceCapabilities * SOAP_FMAC2 soap_instantiate__tds__GetServiceCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetServiceCapabilities * soap_new__tds__GetServiceCapabilities(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetServiceCapabilities(soap, n, NULL, NULL, NULL);
}

inline _tds__GetServiceCapabilities * soap_new_req__tds__GetServiceCapabilities(
	struct soap *soap)
{
	_tds__GetServiceCapabilities *_p = soap_new__tds__GetServiceCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__GetServiceCapabilities * soap_new_set__tds__GetServiceCapabilities(
	struct soap *soap)
{
	_tds__GetServiceCapabilities *_p = soap_new__tds__GetServiceCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__GetServiceCapabilities(struct soap *soap, _tds__GetServiceCapabilities const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetServiceCapabilities", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetServiceCapabilities * SOAP_FMAC4 soap_get__tds__GetServiceCapabilities(struct soap*, _tds__GetServiceCapabilities *, const char*, const char*);

inline int soap_read__tds__GetServiceCapabilities(struct soap *soap, _tds__GetServiceCapabilities *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__GetServiceCapabilities(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__GetServicesResponse_DEFINED
#define SOAP_TYPE__tds__GetServicesResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetServicesResponse(struct soap*, const char*, int, const _tds__GetServicesResponse *, const char*);
SOAP_FMAC3 _tds__GetServicesResponse * SOAP_FMAC4 soap_in__tds__GetServicesResponse(struct soap*, const char*, _tds__GetServicesResponse *, const char*);
SOAP_FMAC1 _tds__GetServicesResponse * SOAP_FMAC2 soap_instantiate__tds__GetServicesResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetServicesResponse * soap_new__tds__GetServicesResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetServicesResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__GetServicesResponse * soap_new_req__tds__GetServicesResponse(
	struct soap *soap,
	const std::vector<tds__Service *> & Service)
{
	_tds__GetServicesResponse *_p = soap_new__tds__GetServicesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetServicesResponse::Service = Service;
	}
	return _p;
}

inline _tds__GetServicesResponse * soap_new_set__tds__GetServicesResponse(
	struct soap *soap,
	const std::vector<tds__Service *> & Service)
{
	_tds__GetServicesResponse *_p = soap_new__tds__GetServicesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetServicesResponse::Service = Service;
	}
	return _p;
}

inline int soap_write__tds__GetServicesResponse(struct soap *soap, _tds__GetServicesResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetServicesResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetServicesResponse * SOAP_FMAC4 soap_get__tds__GetServicesResponse(struct soap*, _tds__GetServicesResponse *, const char*, const char*);

inline int soap_read__tds__GetServicesResponse(struct soap *soap, _tds__GetServicesResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__GetServicesResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tds__GetServices_DEFINED
#define SOAP_TYPE__tds__GetServices_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetServices(struct soap*, const char*, int, const _tds__GetServices *, const char*);
SOAP_FMAC3 _tds__GetServices * SOAP_FMAC4 soap_in__tds__GetServices(struct soap*, const char*, _tds__GetServices *, const char*);
SOAP_FMAC1 _tds__GetServices * SOAP_FMAC2 soap_instantiate__tds__GetServices(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetServices * soap_new__tds__GetServices(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetServices(soap, n, NULL, NULL, NULL);
}

inline _tds__GetServices * soap_new_req__tds__GetServices(
	struct soap *soap,
	bool IncludeCapability)
{
	_tds__GetServices *_p = soap_new__tds__GetServices(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetServices::IncludeCapability = IncludeCapability;
	}
	return _p;
}

inline _tds__GetServices * soap_new_set__tds__GetServices(
	struct soap *soap,
	bool IncludeCapability)
{
	_tds__GetServices *_p = soap_new__tds__GetServices(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetServices::IncludeCapability = IncludeCapability;
	}
	return _p;
}

inline int soap_write__tds__GetServices(struct soap *soap, _tds__GetServices const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetServices", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetServices * SOAP_FMAC4 soap_get__tds__GetServices(struct soap*, _tds__GetServices *, const char*, const char*);

inline int soap_read__tds__GetServices(struct soap *soap, _tds__GetServices *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tds__GetServices(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tds__StorageConfiguration_DEFINED
#define SOAP_TYPE_tds__StorageConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tds__StorageConfiguration(struct soap*, const char*, int, const tds__StorageConfiguration *, const char*);
SOAP_FMAC3 tds__StorageConfiguration * SOAP_FMAC4 soap_in_tds__StorageConfiguration(struct soap*, const char*, tds__StorageConfiguration *, const char*);
SOAP_FMAC1 tds__StorageConfiguration * SOAP_FMAC2 soap_instantiate_tds__StorageConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tds__StorageConfiguration * soap_new_tds__StorageConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_tds__StorageConfiguration(soap, n, NULL, NULL, NULL);
}

inline tds__StorageConfiguration * soap_new_req_tds__StorageConfiguration(
	struct soap *soap,
	tds__StorageConfigurationData *Data,
	const std::string& token1)
{
	tds__StorageConfiguration *_p = soap_new_tds__StorageConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tds__StorageConfiguration::Data = Data;
		_p->tt__DeviceEntity::token = token1;
	}
	return _p;
}

inline tds__StorageConfiguration * soap_new_set_tds__StorageConfiguration(
	struct soap *soap,
	tds__StorageConfigurationData *Data,
	const std::string& token1,
	char *__item2)
{
	tds__StorageConfiguration *_p = soap_new_tds__StorageConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tds__StorageConfiguration::Data = Data;
		_p->tt__DeviceEntity::token = token1;
		_p->xsd__anyType::__item = __item2;
	}
	return _p;
}

inline int soap_write_tds__StorageConfiguration(struct soap *soap, tds__StorageConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:StorageConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tds__StorageConfiguration * SOAP_FMAC4 soap_get_tds__StorageConfiguration(struct soap*, tds__StorageConfiguration *, const char*, const char*);

inline int soap_read_tds__StorageConfiguration(struct soap *soap, tds__StorageConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tds__StorageConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tds__StorageConfigurationData_DEFINED
#define SOAP_TYPE_tds__StorageConfigurationData_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tds__StorageConfigurationData(struct soap*, const char*, int, const tds__StorageConfigurationData *, const char*);
SOAP_FMAC3 tds__StorageConfigurationData * SOAP_FMAC4 soap_in_tds__StorageConfigurationData(struct soap*, const char*, tds__StorageConfigurationData *, const char*);
SOAP_FMAC1 tds__StorageConfigurationData * SOAP_FMAC2 soap_instantiate_tds__StorageConfigurationData(struct soap*, int, const char*, const char*, size_t*);

inline tds__StorageConfigurationData * soap_new_tds__StorageConfigurationData(struct soap *soap, int n = -1)
{
	return soap_instantiate_tds__StorageConfigurationData(soap, n, NULL, NULL, NULL);
}

inline tds__StorageConfigurationData * soap_new_req_tds__StorageConfigurationData(
	struct soap *soap,
	const std::string& type)
{
	tds__StorageConfigurationData *_p = soap_new_tds__StorageConfigurationData(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tds__StorageConfigurationData::type = type;
	}
	return _p;
}

inline tds__StorageConfigurationData * soap_new_set_tds__StorageConfigurationData(
	struct soap *soap,
	std::string *LocalPath,
	std::string *StorageUri,
	tds__UserCredential *User,
	_tds__StorageConfigurationData_Extension *Extension,
	const std::string& type,
	char *__anyAttribute,
	char *__item1)
{
	tds__StorageConfigurationData *_p = soap_new_tds__StorageConfigurationData(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tds__StorageConfigurationData::LocalPath = LocalPath;
		_p->tds__StorageConfigurationData::StorageUri = StorageUri;
		_p->tds__StorageConfigurationData::User = User;
		_p->tds__StorageConfigurationData::Extension = Extension;
		_p->tds__StorageConfigurationData::type = type;
		_p->tds__StorageConfigurationData::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tds__StorageConfigurationData(struct soap *soap, tds__StorageConfigurationData const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:StorageConfigurationData", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tds__StorageConfigurationData * SOAP_FMAC4 soap_get_tds__StorageConfigurationData(struct soap*, tds__StorageConfigurationData *, const char*, const char*);

inline int soap_read_tds__StorageConfigurationData(struct soap *soap, tds__StorageConfigurationData *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tds__StorageConfigurationData(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tds__UserCredential_DEFINED
#define SOAP_TYPE_tds__UserCredential_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tds__UserCredential(struct soap*, const char*, int, const tds__UserCredential *, const char*);
SOAP_FMAC3 tds__UserCredential * SOAP_FMAC4 soap_in_tds__UserCredential(struct soap*, const char*, tds__UserCredential *, const char*);
SOAP_FMAC1 tds__UserCredential * SOAP_FMAC2 soap_instantiate_tds__UserCredential(struct soap*, int, const char*, const char*, size_t*);

inline tds__UserCredential * soap_new_tds__UserCredential(struct soap *soap, int n = -1)
{
	return soap_instantiate_tds__UserCredential(soap, n, NULL, NULL, NULL);
}

inline tds__UserCredential * soap_new_req_tds__UserCredential(
	struct soap *soap,
	const std::string& UserName)
{
	tds__UserCredential *_p = soap_new_tds__UserCredential(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tds__UserCredential::UserName = UserName;
	}
	return _p;
}

inline tds__UserCredential * soap_new_set_tds__UserCredential(
	struct soap *soap,
	const std::string& UserName,
	std::string *Password,
	_tds__UserCredential_Extension *Extension,
	char *__item1)
{
	tds__UserCredential *_p = soap_new_tds__UserCredential(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tds__UserCredential::UserName = UserName;
		_p->tds__UserCredential::Password = Password;
		_p->tds__UserCredential::Extension = Extension;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tds__UserCredential(struct soap *soap, tds__UserCredential const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:UserCredential", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tds__UserCredential * SOAP_FMAC4 soap_get_tds__UserCredential(struct soap*, tds__UserCredential *, const char*, const char*);

inline int soap_read_tds__UserCredential(struct soap *soap, tds__UserCredential *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tds__UserCredential(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tds__MiscCapabilities_DEFINED
#define SOAP_TYPE_tds__MiscCapabilities_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tds__MiscCapabilities(struct soap*, const char*, int, const tds__MiscCapabilities *, const char*);
SOAP_FMAC3 tds__MiscCapabilities * SOAP_FMAC4 soap_in_tds__MiscCapabilities(struct soap*, const char*, tds__MiscCapabilities *, const char*);
SOAP_FMAC1 tds__MiscCapabilities * SOAP_FMAC2 soap_instantiate_tds__MiscCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline tds__MiscCapabilities * soap_new_tds__MiscCapabilities(struct soap *soap, int n = -1)
{
	return soap_instantiate_tds__MiscCapabilities(soap, n, NULL, NULL, NULL);
}

inline tds__MiscCapabilities * soap_new_req_tds__MiscCapabilities(
	struct soap *soap)
{
	tds__MiscCapabilities *_p = soap_new_tds__MiscCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tds__MiscCapabilities * soap_new_set_tds__MiscCapabilities(
	struct soap *soap,
	std::string *AuxiliaryCommands,
	char *__anyAttribute,
	char *__item1)
{
	tds__MiscCapabilities *_p = soap_new_tds__MiscCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tds__MiscCapabilities::AuxiliaryCommands = AuxiliaryCommands;
		_p->tds__MiscCapabilities::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tds__MiscCapabilities(struct soap *soap, tds__MiscCapabilities const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:MiscCapabilities", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tds__MiscCapabilities * SOAP_FMAC4 soap_get_tds__MiscCapabilities(struct soap*, tds__MiscCapabilities *, const char*, const char*);

inline int soap_read_tds__MiscCapabilities(struct soap *soap, tds__MiscCapabilities *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tds__MiscCapabilities(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tds__SystemCapabilities_DEFINED
#define SOAP_TYPE_tds__SystemCapabilities_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tds__SystemCapabilities(struct soap*, const char*, int, const tds__SystemCapabilities *, const char*);
SOAP_FMAC3 tds__SystemCapabilities * SOAP_FMAC4 soap_in_tds__SystemCapabilities(struct soap*, const char*, tds__SystemCapabilities *, const char*);
SOAP_FMAC1 tds__SystemCapabilities * SOAP_FMAC2 soap_instantiate_tds__SystemCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline tds__SystemCapabilities * soap_new_tds__SystemCapabilities(struct soap *soap, int n = -1)
{
	return soap_instantiate_tds__SystemCapabilities(soap, n, NULL, NULL, NULL);
}

inline tds__SystemCapabilities * soap_new_req_tds__SystemCapabilities(
	struct soap *soap)
{
	tds__SystemCapabilities *_p = soap_new_tds__SystemCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tds__SystemCapabilities * soap_new_set_tds__SystemCapabilities(
	struct soap *soap,
	bool *DiscoveryResolve,
	bool *DiscoveryBye,
	bool *RemoteDiscovery,
	bool *SystemBackup,
	bool *SystemLogging,
	bool *FirmwareUpgrade,
	bool *HttpFirmwareUpgrade,
	bool *HttpSystemBackup,
	bool *HttpSystemLogging,
	bool *HttpSupportInformation,
	bool *StorageConfiguration,
	char *__anyAttribute,
	char *__item1)
{
	tds__SystemCapabilities *_p = soap_new_tds__SystemCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tds__SystemCapabilities::DiscoveryResolve = DiscoveryResolve;
		_p->tds__SystemCapabilities::DiscoveryBye = DiscoveryBye;
		_p->tds__SystemCapabilities::RemoteDiscovery = RemoteDiscovery;
		_p->tds__SystemCapabilities::SystemBackup = SystemBackup;
		_p->tds__SystemCapabilities::SystemLogging = SystemLogging;
		_p->tds__SystemCapabilities::FirmwareUpgrade = FirmwareUpgrade;
		_p->tds__SystemCapabilities::HttpFirmwareUpgrade = HttpFirmwareUpgrade;
		_p->tds__SystemCapabilities::HttpSystemBackup = HttpSystemBackup;
		_p->tds__SystemCapabilities::HttpSystemLogging = HttpSystemLogging;
		_p->tds__SystemCapabilities::HttpSupportInformation = HttpSupportInformation;
		_p->tds__SystemCapabilities::StorageConfiguration = StorageConfiguration;
		_p->tds__SystemCapabilities::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tds__SystemCapabilities(struct soap *soap, tds__SystemCapabilities const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SystemCapabilities", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tds__SystemCapabilities * SOAP_FMAC4 soap_get_tds__SystemCapabilities(struct soap*, tds__SystemCapabilities *, const char*, const char*);

inline int soap_read_tds__SystemCapabilities(struct soap *soap, tds__SystemCapabilities *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tds__SystemCapabilities(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tds__SecurityCapabilities_DEFINED
#define SOAP_TYPE_tds__SecurityCapabilities_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tds__SecurityCapabilities(struct soap*, const char*, int, const tds__SecurityCapabilities *, const char*);
SOAP_FMAC3 tds__SecurityCapabilities * SOAP_FMAC4 soap_in_tds__SecurityCapabilities(struct soap*, const char*, tds__SecurityCapabilities *, const char*);
SOAP_FMAC1 tds__SecurityCapabilities * SOAP_FMAC2 soap_instantiate_tds__SecurityCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline tds__SecurityCapabilities * soap_new_tds__SecurityCapabilities(struct soap *soap, int n = -1)
{
	return soap_instantiate_tds__SecurityCapabilities(soap, n, NULL, NULL, NULL);
}

inline tds__SecurityCapabilities * soap_new_req_tds__SecurityCapabilities(
	struct soap *soap)
{
	tds__SecurityCapabilities *_p = soap_new_tds__SecurityCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tds__SecurityCapabilities * soap_new_set_tds__SecurityCapabilities(
	struct soap *soap,
	bool *TLS1_x002e0,
	bool *TLS1_x002e1,
	bool *TLS1_x002e2,
	bool *OnboardKeyGeneration,
	bool *AccessPolicyConfig,
	bool *DefaultAccessPolicy,
	bool *Dot1X,
	bool *RemoteUserHandling,
	bool *X_x002e509Token,
	bool *SAMLToken,
	bool *KerberosToken,
	bool *UsernameToken,
	bool *HttpDigest,
	bool *RELToken,
	std::string *SupportedEAPMethods,
	int *MaxUsers,
	int *MaxUserNameLength,
	int *MaxPasswordLength,
	char *__anyAttribute,
	char *__item1)
{
	tds__SecurityCapabilities *_p = soap_new_tds__SecurityCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tds__SecurityCapabilities::TLS1_x002e0 = TLS1_x002e0;
		_p->tds__SecurityCapabilities::TLS1_x002e1 = TLS1_x002e1;
		_p->tds__SecurityCapabilities::TLS1_x002e2 = TLS1_x002e2;
		_p->tds__SecurityCapabilities::OnboardKeyGeneration = OnboardKeyGeneration;
		_p->tds__SecurityCapabilities::AccessPolicyConfig = AccessPolicyConfig;
		_p->tds__SecurityCapabilities::DefaultAccessPolicy = DefaultAccessPolicy;
		_p->tds__SecurityCapabilities::Dot1X = Dot1X;
		_p->tds__SecurityCapabilities::RemoteUserHandling = RemoteUserHandling;
		_p->tds__SecurityCapabilities::X_x002e509Token = X_x002e509Token;
		_p->tds__SecurityCapabilities::SAMLToken = SAMLToken;
		_p->tds__SecurityCapabilities::KerberosToken = KerberosToken;
		_p->tds__SecurityCapabilities::UsernameToken = UsernameToken;
		_p->tds__SecurityCapabilities::HttpDigest = HttpDigest;
		_p->tds__SecurityCapabilities::RELToken = RELToken;
		_p->tds__SecurityCapabilities::SupportedEAPMethods = SupportedEAPMethods;
		_p->tds__SecurityCapabilities::MaxUsers = MaxUsers;
		_p->tds__SecurityCapabilities::MaxUserNameLength = MaxUserNameLength;
		_p->tds__SecurityCapabilities::MaxPasswordLength = MaxPasswordLength;
		_p->tds__SecurityCapabilities::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tds__SecurityCapabilities(struct soap *soap, tds__SecurityCapabilities const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SecurityCapabilities", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tds__SecurityCapabilities * SOAP_FMAC4 soap_get_tds__SecurityCapabilities(struct soap*, tds__SecurityCapabilities *, const char*, const char*);

inline int soap_read_tds__SecurityCapabilities(struct soap *soap, tds__SecurityCapabilities *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tds__SecurityCapabilities(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tds__NetworkCapabilities_DEFINED
#define SOAP_TYPE_tds__NetworkCapabilities_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tds__NetworkCapabilities(struct soap*, const char*, int, const tds__NetworkCapabilities *, const char*);
SOAP_FMAC3 tds__NetworkCapabilities * SOAP_FMAC4 soap_in_tds__NetworkCapabilities(struct soap*, const char*, tds__NetworkCapabilities *, const char*);
SOAP_FMAC1 tds__NetworkCapabilities * SOAP_FMAC2 soap_instantiate_tds__NetworkCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline tds__NetworkCapabilities * soap_new_tds__NetworkCapabilities(struct soap *soap, int n = -1)
{
	return soap_instantiate_tds__NetworkCapabilities(soap, n, NULL, NULL, NULL);
}

inline tds__NetworkCapabilities * soap_new_req_tds__NetworkCapabilities(
	struct soap *soap)
{
	tds__NetworkCapabilities *_p = soap_new_tds__NetworkCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tds__NetworkCapabilities * soap_new_set_tds__NetworkCapabilities(
	struct soap *soap,
	bool *IPFilter,
	bool *ZeroConfiguration,
	bool *IPVersion6,
	bool *DynDNS,
	bool *Dot11Configuration,
	int *Dot1XConfigurations,
	bool *HostnameFromDHCP,
	int *NTP,
	bool *DHCPv6,
	char *__anyAttribute,
	char *__item1)
{
	tds__NetworkCapabilities *_p = soap_new_tds__NetworkCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tds__NetworkCapabilities::IPFilter = IPFilter;
		_p->tds__NetworkCapabilities::ZeroConfiguration = ZeroConfiguration;
		_p->tds__NetworkCapabilities::IPVersion6 = IPVersion6;
		_p->tds__NetworkCapabilities::DynDNS = DynDNS;
		_p->tds__NetworkCapabilities::Dot11Configuration = Dot11Configuration;
		_p->tds__NetworkCapabilities::Dot1XConfigurations = Dot1XConfigurations;
		_p->tds__NetworkCapabilities::HostnameFromDHCP = HostnameFromDHCP;
		_p->tds__NetworkCapabilities::NTP = NTP;
		_p->tds__NetworkCapabilities::DHCPv6 = DHCPv6;
		_p->tds__NetworkCapabilities::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tds__NetworkCapabilities(struct soap *soap, tds__NetworkCapabilities const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:NetworkCapabilities", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tds__NetworkCapabilities * SOAP_FMAC4 soap_get_tds__NetworkCapabilities(struct soap*, tds__NetworkCapabilities *, const char*, const char*);

inline int soap_read_tds__NetworkCapabilities(struct soap *soap, tds__NetworkCapabilities *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tds__NetworkCapabilities(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tds__DeviceServiceCapabilities_DEFINED
#define SOAP_TYPE_tds__DeviceServiceCapabilities_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tds__DeviceServiceCapabilities(struct soap*, const char*, int, const tds__DeviceServiceCapabilities *, const char*);
SOAP_FMAC3 tds__DeviceServiceCapabilities * SOAP_FMAC4 soap_in_tds__DeviceServiceCapabilities(struct soap*, const char*, tds__DeviceServiceCapabilities *, const char*);
SOAP_FMAC1 tds__DeviceServiceCapabilities * SOAP_FMAC2 soap_instantiate_tds__DeviceServiceCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline tds__DeviceServiceCapabilities * soap_new_tds__DeviceServiceCapabilities(struct soap *soap, int n = -1)
{
	return soap_instantiate_tds__DeviceServiceCapabilities(soap, n, NULL, NULL, NULL);
}

inline tds__DeviceServiceCapabilities * soap_new_req_tds__DeviceServiceCapabilities(
	struct soap *soap,
	tds__NetworkCapabilities *Network,
	tds__SecurityCapabilities *Security,
	tds__SystemCapabilities *System)
{
	tds__DeviceServiceCapabilities *_p = soap_new_tds__DeviceServiceCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tds__DeviceServiceCapabilities::Network = Network;
		_p->tds__DeviceServiceCapabilities::Security = Security;
		_p->tds__DeviceServiceCapabilities::System = System;
	}
	return _p;
}

inline tds__DeviceServiceCapabilities * soap_new_set_tds__DeviceServiceCapabilities(
	struct soap *soap,
	tds__NetworkCapabilities *Network,
	tds__SecurityCapabilities *Security,
	tds__SystemCapabilities *System,
	tds__MiscCapabilities *Misc,
	char *__item1)
{
	tds__DeviceServiceCapabilities *_p = soap_new_tds__DeviceServiceCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tds__DeviceServiceCapabilities::Network = Network;
		_p->tds__DeviceServiceCapabilities::Security = Security;
		_p->tds__DeviceServiceCapabilities::System = System;
		_p->tds__DeviceServiceCapabilities::Misc = Misc;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tds__DeviceServiceCapabilities(struct soap *soap, tds__DeviceServiceCapabilities const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:DeviceServiceCapabilities", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tds__DeviceServiceCapabilities * SOAP_FMAC4 soap_get_tds__DeviceServiceCapabilities(struct soap*, tds__DeviceServiceCapabilities *, const char*, const char*);

inline int soap_read_tds__DeviceServiceCapabilities(struct soap *soap, tds__DeviceServiceCapabilities *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tds__DeviceServiceCapabilities(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tds__Service_DEFINED
#define SOAP_TYPE_tds__Service_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tds__Service(struct soap*, const char*, int, const tds__Service *, const char*);
SOAP_FMAC3 tds__Service * SOAP_FMAC4 soap_in_tds__Service(struct soap*, const char*, tds__Service *, const char*);
SOAP_FMAC1 tds__Service * SOAP_FMAC2 soap_instantiate_tds__Service(struct soap*, int, const char*, const char*, size_t*);

inline tds__Service * soap_new_tds__Service(struct soap *soap, int n = -1)
{
	return soap_instantiate_tds__Service(soap, n, NULL, NULL, NULL);
}

inline tds__Service * soap_new_req_tds__Service(
	struct soap *soap,
	const std::string& Namespace,
	const std::string& XAddr,
	tt__OnvifVersion *Version)
{
	tds__Service *_p = soap_new_tds__Service(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tds__Service::Namespace = Namespace;
		_p->tds__Service::XAddr = XAddr;
		_p->tds__Service::Version = Version;
	}
	return _p;
}

inline tds__Service * soap_new_set_tds__Service(
	struct soap *soap,
	const std::string& Namespace,
	const std::string& XAddr,
	_tds__Service_Capabilities *Capabilities,
	tt__OnvifVersion *Version,
	const std::vector<char *> & __any,
	char *__anyAttribute,
	char *__item1)
{
	tds__Service *_p = soap_new_tds__Service(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tds__Service::Namespace = Namespace;
		_p->tds__Service::XAddr = XAddr;
		_p->tds__Service::Capabilities = Capabilities;
		_p->tds__Service::Version = Version;
		_p->tds__Service::__any = __any;
		_p->tds__Service::__anyAttribute = __anyAttribute;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_tds__Service(struct soap *soap, tds__Service const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:Service", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 tds__Service * SOAP_FMAC4 soap_get_tds__Service(struct soap*, tds__Service *, const char*, const char*);

inline int soap_read_tds__Service(struct soap *soap, tds__Service *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_tds__Service(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif
/* _xml__lang is a typedef synonym for std__string */

#ifndef SOAP_TYPE__xml__lang_DEFINED
#define SOAP_TYPE__xml__lang_DEFINED

#define soap_default__xml__lang(soap, a) soap_default_std__string(soap, a)


#define soap_serialize__xml__lang soap_serialize_std__string


#define soap__xml__lang2s soap_std__string2s


#define soap_out__xml__lang soap_out_std__string


#define soap_s2_xml__lang soap_s2std__string


#define soap_in__xml__lang soap_in_std__string


#define soap_instantiate__xml__lang soap_instantiate_std__string


#define soap_new__xml__lang soap_new_std__string


#define soap_put__xml__lang soap_put_std__string


#define soap_write__xml__lang soap_write_std__string


#define soap_get__xml__lang soap_get_std__string


#define soap_read__xml__lang soap_read_std__string

#endif

#ifndef SOAP_TYPE_xsd__token__DEFINED
#define SOAP_TYPE_xsd__token__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__token_(struct soap*, const char*, int, const xsd__token_ *, const char*);
SOAP_FMAC3 xsd__token_ * SOAP_FMAC4 soap_in_xsd__token_(struct soap*, const char*, xsd__token_ *, const char*);
SOAP_FMAC1 xsd__token_ * SOAP_FMAC2 soap_instantiate_xsd__token_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__token_ * soap_new_xsd__token_(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__token_(soap, n, NULL, NULL, NULL);
}

inline xsd__token_ * soap_new_req_xsd__token_(
	struct soap *soap,
	const std::string& __item)
{
	xsd__token_ *_p = soap_new_xsd__token_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__token_::__item = __item;
	}
	return _p;
}

inline xsd__token_ * soap_new_set_xsd__token_(
	struct soap *soap,
	const std::string& __item,
	char *__item1)
{
	xsd__token_ *_p = soap_new_xsd__token_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__token_::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_xsd__token_(struct soap *soap, xsd__token_ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:token", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 xsd__token_ * SOAP_FMAC4 soap_get_xsd__token_(struct soap*, xsd__token_ *, const char*, const char*);

inline int soap_read_xsd__token_(struct soap *soap, xsd__token_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__token_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__token_DEFINED
#define SOAP_TYPE_xsd__token_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__token(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__token(struct soap*, const std::string *);

#define soap_xsd__token2s soap_std__string2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__token(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__token soap_s2std__string

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__token(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_xsd__token soap_instantiate_std__string


#define soap_new_xsd__token soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__token(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_xsd__token(struct soap *soap, std::string const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_xsd__token(soap, p, "xsd:token", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__token(struct soap*, std::string *, const char*, const char*);

inline int soap_read_xsd__token(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_xsd__token(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__string_DEFINED
#define SOAP_TYPE_xsd__string_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__string(struct soap*, const char*, int, const xsd__string *, const char*);
SOAP_FMAC3 xsd__string * SOAP_FMAC4 soap_in_xsd__string(struct soap*, const char*, xsd__string *, const char*);
SOAP_FMAC1 xsd__string * SOAP_FMAC2 soap_instantiate_xsd__string(struct soap*, int, const char*, const char*, size_t*);

inline xsd__string * soap_new_xsd__string(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__string(soap, n, NULL, NULL, NULL);
}

inline xsd__string * soap_new_req_xsd__string(
	struct soap *soap,
	const std::string& __item)
{
	xsd__string *_p = soap_new_xsd__string(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__string::__item = __item;
	}
	return _p;
}

inline xsd__string * soap_new_set_xsd__string(
	struct soap *soap,
	const std::string& __item,
	char *__item1)
{
	xsd__string *_p = soap_new_xsd__string(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__string::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_xsd__string(struct soap *soap, xsd__string const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 xsd__string * SOAP_FMAC4 soap_get_xsd__string(struct soap*, xsd__string *, const char*, const char*);

inline int soap_read_xsd__string(struct soap *soap, xsd__string *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__nonNegativeInteger__DEFINED
#define SOAP_TYPE_xsd__nonNegativeInteger__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__nonNegativeInteger_(struct soap*, const char*, int, const xsd__nonNegativeInteger_ *, const char*);
SOAP_FMAC3 xsd__nonNegativeInteger_ * SOAP_FMAC4 soap_in_xsd__nonNegativeInteger_(struct soap*, const char*, xsd__nonNegativeInteger_ *, const char*);
SOAP_FMAC1 xsd__nonNegativeInteger_ * SOAP_FMAC2 soap_instantiate_xsd__nonNegativeInteger_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__nonNegativeInteger_ * soap_new_xsd__nonNegativeInteger_(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__nonNegativeInteger_(soap, n, NULL, NULL, NULL);
}

inline xsd__nonNegativeInteger_ * soap_new_req_xsd__nonNegativeInteger_(
	struct soap *soap,
	const std::string& __item)
{
	xsd__nonNegativeInteger_ *_p = soap_new_xsd__nonNegativeInteger_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__nonNegativeInteger_::__item = __item;
	}
	return _p;
}

inline xsd__nonNegativeInteger_ * soap_new_set_xsd__nonNegativeInteger_(
	struct soap *soap,
	const std::string& __item,
	char *__item1)
{
	xsd__nonNegativeInteger_ *_p = soap_new_xsd__nonNegativeInteger_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__nonNegativeInteger_::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_xsd__nonNegativeInteger_(struct soap *soap, xsd__nonNegativeInteger_ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:nonNegativeInteger", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 xsd__nonNegativeInteger_ * SOAP_FMAC4 soap_get_xsd__nonNegativeInteger_(struct soap*, xsd__nonNegativeInteger_ *, const char*, const char*);

inline int soap_read_xsd__nonNegativeInteger_(struct soap *soap, xsd__nonNegativeInteger_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__nonNegativeInteger_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__nonNegativeInteger_DEFINED
#define SOAP_TYPE_xsd__nonNegativeInteger_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__nonNegativeInteger(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__nonNegativeInteger(struct soap*, const std::string *);

#define soap_xsd__nonNegativeInteger2s soap_std__string2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__nonNegativeInteger(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__nonNegativeInteger soap_s2std__string

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__nonNegativeInteger(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_xsd__nonNegativeInteger soap_instantiate_std__string


#define soap_new_xsd__nonNegativeInteger soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__nonNegativeInteger(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_xsd__nonNegativeInteger(struct soap *soap, std::string const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_xsd__nonNegativeInteger(soap, p, "xsd:nonNegativeInteger", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__nonNegativeInteger(struct soap*, std::string *, const char*, const char*);

inline int soap_read_xsd__nonNegativeInteger(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_xsd__nonNegativeInteger(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__integer__DEFINED
#define SOAP_TYPE_xsd__integer__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__integer_(struct soap*, const char*, int, const xsd__integer_ *, const char*);
SOAP_FMAC3 xsd__integer_ * SOAP_FMAC4 soap_in_xsd__integer_(struct soap*, const char*, xsd__integer_ *, const char*);
SOAP_FMAC1 xsd__integer_ * SOAP_FMAC2 soap_instantiate_xsd__integer_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__integer_ * soap_new_xsd__integer_(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__integer_(soap, n, NULL, NULL, NULL);
}

inline xsd__integer_ * soap_new_req_xsd__integer_(
	struct soap *soap,
	const std::string& __item)
{
	xsd__integer_ *_p = soap_new_xsd__integer_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__integer_::__item = __item;
	}
	return _p;
}

inline xsd__integer_ * soap_new_set_xsd__integer_(
	struct soap *soap,
	const std::string& __item,
	char *__item1)
{
	xsd__integer_ *_p = soap_new_xsd__integer_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__integer_::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_xsd__integer_(struct soap *soap, xsd__integer_ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:integer", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 xsd__integer_ * SOAP_FMAC4 soap_get_xsd__integer_(struct soap*, xsd__integer_ *, const char*, const char*);

inline int soap_read_xsd__integer_(struct soap *soap, xsd__integer_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__integer_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__integer_DEFINED
#define SOAP_TYPE_xsd__integer_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__integer(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__integer(struct soap*, const std::string *);

#define soap_xsd__integer2s soap_std__string2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__integer(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__integer soap_s2std__string

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__integer(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_xsd__integer soap_instantiate_std__string


#define soap_new_xsd__integer soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__integer(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_xsd__integer(struct soap *soap, std::string const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_xsd__integer(soap, p, "xsd:integer", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__integer(struct soap*, std::string *, const char*, const char*);

inline int soap_read_xsd__integer(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_xsd__integer(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__int_DEFINED
#define SOAP_TYPE_xsd__int_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__int(struct soap*, const char*, int, const xsd__int *, const char*);
SOAP_FMAC3 xsd__int * SOAP_FMAC4 soap_in_xsd__int(struct soap*, const char*, xsd__int *, const char*);
SOAP_FMAC1 xsd__int * SOAP_FMAC2 soap_instantiate_xsd__int(struct soap*, int, const char*, const char*, size_t*);

inline xsd__int * soap_new_xsd__int(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__int(soap, n, NULL, NULL, NULL);
}

inline xsd__int * soap_new_req_xsd__int(
	struct soap *soap,
	int __item)
{
	xsd__int *_p = soap_new_xsd__int(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__int::__item = __item;
	}
	return _p;
}

inline xsd__int * soap_new_set_xsd__int(
	struct soap *soap,
	int __item,
	char *__item1)
{
	xsd__int *_p = soap_new_xsd__int(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__int::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_xsd__int(struct soap *soap, xsd__int const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:int", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 xsd__int * SOAP_FMAC4 soap_get_xsd__int(struct soap*, xsd__int *, const char*, const char*);

inline int soap_read_xsd__int(struct soap *soap, xsd__int *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__int(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__hexBinary__DEFINED
#define SOAP_TYPE_xsd__hexBinary__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__hexBinary_(struct soap*, const char*, int, const xsd__hexBinary_ *, const char*);
SOAP_FMAC3 xsd__hexBinary_ * SOAP_FMAC4 soap_in_xsd__hexBinary_(struct soap*, const char*, xsd__hexBinary_ *, const char*);
SOAP_FMAC1 xsd__hexBinary_ * SOAP_FMAC2 soap_instantiate_xsd__hexBinary_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__hexBinary_ * soap_new_xsd__hexBinary_(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__hexBinary_(soap, n, NULL, NULL, NULL);
}

inline xsd__hexBinary_ * soap_new_req_xsd__hexBinary_(
	struct soap *soap,
	const xsd__hexBinary& __item)
{
	xsd__hexBinary_ *_p = soap_new_xsd__hexBinary_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__hexBinary_::__item = __item;
	}
	return _p;
}

inline xsd__hexBinary_ * soap_new_set_xsd__hexBinary_(
	struct soap *soap,
	const xsd__hexBinary& __item,
	char *__item1)
{
	xsd__hexBinary_ *_p = soap_new_xsd__hexBinary_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__hexBinary_::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_xsd__hexBinary_(struct soap *soap, xsd__hexBinary_ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:hexBinary", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 xsd__hexBinary_ * SOAP_FMAC4 soap_get_xsd__hexBinary_(struct soap*, xsd__hexBinary_ *, const char*, const char*);

inline int soap_read_xsd__hexBinary_(struct soap *soap, xsd__hexBinary_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__hexBinary_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__float_DEFINED
#define SOAP_TYPE_xsd__float_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__float(struct soap*, const char*, int, const xsd__float *, const char*);
SOAP_FMAC3 xsd__float * SOAP_FMAC4 soap_in_xsd__float(struct soap*, const char*, xsd__float *, const char*);
SOAP_FMAC1 xsd__float * SOAP_FMAC2 soap_instantiate_xsd__float(struct soap*, int, const char*, const char*, size_t*);

inline xsd__float * soap_new_xsd__float(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__float(soap, n, NULL, NULL, NULL);
}

inline xsd__float * soap_new_req_xsd__float(
	struct soap *soap,
	float __item)
{
	xsd__float *_p = soap_new_xsd__float(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__float::__item = __item;
	}
	return _p;
}

inline xsd__float * soap_new_set_xsd__float(
	struct soap *soap,
	float __item,
	char *__item1)
{
	xsd__float *_p = soap_new_xsd__float(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__float::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_xsd__float(struct soap *soap, xsd__float const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:float", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 xsd__float * SOAP_FMAC4 soap_get_xsd__float(struct soap*, xsd__float *, const char*, const char*);

inline int soap_read_xsd__float(struct soap *soap, xsd__float *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__float(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__duration__DEFINED
#define SOAP_TYPE_xsd__duration__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__duration_(struct soap*, const char*, int, const xsd__duration_ *, const char*);
SOAP_FMAC3 xsd__duration_ * SOAP_FMAC4 soap_in_xsd__duration_(struct soap*, const char*, xsd__duration_ *, const char*);
SOAP_FMAC1 xsd__duration_ * SOAP_FMAC2 soap_instantiate_xsd__duration_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__duration_ * soap_new_xsd__duration_(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__duration_(soap, n, NULL, NULL, NULL);
}

inline xsd__duration_ * soap_new_req_xsd__duration_(
	struct soap *soap,
	LONG64 __item)
{
	xsd__duration_ *_p = soap_new_xsd__duration_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__duration_::__item = __item;
	}
	return _p;
}

inline xsd__duration_ * soap_new_set_xsd__duration_(
	struct soap *soap,
	LONG64 __item,
	char *__item1)
{
	xsd__duration_ *_p = soap_new_xsd__duration_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__duration_::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_xsd__duration_(struct soap *soap, xsd__duration_ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:duration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 xsd__duration_ * SOAP_FMAC4 soap_get_xsd__duration_(struct soap*, xsd__duration_ *, const char*, const char*);

inline int soap_read_xsd__duration_(struct soap *soap, xsd__duration_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__duration_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__dateTime_DEFINED
#define SOAP_TYPE_xsd__dateTime_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__dateTime(struct soap*, const char*, int, const xsd__dateTime *, const char*);
SOAP_FMAC3 xsd__dateTime * SOAP_FMAC4 soap_in_xsd__dateTime(struct soap*, const char*, xsd__dateTime *, const char*);
SOAP_FMAC1 xsd__dateTime * SOAP_FMAC2 soap_instantiate_xsd__dateTime(struct soap*, int, const char*, const char*, size_t*);

inline xsd__dateTime * soap_new_xsd__dateTime(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__dateTime(soap, n, NULL, NULL, NULL);
}

inline xsd__dateTime * soap_new_req_xsd__dateTime(
	struct soap *soap,
	time_t __item)
{
	xsd__dateTime *_p = soap_new_xsd__dateTime(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__dateTime::__item = __item;
	}
	return _p;
}

inline xsd__dateTime * soap_new_set_xsd__dateTime(
	struct soap *soap,
	time_t __item,
	char *__item1)
{
	xsd__dateTime *_p = soap_new_xsd__dateTime(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__dateTime::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_xsd__dateTime(struct soap *soap, xsd__dateTime const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:dateTime", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 xsd__dateTime * SOAP_FMAC4 soap_get_xsd__dateTime(struct soap*, xsd__dateTime *, const char*, const char*);

inline int soap_read_xsd__dateTime(struct soap *soap, xsd__dateTime *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__dateTime(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__boolean_DEFINED
#define SOAP_TYPE_xsd__boolean_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__boolean(struct soap*, const char*, int, const xsd__boolean *, const char*);
SOAP_FMAC3 xsd__boolean * SOAP_FMAC4 soap_in_xsd__boolean(struct soap*, const char*, xsd__boolean *, const char*);
SOAP_FMAC1 xsd__boolean * SOAP_FMAC2 soap_instantiate_xsd__boolean(struct soap*, int, const char*, const char*, size_t*);

inline xsd__boolean * soap_new_xsd__boolean(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__boolean(soap, n, NULL, NULL, NULL);
}

inline xsd__boolean * soap_new_req_xsd__boolean(
	struct soap *soap,
	bool __item)
{
	xsd__boolean *_p = soap_new_xsd__boolean(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__boolean::__item = __item;
	}
	return _p;
}

inline xsd__boolean * soap_new_set_xsd__boolean(
	struct soap *soap,
	bool __item,
	char *__item1)
{
	xsd__boolean *_p = soap_new_xsd__boolean(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__boolean::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_xsd__boolean(struct soap *soap, xsd__boolean const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:boolean", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 xsd__boolean * SOAP_FMAC4 soap_get_xsd__boolean(struct soap*, xsd__boolean *, const char*, const char*);

inline int soap_read_xsd__boolean(struct soap *soap, xsd__boolean *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__boolean(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__base64Binary__DEFINED
#define SOAP_TYPE_xsd__base64Binary__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__base64Binary_(struct soap*, const char*, int, const xsd__base64Binary_ *, const char*);
SOAP_FMAC3 xsd__base64Binary_ * SOAP_FMAC4 soap_in_xsd__base64Binary_(struct soap*, const char*, xsd__base64Binary_ *, const char*);
SOAP_FMAC1 xsd__base64Binary_ * SOAP_FMAC2 soap_instantiate_xsd__base64Binary_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__base64Binary_ * soap_new_xsd__base64Binary_(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__base64Binary_(soap, n, NULL, NULL, NULL);
}

inline xsd__base64Binary_ * soap_new_req_xsd__base64Binary_(
	struct soap *soap,
	const xsd__base64Binary& __item)
{
	xsd__base64Binary_ *_p = soap_new_xsd__base64Binary_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__base64Binary_::__item = __item;
	}
	return _p;
}

inline xsd__base64Binary_ * soap_new_set_xsd__base64Binary_(
	struct soap *soap,
	const xsd__base64Binary& __item,
	char *__item1)
{
	xsd__base64Binary_ *_p = soap_new_xsd__base64Binary_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__base64Binary_::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_xsd__base64Binary_(struct soap *soap, xsd__base64Binary_ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:base64Binary", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 xsd__base64Binary_ * SOAP_FMAC4 soap_get_xsd__base64Binary_(struct soap*, xsd__base64Binary_ *, const char*, const char*);

inline int soap_read_xsd__base64Binary_(struct soap *soap, xsd__base64Binary_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__base64Binary_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__anyURI__DEFINED
#define SOAP_TYPE_xsd__anyURI__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyURI_(struct soap*, const char*, int, const xsd__anyURI_ *, const char*);
SOAP_FMAC3 xsd__anyURI_ * SOAP_FMAC4 soap_in_xsd__anyURI_(struct soap*, const char*, xsd__anyURI_ *, const char*);
SOAP_FMAC1 xsd__anyURI_ * SOAP_FMAC2 soap_instantiate_xsd__anyURI_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__anyURI_ * soap_new_xsd__anyURI_(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__anyURI_(soap, n, NULL, NULL, NULL);
}

inline xsd__anyURI_ * soap_new_req_xsd__anyURI_(
	struct soap *soap,
	const std::string& __item)
{
	xsd__anyURI_ *_p = soap_new_xsd__anyURI_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__anyURI_::__item = __item;
	}
	return _p;
}

inline xsd__anyURI_ * soap_new_set_xsd__anyURI_(
	struct soap *soap,
	const std::string& __item,
	char *__item1)
{
	xsd__anyURI_ *_p = soap_new_xsd__anyURI_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__anyURI_::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_xsd__anyURI_(struct soap *soap, xsd__anyURI_ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:anyURI", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 xsd__anyURI_ * SOAP_FMAC4 soap_get_xsd__anyURI_(struct soap*, xsd__anyURI_ *, const char*, const char*);

inline int soap_read_xsd__anyURI_(struct soap *soap, xsd__anyURI_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__anyURI_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__anyURI_DEFINED
#define SOAP_TYPE_xsd__anyURI_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__anyURI(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__anyURI(struct soap*, const std::string *);

#define soap_xsd__anyURI2s soap_std__string2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyURI(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__anyURI soap_s2std__string

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__anyURI(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_xsd__anyURI soap_instantiate_std__string


#define soap_new_xsd__anyURI soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__anyURI(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_xsd__anyURI(struct soap *soap, std::string const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_xsd__anyURI(soap, p, "xsd:anyURI", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__anyURI(struct soap*, std::string *, const char*, const char*);

inline int soap_read_xsd__anyURI(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_xsd__anyURI(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__anySimpleType__DEFINED
#define SOAP_TYPE_xsd__anySimpleType__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anySimpleType_(struct soap*, const char*, int, const xsd__anySimpleType_ *, const char*);
SOAP_FMAC3 xsd__anySimpleType_ * SOAP_FMAC4 soap_in_xsd__anySimpleType_(struct soap*, const char*, xsd__anySimpleType_ *, const char*);
SOAP_FMAC1 xsd__anySimpleType_ * SOAP_FMAC2 soap_instantiate_xsd__anySimpleType_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__anySimpleType_ * soap_new_xsd__anySimpleType_(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__anySimpleType_(soap, n, NULL, NULL, NULL);
}

inline xsd__anySimpleType_ * soap_new_req_xsd__anySimpleType_(
	struct soap *soap,
	const std::string& __item)
{
	xsd__anySimpleType_ *_p = soap_new_xsd__anySimpleType_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__anySimpleType_::__item = __item;
	}
	return _p;
}

inline xsd__anySimpleType_ * soap_new_set_xsd__anySimpleType_(
	struct soap *soap,
	const std::string& __item,
	char *__item1)
{
	xsd__anySimpleType_ *_p = soap_new_xsd__anySimpleType_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__anySimpleType_::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_xsd__anySimpleType_(struct soap *soap, xsd__anySimpleType_ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:anySimpleType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 xsd__anySimpleType_ * SOAP_FMAC4 soap_get_xsd__anySimpleType_(struct soap*, xsd__anySimpleType_ *, const char*, const char*);

inline int soap_read_xsd__anySimpleType_(struct soap *soap, xsd__anySimpleType_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__anySimpleType_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__anySimpleType_DEFINED
#define SOAP_TYPE_xsd__anySimpleType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__anySimpleType(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__anySimpleType(struct soap*, const std::string *);

#define soap_xsd__anySimpleType2s soap_std__string2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anySimpleType(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__anySimpleType soap_s2std__string

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__anySimpleType(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_xsd__anySimpleType soap_instantiate_std__string


#define soap_new_xsd__anySimpleType soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__anySimpleType(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_xsd__anySimpleType(struct soap *soap, std::string const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_xsd__anySimpleType(soap, p, "xsd:anySimpleType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__anySimpleType(struct soap*, std::string *, const char*, const char*);

inline int soap_read_xsd__anySimpleType(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_xsd__anySimpleType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__QName__DEFINED
#define SOAP_TYPE_xsd__QName__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__QName_(struct soap*, const char*, int, const xsd__QName_ *, const char*);
SOAP_FMAC3 xsd__QName_ * SOAP_FMAC4 soap_in_xsd__QName_(struct soap*, const char*, xsd__QName_ *, const char*);
SOAP_FMAC1 xsd__QName_ * SOAP_FMAC2 soap_instantiate_xsd__QName_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__QName_ * soap_new_xsd__QName_(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__QName_(soap, n, NULL, NULL, NULL);
}

inline xsd__QName_ * soap_new_req_xsd__QName_(
	struct soap *soap,
	const std::string& __item)
{
	xsd__QName_ *_p = soap_new_xsd__QName_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__QName_::__item = __item;
	}
	return _p;
}

inline xsd__QName_ * soap_new_set_xsd__QName_(
	struct soap *soap,
	const std::string& __item,
	char *__item1)
{
	xsd__QName_ *_p = soap_new_xsd__QName_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__QName_::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_xsd__QName_(struct soap *soap, xsd__QName_ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:QName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 xsd__QName_ * SOAP_FMAC4 soap_get_xsd__QName_(struct soap*, xsd__QName_ *, const char*, const char*);

inline int soap_read_xsd__QName_(struct soap *soap, xsd__QName_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__QName_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__NCName__DEFINED
#define SOAP_TYPE_xsd__NCName__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__NCName_(struct soap*, const char*, int, const xsd__NCName_ *, const char*);
SOAP_FMAC3 xsd__NCName_ * SOAP_FMAC4 soap_in_xsd__NCName_(struct soap*, const char*, xsd__NCName_ *, const char*);
SOAP_FMAC1 xsd__NCName_ * SOAP_FMAC2 soap_instantiate_xsd__NCName_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__NCName_ * soap_new_xsd__NCName_(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__NCName_(soap, n, NULL, NULL, NULL);
}

inline xsd__NCName_ * soap_new_req_xsd__NCName_(
	struct soap *soap,
	const std::string& __item)
{
	xsd__NCName_ *_p = soap_new_xsd__NCName_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__NCName_::__item = __item;
	}
	return _p;
}

inline xsd__NCName_ * soap_new_set_xsd__NCName_(
	struct soap *soap,
	const std::string& __item,
	char *__item1)
{
	xsd__NCName_ *_p = soap_new_xsd__NCName_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__NCName_::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_xsd__NCName_(struct soap *soap, xsd__NCName_ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:NCName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 xsd__NCName_ * SOAP_FMAC4 soap_get_xsd__NCName_(struct soap*, xsd__NCName_ *, const char*, const char*);

inline int soap_read_xsd__NCName_(struct soap *soap, xsd__NCName_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__NCName_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__NCName_DEFINED
#define SOAP_TYPE_xsd__NCName_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__NCName(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__NCName(struct soap*, const std::string *);

#define soap_xsd__NCName2s soap_std__string2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__NCName(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__NCName soap_s2std__string

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__NCName(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_xsd__NCName soap_instantiate_std__string


#define soap_new_xsd__NCName soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__NCName(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_xsd__NCName(struct soap *soap, std::string const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_xsd__NCName(soap, p, "xsd:NCName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__NCName(struct soap*, std::string *, const char*, const char*);

inline int soap_read_xsd__NCName(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_xsd__NCName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__hexBinary_DEFINED
#define SOAP_TYPE_xsd__hexBinary_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__hexBinary(struct soap*, const char*, int, const xsd__hexBinary *, const char*);
SOAP_FMAC3 xsd__hexBinary * SOAP_FMAC4 soap_in_xsd__hexBinary(struct soap*, const char*, xsd__hexBinary *, const char*);
SOAP_FMAC1 xsd__hexBinary * SOAP_FMAC2 soap_instantiate_xsd__hexBinary(struct soap*, int, const char*, const char*, size_t*);

inline xsd__hexBinary * soap_new_xsd__hexBinary(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__hexBinary(soap, n, NULL, NULL, NULL);
}

inline xsd__hexBinary * soap_new_req_xsd__hexBinary(
	struct soap *soap)
{
	xsd__hexBinary *_p = soap_new_xsd__hexBinary(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline xsd__hexBinary * soap_new_set_xsd__hexBinary(
	struct soap *soap,
	unsigned char *__ptr,
	int __size)
{
	xsd__hexBinary *_p = soap_new_xsd__hexBinary(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__hexBinary::__ptr = __ptr;
		_p->xsd__hexBinary::__size = __size;
	}
	return _p;
}

inline int soap_write_xsd__hexBinary(struct soap *soap, xsd__hexBinary const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:hexBinary", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 xsd__hexBinary * SOAP_FMAC4 soap_get_xsd__hexBinary(struct soap*, xsd__hexBinary *, const char*, const char*);

inline int soap_read_xsd__hexBinary(struct soap *soap, xsd__hexBinary *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__hexBinary(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__base64Binary_DEFINED
#define SOAP_TYPE_xsd__base64Binary_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__base64Binary(struct soap*, const char*, int, const xsd__base64Binary *, const char*);
SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_in_xsd__base64Binary(struct soap*, const char*, xsd__base64Binary *, const char*);
SOAP_FMAC1 xsd__base64Binary * SOAP_FMAC2 soap_instantiate_xsd__base64Binary(struct soap*, int, const char*, const char*, size_t*);

inline xsd__base64Binary * soap_new_xsd__base64Binary(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__base64Binary(soap, n, NULL, NULL, NULL);
}

inline xsd__base64Binary * soap_new_req_xsd__base64Binary(
	struct soap *soap)
{
	xsd__base64Binary *_p = soap_new_xsd__base64Binary(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline xsd__base64Binary * soap_new_set_xsd__base64Binary(
	struct soap *soap,
	unsigned char *__ptr,
	int __size,
	char *id,
	char *type,
	char *options)
{
	xsd__base64Binary *_p = soap_new_xsd__base64Binary(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__base64Binary::__ptr = __ptr;
		_p->xsd__base64Binary::__size = __size;
		_p->xsd__base64Binary::id = id;
		_p->xsd__base64Binary::type = type;
		_p->xsd__base64Binary::options = options;
	}
	return _p;
}

inline int soap_write_xsd__base64Binary(struct soap *soap, xsd__base64Binary const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:base64Binary", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_get_xsd__base64Binary(struct soap*, xsd__base64Binary *, const char*, const char*);

inline int soap_read_xsd__base64Binary(struct soap *soap, xsd__base64Binary *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__base64Binary(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__QName_DEFINED
#define SOAP_TYPE_xsd__QName_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__QName(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__QName(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__QName(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__QName(struct soap*, const char*, std::string*, const char*);
SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_xsd__QName(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_xsd__QName(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__QName(soap, n, NULL, NULL, NULL);
}

inline std::string * soap_new_req_xsd__QName(
	struct soap *soap)
{
	std::string *_p = soap_new_xsd__QName(soap);
	if (_p)
	{	soap_default_xsd__QName(soap, _p);
	}
	return _p;
}

inline std::string * soap_new_set_xsd__QName(
	struct soap *soap)
{
	std::string *_p = soap_new_xsd__QName(soap);
	if (_p)
	{	soap_default_xsd__QName(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__QName(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_xsd__QName(struct soap *soap, std::string const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_xsd__QName(soap, p, "xsd:QName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__QName(struct soap*, std::string *, const char*, const char*);

inline int soap_read_xsd__QName(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_xsd__QName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_std__string_DEFINED
#define SOAP_TYPE_std__string_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);
SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__string(soap, n, NULL, NULL, NULL);
}

inline std::string * soap_new_req_std__string(
	struct soap *soap)
{
	std::string *_p = soap_new_std__string(soap);
	if (_p)
	{	soap_default_std__string(soap, _p);
	}
	return _p;
}

inline std::string * soap_new_set_std__string(
	struct soap *soap)
{
	std::string *_p = soap_new_std__string(soap);
	if (_p)
	{	soap_default_std__string(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_std__string(struct soap *soap, std::string const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

inline int soap_read_std__string(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_std__string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__anyType_DEFINED
#define SOAP_TYPE_xsd__anyType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyType(struct soap*, const char*, int, const xsd__anyType *, const char*);
SOAP_FMAC3 xsd__anyType * SOAP_FMAC4 soap_in_xsd__anyType(struct soap*, const char*, xsd__anyType *, const char*);
SOAP_FMAC1 xsd__anyType * SOAP_FMAC2 soap_instantiate_xsd__anyType(struct soap*, int, const char*, const char*, size_t*);

inline xsd__anyType * soap_new_xsd__anyType(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__anyType(soap, n, NULL, NULL, NULL);
}

inline xsd__anyType * soap_new_req_xsd__anyType(
	struct soap *soap)
{
	xsd__anyType *_p = soap_new_xsd__anyType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline xsd__anyType * soap_new_set_xsd__anyType(
	struct soap *soap,
	char *__item)
{
	xsd__anyType *_p = soap_new_xsd__anyType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__anyType::__item = __item;
	}
	return _p;
}

inline int soap_write_xsd__anyType(struct soap *soap, xsd__anyType const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:anyType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 xsd__anyType * SOAP_FMAC4 soap_get_xsd__anyType(struct soap*, xsd__anyType *, const char*, const char*);

inline int soap_read_xsd__anyType(struct soap *soap, xsd__anyType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__anyType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___trt__DeleteOSD_DEFINED
#define SOAP_TYPE___trt__DeleteOSD_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__DeleteOSD(struct soap*, struct __trt__DeleteOSD *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__DeleteOSD(struct soap*, const struct __trt__DeleteOSD *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__DeleteOSD(struct soap*, const char*, int, const struct __trt__DeleteOSD *, const char*);
SOAP_FMAC3 struct __trt__DeleteOSD * SOAP_FMAC4 soap_in___trt__DeleteOSD(struct soap*, const char*, struct __trt__DeleteOSD *, const char*);
SOAP_FMAC1 struct __trt__DeleteOSD * SOAP_FMAC2 soap_instantiate___trt__DeleteOSD(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__DeleteOSD * soap_new___trt__DeleteOSD(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__DeleteOSD(soap, n, NULL, NULL, NULL);
}

inline struct __trt__DeleteOSD * soap_new_req___trt__DeleteOSD(
	struct soap *soap)
{
	struct __trt__DeleteOSD *_p = soap_new___trt__DeleteOSD(soap);
	if (_p)
	{	soap_default___trt__DeleteOSD(soap, _p);
	}
	return _p;
}

inline struct __trt__DeleteOSD * soap_new_set___trt__DeleteOSD(
	struct soap *soap,
	_trt__DeleteOSD *trt__DeleteOSD)
{
	struct __trt__DeleteOSD *_p = soap_new___trt__DeleteOSD(soap);
	if (_p)
	{	soap_default___trt__DeleteOSD(soap, _p);
		_p->trt__DeleteOSD = trt__DeleteOSD;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__DeleteOSD(struct soap*, const struct __trt__DeleteOSD *, const char*, const char*);

inline int soap_write___trt__DeleteOSD(struct soap *soap, struct __trt__DeleteOSD const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___trt__DeleteOSD(soap, p), 0) || soap_put___trt__DeleteOSD(soap, p, "-trt:DeleteOSD", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__DeleteOSD * SOAP_FMAC4 soap_get___trt__DeleteOSD(struct soap*, struct __trt__DeleteOSD *, const char*, const char*);

inline int soap_read___trt__DeleteOSD(struct soap *soap, struct __trt__DeleteOSD *p)
{
	if (p)
	{	soap_default___trt__DeleteOSD(soap, p);
		if (soap_begin_recv(soap) || soap_get___trt__DeleteOSD(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___trt__CreateOSD_DEFINED
#define SOAP_TYPE___trt__CreateOSD_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__CreateOSD(struct soap*, struct __trt__CreateOSD *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__CreateOSD(struct soap*, const struct __trt__CreateOSD *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__CreateOSD(struct soap*, const char*, int, const struct __trt__CreateOSD *, const char*);
SOAP_FMAC3 struct __trt__CreateOSD * SOAP_FMAC4 soap_in___trt__CreateOSD(struct soap*, const char*, struct __trt__CreateOSD *, const char*);
SOAP_FMAC1 struct __trt__CreateOSD * SOAP_FMAC2 soap_instantiate___trt__CreateOSD(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__CreateOSD * soap_new___trt__CreateOSD(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__CreateOSD(soap, n, NULL, NULL, NULL);
}

inline struct __trt__CreateOSD * soap_new_req___trt__CreateOSD(
	struct soap *soap)
{
	struct __trt__CreateOSD *_p = soap_new___trt__CreateOSD(soap);
	if (_p)
	{	soap_default___trt__CreateOSD(soap, _p);
	}
	return _p;
}

inline struct __trt__CreateOSD * soap_new_set___trt__CreateOSD(
	struct soap *soap,
	_trt__CreateOSD *trt__CreateOSD)
{
	struct __trt__CreateOSD *_p = soap_new___trt__CreateOSD(soap);
	if (_p)
	{	soap_default___trt__CreateOSD(soap, _p);
		_p->trt__CreateOSD = trt__CreateOSD;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__CreateOSD(struct soap*, const struct __trt__CreateOSD *, const char*, const char*);

inline int soap_write___trt__CreateOSD(struct soap *soap, struct __trt__CreateOSD const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___trt__CreateOSD(soap, p), 0) || soap_put___trt__CreateOSD(soap, p, "-trt:CreateOSD", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__CreateOSD * SOAP_FMAC4 soap_get___trt__CreateOSD(struct soap*, struct __trt__CreateOSD *, const char*, const char*);

inline int soap_read___trt__CreateOSD(struct soap *soap, struct __trt__CreateOSD *p)
{
	if (p)
	{	soap_default___trt__CreateOSD(soap, p);
		if (soap_begin_recv(soap) || soap_get___trt__CreateOSD(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___trt__SetOSD_DEFINED
#define SOAP_TYPE___trt__SetOSD_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__SetOSD(struct soap*, struct __trt__SetOSD *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__SetOSD(struct soap*, const struct __trt__SetOSD *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__SetOSD(struct soap*, const char*, int, const struct __trt__SetOSD *, const char*);
SOAP_FMAC3 struct __trt__SetOSD * SOAP_FMAC4 soap_in___trt__SetOSD(struct soap*, const char*, struct __trt__SetOSD *, const char*);
SOAP_FMAC1 struct __trt__SetOSD * SOAP_FMAC2 soap_instantiate___trt__SetOSD(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__SetOSD * soap_new___trt__SetOSD(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__SetOSD(soap, n, NULL, NULL, NULL);
}

inline struct __trt__SetOSD * soap_new_req___trt__SetOSD(
	struct soap *soap)
{
	struct __trt__SetOSD *_p = soap_new___trt__SetOSD(soap);
	if (_p)
	{	soap_default___trt__SetOSD(soap, _p);
	}
	return _p;
}

inline struct __trt__SetOSD * soap_new_set___trt__SetOSD(
	struct soap *soap,
	_trt__SetOSD *trt__SetOSD)
{
	struct __trt__SetOSD *_p = soap_new___trt__SetOSD(soap);
	if (_p)
	{	soap_default___trt__SetOSD(soap, _p);
		_p->trt__SetOSD = trt__SetOSD;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__SetOSD(struct soap*, const struct __trt__SetOSD *, const char*, const char*);

inline int soap_write___trt__SetOSD(struct soap *soap, struct __trt__SetOSD const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___trt__SetOSD(soap, p), 0) || soap_put___trt__SetOSD(soap, p, "-trt:SetOSD", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__SetOSD * SOAP_FMAC4 soap_get___trt__SetOSD(struct soap*, struct __trt__SetOSD *, const char*, const char*);

inline int soap_read___trt__SetOSD(struct soap *soap, struct __trt__SetOSD *p)
{
	if (p)
	{	soap_default___trt__SetOSD(soap, p);
		if (soap_begin_recv(soap) || soap_get___trt__SetOSD(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___trt__GetOSDOptions_DEFINED
#define SOAP_TYPE___trt__GetOSDOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__GetOSDOptions(struct soap*, struct __trt__GetOSDOptions *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__GetOSDOptions(struct soap*, const struct __trt__GetOSDOptions *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__GetOSDOptions(struct soap*, const char*, int, const struct __trt__GetOSDOptions *, const char*);
SOAP_FMAC3 struct __trt__GetOSDOptions * SOAP_FMAC4 soap_in___trt__GetOSDOptions(struct soap*, const char*, struct __trt__GetOSDOptions *, const char*);
SOAP_FMAC1 struct __trt__GetOSDOptions * SOAP_FMAC2 soap_instantiate___trt__GetOSDOptions(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__GetOSDOptions * soap_new___trt__GetOSDOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__GetOSDOptions(soap, n, NULL, NULL, NULL);
}

inline struct __trt__GetOSDOptions * soap_new_req___trt__GetOSDOptions(
	struct soap *soap)
{
	struct __trt__GetOSDOptions *_p = soap_new___trt__GetOSDOptions(soap);
	if (_p)
	{	soap_default___trt__GetOSDOptions(soap, _p);
	}
	return _p;
}

inline struct __trt__GetOSDOptions * soap_new_set___trt__GetOSDOptions(
	struct soap *soap,
	_trt__GetOSDOptions *trt__GetOSDOptions)
{
	struct __trt__GetOSDOptions *_p = soap_new___trt__GetOSDOptions(soap);
	if (_p)
	{	soap_default___trt__GetOSDOptions(soap, _p);
		_p->trt__GetOSDOptions = trt__GetOSDOptions;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__GetOSDOptions(struct soap*, const struct __trt__GetOSDOptions *, const char*, const char*);

inline int soap_write___trt__GetOSDOptions(struct soap *soap, struct __trt__GetOSDOptions const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___trt__GetOSDOptions(soap, p), 0) || soap_put___trt__GetOSDOptions(soap, p, "-trt:GetOSDOptions", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__GetOSDOptions * SOAP_FMAC4 soap_get___trt__GetOSDOptions(struct soap*, struct __trt__GetOSDOptions *, const char*, const char*);

inline int soap_read___trt__GetOSDOptions(struct soap *soap, struct __trt__GetOSDOptions *p)
{
	if (p)
	{	soap_default___trt__GetOSDOptions(soap, p);
		if (soap_begin_recv(soap) || soap_get___trt__GetOSDOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___trt__GetOSD_DEFINED
#define SOAP_TYPE___trt__GetOSD_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__GetOSD(struct soap*, struct __trt__GetOSD *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__GetOSD(struct soap*, const struct __trt__GetOSD *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__GetOSD(struct soap*, const char*, int, const struct __trt__GetOSD *, const char*);
SOAP_FMAC3 struct __trt__GetOSD * SOAP_FMAC4 soap_in___trt__GetOSD(struct soap*, const char*, struct __trt__GetOSD *, const char*);
SOAP_FMAC1 struct __trt__GetOSD * SOAP_FMAC2 soap_instantiate___trt__GetOSD(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__GetOSD * soap_new___trt__GetOSD(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__GetOSD(soap, n, NULL, NULL, NULL);
}

inline struct __trt__GetOSD * soap_new_req___trt__GetOSD(
	struct soap *soap)
{
	struct __trt__GetOSD *_p = soap_new___trt__GetOSD(soap);
	if (_p)
	{	soap_default___trt__GetOSD(soap, _p);
	}
	return _p;
}

inline struct __trt__GetOSD * soap_new_set___trt__GetOSD(
	struct soap *soap,
	_trt__GetOSD *trt__GetOSD)
{
	struct __trt__GetOSD *_p = soap_new___trt__GetOSD(soap);
	if (_p)
	{	soap_default___trt__GetOSD(soap, _p);
		_p->trt__GetOSD = trt__GetOSD;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__GetOSD(struct soap*, const struct __trt__GetOSD *, const char*, const char*);

inline int soap_write___trt__GetOSD(struct soap *soap, struct __trt__GetOSD const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___trt__GetOSD(soap, p), 0) || soap_put___trt__GetOSD(soap, p, "-trt:GetOSD", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__GetOSD * SOAP_FMAC4 soap_get___trt__GetOSD(struct soap*, struct __trt__GetOSD *, const char*, const char*);

inline int soap_read___trt__GetOSD(struct soap *soap, struct __trt__GetOSD *p)
{
	if (p)
	{	soap_default___trt__GetOSD(soap, p);
		if (soap_begin_recv(soap) || soap_get___trt__GetOSD(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___trt__GetOSDs_DEFINED
#define SOAP_TYPE___trt__GetOSDs_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__GetOSDs(struct soap*, struct __trt__GetOSDs *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__GetOSDs(struct soap*, const struct __trt__GetOSDs *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__GetOSDs(struct soap*, const char*, int, const struct __trt__GetOSDs *, const char*);
SOAP_FMAC3 struct __trt__GetOSDs * SOAP_FMAC4 soap_in___trt__GetOSDs(struct soap*, const char*, struct __trt__GetOSDs *, const char*);
SOAP_FMAC1 struct __trt__GetOSDs * SOAP_FMAC2 soap_instantiate___trt__GetOSDs(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__GetOSDs * soap_new___trt__GetOSDs(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__GetOSDs(soap, n, NULL, NULL, NULL);
}

inline struct __trt__GetOSDs * soap_new_req___trt__GetOSDs(
	struct soap *soap)
{
	struct __trt__GetOSDs *_p = soap_new___trt__GetOSDs(soap);
	if (_p)
	{	soap_default___trt__GetOSDs(soap, _p);
	}
	return _p;
}

inline struct __trt__GetOSDs * soap_new_set___trt__GetOSDs(
	struct soap *soap,
	_trt__GetOSDs *trt__GetOSDs)
{
	struct __trt__GetOSDs *_p = soap_new___trt__GetOSDs(soap);
	if (_p)
	{	soap_default___trt__GetOSDs(soap, _p);
		_p->trt__GetOSDs = trt__GetOSDs;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__GetOSDs(struct soap*, const struct __trt__GetOSDs *, const char*, const char*);

inline int soap_write___trt__GetOSDs(struct soap *soap, struct __trt__GetOSDs const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___trt__GetOSDs(soap, p), 0) || soap_put___trt__GetOSDs(soap, p, "-trt:GetOSDs", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__GetOSDs * SOAP_FMAC4 soap_get___trt__GetOSDs(struct soap*, struct __trt__GetOSDs *, const char*, const char*);

inline int soap_read___trt__GetOSDs(struct soap *soap, struct __trt__GetOSDs *p)
{
	if (p)
	{	soap_default___trt__GetOSDs(soap, p);
		if (soap_begin_recv(soap) || soap_get___trt__GetOSDs(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___trt__SetVideoSourceMode_DEFINED
#define SOAP_TYPE___trt__SetVideoSourceMode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__SetVideoSourceMode(struct soap*, struct __trt__SetVideoSourceMode *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__SetVideoSourceMode(struct soap*, const struct __trt__SetVideoSourceMode *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__SetVideoSourceMode(struct soap*, const char*, int, const struct __trt__SetVideoSourceMode *, const char*);
SOAP_FMAC3 struct __trt__SetVideoSourceMode * SOAP_FMAC4 soap_in___trt__SetVideoSourceMode(struct soap*, const char*, struct __trt__SetVideoSourceMode *, const char*);
SOAP_FMAC1 struct __trt__SetVideoSourceMode * SOAP_FMAC2 soap_instantiate___trt__SetVideoSourceMode(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__SetVideoSourceMode * soap_new___trt__SetVideoSourceMode(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__SetVideoSourceMode(soap, n, NULL, NULL, NULL);
}

inline struct __trt__SetVideoSourceMode * soap_new_req___trt__SetVideoSourceMode(
	struct soap *soap)
{
	struct __trt__SetVideoSourceMode *_p = soap_new___trt__SetVideoSourceMode(soap);
	if (_p)
	{	soap_default___trt__SetVideoSourceMode(soap, _p);
	}
	return _p;
}

inline struct __trt__SetVideoSourceMode * soap_new_set___trt__SetVideoSourceMode(
	struct soap *soap,
	_trt__SetVideoSourceMode *trt__SetVideoSourceMode)
{
	struct __trt__SetVideoSourceMode *_p = soap_new___trt__SetVideoSourceMode(soap);
	if (_p)
	{	soap_default___trt__SetVideoSourceMode(soap, _p);
		_p->trt__SetVideoSourceMode = trt__SetVideoSourceMode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__SetVideoSourceMode(struct soap*, const struct __trt__SetVideoSourceMode *, const char*, const char*);

inline int soap_write___trt__SetVideoSourceMode(struct soap *soap, struct __trt__SetVideoSourceMode const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___trt__SetVideoSourceMode(soap, p), 0) || soap_put___trt__SetVideoSourceMode(soap, p, "-trt:SetVideoSourceMode", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__SetVideoSourceMode * SOAP_FMAC4 soap_get___trt__SetVideoSourceMode(struct soap*, struct __trt__SetVideoSourceMode *, const char*, const char*);

inline int soap_read___trt__SetVideoSourceMode(struct soap *soap, struct __trt__SetVideoSourceMode *p)
{
	if (p)
	{	soap_default___trt__SetVideoSourceMode(soap, p);
		if (soap_begin_recv(soap) || soap_get___trt__SetVideoSourceMode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___trt__GetVideoSourceModes_DEFINED
#define SOAP_TYPE___trt__GetVideoSourceModes_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__GetVideoSourceModes(struct soap*, struct __trt__GetVideoSourceModes *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__GetVideoSourceModes(struct soap*, const struct __trt__GetVideoSourceModes *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__GetVideoSourceModes(struct soap*, const char*, int, const struct __trt__GetVideoSourceModes *, const char*);
SOAP_FMAC3 struct __trt__GetVideoSourceModes * SOAP_FMAC4 soap_in___trt__GetVideoSourceModes(struct soap*, const char*, struct __trt__GetVideoSourceModes *, const char*);
SOAP_FMAC1 struct __trt__GetVideoSourceModes * SOAP_FMAC2 soap_instantiate___trt__GetVideoSourceModes(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__GetVideoSourceModes * soap_new___trt__GetVideoSourceModes(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__GetVideoSourceModes(soap, n, NULL, NULL, NULL);
}

inline struct __trt__GetVideoSourceModes * soap_new_req___trt__GetVideoSourceModes(
	struct soap *soap)
{
	struct __trt__GetVideoSourceModes *_p = soap_new___trt__GetVideoSourceModes(soap);
	if (_p)
	{	soap_default___trt__GetVideoSourceModes(soap, _p);
	}
	return _p;
}

inline struct __trt__GetVideoSourceModes * soap_new_set___trt__GetVideoSourceModes(
	struct soap *soap,
	_trt__GetVideoSourceModes *trt__GetVideoSourceModes)
{
	struct __trt__GetVideoSourceModes *_p = soap_new___trt__GetVideoSourceModes(soap);
	if (_p)
	{	soap_default___trt__GetVideoSourceModes(soap, _p);
		_p->trt__GetVideoSourceModes = trt__GetVideoSourceModes;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__GetVideoSourceModes(struct soap*, const struct __trt__GetVideoSourceModes *, const char*, const char*);

inline int soap_write___trt__GetVideoSourceModes(struct soap *soap, struct __trt__GetVideoSourceModes const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___trt__GetVideoSourceModes(soap, p), 0) || soap_put___trt__GetVideoSourceModes(soap, p, "-trt:GetVideoSourceModes", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__GetVideoSourceModes * SOAP_FMAC4 soap_get___trt__GetVideoSourceModes(struct soap*, struct __trt__GetVideoSourceModes *, const char*, const char*);

inline int soap_read___trt__GetVideoSourceModes(struct soap *soap, struct __trt__GetVideoSourceModes *p)
{
	if (p)
	{	soap_default___trt__GetVideoSourceModes(soap, p);
		if (soap_begin_recv(soap) || soap_get___trt__GetVideoSourceModes(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___trt__GetSnapshotUri_DEFINED
#define SOAP_TYPE___trt__GetSnapshotUri_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__GetSnapshotUri(struct soap*, struct __trt__GetSnapshotUri *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__GetSnapshotUri(struct soap*, const struct __trt__GetSnapshotUri *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__GetSnapshotUri(struct soap*, const char*, int, const struct __trt__GetSnapshotUri *, const char*);
SOAP_FMAC3 struct __trt__GetSnapshotUri * SOAP_FMAC4 soap_in___trt__GetSnapshotUri(struct soap*, const char*, struct __trt__GetSnapshotUri *, const char*);
SOAP_FMAC1 struct __trt__GetSnapshotUri * SOAP_FMAC2 soap_instantiate___trt__GetSnapshotUri(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__GetSnapshotUri * soap_new___trt__GetSnapshotUri(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__GetSnapshotUri(soap, n, NULL, NULL, NULL);
}

inline struct __trt__GetSnapshotUri * soap_new_req___trt__GetSnapshotUri(
	struct soap *soap)
{
	struct __trt__GetSnapshotUri *_p = soap_new___trt__GetSnapshotUri(soap);
	if (_p)
	{	soap_default___trt__GetSnapshotUri(soap, _p);
	}
	return _p;
}

inline struct __trt__GetSnapshotUri * soap_new_set___trt__GetSnapshotUri(
	struct soap *soap,
	_trt__GetSnapshotUri *trt__GetSnapshotUri)
{
	struct __trt__GetSnapshotUri *_p = soap_new___trt__GetSnapshotUri(soap);
	if (_p)
	{	soap_default___trt__GetSnapshotUri(soap, _p);
		_p->trt__GetSnapshotUri = trt__GetSnapshotUri;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__GetSnapshotUri(struct soap*, const struct __trt__GetSnapshotUri *, const char*, const char*);

inline int soap_write___trt__GetSnapshotUri(struct soap *soap, struct __trt__GetSnapshotUri const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___trt__GetSnapshotUri(soap, p), 0) || soap_put___trt__GetSnapshotUri(soap, p, "-trt:GetSnapshotUri", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__GetSnapshotUri * SOAP_FMAC4 soap_get___trt__GetSnapshotUri(struct soap*, struct __trt__GetSnapshotUri *, const char*, const char*);

inline int soap_read___trt__GetSnapshotUri(struct soap *soap, struct __trt__GetSnapshotUri *p)
{
	if (p)
	{	soap_default___trt__GetSnapshotUri(soap, p);
		if (soap_begin_recv(soap) || soap_get___trt__GetSnapshotUri(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___trt__SetSynchronizationPoint_DEFINED
#define SOAP_TYPE___trt__SetSynchronizationPoint_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__SetSynchronizationPoint(struct soap*, struct __trt__SetSynchronizationPoint *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__SetSynchronizationPoint(struct soap*, const struct __trt__SetSynchronizationPoint *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__SetSynchronizationPoint(struct soap*, const char*, int, const struct __trt__SetSynchronizationPoint *, const char*);
SOAP_FMAC3 struct __trt__SetSynchronizationPoint * SOAP_FMAC4 soap_in___trt__SetSynchronizationPoint(struct soap*, const char*, struct __trt__SetSynchronizationPoint *, const char*);
SOAP_FMAC1 struct __trt__SetSynchronizationPoint * SOAP_FMAC2 soap_instantiate___trt__SetSynchronizationPoint(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__SetSynchronizationPoint * soap_new___trt__SetSynchronizationPoint(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__SetSynchronizationPoint(soap, n, NULL, NULL, NULL);
}

inline struct __trt__SetSynchronizationPoint * soap_new_req___trt__SetSynchronizationPoint(
	struct soap *soap)
{
	struct __trt__SetSynchronizationPoint *_p = soap_new___trt__SetSynchronizationPoint(soap);
	if (_p)
	{	soap_default___trt__SetSynchronizationPoint(soap, _p);
	}
	return _p;
}

inline struct __trt__SetSynchronizationPoint * soap_new_set___trt__SetSynchronizationPoint(
	struct soap *soap,
	_trt__SetSynchronizationPoint *trt__SetSynchronizationPoint)
{
	struct __trt__SetSynchronizationPoint *_p = soap_new___trt__SetSynchronizationPoint(soap);
	if (_p)
	{	soap_default___trt__SetSynchronizationPoint(soap, _p);
		_p->trt__SetSynchronizationPoint = trt__SetSynchronizationPoint;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__SetSynchronizationPoint(struct soap*, const struct __trt__SetSynchronizationPoint *, const char*, const char*);

inline int soap_write___trt__SetSynchronizationPoint(struct soap *soap, struct __trt__SetSynchronizationPoint const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___trt__SetSynchronizationPoint(soap, p), 0) || soap_put___trt__SetSynchronizationPoint(soap, p, "-trt:SetSynchronizationPoint", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__SetSynchronizationPoint * SOAP_FMAC4 soap_get___trt__SetSynchronizationPoint(struct soap*, struct __trt__SetSynchronizationPoint *, const char*, const char*);

inline int soap_read___trt__SetSynchronizationPoint(struct soap *soap, struct __trt__SetSynchronizationPoint *p)
{
	if (p)
	{	soap_default___trt__SetSynchronizationPoint(soap, p);
		if (soap_begin_recv(soap) || soap_get___trt__SetSynchronizationPoint(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___trt__StopMulticastStreaming_DEFINED
#define SOAP_TYPE___trt__StopMulticastStreaming_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__StopMulticastStreaming(struct soap*, struct __trt__StopMulticastStreaming *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__StopMulticastStreaming(struct soap*, const struct __trt__StopMulticastStreaming *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__StopMulticastStreaming(struct soap*, const char*, int, const struct __trt__StopMulticastStreaming *, const char*);
SOAP_FMAC3 struct __trt__StopMulticastStreaming * SOAP_FMAC4 soap_in___trt__StopMulticastStreaming(struct soap*, const char*, struct __trt__StopMulticastStreaming *, const char*);
SOAP_FMAC1 struct __trt__StopMulticastStreaming * SOAP_FMAC2 soap_instantiate___trt__StopMulticastStreaming(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__StopMulticastStreaming * soap_new___trt__StopMulticastStreaming(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__StopMulticastStreaming(soap, n, NULL, NULL, NULL);
}

inline struct __trt__StopMulticastStreaming * soap_new_req___trt__StopMulticastStreaming(
	struct soap *soap)
{
	struct __trt__StopMulticastStreaming *_p = soap_new___trt__StopMulticastStreaming(soap);
	if (_p)
	{	soap_default___trt__StopMulticastStreaming(soap, _p);
	}
	return _p;
}

inline struct __trt__StopMulticastStreaming * soap_new_set___trt__StopMulticastStreaming(
	struct soap *soap,
	_trt__StopMulticastStreaming *trt__StopMulticastStreaming)
{
	struct __trt__StopMulticastStreaming *_p = soap_new___trt__StopMulticastStreaming(soap);
	if (_p)
	{	soap_default___trt__StopMulticastStreaming(soap, _p);
		_p->trt__StopMulticastStreaming = trt__StopMulticastStreaming;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__StopMulticastStreaming(struct soap*, const struct __trt__StopMulticastStreaming *, const char*, const char*);

inline int soap_write___trt__StopMulticastStreaming(struct soap *soap, struct __trt__StopMulticastStreaming const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___trt__StopMulticastStreaming(soap, p), 0) || soap_put___trt__StopMulticastStreaming(soap, p, "-trt:StopMulticastStreaming", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__StopMulticastStreaming * SOAP_FMAC4 soap_get___trt__StopMulticastStreaming(struct soap*, struct __trt__StopMulticastStreaming *, const char*, const char*);

inline int soap_read___trt__StopMulticastStreaming(struct soap *soap, struct __trt__StopMulticastStreaming *p)
{
	if (p)
	{	soap_default___trt__StopMulticastStreaming(soap, p);
		if (soap_begin_recv(soap) || soap_get___trt__StopMulticastStreaming(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___trt__StartMulticastStreaming_DEFINED
#define SOAP_TYPE___trt__StartMulticastStreaming_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__StartMulticastStreaming(struct soap*, struct __trt__StartMulticastStreaming *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__StartMulticastStreaming(struct soap*, const struct __trt__StartMulticastStreaming *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__StartMulticastStreaming(struct soap*, const char*, int, const struct __trt__StartMulticastStreaming *, const char*);
SOAP_FMAC3 struct __trt__StartMulticastStreaming * SOAP_FMAC4 soap_in___trt__StartMulticastStreaming(struct soap*, const char*, struct __trt__StartMulticastStreaming *, const char*);
SOAP_FMAC1 struct __trt__StartMulticastStreaming * SOAP_FMAC2 soap_instantiate___trt__StartMulticastStreaming(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__StartMulticastStreaming * soap_new___trt__StartMulticastStreaming(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__StartMulticastStreaming(soap, n, NULL, NULL, NULL);
}

inline struct __trt__StartMulticastStreaming * soap_new_req___trt__StartMulticastStreaming(
	struct soap *soap)
{
	struct __trt__StartMulticastStreaming *_p = soap_new___trt__StartMulticastStreaming(soap);
	if (_p)
	{	soap_default___trt__StartMulticastStreaming(soap, _p);
	}
	return _p;
}

inline struct __trt__StartMulticastStreaming * soap_new_set___trt__StartMulticastStreaming(
	struct soap *soap,
	_trt__StartMulticastStreaming *trt__StartMulticastStreaming)
{
	struct __trt__StartMulticastStreaming *_p = soap_new___trt__StartMulticastStreaming(soap);
	if (_p)
	{	soap_default___trt__StartMulticastStreaming(soap, _p);
		_p->trt__StartMulticastStreaming = trt__StartMulticastStreaming;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__StartMulticastStreaming(struct soap*, const struct __trt__StartMulticastStreaming *, const char*, const char*);

inline int soap_write___trt__StartMulticastStreaming(struct soap *soap, struct __trt__StartMulticastStreaming const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___trt__StartMulticastStreaming(soap, p), 0) || soap_put___trt__StartMulticastStreaming(soap, p, "-trt:StartMulticastStreaming", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__StartMulticastStreaming * SOAP_FMAC4 soap_get___trt__StartMulticastStreaming(struct soap*, struct __trt__StartMulticastStreaming *, const char*, const char*);

inline int soap_read___trt__StartMulticastStreaming(struct soap *soap, struct __trt__StartMulticastStreaming *p)
{
	if (p)
	{	soap_default___trt__StartMulticastStreaming(soap, p);
		if (soap_begin_recv(soap) || soap_get___trt__StartMulticastStreaming(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___trt__GetStreamUri_DEFINED
#define SOAP_TYPE___trt__GetStreamUri_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__GetStreamUri(struct soap*, struct __trt__GetStreamUri *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__GetStreamUri(struct soap*, const struct __trt__GetStreamUri *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__GetStreamUri(struct soap*, const char*, int, const struct __trt__GetStreamUri *, const char*);
SOAP_FMAC3 struct __trt__GetStreamUri * SOAP_FMAC4 soap_in___trt__GetStreamUri(struct soap*, const char*, struct __trt__GetStreamUri *, const char*);
SOAP_FMAC1 struct __trt__GetStreamUri * SOAP_FMAC2 soap_instantiate___trt__GetStreamUri(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__GetStreamUri * soap_new___trt__GetStreamUri(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__GetStreamUri(soap, n, NULL, NULL, NULL);
}

inline struct __trt__GetStreamUri * soap_new_req___trt__GetStreamUri(
	struct soap *soap)
{
	struct __trt__GetStreamUri *_p = soap_new___trt__GetStreamUri(soap);
	if (_p)
	{	soap_default___trt__GetStreamUri(soap, _p);
	}
	return _p;
}

inline struct __trt__GetStreamUri * soap_new_set___trt__GetStreamUri(
	struct soap *soap,
	_trt__GetStreamUri *trt__GetStreamUri)
{
	struct __trt__GetStreamUri *_p = soap_new___trt__GetStreamUri(soap);
	if (_p)
	{	soap_default___trt__GetStreamUri(soap, _p);
		_p->trt__GetStreamUri = trt__GetStreamUri;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__GetStreamUri(struct soap*, const struct __trt__GetStreamUri *, const char*, const char*);

inline int soap_write___trt__GetStreamUri(struct soap *soap, struct __trt__GetStreamUri const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___trt__GetStreamUri(soap, p), 0) || soap_put___trt__GetStreamUri(soap, p, "-trt:GetStreamUri", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__GetStreamUri * SOAP_FMAC4 soap_get___trt__GetStreamUri(struct soap*, struct __trt__GetStreamUri *, const char*, const char*);

inline int soap_read___trt__GetStreamUri(struct soap *soap, struct __trt__GetStreamUri *p)
{
	if (p)
	{	soap_default___trt__GetStreamUri(soap, p);
		if (soap_begin_recv(soap) || soap_get___trt__GetStreamUri(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___trt__GetGuaranteedNumberOfVideoEncoderInstances_DEFINED
#define SOAP_TYPE___trt__GetGuaranteedNumberOfVideoEncoderInstances_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__GetGuaranteedNumberOfVideoEncoderInstances(struct soap*, struct __trt__GetGuaranteedNumberOfVideoEncoderInstances *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__GetGuaranteedNumberOfVideoEncoderInstances(struct soap*, const struct __trt__GetGuaranteedNumberOfVideoEncoderInstances *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__GetGuaranteedNumberOfVideoEncoderInstances(struct soap*, const char*, int, const struct __trt__GetGuaranteedNumberOfVideoEncoderInstances *, const char*);
SOAP_FMAC3 struct __trt__GetGuaranteedNumberOfVideoEncoderInstances * SOAP_FMAC4 soap_in___trt__GetGuaranteedNumberOfVideoEncoderInstances(struct soap*, const char*, struct __trt__GetGuaranteedNumberOfVideoEncoderInstances *, const char*);
SOAP_FMAC1 struct __trt__GetGuaranteedNumberOfVideoEncoderInstances * SOAP_FMAC2 soap_instantiate___trt__GetGuaranteedNumberOfVideoEncoderInstances(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__GetGuaranteedNumberOfVideoEncoderInstances * soap_new___trt__GetGuaranteedNumberOfVideoEncoderInstances(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__GetGuaranteedNumberOfVideoEncoderInstances(soap, n, NULL, NULL, NULL);
}

inline struct __trt__GetGuaranteedNumberOfVideoEncoderInstances * soap_new_req___trt__GetGuaranteedNumberOfVideoEncoderInstances(
	struct soap *soap)
{
	struct __trt__GetGuaranteedNumberOfVideoEncoderInstances *_p = soap_new___trt__GetGuaranteedNumberOfVideoEncoderInstances(soap);
	if (_p)
	{	soap_default___trt__GetGuaranteedNumberOfVideoEncoderInstances(soap, _p);
	}
	return _p;
}

inline struct __trt__GetGuaranteedNumberOfVideoEncoderInstances * soap_new_set___trt__GetGuaranteedNumberOfVideoEncoderInstances(
	struct soap *soap,
	_trt__GetGuaranteedNumberOfVideoEncoderInstances *trt__GetGuaranteedNumberOfVideoEncoderInstances)
{
	struct __trt__GetGuaranteedNumberOfVideoEncoderInstances *_p = soap_new___trt__GetGuaranteedNumberOfVideoEncoderInstances(soap);
	if (_p)
	{	soap_default___trt__GetGuaranteedNumberOfVideoEncoderInstances(soap, _p);
		_p->trt__GetGuaranteedNumberOfVideoEncoderInstances = trt__GetGuaranteedNumberOfVideoEncoderInstances;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__GetGuaranteedNumberOfVideoEncoderInstances(struct soap*, const struct __trt__GetGuaranteedNumberOfVideoEncoderInstances *, const char*, const char*);

inline int soap_write___trt__GetGuaranteedNumberOfVideoEncoderInstances(struct soap *soap, struct __trt__GetGuaranteedNumberOfVideoEncoderInstances const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___trt__GetGuaranteedNumberOfVideoEncoderInstances(soap, p), 0) || soap_put___trt__GetGuaranteedNumberOfVideoEncoderInstances(soap, p, "-trt:GetGuaranteedNumberOfVideoEncoderInstances", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__GetGuaranteedNumberOfVideoEncoderInstances * SOAP_FMAC4 soap_get___trt__GetGuaranteedNumberOfVideoEncoderInstances(struct soap*, struct __trt__GetGuaranteedNumberOfVideoEncoderInstances *, const char*, const char*);

inline int soap_read___trt__GetGuaranteedNumberOfVideoEncoderInstances(struct soap *soap, struct __trt__GetGuaranteedNumberOfVideoEncoderInstances *p)
{
	if (p)
	{	soap_default___trt__GetGuaranteedNumberOfVideoEncoderInstances(soap, p);
		if (soap_begin_recv(soap) || soap_get___trt__GetGuaranteedNumberOfVideoEncoderInstances(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___trt__GetAudioDecoderConfigurationOptions_DEFINED
#define SOAP_TYPE___trt__GetAudioDecoderConfigurationOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__GetAudioDecoderConfigurationOptions(struct soap*, struct __trt__GetAudioDecoderConfigurationOptions *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__GetAudioDecoderConfigurationOptions(struct soap*, const struct __trt__GetAudioDecoderConfigurationOptions *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__GetAudioDecoderConfigurationOptions(struct soap*, const char*, int, const struct __trt__GetAudioDecoderConfigurationOptions *, const char*);
SOAP_FMAC3 struct __trt__GetAudioDecoderConfigurationOptions * SOAP_FMAC4 soap_in___trt__GetAudioDecoderConfigurationOptions(struct soap*, const char*, struct __trt__GetAudioDecoderConfigurationOptions *, const char*);
SOAP_FMAC1 struct __trt__GetAudioDecoderConfigurationOptions * SOAP_FMAC2 soap_instantiate___trt__GetAudioDecoderConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__GetAudioDecoderConfigurationOptions * soap_new___trt__GetAudioDecoderConfigurationOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__GetAudioDecoderConfigurationOptions(soap, n, NULL, NULL, NULL);
}

inline struct __trt__GetAudioDecoderConfigurationOptions * soap_new_req___trt__GetAudioDecoderConfigurationOptions(
	struct soap *soap)
{
	struct __trt__GetAudioDecoderConfigurationOptions *_p = soap_new___trt__GetAudioDecoderConfigurationOptions(soap);
	if (_p)
	{	soap_default___trt__GetAudioDecoderConfigurationOptions(soap, _p);
	}
	return _p;
}

inline struct __trt__GetAudioDecoderConfigurationOptions * soap_new_set___trt__GetAudioDecoderConfigurationOptions(
	struct soap *soap,
	_trt__GetAudioDecoderConfigurationOptions *trt__GetAudioDecoderConfigurationOptions)
{
	struct __trt__GetAudioDecoderConfigurationOptions *_p = soap_new___trt__GetAudioDecoderConfigurationOptions(soap);
	if (_p)
	{	soap_default___trt__GetAudioDecoderConfigurationOptions(soap, _p);
		_p->trt__GetAudioDecoderConfigurationOptions = trt__GetAudioDecoderConfigurationOptions;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__GetAudioDecoderConfigurationOptions(struct soap*, const struct __trt__GetAudioDecoderConfigurationOptions *, const char*, const char*);

inline int soap_write___trt__GetAudioDecoderConfigurationOptions(struct soap *soap, struct __trt__GetAudioDecoderConfigurationOptions const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___trt__GetAudioDecoderConfigurationOptions(soap, p), 0) || soap_put___trt__GetAudioDecoderConfigurationOptions(soap, p, "-trt:GetAudioDecoderConfigurationOptions", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__GetAudioDecoderConfigurationOptions * SOAP_FMAC4 soap_get___trt__GetAudioDecoderConfigurationOptions(struct soap*, struct __trt__GetAudioDecoderConfigurationOptions *, const char*, const char*);

inline int soap_read___trt__GetAudioDecoderConfigurationOptions(struct soap *soap, struct __trt__GetAudioDecoderConfigurationOptions *p)
{
	if (p)
	{	soap_default___trt__GetAudioDecoderConfigurationOptions(soap, p);
		if (soap_begin_recv(soap) || soap_get___trt__GetAudioDecoderConfigurationOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___trt__GetAudioOutputConfigurationOptions_DEFINED
#define SOAP_TYPE___trt__GetAudioOutputConfigurationOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__GetAudioOutputConfigurationOptions(struct soap*, struct __trt__GetAudioOutputConfigurationOptions *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__GetAudioOutputConfigurationOptions(struct soap*, const struct __trt__GetAudioOutputConfigurationOptions *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__GetAudioOutputConfigurationOptions(struct soap*, const char*, int, const struct __trt__GetAudioOutputConfigurationOptions *, const char*);
SOAP_FMAC3 struct __trt__GetAudioOutputConfigurationOptions * SOAP_FMAC4 soap_in___trt__GetAudioOutputConfigurationOptions(struct soap*, const char*, struct __trt__GetAudioOutputConfigurationOptions *, const char*);
SOAP_FMAC1 struct __trt__GetAudioOutputConfigurationOptions * SOAP_FMAC2 soap_instantiate___trt__GetAudioOutputConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__GetAudioOutputConfigurationOptions * soap_new___trt__GetAudioOutputConfigurationOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__GetAudioOutputConfigurationOptions(soap, n, NULL, NULL, NULL);
}

inline struct __trt__GetAudioOutputConfigurationOptions * soap_new_req___trt__GetAudioOutputConfigurationOptions(
	struct soap *soap)
{
	struct __trt__GetAudioOutputConfigurationOptions *_p = soap_new___trt__GetAudioOutputConfigurationOptions(soap);
	if (_p)
	{	soap_default___trt__GetAudioOutputConfigurationOptions(soap, _p);
	}
	return _p;
}

inline struct __trt__GetAudioOutputConfigurationOptions * soap_new_set___trt__GetAudioOutputConfigurationOptions(
	struct soap *soap,
	_trt__GetAudioOutputConfigurationOptions *trt__GetAudioOutputConfigurationOptions)
{
	struct __trt__GetAudioOutputConfigurationOptions *_p = soap_new___trt__GetAudioOutputConfigurationOptions(soap);
	if (_p)
	{	soap_default___trt__GetAudioOutputConfigurationOptions(soap, _p);
		_p->trt__GetAudioOutputConfigurationOptions = trt__GetAudioOutputConfigurationOptions;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__GetAudioOutputConfigurationOptions(struct soap*, const struct __trt__GetAudioOutputConfigurationOptions *, const char*, const char*);

inline int soap_write___trt__GetAudioOutputConfigurationOptions(struct soap *soap, struct __trt__GetAudioOutputConfigurationOptions const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___trt__GetAudioOutputConfigurationOptions(soap, p), 0) || soap_put___trt__GetAudioOutputConfigurationOptions(soap, p, "-trt:GetAudioOutputConfigurationOptions", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__GetAudioOutputConfigurationOptions * SOAP_FMAC4 soap_get___trt__GetAudioOutputConfigurationOptions(struct soap*, struct __trt__GetAudioOutputConfigurationOptions *, const char*, const char*);

inline int soap_read___trt__GetAudioOutputConfigurationOptions(struct soap *soap, struct __trt__GetAudioOutputConfigurationOptions *p)
{
	if (p)
	{	soap_default___trt__GetAudioOutputConfigurationOptions(soap, p);
		if (soap_begin_recv(soap) || soap_get___trt__GetAudioOutputConfigurationOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___trt__GetMetadataConfigurationOptions_DEFINED
#define SOAP_TYPE___trt__GetMetadataConfigurationOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__GetMetadataConfigurationOptions(struct soap*, struct __trt__GetMetadataConfigurationOptions *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__GetMetadataConfigurationOptions(struct soap*, const struct __trt__GetMetadataConfigurationOptions *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__GetMetadataConfigurationOptions(struct soap*, const char*, int, const struct __trt__GetMetadataConfigurationOptions *, const char*);
SOAP_FMAC3 struct __trt__GetMetadataConfigurationOptions * SOAP_FMAC4 soap_in___trt__GetMetadataConfigurationOptions(struct soap*, const char*, struct __trt__GetMetadataConfigurationOptions *, const char*);
SOAP_FMAC1 struct __trt__GetMetadataConfigurationOptions * SOAP_FMAC2 soap_instantiate___trt__GetMetadataConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__GetMetadataConfigurationOptions * soap_new___trt__GetMetadataConfigurationOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__GetMetadataConfigurationOptions(soap, n, NULL, NULL, NULL);
}

inline struct __trt__GetMetadataConfigurationOptions * soap_new_req___trt__GetMetadataConfigurationOptions(
	struct soap *soap)
{
	struct __trt__GetMetadataConfigurationOptions *_p = soap_new___trt__GetMetadataConfigurationOptions(soap);
	if (_p)
	{	soap_default___trt__GetMetadataConfigurationOptions(soap, _p);
	}
	return _p;
}

inline struct __trt__GetMetadataConfigurationOptions * soap_new_set___trt__GetMetadataConfigurationOptions(
	struct soap *soap,
	_trt__GetMetadataConfigurationOptions *trt__GetMetadataConfigurationOptions)
{
	struct __trt__GetMetadataConfigurationOptions *_p = soap_new___trt__GetMetadataConfigurationOptions(soap);
	if (_p)
	{	soap_default___trt__GetMetadataConfigurationOptions(soap, _p);
		_p->trt__GetMetadataConfigurationOptions = trt__GetMetadataConfigurationOptions;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__GetMetadataConfigurationOptions(struct soap*, const struct __trt__GetMetadataConfigurationOptions *, const char*, const char*);

inline int soap_write___trt__GetMetadataConfigurationOptions(struct soap *soap, struct __trt__GetMetadataConfigurationOptions const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___trt__GetMetadataConfigurationOptions(soap, p), 0) || soap_put___trt__GetMetadataConfigurationOptions(soap, p, "-trt:GetMetadataConfigurationOptions", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__GetMetadataConfigurationOptions * SOAP_FMAC4 soap_get___trt__GetMetadataConfigurationOptions(struct soap*, struct __trt__GetMetadataConfigurationOptions *, const char*, const char*);

inline int soap_read___trt__GetMetadataConfigurationOptions(struct soap *soap, struct __trt__GetMetadataConfigurationOptions *p)
{
	if (p)
	{	soap_default___trt__GetMetadataConfigurationOptions(soap, p);
		if (soap_begin_recv(soap) || soap_get___trt__GetMetadataConfigurationOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___trt__GetAudioEncoderConfigurationOptions_DEFINED
#define SOAP_TYPE___trt__GetAudioEncoderConfigurationOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__GetAudioEncoderConfigurationOptions(struct soap*, struct __trt__GetAudioEncoderConfigurationOptions *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__GetAudioEncoderConfigurationOptions(struct soap*, const struct __trt__GetAudioEncoderConfigurationOptions *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__GetAudioEncoderConfigurationOptions(struct soap*, const char*, int, const struct __trt__GetAudioEncoderConfigurationOptions *, const char*);
SOAP_FMAC3 struct __trt__GetAudioEncoderConfigurationOptions * SOAP_FMAC4 soap_in___trt__GetAudioEncoderConfigurationOptions(struct soap*, const char*, struct __trt__GetAudioEncoderConfigurationOptions *, const char*);
SOAP_FMAC1 struct __trt__GetAudioEncoderConfigurationOptions * SOAP_FMAC2 soap_instantiate___trt__GetAudioEncoderConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__GetAudioEncoderConfigurationOptions * soap_new___trt__GetAudioEncoderConfigurationOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__GetAudioEncoderConfigurationOptions(soap, n, NULL, NULL, NULL);
}

inline struct __trt__GetAudioEncoderConfigurationOptions * soap_new_req___trt__GetAudioEncoderConfigurationOptions(
	struct soap *soap)
{
	struct __trt__GetAudioEncoderConfigurationOptions *_p = soap_new___trt__GetAudioEncoderConfigurationOptions(soap);
	if (_p)
	{	soap_default___trt__GetAudioEncoderConfigurationOptions(soap, _p);
	}
	return _p;
}

inline struct __trt__GetAudioEncoderConfigurationOptions * soap_new_set___trt__GetAudioEncoderConfigurationOptions(
	struct soap *soap,
	_trt__GetAudioEncoderConfigurationOptions *trt__GetAudioEncoderConfigurationOptions)
{
	struct __trt__GetAudioEncoderConfigurationOptions *_p = soap_new___trt__GetAudioEncoderConfigurationOptions(soap);
	if (_p)
	{	soap_default___trt__GetAudioEncoderConfigurationOptions(soap, _p);
		_p->trt__GetAudioEncoderConfigurationOptions = trt__GetAudioEncoderConfigurationOptions;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__GetAudioEncoderConfigurationOptions(struct soap*, const struct __trt__GetAudioEncoderConfigurationOptions *, const char*, const char*);

inline int soap_write___trt__GetAudioEncoderConfigurationOptions(struct soap *soap, struct __trt__GetAudioEncoderConfigurationOptions const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___trt__GetAudioEncoderConfigurationOptions(soap, p), 0) || soap_put___trt__GetAudioEncoderConfigurationOptions(soap, p, "-trt:GetAudioEncoderConfigurationOptions", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__GetAudioEncoderConfigurationOptions * SOAP_FMAC4 soap_get___trt__GetAudioEncoderConfigurationOptions(struct soap*, struct __trt__GetAudioEncoderConfigurationOptions *, const char*, const char*);

inline int soap_read___trt__GetAudioEncoderConfigurationOptions(struct soap *soap, struct __trt__GetAudioEncoderConfigurationOptions *p)
{
	if (p)
	{	soap_default___trt__GetAudioEncoderConfigurationOptions(soap, p);
		if (soap_begin_recv(soap) || soap_get___trt__GetAudioEncoderConfigurationOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___trt__GetAudioSourceConfigurationOptions_DEFINED
#define SOAP_TYPE___trt__GetAudioSourceConfigurationOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__GetAudioSourceConfigurationOptions(struct soap*, struct __trt__GetAudioSourceConfigurationOptions *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__GetAudioSourceConfigurationOptions(struct soap*, const struct __trt__GetAudioSourceConfigurationOptions *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__GetAudioSourceConfigurationOptions(struct soap*, const char*, int, const struct __trt__GetAudioSourceConfigurationOptions *, const char*);
SOAP_FMAC3 struct __trt__GetAudioSourceConfigurationOptions * SOAP_FMAC4 soap_in___trt__GetAudioSourceConfigurationOptions(struct soap*, const char*, struct __trt__GetAudioSourceConfigurationOptions *, const char*);
SOAP_FMAC1 struct __trt__GetAudioSourceConfigurationOptions * SOAP_FMAC2 soap_instantiate___trt__GetAudioSourceConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__GetAudioSourceConfigurationOptions * soap_new___trt__GetAudioSourceConfigurationOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__GetAudioSourceConfigurationOptions(soap, n, NULL, NULL, NULL);
}

inline struct __trt__GetAudioSourceConfigurationOptions * soap_new_req___trt__GetAudioSourceConfigurationOptions(
	struct soap *soap)
{
	struct __trt__GetAudioSourceConfigurationOptions *_p = soap_new___trt__GetAudioSourceConfigurationOptions(soap);
	if (_p)
	{	soap_default___trt__GetAudioSourceConfigurationOptions(soap, _p);
	}
	return _p;
}

inline struct __trt__GetAudioSourceConfigurationOptions * soap_new_set___trt__GetAudioSourceConfigurationOptions(
	struct soap *soap,
	_trt__GetAudioSourceConfigurationOptions *trt__GetAudioSourceConfigurationOptions)
{
	struct __trt__GetAudioSourceConfigurationOptions *_p = soap_new___trt__GetAudioSourceConfigurationOptions(soap);
	if (_p)
	{	soap_default___trt__GetAudioSourceConfigurationOptions(soap, _p);
		_p->trt__GetAudioSourceConfigurationOptions = trt__GetAudioSourceConfigurationOptions;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__GetAudioSourceConfigurationOptions(struct soap*, const struct __trt__GetAudioSourceConfigurationOptions *, const char*, const char*);

inline int soap_write___trt__GetAudioSourceConfigurationOptions(struct soap *soap, struct __trt__GetAudioSourceConfigurationOptions const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___trt__GetAudioSourceConfigurationOptions(soap, p), 0) || soap_put___trt__GetAudioSourceConfigurationOptions(soap, p, "-trt:GetAudioSourceConfigurationOptions", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__GetAudioSourceConfigurationOptions * SOAP_FMAC4 soap_get___trt__GetAudioSourceConfigurationOptions(struct soap*, struct __trt__GetAudioSourceConfigurationOptions *, const char*, const char*);

inline int soap_read___trt__GetAudioSourceConfigurationOptions(struct soap *soap, struct __trt__GetAudioSourceConfigurationOptions *p)
{
	if (p)
	{	soap_default___trt__GetAudioSourceConfigurationOptions(soap, p);
		if (soap_begin_recv(soap) || soap_get___trt__GetAudioSourceConfigurationOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___trt__GetVideoEncoderConfigurationOptions_DEFINED
#define SOAP_TYPE___trt__GetVideoEncoderConfigurationOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__GetVideoEncoderConfigurationOptions(struct soap*, struct __trt__GetVideoEncoderConfigurationOptions *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__GetVideoEncoderConfigurationOptions(struct soap*, const struct __trt__GetVideoEncoderConfigurationOptions *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__GetVideoEncoderConfigurationOptions(struct soap*, const char*, int, const struct __trt__GetVideoEncoderConfigurationOptions *, const char*);
SOAP_FMAC3 struct __trt__GetVideoEncoderConfigurationOptions * SOAP_FMAC4 soap_in___trt__GetVideoEncoderConfigurationOptions(struct soap*, const char*, struct __trt__GetVideoEncoderConfigurationOptions *, const char*);
SOAP_FMAC1 struct __trt__GetVideoEncoderConfigurationOptions * SOAP_FMAC2 soap_instantiate___trt__GetVideoEncoderConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__GetVideoEncoderConfigurationOptions * soap_new___trt__GetVideoEncoderConfigurationOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__GetVideoEncoderConfigurationOptions(soap, n, NULL, NULL, NULL);
}

inline struct __trt__GetVideoEncoderConfigurationOptions * soap_new_req___trt__GetVideoEncoderConfigurationOptions(
	struct soap *soap)
{
	struct __trt__GetVideoEncoderConfigurationOptions *_p = soap_new___trt__GetVideoEncoderConfigurationOptions(soap);
	if (_p)
	{	soap_default___trt__GetVideoEncoderConfigurationOptions(soap, _p);
	}
	return _p;
}

inline struct __trt__GetVideoEncoderConfigurationOptions * soap_new_set___trt__GetVideoEncoderConfigurationOptions(
	struct soap *soap,
	_trt__GetVideoEncoderConfigurationOptions *trt__GetVideoEncoderConfigurationOptions)
{
	struct __trt__GetVideoEncoderConfigurationOptions *_p = soap_new___trt__GetVideoEncoderConfigurationOptions(soap);
	if (_p)
	{	soap_default___trt__GetVideoEncoderConfigurationOptions(soap, _p);
		_p->trt__GetVideoEncoderConfigurationOptions = trt__GetVideoEncoderConfigurationOptions;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__GetVideoEncoderConfigurationOptions(struct soap*, const struct __trt__GetVideoEncoderConfigurationOptions *, const char*, const char*);

inline int soap_write___trt__GetVideoEncoderConfigurationOptions(struct soap *soap, struct __trt__GetVideoEncoderConfigurationOptions const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___trt__GetVideoEncoderConfigurationOptions(soap, p), 0) || soap_put___trt__GetVideoEncoderConfigurationOptions(soap, p, "-trt:GetVideoEncoderConfigurationOptions", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__GetVideoEncoderConfigurationOptions * SOAP_FMAC4 soap_get___trt__GetVideoEncoderConfigurationOptions(struct soap*, struct __trt__GetVideoEncoderConfigurationOptions *, const char*, const char*);

inline int soap_read___trt__GetVideoEncoderConfigurationOptions(struct soap *soap, struct __trt__GetVideoEncoderConfigurationOptions *p)
{
	if (p)
	{	soap_default___trt__GetVideoEncoderConfigurationOptions(soap, p);
		if (soap_begin_recv(soap) || soap_get___trt__GetVideoEncoderConfigurationOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___trt__GetVideoSourceConfigurationOptions_DEFINED
#define SOAP_TYPE___trt__GetVideoSourceConfigurationOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__GetVideoSourceConfigurationOptions(struct soap*, struct __trt__GetVideoSourceConfigurationOptions *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__GetVideoSourceConfigurationOptions(struct soap*, const struct __trt__GetVideoSourceConfigurationOptions *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__GetVideoSourceConfigurationOptions(struct soap*, const char*, int, const struct __trt__GetVideoSourceConfigurationOptions *, const char*);
SOAP_FMAC3 struct __trt__GetVideoSourceConfigurationOptions * SOAP_FMAC4 soap_in___trt__GetVideoSourceConfigurationOptions(struct soap*, const char*, struct __trt__GetVideoSourceConfigurationOptions *, const char*);
SOAP_FMAC1 struct __trt__GetVideoSourceConfigurationOptions * SOAP_FMAC2 soap_instantiate___trt__GetVideoSourceConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__GetVideoSourceConfigurationOptions * soap_new___trt__GetVideoSourceConfigurationOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__GetVideoSourceConfigurationOptions(soap, n, NULL, NULL, NULL);
}

inline struct __trt__GetVideoSourceConfigurationOptions * soap_new_req___trt__GetVideoSourceConfigurationOptions(
	struct soap *soap)
{
	struct __trt__GetVideoSourceConfigurationOptions *_p = soap_new___trt__GetVideoSourceConfigurationOptions(soap);
	if (_p)
	{	soap_default___trt__GetVideoSourceConfigurationOptions(soap, _p);
	}
	return _p;
}

inline struct __trt__GetVideoSourceConfigurationOptions * soap_new_set___trt__GetVideoSourceConfigurationOptions(
	struct soap *soap,
	_trt__GetVideoSourceConfigurationOptions *trt__GetVideoSourceConfigurationOptions)
{
	struct __trt__GetVideoSourceConfigurationOptions *_p = soap_new___trt__GetVideoSourceConfigurationOptions(soap);
	if (_p)
	{	soap_default___trt__GetVideoSourceConfigurationOptions(soap, _p);
		_p->trt__GetVideoSourceConfigurationOptions = trt__GetVideoSourceConfigurationOptions;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__GetVideoSourceConfigurationOptions(struct soap*, const struct __trt__GetVideoSourceConfigurationOptions *, const char*, const char*);

inline int soap_write___trt__GetVideoSourceConfigurationOptions(struct soap *soap, struct __trt__GetVideoSourceConfigurationOptions const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___trt__GetVideoSourceConfigurationOptions(soap, p), 0) || soap_put___trt__GetVideoSourceConfigurationOptions(soap, p, "-trt:GetVideoSourceConfigurationOptions", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__GetVideoSourceConfigurationOptions * SOAP_FMAC4 soap_get___trt__GetVideoSourceConfigurationOptions(struct soap*, struct __trt__GetVideoSourceConfigurationOptions *, const char*, const char*);

inline int soap_read___trt__GetVideoSourceConfigurationOptions(struct soap *soap, struct __trt__GetVideoSourceConfigurationOptions *p)
{
	if (p)
	{	soap_default___trt__GetVideoSourceConfigurationOptions(soap, p);
		if (soap_begin_recv(soap) || soap_get___trt__GetVideoSourceConfigurationOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___trt__SetAudioDecoderConfiguration_DEFINED
#define SOAP_TYPE___trt__SetAudioDecoderConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__SetAudioDecoderConfiguration(struct soap*, struct __trt__SetAudioDecoderConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__SetAudioDecoderConfiguration(struct soap*, const struct __trt__SetAudioDecoderConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__SetAudioDecoderConfiguration(struct soap*, const char*, int, const struct __trt__SetAudioDecoderConfiguration *, const char*);
SOAP_FMAC3 struct __trt__SetAudioDecoderConfiguration * SOAP_FMAC4 soap_in___trt__SetAudioDecoderConfiguration(struct soap*, const char*, struct __trt__SetAudioDecoderConfiguration *, const char*);
SOAP_FMAC1 struct __trt__SetAudioDecoderConfiguration * SOAP_FMAC2 soap_instantiate___trt__SetAudioDecoderConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__SetAudioDecoderConfiguration * soap_new___trt__SetAudioDecoderConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__SetAudioDecoderConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __trt__SetAudioDecoderConfiguration * soap_new_req___trt__SetAudioDecoderConfiguration(
	struct soap *soap)
{
	struct __trt__SetAudioDecoderConfiguration *_p = soap_new___trt__SetAudioDecoderConfiguration(soap);
	if (_p)
	{	soap_default___trt__SetAudioDecoderConfiguration(soap, _p);
	}
	return _p;
}

inline struct __trt__SetAudioDecoderConfiguration * soap_new_set___trt__SetAudioDecoderConfiguration(
	struct soap *soap,
	_trt__SetAudioDecoderConfiguration *trt__SetAudioDecoderConfiguration)
{
	struct __trt__SetAudioDecoderConfiguration *_p = soap_new___trt__SetAudioDecoderConfiguration(soap);
	if (_p)
	{	soap_default___trt__SetAudioDecoderConfiguration(soap, _p);
		_p->trt__SetAudioDecoderConfiguration = trt__SetAudioDecoderConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__SetAudioDecoderConfiguration(struct soap*, const struct __trt__SetAudioDecoderConfiguration *, const char*, const char*);

inline int soap_write___trt__SetAudioDecoderConfiguration(struct soap *soap, struct __trt__SetAudioDecoderConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___trt__SetAudioDecoderConfiguration(soap, p), 0) || soap_put___trt__SetAudioDecoderConfiguration(soap, p, "-trt:SetAudioDecoderConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__SetAudioDecoderConfiguration * SOAP_FMAC4 soap_get___trt__SetAudioDecoderConfiguration(struct soap*, struct __trt__SetAudioDecoderConfiguration *, const char*, const char*);

inline int soap_read___trt__SetAudioDecoderConfiguration(struct soap *soap, struct __trt__SetAudioDecoderConfiguration *p)
{
	if (p)
	{	soap_default___trt__SetAudioDecoderConfiguration(soap, p);
		if (soap_begin_recv(soap) || soap_get___trt__SetAudioDecoderConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___trt__SetAudioOutputConfiguration_DEFINED
#define SOAP_TYPE___trt__SetAudioOutputConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__SetAudioOutputConfiguration(struct soap*, struct __trt__SetAudioOutputConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__SetAudioOutputConfiguration(struct soap*, const struct __trt__SetAudioOutputConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__SetAudioOutputConfiguration(struct soap*, const char*, int, const struct __trt__SetAudioOutputConfiguration *, const char*);
SOAP_FMAC3 struct __trt__SetAudioOutputConfiguration * SOAP_FMAC4 soap_in___trt__SetAudioOutputConfiguration(struct soap*, const char*, struct __trt__SetAudioOutputConfiguration *, const char*);
SOAP_FMAC1 struct __trt__SetAudioOutputConfiguration * SOAP_FMAC2 soap_instantiate___trt__SetAudioOutputConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__SetAudioOutputConfiguration * soap_new___trt__SetAudioOutputConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__SetAudioOutputConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __trt__SetAudioOutputConfiguration * soap_new_req___trt__SetAudioOutputConfiguration(
	struct soap *soap)
{
	struct __trt__SetAudioOutputConfiguration *_p = soap_new___trt__SetAudioOutputConfiguration(soap);
	if (_p)
	{	soap_default___trt__SetAudioOutputConfiguration(soap, _p);
	}
	return _p;
}

inline struct __trt__SetAudioOutputConfiguration * soap_new_set___trt__SetAudioOutputConfiguration(
	struct soap *soap,
	_trt__SetAudioOutputConfiguration *trt__SetAudioOutputConfiguration)
{
	struct __trt__SetAudioOutputConfiguration *_p = soap_new___trt__SetAudioOutputConfiguration(soap);
	if (_p)
	{	soap_default___trt__SetAudioOutputConfiguration(soap, _p);
		_p->trt__SetAudioOutputConfiguration = trt__SetAudioOutputConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__SetAudioOutputConfiguration(struct soap*, const struct __trt__SetAudioOutputConfiguration *, const char*, const char*);

inline int soap_write___trt__SetAudioOutputConfiguration(struct soap *soap, struct __trt__SetAudioOutputConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___trt__SetAudioOutputConfiguration(soap, p), 0) || soap_put___trt__SetAudioOutputConfiguration(soap, p, "-trt:SetAudioOutputConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__SetAudioOutputConfiguration * SOAP_FMAC4 soap_get___trt__SetAudioOutputConfiguration(struct soap*, struct __trt__SetAudioOutputConfiguration *, const char*, const char*);

inline int soap_read___trt__SetAudioOutputConfiguration(struct soap *soap, struct __trt__SetAudioOutputConfiguration *p)
{
	if (p)
	{	soap_default___trt__SetAudioOutputConfiguration(soap, p);
		if (soap_begin_recv(soap) || soap_get___trt__SetAudioOutputConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___trt__SetMetadataConfiguration_DEFINED
#define SOAP_TYPE___trt__SetMetadataConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__SetMetadataConfiguration(struct soap*, struct __trt__SetMetadataConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__SetMetadataConfiguration(struct soap*, const struct __trt__SetMetadataConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__SetMetadataConfiguration(struct soap*, const char*, int, const struct __trt__SetMetadataConfiguration *, const char*);
SOAP_FMAC3 struct __trt__SetMetadataConfiguration * SOAP_FMAC4 soap_in___trt__SetMetadataConfiguration(struct soap*, const char*, struct __trt__SetMetadataConfiguration *, const char*);
SOAP_FMAC1 struct __trt__SetMetadataConfiguration * SOAP_FMAC2 soap_instantiate___trt__SetMetadataConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__SetMetadataConfiguration * soap_new___trt__SetMetadataConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__SetMetadataConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __trt__SetMetadataConfiguration * soap_new_req___trt__SetMetadataConfiguration(
	struct soap *soap)
{
	struct __trt__SetMetadataConfiguration *_p = soap_new___trt__SetMetadataConfiguration(soap);
	if (_p)
	{	soap_default___trt__SetMetadataConfiguration(soap, _p);
	}
	return _p;
}

inline struct __trt__SetMetadataConfiguration * soap_new_set___trt__SetMetadataConfiguration(
	struct soap *soap,
	_trt__SetMetadataConfiguration *trt__SetMetadataConfiguration)
{
	struct __trt__SetMetadataConfiguration *_p = soap_new___trt__SetMetadataConfiguration(soap);
	if (_p)
	{	soap_default___trt__SetMetadataConfiguration(soap, _p);
		_p->trt__SetMetadataConfiguration = trt__SetMetadataConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__SetMetadataConfiguration(struct soap*, const struct __trt__SetMetadataConfiguration *, const char*, const char*);

inline int soap_write___trt__SetMetadataConfiguration(struct soap *soap, struct __trt__SetMetadataConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___trt__SetMetadataConfiguration(soap, p), 0) || soap_put___trt__SetMetadataConfiguration(soap, p, "-trt:SetMetadataConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__SetMetadataConfiguration * SOAP_FMAC4 soap_get___trt__SetMetadataConfiguration(struct soap*, struct __trt__SetMetadataConfiguration *, const char*, const char*);

inline int soap_read___trt__SetMetadataConfiguration(struct soap *soap, struct __trt__SetMetadataConfiguration *p)
{
	if (p)
	{	soap_default___trt__SetMetadataConfiguration(soap, p);
		if (soap_begin_recv(soap) || soap_get___trt__SetMetadataConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___trt__SetVideoAnalyticsConfiguration_DEFINED
#define SOAP_TYPE___trt__SetVideoAnalyticsConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__SetVideoAnalyticsConfiguration(struct soap*, struct __trt__SetVideoAnalyticsConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__SetVideoAnalyticsConfiguration(struct soap*, const struct __trt__SetVideoAnalyticsConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__SetVideoAnalyticsConfiguration(struct soap*, const char*, int, const struct __trt__SetVideoAnalyticsConfiguration *, const char*);
SOAP_FMAC3 struct __trt__SetVideoAnalyticsConfiguration * SOAP_FMAC4 soap_in___trt__SetVideoAnalyticsConfiguration(struct soap*, const char*, struct __trt__SetVideoAnalyticsConfiguration *, const char*);
SOAP_FMAC1 struct __trt__SetVideoAnalyticsConfiguration * SOAP_FMAC2 soap_instantiate___trt__SetVideoAnalyticsConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__SetVideoAnalyticsConfiguration * soap_new___trt__SetVideoAnalyticsConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__SetVideoAnalyticsConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __trt__SetVideoAnalyticsConfiguration * soap_new_req___trt__SetVideoAnalyticsConfiguration(
	struct soap *soap)
{
	struct __trt__SetVideoAnalyticsConfiguration *_p = soap_new___trt__SetVideoAnalyticsConfiguration(soap);
	if (_p)
	{	soap_default___trt__SetVideoAnalyticsConfiguration(soap, _p);
	}
	return _p;
}

inline struct __trt__SetVideoAnalyticsConfiguration * soap_new_set___trt__SetVideoAnalyticsConfiguration(
	struct soap *soap,
	_trt__SetVideoAnalyticsConfiguration *trt__SetVideoAnalyticsConfiguration)
{
	struct __trt__SetVideoAnalyticsConfiguration *_p = soap_new___trt__SetVideoAnalyticsConfiguration(soap);
	if (_p)
	{	soap_default___trt__SetVideoAnalyticsConfiguration(soap, _p);
		_p->trt__SetVideoAnalyticsConfiguration = trt__SetVideoAnalyticsConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__SetVideoAnalyticsConfiguration(struct soap*, const struct __trt__SetVideoAnalyticsConfiguration *, const char*, const char*);

inline int soap_write___trt__SetVideoAnalyticsConfiguration(struct soap *soap, struct __trt__SetVideoAnalyticsConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___trt__SetVideoAnalyticsConfiguration(soap, p), 0) || soap_put___trt__SetVideoAnalyticsConfiguration(soap, p, "-trt:SetVideoAnalyticsConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__SetVideoAnalyticsConfiguration * SOAP_FMAC4 soap_get___trt__SetVideoAnalyticsConfiguration(struct soap*, struct __trt__SetVideoAnalyticsConfiguration *, const char*, const char*);

inline int soap_read___trt__SetVideoAnalyticsConfiguration(struct soap *soap, struct __trt__SetVideoAnalyticsConfiguration *p)
{
	if (p)
	{	soap_default___trt__SetVideoAnalyticsConfiguration(soap, p);
		if (soap_begin_recv(soap) || soap_get___trt__SetVideoAnalyticsConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___trt__SetAudioEncoderConfiguration_DEFINED
#define SOAP_TYPE___trt__SetAudioEncoderConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__SetAudioEncoderConfiguration(struct soap*, struct __trt__SetAudioEncoderConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__SetAudioEncoderConfiguration(struct soap*, const struct __trt__SetAudioEncoderConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__SetAudioEncoderConfiguration(struct soap*, const char*, int, const struct __trt__SetAudioEncoderConfiguration *, const char*);
SOAP_FMAC3 struct __trt__SetAudioEncoderConfiguration * SOAP_FMAC4 soap_in___trt__SetAudioEncoderConfiguration(struct soap*, const char*, struct __trt__SetAudioEncoderConfiguration *, const char*);
SOAP_FMAC1 struct __trt__SetAudioEncoderConfiguration * SOAP_FMAC2 soap_instantiate___trt__SetAudioEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__SetAudioEncoderConfiguration * soap_new___trt__SetAudioEncoderConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__SetAudioEncoderConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __trt__SetAudioEncoderConfiguration * soap_new_req___trt__SetAudioEncoderConfiguration(
	struct soap *soap)
{
	struct __trt__SetAudioEncoderConfiguration *_p = soap_new___trt__SetAudioEncoderConfiguration(soap);
	if (_p)
	{	soap_default___trt__SetAudioEncoderConfiguration(soap, _p);
	}
	return _p;
}

inline struct __trt__SetAudioEncoderConfiguration * soap_new_set___trt__SetAudioEncoderConfiguration(
	struct soap *soap,
	_trt__SetAudioEncoderConfiguration *trt__SetAudioEncoderConfiguration)
{
	struct __trt__SetAudioEncoderConfiguration *_p = soap_new___trt__SetAudioEncoderConfiguration(soap);
	if (_p)
	{	soap_default___trt__SetAudioEncoderConfiguration(soap, _p);
		_p->trt__SetAudioEncoderConfiguration = trt__SetAudioEncoderConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__SetAudioEncoderConfiguration(struct soap*, const struct __trt__SetAudioEncoderConfiguration *, const char*, const char*);

inline int soap_write___trt__SetAudioEncoderConfiguration(struct soap *soap, struct __trt__SetAudioEncoderConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___trt__SetAudioEncoderConfiguration(soap, p), 0) || soap_put___trt__SetAudioEncoderConfiguration(soap, p, "-trt:SetAudioEncoderConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__SetAudioEncoderConfiguration * SOAP_FMAC4 soap_get___trt__SetAudioEncoderConfiguration(struct soap*, struct __trt__SetAudioEncoderConfiguration *, const char*, const char*);

inline int soap_read___trt__SetAudioEncoderConfiguration(struct soap *soap, struct __trt__SetAudioEncoderConfiguration *p)
{
	if (p)
	{	soap_default___trt__SetAudioEncoderConfiguration(soap, p);
		if (soap_begin_recv(soap) || soap_get___trt__SetAudioEncoderConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___trt__SetAudioSourceConfiguration_DEFINED
#define SOAP_TYPE___trt__SetAudioSourceConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__SetAudioSourceConfiguration(struct soap*, struct __trt__SetAudioSourceConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__SetAudioSourceConfiguration(struct soap*, const struct __trt__SetAudioSourceConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__SetAudioSourceConfiguration(struct soap*, const char*, int, const struct __trt__SetAudioSourceConfiguration *, const char*);
SOAP_FMAC3 struct __trt__SetAudioSourceConfiguration * SOAP_FMAC4 soap_in___trt__SetAudioSourceConfiguration(struct soap*, const char*, struct __trt__SetAudioSourceConfiguration *, const char*);
SOAP_FMAC1 struct __trt__SetAudioSourceConfiguration * SOAP_FMAC2 soap_instantiate___trt__SetAudioSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__SetAudioSourceConfiguration * soap_new___trt__SetAudioSourceConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__SetAudioSourceConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __trt__SetAudioSourceConfiguration * soap_new_req___trt__SetAudioSourceConfiguration(
	struct soap *soap)
{
	struct __trt__SetAudioSourceConfiguration *_p = soap_new___trt__SetAudioSourceConfiguration(soap);
	if (_p)
	{	soap_default___trt__SetAudioSourceConfiguration(soap, _p);
	}
	return _p;
}

inline struct __trt__SetAudioSourceConfiguration * soap_new_set___trt__SetAudioSourceConfiguration(
	struct soap *soap,
	_trt__SetAudioSourceConfiguration *trt__SetAudioSourceConfiguration)
{
	struct __trt__SetAudioSourceConfiguration *_p = soap_new___trt__SetAudioSourceConfiguration(soap);
	if (_p)
	{	soap_default___trt__SetAudioSourceConfiguration(soap, _p);
		_p->trt__SetAudioSourceConfiguration = trt__SetAudioSourceConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__SetAudioSourceConfiguration(struct soap*, const struct __trt__SetAudioSourceConfiguration *, const char*, const char*);

inline int soap_write___trt__SetAudioSourceConfiguration(struct soap *soap, struct __trt__SetAudioSourceConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___trt__SetAudioSourceConfiguration(soap, p), 0) || soap_put___trt__SetAudioSourceConfiguration(soap, p, "-trt:SetAudioSourceConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__SetAudioSourceConfiguration * SOAP_FMAC4 soap_get___trt__SetAudioSourceConfiguration(struct soap*, struct __trt__SetAudioSourceConfiguration *, const char*, const char*);

inline int soap_read___trt__SetAudioSourceConfiguration(struct soap *soap, struct __trt__SetAudioSourceConfiguration *p)
{
	if (p)
	{	soap_default___trt__SetAudioSourceConfiguration(soap, p);
		if (soap_begin_recv(soap) || soap_get___trt__SetAudioSourceConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___trt__SetVideoEncoderConfiguration_DEFINED
#define SOAP_TYPE___trt__SetVideoEncoderConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__SetVideoEncoderConfiguration(struct soap*, struct __trt__SetVideoEncoderConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__SetVideoEncoderConfiguration(struct soap*, const struct __trt__SetVideoEncoderConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__SetVideoEncoderConfiguration(struct soap*, const char*, int, const struct __trt__SetVideoEncoderConfiguration *, const char*);
SOAP_FMAC3 struct __trt__SetVideoEncoderConfiguration * SOAP_FMAC4 soap_in___trt__SetVideoEncoderConfiguration(struct soap*, const char*, struct __trt__SetVideoEncoderConfiguration *, const char*);
SOAP_FMAC1 struct __trt__SetVideoEncoderConfiguration * SOAP_FMAC2 soap_instantiate___trt__SetVideoEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__SetVideoEncoderConfiguration * soap_new___trt__SetVideoEncoderConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__SetVideoEncoderConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __trt__SetVideoEncoderConfiguration * soap_new_req___trt__SetVideoEncoderConfiguration(
	struct soap *soap)
{
	struct __trt__SetVideoEncoderConfiguration *_p = soap_new___trt__SetVideoEncoderConfiguration(soap);
	if (_p)
	{	soap_default___trt__SetVideoEncoderConfiguration(soap, _p);
	}
	return _p;
}

inline struct __trt__SetVideoEncoderConfiguration * soap_new_set___trt__SetVideoEncoderConfiguration(
	struct soap *soap,
	_trt__SetVideoEncoderConfiguration *trt__SetVideoEncoderConfiguration)
{
	struct __trt__SetVideoEncoderConfiguration *_p = soap_new___trt__SetVideoEncoderConfiguration(soap);
	if (_p)
	{	soap_default___trt__SetVideoEncoderConfiguration(soap, _p);
		_p->trt__SetVideoEncoderConfiguration = trt__SetVideoEncoderConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__SetVideoEncoderConfiguration(struct soap*, const struct __trt__SetVideoEncoderConfiguration *, const char*, const char*);

inline int soap_write___trt__SetVideoEncoderConfiguration(struct soap *soap, struct __trt__SetVideoEncoderConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___trt__SetVideoEncoderConfiguration(soap, p), 0) || soap_put___trt__SetVideoEncoderConfiguration(soap, p, "-trt:SetVideoEncoderConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__SetVideoEncoderConfiguration * SOAP_FMAC4 soap_get___trt__SetVideoEncoderConfiguration(struct soap*, struct __trt__SetVideoEncoderConfiguration *, const char*, const char*);

inline int soap_read___trt__SetVideoEncoderConfiguration(struct soap *soap, struct __trt__SetVideoEncoderConfiguration *p)
{
	if (p)
	{	soap_default___trt__SetVideoEncoderConfiguration(soap, p);
		if (soap_begin_recv(soap) || soap_get___trt__SetVideoEncoderConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___trt__SetVideoSourceConfiguration_DEFINED
#define SOAP_TYPE___trt__SetVideoSourceConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__SetVideoSourceConfiguration(struct soap*, struct __trt__SetVideoSourceConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__SetVideoSourceConfiguration(struct soap*, const struct __trt__SetVideoSourceConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__SetVideoSourceConfiguration(struct soap*, const char*, int, const struct __trt__SetVideoSourceConfiguration *, const char*);
SOAP_FMAC3 struct __trt__SetVideoSourceConfiguration * SOAP_FMAC4 soap_in___trt__SetVideoSourceConfiguration(struct soap*, const char*, struct __trt__SetVideoSourceConfiguration *, const char*);
SOAP_FMAC1 struct __trt__SetVideoSourceConfiguration * SOAP_FMAC2 soap_instantiate___trt__SetVideoSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__SetVideoSourceConfiguration * soap_new___trt__SetVideoSourceConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__SetVideoSourceConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __trt__SetVideoSourceConfiguration * soap_new_req___trt__SetVideoSourceConfiguration(
	struct soap *soap)
{
	struct __trt__SetVideoSourceConfiguration *_p = soap_new___trt__SetVideoSourceConfiguration(soap);
	if (_p)
	{	soap_default___trt__SetVideoSourceConfiguration(soap, _p);
	}
	return _p;
}

inline struct __trt__SetVideoSourceConfiguration * soap_new_set___trt__SetVideoSourceConfiguration(
	struct soap *soap,
	_trt__SetVideoSourceConfiguration *trt__SetVideoSourceConfiguration)
{
	struct __trt__SetVideoSourceConfiguration *_p = soap_new___trt__SetVideoSourceConfiguration(soap);
	if (_p)
	{	soap_default___trt__SetVideoSourceConfiguration(soap, _p);
		_p->trt__SetVideoSourceConfiguration = trt__SetVideoSourceConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__SetVideoSourceConfiguration(struct soap*, const struct __trt__SetVideoSourceConfiguration *, const char*, const char*);

inline int soap_write___trt__SetVideoSourceConfiguration(struct soap *soap, struct __trt__SetVideoSourceConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___trt__SetVideoSourceConfiguration(soap, p), 0) || soap_put___trt__SetVideoSourceConfiguration(soap, p, "-trt:SetVideoSourceConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__SetVideoSourceConfiguration * SOAP_FMAC4 soap_get___trt__SetVideoSourceConfiguration(struct soap*, struct __trt__SetVideoSourceConfiguration *, const char*, const char*);

inline int soap_read___trt__SetVideoSourceConfiguration(struct soap *soap, struct __trt__SetVideoSourceConfiguration *p)
{
	if (p)
	{	soap_default___trt__SetVideoSourceConfiguration(soap, p);
		if (soap_begin_recv(soap) || soap_get___trt__SetVideoSourceConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___trt__GetCompatibleAudioDecoderConfigurations_DEFINED
#define SOAP_TYPE___trt__GetCompatibleAudioDecoderConfigurations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__GetCompatibleAudioDecoderConfigurations(struct soap*, struct __trt__GetCompatibleAudioDecoderConfigurations *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__GetCompatibleAudioDecoderConfigurations(struct soap*, const struct __trt__GetCompatibleAudioDecoderConfigurations *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__GetCompatibleAudioDecoderConfigurations(struct soap*, const char*, int, const struct __trt__GetCompatibleAudioDecoderConfigurations *, const char*);
SOAP_FMAC3 struct __trt__GetCompatibleAudioDecoderConfigurations * SOAP_FMAC4 soap_in___trt__GetCompatibleAudioDecoderConfigurations(struct soap*, const char*, struct __trt__GetCompatibleAudioDecoderConfigurations *, const char*);
SOAP_FMAC1 struct __trt__GetCompatibleAudioDecoderConfigurations * SOAP_FMAC2 soap_instantiate___trt__GetCompatibleAudioDecoderConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__GetCompatibleAudioDecoderConfigurations * soap_new___trt__GetCompatibleAudioDecoderConfigurations(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__GetCompatibleAudioDecoderConfigurations(soap, n, NULL, NULL, NULL);
}

inline struct __trt__GetCompatibleAudioDecoderConfigurations * soap_new_req___trt__GetCompatibleAudioDecoderConfigurations(
	struct soap *soap)
{
	struct __trt__GetCompatibleAudioDecoderConfigurations *_p = soap_new___trt__GetCompatibleAudioDecoderConfigurations(soap);
	if (_p)
	{	soap_default___trt__GetCompatibleAudioDecoderConfigurations(soap, _p);
	}
	return _p;
}

inline struct __trt__GetCompatibleAudioDecoderConfigurations * soap_new_set___trt__GetCompatibleAudioDecoderConfigurations(
	struct soap *soap,
	_trt__GetCompatibleAudioDecoderConfigurations *trt__GetCompatibleAudioDecoderConfigurations)
{
	struct __trt__GetCompatibleAudioDecoderConfigurations *_p = soap_new___trt__GetCompatibleAudioDecoderConfigurations(soap);
	if (_p)
	{	soap_default___trt__GetCompatibleAudioDecoderConfigurations(soap, _p);
		_p->trt__GetCompatibleAudioDecoderConfigurations = trt__GetCompatibleAudioDecoderConfigurations;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__GetCompatibleAudioDecoderConfigurations(struct soap*, const struct __trt__GetCompatibleAudioDecoderConfigurations *, const char*, const char*);

inline int soap_write___trt__GetCompatibleAudioDecoderConfigurations(struct soap *soap, struct __trt__GetCompatibleAudioDecoderConfigurations const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___trt__GetCompatibleAudioDecoderConfigurations(soap, p), 0) || soap_put___trt__GetCompatibleAudioDecoderConfigurations(soap, p, "-trt:GetCompatibleAudioDecoderConfigurations", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__GetCompatibleAudioDecoderConfigurations * SOAP_FMAC4 soap_get___trt__GetCompatibleAudioDecoderConfigurations(struct soap*, struct __trt__GetCompatibleAudioDecoderConfigurations *, const char*, const char*);

inline int soap_read___trt__GetCompatibleAudioDecoderConfigurations(struct soap *soap, struct __trt__GetCompatibleAudioDecoderConfigurations *p)
{
	if (p)
	{	soap_default___trt__GetCompatibleAudioDecoderConfigurations(soap, p);
		if (soap_begin_recv(soap) || soap_get___trt__GetCompatibleAudioDecoderConfigurations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___trt__GetCompatibleAudioOutputConfigurations_DEFINED
#define SOAP_TYPE___trt__GetCompatibleAudioOutputConfigurations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__GetCompatibleAudioOutputConfigurations(struct soap*, struct __trt__GetCompatibleAudioOutputConfigurations *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__GetCompatibleAudioOutputConfigurations(struct soap*, const struct __trt__GetCompatibleAudioOutputConfigurations *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__GetCompatibleAudioOutputConfigurations(struct soap*, const char*, int, const struct __trt__GetCompatibleAudioOutputConfigurations *, const char*);
SOAP_FMAC3 struct __trt__GetCompatibleAudioOutputConfigurations * SOAP_FMAC4 soap_in___trt__GetCompatibleAudioOutputConfigurations(struct soap*, const char*, struct __trt__GetCompatibleAudioOutputConfigurations *, const char*);
SOAP_FMAC1 struct __trt__GetCompatibleAudioOutputConfigurations * SOAP_FMAC2 soap_instantiate___trt__GetCompatibleAudioOutputConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__GetCompatibleAudioOutputConfigurations * soap_new___trt__GetCompatibleAudioOutputConfigurations(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__GetCompatibleAudioOutputConfigurations(soap, n, NULL, NULL, NULL);
}

inline struct __trt__GetCompatibleAudioOutputConfigurations * soap_new_req___trt__GetCompatibleAudioOutputConfigurations(
	struct soap *soap)
{
	struct __trt__GetCompatibleAudioOutputConfigurations *_p = soap_new___trt__GetCompatibleAudioOutputConfigurations(soap);
	if (_p)
	{	soap_default___trt__GetCompatibleAudioOutputConfigurations(soap, _p);
	}
	return _p;
}

inline struct __trt__GetCompatibleAudioOutputConfigurations * soap_new_set___trt__GetCompatibleAudioOutputConfigurations(
	struct soap *soap,
	_trt__GetCompatibleAudioOutputConfigurations *trt__GetCompatibleAudioOutputConfigurations)
{
	struct __trt__GetCompatibleAudioOutputConfigurations *_p = soap_new___trt__GetCompatibleAudioOutputConfigurations(soap);
	if (_p)
	{	soap_default___trt__GetCompatibleAudioOutputConfigurations(soap, _p);
		_p->trt__GetCompatibleAudioOutputConfigurations = trt__GetCompatibleAudioOutputConfigurations;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__GetCompatibleAudioOutputConfigurations(struct soap*, const struct __trt__GetCompatibleAudioOutputConfigurations *, const char*, const char*);

inline int soap_write___trt__GetCompatibleAudioOutputConfigurations(struct soap *soap, struct __trt__GetCompatibleAudioOutputConfigurations const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___trt__GetCompatibleAudioOutputConfigurations(soap, p), 0) || soap_put___trt__GetCompatibleAudioOutputConfigurations(soap, p, "-trt:GetCompatibleAudioOutputConfigurations", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__GetCompatibleAudioOutputConfigurations * SOAP_FMAC4 soap_get___trt__GetCompatibleAudioOutputConfigurations(struct soap*, struct __trt__GetCompatibleAudioOutputConfigurations *, const char*, const char*);

inline int soap_read___trt__GetCompatibleAudioOutputConfigurations(struct soap *soap, struct __trt__GetCompatibleAudioOutputConfigurations *p)
{
	if (p)
	{	soap_default___trt__GetCompatibleAudioOutputConfigurations(soap, p);
		if (soap_begin_recv(soap) || soap_get___trt__GetCompatibleAudioOutputConfigurations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___trt__GetCompatibleMetadataConfigurations_DEFINED
#define SOAP_TYPE___trt__GetCompatibleMetadataConfigurations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__GetCompatibleMetadataConfigurations(struct soap*, struct __trt__GetCompatibleMetadataConfigurations *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__GetCompatibleMetadataConfigurations(struct soap*, const struct __trt__GetCompatibleMetadataConfigurations *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__GetCompatibleMetadataConfigurations(struct soap*, const char*, int, const struct __trt__GetCompatibleMetadataConfigurations *, const char*);
SOAP_FMAC3 struct __trt__GetCompatibleMetadataConfigurations * SOAP_FMAC4 soap_in___trt__GetCompatibleMetadataConfigurations(struct soap*, const char*, struct __trt__GetCompatibleMetadataConfigurations *, const char*);
SOAP_FMAC1 struct __trt__GetCompatibleMetadataConfigurations * SOAP_FMAC2 soap_instantiate___trt__GetCompatibleMetadataConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__GetCompatibleMetadataConfigurations * soap_new___trt__GetCompatibleMetadataConfigurations(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__GetCompatibleMetadataConfigurations(soap, n, NULL, NULL, NULL);
}

inline struct __trt__GetCompatibleMetadataConfigurations * soap_new_req___trt__GetCompatibleMetadataConfigurations(
	struct soap *soap)
{
	struct __trt__GetCompatibleMetadataConfigurations *_p = soap_new___trt__GetCompatibleMetadataConfigurations(soap);
	if (_p)
	{	soap_default___trt__GetCompatibleMetadataConfigurations(soap, _p);
	}
	return _p;
}

inline struct __trt__GetCompatibleMetadataConfigurations * soap_new_set___trt__GetCompatibleMetadataConfigurations(
	struct soap *soap,
	_trt__GetCompatibleMetadataConfigurations *trt__GetCompatibleMetadataConfigurations)
{
	struct __trt__GetCompatibleMetadataConfigurations *_p = soap_new___trt__GetCompatibleMetadataConfigurations(soap);
	if (_p)
	{	soap_default___trt__GetCompatibleMetadataConfigurations(soap, _p);
		_p->trt__GetCompatibleMetadataConfigurations = trt__GetCompatibleMetadataConfigurations;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__GetCompatibleMetadataConfigurations(struct soap*, const struct __trt__GetCompatibleMetadataConfigurations *, const char*, const char*);

inline int soap_write___trt__GetCompatibleMetadataConfigurations(struct soap *soap, struct __trt__GetCompatibleMetadataConfigurations const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___trt__GetCompatibleMetadataConfigurations(soap, p), 0) || soap_put___trt__GetCompatibleMetadataConfigurations(soap, p, "-trt:GetCompatibleMetadataConfigurations", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__GetCompatibleMetadataConfigurations * SOAP_FMAC4 soap_get___trt__GetCompatibleMetadataConfigurations(struct soap*, struct __trt__GetCompatibleMetadataConfigurations *, const char*, const char*);

inline int soap_read___trt__GetCompatibleMetadataConfigurations(struct soap *soap, struct __trt__GetCompatibleMetadataConfigurations *p)
{
	if (p)
	{	soap_default___trt__GetCompatibleMetadataConfigurations(soap, p);
		if (soap_begin_recv(soap) || soap_get___trt__GetCompatibleMetadataConfigurations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___trt__GetCompatibleVideoAnalyticsConfigurations_DEFINED
#define SOAP_TYPE___trt__GetCompatibleVideoAnalyticsConfigurations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__GetCompatibleVideoAnalyticsConfigurations(struct soap*, struct __trt__GetCompatibleVideoAnalyticsConfigurations *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__GetCompatibleVideoAnalyticsConfigurations(struct soap*, const struct __trt__GetCompatibleVideoAnalyticsConfigurations *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__GetCompatibleVideoAnalyticsConfigurations(struct soap*, const char*, int, const struct __trt__GetCompatibleVideoAnalyticsConfigurations *, const char*);
SOAP_FMAC3 struct __trt__GetCompatibleVideoAnalyticsConfigurations * SOAP_FMAC4 soap_in___trt__GetCompatibleVideoAnalyticsConfigurations(struct soap*, const char*, struct __trt__GetCompatibleVideoAnalyticsConfigurations *, const char*);
SOAP_FMAC1 struct __trt__GetCompatibleVideoAnalyticsConfigurations * SOAP_FMAC2 soap_instantiate___trt__GetCompatibleVideoAnalyticsConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__GetCompatibleVideoAnalyticsConfigurations * soap_new___trt__GetCompatibleVideoAnalyticsConfigurations(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__GetCompatibleVideoAnalyticsConfigurations(soap, n, NULL, NULL, NULL);
}

inline struct __trt__GetCompatibleVideoAnalyticsConfigurations * soap_new_req___trt__GetCompatibleVideoAnalyticsConfigurations(
	struct soap *soap)
{
	struct __trt__GetCompatibleVideoAnalyticsConfigurations *_p = soap_new___trt__GetCompatibleVideoAnalyticsConfigurations(soap);
	if (_p)
	{	soap_default___trt__GetCompatibleVideoAnalyticsConfigurations(soap, _p);
	}
	return _p;
}

inline struct __trt__GetCompatibleVideoAnalyticsConfigurations * soap_new_set___trt__GetCompatibleVideoAnalyticsConfigurations(
	struct soap *soap,
	_trt__GetCompatibleVideoAnalyticsConfigurations *trt__GetCompatibleVideoAnalyticsConfigurations)
{
	struct __trt__GetCompatibleVideoAnalyticsConfigurations *_p = soap_new___trt__GetCompatibleVideoAnalyticsConfigurations(soap);
	if (_p)
	{	soap_default___trt__GetCompatibleVideoAnalyticsConfigurations(soap, _p);
		_p->trt__GetCompatibleVideoAnalyticsConfigurations = trt__GetCompatibleVideoAnalyticsConfigurations;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__GetCompatibleVideoAnalyticsConfigurations(struct soap*, const struct __trt__GetCompatibleVideoAnalyticsConfigurations *, const char*, const char*);

inline int soap_write___trt__GetCompatibleVideoAnalyticsConfigurations(struct soap *soap, struct __trt__GetCompatibleVideoAnalyticsConfigurations const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___trt__GetCompatibleVideoAnalyticsConfigurations(soap, p), 0) || soap_put___trt__GetCompatibleVideoAnalyticsConfigurations(soap, p, "-trt:GetCompatibleVideoAnalyticsConfigurations", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__GetCompatibleVideoAnalyticsConfigurations * SOAP_FMAC4 soap_get___trt__GetCompatibleVideoAnalyticsConfigurations(struct soap*, struct __trt__GetCompatibleVideoAnalyticsConfigurations *, const char*, const char*);

inline int soap_read___trt__GetCompatibleVideoAnalyticsConfigurations(struct soap *soap, struct __trt__GetCompatibleVideoAnalyticsConfigurations *p)
{
	if (p)
	{	soap_default___trt__GetCompatibleVideoAnalyticsConfigurations(soap, p);
		if (soap_begin_recv(soap) || soap_get___trt__GetCompatibleVideoAnalyticsConfigurations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___trt__GetCompatibleAudioSourceConfigurations_DEFINED
#define SOAP_TYPE___trt__GetCompatibleAudioSourceConfigurations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__GetCompatibleAudioSourceConfigurations(struct soap*, struct __trt__GetCompatibleAudioSourceConfigurations *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__GetCompatibleAudioSourceConfigurations(struct soap*, const struct __trt__GetCompatibleAudioSourceConfigurations *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__GetCompatibleAudioSourceConfigurations(struct soap*, const char*, int, const struct __trt__GetCompatibleAudioSourceConfigurations *, const char*);
SOAP_FMAC3 struct __trt__GetCompatibleAudioSourceConfigurations * SOAP_FMAC4 soap_in___trt__GetCompatibleAudioSourceConfigurations(struct soap*, const char*, struct __trt__GetCompatibleAudioSourceConfigurations *, const char*);
SOAP_FMAC1 struct __trt__GetCompatibleAudioSourceConfigurations * SOAP_FMAC2 soap_instantiate___trt__GetCompatibleAudioSourceConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__GetCompatibleAudioSourceConfigurations * soap_new___trt__GetCompatibleAudioSourceConfigurations(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__GetCompatibleAudioSourceConfigurations(soap, n, NULL, NULL, NULL);
}

inline struct __trt__GetCompatibleAudioSourceConfigurations * soap_new_req___trt__GetCompatibleAudioSourceConfigurations(
	struct soap *soap)
{
	struct __trt__GetCompatibleAudioSourceConfigurations *_p = soap_new___trt__GetCompatibleAudioSourceConfigurations(soap);
	if (_p)
	{	soap_default___trt__GetCompatibleAudioSourceConfigurations(soap, _p);
	}
	return _p;
}

inline struct __trt__GetCompatibleAudioSourceConfigurations * soap_new_set___trt__GetCompatibleAudioSourceConfigurations(
	struct soap *soap,
	_trt__GetCompatibleAudioSourceConfigurations *trt__GetCompatibleAudioSourceConfigurations)
{
	struct __trt__GetCompatibleAudioSourceConfigurations *_p = soap_new___trt__GetCompatibleAudioSourceConfigurations(soap);
	if (_p)
	{	soap_default___trt__GetCompatibleAudioSourceConfigurations(soap, _p);
		_p->trt__GetCompatibleAudioSourceConfigurations = trt__GetCompatibleAudioSourceConfigurations;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__GetCompatibleAudioSourceConfigurations(struct soap*, const struct __trt__GetCompatibleAudioSourceConfigurations *, const char*, const char*);

inline int soap_write___trt__GetCompatibleAudioSourceConfigurations(struct soap *soap, struct __trt__GetCompatibleAudioSourceConfigurations const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___trt__GetCompatibleAudioSourceConfigurations(soap, p), 0) || soap_put___trt__GetCompatibleAudioSourceConfigurations(soap, p, "-trt:GetCompatibleAudioSourceConfigurations", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__GetCompatibleAudioSourceConfigurations * SOAP_FMAC4 soap_get___trt__GetCompatibleAudioSourceConfigurations(struct soap*, struct __trt__GetCompatibleAudioSourceConfigurations *, const char*, const char*);

inline int soap_read___trt__GetCompatibleAudioSourceConfigurations(struct soap *soap, struct __trt__GetCompatibleAudioSourceConfigurations *p)
{
	if (p)
	{	soap_default___trt__GetCompatibleAudioSourceConfigurations(soap, p);
		if (soap_begin_recv(soap) || soap_get___trt__GetCompatibleAudioSourceConfigurations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___trt__GetCompatibleAudioEncoderConfigurations_DEFINED
#define SOAP_TYPE___trt__GetCompatibleAudioEncoderConfigurations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__GetCompatibleAudioEncoderConfigurations(struct soap*, struct __trt__GetCompatibleAudioEncoderConfigurations *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__GetCompatibleAudioEncoderConfigurations(struct soap*, const struct __trt__GetCompatibleAudioEncoderConfigurations *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__GetCompatibleAudioEncoderConfigurations(struct soap*, const char*, int, const struct __trt__GetCompatibleAudioEncoderConfigurations *, const char*);
SOAP_FMAC3 struct __trt__GetCompatibleAudioEncoderConfigurations * SOAP_FMAC4 soap_in___trt__GetCompatibleAudioEncoderConfigurations(struct soap*, const char*, struct __trt__GetCompatibleAudioEncoderConfigurations *, const char*);
SOAP_FMAC1 struct __trt__GetCompatibleAudioEncoderConfigurations * SOAP_FMAC2 soap_instantiate___trt__GetCompatibleAudioEncoderConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__GetCompatibleAudioEncoderConfigurations * soap_new___trt__GetCompatibleAudioEncoderConfigurations(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__GetCompatibleAudioEncoderConfigurations(soap, n, NULL, NULL, NULL);
}

inline struct __trt__GetCompatibleAudioEncoderConfigurations * soap_new_req___trt__GetCompatibleAudioEncoderConfigurations(
	struct soap *soap)
{
	struct __trt__GetCompatibleAudioEncoderConfigurations *_p = soap_new___trt__GetCompatibleAudioEncoderConfigurations(soap);
	if (_p)
	{	soap_default___trt__GetCompatibleAudioEncoderConfigurations(soap, _p);
	}
	return _p;
}

inline struct __trt__GetCompatibleAudioEncoderConfigurations * soap_new_set___trt__GetCompatibleAudioEncoderConfigurations(
	struct soap *soap,
	_trt__GetCompatibleAudioEncoderConfigurations *trt__GetCompatibleAudioEncoderConfigurations)
{
	struct __trt__GetCompatibleAudioEncoderConfigurations *_p = soap_new___trt__GetCompatibleAudioEncoderConfigurations(soap);
	if (_p)
	{	soap_default___trt__GetCompatibleAudioEncoderConfigurations(soap, _p);
		_p->trt__GetCompatibleAudioEncoderConfigurations = trt__GetCompatibleAudioEncoderConfigurations;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__GetCompatibleAudioEncoderConfigurations(struct soap*, const struct __trt__GetCompatibleAudioEncoderConfigurations *, const char*, const char*);

inline int soap_write___trt__GetCompatibleAudioEncoderConfigurations(struct soap *soap, struct __trt__GetCompatibleAudioEncoderConfigurations const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___trt__GetCompatibleAudioEncoderConfigurations(soap, p), 0) || soap_put___trt__GetCompatibleAudioEncoderConfigurations(soap, p, "-trt:GetCompatibleAudioEncoderConfigurations", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__GetCompatibleAudioEncoderConfigurations * SOAP_FMAC4 soap_get___trt__GetCompatibleAudioEncoderConfigurations(struct soap*, struct __trt__GetCompatibleAudioEncoderConfigurations *, const char*, const char*);

inline int soap_read___trt__GetCompatibleAudioEncoderConfigurations(struct soap *soap, struct __trt__GetCompatibleAudioEncoderConfigurations *p)
{
	if (p)
	{	soap_default___trt__GetCompatibleAudioEncoderConfigurations(soap, p);
		if (soap_begin_recv(soap) || soap_get___trt__GetCompatibleAudioEncoderConfigurations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___trt__GetCompatibleVideoSourceConfigurations_DEFINED
#define SOAP_TYPE___trt__GetCompatibleVideoSourceConfigurations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__GetCompatibleVideoSourceConfigurations(struct soap*, struct __trt__GetCompatibleVideoSourceConfigurations *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__GetCompatibleVideoSourceConfigurations(struct soap*, const struct __trt__GetCompatibleVideoSourceConfigurations *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__GetCompatibleVideoSourceConfigurations(struct soap*, const char*, int, const struct __trt__GetCompatibleVideoSourceConfigurations *, const char*);
SOAP_FMAC3 struct __trt__GetCompatibleVideoSourceConfigurations * SOAP_FMAC4 soap_in___trt__GetCompatibleVideoSourceConfigurations(struct soap*, const char*, struct __trt__GetCompatibleVideoSourceConfigurations *, const char*);
SOAP_FMAC1 struct __trt__GetCompatibleVideoSourceConfigurations * SOAP_FMAC2 soap_instantiate___trt__GetCompatibleVideoSourceConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__GetCompatibleVideoSourceConfigurations * soap_new___trt__GetCompatibleVideoSourceConfigurations(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__GetCompatibleVideoSourceConfigurations(soap, n, NULL, NULL, NULL);
}

inline struct __trt__GetCompatibleVideoSourceConfigurations * soap_new_req___trt__GetCompatibleVideoSourceConfigurations(
	struct soap *soap)
{
	struct __trt__GetCompatibleVideoSourceConfigurations *_p = soap_new___trt__GetCompatibleVideoSourceConfigurations(soap);
	if (_p)
	{	soap_default___trt__GetCompatibleVideoSourceConfigurations(soap, _p);
	}
	return _p;
}

inline struct __trt__GetCompatibleVideoSourceConfigurations * soap_new_set___trt__GetCompatibleVideoSourceConfigurations(
	struct soap *soap,
	_trt__GetCompatibleVideoSourceConfigurations *trt__GetCompatibleVideoSourceConfigurations)
{
	struct __trt__GetCompatibleVideoSourceConfigurations *_p = soap_new___trt__GetCompatibleVideoSourceConfigurations(soap);
	if (_p)
	{	soap_default___trt__GetCompatibleVideoSourceConfigurations(soap, _p);
		_p->trt__GetCompatibleVideoSourceConfigurations = trt__GetCompatibleVideoSourceConfigurations;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__GetCompatibleVideoSourceConfigurations(struct soap*, const struct __trt__GetCompatibleVideoSourceConfigurations *, const char*, const char*);

inline int soap_write___trt__GetCompatibleVideoSourceConfigurations(struct soap *soap, struct __trt__GetCompatibleVideoSourceConfigurations const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___trt__GetCompatibleVideoSourceConfigurations(soap, p), 0) || soap_put___trt__GetCompatibleVideoSourceConfigurations(soap, p, "-trt:GetCompatibleVideoSourceConfigurations", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__GetCompatibleVideoSourceConfigurations * SOAP_FMAC4 soap_get___trt__GetCompatibleVideoSourceConfigurations(struct soap*, struct __trt__GetCompatibleVideoSourceConfigurations *, const char*, const char*);

inline int soap_read___trt__GetCompatibleVideoSourceConfigurations(struct soap *soap, struct __trt__GetCompatibleVideoSourceConfigurations *p)
{
	if (p)
	{	soap_default___trt__GetCompatibleVideoSourceConfigurations(soap, p);
		if (soap_begin_recv(soap) || soap_get___trt__GetCompatibleVideoSourceConfigurations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___trt__GetCompatibleVideoEncoderConfigurations_DEFINED
#define SOAP_TYPE___trt__GetCompatibleVideoEncoderConfigurations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__GetCompatibleVideoEncoderConfigurations(struct soap*, struct __trt__GetCompatibleVideoEncoderConfigurations *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__GetCompatibleVideoEncoderConfigurations(struct soap*, const struct __trt__GetCompatibleVideoEncoderConfigurations *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__GetCompatibleVideoEncoderConfigurations(struct soap*, const char*, int, const struct __trt__GetCompatibleVideoEncoderConfigurations *, const char*);
SOAP_FMAC3 struct __trt__GetCompatibleVideoEncoderConfigurations * SOAP_FMAC4 soap_in___trt__GetCompatibleVideoEncoderConfigurations(struct soap*, const char*, struct __trt__GetCompatibleVideoEncoderConfigurations *, const char*);
SOAP_FMAC1 struct __trt__GetCompatibleVideoEncoderConfigurations * SOAP_FMAC2 soap_instantiate___trt__GetCompatibleVideoEncoderConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__GetCompatibleVideoEncoderConfigurations * soap_new___trt__GetCompatibleVideoEncoderConfigurations(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__GetCompatibleVideoEncoderConfigurations(soap, n, NULL, NULL, NULL);
}

inline struct __trt__GetCompatibleVideoEncoderConfigurations * soap_new_req___trt__GetCompatibleVideoEncoderConfigurations(
	struct soap *soap)
{
	struct __trt__GetCompatibleVideoEncoderConfigurations *_p = soap_new___trt__GetCompatibleVideoEncoderConfigurations(soap);
	if (_p)
	{	soap_default___trt__GetCompatibleVideoEncoderConfigurations(soap, _p);
	}
	return _p;
}

inline struct __trt__GetCompatibleVideoEncoderConfigurations * soap_new_set___trt__GetCompatibleVideoEncoderConfigurations(
	struct soap *soap,
	_trt__GetCompatibleVideoEncoderConfigurations *trt__GetCompatibleVideoEncoderConfigurations)
{
	struct __trt__GetCompatibleVideoEncoderConfigurations *_p = soap_new___trt__GetCompatibleVideoEncoderConfigurations(soap);
	if (_p)
	{	soap_default___trt__GetCompatibleVideoEncoderConfigurations(soap, _p);
		_p->trt__GetCompatibleVideoEncoderConfigurations = trt__GetCompatibleVideoEncoderConfigurations;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__GetCompatibleVideoEncoderConfigurations(struct soap*, const struct __trt__GetCompatibleVideoEncoderConfigurations *, const char*, const char*);

inline int soap_write___trt__GetCompatibleVideoEncoderConfigurations(struct soap *soap, struct __trt__GetCompatibleVideoEncoderConfigurations const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___trt__GetCompatibleVideoEncoderConfigurations(soap, p), 0) || soap_put___trt__GetCompatibleVideoEncoderConfigurations(soap, p, "-trt:GetCompatibleVideoEncoderConfigurations", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__GetCompatibleVideoEncoderConfigurations * SOAP_FMAC4 soap_get___trt__GetCompatibleVideoEncoderConfigurations(struct soap*, struct __trt__GetCompatibleVideoEncoderConfigurations *, const char*, const char*);

inline int soap_read___trt__GetCompatibleVideoEncoderConfigurations(struct soap *soap, struct __trt__GetCompatibleVideoEncoderConfigurations *p)
{
	if (p)
	{	soap_default___trt__GetCompatibleVideoEncoderConfigurations(soap, p);
		if (soap_begin_recv(soap) || soap_get___trt__GetCompatibleVideoEncoderConfigurations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___trt__GetAudioDecoderConfiguration_DEFINED
#define SOAP_TYPE___trt__GetAudioDecoderConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__GetAudioDecoderConfiguration(struct soap*, struct __trt__GetAudioDecoderConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__GetAudioDecoderConfiguration(struct soap*, const struct __trt__GetAudioDecoderConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__GetAudioDecoderConfiguration(struct soap*, const char*, int, const struct __trt__GetAudioDecoderConfiguration *, const char*);
SOAP_FMAC3 struct __trt__GetAudioDecoderConfiguration * SOAP_FMAC4 soap_in___trt__GetAudioDecoderConfiguration(struct soap*, const char*, struct __trt__GetAudioDecoderConfiguration *, const char*);
SOAP_FMAC1 struct __trt__GetAudioDecoderConfiguration * SOAP_FMAC2 soap_instantiate___trt__GetAudioDecoderConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__GetAudioDecoderConfiguration * soap_new___trt__GetAudioDecoderConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__GetAudioDecoderConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __trt__GetAudioDecoderConfiguration * soap_new_req___trt__GetAudioDecoderConfiguration(
	struct soap *soap)
{
	struct __trt__GetAudioDecoderConfiguration *_p = soap_new___trt__GetAudioDecoderConfiguration(soap);
	if (_p)
	{	soap_default___trt__GetAudioDecoderConfiguration(soap, _p);
	}
	return _p;
}

inline struct __trt__GetAudioDecoderConfiguration * soap_new_set___trt__GetAudioDecoderConfiguration(
	struct soap *soap,
	_trt__GetAudioDecoderConfiguration *trt__GetAudioDecoderConfiguration)
{
	struct __trt__GetAudioDecoderConfiguration *_p = soap_new___trt__GetAudioDecoderConfiguration(soap);
	if (_p)
	{	soap_default___trt__GetAudioDecoderConfiguration(soap, _p);
		_p->trt__GetAudioDecoderConfiguration = trt__GetAudioDecoderConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__GetAudioDecoderConfiguration(struct soap*, const struct __trt__GetAudioDecoderConfiguration *, const char*, const char*);

inline int soap_write___trt__GetAudioDecoderConfiguration(struct soap *soap, struct __trt__GetAudioDecoderConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___trt__GetAudioDecoderConfiguration(soap, p), 0) || soap_put___trt__GetAudioDecoderConfiguration(soap, p, "-trt:GetAudioDecoderConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__GetAudioDecoderConfiguration * SOAP_FMAC4 soap_get___trt__GetAudioDecoderConfiguration(struct soap*, struct __trt__GetAudioDecoderConfiguration *, const char*, const char*);

inline int soap_read___trt__GetAudioDecoderConfiguration(struct soap *soap, struct __trt__GetAudioDecoderConfiguration *p)
{
	if (p)
	{	soap_default___trt__GetAudioDecoderConfiguration(soap, p);
		if (soap_begin_recv(soap) || soap_get___trt__GetAudioDecoderConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___trt__GetAudioOutputConfiguration_DEFINED
#define SOAP_TYPE___trt__GetAudioOutputConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__GetAudioOutputConfiguration(struct soap*, struct __trt__GetAudioOutputConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__GetAudioOutputConfiguration(struct soap*, const struct __trt__GetAudioOutputConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__GetAudioOutputConfiguration(struct soap*, const char*, int, const struct __trt__GetAudioOutputConfiguration *, const char*);
SOAP_FMAC3 struct __trt__GetAudioOutputConfiguration * SOAP_FMAC4 soap_in___trt__GetAudioOutputConfiguration(struct soap*, const char*, struct __trt__GetAudioOutputConfiguration *, const char*);
SOAP_FMAC1 struct __trt__GetAudioOutputConfiguration * SOAP_FMAC2 soap_instantiate___trt__GetAudioOutputConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__GetAudioOutputConfiguration * soap_new___trt__GetAudioOutputConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__GetAudioOutputConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __trt__GetAudioOutputConfiguration * soap_new_req___trt__GetAudioOutputConfiguration(
	struct soap *soap)
{
	struct __trt__GetAudioOutputConfiguration *_p = soap_new___trt__GetAudioOutputConfiguration(soap);
	if (_p)
	{	soap_default___trt__GetAudioOutputConfiguration(soap, _p);
	}
	return _p;
}

inline struct __trt__GetAudioOutputConfiguration * soap_new_set___trt__GetAudioOutputConfiguration(
	struct soap *soap,
	_trt__GetAudioOutputConfiguration *trt__GetAudioOutputConfiguration)
{
	struct __trt__GetAudioOutputConfiguration *_p = soap_new___trt__GetAudioOutputConfiguration(soap);
	if (_p)
	{	soap_default___trt__GetAudioOutputConfiguration(soap, _p);
		_p->trt__GetAudioOutputConfiguration = trt__GetAudioOutputConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__GetAudioOutputConfiguration(struct soap*, const struct __trt__GetAudioOutputConfiguration *, const char*, const char*);

inline int soap_write___trt__GetAudioOutputConfiguration(struct soap *soap, struct __trt__GetAudioOutputConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___trt__GetAudioOutputConfiguration(soap, p), 0) || soap_put___trt__GetAudioOutputConfiguration(soap, p, "-trt:GetAudioOutputConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__GetAudioOutputConfiguration * SOAP_FMAC4 soap_get___trt__GetAudioOutputConfiguration(struct soap*, struct __trt__GetAudioOutputConfiguration *, const char*, const char*);

inline int soap_read___trt__GetAudioOutputConfiguration(struct soap *soap, struct __trt__GetAudioOutputConfiguration *p)
{
	if (p)
	{	soap_default___trt__GetAudioOutputConfiguration(soap, p);
		if (soap_begin_recv(soap) || soap_get___trt__GetAudioOutputConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___trt__GetMetadataConfiguration_DEFINED
#define SOAP_TYPE___trt__GetMetadataConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__GetMetadataConfiguration(struct soap*, struct __trt__GetMetadataConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__GetMetadataConfiguration(struct soap*, const struct __trt__GetMetadataConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__GetMetadataConfiguration(struct soap*, const char*, int, const struct __trt__GetMetadataConfiguration *, const char*);
SOAP_FMAC3 struct __trt__GetMetadataConfiguration * SOAP_FMAC4 soap_in___trt__GetMetadataConfiguration(struct soap*, const char*, struct __trt__GetMetadataConfiguration *, const char*);
SOAP_FMAC1 struct __trt__GetMetadataConfiguration * SOAP_FMAC2 soap_instantiate___trt__GetMetadataConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__GetMetadataConfiguration * soap_new___trt__GetMetadataConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__GetMetadataConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __trt__GetMetadataConfiguration * soap_new_req___trt__GetMetadataConfiguration(
	struct soap *soap)
{
	struct __trt__GetMetadataConfiguration *_p = soap_new___trt__GetMetadataConfiguration(soap);
	if (_p)
	{	soap_default___trt__GetMetadataConfiguration(soap, _p);
	}
	return _p;
}

inline struct __trt__GetMetadataConfiguration * soap_new_set___trt__GetMetadataConfiguration(
	struct soap *soap,
	_trt__GetMetadataConfiguration *trt__GetMetadataConfiguration)
{
	struct __trt__GetMetadataConfiguration *_p = soap_new___trt__GetMetadataConfiguration(soap);
	if (_p)
	{	soap_default___trt__GetMetadataConfiguration(soap, _p);
		_p->trt__GetMetadataConfiguration = trt__GetMetadataConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__GetMetadataConfiguration(struct soap*, const struct __trt__GetMetadataConfiguration *, const char*, const char*);

inline int soap_write___trt__GetMetadataConfiguration(struct soap *soap, struct __trt__GetMetadataConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___trt__GetMetadataConfiguration(soap, p), 0) || soap_put___trt__GetMetadataConfiguration(soap, p, "-trt:GetMetadataConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__GetMetadataConfiguration * SOAP_FMAC4 soap_get___trt__GetMetadataConfiguration(struct soap*, struct __trt__GetMetadataConfiguration *, const char*, const char*);

inline int soap_read___trt__GetMetadataConfiguration(struct soap *soap, struct __trt__GetMetadataConfiguration *p)
{
	if (p)
	{	soap_default___trt__GetMetadataConfiguration(soap, p);
		if (soap_begin_recv(soap) || soap_get___trt__GetMetadataConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___trt__GetVideoAnalyticsConfiguration_DEFINED
#define SOAP_TYPE___trt__GetVideoAnalyticsConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__GetVideoAnalyticsConfiguration(struct soap*, struct __trt__GetVideoAnalyticsConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__GetVideoAnalyticsConfiguration(struct soap*, const struct __trt__GetVideoAnalyticsConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__GetVideoAnalyticsConfiguration(struct soap*, const char*, int, const struct __trt__GetVideoAnalyticsConfiguration *, const char*);
SOAP_FMAC3 struct __trt__GetVideoAnalyticsConfiguration * SOAP_FMAC4 soap_in___trt__GetVideoAnalyticsConfiguration(struct soap*, const char*, struct __trt__GetVideoAnalyticsConfiguration *, const char*);
SOAP_FMAC1 struct __trt__GetVideoAnalyticsConfiguration * SOAP_FMAC2 soap_instantiate___trt__GetVideoAnalyticsConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__GetVideoAnalyticsConfiguration * soap_new___trt__GetVideoAnalyticsConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__GetVideoAnalyticsConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __trt__GetVideoAnalyticsConfiguration * soap_new_req___trt__GetVideoAnalyticsConfiguration(
	struct soap *soap)
{
	struct __trt__GetVideoAnalyticsConfiguration *_p = soap_new___trt__GetVideoAnalyticsConfiguration(soap);
	if (_p)
	{	soap_default___trt__GetVideoAnalyticsConfiguration(soap, _p);
	}
	return _p;
}

inline struct __trt__GetVideoAnalyticsConfiguration * soap_new_set___trt__GetVideoAnalyticsConfiguration(
	struct soap *soap,
	_trt__GetVideoAnalyticsConfiguration *trt__GetVideoAnalyticsConfiguration)
{
	struct __trt__GetVideoAnalyticsConfiguration *_p = soap_new___trt__GetVideoAnalyticsConfiguration(soap);
	if (_p)
	{	soap_default___trt__GetVideoAnalyticsConfiguration(soap, _p);
		_p->trt__GetVideoAnalyticsConfiguration = trt__GetVideoAnalyticsConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__GetVideoAnalyticsConfiguration(struct soap*, const struct __trt__GetVideoAnalyticsConfiguration *, const char*, const char*);

inline int soap_write___trt__GetVideoAnalyticsConfiguration(struct soap *soap, struct __trt__GetVideoAnalyticsConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___trt__GetVideoAnalyticsConfiguration(soap, p), 0) || soap_put___trt__GetVideoAnalyticsConfiguration(soap, p, "-trt:GetVideoAnalyticsConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__GetVideoAnalyticsConfiguration * SOAP_FMAC4 soap_get___trt__GetVideoAnalyticsConfiguration(struct soap*, struct __trt__GetVideoAnalyticsConfiguration *, const char*, const char*);

inline int soap_read___trt__GetVideoAnalyticsConfiguration(struct soap *soap, struct __trt__GetVideoAnalyticsConfiguration *p)
{
	if (p)
	{	soap_default___trt__GetVideoAnalyticsConfiguration(soap, p);
		if (soap_begin_recv(soap) || soap_get___trt__GetVideoAnalyticsConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___trt__GetAudioEncoderConfiguration_DEFINED
#define SOAP_TYPE___trt__GetAudioEncoderConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__GetAudioEncoderConfiguration(struct soap*, struct __trt__GetAudioEncoderConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__GetAudioEncoderConfiguration(struct soap*, const struct __trt__GetAudioEncoderConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__GetAudioEncoderConfiguration(struct soap*, const char*, int, const struct __trt__GetAudioEncoderConfiguration *, const char*);
SOAP_FMAC3 struct __trt__GetAudioEncoderConfiguration * SOAP_FMAC4 soap_in___trt__GetAudioEncoderConfiguration(struct soap*, const char*, struct __trt__GetAudioEncoderConfiguration *, const char*);
SOAP_FMAC1 struct __trt__GetAudioEncoderConfiguration * SOAP_FMAC2 soap_instantiate___trt__GetAudioEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__GetAudioEncoderConfiguration * soap_new___trt__GetAudioEncoderConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__GetAudioEncoderConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __trt__GetAudioEncoderConfiguration * soap_new_req___trt__GetAudioEncoderConfiguration(
	struct soap *soap)
{
	struct __trt__GetAudioEncoderConfiguration *_p = soap_new___trt__GetAudioEncoderConfiguration(soap);
	if (_p)
	{	soap_default___trt__GetAudioEncoderConfiguration(soap, _p);
	}
	return _p;
}

inline struct __trt__GetAudioEncoderConfiguration * soap_new_set___trt__GetAudioEncoderConfiguration(
	struct soap *soap,
	_trt__GetAudioEncoderConfiguration *trt__GetAudioEncoderConfiguration)
{
	struct __trt__GetAudioEncoderConfiguration *_p = soap_new___trt__GetAudioEncoderConfiguration(soap);
	if (_p)
	{	soap_default___trt__GetAudioEncoderConfiguration(soap, _p);
		_p->trt__GetAudioEncoderConfiguration = trt__GetAudioEncoderConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__GetAudioEncoderConfiguration(struct soap*, const struct __trt__GetAudioEncoderConfiguration *, const char*, const char*);

inline int soap_write___trt__GetAudioEncoderConfiguration(struct soap *soap, struct __trt__GetAudioEncoderConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___trt__GetAudioEncoderConfiguration(soap, p), 0) || soap_put___trt__GetAudioEncoderConfiguration(soap, p, "-trt:GetAudioEncoderConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__GetAudioEncoderConfiguration * SOAP_FMAC4 soap_get___trt__GetAudioEncoderConfiguration(struct soap*, struct __trt__GetAudioEncoderConfiguration *, const char*, const char*);

inline int soap_read___trt__GetAudioEncoderConfiguration(struct soap *soap, struct __trt__GetAudioEncoderConfiguration *p)
{
	if (p)
	{	soap_default___trt__GetAudioEncoderConfiguration(soap, p);
		if (soap_begin_recv(soap) || soap_get___trt__GetAudioEncoderConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___trt__GetAudioSourceConfiguration_DEFINED
#define SOAP_TYPE___trt__GetAudioSourceConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__GetAudioSourceConfiguration(struct soap*, struct __trt__GetAudioSourceConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__GetAudioSourceConfiguration(struct soap*, const struct __trt__GetAudioSourceConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__GetAudioSourceConfiguration(struct soap*, const char*, int, const struct __trt__GetAudioSourceConfiguration *, const char*);
SOAP_FMAC3 struct __trt__GetAudioSourceConfiguration * SOAP_FMAC4 soap_in___trt__GetAudioSourceConfiguration(struct soap*, const char*, struct __trt__GetAudioSourceConfiguration *, const char*);
SOAP_FMAC1 struct __trt__GetAudioSourceConfiguration * SOAP_FMAC2 soap_instantiate___trt__GetAudioSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__GetAudioSourceConfiguration * soap_new___trt__GetAudioSourceConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__GetAudioSourceConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __trt__GetAudioSourceConfiguration * soap_new_req___trt__GetAudioSourceConfiguration(
	struct soap *soap)
{
	struct __trt__GetAudioSourceConfiguration *_p = soap_new___trt__GetAudioSourceConfiguration(soap);
	if (_p)
	{	soap_default___trt__GetAudioSourceConfiguration(soap, _p);
	}
	return _p;
}

inline struct __trt__GetAudioSourceConfiguration * soap_new_set___trt__GetAudioSourceConfiguration(
	struct soap *soap,
	_trt__GetAudioSourceConfiguration *trt__GetAudioSourceConfiguration)
{
	struct __trt__GetAudioSourceConfiguration *_p = soap_new___trt__GetAudioSourceConfiguration(soap);
	if (_p)
	{	soap_default___trt__GetAudioSourceConfiguration(soap, _p);
		_p->trt__GetAudioSourceConfiguration = trt__GetAudioSourceConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__GetAudioSourceConfiguration(struct soap*, const struct __trt__GetAudioSourceConfiguration *, const char*, const char*);

inline int soap_write___trt__GetAudioSourceConfiguration(struct soap *soap, struct __trt__GetAudioSourceConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___trt__GetAudioSourceConfiguration(soap, p), 0) || soap_put___trt__GetAudioSourceConfiguration(soap, p, "-trt:GetAudioSourceConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__GetAudioSourceConfiguration * SOAP_FMAC4 soap_get___trt__GetAudioSourceConfiguration(struct soap*, struct __trt__GetAudioSourceConfiguration *, const char*, const char*);

inline int soap_read___trt__GetAudioSourceConfiguration(struct soap *soap, struct __trt__GetAudioSourceConfiguration *p)
{
	if (p)
	{	soap_default___trt__GetAudioSourceConfiguration(soap, p);
		if (soap_begin_recv(soap) || soap_get___trt__GetAudioSourceConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___trt__GetVideoEncoderConfiguration_DEFINED
#define SOAP_TYPE___trt__GetVideoEncoderConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__GetVideoEncoderConfiguration(struct soap*, struct __trt__GetVideoEncoderConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__GetVideoEncoderConfiguration(struct soap*, const struct __trt__GetVideoEncoderConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__GetVideoEncoderConfiguration(struct soap*, const char*, int, const struct __trt__GetVideoEncoderConfiguration *, const char*);
SOAP_FMAC3 struct __trt__GetVideoEncoderConfiguration * SOAP_FMAC4 soap_in___trt__GetVideoEncoderConfiguration(struct soap*, const char*, struct __trt__GetVideoEncoderConfiguration *, const char*);
SOAP_FMAC1 struct __trt__GetVideoEncoderConfiguration * SOAP_FMAC2 soap_instantiate___trt__GetVideoEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__GetVideoEncoderConfiguration * soap_new___trt__GetVideoEncoderConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__GetVideoEncoderConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __trt__GetVideoEncoderConfiguration * soap_new_req___trt__GetVideoEncoderConfiguration(
	struct soap *soap)
{
	struct __trt__GetVideoEncoderConfiguration *_p = soap_new___trt__GetVideoEncoderConfiguration(soap);
	if (_p)
	{	soap_default___trt__GetVideoEncoderConfiguration(soap, _p);
	}
	return _p;
}

inline struct __trt__GetVideoEncoderConfiguration * soap_new_set___trt__GetVideoEncoderConfiguration(
	struct soap *soap,
	_trt__GetVideoEncoderConfiguration *trt__GetVideoEncoderConfiguration)
{
	struct __trt__GetVideoEncoderConfiguration *_p = soap_new___trt__GetVideoEncoderConfiguration(soap);
	if (_p)
	{	soap_default___trt__GetVideoEncoderConfiguration(soap, _p);
		_p->trt__GetVideoEncoderConfiguration = trt__GetVideoEncoderConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__GetVideoEncoderConfiguration(struct soap*, const struct __trt__GetVideoEncoderConfiguration *, const char*, const char*);

inline int soap_write___trt__GetVideoEncoderConfiguration(struct soap *soap, struct __trt__GetVideoEncoderConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___trt__GetVideoEncoderConfiguration(soap, p), 0) || soap_put___trt__GetVideoEncoderConfiguration(soap, p, "-trt:GetVideoEncoderConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__GetVideoEncoderConfiguration * SOAP_FMAC4 soap_get___trt__GetVideoEncoderConfiguration(struct soap*, struct __trt__GetVideoEncoderConfiguration *, const char*, const char*);

inline int soap_read___trt__GetVideoEncoderConfiguration(struct soap *soap, struct __trt__GetVideoEncoderConfiguration *p)
{
	if (p)
	{	soap_default___trt__GetVideoEncoderConfiguration(soap, p);
		if (soap_begin_recv(soap) || soap_get___trt__GetVideoEncoderConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___trt__GetVideoSourceConfiguration_DEFINED
#define SOAP_TYPE___trt__GetVideoSourceConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__GetVideoSourceConfiguration(struct soap*, struct __trt__GetVideoSourceConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__GetVideoSourceConfiguration(struct soap*, const struct __trt__GetVideoSourceConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__GetVideoSourceConfiguration(struct soap*, const char*, int, const struct __trt__GetVideoSourceConfiguration *, const char*);
SOAP_FMAC3 struct __trt__GetVideoSourceConfiguration * SOAP_FMAC4 soap_in___trt__GetVideoSourceConfiguration(struct soap*, const char*, struct __trt__GetVideoSourceConfiguration *, const char*);
SOAP_FMAC1 struct __trt__GetVideoSourceConfiguration * SOAP_FMAC2 soap_instantiate___trt__GetVideoSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__GetVideoSourceConfiguration * soap_new___trt__GetVideoSourceConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__GetVideoSourceConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __trt__GetVideoSourceConfiguration * soap_new_req___trt__GetVideoSourceConfiguration(
	struct soap *soap)
{
	struct __trt__GetVideoSourceConfiguration *_p = soap_new___trt__GetVideoSourceConfiguration(soap);
	if (_p)
	{	soap_default___trt__GetVideoSourceConfiguration(soap, _p);
	}
	return _p;
}

inline struct __trt__GetVideoSourceConfiguration * soap_new_set___trt__GetVideoSourceConfiguration(
	struct soap *soap,
	_trt__GetVideoSourceConfiguration *trt__GetVideoSourceConfiguration)
{
	struct __trt__GetVideoSourceConfiguration *_p = soap_new___trt__GetVideoSourceConfiguration(soap);
	if (_p)
	{	soap_default___trt__GetVideoSourceConfiguration(soap, _p);
		_p->trt__GetVideoSourceConfiguration = trt__GetVideoSourceConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__GetVideoSourceConfiguration(struct soap*, const struct __trt__GetVideoSourceConfiguration *, const char*, const char*);

inline int soap_write___trt__GetVideoSourceConfiguration(struct soap *soap, struct __trt__GetVideoSourceConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___trt__GetVideoSourceConfiguration(soap, p), 0) || soap_put___trt__GetVideoSourceConfiguration(soap, p, "-trt:GetVideoSourceConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__GetVideoSourceConfiguration * SOAP_FMAC4 soap_get___trt__GetVideoSourceConfiguration(struct soap*, struct __trt__GetVideoSourceConfiguration *, const char*, const char*);

inline int soap_read___trt__GetVideoSourceConfiguration(struct soap *soap, struct __trt__GetVideoSourceConfiguration *p)
{
	if (p)
	{	soap_default___trt__GetVideoSourceConfiguration(soap, p);
		if (soap_begin_recv(soap) || soap_get___trt__GetVideoSourceConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___trt__GetAudioDecoderConfigurations_DEFINED
#define SOAP_TYPE___trt__GetAudioDecoderConfigurations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__GetAudioDecoderConfigurations(struct soap*, struct __trt__GetAudioDecoderConfigurations *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__GetAudioDecoderConfigurations(struct soap*, const struct __trt__GetAudioDecoderConfigurations *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__GetAudioDecoderConfigurations(struct soap*, const char*, int, const struct __trt__GetAudioDecoderConfigurations *, const char*);
SOAP_FMAC3 struct __trt__GetAudioDecoderConfigurations * SOAP_FMAC4 soap_in___trt__GetAudioDecoderConfigurations(struct soap*, const char*, struct __trt__GetAudioDecoderConfigurations *, const char*);
SOAP_FMAC1 struct __trt__GetAudioDecoderConfigurations * SOAP_FMAC2 soap_instantiate___trt__GetAudioDecoderConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__GetAudioDecoderConfigurations * soap_new___trt__GetAudioDecoderConfigurations(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__GetAudioDecoderConfigurations(soap, n, NULL, NULL, NULL);
}

inline struct __trt__GetAudioDecoderConfigurations * soap_new_req___trt__GetAudioDecoderConfigurations(
	struct soap *soap)
{
	struct __trt__GetAudioDecoderConfigurations *_p = soap_new___trt__GetAudioDecoderConfigurations(soap);
	if (_p)
	{	soap_default___trt__GetAudioDecoderConfigurations(soap, _p);
	}
	return _p;
}

inline struct __trt__GetAudioDecoderConfigurations * soap_new_set___trt__GetAudioDecoderConfigurations(
	struct soap *soap,
	_trt__GetAudioDecoderConfigurations *trt__GetAudioDecoderConfigurations)
{
	struct __trt__GetAudioDecoderConfigurations *_p = soap_new___trt__GetAudioDecoderConfigurations(soap);
	if (_p)
	{	soap_default___trt__GetAudioDecoderConfigurations(soap, _p);
		_p->trt__GetAudioDecoderConfigurations = trt__GetAudioDecoderConfigurations;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__GetAudioDecoderConfigurations(struct soap*, const struct __trt__GetAudioDecoderConfigurations *, const char*, const char*);

inline int soap_write___trt__GetAudioDecoderConfigurations(struct soap *soap, struct __trt__GetAudioDecoderConfigurations const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___trt__GetAudioDecoderConfigurations(soap, p), 0) || soap_put___trt__GetAudioDecoderConfigurations(soap, p, "-trt:GetAudioDecoderConfigurations", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__GetAudioDecoderConfigurations * SOAP_FMAC4 soap_get___trt__GetAudioDecoderConfigurations(struct soap*, struct __trt__GetAudioDecoderConfigurations *, const char*, const char*);

inline int soap_read___trt__GetAudioDecoderConfigurations(struct soap *soap, struct __trt__GetAudioDecoderConfigurations *p)
{
	if (p)
	{	soap_default___trt__GetAudioDecoderConfigurations(soap, p);
		if (soap_begin_recv(soap) || soap_get___trt__GetAudioDecoderConfigurations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___trt__GetAudioOutputConfigurations_DEFINED
#define SOAP_TYPE___trt__GetAudioOutputConfigurations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__GetAudioOutputConfigurations(struct soap*, struct __trt__GetAudioOutputConfigurations *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__GetAudioOutputConfigurations(struct soap*, const struct __trt__GetAudioOutputConfigurations *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__GetAudioOutputConfigurations(struct soap*, const char*, int, const struct __trt__GetAudioOutputConfigurations *, const char*);
SOAP_FMAC3 struct __trt__GetAudioOutputConfigurations * SOAP_FMAC4 soap_in___trt__GetAudioOutputConfigurations(struct soap*, const char*, struct __trt__GetAudioOutputConfigurations *, const char*);
SOAP_FMAC1 struct __trt__GetAudioOutputConfigurations * SOAP_FMAC2 soap_instantiate___trt__GetAudioOutputConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__GetAudioOutputConfigurations * soap_new___trt__GetAudioOutputConfigurations(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__GetAudioOutputConfigurations(soap, n, NULL, NULL, NULL);
}

inline struct __trt__GetAudioOutputConfigurations * soap_new_req___trt__GetAudioOutputConfigurations(
	struct soap *soap)
{
	struct __trt__GetAudioOutputConfigurations *_p = soap_new___trt__GetAudioOutputConfigurations(soap);
	if (_p)
	{	soap_default___trt__GetAudioOutputConfigurations(soap, _p);
	}
	return _p;
}

inline struct __trt__GetAudioOutputConfigurations * soap_new_set___trt__GetAudioOutputConfigurations(
	struct soap *soap,
	_trt__GetAudioOutputConfigurations *trt__GetAudioOutputConfigurations)
{
	struct __trt__GetAudioOutputConfigurations *_p = soap_new___trt__GetAudioOutputConfigurations(soap);
	if (_p)
	{	soap_default___trt__GetAudioOutputConfigurations(soap, _p);
		_p->trt__GetAudioOutputConfigurations = trt__GetAudioOutputConfigurations;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__GetAudioOutputConfigurations(struct soap*, const struct __trt__GetAudioOutputConfigurations *, const char*, const char*);

inline int soap_write___trt__GetAudioOutputConfigurations(struct soap *soap, struct __trt__GetAudioOutputConfigurations const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___trt__GetAudioOutputConfigurations(soap, p), 0) || soap_put___trt__GetAudioOutputConfigurations(soap, p, "-trt:GetAudioOutputConfigurations", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__GetAudioOutputConfigurations * SOAP_FMAC4 soap_get___trt__GetAudioOutputConfigurations(struct soap*, struct __trt__GetAudioOutputConfigurations *, const char*, const char*);

inline int soap_read___trt__GetAudioOutputConfigurations(struct soap *soap, struct __trt__GetAudioOutputConfigurations *p)
{
	if (p)
	{	soap_default___trt__GetAudioOutputConfigurations(soap, p);
		if (soap_begin_recv(soap) || soap_get___trt__GetAudioOutputConfigurations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___trt__GetMetadataConfigurations_DEFINED
#define SOAP_TYPE___trt__GetMetadataConfigurations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__GetMetadataConfigurations(struct soap*, struct __trt__GetMetadataConfigurations *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__GetMetadataConfigurations(struct soap*, const struct __trt__GetMetadataConfigurations *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__GetMetadataConfigurations(struct soap*, const char*, int, const struct __trt__GetMetadataConfigurations *, const char*);
SOAP_FMAC3 struct __trt__GetMetadataConfigurations * SOAP_FMAC4 soap_in___trt__GetMetadataConfigurations(struct soap*, const char*, struct __trt__GetMetadataConfigurations *, const char*);
SOAP_FMAC1 struct __trt__GetMetadataConfigurations * SOAP_FMAC2 soap_instantiate___trt__GetMetadataConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__GetMetadataConfigurations * soap_new___trt__GetMetadataConfigurations(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__GetMetadataConfigurations(soap, n, NULL, NULL, NULL);
}

inline struct __trt__GetMetadataConfigurations * soap_new_req___trt__GetMetadataConfigurations(
	struct soap *soap)
{
	struct __trt__GetMetadataConfigurations *_p = soap_new___trt__GetMetadataConfigurations(soap);
	if (_p)
	{	soap_default___trt__GetMetadataConfigurations(soap, _p);
	}
	return _p;
}

inline struct __trt__GetMetadataConfigurations * soap_new_set___trt__GetMetadataConfigurations(
	struct soap *soap,
	_trt__GetMetadataConfigurations *trt__GetMetadataConfigurations)
{
	struct __trt__GetMetadataConfigurations *_p = soap_new___trt__GetMetadataConfigurations(soap);
	if (_p)
	{	soap_default___trt__GetMetadataConfigurations(soap, _p);
		_p->trt__GetMetadataConfigurations = trt__GetMetadataConfigurations;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__GetMetadataConfigurations(struct soap*, const struct __trt__GetMetadataConfigurations *, const char*, const char*);

inline int soap_write___trt__GetMetadataConfigurations(struct soap *soap, struct __trt__GetMetadataConfigurations const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___trt__GetMetadataConfigurations(soap, p), 0) || soap_put___trt__GetMetadataConfigurations(soap, p, "-trt:GetMetadataConfigurations", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__GetMetadataConfigurations * SOAP_FMAC4 soap_get___trt__GetMetadataConfigurations(struct soap*, struct __trt__GetMetadataConfigurations *, const char*, const char*);

inline int soap_read___trt__GetMetadataConfigurations(struct soap *soap, struct __trt__GetMetadataConfigurations *p)
{
	if (p)
	{	soap_default___trt__GetMetadataConfigurations(soap, p);
		if (soap_begin_recv(soap) || soap_get___trt__GetMetadataConfigurations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___trt__GetVideoAnalyticsConfigurations_DEFINED
#define SOAP_TYPE___trt__GetVideoAnalyticsConfigurations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__GetVideoAnalyticsConfigurations(struct soap*, struct __trt__GetVideoAnalyticsConfigurations *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__GetVideoAnalyticsConfigurations(struct soap*, const struct __trt__GetVideoAnalyticsConfigurations *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__GetVideoAnalyticsConfigurations(struct soap*, const char*, int, const struct __trt__GetVideoAnalyticsConfigurations *, const char*);
SOAP_FMAC3 struct __trt__GetVideoAnalyticsConfigurations * SOAP_FMAC4 soap_in___trt__GetVideoAnalyticsConfigurations(struct soap*, const char*, struct __trt__GetVideoAnalyticsConfigurations *, const char*);
SOAP_FMAC1 struct __trt__GetVideoAnalyticsConfigurations * SOAP_FMAC2 soap_instantiate___trt__GetVideoAnalyticsConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__GetVideoAnalyticsConfigurations * soap_new___trt__GetVideoAnalyticsConfigurations(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__GetVideoAnalyticsConfigurations(soap, n, NULL, NULL, NULL);
}

inline struct __trt__GetVideoAnalyticsConfigurations * soap_new_req___trt__GetVideoAnalyticsConfigurations(
	struct soap *soap)
{
	struct __trt__GetVideoAnalyticsConfigurations *_p = soap_new___trt__GetVideoAnalyticsConfigurations(soap);
	if (_p)
	{	soap_default___trt__GetVideoAnalyticsConfigurations(soap, _p);
	}
	return _p;
}

inline struct __trt__GetVideoAnalyticsConfigurations * soap_new_set___trt__GetVideoAnalyticsConfigurations(
	struct soap *soap,
	_trt__GetVideoAnalyticsConfigurations *trt__GetVideoAnalyticsConfigurations)
{
	struct __trt__GetVideoAnalyticsConfigurations *_p = soap_new___trt__GetVideoAnalyticsConfigurations(soap);
	if (_p)
	{	soap_default___trt__GetVideoAnalyticsConfigurations(soap, _p);
		_p->trt__GetVideoAnalyticsConfigurations = trt__GetVideoAnalyticsConfigurations;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__GetVideoAnalyticsConfigurations(struct soap*, const struct __trt__GetVideoAnalyticsConfigurations *, const char*, const char*);

inline int soap_write___trt__GetVideoAnalyticsConfigurations(struct soap *soap, struct __trt__GetVideoAnalyticsConfigurations const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___trt__GetVideoAnalyticsConfigurations(soap, p), 0) || soap_put___trt__GetVideoAnalyticsConfigurations(soap, p, "-trt:GetVideoAnalyticsConfigurations", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__GetVideoAnalyticsConfigurations * SOAP_FMAC4 soap_get___trt__GetVideoAnalyticsConfigurations(struct soap*, struct __trt__GetVideoAnalyticsConfigurations *, const char*, const char*);

inline int soap_read___trt__GetVideoAnalyticsConfigurations(struct soap *soap, struct __trt__GetVideoAnalyticsConfigurations *p)
{
	if (p)
	{	soap_default___trt__GetVideoAnalyticsConfigurations(soap, p);
		if (soap_begin_recv(soap) || soap_get___trt__GetVideoAnalyticsConfigurations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___trt__GetAudioEncoderConfigurations_DEFINED
#define SOAP_TYPE___trt__GetAudioEncoderConfigurations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__GetAudioEncoderConfigurations(struct soap*, struct __trt__GetAudioEncoderConfigurations *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__GetAudioEncoderConfigurations(struct soap*, const struct __trt__GetAudioEncoderConfigurations *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__GetAudioEncoderConfigurations(struct soap*, const char*, int, const struct __trt__GetAudioEncoderConfigurations *, const char*);
SOAP_FMAC3 struct __trt__GetAudioEncoderConfigurations * SOAP_FMAC4 soap_in___trt__GetAudioEncoderConfigurations(struct soap*, const char*, struct __trt__GetAudioEncoderConfigurations *, const char*);
SOAP_FMAC1 struct __trt__GetAudioEncoderConfigurations * SOAP_FMAC2 soap_instantiate___trt__GetAudioEncoderConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__GetAudioEncoderConfigurations * soap_new___trt__GetAudioEncoderConfigurations(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__GetAudioEncoderConfigurations(soap, n, NULL, NULL, NULL);
}

inline struct __trt__GetAudioEncoderConfigurations * soap_new_req___trt__GetAudioEncoderConfigurations(
	struct soap *soap)
{
	struct __trt__GetAudioEncoderConfigurations *_p = soap_new___trt__GetAudioEncoderConfigurations(soap);
	if (_p)
	{	soap_default___trt__GetAudioEncoderConfigurations(soap, _p);
	}
	return _p;
}

inline struct __trt__GetAudioEncoderConfigurations * soap_new_set___trt__GetAudioEncoderConfigurations(
	struct soap *soap,
	_trt__GetAudioEncoderConfigurations *trt__GetAudioEncoderConfigurations)
{
	struct __trt__GetAudioEncoderConfigurations *_p = soap_new___trt__GetAudioEncoderConfigurations(soap);
	if (_p)
	{	soap_default___trt__GetAudioEncoderConfigurations(soap, _p);
		_p->trt__GetAudioEncoderConfigurations = trt__GetAudioEncoderConfigurations;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__GetAudioEncoderConfigurations(struct soap*, const struct __trt__GetAudioEncoderConfigurations *, const char*, const char*);

inline int soap_write___trt__GetAudioEncoderConfigurations(struct soap *soap, struct __trt__GetAudioEncoderConfigurations const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___trt__GetAudioEncoderConfigurations(soap, p), 0) || soap_put___trt__GetAudioEncoderConfigurations(soap, p, "-trt:GetAudioEncoderConfigurations", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__GetAudioEncoderConfigurations * SOAP_FMAC4 soap_get___trt__GetAudioEncoderConfigurations(struct soap*, struct __trt__GetAudioEncoderConfigurations *, const char*, const char*);

inline int soap_read___trt__GetAudioEncoderConfigurations(struct soap *soap, struct __trt__GetAudioEncoderConfigurations *p)
{
	if (p)
	{	soap_default___trt__GetAudioEncoderConfigurations(soap, p);
		if (soap_begin_recv(soap) || soap_get___trt__GetAudioEncoderConfigurations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___trt__GetAudioSourceConfigurations_DEFINED
#define SOAP_TYPE___trt__GetAudioSourceConfigurations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__GetAudioSourceConfigurations(struct soap*, struct __trt__GetAudioSourceConfigurations *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__GetAudioSourceConfigurations(struct soap*, const struct __trt__GetAudioSourceConfigurations *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__GetAudioSourceConfigurations(struct soap*, const char*, int, const struct __trt__GetAudioSourceConfigurations *, const char*);
SOAP_FMAC3 struct __trt__GetAudioSourceConfigurations * SOAP_FMAC4 soap_in___trt__GetAudioSourceConfigurations(struct soap*, const char*, struct __trt__GetAudioSourceConfigurations *, const char*);
SOAP_FMAC1 struct __trt__GetAudioSourceConfigurations * SOAP_FMAC2 soap_instantiate___trt__GetAudioSourceConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__GetAudioSourceConfigurations * soap_new___trt__GetAudioSourceConfigurations(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__GetAudioSourceConfigurations(soap, n, NULL, NULL, NULL);
}

inline struct __trt__GetAudioSourceConfigurations * soap_new_req___trt__GetAudioSourceConfigurations(
	struct soap *soap)
{
	struct __trt__GetAudioSourceConfigurations *_p = soap_new___trt__GetAudioSourceConfigurations(soap);
	if (_p)
	{	soap_default___trt__GetAudioSourceConfigurations(soap, _p);
	}
	return _p;
}

inline struct __trt__GetAudioSourceConfigurations * soap_new_set___trt__GetAudioSourceConfigurations(
	struct soap *soap,
	_trt__GetAudioSourceConfigurations *trt__GetAudioSourceConfigurations)
{
	struct __trt__GetAudioSourceConfigurations *_p = soap_new___trt__GetAudioSourceConfigurations(soap);
	if (_p)
	{	soap_default___trt__GetAudioSourceConfigurations(soap, _p);
		_p->trt__GetAudioSourceConfigurations = trt__GetAudioSourceConfigurations;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__GetAudioSourceConfigurations(struct soap*, const struct __trt__GetAudioSourceConfigurations *, const char*, const char*);

inline int soap_write___trt__GetAudioSourceConfigurations(struct soap *soap, struct __trt__GetAudioSourceConfigurations const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___trt__GetAudioSourceConfigurations(soap, p), 0) || soap_put___trt__GetAudioSourceConfigurations(soap, p, "-trt:GetAudioSourceConfigurations", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__GetAudioSourceConfigurations * SOAP_FMAC4 soap_get___trt__GetAudioSourceConfigurations(struct soap*, struct __trt__GetAudioSourceConfigurations *, const char*, const char*);

inline int soap_read___trt__GetAudioSourceConfigurations(struct soap *soap, struct __trt__GetAudioSourceConfigurations *p)
{
	if (p)
	{	soap_default___trt__GetAudioSourceConfigurations(soap, p);
		if (soap_begin_recv(soap) || soap_get___trt__GetAudioSourceConfigurations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___trt__GetVideoEncoderConfigurations_DEFINED
#define SOAP_TYPE___trt__GetVideoEncoderConfigurations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__GetVideoEncoderConfigurations(struct soap*, struct __trt__GetVideoEncoderConfigurations *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__GetVideoEncoderConfigurations(struct soap*, const struct __trt__GetVideoEncoderConfigurations *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__GetVideoEncoderConfigurations(struct soap*, const char*, int, const struct __trt__GetVideoEncoderConfigurations *, const char*);
SOAP_FMAC3 struct __trt__GetVideoEncoderConfigurations * SOAP_FMAC4 soap_in___trt__GetVideoEncoderConfigurations(struct soap*, const char*, struct __trt__GetVideoEncoderConfigurations *, const char*);
SOAP_FMAC1 struct __trt__GetVideoEncoderConfigurations * SOAP_FMAC2 soap_instantiate___trt__GetVideoEncoderConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__GetVideoEncoderConfigurations * soap_new___trt__GetVideoEncoderConfigurations(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__GetVideoEncoderConfigurations(soap, n, NULL, NULL, NULL);
}

inline struct __trt__GetVideoEncoderConfigurations * soap_new_req___trt__GetVideoEncoderConfigurations(
	struct soap *soap)
{
	struct __trt__GetVideoEncoderConfigurations *_p = soap_new___trt__GetVideoEncoderConfigurations(soap);
	if (_p)
	{	soap_default___trt__GetVideoEncoderConfigurations(soap, _p);
	}
	return _p;
}

inline struct __trt__GetVideoEncoderConfigurations * soap_new_set___trt__GetVideoEncoderConfigurations(
	struct soap *soap,
	_trt__GetVideoEncoderConfigurations *trt__GetVideoEncoderConfigurations)
{
	struct __trt__GetVideoEncoderConfigurations *_p = soap_new___trt__GetVideoEncoderConfigurations(soap);
	if (_p)
	{	soap_default___trt__GetVideoEncoderConfigurations(soap, _p);
		_p->trt__GetVideoEncoderConfigurations = trt__GetVideoEncoderConfigurations;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__GetVideoEncoderConfigurations(struct soap*, const struct __trt__GetVideoEncoderConfigurations *, const char*, const char*);

inline int soap_write___trt__GetVideoEncoderConfigurations(struct soap *soap, struct __trt__GetVideoEncoderConfigurations const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___trt__GetVideoEncoderConfigurations(soap, p), 0) || soap_put___trt__GetVideoEncoderConfigurations(soap, p, "-trt:GetVideoEncoderConfigurations", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__GetVideoEncoderConfigurations * SOAP_FMAC4 soap_get___trt__GetVideoEncoderConfigurations(struct soap*, struct __trt__GetVideoEncoderConfigurations *, const char*, const char*);

inline int soap_read___trt__GetVideoEncoderConfigurations(struct soap *soap, struct __trt__GetVideoEncoderConfigurations *p)
{
	if (p)
	{	soap_default___trt__GetVideoEncoderConfigurations(soap, p);
		if (soap_begin_recv(soap) || soap_get___trt__GetVideoEncoderConfigurations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___trt__GetVideoSourceConfigurations_DEFINED
#define SOAP_TYPE___trt__GetVideoSourceConfigurations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__GetVideoSourceConfigurations(struct soap*, struct __trt__GetVideoSourceConfigurations *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__GetVideoSourceConfigurations(struct soap*, const struct __trt__GetVideoSourceConfigurations *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__GetVideoSourceConfigurations(struct soap*, const char*, int, const struct __trt__GetVideoSourceConfigurations *, const char*);
SOAP_FMAC3 struct __trt__GetVideoSourceConfigurations * SOAP_FMAC4 soap_in___trt__GetVideoSourceConfigurations(struct soap*, const char*, struct __trt__GetVideoSourceConfigurations *, const char*);
SOAP_FMAC1 struct __trt__GetVideoSourceConfigurations * SOAP_FMAC2 soap_instantiate___trt__GetVideoSourceConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__GetVideoSourceConfigurations * soap_new___trt__GetVideoSourceConfigurations(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__GetVideoSourceConfigurations(soap, n, NULL, NULL, NULL);
}

inline struct __trt__GetVideoSourceConfigurations * soap_new_req___trt__GetVideoSourceConfigurations(
	struct soap *soap)
{
	struct __trt__GetVideoSourceConfigurations *_p = soap_new___trt__GetVideoSourceConfigurations(soap);
	if (_p)
	{	soap_default___trt__GetVideoSourceConfigurations(soap, _p);
	}
	return _p;
}

inline struct __trt__GetVideoSourceConfigurations * soap_new_set___trt__GetVideoSourceConfigurations(
	struct soap *soap,
	_trt__GetVideoSourceConfigurations *trt__GetVideoSourceConfigurations)
{
	struct __trt__GetVideoSourceConfigurations *_p = soap_new___trt__GetVideoSourceConfigurations(soap);
	if (_p)
	{	soap_default___trt__GetVideoSourceConfigurations(soap, _p);
		_p->trt__GetVideoSourceConfigurations = trt__GetVideoSourceConfigurations;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__GetVideoSourceConfigurations(struct soap*, const struct __trt__GetVideoSourceConfigurations *, const char*, const char*);

inline int soap_write___trt__GetVideoSourceConfigurations(struct soap *soap, struct __trt__GetVideoSourceConfigurations const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___trt__GetVideoSourceConfigurations(soap, p), 0) || soap_put___trt__GetVideoSourceConfigurations(soap, p, "-trt:GetVideoSourceConfigurations", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__GetVideoSourceConfigurations * SOAP_FMAC4 soap_get___trt__GetVideoSourceConfigurations(struct soap*, struct __trt__GetVideoSourceConfigurations *, const char*, const char*);

inline int soap_read___trt__GetVideoSourceConfigurations(struct soap *soap, struct __trt__GetVideoSourceConfigurations *p)
{
	if (p)
	{	soap_default___trt__GetVideoSourceConfigurations(soap, p);
		if (soap_begin_recv(soap) || soap_get___trt__GetVideoSourceConfigurations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___trt__DeleteProfile_DEFINED
#define SOAP_TYPE___trt__DeleteProfile_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__DeleteProfile(struct soap*, struct __trt__DeleteProfile *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__DeleteProfile(struct soap*, const struct __trt__DeleteProfile *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__DeleteProfile(struct soap*, const char*, int, const struct __trt__DeleteProfile *, const char*);
SOAP_FMAC3 struct __trt__DeleteProfile * SOAP_FMAC4 soap_in___trt__DeleteProfile(struct soap*, const char*, struct __trt__DeleteProfile *, const char*);
SOAP_FMAC1 struct __trt__DeleteProfile * SOAP_FMAC2 soap_instantiate___trt__DeleteProfile(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__DeleteProfile * soap_new___trt__DeleteProfile(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__DeleteProfile(soap, n, NULL, NULL, NULL);
}

inline struct __trt__DeleteProfile * soap_new_req___trt__DeleteProfile(
	struct soap *soap)
{
	struct __trt__DeleteProfile *_p = soap_new___trt__DeleteProfile(soap);
	if (_p)
	{	soap_default___trt__DeleteProfile(soap, _p);
	}
	return _p;
}

inline struct __trt__DeleteProfile * soap_new_set___trt__DeleteProfile(
	struct soap *soap,
	_trt__DeleteProfile *trt__DeleteProfile)
{
	struct __trt__DeleteProfile *_p = soap_new___trt__DeleteProfile(soap);
	if (_p)
	{	soap_default___trt__DeleteProfile(soap, _p);
		_p->trt__DeleteProfile = trt__DeleteProfile;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__DeleteProfile(struct soap*, const struct __trt__DeleteProfile *, const char*, const char*);

inline int soap_write___trt__DeleteProfile(struct soap *soap, struct __trt__DeleteProfile const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___trt__DeleteProfile(soap, p), 0) || soap_put___trt__DeleteProfile(soap, p, "-trt:DeleteProfile", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__DeleteProfile * SOAP_FMAC4 soap_get___trt__DeleteProfile(struct soap*, struct __trt__DeleteProfile *, const char*, const char*);

inline int soap_read___trt__DeleteProfile(struct soap *soap, struct __trt__DeleteProfile *p)
{
	if (p)
	{	soap_default___trt__DeleteProfile(soap, p);
		if (soap_begin_recv(soap) || soap_get___trt__DeleteProfile(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___trt__RemoveAudioDecoderConfiguration_DEFINED
#define SOAP_TYPE___trt__RemoveAudioDecoderConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__RemoveAudioDecoderConfiguration(struct soap*, struct __trt__RemoveAudioDecoderConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__RemoveAudioDecoderConfiguration(struct soap*, const struct __trt__RemoveAudioDecoderConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__RemoveAudioDecoderConfiguration(struct soap*, const char*, int, const struct __trt__RemoveAudioDecoderConfiguration *, const char*);
SOAP_FMAC3 struct __trt__RemoveAudioDecoderConfiguration * SOAP_FMAC4 soap_in___trt__RemoveAudioDecoderConfiguration(struct soap*, const char*, struct __trt__RemoveAudioDecoderConfiguration *, const char*);
SOAP_FMAC1 struct __trt__RemoveAudioDecoderConfiguration * SOAP_FMAC2 soap_instantiate___trt__RemoveAudioDecoderConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__RemoveAudioDecoderConfiguration * soap_new___trt__RemoveAudioDecoderConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__RemoveAudioDecoderConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __trt__RemoveAudioDecoderConfiguration * soap_new_req___trt__RemoveAudioDecoderConfiguration(
	struct soap *soap)
{
	struct __trt__RemoveAudioDecoderConfiguration *_p = soap_new___trt__RemoveAudioDecoderConfiguration(soap);
	if (_p)
	{	soap_default___trt__RemoveAudioDecoderConfiguration(soap, _p);
	}
	return _p;
}

inline struct __trt__RemoveAudioDecoderConfiguration * soap_new_set___trt__RemoveAudioDecoderConfiguration(
	struct soap *soap,
	_trt__RemoveAudioDecoderConfiguration *trt__RemoveAudioDecoderConfiguration)
{
	struct __trt__RemoveAudioDecoderConfiguration *_p = soap_new___trt__RemoveAudioDecoderConfiguration(soap);
	if (_p)
	{	soap_default___trt__RemoveAudioDecoderConfiguration(soap, _p);
		_p->trt__RemoveAudioDecoderConfiguration = trt__RemoveAudioDecoderConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__RemoveAudioDecoderConfiguration(struct soap*, const struct __trt__RemoveAudioDecoderConfiguration *, const char*, const char*);

inline int soap_write___trt__RemoveAudioDecoderConfiguration(struct soap *soap, struct __trt__RemoveAudioDecoderConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___trt__RemoveAudioDecoderConfiguration(soap, p), 0) || soap_put___trt__RemoveAudioDecoderConfiguration(soap, p, "-trt:RemoveAudioDecoderConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__RemoveAudioDecoderConfiguration * SOAP_FMAC4 soap_get___trt__RemoveAudioDecoderConfiguration(struct soap*, struct __trt__RemoveAudioDecoderConfiguration *, const char*, const char*);

inline int soap_read___trt__RemoveAudioDecoderConfiguration(struct soap *soap, struct __trt__RemoveAudioDecoderConfiguration *p)
{
	if (p)
	{	soap_default___trt__RemoveAudioDecoderConfiguration(soap, p);
		if (soap_begin_recv(soap) || soap_get___trt__RemoveAudioDecoderConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___trt__RemoveAudioOutputConfiguration_DEFINED
#define SOAP_TYPE___trt__RemoveAudioOutputConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__RemoveAudioOutputConfiguration(struct soap*, struct __trt__RemoveAudioOutputConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__RemoveAudioOutputConfiguration(struct soap*, const struct __trt__RemoveAudioOutputConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__RemoveAudioOutputConfiguration(struct soap*, const char*, int, const struct __trt__RemoveAudioOutputConfiguration *, const char*);
SOAP_FMAC3 struct __trt__RemoveAudioOutputConfiguration * SOAP_FMAC4 soap_in___trt__RemoveAudioOutputConfiguration(struct soap*, const char*, struct __trt__RemoveAudioOutputConfiguration *, const char*);
SOAP_FMAC1 struct __trt__RemoveAudioOutputConfiguration * SOAP_FMAC2 soap_instantiate___trt__RemoveAudioOutputConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__RemoveAudioOutputConfiguration * soap_new___trt__RemoveAudioOutputConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__RemoveAudioOutputConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __trt__RemoveAudioOutputConfiguration * soap_new_req___trt__RemoveAudioOutputConfiguration(
	struct soap *soap)
{
	struct __trt__RemoveAudioOutputConfiguration *_p = soap_new___trt__RemoveAudioOutputConfiguration(soap);
	if (_p)
	{	soap_default___trt__RemoveAudioOutputConfiguration(soap, _p);
	}
	return _p;
}

inline struct __trt__RemoveAudioOutputConfiguration * soap_new_set___trt__RemoveAudioOutputConfiguration(
	struct soap *soap,
	_trt__RemoveAudioOutputConfiguration *trt__RemoveAudioOutputConfiguration)
{
	struct __trt__RemoveAudioOutputConfiguration *_p = soap_new___trt__RemoveAudioOutputConfiguration(soap);
	if (_p)
	{	soap_default___trt__RemoveAudioOutputConfiguration(soap, _p);
		_p->trt__RemoveAudioOutputConfiguration = trt__RemoveAudioOutputConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__RemoveAudioOutputConfiguration(struct soap*, const struct __trt__RemoveAudioOutputConfiguration *, const char*, const char*);

inline int soap_write___trt__RemoveAudioOutputConfiguration(struct soap *soap, struct __trt__RemoveAudioOutputConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___trt__RemoveAudioOutputConfiguration(soap, p), 0) || soap_put___trt__RemoveAudioOutputConfiguration(soap, p, "-trt:RemoveAudioOutputConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__RemoveAudioOutputConfiguration * SOAP_FMAC4 soap_get___trt__RemoveAudioOutputConfiguration(struct soap*, struct __trt__RemoveAudioOutputConfiguration *, const char*, const char*);

inline int soap_read___trt__RemoveAudioOutputConfiguration(struct soap *soap, struct __trt__RemoveAudioOutputConfiguration *p)
{
	if (p)
	{	soap_default___trt__RemoveAudioOutputConfiguration(soap, p);
		if (soap_begin_recv(soap) || soap_get___trt__RemoveAudioOutputConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___trt__RemoveMetadataConfiguration_DEFINED
#define SOAP_TYPE___trt__RemoveMetadataConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__RemoveMetadataConfiguration(struct soap*, struct __trt__RemoveMetadataConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__RemoveMetadataConfiguration(struct soap*, const struct __trt__RemoveMetadataConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__RemoveMetadataConfiguration(struct soap*, const char*, int, const struct __trt__RemoveMetadataConfiguration *, const char*);
SOAP_FMAC3 struct __trt__RemoveMetadataConfiguration * SOAP_FMAC4 soap_in___trt__RemoveMetadataConfiguration(struct soap*, const char*, struct __trt__RemoveMetadataConfiguration *, const char*);
SOAP_FMAC1 struct __trt__RemoveMetadataConfiguration * SOAP_FMAC2 soap_instantiate___trt__RemoveMetadataConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__RemoveMetadataConfiguration * soap_new___trt__RemoveMetadataConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__RemoveMetadataConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __trt__RemoveMetadataConfiguration * soap_new_req___trt__RemoveMetadataConfiguration(
	struct soap *soap)
{
	struct __trt__RemoveMetadataConfiguration *_p = soap_new___trt__RemoveMetadataConfiguration(soap);
	if (_p)
	{	soap_default___trt__RemoveMetadataConfiguration(soap, _p);
	}
	return _p;
}

inline struct __trt__RemoveMetadataConfiguration * soap_new_set___trt__RemoveMetadataConfiguration(
	struct soap *soap,
	_trt__RemoveMetadataConfiguration *trt__RemoveMetadataConfiguration)
{
	struct __trt__RemoveMetadataConfiguration *_p = soap_new___trt__RemoveMetadataConfiguration(soap);
	if (_p)
	{	soap_default___trt__RemoveMetadataConfiguration(soap, _p);
		_p->trt__RemoveMetadataConfiguration = trt__RemoveMetadataConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__RemoveMetadataConfiguration(struct soap*, const struct __trt__RemoveMetadataConfiguration *, const char*, const char*);

inline int soap_write___trt__RemoveMetadataConfiguration(struct soap *soap, struct __trt__RemoveMetadataConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___trt__RemoveMetadataConfiguration(soap, p), 0) || soap_put___trt__RemoveMetadataConfiguration(soap, p, "-trt:RemoveMetadataConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__RemoveMetadataConfiguration * SOAP_FMAC4 soap_get___trt__RemoveMetadataConfiguration(struct soap*, struct __trt__RemoveMetadataConfiguration *, const char*, const char*);

inline int soap_read___trt__RemoveMetadataConfiguration(struct soap *soap, struct __trt__RemoveMetadataConfiguration *p)
{
	if (p)
	{	soap_default___trt__RemoveMetadataConfiguration(soap, p);
		if (soap_begin_recv(soap) || soap_get___trt__RemoveMetadataConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___trt__RemoveVideoAnalyticsConfiguration_DEFINED
#define SOAP_TYPE___trt__RemoveVideoAnalyticsConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__RemoveVideoAnalyticsConfiguration(struct soap*, struct __trt__RemoveVideoAnalyticsConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__RemoveVideoAnalyticsConfiguration(struct soap*, const struct __trt__RemoveVideoAnalyticsConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__RemoveVideoAnalyticsConfiguration(struct soap*, const char*, int, const struct __trt__RemoveVideoAnalyticsConfiguration *, const char*);
SOAP_FMAC3 struct __trt__RemoveVideoAnalyticsConfiguration * SOAP_FMAC4 soap_in___trt__RemoveVideoAnalyticsConfiguration(struct soap*, const char*, struct __trt__RemoveVideoAnalyticsConfiguration *, const char*);
SOAP_FMAC1 struct __trt__RemoveVideoAnalyticsConfiguration * SOAP_FMAC2 soap_instantiate___trt__RemoveVideoAnalyticsConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__RemoveVideoAnalyticsConfiguration * soap_new___trt__RemoveVideoAnalyticsConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__RemoveVideoAnalyticsConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __trt__RemoveVideoAnalyticsConfiguration * soap_new_req___trt__RemoveVideoAnalyticsConfiguration(
	struct soap *soap)
{
	struct __trt__RemoveVideoAnalyticsConfiguration *_p = soap_new___trt__RemoveVideoAnalyticsConfiguration(soap);
	if (_p)
	{	soap_default___trt__RemoveVideoAnalyticsConfiguration(soap, _p);
	}
	return _p;
}

inline struct __trt__RemoveVideoAnalyticsConfiguration * soap_new_set___trt__RemoveVideoAnalyticsConfiguration(
	struct soap *soap,
	_trt__RemoveVideoAnalyticsConfiguration *trt__RemoveVideoAnalyticsConfiguration)
{
	struct __trt__RemoveVideoAnalyticsConfiguration *_p = soap_new___trt__RemoveVideoAnalyticsConfiguration(soap);
	if (_p)
	{	soap_default___trt__RemoveVideoAnalyticsConfiguration(soap, _p);
		_p->trt__RemoveVideoAnalyticsConfiguration = trt__RemoveVideoAnalyticsConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__RemoveVideoAnalyticsConfiguration(struct soap*, const struct __trt__RemoveVideoAnalyticsConfiguration *, const char*, const char*);

inline int soap_write___trt__RemoveVideoAnalyticsConfiguration(struct soap *soap, struct __trt__RemoveVideoAnalyticsConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___trt__RemoveVideoAnalyticsConfiguration(soap, p), 0) || soap_put___trt__RemoveVideoAnalyticsConfiguration(soap, p, "-trt:RemoveVideoAnalyticsConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__RemoveVideoAnalyticsConfiguration * SOAP_FMAC4 soap_get___trt__RemoveVideoAnalyticsConfiguration(struct soap*, struct __trt__RemoveVideoAnalyticsConfiguration *, const char*, const char*);

inline int soap_read___trt__RemoveVideoAnalyticsConfiguration(struct soap *soap, struct __trt__RemoveVideoAnalyticsConfiguration *p)
{
	if (p)
	{	soap_default___trt__RemoveVideoAnalyticsConfiguration(soap, p);
		if (soap_begin_recv(soap) || soap_get___trt__RemoveVideoAnalyticsConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___trt__RemovePTZConfiguration_DEFINED
#define SOAP_TYPE___trt__RemovePTZConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__RemovePTZConfiguration(struct soap*, struct __trt__RemovePTZConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__RemovePTZConfiguration(struct soap*, const struct __trt__RemovePTZConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__RemovePTZConfiguration(struct soap*, const char*, int, const struct __trt__RemovePTZConfiguration *, const char*);
SOAP_FMAC3 struct __trt__RemovePTZConfiguration * SOAP_FMAC4 soap_in___trt__RemovePTZConfiguration(struct soap*, const char*, struct __trt__RemovePTZConfiguration *, const char*);
SOAP_FMAC1 struct __trt__RemovePTZConfiguration * SOAP_FMAC2 soap_instantiate___trt__RemovePTZConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__RemovePTZConfiguration * soap_new___trt__RemovePTZConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__RemovePTZConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __trt__RemovePTZConfiguration * soap_new_req___trt__RemovePTZConfiguration(
	struct soap *soap)
{
	struct __trt__RemovePTZConfiguration *_p = soap_new___trt__RemovePTZConfiguration(soap);
	if (_p)
	{	soap_default___trt__RemovePTZConfiguration(soap, _p);
	}
	return _p;
}

inline struct __trt__RemovePTZConfiguration * soap_new_set___trt__RemovePTZConfiguration(
	struct soap *soap,
	_trt__RemovePTZConfiguration *trt__RemovePTZConfiguration)
{
	struct __trt__RemovePTZConfiguration *_p = soap_new___trt__RemovePTZConfiguration(soap);
	if (_p)
	{	soap_default___trt__RemovePTZConfiguration(soap, _p);
		_p->trt__RemovePTZConfiguration = trt__RemovePTZConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__RemovePTZConfiguration(struct soap*, const struct __trt__RemovePTZConfiguration *, const char*, const char*);

inline int soap_write___trt__RemovePTZConfiguration(struct soap *soap, struct __trt__RemovePTZConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___trt__RemovePTZConfiguration(soap, p), 0) || soap_put___trt__RemovePTZConfiguration(soap, p, "-trt:RemovePTZConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__RemovePTZConfiguration * SOAP_FMAC4 soap_get___trt__RemovePTZConfiguration(struct soap*, struct __trt__RemovePTZConfiguration *, const char*, const char*);

inline int soap_read___trt__RemovePTZConfiguration(struct soap *soap, struct __trt__RemovePTZConfiguration *p)
{
	if (p)
	{	soap_default___trt__RemovePTZConfiguration(soap, p);
		if (soap_begin_recv(soap) || soap_get___trt__RemovePTZConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___trt__RemoveAudioSourceConfiguration_DEFINED
#define SOAP_TYPE___trt__RemoveAudioSourceConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__RemoveAudioSourceConfiguration(struct soap*, struct __trt__RemoveAudioSourceConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__RemoveAudioSourceConfiguration(struct soap*, const struct __trt__RemoveAudioSourceConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__RemoveAudioSourceConfiguration(struct soap*, const char*, int, const struct __trt__RemoveAudioSourceConfiguration *, const char*);
SOAP_FMAC3 struct __trt__RemoveAudioSourceConfiguration * SOAP_FMAC4 soap_in___trt__RemoveAudioSourceConfiguration(struct soap*, const char*, struct __trt__RemoveAudioSourceConfiguration *, const char*);
SOAP_FMAC1 struct __trt__RemoveAudioSourceConfiguration * SOAP_FMAC2 soap_instantiate___trt__RemoveAudioSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__RemoveAudioSourceConfiguration * soap_new___trt__RemoveAudioSourceConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__RemoveAudioSourceConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __trt__RemoveAudioSourceConfiguration * soap_new_req___trt__RemoveAudioSourceConfiguration(
	struct soap *soap)
{
	struct __trt__RemoveAudioSourceConfiguration *_p = soap_new___trt__RemoveAudioSourceConfiguration(soap);
	if (_p)
	{	soap_default___trt__RemoveAudioSourceConfiguration(soap, _p);
	}
	return _p;
}

inline struct __trt__RemoveAudioSourceConfiguration * soap_new_set___trt__RemoveAudioSourceConfiguration(
	struct soap *soap,
	_trt__RemoveAudioSourceConfiguration *trt__RemoveAudioSourceConfiguration)
{
	struct __trt__RemoveAudioSourceConfiguration *_p = soap_new___trt__RemoveAudioSourceConfiguration(soap);
	if (_p)
	{	soap_default___trt__RemoveAudioSourceConfiguration(soap, _p);
		_p->trt__RemoveAudioSourceConfiguration = trt__RemoveAudioSourceConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__RemoveAudioSourceConfiguration(struct soap*, const struct __trt__RemoveAudioSourceConfiguration *, const char*, const char*);

inline int soap_write___trt__RemoveAudioSourceConfiguration(struct soap *soap, struct __trt__RemoveAudioSourceConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___trt__RemoveAudioSourceConfiguration(soap, p), 0) || soap_put___trt__RemoveAudioSourceConfiguration(soap, p, "-trt:RemoveAudioSourceConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__RemoveAudioSourceConfiguration * SOAP_FMAC4 soap_get___trt__RemoveAudioSourceConfiguration(struct soap*, struct __trt__RemoveAudioSourceConfiguration *, const char*, const char*);

inline int soap_read___trt__RemoveAudioSourceConfiguration(struct soap *soap, struct __trt__RemoveAudioSourceConfiguration *p)
{
	if (p)
	{	soap_default___trt__RemoveAudioSourceConfiguration(soap, p);
		if (soap_begin_recv(soap) || soap_get___trt__RemoveAudioSourceConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___trt__RemoveAudioEncoderConfiguration_DEFINED
#define SOAP_TYPE___trt__RemoveAudioEncoderConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__RemoveAudioEncoderConfiguration(struct soap*, struct __trt__RemoveAudioEncoderConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__RemoveAudioEncoderConfiguration(struct soap*, const struct __trt__RemoveAudioEncoderConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__RemoveAudioEncoderConfiguration(struct soap*, const char*, int, const struct __trt__RemoveAudioEncoderConfiguration *, const char*);
SOAP_FMAC3 struct __trt__RemoveAudioEncoderConfiguration * SOAP_FMAC4 soap_in___trt__RemoveAudioEncoderConfiguration(struct soap*, const char*, struct __trt__RemoveAudioEncoderConfiguration *, const char*);
SOAP_FMAC1 struct __trt__RemoveAudioEncoderConfiguration * SOAP_FMAC2 soap_instantiate___trt__RemoveAudioEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__RemoveAudioEncoderConfiguration * soap_new___trt__RemoveAudioEncoderConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__RemoveAudioEncoderConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __trt__RemoveAudioEncoderConfiguration * soap_new_req___trt__RemoveAudioEncoderConfiguration(
	struct soap *soap)
{
	struct __trt__RemoveAudioEncoderConfiguration *_p = soap_new___trt__RemoveAudioEncoderConfiguration(soap);
	if (_p)
	{	soap_default___trt__RemoveAudioEncoderConfiguration(soap, _p);
	}
	return _p;
}

inline struct __trt__RemoveAudioEncoderConfiguration * soap_new_set___trt__RemoveAudioEncoderConfiguration(
	struct soap *soap,
	_trt__RemoveAudioEncoderConfiguration *trt__RemoveAudioEncoderConfiguration)
{
	struct __trt__RemoveAudioEncoderConfiguration *_p = soap_new___trt__RemoveAudioEncoderConfiguration(soap);
	if (_p)
	{	soap_default___trt__RemoveAudioEncoderConfiguration(soap, _p);
		_p->trt__RemoveAudioEncoderConfiguration = trt__RemoveAudioEncoderConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__RemoveAudioEncoderConfiguration(struct soap*, const struct __trt__RemoveAudioEncoderConfiguration *, const char*, const char*);

inline int soap_write___trt__RemoveAudioEncoderConfiguration(struct soap *soap, struct __trt__RemoveAudioEncoderConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___trt__RemoveAudioEncoderConfiguration(soap, p), 0) || soap_put___trt__RemoveAudioEncoderConfiguration(soap, p, "-trt:RemoveAudioEncoderConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__RemoveAudioEncoderConfiguration * SOAP_FMAC4 soap_get___trt__RemoveAudioEncoderConfiguration(struct soap*, struct __trt__RemoveAudioEncoderConfiguration *, const char*, const char*);

inline int soap_read___trt__RemoveAudioEncoderConfiguration(struct soap *soap, struct __trt__RemoveAudioEncoderConfiguration *p)
{
	if (p)
	{	soap_default___trt__RemoveAudioEncoderConfiguration(soap, p);
		if (soap_begin_recv(soap) || soap_get___trt__RemoveAudioEncoderConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___trt__RemoveVideoSourceConfiguration_DEFINED
#define SOAP_TYPE___trt__RemoveVideoSourceConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__RemoveVideoSourceConfiguration(struct soap*, struct __trt__RemoveVideoSourceConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__RemoveVideoSourceConfiguration(struct soap*, const struct __trt__RemoveVideoSourceConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__RemoveVideoSourceConfiguration(struct soap*, const char*, int, const struct __trt__RemoveVideoSourceConfiguration *, const char*);
SOAP_FMAC3 struct __trt__RemoveVideoSourceConfiguration * SOAP_FMAC4 soap_in___trt__RemoveVideoSourceConfiguration(struct soap*, const char*, struct __trt__RemoveVideoSourceConfiguration *, const char*);
SOAP_FMAC1 struct __trt__RemoveVideoSourceConfiguration * SOAP_FMAC2 soap_instantiate___trt__RemoveVideoSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__RemoveVideoSourceConfiguration * soap_new___trt__RemoveVideoSourceConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__RemoveVideoSourceConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __trt__RemoveVideoSourceConfiguration * soap_new_req___trt__RemoveVideoSourceConfiguration(
	struct soap *soap)
{
	struct __trt__RemoveVideoSourceConfiguration *_p = soap_new___trt__RemoveVideoSourceConfiguration(soap);
	if (_p)
	{	soap_default___trt__RemoveVideoSourceConfiguration(soap, _p);
	}
	return _p;
}

inline struct __trt__RemoveVideoSourceConfiguration * soap_new_set___trt__RemoveVideoSourceConfiguration(
	struct soap *soap,
	_trt__RemoveVideoSourceConfiguration *trt__RemoveVideoSourceConfiguration)
{
	struct __trt__RemoveVideoSourceConfiguration *_p = soap_new___trt__RemoveVideoSourceConfiguration(soap);
	if (_p)
	{	soap_default___trt__RemoveVideoSourceConfiguration(soap, _p);
		_p->trt__RemoveVideoSourceConfiguration = trt__RemoveVideoSourceConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__RemoveVideoSourceConfiguration(struct soap*, const struct __trt__RemoveVideoSourceConfiguration *, const char*, const char*);

inline int soap_write___trt__RemoveVideoSourceConfiguration(struct soap *soap, struct __trt__RemoveVideoSourceConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___trt__RemoveVideoSourceConfiguration(soap, p), 0) || soap_put___trt__RemoveVideoSourceConfiguration(soap, p, "-trt:RemoveVideoSourceConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__RemoveVideoSourceConfiguration * SOAP_FMAC4 soap_get___trt__RemoveVideoSourceConfiguration(struct soap*, struct __trt__RemoveVideoSourceConfiguration *, const char*, const char*);

inline int soap_read___trt__RemoveVideoSourceConfiguration(struct soap *soap, struct __trt__RemoveVideoSourceConfiguration *p)
{
	if (p)
	{	soap_default___trt__RemoveVideoSourceConfiguration(soap, p);
		if (soap_begin_recv(soap) || soap_get___trt__RemoveVideoSourceConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___trt__RemoveVideoEncoderConfiguration_DEFINED
#define SOAP_TYPE___trt__RemoveVideoEncoderConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__RemoveVideoEncoderConfiguration(struct soap*, struct __trt__RemoveVideoEncoderConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__RemoveVideoEncoderConfiguration(struct soap*, const struct __trt__RemoveVideoEncoderConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__RemoveVideoEncoderConfiguration(struct soap*, const char*, int, const struct __trt__RemoveVideoEncoderConfiguration *, const char*);
SOAP_FMAC3 struct __trt__RemoveVideoEncoderConfiguration * SOAP_FMAC4 soap_in___trt__RemoveVideoEncoderConfiguration(struct soap*, const char*, struct __trt__RemoveVideoEncoderConfiguration *, const char*);
SOAP_FMAC1 struct __trt__RemoveVideoEncoderConfiguration * SOAP_FMAC2 soap_instantiate___trt__RemoveVideoEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__RemoveVideoEncoderConfiguration * soap_new___trt__RemoveVideoEncoderConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__RemoveVideoEncoderConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __trt__RemoveVideoEncoderConfiguration * soap_new_req___trt__RemoveVideoEncoderConfiguration(
	struct soap *soap)
{
	struct __trt__RemoveVideoEncoderConfiguration *_p = soap_new___trt__RemoveVideoEncoderConfiguration(soap);
	if (_p)
	{	soap_default___trt__RemoveVideoEncoderConfiguration(soap, _p);
	}
	return _p;
}

inline struct __trt__RemoveVideoEncoderConfiguration * soap_new_set___trt__RemoveVideoEncoderConfiguration(
	struct soap *soap,
	_trt__RemoveVideoEncoderConfiguration *trt__RemoveVideoEncoderConfiguration)
{
	struct __trt__RemoveVideoEncoderConfiguration *_p = soap_new___trt__RemoveVideoEncoderConfiguration(soap);
	if (_p)
	{	soap_default___trt__RemoveVideoEncoderConfiguration(soap, _p);
		_p->trt__RemoveVideoEncoderConfiguration = trt__RemoveVideoEncoderConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__RemoveVideoEncoderConfiguration(struct soap*, const struct __trt__RemoveVideoEncoderConfiguration *, const char*, const char*);

inline int soap_write___trt__RemoveVideoEncoderConfiguration(struct soap *soap, struct __trt__RemoveVideoEncoderConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___trt__RemoveVideoEncoderConfiguration(soap, p), 0) || soap_put___trt__RemoveVideoEncoderConfiguration(soap, p, "-trt:RemoveVideoEncoderConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__RemoveVideoEncoderConfiguration * SOAP_FMAC4 soap_get___trt__RemoveVideoEncoderConfiguration(struct soap*, struct __trt__RemoveVideoEncoderConfiguration *, const char*, const char*);

inline int soap_read___trt__RemoveVideoEncoderConfiguration(struct soap *soap, struct __trt__RemoveVideoEncoderConfiguration *p)
{
	if (p)
	{	soap_default___trt__RemoveVideoEncoderConfiguration(soap, p);
		if (soap_begin_recv(soap) || soap_get___trt__RemoveVideoEncoderConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___trt__AddAudioDecoderConfiguration_DEFINED
#define SOAP_TYPE___trt__AddAudioDecoderConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__AddAudioDecoderConfiguration(struct soap*, struct __trt__AddAudioDecoderConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__AddAudioDecoderConfiguration(struct soap*, const struct __trt__AddAudioDecoderConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__AddAudioDecoderConfiguration(struct soap*, const char*, int, const struct __trt__AddAudioDecoderConfiguration *, const char*);
SOAP_FMAC3 struct __trt__AddAudioDecoderConfiguration * SOAP_FMAC4 soap_in___trt__AddAudioDecoderConfiguration(struct soap*, const char*, struct __trt__AddAudioDecoderConfiguration *, const char*);
SOAP_FMAC1 struct __trt__AddAudioDecoderConfiguration * SOAP_FMAC2 soap_instantiate___trt__AddAudioDecoderConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__AddAudioDecoderConfiguration * soap_new___trt__AddAudioDecoderConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__AddAudioDecoderConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __trt__AddAudioDecoderConfiguration * soap_new_req___trt__AddAudioDecoderConfiguration(
	struct soap *soap)
{
	struct __trt__AddAudioDecoderConfiguration *_p = soap_new___trt__AddAudioDecoderConfiguration(soap);
	if (_p)
	{	soap_default___trt__AddAudioDecoderConfiguration(soap, _p);
	}
	return _p;
}

inline struct __trt__AddAudioDecoderConfiguration * soap_new_set___trt__AddAudioDecoderConfiguration(
	struct soap *soap,
	_trt__AddAudioDecoderConfiguration *trt__AddAudioDecoderConfiguration)
{
	struct __trt__AddAudioDecoderConfiguration *_p = soap_new___trt__AddAudioDecoderConfiguration(soap);
	if (_p)
	{	soap_default___trt__AddAudioDecoderConfiguration(soap, _p);
		_p->trt__AddAudioDecoderConfiguration = trt__AddAudioDecoderConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__AddAudioDecoderConfiguration(struct soap*, const struct __trt__AddAudioDecoderConfiguration *, const char*, const char*);

inline int soap_write___trt__AddAudioDecoderConfiguration(struct soap *soap, struct __trt__AddAudioDecoderConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___trt__AddAudioDecoderConfiguration(soap, p), 0) || soap_put___trt__AddAudioDecoderConfiguration(soap, p, "-trt:AddAudioDecoderConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__AddAudioDecoderConfiguration * SOAP_FMAC4 soap_get___trt__AddAudioDecoderConfiguration(struct soap*, struct __trt__AddAudioDecoderConfiguration *, const char*, const char*);

inline int soap_read___trt__AddAudioDecoderConfiguration(struct soap *soap, struct __trt__AddAudioDecoderConfiguration *p)
{
	if (p)
	{	soap_default___trt__AddAudioDecoderConfiguration(soap, p);
		if (soap_begin_recv(soap) || soap_get___trt__AddAudioDecoderConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___trt__AddAudioOutputConfiguration_DEFINED
#define SOAP_TYPE___trt__AddAudioOutputConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__AddAudioOutputConfiguration(struct soap*, struct __trt__AddAudioOutputConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__AddAudioOutputConfiguration(struct soap*, const struct __trt__AddAudioOutputConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__AddAudioOutputConfiguration(struct soap*, const char*, int, const struct __trt__AddAudioOutputConfiguration *, const char*);
SOAP_FMAC3 struct __trt__AddAudioOutputConfiguration * SOAP_FMAC4 soap_in___trt__AddAudioOutputConfiguration(struct soap*, const char*, struct __trt__AddAudioOutputConfiguration *, const char*);
SOAP_FMAC1 struct __trt__AddAudioOutputConfiguration * SOAP_FMAC2 soap_instantiate___trt__AddAudioOutputConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__AddAudioOutputConfiguration * soap_new___trt__AddAudioOutputConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__AddAudioOutputConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __trt__AddAudioOutputConfiguration * soap_new_req___trt__AddAudioOutputConfiguration(
	struct soap *soap)
{
	struct __trt__AddAudioOutputConfiguration *_p = soap_new___trt__AddAudioOutputConfiguration(soap);
	if (_p)
	{	soap_default___trt__AddAudioOutputConfiguration(soap, _p);
	}
	return _p;
}

inline struct __trt__AddAudioOutputConfiguration * soap_new_set___trt__AddAudioOutputConfiguration(
	struct soap *soap,
	_trt__AddAudioOutputConfiguration *trt__AddAudioOutputConfiguration)
{
	struct __trt__AddAudioOutputConfiguration *_p = soap_new___trt__AddAudioOutputConfiguration(soap);
	if (_p)
	{	soap_default___trt__AddAudioOutputConfiguration(soap, _p);
		_p->trt__AddAudioOutputConfiguration = trt__AddAudioOutputConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__AddAudioOutputConfiguration(struct soap*, const struct __trt__AddAudioOutputConfiguration *, const char*, const char*);

inline int soap_write___trt__AddAudioOutputConfiguration(struct soap *soap, struct __trt__AddAudioOutputConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___trt__AddAudioOutputConfiguration(soap, p), 0) || soap_put___trt__AddAudioOutputConfiguration(soap, p, "-trt:AddAudioOutputConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__AddAudioOutputConfiguration * SOAP_FMAC4 soap_get___trt__AddAudioOutputConfiguration(struct soap*, struct __trt__AddAudioOutputConfiguration *, const char*, const char*);

inline int soap_read___trt__AddAudioOutputConfiguration(struct soap *soap, struct __trt__AddAudioOutputConfiguration *p)
{
	if (p)
	{	soap_default___trt__AddAudioOutputConfiguration(soap, p);
		if (soap_begin_recv(soap) || soap_get___trt__AddAudioOutputConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___trt__AddMetadataConfiguration_DEFINED
#define SOAP_TYPE___trt__AddMetadataConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__AddMetadataConfiguration(struct soap*, struct __trt__AddMetadataConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__AddMetadataConfiguration(struct soap*, const struct __trt__AddMetadataConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__AddMetadataConfiguration(struct soap*, const char*, int, const struct __trt__AddMetadataConfiguration *, const char*);
SOAP_FMAC3 struct __trt__AddMetadataConfiguration * SOAP_FMAC4 soap_in___trt__AddMetadataConfiguration(struct soap*, const char*, struct __trt__AddMetadataConfiguration *, const char*);
SOAP_FMAC1 struct __trt__AddMetadataConfiguration * SOAP_FMAC2 soap_instantiate___trt__AddMetadataConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__AddMetadataConfiguration * soap_new___trt__AddMetadataConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__AddMetadataConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __trt__AddMetadataConfiguration * soap_new_req___trt__AddMetadataConfiguration(
	struct soap *soap)
{
	struct __trt__AddMetadataConfiguration *_p = soap_new___trt__AddMetadataConfiguration(soap);
	if (_p)
	{	soap_default___trt__AddMetadataConfiguration(soap, _p);
	}
	return _p;
}

inline struct __trt__AddMetadataConfiguration * soap_new_set___trt__AddMetadataConfiguration(
	struct soap *soap,
	_trt__AddMetadataConfiguration *trt__AddMetadataConfiguration)
{
	struct __trt__AddMetadataConfiguration *_p = soap_new___trt__AddMetadataConfiguration(soap);
	if (_p)
	{	soap_default___trt__AddMetadataConfiguration(soap, _p);
		_p->trt__AddMetadataConfiguration = trt__AddMetadataConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__AddMetadataConfiguration(struct soap*, const struct __trt__AddMetadataConfiguration *, const char*, const char*);

inline int soap_write___trt__AddMetadataConfiguration(struct soap *soap, struct __trt__AddMetadataConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___trt__AddMetadataConfiguration(soap, p), 0) || soap_put___trt__AddMetadataConfiguration(soap, p, "-trt:AddMetadataConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__AddMetadataConfiguration * SOAP_FMAC4 soap_get___trt__AddMetadataConfiguration(struct soap*, struct __trt__AddMetadataConfiguration *, const char*, const char*);

inline int soap_read___trt__AddMetadataConfiguration(struct soap *soap, struct __trt__AddMetadataConfiguration *p)
{
	if (p)
	{	soap_default___trt__AddMetadataConfiguration(soap, p);
		if (soap_begin_recv(soap) || soap_get___trt__AddMetadataConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___trt__AddVideoAnalyticsConfiguration_DEFINED
#define SOAP_TYPE___trt__AddVideoAnalyticsConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__AddVideoAnalyticsConfiguration(struct soap*, struct __trt__AddVideoAnalyticsConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__AddVideoAnalyticsConfiguration(struct soap*, const struct __trt__AddVideoAnalyticsConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__AddVideoAnalyticsConfiguration(struct soap*, const char*, int, const struct __trt__AddVideoAnalyticsConfiguration *, const char*);
SOAP_FMAC3 struct __trt__AddVideoAnalyticsConfiguration * SOAP_FMAC4 soap_in___trt__AddVideoAnalyticsConfiguration(struct soap*, const char*, struct __trt__AddVideoAnalyticsConfiguration *, const char*);
SOAP_FMAC1 struct __trt__AddVideoAnalyticsConfiguration * SOAP_FMAC2 soap_instantiate___trt__AddVideoAnalyticsConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__AddVideoAnalyticsConfiguration * soap_new___trt__AddVideoAnalyticsConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__AddVideoAnalyticsConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __trt__AddVideoAnalyticsConfiguration * soap_new_req___trt__AddVideoAnalyticsConfiguration(
	struct soap *soap)
{
	struct __trt__AddVideoAnalyticsConfiguration *_p = soap_new___trt__AddVideoAnalyticsConfiguration(soap);
	if (_p)
	{	soap_default___trt__AddVideoAnalyticsConfiguration(soap, _p);
	}
	return _p;
}

inline struct __trt__AddVideoAnalyticsConfiguration * soap_new_set___trt__AddVideoAnalyticsConfiguration(
	struct soap *soap,
	_trt__AddVideoAnalyticsConfiguration *trt__AddVideoAnalyticsConfiguration)
{
	struct __trt__AddVideoAnalyticsConfiguration *_p = soap_new___trt__AddVideoAnalyticsConfiguration(soap);
	if (_p)
	{	soap_default___trt__AddVideoAnalyticsConfiguration(soap, _p);
		_p->trt__AddVideoAnalyticsConfiguration = trt__AddVideoAnalyticsConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__AddVideoAnalyticsConfiguration(struct soap*, const struct __trt__AddVideoAnalyticsConfiguration *, const char*, const char*);

inline int soap_write___trt__AddVideoAnalyticsConfiguration(struct soap *soap, struct __trt__AddVideoAnalyticsConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___trt__AddVideoAnalyticsConfiguration(soap, p), 0) || soap_put___trt__AddVideoAnalyticsConfiguration(soap, p, "-trt:AddVideoAnalyticsConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__AddVideoAnalyticsConfiguration * SOAP_FMAC4 soap_get___trt__AddVideoAnalyticsConfiguration(struct soap*, struct __trt__AddVideoAnalyticsConfiguration *, const char*, const char*);

inline int soap_read___trt__AddVideoAnalyticsConfiguration(struct soap *soap, struct __trt__AddVideoAnalyticsConfiguration *p)
{
	if (p)
	{	soap_default___trt__AddVideoAnalyticsConfiguration(soap, p);
		if (soap_begin_recv(soap) || soap_get___trt__AddVideoAnalyticsConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___trt__AddPTZConfiguration_DEFINED
#define SOAP_TYPE___trt__AddPTZConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__AddPTZConfiguration(struct soap*, struct __trt__AddPTZConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__AddPTZConfiguration(struct soap*, const struct __trt__AddPTZConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__AddPTZConfiguration(struct soap*, const char*, int, const struct __trt__AddPTZConfiguration *, const char*);
SOAP_FMAC3 struct __trt__AddPTZConfiguration * SOAP_FMAC4 soap_in___trt__AddPTZConfiguration(struct soap*, const char*, struct __trt__AddPTZConfiguration *, const char*);
SOAP_FMAC1 struct __trt__AddPTZConfiguration * SOAP_FMAC2 soap_instantiate___trt__AddPTZConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__AddPTZConfiguration * soap_new___trt__AddPTZConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__AddPTZConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __trt__AddPTZConfiguration * soap_new_req___trt__AddPTZConfiguration(
	struct soap *soap)
{
	struct __trt__AddPTZConfiguration *_p = soap_new___trt__AddPTZConfiguration(soap);
	if (_p)
	{	soap_default___trt__AddPTZConfiguration(soap, _p);
	}
	return _p;
}

inline struct __trt__AddPTZConfiguration * soap_new_set___trt__AddPTZConfiguration(
	struct soap *soap,
	_trt__AddPTZConfiguration *trt__AddPTZConfiguration)
{
	struct __trt__AddPTZConfiguration *_p = soap_new___trt__AddPTZConfiguration(soap);
	if (_p)
	{	soap_default___trt__AddPTZConfiguration(soap, _p);
		_p->trt__AddPTZConfiguration = trt__AddPTZConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__AddPTZConfiguration(struct soap*, const struct __trt__AddPTZConfiguration *, const char*, const char*);

inline int soap_write___trt__AddPTZConfiguration(struct soap *soap, struct __trt__AddPTZConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___trt__AddPTZConfiguration(soap, p), 0) || soap_put___trt__AddPTZConfiguration(soap, p, "-trt:AddPTZConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__AddPTZConfiguration * SOAP_FMAC4 soap_get___trt__AddPTZConfiguration(struct soap*, struct __trt__AddPTZConfiguration *, const char*, const char*);

inline int soap_read___trt__AddPTZConfiguration(struct soap *soap, struct __trt__AddPTZConfiguration *p)
{
	if (p)
	{	soap_default___trt__AddPTZConfiguration(soap, p);
		if (soap_begin_recv(soap) || soap_get___trt__AddPTZConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___trt__AddAudioSourceConfiguration_DEFINED
#define SOAP_TYPE___trt__AddAudioSourceConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__AddAudioSourceConfiguration(struct soap*, struct __trt__AddAudioSourceConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__AddAudioSourceConfiguration(struct soap*, const struct __trt__AddAudioSourceConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__AddAudioSourceConfiguration(struct soap*, const char*, int, const struct __trt__AddAudioSourceConfiguration *, const char*);
SOAP_FMAC3 struct __trt__AddAudioSourceConfiguration * SOAP_FMAC4 soap_in___trt__AddAudioSourceConfiguration(struct soap*, const char*, struct __trt__AddAudioSourceConfiguration *, const char*);
SOAP_FMAC1 struct __trt__AddAudioSourceConfiguration * SOAP_FMAC2 soap_instantiate___trt__AddAudioSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__AddAudioSourceConfiguration * soap_new___trt__AddAudioSourceConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__AddAudioSourceConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __trt__AddAudioSourceConfiguration * soap_new_req___trt__AddAudioSourceConfiguration(
	struct soap *soap)
{
	struct __trt__AddAudioSourceConfiguration *_p = soap_new___trt__AddAudioSourceConfiguration(soap);
	if (_p)
	{	soap_default___trt__AddAudioSourceConfiguration(soap, _p);
	}
	return _p;
}

inline struct __trt__AddAudioSourceConfiguration * soap_new_set___trt__AddAudioSourceConfiguration(
	struct soap *soap,
	_trt__AddAudioSourceConfiguration *trt__AddAudioSourceConfiguration)
{
	struct __trt__AddAudioSourceConfiguration *_p = soap_new___trt__AddAudioSourceConfiguration(soap);
	if (_p)
	{	soap_default___trt__AddAudioSourceConfiguration(soap, _p);
		_p->trt__AddAudioSourceConfiguration = trt__AddAudioSourceConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__AddAudioSourceConfiguration(struct soap*, const struct __trt__AddAudioSourceConfiguration *, const char*, const char*);

inline int soap_write___trt__AddAudioSourceConfiguration(struct soap *soap, struct __trt__AddAudioSourceConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___trt__AddAudioSourceConfiguration(soap, p), 0) || soap_put___trt__AddAudioSourceConfiguration(soap, p, "-trt:AddAudioSourceConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__AddAudioSourceConfiguration * SOAP_FMAC4 soap_get___trt__AddAudioSourceConfiguration(struct soap*, struct __trt__AddAudioSourceConfiguration *, const char*, const char*);

inline int soap_read___trt__AddAudioSourceConfiguration(struct soap *soap, struct __trt__AddAudioSourceConfiguration *p)
{
	if (p)
	{	soap_default___trt__AddAudioSourceConfiguration(soap, p);
		if (soap_begin_recv(soap) || soap_get___trt__AddAudioSourceConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___trt__AddAudioEncoderConfiguration_DEFINED
#define SOAP_TYPE___trt__AddAudioEncoderConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__AddAudioEncoderConfiguration(struct soap*, struct __trt__AddAudioEncoderConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__AddAudioEncoderConfiguration(struct soap*, const struct __trt__AddAudioEncoderConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__AddAudioEncoderConfiguration(struct soap*, const char*, int, const struct __trt__AddAudioEncoderConfiguration *, const char*);
SOAP_FMAC3 struct __trt__AddAudioEncoderConfiguration * SOAP_FMAC4 soap_in___trt__AddAudioEncoderConfiguration(struct soap*, const char*, struct __trt__AddAudioEncoderConfiguration *, const char*);
SOAP_FMAC1 struct __trt__AddAudioEncoderConfiguration * SOAP_FMAC2 soap_instantiate___trt__AddAudioEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__AddAudioEncoderConfiguration * soap_new___trt__AddAudioEncoderConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__AddAudioEncoderConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __trt__AddAudioEncoderConfiguration * soap_new_req___trt__AddAudioEncoderConfiguration(
	struct soap *soap)
{
	struct __trt__AddAudioEncoderConfiguration *_p = soap_new___trt__AddAudioEncoderConfiguration(soap);
	if (_p)
	{	soap_default___trt__AddAudioEncoderConfiguration(soap, _p);
	}
	return _p;
}

inline struct __trt__AddAudioEncoderConfiguration * soap_new_set___trt__AddAudioEncoderConfiguration(
	struct soap *soap,
	_trt__AddAudioEncoderConfiguration *trt__AddAudioEncoderConfiguration)
{
	struct __trt__AddAudioEncoderConfiguration *_p = soap_new___trt__AddAudioEncoderConfiguration(soap);
	if (_p)
	{	soap_default___trt__AddAudioEncoderConfiguration(soap, _p);
		_p->trt__AddAudioEncoderConfiguration = trt__AddAudioEncoderConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__AddAudioEncoderConfiguration(struct soap*, const struct __trt__AddAudioEncoderConfiguration *, const char*, const char*);

inline int soap_write___trt__AddAudioEncoderConfiguration(struct soap *soap, struct __trt__AddAudioEncoderConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___trt__AddAudioEncoderConfiguration(soap, p), 0) || soap_put___trt__AddAudioEncoderConfiguration(soap, p, "-trt:AddAudioEncoderConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__AddAudioEncoderConfiguration * SOAP_FMAC4 soap_get___trt__AddAudioEncoderConfiguration(struct soap*, struct __trt__AddAudioEncoderConfiguration *, const char*, const char*);

inline int soap_read___trt__AddAudioEncoderConfiguration(struct soap *soap, struct __trt__AddAudioEncoderConfiguration *p)
{
	if (p)
	{	soap_default___trt__AddAudioEncoderConfiguration(soap, p);
		if (soap_begin_recv(soap) || soap_get___trt__AddAudioEncoderConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___trt__AddVideoSourceConfiguration_DEFINED
#define SOAP_TYPE___trt__AddVideoSourceConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__AddVideoSourceConfiguration(struct soap*, struct __trt__AddVideoSourceConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__AddVideoSourceConfiguration(struct soap*, const struct __trt__AddVideoSourceConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__AddVideoSourceConfiguration(struct soap*, const char*, int, const struct __trt__AddVideoSourceConfiguration *, const char*);
SOAP_FMAC3 struct __trt__AddVideoSourceConfiguration * SOAP_FMAC4 soap_in___trt__AddVideoSourceConfiguration(struct soap*, const char*, struct __trt__AddVideoSourceConfiguration *, const char*);
SOAP_FMAC1 struct __trt__AddVideoSourceConfiguration * SOAP_FMAC2 soap_instantiate___trt__AddVideoSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__AddVideoSourceConfiguration * soap_new___trt__AddVideoSourceConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__AddVideoSourceConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __trt__AddVideoSourceConfiguration * soap_new_req___trt__AddVideoSourceConfiguration(
	struct soap *soap)
{
	struct __trt__AddVideoSourceConfiguration *_p = soap_new___trt__AddVideoSourceConfiguration(soap);
	if (_p)
	{	soap_default___trt__AddVideoSourceConfiguration(soap, _p);
	}
	return _p;
}

inline struct __trt__AddVideoSourceConfiguration * soap_new_set___trt__AddVideoSourceConfiguration(
	struct soap *soap,
	_trt__AddVideoSourceConfiguration *trt__AddVideoSourceConfiguration)
{
	struct __trt__AddVideoSourceConfiguration *_p = soap_new___trt__AddVideoSourceConfiguration(soap);
	if (_p)
	{	soap_default___trt__AddVideoSourceConfiguration(soap, _p);
		_p->trt__AddVideoSourceConfiguration = trt__AddVideoSourceConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__AddVideoSourceConfiguration(struct soap*, const struct __trt__AddVideoSourceConfiguration *, const char*, const char*);

inline int soap_write___trt__AddVideoSourceConfiguration(struct soap *soap, struct __trt__AddVideoSourceConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___trt__AddVideoSourceConfiguration(soap, p), 0) || soap_put___trt__AddVideoSourceConfiguration(soap, p, "-trt:AddVideoSourceConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__AddVideoSourceConfiguration * SOAP_FMAC4 soap_get___trt__AddVideoSourceConfiguration(struct soap*, struct __trt__AddVideoSourceConfiguration *, const char*, const char*);

inline int soap_read___trt__AddVideoSourceConfiguration(struct soap *soap, struct __trt__AddVideoSourceConfiguration *p)
{
	if (p)
	{	soap_default___trt__AddVideoSourceConfiguration(soap, p);
		if (soap_begin_recv(soap) || soap_get___trt__AddVideoSourceConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___trt__AddVideoEncoderConfiguration_DEFINED
#define SOAP_TYPE___trt__AddVideoEncoderConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__AddVideoEncoderConfiguration(struct soap*, struct __trt__AddVideoEncoderConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__AddVideoEncoderConfiguration(struct soap*, const struct __trt__AddVideoEncoderConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__AddVideoEncoderConfiguration(struct soap*, const char*, int, const struct __trt__AddVideoEncoderConfiguration *, const char*);
SOAP_FMAC3 struct __trt__AddVideoEncoderConfiguration * SOAP_FMAC4 soap_in___trt__AddVideoEncoderConfiguration(struct soap*, const char*, struct __trt__AddVideoEncoderConfiguration *, const char*);
SOAP_FMAC1 struct __trt__AddVideoEncoderConfiguration * SOAP_FMAC2 soap_instantiate___trt__AddVideoEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__AddVideoEncoderConfiguration * soap_new___trt__AddVideoEncoderConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__AddVideoEncoderConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __trt__AddVideoEncoderConfiguration * soap_new_req___trt__AddVideoEncoderConfiguration(
	struct soap *soap)
{
	struct __trt__AddVideoEncoderConfiguration *_p = soap_new___trt__AddVideoEncoderConfiguration(soap);
	if (_p)
	{	soap_default___trt__AddVideoEncoderConfiguration(soap, _p);
	}
	return _p;
}

inline struct __trt__AddVideoEncoderConfiguration * soap_new_set___trt__AddVideoEncoderConfiguration(
	struct soap *soap,
	_trt__AddVideoEncoderConfiguration *trt__AddVideoEncoderConfiguration)
{
	struct __trt__AddVideoEncoderConfiguration *_p = soap_new___trt__AddVideoEncoderConfiguration(soap);
	if (_p)
	{	soap_default___trt__AddVideoEncoderConfiguration(soap, _p);
		_p->trt__AddVideoEncoderConfiguration = trt__AddVideoEncoderConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__AddVideoEncoderConfiguration(struct soap*, const struct __trt__AddVideoEncoderConfiguration *, const char*, const char*);

inline int soap_write___trt__AddVideoEncoderConfiguration(struct soap *soap, struct __trt__AddVideoEncoderConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___trt__AddVideoEncoderConfiguration(soap, p), 0) || soap_put___trt__AddVideoEncoderConfiguration(soap, p, "-trt:AddVideoEncoderConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__AddVideoEncoderConfiguration * SOAP_FMAC4 soap_get___trt__AddVideoEncoderConfiguration(struct soap*, struct __trt__AddVideoEncoderConfiguration *, const char*, const char*);

inline int soap_read___trt__AddVideoEncoderConfiguration(struct soap *soap, struct __trt__AddVideoEncoderConfiguration *p)
{
	if (p)
	{	soap_default___trt__AddVideoEncoderConfiguration(soap, p);
		if (soap_begin_recv(soap) || soap_get___trt__AddVideoEncoderConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___trt__GetProfiles_DEFINED
#define SOAP_TYPE___trt__GetProfiles_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__GetProfiles(struct soap*, struct __trt__GetProfiles *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__GetProfiles(struct soap*, const struct __trt__GetProfiles *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__GetProfiles(struct soap*, const char*, int, const struct __trt__GetProfiles *, const char*);
SOAP_FMAC3 struct __trt__GetProfiles * SOAP_FMAC4 soap_in___trt__GetProfiles(struct soap*, const char*, struct __trt__GetProfiles *, const char*);
SOAP_FMAC1 struct __trt__GetProfiles * SOAP_FMAC2 soap_instantiate___trt__GetProfiles(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__GetProfiles * soap_new___trt__GetProfiles(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__GetProfiles(soap, n, NULL, NULL, NULL);
}

inline struct __trt__GetProfiles * soap_new_req___trt__GetProfiles(
	struct soap *soap)
{
	struct __trt__GetProfiles *_p = soap_new___trt__GetProfiles(soap);
	if (_p)
	{	soap_default___trt__GetProfiles(soap, _p);
	}
	return _p;
}

inline struct __trt__GetProfiles * soap_new_set___trt__GetProfiles(
	struct soap *soap,
	_trt__GetProfiles *trt__GetProfiles)
{
	struct __trt__GetProfiles *_p = soap_new___trt__GetProfiles(soap);
	if (_p)
	{	soap_default___trt__GetProfiles(soap, _p);
		_p->trt__GetProfiles = trt__GetProfiles;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__GetProfiles(struct soap*, const struct __trt__GetProfiles *, const char*, const char*);

inline int soap_write___trt__GetProfiles(struct soap *soap, struct __trt__GetProfiles const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___trt__GetProfiles(soap, p), 0) || soap_put___trt__GetProfiles(soap, p, "-trt:GetProfiles", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__GetProfiles * SOAP_FMAC4 soap_get___trt__GetProfiles(struct soap*, struct __trt__GetProfiles *, const char*, const char*);

inline int soap_read___trt__GetProfiles(struct soap *soap, struct __trt__GetProfiles *p)
{
	if (p)
	{	soap_default___trt__GetProfiles(soap, p);
		if (soap_begin_recv(soap) || soap_get___trt__GetProfiles(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___trt__GetProfile_DEFINED
#define SOAP_TYPE___trt__GetProfile_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__GetProfile(struct soap*, struct __trt__GetProfile *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__GetProfile(struct soap*, const struct __trt__GetProfile *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__GetProfile(struct soap*, const char*, int, const struct __trt__GetProfile *, const char*);
SOAP_FMAC3 struct __trt__GetProfile * SOAP_FMAC4 soap_in___trt__GetProfile(struct soap*, const char*, struct __trt__GetProfile *, const char*);
SOAP_FMAC1 struct __trt__GetProfile * SOAP_FMAC2 soap_instantiate___trt__GetProfile(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__GetProfile * soap_new___trt__GetProfile(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__GetProfile(soap, n, NULL, NULL, NULL);
}

inline struct __trt__GetProfile * soap_new_req___trt__GetProfile(
	struct soap *soap)
{
	struct __trt__GetProfile *_p = soap_new___trt__GetProfile(soap);
	if (_p)
	{	soap_default___trt__GetProfile(soap, _p);
	}
	return _p;
}

inline struct __trt__GetProfile * soap_new_set___trt__GetProfile(
	struct soap *soap,
	_trt__GetProfile *trt__GetProfile)
{
	struct __trt__GetProfile *_p = soap_new___trt__GetProfile(soap);
	if (_p)
	{	soap_default___trt__GetProfile(soap, _p);
		_p->trt__GetProfile = trt__GetProfile;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__GetProfile(struct soap*, const struct __trt__GetProfile *, const char*, const char*);

inline int soap_write___trt__GetProfile(struct soap *soap, struct __trt__GetProfile const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___trt__GetProfile(soap, p), 0) || soap_put___trt__GetProfile(soap, p, "-trt:GetProfile", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__GetProfile * SOAP_FMAC4 soap_get___trt__GetProfile(struct soap*, struct __trt__GetProfile *, const char*, const char*);

inline int soap_read___trt__GetProfile(struct soap *soap, struct __trt__GetProfile *p)
{
	if (p)
	{	soap_default___trt__GetProfile(soap, p);
		if (soap_begin_recv(soap) || soap_get___trt__GetProfile(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___trt__CreateProfile_DEFINED
#define SOAP_TYPE___trt__CreateProfile_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__CreateProfile(struct soap*, struct __trt__CreateProfile *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__CreateProfile(struct soap*, const struct __trt__CreateProfile *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__CreateProfile(struct soap*, const char*, int, const struct __trt__CreateProfile *, const char*);
SOAP_FMAC3 struct __trt__CreateProfile * SOAP_FMAC4 soap_in___trt__CreateProfile(struct soap*, const char*, struct __trt__CreateProfile *, const char*);
SOAP_FMAC1 struct __trt__CreateProfile * SOAP_FMAC2 soap_instantiate___trt__CreateProfile(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__CreateProfile * soap_new___trt__CreateProfile(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__CreateProfile(soap, n, NULL, NULL, NULL);
}

inline struct __trt__CreateProfile * soap_new_req___trt__CreateProfile(
	struct soap *soap)
{
	struct __trt__CreateProfile *_p = soap_new___trt__CreateProfile(soap);
	if (_p)
	{	soap_default___trt__CreateProfile(soap, _p);
	}
	return _p;
}

inline struct __trt__CreateProfile * soap_new_set___trt__CreateProfile(
	struct soap *soap,
	_trt__CreateProfile *trt__CreateProfile)
{
	struct __trt__CreateProfile *_p = soap_new___trt__CreateProfile(soap);
	if (_p)
	{	soap_default___trt__CreateProfile(soap, _p);
		_p->trt__CreateProfile = trt__CreateProfile;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__CreateProfile(struct soap*, const struct __trt__CreateProfile *, const char*, const char*);

inline int soap_write___trt__CreateProfile(struct soap *soap, struct __trt__CreateProfile const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___trt__CreateProfile(soap, p), 0) || soap_put___trt__CreateProfile(soap, p, "-trt:CreateProfile", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__CreateProfile * SOAP_FMAC4 soap_get___trt__CreateProfile(struct soap*, struct __trt__CreateProfile *, const char*, const char*);

inline int soap_read___trt__CreateProfile(struct soap *soap, struct __trt__CreateProfile *p)
{
	if (p)
	{	soap_default___trt__CreateProfile(soap, p);
		if (soap_begin_recv(soap) || soap_get___trt__CreateProfile(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___trt__GetAudioOutputs_DEFINED
#define SOAP_TYPE___trt__GetAudioOutputs_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__GetAudioOutputs(struct soap*, struct __trt__GetAudioOutputs *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__GetAudioOutputs(struct soap*, const struct __trt__GetAudioOutputs *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__GetAudioOutputs(struct soap*, const char*, int, const struct __trt__GetAudioOutputs *, const char*);
SOAP_FMAC3 struct __trt__GetAudioOutputs * SOAP_FMAC4 soap_in___trt__GetAudioOutputs(struct soap*, const char*, struct __trt__GetAudioOutputs *, const char*);
SOAP_FMAC1 struct __trt__GetAudioOutputs * SOAP_FMAC2 soap_instantiate___trt__GetAudioOutputs(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__GetAudioOutputs * soap_new___trt__GetAudioOutputs(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__GetAudioOutputs(soap, n, NULL, NULL, NULL);
}

inline struct __trt__GetAudioOutputs * soap_new_req___trt__GetAudioOutputs(
	struct soap *soap)
{
	struct __trt__GetAudioOutputs *_p = soap_new___trt__GetAudioOutputs(soap);
	if (_p)
	{	soap_default___trt__GetAudioOutputs(soap, _p);
	}
	return _p;
}

inline struct __trt__GetAudioOutputs * soap_new_set___trt__GetAudioOutputs(
	struct soap *soap,
	_trt__GetAudioOutputs *trt__GetAudioOutputs)
{
	struct __trt__GetAudioOutputs *_p = soap_new___trt__GetAudioOutputs(soap);
	if (_p)
	{	soap_default___trt__GetAudioOutputs(soap, _p);
		_p->trt__GetAudioOutputs = trt__GetAudioOutputs;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__GetAudioOutputs(struct soap*, const struct __trt__GetAudioOutputs *, const char*, const char*);

inline int soap_write___trt__GetAudioOutputs(struct soap *soap, struct __trt__GetAudioOutputs const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___trt__GetAudioOutputs(soap, p), 0) || soap_put___trt__GetAudioOutputs(soap, p, "-trt:GetAudioOutputs", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__GetAudioOutputs * SOAP_FMAC4 soap_get___trt__GetAudioOutputs(struct soap*, struct __trt__GetAudioOutputs *, const char*, const char*);

inline int soap_read___trt__GetAudioOutputs(struct soap *soap, struct __trt__GetAudioOutputs *p)
{
	if (p)
	{	soap_default___trt__GetAudioOutputs(soap, p);
		if (soap_begin_recv(soap) || soap_get___trt__GetAudioOutputs(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___trt__GetAudioSources_DEFINED
#define SOAP_TYPE___trt__GetAudioSources_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__GetAudioSources(struct soap*, struct __trt__GetAudioSources *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__GetAudioSources(struct soap*, const struct __trt__GetAudioSources *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__GetAudioSources(struct soap*, const char*, int, const struct __trt__GetAudioSources *, const char*);
SOAP_FMAC3 struct __trt__GetAudioSources * SOAP_FMAC4 soap_in___trt__GetAudioSources(struct soap*, const char*, struct __trt__GetAudioSources *, const char*);
SOAP_FMAC1 struct __trt__GetAudioSources * SOAP_FMAC2 soap_instantiate___trt__GetAudioSources(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__GetAudioSources * soap_new___trt__GetAudioSources(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__GetAudioSources(soap, n, NULL, NULL, NULL);
}

inline struct __trt__GetAudioSources * soap_new_req___trt__GetAudioSources(
	struct soap *soap)
{
	struct __trt__GetAudioSources *_p = soap_new___trt__GetAudioSources(soap);
	if (_p)
	{	soap_default___trt__GetAudioSources(soap, _p);
	}
	return _p;
}

inline struct __trt__GetAudioSources * soap_new_set___trt__GetAudioSources(
	struct soap *soap,
	_trt__GetAudioSources *trt__GetAudioSources)
{
	struct __trt__GetAudioSources *_p = soap_new___trt__GetAudioSources(soap);
	if (_p)
	{	soap_default___trt__GetAudioSources(soap, _p);
		_p->trt__GetAudioSources = trt__GetAudioSources;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__GetAudioSources(struct soap*, const struct __trt__GetAudioSources *, const char*, const char*);

inline int soap_write___trt__GetAudioSources(struct soap *soap, struct __trt__GetAudioSources const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___trt__GetAudioSources(soap, p), 0) || soap_put___trt__GetAudioSources(soap, p, "-trt:GetAudioSources", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__GetAudioSources * SOAP_FMAC4 soap_get___trt__GetAudioSources(struct soap*, struct __trt__GetAudioSources *, const char*, const char*);

inline int soap_read___trt__GetAudioSources(struct soap *soap, struct __trt__GetAudioSources *p)
{
	if (p)
	{	soap_default___trt__GetAudioSources(soap, p);
		if (soap_begin_recv(soap) || soap_get___trt__GetAudioSources(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___trt__GetVideoSources_DEFINED
#define SOAP_TYPE___trt__GetVideoSources_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__GetVideoSources(struct soap*, struct __trt__GetVideoSources *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__GetVideoSources(struct soap*, const struct __trt__GetVideoSources *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__GetVideoSources(struct soap*, const char*, int, const struct __trt__GetVideoSources *, const char*);
SOAP_FMAC3 struct __trt__GetVideoSources * SOAP_FMAC4 soap_in___trt__GetVideoSources(struct soap*, const char*, struct __trt__GetVideoSources *, const char*);
SOAP_FMAC1 struct __trt__GetVideoSources * SOAP_FMAC2 soap_instantiate___trt__GetVideoSources(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__GetVideoSources * soap_new___trt__GetVideoSources(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__GetVideoSources(soap, n, NULL, NULL, NULL);
}

inline struct __trt__GetVideoSources * soap_new_req___trt__GetVideoSources(
	struct soap *soap)
{
	struct __trt__GetVideoSources *_p = soap_new___trt__GetVideoSources(soap);
	if (_p)
	{	soap_default___trt__GetVideoSources(soap, _p);
	}
	return _p;
}

inline struct __trt__GetVideoSources * soap_new_set___trt__GetVideoSources(
	struct soap *soap,
	_trt__GetVideoSources *trt__GetVideoSources)
{
	struct __trt__GetVideoSources *_p = soap_new___trt__GetVideoSources(soap);
	if (_p)
	{	soap_default___trt__GetVideoSources(soap, _p);
		_p->trt__GetVideoSources = trt__GetVideoSources;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__GetVideoSources(struct soap*, const struct __trt__GetVideoSources *, const char*, const char*);

inline int soap_write___trt__GetVideoSources(struct soap *soap, struct __trt__GetVideoSources const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___trt__GetVideoSources(soap, p), 0) || soap_put___trt__GetVideoSources(soap, p, "-trt:GetVideoSources", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__GetVideoSources * SOAP_FMAC4 soap_get___trt__GetVideoSources(struct soap*, struct __trt__GetVideoSources *, const char*, const char*);

inline int soap_read___trt__GetVideoSources(struct soap *soap, struct __trt__GetVideoSources *p)
{
	if (p)
	{	soap_default___trt__GetVideoSources(soap, p);
		if (soap_begin_recv(soap) || soap_get___trt__GetVideoSources(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___trt__GetServiceCapabilities_DEFINED
#define SOAP_TYPE___trt__GetServiceCapabilities_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__GetServiceCapabilities(struct soap*, struct __trt__GetServiceCapabilities *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__GetServiceCapabilities(struct soap*, const struct __trt__GetServiceCapabilities *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__GetServiceCapabilities(struct soap*, const char*, int, const struct __trt__GetServiceCapabilities *, const char*);
SOAP_FMAC3 struct __trt__GetServiceCapabilities * SOAP_FMAC4 soap_in___trt__GetServiceCapabilities(struct soap*, const char*, struct __trt__GetServiceCapabilities *, const char*);
SOAP_FMAC1 struct __trt__GetServiceCapabilities * SOAP_FMAC2 soap_instantiate___trt__GetServiceCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__GetServiceCapabilities * soap_new___trt__GetServiceCapabilities(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__GetServiceCapabilities(soap, n, NULL, NULL, NULL);
}

inline struct __trt__GetServiceCapabilities * soap_new_req___trt__GetServiceCapabilities(
	struct soap *soap)
{
	struct __trt__GetServiceCapabilities *_p = soap_new___trt__GetServiceCapabilities(soap);
	if (_p)
	{	soap_default___trt__GetServiceCapabilities(soap, _p);
	}
	return _p;
}

inline struct __trt__GetServiceCapabilities * soap_new_set___trt__GetServiceCapabilities(
	struct soap *soap,
	_trt__GetServiceCapabilities *trt__GetServiceCapabilities)
{
	struct __trt__GetServiceCapabilities *_p = soap_new___trt__GetServiceCapabilities(soap);
	if (_p)
	{	soap_default___trt__GetServiceCapabilities(soap, _p);
		_p->trt__GetServiceCapabilities = trt__GetServiceCapabilities;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__GetServiceCapabilities(struct soap*, const struct __trt__GetServiceCapabilities *, const char*, const char*);

inline int soap_write___trt__GetServiceCapabilities(struct soap *soap, struct __trt__GetServiceCapabilities const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___trt__GetServiceCapabilities(soap, p), 0) || soap_put___trt__GetServiceCapabilities(soap, p, "-trt:GetServiceCapabilities", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__GetServiceCapabilities * SOAP_FMAC4 soap_get___trt__GetServiceCapabilities(struct soap*, struct __trt__GetServiceCapabilities *, const char*, const char*);

inline int soap_read___trt__GetServiceCapabilities(struct soap *soap, struct __trt__GetServiceCapabilities *p)
{
	if (p)
	{	soap_default___trt__GetServiceCapabilities(soap, p);
		if (soap_begin_recv(soap) || soap_get___trt__GetServiceCapabilities(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tptz__GetCompatibleConfigurations_DEFINED
#define SOAP_TYPE___tptz__GetCompatibleConfigurations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__GetCompatibleConfigurations(struct soap*, struct __tptz__GetCompatibleConfigurations *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__GetCompatibleConfigurations(struct soap*, const struct __tptz__GetCompatibleConfigurations *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__GetCompatibleConfigurations(struct soap*, const char*, int, const struct __tptz__GetCompatibleConfigurations *, const char*);
SOAP_FMAC3 struct __tptz__GetCompatibleConfigurations * SOAP_FMAC4 soap_in___tptz__GetCompatibleConfigurations(struct soap*, const char*, struct __tptz__GetCompatibleConfigurations *, const char*);
SOAP_FMAC1 struct __tptz__GetCompatibleConfigurations * SOAP_FMAC2 soap_instantiate___tptz__GetCompatibleConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__GetCompatibleConfigurations * soap_new___tptz__GetCompatibleConfigurations(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__GetCompatibleConfigurations(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__GetCompatibleConfigurations * soap_new_req___tptz__GetCompatibleConfigurations(
	struct soap *soap)
{
	struct __tptz__GetCompatibleConfigurations *_p = soap_new___tptz__GetCompatibleConfigurations(soap);
	if (_p)
	{	soap_default___tptz__GetCompatibleConfigurations(soap, _p);
	}
	return _p;
}

inline struct __tptz__GetCompatibleConfigurations * soap_new_set___tptz__GetCompatibleConfigurations(
	struct soap *soap,
	_tptz__GetCompatibleConfigurations *tptz__GetCompatibleConfigurations)
{
	struct __tptz__GetCompatibleConfigurations *_p = soap_new___tptz__GetCompatibleConfigurations(soap);
	if (_p)
	{	soap_default___tptz__GetCompatibleConfigurations(soap, _p);
		_p->tptz__GetCompatibleConfigurations = tptz__GetCompatibleConfigurations;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__GetCompatibleConfigurations(struct soap*, const struct __tptz__GetCompatibleConfigurations *, const char*, const char*);

inline int soap_write___tptz__GetCompatibleConfigurations(struct soap *soap, struct __tptz__GetCompatibleConfigurations const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tptz__GetCompatibleConfigurations(soap, p), 0) || soap_put___tptz__GetCompatibleConfigurations(soap, p, "-tptz:GetCompatibleConfigurations", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__GetCompatibleConfigurations * SOAP_FMAC4 soap_get___tptz__GetCompatibleConfigurations(struct soap*, struct __tptz__GetCompatibleConfigurations *, const char*, const char*);

inline int soap_read___tptz__GetCompatibleConfigurations(struct soap *soap, struct __tptz__GetCompatibleConfigurations *p)
{
	if (p)
	{	soap_default___tptz__GetCompatibleConfigurations(soap, p);
		if (soap_begin_recv(soap) || soap_get___tptz__GetCompatibleConfigurations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tptz__RemovePresetTour_DEFINED
#define SOAP_TYPE___tptz__RemovePresetTour_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__RemovePresetTour(struct soap*, struct __tptz__RemovePresetTour *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__RemovePresetTour(struct soap*, const struct __tptz__RemovePresetTour *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__RemovePresetTour(struct soap*, const char*, int, const struct __tptz__RemovePresetTour *, const char*);
SOAP_FMAC3 struct __tptz__RemovePresetTour * SOAP_FMAC4 soap_in___tptz__RemovePresetTour(struct soap*, const char*, struct __tptz__RemovePresetTour *, const char*);
SOAP_FMAC1 struct __tptz__RemovePresetTour * SOAP_FMAC2 soap_instantiate___tptz__RemovePresetTour(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__RemovePresetTour * soap_new___tptz__RemovePresetTour(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__RemovePresetTour(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__RemovePresetTour * soap_new_req___tptz__RemovePresetTour(
	struct soap *soap)
{
	struct __tptz__RemovePresetTour *_p = soap_new___tptz__RemovePresetTour(soap);
	if (_p)
	{	soap_default___tptz__RemovePresetTour(soap, _p);
	}
	return _p;
}

inline struct __tptz__RemovePresetTour * soap_new_set___tptz__RemovePresetTour(
	struct soap *soap,
	_tptz__RemovePresetTour *tptz__RemovePresetTour)
{
	struct __tptz__RemovePresetTour *_p = soap_new___tptz__RemovePresetTour(soap);
	if (_p)
	{	soap_default___tptz__RemovePresetTour(soap, _p);
		_p->tptz__RemovePresetTour = tptz__RemovePresetTour;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__RemovePresetTour(struct soap*, const struct __tptz__RemovePresetTour *, const char*, const char*);

inline int soap_write___tptz__RemovePresetTour(struct soap *soap, struct __tptz__RemovePresetTour const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tptz__RemovePresetTour(soap, p), 0) || soap_put___tptz__RemovePresetTour(soap, p, "-tptz:RemovePresetTour", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__RemovePresetTour * SOAP_FMAC4 soap_get___tptz__RemovePresetTour(struct soap*, struct __tptz__RemovePresetTour *, const char*, const char*);

inline int soap_read___tptz__RemovePresetTour(struct soap *soap, struct __tptz__RemovePresetTour *p)
{
	if (p)
	{	soap_default___tptz__RemovePresetTour(soap, p);
		if (soap_begin_recv(soap) || soap_get___tptz__RemovePresetTour(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tptz__OperatePresetTour_DEFINED
#define SOAP_TYPE___tptz__OperatePresetTour_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__OperatePresetTour(struct soap*, struct __tptz__OperatePresetTour *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__OperatePresetTour(struct soap*, const struct __tptz__OperatePresetTour *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__OperatePresetTour(struct soap*, const char*, int, const struct __tptz__OperatePresetTour *, const char*);
SOAP_FMAC3 struct __tptz__OperatePresetTour * SOAP_FMAC4 soap_in___tptz__OperatePresetTour(struct soap*, const char*, struct __tptz__OperatePresetTour *, const char*);
SOAP_FMAC1 struct __tptz__OperatePresetTour * SOAP_FMAC2 soap_instantiate___tptz__OperatePresetTour(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__OperatePresetTour * soap_new___tptz__OperatePresetTour(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__OperatePresetTour(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__OperatePresetTour * soap_new_req___tptz__OperatePresetTour(
	struct soap *soap)
{
	struct __tptz__OperatePresetTour *_p = soap_new___tptz__OperatePresetTour(soap);
	if (_p)
	{	soap_default___tptz__OperatePresetTour(soap, _p);
	}
	return _p;
}

inline struct __tptz__OperatePresetTour * soap_new_set___tptz__OperatePresetTour(
	struct soap *soap,
	_tptz__OperatePresetTour *tptz__OperatePresetTour)
{
	struct __tptz__OperatePresetTour *_p = soap_new___tptz__OperatePresetTour(soap);
	if (_p)
	{	soap_default___tptz__OperatePresetTour(soap, _p);
		_p->tptz__OperatePresetTour = tptz__OperatePresetTour;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__OperatePresetTour(struct soap*, const struct __tptz__OperatePresetTour *, const char*, const char*);

inline int soap_write___tptz__OperatePresetTour(struct soap *soap, struct __tptz__OperatePresetTour const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tptz__OperatePresetTour(soap, p), 0) || soap_put___tptz__OperatePresetTour(soap, p, "-tptz:OperatePresetTour", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__OperatePresetTour * SOAP_FMAC4 soap_get___tptz__OperatePresetTour(struct soap*, struct __tptz__OperatePresetTour *, const char*, const char*);

inline int soap_read___tptz__OperatePresetTour(struct soap *soap, struct __tptz__OperatePresetTour *p)
{
	if (p)
	{	soap_default___tptz__OperatePresetTour(soap, p);
		if (soap_begin_recv(soap) || soap_get___tptz__OperatePresetTour(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tptz__ModifyPresetTour_DEFINED
#define SOAP_TYPE___tptz__ModifyPresetTour_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__ModifyPresetTour(struct soap*, struct __tptz__ModifyPresetTour *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__ModifyPresetTour(struct soap*, const struct __tptz__ModifyPresetTour *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__ModifyPresetTour(struct soap*, const char*, int, const struct __tptz__ModifyPresetTour *, const char*);
SOAP_FMAC3 struct __tptz__ModifyPresetTour * SOAP_FMAC4 soap_in___tptz__ModifyPresetTour(struct soap*, const char*, struct __tptz__ModifyPresetTour *, const char*);
SOAP_FMAC1 struct __tptz__ModifyPresetTour * SOAP_FMAC2 soap_instantiate___tptz__ModifyPresetTour(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__ModifyPresetTour * soap_new___tptz__ModifyPresetTour(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__ModifyPresetTour(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__ModifyPresetTour * soap_new_req___tptz__ModifyPresetTour(
	struct soap *soap)
{
	struct __tptz__ModifyPresetTour *_p = soap_new___tptz__ModifyPresetTour(soap);
	if (_p)
	{	soap_default___tptz__ModifyPresetTour(soap, _p);
	}
	return _p;
}

inline struct __tptz__ModifyPresetTour * soap_new_set___tptz__ModifyPresetTour(
	struct soap *soap,
	_tptz__ModifyPresetTour *tptz__ModifyPresetTour)
{
	struct __tptz__ModifyPresetTour *_p = soap_new___tptz__ModifyPresetTour(soap);
	if (_p)
	{	soap_default___tptz__ModifyPresetTour(soap, _p);
		_p->tptz__ModifyPresetTour = tptz__ModifyPresetTour;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__ModifyPresetTour(struct soap*, const struct __tptz__ModifyPresetTour *, const char*, const char*);

inline int soap_write___tptz__ModifyPresetTour(struct soap *soap, struct __tptz__ModifyPresetTour const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tptz__ModifyPresetTour(soap, p), 0) || soap_put___tptz__ModifyPresetTour(soap, p, "-tptz:ModifyPresetTour", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__ModifyPresetTour * SOAP_FMAC4 soap_get___tptz__ModifyPresetTour(struct soap*, struct __tptz__ModifyPresetTour *, const char*, const char*);

inline int soap_read___tptz__ModifyPresetTour(struct soap *soap, struct __tptz__ModifyPresetTour *p)
{
	if (p)
	{	soap_default___tptz__ModifyPresetTour(soap, p);
		if (soap_begin_recv(soap) || soap_get___tptz__ModifyPresetTour(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tptz__CreatePresetTour_DEFINED
#define SOAP_TYPE___tptz__CreatePresetTour_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__CreatePresetTour(struct soap*, struct __tptz__CreatePresetTour *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__CreatePresetTour(struct soap*, const struct __tptz__CreatePresetTour *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__CreatePresetTour(struct soap*, const char*, int, const struct __tptz__CreatePresetTour *, const char*);
SOAP_FMAC3 struct __tptz__CreatePresetTour * SOAP_FMAC4 soap_in___tptz__CreatePresetTour(struct soap*, const char*, struct __tptz__CreatePresetTour *, const char*);
SOAP_FMAC1 struct __tptz__CreatePresetTour * SOAP_FMAC2 soap_instantiate___tptz__CreatePresetTour(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__CreatePresetTour * soap_new___tptz__CreatePresetTour(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__CreatePresetTour(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__CreatePresetTour * soap_new_req___tptz__CreatePresetTour(
	struct soap *soap)
{
	struct __tptz__CreatePresetTour *_p = soap_new___tptz__CreatePresetTour(soap);
	if (_p)
	{	soap_default___tptz__CreatePresetTour(soap, _p);
	}
	return _p;
}

inline struct __tptz__CreatePresetTour * soap_new_set___tptz__CreatePresetTour(
	struct soap *soap,
	_tptz__CreatePresetTour *tptz__CreatePresetTour)
{
	struct __tptz__CreatePresetTour *_p = soap_new___tptz__CreatePresetTour(soap);
	if (_p)
	{	soap_default___tptz__CreatePresetTour(soap, _p);
		_p->tptz__CreatePresetTour = tptz__CreatePresetTour;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__CreatePresetTour(struct soap*, const struct __tptz__CreatePresetTour *, const char*, const char*);

inline int soap_write___tptz__CreatePresetTour(struct soap *soap, struct __tptz__CreatePresetTour const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tptz__CreatePresetTour(soap, p), 0) || soap_put___tptz__CreatePresetTour(soap, p, "-tptz:CreatePresetTour", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__CreatePresetTour * SOAP_FMAC4 soap_get___tptz__CreatePresetTour(struct soap*, struct __tptz__CreatePresetTour *, const char*, const char*);

inline int soap_read___tptz__CreatePresetTour(struct soap *soap, struct __tptz__CreatePresetTour *p)
{
	if (p)
	{	soap_default___tptz__CreatePresetTour(soap, p);
		if (soap_begin_recv(soap) || soap_get___tptz__CreatePresetTour(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tptz__GetPresetTourOptions_DEFINED
#define SOAP_TYPE___tptz__GetPresetTourOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__GetPresetTourOptions(struct soap*, struct __tptz__GetPresetTourOptions *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__GetPresetTourOptions(struct soap*, const struct __tptz__GetPresetTourOptions *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__GetPresetTourOptions(struct soap*, const char*, int, const struct __tptz__GetPresetTourOptions *, const char*);
SOAP_FMAC3 struct __tptz__GetPresetTourOptions * SOAP_FMAC4 soap_in___tptz__GetPresetTourOptions(struct soap*, const char*, struct __tptz__GetPresetTourOptions *, const char*);
SOAP_FMAC1 struct __tptz__GetPresetTourOptions * SOAP_FMAC2 soap_instantiate___tptz__GetPresetTourOptions(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__GetPresetTourOptions * soap_new___tptz__GetPresetTourOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__GetPresetTourOptions(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__GetPresetTourOptions * soap_new_req___tptz__GetPresetTourOptions(
	struct soap *soap)
{
	struct __tptz__GetPresetTourOptions *_p = soap_new___tptz__GetPresetTourOptions(soap);
	if (_p)
	{	soap_default___tptz__GetPresetTourOptions(soap, _p);
	}
	return _p;
}

inline struct __tptz__GetPresetTourOptions * soap_new_set___tptz__GetPresetTourOptions(
	struct soap *soap,
	_tptz__GetPresetTourOptions *tptz__GetPresetTourOptions)
{
	struct __tptz__GetPresetTourOptions *_p = soap_new___tptz__GetPresetTourOptions(soap);
	if (_p)
	{	soap_default___tptz__GetPresetTourOptions(soap, _p);
		_p->tptz__GetPresetTourOptions = tptz__GetPresetTourOptions;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__GetPresetTourOptions(struct soap*, const struct __tptz__GetPresetTourOptions *, const char*, const char*);

inline int soap_write___tptz__GetPresetTourOptions(struct soap *soap, struct __tptz__GetPresetTourOptions const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tptz__GetPresetTourOptions(soap, p), 0) || soap_put___tptz__GetPresetTourOptions(soap, p, "-tptz:GetPresetTourOptions", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__GetPresetTourOptions * SOAP_FMAC4 soap_get___tptz__GetPresetTourOptions(struct soap*, struct __tptz__GetPresetTourOptions *, const char*, const char*);

inline int soap_read___tptz__GetPresetTourOptions(struct soap *soap, struct __tptz__GetPresetTourOptions *p)
{
	if (p)
	{	soap_default___tptz__GetPresetTourOptions(soap, p);
		if (soap_begin_recv(soap) || soap_get___tptz__GetPresetTourOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tptz__GetPresetTour_DEFINED
#define SOAP_TYPE___tptz__GetPresetTour_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__GetPresetTour(struct soap*, struct __tptz__GetPresetTour *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__GetPresetTour(struct soap*, const struct __tptz__GetPresetTour *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__GetPresetTour(struct soap*, const char*, int, const struct __tptz__GetPresetTour *, const char*);
SOAP_FMAC3 struct __tptz__GetPresetTour * SOAP_FMAC4 soap_in___tptz__GetPresetTour(struct soap*, const char*, struct __tptz__GetPresetTour *, const char*);
SOAP_FMAC1 struct __tptz__GetPresetTour * SOAP_FMAC2 soap_instantiate___tptz__GetPresetTour(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__GetPresetTour * soap_new___tptz__GetPresetTour(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__GetPresetTour(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__GetPresetTour * soap_new_req___tptz__GetPresetTour(
	struct soap *soap)
{
	struct __tptz__GetPresetTour *_p = soap_new___tptz__GetPresetTour(soap);
	if (_p)
	{	soap_default___tptz__GetPresetTour(soap, _p);
	}
	return _p;
}

inline struct __tptz__GetPresetTour * soap_new_set___tptz__GetPresetTour(
	struct soap *soap,
	_tptz__GetPresetTour *tptz__GetPresetTour)
{
	struct __tptz__GetPresetTour *_p = soap_new___tptz__GetPresetTour(soap);
	if (_p)
	{	soap_default___tptz__GetPresetTour(soap, _p);
		_p->tptz__GetPresetTour = tptz__GetPresetTour;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__GetPresetTour(struct soap*, const struct __tptz__GetPresetTour *, const char*, const char*);

inline int soap_write___tptz__GetPresetTour(struct soap *soap, struct __tptz__GetPresetTour const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tptz__GetPresetTour(soap, p), 0) || soap_put___tptz__GetPresetTour(soap, p, "-tptz:GetPresetTour", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__GetPresetTour * SOAP_FMAC4 soap_get___tptz__GetPresetTour(struct soap*, struct __tptz__GetPresetTour *, const char*, const char*);

inline int soap_read___tptz__GetPresetTour(struct soap *soap, struct __tptz__GetPresetTour *p)
{
	if (p)
	{	soap_default___tptz__GetPresetTour(soap, p);
		if (soap_begin_recv(soap) || soap_get___tptz__GetPresetTour(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tptz__GetPresetTours_DEFINED
#define SOAP_TYPE___tptz__GetPresetTours_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__GetPresetTours(struct soap*, struct __tptz__GetPresetTours *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__GetPresetTours(struct soap*, const struct __tptz__GetPresetTours *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__GetPresetTours(struct soap*, const char*, int, const struct __tptz__GetPresetTours *, const char*);
SOAP_FMAC3 struct __tptz__GetPresetTours * SOAP_FMAC4 soap_in___tptz__GetPresetTours(struct soap*, const char*, struct __tptz__GetPresetTours *, const char*);
SOAP_FMAC1 struct __tptz__GetPresetTours * SOAP_FMAC2 soap_instantiate___tptz__GetPresetTours(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__GetPresetTours * soap_new___tptz__GetPresetTours(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__GetPresetTours(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__GetPresetTours * soap_new_req___tptz__GetPresetTours(
	struct soap *soap)
{
	struct __tptz__GetPresetTours *_p = soap_new___tptz__GetPresetTours(soap);
	if (_p)
	{	soap_default___tptz__GetPresetTours(soap, _p);
	}
	return _p;
}

inline struct __tptz__GetPresetTours * soap_new_set___tptz__GetPresetTours(
	struct soap *soap,
	_tptz__GetPresetTours *tptz__GetPresetTours)
{
	struct __tptz__GetPresetTours *_p = soap_new___tptz__GetPresetTours(soap);
	if (_p)
	{	soap_default___tptz__GetPresetTours(soap, _p);
		_p->tptz__GetPresetTours = tptz__GetPresetTours;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__GetPresetTours(struct soap*, const struct __tptz__GetPresetTours *, const char*, const char*);

inline int soap_write___tptz__GetPresetTours(struct soap *soap, struct __tptz__GetPresetTours const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tptz__GetPresetTours(soap, p), 0) || soap_put___tptz__GetPresetTours(soap, p, "-tptz:GetPresetTours", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__GetPresetTours * SOAP_FMAC4 soap_get___tptz__GetPresetTours(struct soap*, struct __tptz__GetPresetTours *, const char*, const char*);

inline int soap_read___tptz__GetPresetTours(struct soap *soap, struct __tptz__GetPresetTours *p)
{
	if (p)
	{	soap_default___tptz__GetPresetTours(soap, p);
		if (soap_begin_recv(soap) || soap_get___tptz__GetPresetTours(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tptz__Stop_DEFINED
#define SOAP_TYPE___tptz__Stop_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__Stop(struct soap*, struct __tptz__Stop *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__Stop(struct soap*, const struct __tptz__Stop *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__Stop(struct soap*, const char*, int, const struct __tptz__Stop *, const char*);
SOAP_FMAC3 struct __tptz__Stop * SOAP_FMAC4 soap_in___tptz__Stop(struct soap*, const char*, struct __tptz__Stop *, const char*);
SOAP_FMAC1 struct __tptz__Stop * SOAP_FMAC2 soap_instantiate___tptz__Stop(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__Stop * soap_new___tptz__Stop(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__Stop(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__Stop * soap_new_req___tptz__Stop(
	struct soap *soap)
{
	struct __tptz__Stop *_p = soap_new___tptz__Stop(soap);
	if (_p)
	{	soap_default___tptz__Stop(soap, _p);
	}
	return _p;
}

inline struct __tptz__Stop * soap_new_set___tptz__Stop(
	struct soap *soap,
	_tptz__Stop *tptz__Stop)
{
	struct __tptz__Stop *_p = soap_new___tptz__Stop(soap);
	if (_p)
	{	soap_default___tptz__Stop(soap, _p);
		_p->tptz__Stop = tptz__Stop;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__Stop(struct soap*, const struct __tptz__Stop *, const char*, const char*);

inline int soap_write___tptz__Stop(struct soap *soap, struct __tptz__Stop const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tptz__Stop(soap, p), 0) || soap_put___tptz__Stop(soap, p, "-tptz:Stop", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__Stop * SOAP_FMAC4 soap_get___tptz__Stop(struct soap*, struct __tptz__Stop *, const char*, const char*);

inline int soap_read___tptz__Stop(struct soap *soap, struct __tptz__Stop *p)
{
	if (p)
	{	soap_default___tptz__Stop(soap, p);
		if (soap_begin_recv(soap) || soap_get___tptz__Stop(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tptz__AbsoluteMove_DEFINED
#define SOAP_TYPE___tptz__AbsoluteMove_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__AbsoluteMove(struct soap*, struct __tptz__AbsoluteMove *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__AbsoluteMove(struct soap*, const struct __tptz__AbsoluteMove *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__AbsoluteMove(struct soap*, const char*, int, const struct __tptz__AbsoluteMove *, const char*);
SOAP_FMAC3 struct __tptz__AbsoluteMove * SOAP_FMAC4 soap_in___tptz__AbsoluteMove(struct soap*, const char*, struct __tptz__AbsoluteMove *, const char*);
SOAP_FMAC1 struct __tptz__AbsoluteMove * SOAP_FMAC2 soap_instantiate___tptz__AbsoluteMove(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__AbsoluteMove * soap_new___tptz__AbsoluteMove(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__AbsoluteMove(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__AbsoluteMove * soap_new_req___tptz__AbsoluteMove(
	struct soap *soap)
{
	struct __tptz__AbsoluteMove *_p = soap_new___tptz__AbsoluteMove(soap);
	if (_p)
	{	soap_default___tptz__AbsoluteMove(soap, _p);
	}
	return _p;
}

inline struct __tptz__AbsoluteMove * soap_new_set___tptz__AbsoluteMove(
	struct soap *soap,
	_tptz__AbsoluteMove *tptz__AbsoluteMove)
{
	struct __tptz__AbsoluteMove *_p = soap_new___tptz__AbsoluteMove(soap);
	if (_p)
	{	soap_default___tptz__AbsoluteMove(soap, _p);
		_p->tptz__AbsoluteMove = tptz__AbsoluteMove;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__AbsoluteMove(struct soap*, const struct __tptz__AbsoluteMove *, const char*, const char*);

inline int soap_write___tptz__AbsoluteMove(struct soap *soap, struct __tptz__AbsoluteMove const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tptz__AbsoluteMove(soap, p), 0) || soap_put___tptz__AbsoluteMove(soap, p, "-tptz:AbsoluteMove", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__AbsoluteMove * SOAP_FMAC4 soap_get___tptz__AbsoluteMove(struct soap*, struct __tptz__AbsoluteMove *, const char*, const char*);

inline int soap_read___tptz__AbsoluteMove(struct soap *soap, struct __tptz__AbsoluteMove *p)
{
	if (p)
	{	soap_default___tptz__AbsoluteMove(soap, p);
		if (soap_begin_recv(soap) || soap_get___tptz__AbsoluteMove(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tptz__SendAuxiliaryCommand_DEFINED
#define SOAP_TYPE___tptz__SendAuxiliaryCommand_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__SendAuxiliaryCommand(struct soap*, struct __tptz__SendAuxiliaryCommand *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__SendAuxiliaryCommand(struct soap*, const struct __tptz__SendAuxiliaryCommand *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__SendAuxiliaryCommand(struct soap*, const char*, int, const struct __tptz__SendAuxiliaryCommand *, const char*);
SOAP_FMAC3 struct __tptz__SendAuxiliaryCommand * SOAP_FMAC4 soap_in___tptz__SendAuxiliaryCommand(struct soap*, const char*, struct __tptz__SendAuxiliaryCommand *, const char*);
SOAP_FMAC1 struct __tptz__SendAuxiliaryCommand * SOAP_FMAC2 soap_instantiate___tptz__SendAuxiliaryCommand(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__SendAuxiliaryCommand * soap_new___tptz__SendAuxiliaryCommand(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__SendAuxiliaryCommand(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__SendAuxiliaryCommand * soap_new_req___tptz__SendAuxiliaryCommand(
	struct soap *soap)
{
	struct __tptz__SendAuxiliaryCommand *_p = soap_new___tptz__SendAuxiliaryCommand(soap);
	if (_p)
	{	soap_default___tptz__SendAuxiliaryCommand(soap, _p);
	}
	return _p;
}

inline struct __tptz__SendAuxiliaryCommand * soap_new_set___tptz__SendAuxiliaryCommand(
	struct soap *soap,
	_tptz__SendAuxiliaryCommand *tptz__SendAuxiliaryCommand)
{
	struct __tptz__SendAuxiliaryCommand *_p = soap_new___tptz__SendAuxiliaryCommand(soap);
	if (_p)
	{	soap_default___tptz__SendAuxiliaryCommand(soap, _p);
		_p->tptz__SendAuxiliaryCommand = tptz__SendAuxiliaryCommand;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__SendAuxiliaryCommand(struct soap*, const struct __tptz__SendAuxiliaryCommand *, const char*, const char*);

inline int soap_write___tptz__SendAuxiliaryCommand(struct soap *soap, struct __tptz__SendAuxiliaryCommand const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tptz__SendAuxiliaryCommand(soap, p), 0) || soap_put___tptz__SendAuxiliaryCommand(soap, p, "-tptz:SendAuxiliaryCommand", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__SendAuxiliaryCommand * SOAP_FMAC4 soap_get___tptz__SendAuxiliaryCommand(struct soap*, struct __tptz__SendAuxiliaryCommand *, const char*, const char*);

inline int soap_read___tptz__SendAuxiliaryCommand(struct soap *soap, struct __tptz__SendAuxiliaryCommand *p)
{
	if (p)
	{	soap_default___tptz__SendAuxiliaryCommand(soap, p);
		if (soap_begin_recv(soap) || soap_get___tptz__SendAuxiliaryCommand(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tptz__RelativeMove_DEFINED
#define SOAP_TYPE___tptz__RelativeMove_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__RelativeMove(struct soap*, struct __tptz__RelativeMove *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__RelativeMove(struct soap*, const struct __tptz__RelativeMove *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__RelativeMove(struct soap*, const char*, int, const struct __tptz__RelativeMove *, const char*);
SOAP_FMAC3 struct __tptz__RelativeMove * SOAP_FMAC4 soap_in___tptz__RelativeMove(struct soap*, const char*, struct __tptz__RelativeMove *, const char*);
SOAP_FMAC1 struct __tptz__RelativeMove * SOAP_FMAC2 soap_instantiate___tptz__RelativeMove(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__RelativeMove * soap_new___tptz__RelativeMove(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__RelativeMove(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__RelativeMove * soap_new_req___tptz__RelativeMove(
	struct soap *soap)
{
	struct __tptz__RelativeMove *_p = soap_new___tptz__RelativeMove(soap);
	if (_p)
	{	soap_default___tptz__RelativeMove(soap, _p);
	}
	return _p;
}

inline struct __tptz__RelativeMove * soap_new_set___tptz__RelativeMove(
	struct soap *soap,
	_tptz__RelativeMove *tptz__RelativeMove)
{
	struct __tptz__RelativeMove *_p = soap_new___tptz__RelativeMove(soap);
	if (_p)
	{	soap_default___tptz__RelativeMove(soap, _p);
		_p->tptz__RelativeMove = tptz__RelativeMove;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__RelativeMove(struct soap*, const struct __tptz__RelativeMove *, const char*, const char*);

inline int soap_write___tptz__RelativeMove(struct soap *soap, struct __tptz__RelativeMove const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tptz__RelativeMove(soap, p), 0) || soap_put___tptz__RelativeMove(soap, p, "-tptz:RelativeMove", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__RelativeMove * SOAP_FMAC4 soap_get___tptz__RelativeMove(struct soap*, struct __tptz__RelativeMove *, const char*, const char*);

inline int soap_read___tptz__RelativeMove(struct soap *soap, struct __tptz__RelativeMove *p)
{
	if (p)
	{	soap_default___tptz__RelativeMove(soap, p);
		if (soap_begin_recv(soap) || soap_get___tptz__RelativeMove(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tptz__ContinuousMove_DEFINED
#define SOAP_TYPE___tptz__ContinuousMove_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__ContinuousMove(struct soap*, struct __tptz__ContinuousMove *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__ContinuousMove(struct soap*, const struct __tptz__ContinuousMove *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__ContinuousMove(struct soap*, const char*, int, const struct __tptz__ContinuousMove *, const char*);
SOAP_FMAC3 struct __tptz__ContinuousMove * SOAP_FMAC4 soap_in___tptz__ContinuousMove(struct soap*, const char*, struct __tptz__ContinuousMove *, const char*);
SOAP_FMAC1 struct __tptz__ContinuousMove * SOAP_FMAC2 soap_instantiate___tptz__ContinuousMove(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__ContinuousMove * soap_new___tptz__ContinuousMove(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__ContinuousMove(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__ContinuousMove * soap_new_req___tptz__ContinuousMove(
	struct soap *soap)
{
	struct __tptz__ContinuousMove *_p = soap_new___tptz__ContinuousMove(soap);
	if (_p)
	{	soap_default___tptz__ContinuousMove(soap, _p);
	}
	return _p;
}

inline struct __tptz__ContinuousMove * soap_new_set___tptz__ContinuousMove(
	struct soap *soap,
	_tptz__ContinuousMove *tptz__ContinuousMove)
{
	struct __tptz__ContinuousMove *_p = soap_new___tptz__ContinuousMove(soap);
	if (_p)
	{	soap_default___tptz__ContinuousMove(soap, _p);
		_p->tptz__ContinuousMove = tptz__ContinuousMove;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__ContinuousMove(struct soap*, const struct __tptz__ContinuousMove *, const char*, const char*);

inline int soap_write___tptz__ContinuousMove(struct soap *soap, struct __tptz__ContinuousMove const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tptz__ContinuousMove(soap, p), 0) || soap_put___tptz__ContinuousMove(soap, p, "-tptz:ContinuousMove", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__ContinuousMove * SOAP_FMAC4 soap_get___tptz__ContinuousMove(struct soap*, struct __tptz__ContinuousMove *, const char*, const char*);

inline int soap_read___tptz__ContinuousMove(struct soap *soap, struct __tptz__ContinuousMove *p)
{
	if (p)
	{	soap_default___tptz__ContinuousMove(soap, p);
		if (soap_begin_recv(soap) || soap_get___tptz__ContinuousMove(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tptz__SetHomePosition_DEFINED
#define SOAP_TYPE___tptz__SetHomePosition_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__SetHomePosition(struct soap*, struct __tptz__SetHomePosition *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__SetHomePosition(struct soap*, const struct __tptz__SetHomePosition *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__SetHomePosition(struct soap*, const char*, int, const struct __tptz__SetHomePosition *, const char*);
SOAP_FMAC3 struct __tptz__SetHomePosition * SOAP_FMAC4 soap_in___tptz__SetHomePosition(struct soap*, const char*, struct __tptz__SetHomePosition *, const char*);
SOAP_FMAC1 struct __tptz__SetHomePosition * SOAP_FMAC2 soap_instantiate___tptz__SetHomePosition(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__SetHomePosition * soap_new___tptz__SetHomePosition(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__SetHomePosition(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__SetHomePosition * soap_new_req___tptz__SetHomePosition(
	struct soap *soap)
{
	struct __tptz__SetHomePosition *_p = soap_new___tptz__SetHomePosition(soap);
	if (_p)
	{	soap_default___tptz__SetHomePosition(soap, _p);
	}
	return _p;
}

inline struct __tptz__SetHomePosition * soap_new_set___tptz__SetHomePosition(
	struct soap *soap,
	_tptz__SetHomePosition *tptz__SetHomePosition)
{
	struct __tptz__SetHomePosition *_p = soap_new___tptz__SetHomePosition(soap);
	if (_p)
	{	soap_default___tptz__SetHomePosition(soap, _p);
		_p->tptz__SetHomePosition = tptz__SetHomePosition;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__SetHomePosition(struct soap*, const struct __tptz__SetHomePosition *, const char*, const char*);

inline int soap_write___tptz__SetHomePosition(struct soap *soap, struct __tptz__SetHomePosition const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tptz__SetHomePosition(soap, p), 0) || soap_put___tptz__SetHomePosition(soap, p, "-tptz:SetHomePosition", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__SetHomePosition * SOAP_FMAC4 soap_get___tptz__SetHomePosition(struct soap*, struct __tptz__SetHomePosition *, const char*, const char*);

inline int soap_read___tptz__SetHomePosition(struct soap *soap, struct __tptz__SetHomePosition *p)
{
	if (p)
	{	soap_default___tptz__SetHomePosition(soap, p);
		if (soap_begin_recv(soap) || soap_get___tptz__SetHomePosition(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tptz__GotoHomePosition_DEFINED
#define SOAP_TYPE___tptz__GotoHomePosition_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__GotoHomePosition(struct soap*, struct __tptz__GotoHomePosition *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__GotoHomePosition(struct soap*, const struct __tptz__GotoHomePosition *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__GotoHomePosition(struct soap*, const char*, int, const struct __tptz__GotoHomePosition *, const char*);
SOAP_FMAC3 struct __tptz__GotoHomePosition * SOAP_FMAC4 soap_in___tptz__GotoHomePosition(struct soap*, const char*, struct __tptz__GotoHomePosition *, const char*);
SOAP_FMAC1 struct __tptz__GotoHomePosition * SOAP_FMAC2 soap_instantiate___tptz__GotoHomePosition(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__GotoHomePosition * soap_new___tptz__GotoHomePosition(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__GotoHomePosition(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__GotoHomePosition * soap_new_req___tptz__GotoHomePosition(
	struct soap *soap)
{
	struct __tptz__GotoHomePosition *_p = soap_new___tptz__GotoHomePosition(soap);
	if (_p)
	{	soap_default___tptz__GotoHomePosition(soap, _p);
	}
	return _p;
}

inline struct __tptz__GotoHomePosition * soap_new_set___tptz__GotoHomePosition(
	struct soap *soap,
	_tptz__GotoHomePosition *tptz__GotoHomePosition)
{
	struct __tptz__GotoHomePosition *_p = soap_new___tptz__GotoHomePosition(soap);
	if (_p)
	{	soap_default___tptz__GotoHomePosition(soap, _p);
		_p->tptz__GotoHomePosition = tptz__GotoHomePosition;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__GotoHomePosition(struct soap*, const struct __tptz__GotoHomePosition *, const char*, const char*);

inline int soap_write___tptz__GotoHomePosition(struct soap *soap, struct __tptz__GotoHomePosition const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tptz__GotoHomePosition(soap, p), 0) || soap_put___tptz__GotoHomePosition(soap, p, "-tptz:GotoHomePosition", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__GotoHomePosition * SOAP_FMAC4 soap_get___tptz__GotoHomePosition(struct soap*, struct __tptz__GotoHomePosition *, const char*, const char*);

inline int soap_read___tptz__GotoHomePosition(struct soap *soap, struct __tptz__GotoHomePosition *p)
{
	if (p)
	{	soap_default___tptz__GotoHomePosition(soap, p);
		if (soap_begin_recv(soap) || soap_get___tptz__GotoHomePosition(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tptz__GetConfigurationOptions_DEFINED
#define SOAP_TYPE___tptz__GetConfigurationOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__GetConfigurationOptions(struct soap*, struct __tptz__GetConfigurationOptions *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__GetConfigurationOptions(struct soap*, const struct __tptz__GetConfigurationOptions *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__GetConfigurationOptions(struct soap*, const char*, int, const struct __tptz__GetConfigurationOptions *, const char*);
SOAP_FMAC3 struct __tptz__GetConfigurationOptions * SOAP_FMAC4 soap_in___tptz__GetConfigurationOptions(struct soap*, const char*, struct __tptz__GetConfigurationOptions *, const char*);
SOAP_FMAC1 struct __tptz__GetConfigurationOptions * SOAP_FMAC2 soap_instantiate___tptz__GetConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__GetConfigurationOptions * soap_new___tptz__GetConfigurationOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__GetConfigurationOptions(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__GetConfigurationOptions * soap_new_req___tptz__GetConfigurationOptions(
	struct soap *soap)
{
	struct __tptz__GetConfigurationOptions *_p = soap_new___tptz__GetConfigurationOptions(soap);
	if (_p)
	{	soap_default___tptz__GetConfigurationOptions(soap, _p);
	}
	return _p;
}

inline struct __tptz__GetConfigurationOptions * soap_new_set___tptz__GetConfigurationOptions(
	struct soap *soap,
	_tptz__GetConfigurationOptions *tptz__GetConfigurationOptions)
{
	struct __tptz__GetConfigurationOptions *_p = soap_new___tptz__GetConfigurationOptions(soap);
	if (_p)
	{	soap_default___tptz__GetConfigurationOptions(soap, _p);
		_p->tptz__GetConfigurationOptions = tptz__GetConfigurationOptions;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__GetConfigurationOptions(struct soap*, const struct __tptz__GetConfigurationOptions *, const char*, const char*);

inline int soap_write___tptz__GetConfigurationOptions(struct soap *soap, struct __tptz__GetConfigurationOptions const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tptz__GetConfigurationOptions(soap, p), 0) || soap_put___tptz__GetConfigurationOptions(soap, p, "-tptz:GetConfigurationOptions", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__GetConfigurationOptions * SOAP_FMAC4 soap_get___tptz__GetConfigurationOptions(struct soap*, struct __tptz__GetConfigurationOptions *, const char*, const char*);

inline int soap_read___tptz__GetConfigurationOptions(struct soap *soap, struct __tptz__GetConfigurationOptions *p)
{
	if (p)
	{	soap_default___tptz__GetConfigurationOptions(soap, p);
		if (soap_begin_recv(soap) || soap_get___tptz__GetConfigurationOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tptz__SetConfiguration_DEFINED
#define SOAP_TYPE___tptz__SetConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__SetConfiguration(struct soap*, struct __tptz__SetConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__SetConfiguration(struct soap*, const struct __tptz__SetConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__SetConfiguration(struct soap*, const char*, int, const struct __tptz__SetConfiguration *, const char*);
SOAP_FMAC3 struct __tptz__SetConfiguration * SOAP_FMAC4 soap_in___tptz__SetConfiguration(struct soap*, const char*, struct __tptz__SetConfiguration *, const char*);
SOAP_FMAC1 struct __tptz__SetConfiguration * SOAP_FMAC2 soap_instantiate___tptz__SetConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__SetConfiguration * soap_new___tptz__SetConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__SetConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__SetConfiguration * soap_new_req___tptz__SetConfiguration(
	struct soap *soap)
{
	struct __tptz__SetConfiguration *_p = soap_new___tptz__SetConfiguration(soap);
	if (_p)
	{	soap_default___tptz__SetConfiguration(soap, _p);
	}
	return _p;
}

inline struct __tptz__SetConfiguration * soap_new_set___tptz__SetConfiguration(
	struct soap *soap,
	_tptz__SetConfiguration *tptz__SetConfiguration)
{
	struct __tptz__SetConfiguration *_p = soap_new___tptz__SetConfiguration(soap);
	if (_p)
	{	soap_default___tptz__SetConfiguration(soap, _p);
		_p->tptz__SetConfiguration = tptz__SetConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__SetConfiguration(struct soap*, const struct __tptz__SetConfiguration *, const char*, const char*);

inline int soap_write___tptz__SetConfiguration(struct soap *soap, struct __tptz__SetConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tptz__SetConfiguration(soap, p), 0) || soap_put___tptz__SetConfiguration(soap, p, "-tptz:SetConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__SetConfiguration * SOAP_FMAC4 soap_get___tptz__SetConfiguration(struct soap*, struct __tptz__SetConfiguration *, const char*, const char*);

inline int soap_read___tptz__SetConfiguration(struct soap *soap, struct __tptz__SetConfiguration *p)
{
	if (p)
	{	soap_default___tptz__SetConfiguration(soap, p);
		if (soap_begin_recv(soap) || soap_get___tptz__SetConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tptz__GetNode_DEFINED
#define SOAP_TYPE___tptz__GetNode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__GetNode(struct soap*, struct __tptz__GetNode *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__GetNode(struct soap*, const struct __tptz__GetNode *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__GetNode(struct soap*, const char*, int, const struct __tptz__GetNode *, const char*);
SOAP_FMAC3 struct __tptz__GetNode * SOAP_FMAC4 soap_in___tptz__GetNode(struct soap*, const char*, struct __tptz__GetNode *, const char*);
SOAP_FMAC1 struct __tptz__GetNode * SOAP_FMAC2 soap_instantiate___tptz__GetNode(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__GetNode * soap_new___tptz__GetNode(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__GetNode(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__GetNode * soap_new_req___tptz__GetNode(
	struct soap *soap)
{
	struct __tptz__GetNode *_p = soap_new___tptz__GetNode(soap);
	if (_p)
	{	soap_default___tptz__GetNode(soap, _p);
	}
	return _p;
}

inline struct __tptz__GetNode * soap_new_set___tptz__GetNode(
	struct soap *soap,
	_tptz__GetNode *tptz__GetNode)
{
	struct __tptz__GetNode *_p = soap_new___tptz__GetNode(soap);
	if (_p)
	{	soap_default___tptz__GetNode(soap, _p);
		_p->tptz__GetNode = tptz__GetNode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__GetNode(struct soap*, const struct __tptz__GetNode *, const char*, const char*);

inline int soap_write___tptz__GetNode(struct soap *soap, struct __tptz__GetNode const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tptz__GetNode(soap, p), 0) || soap_put___tptz__GetNode(soap, p, "-tptz:GetNode", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__GetNode * SOAP_FMAC4 soap_get___tptz__GetNode(struct soap*, struct __tptz__GetNode *, const char*, const char*);

inline int soap_read___tptz__GetNode(struct soap *soap, struct __tptz__GetNode *p)
{
	if (p)
	{	soap_default___tptz__GetNode(soap, p);
		if (soap_begin_recv(soap) || soap_get___tptz__GetNode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tptz__GetNodes_DEFINED
#define SOAP_TYPE___tptz__GetNodes_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__GetNodes(struct soap*, struct __tptz__GetNodes *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__GetNodes(struct soap*, const struct __tptz__GetNodes *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__GetNodes(struct soap*, const char*, int, const struct __tptz__GetNodes *, const char*);
SOAP_FMAC3 struct __tptz__GetNodes * SOAP_FMAC4 soap_in___tptz__GetNodes(struct soap*, const char*, struct __tptz__GetNodes *, const char*);
SOAP_FMAC1 struct __tptz__GetNodes * SOAP_FMAC2 soap_instantiate___tptz__GetNodes(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__GetNodes * soap_new___tptz__GetNodes(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__GetNodes(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__GetNodes * soap_new_req___tptz__GetNodes(
	struct soap *soap)
{
	struct __tptz__GetNodes *_p = soap_new___tptz__GetNodes(soap);
	if (_p)
	{	soap_default___tptz__GetNodes(soap, _p);
	}
	return _p;
}

inline struct __tptz__GetNodes * soap_new_set___tptz__GetNodes(
	struct soap *soap,
	_tptz__GetNodes *tptz__GetNodes)
{
	struct __tptz__GetNodes *_p = soap_new___tptz__GetNodes(soap);
	if (_p)
	{	soap_default___tptz__GetNodes(soap, _p);
		_p->tptz__GetNodes = tptz__GetNodes;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__GetNodes(struct soap*, const struct __tptz__GetNodes *, const char*, const char*);

inline int soap_write___tptz__GetNodes(struct soap *soap, struct __tptz__GetNodes const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tptz__GetNodes(soap, p), 0) || soap_put___tptz__GetNodes(soap, p, "-tptz:GetNodes", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__GetNodes * SOAP_FMAC4 soap_get___tptz__GetNodes(struct soap*, struct __tptz__GetNodes *, const char*, const char*);

inline int soap_read___tptz__GetNodes(struct soap *soap, struct __tptz__GetNodes *p)
{
	if (p)
	{	soap_default___tptz__GetNodes(soap, p);
		if (soap_begin_recv(soap) || soap_get___tptz__GetNodes(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tptz__GetConfiguration_DEFINED
#define SOAP_TYPE___tptz__GetConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__GetConfiguration(struct soap*, struct __tptz__GetConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__GetConfiguration(struct soap*, const struct __tptz__GetConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__GetConfiguration(struct soap*, const char*, int, const struct __tptz__GetConfiguration *, const char*);
SOAP_FMAC3 struct __tptz__GetConfiguration * SOAP_FMAC4 soap_in___tptz__GetConfiguration(struct soap*, const char*, struct __tptz__GetConfiguration *, const char*);
SOAP_FMAC1 struct __tptz__GetConfiguration * SOAP_FMAC2 soap_instantiate___tptz__GetConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__GetConfiguration * soap_new___tptz__GetConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__GetConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__GetConfiguration * soap_new_req___tptz__GetConfiguration(
	struct soap *soap)
{
	struct __tptz__GetConfiguration *_p = soap_new___tptz__GetConfiguration(soap);
	if (_p)
	{	soap_default___tptz__GetConfiguration(soap, _p);
	}
	return _p;
}

inline struct __tptz__GetConfiguration * soap_new_set___tptz__GetConfiguration(
	struct soap *soap,
	_tptz__GetConfiguration *tptz__GetConfiguration)
{
	struct __tptz__GetConfiguration *_p = soap_new___tptz__GetConfiguration(soap);
	if (_p)
	{	soap_default___tptz__GetConfiguration(soap, _p);
		_p->tptz__GetConfiguration = tptz__GetConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__GetConfiguration(struct soap*, const struct __tptz__GetConfiguration *, const char*, const char*);

inline int soap_write___tptz__GetConfiguration(struct soap *soap, struct __tptz__GetConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tptz__GetConfiguration(soap, p), 0) || soap_put___tptz__GetConfiguration(soap, p, "-tptz:GetConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__GetConfiguration * SOAP_FMAC4 soap_get___tptz__GetConfiguration(struct soap*, struct __tptz__GetConfiguration *, const char*, const char*);

inline int soap_read___tptz__GetConfiguration(struct soap *soap, struct __tptz__GetConfiguration *p)
{
	if (p)
	{	soap_default___tptz__GetConfiguration(soap, p);
		if (soap_begin_recv(soap) || soap_get___tptz__GetConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tptz__GetStatus_DEFINED
#define SOAP_TYPE___tptz__GetStatus_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__GetStatus(struct soap*, struct __tptz__GetStatus *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__GetStatus(struct soap*, const struct __tptz__GetStatus *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__GetStatus(struct soap*, const char*, int, const struct __tptz__GetStatus *, const char*);
SOAP_FMAC3 struct __tptz__GetStatus * SOAP_FMAC4 soap_in___tptz__GetStatus(struct soap*, const char*, struct __tptz__GetStatus *, const char*);
SOAP_FMAC1 struct __tptz__GetStatus * SOAP_FMAC2 soap_instantiate___tptz__GetStatus(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__GetStatus * soap_new___tptz__GetStatus(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__GetStatus(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__GetStatus * soap_new_req___tptz__GetStatus(
	struct soap *soap)
{
	struct __tptz__GetStatus *_p = soap_new___tptz__GetStatus(soap);
	if (_p)
	{	soap_default___tptz__GetStatus(soap, _p);
	}
	return _p;
}

inline struct __tptz__GetStatus * soap_new_set___tptz__GetStatus(
	struct soap *soap,
	_tptz__GetStatus *tptz__GetStatus)
{
	struct __tptz__GetStatus *_p = soap_new___tptz__GetStatus(soap);
	if (_p)
	{	soap_default___tptz__GetStatus(soap, _p);
		_p->tptz__GetStatus = tptz__GetStatus;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__GetStatus(struct soap*, const struct __tptz__GetStatus *, const char*, const char*);

inline int soap_write___tptz__GetStatus(struct soap *soap, struct __tptz__GetStatus const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tptz__GetStatus(soap, p), 0) || soap_put___tptz__GetStatus(soap, p, "-tptz:GetStatus", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__GetStatus * SOAP_FMAC4 soap_get___tptz__GetStatus(struct soap*, struct __tptz__GetStatus *, const char*, const char*);

inline int soap_read___tptz__GetStatus(struct soap *soap, struct __tptz__GetStatus *p)
{
	if (p)
	{	soap_default___tptz__GetStatus(soap, p);
		if (soap_begin_recv(soap) || soap_get___tptz__GetStatus(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tptz__GotoPreset_DEFINED
#define SOAP_TYPE___tptz__GotoPreset_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__GotoPreset(struct soap*, struct __tptz__GotoPreset *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__GotoPreset(struct soap*, const struct __tptz__GotoPreset *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__GotoPreset(struct soap*, const char*, int, const struct __tptz__GotoPreset *, const char*);
SOAP_FMAC3 struct __tptz__GotoPreset * SOAP_FMAC4 soap_in___tptz__GotoPreset(struct soap*, const char*, struct __tptz__GotoPreset *, const char*);
SOAP_FMAC1 struct __tptz__GotoPreset * SOAP_FMAC2 soap_instantiate___tptz__GotoPreset(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__GotoPreset * soap_new___tptz__GotoPreset(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__GotoPreset(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__GotoPreset * soap_new_req___tptz__GotoPreset(
	struct soap *soap)
{
	struct __tptz__GotoPreset *_p = soap_new___tptz__GotoPreset(soap);
	if (_p)
	{	soap_default___tptz__GotoPreset(soap, _p);
	}
	return _p;
}

inline struct __tptz__GotoPreset * soap_new_set___tptz__GotoPreset(
	struct soap *soap,
	_tptz__GotoPreset *tptz__GotoPreset)
{
	struct __tptz__GotoPreset *_p = soap_new___tptz__GotoPreset(soap);
	if (_p)
	{	soap_default___tptz__GotoPreset(soap, _p);
		_p->tptz__GotoPreset = tptz__GotoPreset;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__GotoPreset(struct soap*, const struct __tptz__GotoPreset *, const char*, const char*);

inline int soap_write___tptz__GotoPreset(struct soap *soap, struct __tptz__GotoPreset const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tptz__GotoPreset(soap, p), 0) || soap_put___tptz__GotoPreset(soap, p, "-tptz:GotoPreset", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__GotoPreset * SOAP_FMAC4 soap_get___tptz__GotoPreset(struct soap*, struct __tptz__GotoPreset *, const char*, const char*);

inline int soap_read___tptz__GotoPreset(struct soap *soap, struct __tptz__GotoPreset *p)
{
	if (p)
	{	soap_default___tptz__GotoPreset(soap, p);
		if (soap_begin_recv(soap) || soap_get___tptz__GotoPreset(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tptz__RemovePreset_DEFINED
#define SOAP_TYPE___tptz__RemovePreset_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__RemovePreset(struct soap*, struct __tptz__RemovePreset *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__RemovePreset(struct soap*, const struct __tptz__RemovePreset *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__RemovePreset(struct soap*, const char*, int, const struct __tptz__RemovePreset *, const char*);
SOAP_FMAC3 struct __tptz__RemovePreset * SOAP_FMAC4 soap_in___tptz__RemovePreset(struct soap*, const char*, struct __tptz__RemovePreset *, const char*);
SOAP_FMAC1 struct __tptz__RemovePreset * SOAP_FMAC2 soap_instantiate___tptz__RemovePreset(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__RemovePreset * soap_new___tptz__RemovePreset(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__RemovePreset(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__RemovePreset * soap_new_req___tptz__RemovePreset(
	struct soap *soap)
{
	struct __tptz__RemovePreset *_p = soap_new___tptz__RemovePreset(soap);
	if (_p)
	{	soap_default___tptz__RemovePreset(soap, _p);
	}
	return _p;
}

inline struct __tptz__RemovePreset * soap_new_set___tptz__RemovePreset(
	struct soap *soap,
	_tptz__RemovePreset *tptz__RemovePreset)
{
	struct __tptz__RemovePreset *_p = soap_new___tptz__RemovePreset(soap);
	if (_p)
	{	soap_default___tptz__RemovePreset(soap, _p);
		_p->tptz__RemovePreset = tptz__RemovePreset;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__RemovePreset(struct soap*, const struct __tptz__RemovePreset *, const char*, const char*);

inline int soap_write___tptz__RemovePreset(struct soap *soap, struct __tptz__RemovePreset const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tptz__RemovePreset(soap, p), 0) || soap_put___tptz__RemovePreset(soap, p, "-tptz:RemovePreset", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__RemovePreset * SOAP_FMAC4 soap_get___tptz__RemovePreset(struct soap*, struct __tptz__RemovePreset *, const char*, const char*);

inline int soap_read___tptz__RemovePreset(struct soap *soap, struct __tptz__RemovePreset *p)
{
	if (p)
	{	soap_default___tptz__RemovePreset(soap, p);
		if (soap_begin_recv(soap) || soap_get___tptz__RemovePreset(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tptz__SetPreset_DEFINED
#define SOAP_TYPE___tptz__SetPreset_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__SetPreset(struct soap*, struct __tptz__SetPreset *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__SetPreset(struct soap*, const struct __tptz__SetPreset *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__SetPreset(struct soap*, const char*, int, const struct __tptz__SetPreset *, const char*);
SOAP_FMAC3 struct __tptz__SetPreset * SOAP_FMAC4 soap_in___tptz__SetPreset(struct soap*, const char*, struct __tptz__SetPreset *, const char*);
SOAP_FMAC1 struct __tptz__SetPreset * SOAP_FMAC2 soap_instantiate___tptz__SetPreset(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__SetPreset * soap_new___tptz__SetPreset(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__SetPreset(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__SetPreset * soap_new_req___tptz__SetPreset(
	struct soap *soap)
{
	struct __tptz__SetPreset *_p = soap_new___tptz__SetPreset(soap);
	if (_p)
	{	soap_default___tptz__SetPreset(soap, _p);
	}
	return _p;
}

inline struct __tptz__SetPreset * soap_new_set___tptz__SetPreset(
	struct soap *soap,
	_tptz__SetPreset *tptz__SetPreset)
{
	struct __tptz__SetPreset *_p = soap_new___tptz__SetPreset(soap);
	if (_p)
	{	soap_default___tptz__SetPreset(soap, _p);
		_p->tptz__SetPreset = tptz__SetPreset;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__SetPreset(struct soap*, const struct __tptz__SetPreset *, const char*, const char*);

inline int soap_write___tptz__SetPreset(struct soap *soap, struct __tptz__SetPreset const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tptz__SetPreset(soap, p), 0) || soap_put___tptz__SetPreset(soap, p, "-tptz:SetPreset", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__SetPreset * SOAP_FMAC4 soap_get___tptz__SetPreset(struct soap*, struct __tptz__SetPreset *, const char*, const char*);

inline int soap_read___tptz__SetPreset(struct soap *soap, struct __tptz__SetPreset *p)
{
	if (p)
	{	soap_default___tptz__SetPreset(soap, p);
		if (soap_begin_recv(soap) || soap_get___tptz__SetPreset(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tptz__GetPresets_DEFINED
#define SOAP_TYPE___tptz__GetPresets_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__GetPresets(struct soap*, struct __tptz__GetPresets *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__GetPresets(struct soap*, const struct __tptz__GetPresets *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__GetPresets(struct soap*, const char*, int, const struct __tptz__GetPresets *, const char*);
SOAP_FMAC3 struct __tptz__GetPresets * SOAP_FMAC4 soap_in___tptz__GetPresets(struct soap*, const char*, struct __tptz__GetPresets *, const char*);
SOAP_FMAC1 struct __tptz__GetPresets * SOAP_FMAC2 soap_instantiate___tptz__GetPresets(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__GetPresets * soap_new___tptz__GetPresets(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__GetPresets(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__GetPresets * soap_new_req___tptz__GetPresets(
	struct soap *soap)
{
	struct __tptz__GetPresets *_p = soap_new___tptz__GetPresets(soap);
	if (_p)
	{	soap_default___tptz__GetPresets(soap, _p);
	}
	return _p;
}

inline struct __tptz__GetPresets * soap_new_set___tptz__GetPresets(
	struct soap *soap,
	_tptz__GetPresets *tptz__GetPresets)
{
	struct __tptz__GetPresets *_p = soap_new___tptz__GetPresets(soap);
	if (_p)
	{	soap_default___tptz__GetPresets(soap, _p);
		_p->tptz__GetPresets = tptz__GetPresets;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__GetPresets(struct soap*, const struct __tptz__GetPresets *, const char*, const char*);

inline int soap_write___tptz__GetPresets(struct soap *soap, struct __tptz__GetPresets const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tptz__GetPresets(soap, p), 0) || soap_put___tptz__GetPresets(soap, p, "-tptz:GetPresets", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__GetPresets * SOAP_FMAC4 soap_get___tptz__GetPresets(struct soap*, struct __tptz__GetPresets *, const char*, const char*);

inline int soap_read___tptz__GetPresets(struct soap *soap, struct __tptz__GetPresets *p)
{
	if (p)
	{	soap_default___tptz__GetPresets(soap, p);
		if (soap_begin_recv(soap) || soap_get___tptz__GetPresets(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tptz__GetConfigurations_DEFINED
#define SOAP_TYPE___tptz__GetConfigurations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__GetConfigurations(struct soap*, struct __tptz__GetConfigurations *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__GetConfigurations(struct soap*, const struct __tptz__GetConfigurations *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__GetConfigurations(struct soap*, const char*, int, const struct __tptz__GetConfigurations *, const char*);
SOAP_FMAC3 struct __tptz__GetConfigurations * SOAP_FMAC4 soap_in___tptz__GetConfigurations(struct soap*, const char*, struct __tptz__GetConfigurations *, const char*);
SOAP_FMAC1 struct __tptz__GetConfigurations * SOAP_FMAC2 soap_instantiate___tptz__GetConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__GetConfigurations * soap_new___tptz__GetConfigurations(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__GetConfigurations(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__GetConfigurations * soap_new_req___tptz__GetConfigurations(
	struct soap *soap)
{
	struct __tptz__GetConfigurations *_p = soap_new___tptz__GetConfigurations(soap);
	if (_p)
	{	soap_default___tptz__GetConfigurations(soap, _p);
	}
	return _p;
}

inline struct __tptz__GetConfigurations * soap_new_set___tptz__GetConfigurations(
	struct soap *soap,
	_tptz__GetConfigurations *tptz__GetConfigurations)
{
	struct __tptz__GetConfigurations *_p = soap_new___tptz__GetConfigurations(soap);
	if (_p)
	{	soap_default___tptz__GetConfigurations(soap, _p);
		_p->tptz__GetConfigurations = tptz__GetConfigurations;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__GetConfigurations(struct soap*, const struct __tptz__GetConfigurations *, const char*, const char*);

inline int soap_write___tptz__GetConfigurations(struct soap *soap, struct __tptz__GetConfigurations const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tptz__GetConfigurations(soap, p), 0) || soap_put___tptz__GetConfigurations(soap, p, "-tptz:GetConfigurations", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__GetConfigurations * SOAP_FMAC4 soap_get___tptz__GetConfigurations(struct soap*, struct __tptz__GetConfigurations *, const char*, const char*);

inline int soap_read___tptz__GetConfigurations(struct soap *soap, struct __tptz__GetConfigurations *p)
{
	if (p)
	{	soap_default___tptz__GetConfigurations(soap, p);
		if (soap_begin_recv(soap) || soap_get___tptz__GetConfigurations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tptz__GetServiceCapabilities_DEFINED
#define SOAP_TYPE___tptz__GetServiceCapabilities_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__GetServiceCapabilities(struct soap*, struct __tptz__GetServiceCapabilities *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__GetServiceCapabilities(struct soap*, const struct __tptz__GetServiceCapabilities *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__GetServiceCapabilities(struct soap*, const char*, int, const struct __tptz__GetServiceCapabilities *, const char*);
SOAP_FMAC3 struct __tptz__GetServiceCapabilities * SOAP_FMAC4 soap_in___tptz__GetServiceCapabilities(struct soap*, const char*, struct __tptz__GetServiceCapabilities *, const char*);
SOAP_FMAC1 struct __tptz__GetServiceCapabilities * SOAP_FMAC2 soap_instantiate___tptz__GetServiceCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__GetServiceCapabilities * soap_new___tptz__GetServiceCapabilities(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__GetServiceCapabilities(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__GetServiceCapabilities * soap_new_req___tptz__GetServiceCapabilities(
	struct soap *soap)
{
	struct __tptz__GetServiceCapabilities *_p = soap_new___tptz__GetServiceCapabilities(soap);
	if (_p)
	{	soap_default___tptz__GetServiceCapabilities(soap, _p);
	}
	return _p;
}

inline struct __tptz__GetServiceCapabilities * soap_new_set___tptz__GetServiceCapabilities(
	struct soap *soap,
	_tptz__GetServiceCapabilities *tptz__GetServiceCapabilities)
{
	struct __tptz__GetServiceCapabilities *_p = soap_new___tptz__GetServiceCapabilities(soap);
	if (_p)
	{	soap_default___tptz__GetServiceCapabilities(soap, _p);
		_p->tptz__GetServiceCapabilities = tptz__GetServiceCapabilities;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__GetServiceCapabilities(struct soap*, const struct __tptz__GetServiceCapabilities *, const char*, const char*);

inline int soap_write___tptz__GetServiceCapabilities(struct soap *soap, struct __tptz__GetServiceCapabilities const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tptz__GetServiceCapabilities(soap, p), 0) || soap_put___tptz__GetServiceCapabilities(soap, p, "-tptz:GetServiceCapabilities", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__GetServiceCapabilities * SOAP_FMAC4 soap_get___tptz__GetServiceCapabilities(struct soap*, struct __tptz__GetServiceCapabilities *, const char*, const char*);

inline int soap_read___tptz__GetServiceCapabilities(struct soap *soap, struct __tptz__GetServiceCapabilities *p)
{
	if (p)
	{	soap_default___tptz__GetServiceCapabilities(soap, p);
		if (soap_begin_recv(soap) || soap_get___tptz__GetServiceCapabilities(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tds__DeleteStorageConfiguration_DEFINED
#define SOAP_TYPE___tds__DeleteStorageConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__DeleteStorageConfiguration(struct soap*, struct __tds__DeleteStorageConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__DeleteStorageConfiguration(struct soap*, const struct __tds__DeleteStorageConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__DeleteStorageConfiguration(struct soap*, const char*, int, const struct __tds__DeleteStorageConfiguration *, const char*);
SOAP_FMAC3 struct __tds__DeleteStorageConfiguration * SOAP_FMAC4 soap_in___tds__DeleteStorageConfiguration(struct soap*, const char*, struct __tds__DeleteStorageConfiguration *, const char*);
SOAP_FMAC1 struct __tds__DeleteStorageConfiguration * SOAP_FMAC2 soap_instantiate___tds__DeleteStorageConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__DeleteStorageConfiguration * soap_new___tds__DeleteStorageConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__DeleteStorageConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __tds__DeleteStorageConfiguration * soap_new_req___tds__DeleteStorageConfiguration(
	struct soap *soap)
{
	struct __tds__DeleteStorageConfiguration *_p = soap_new___tds__DeleteStorageConfiguration(soap);
	if (_p)
	{	soap_default___tds__DeleteStorageConfiguration(soap, _p);
	}
	return _p;
}

inline struct __tds__DeleteStorageConfiguration * soap_new_set___tds__DeleteStorageConfiguration(
	struct soap *soap,
	_tds__DeleteStorageConfiguration *tds__DeleteStorageConfiguration)
{
	struct __tds__DeleteStorageConfiguration *_p = soap_new___tds__DeleteStorageConfiguration(soap);
	if (_p)
	{	soap_default___tds__DeleteStorageConfiguration(soap, _p);
		_p->tds__DeleteStorageConfiguration = tds__DeleteStorageConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__DeleteStorageConfiguration(struct soap*, const struct __tds__DeleteStorageConfiguration *, const char*, const char*);

inline int soap_write___tds__DeleteStorageConfiguration(struct soap *soap, struct __tds__DeleteStorageConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tds__DeleteStorageConfiguration(soap, p), 0) || soap_put___tds__DeleteStorageConfiguration(soap, p, "-tds:DeleteStorageConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__DeleteStorageConfiguration * SOAP_FMAC4 soap_get___tds__DeleteStorageConfiguration(struct soap*, struct __tds__DeleteStorageConfiguration *, const char*, const char*);

inline int soap_read___tds__DeleteStorageConfiguration(struct soap *soap, struct __tds__DeleteStorageConfiguration *p)
{
	if (p)
	{	soap_default___tds__DeleteStorageConfiguration(soap, p);
		if (soap_begin_recv(soap) || soap_get___tds__DeleteStorageConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tds__SetStorageConfiguration_DEFINED
#define SOAP_TYPE___tds__SetStorageConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__SetStorageConfiguration(struct soap*, struct __tds__SetStorageConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__SetStorageConfiguration(struct soap*, const struct __tds__SetStorageConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__SetStorageConfiguration(struct soap*, const char*, int, const struct __tds__SetStorageConfiguration *, const char*);
SOAP_FMAC3 struct __tds__SetStorageConfiguration * SOAP_FMAC4 soap_in___tds__SetStorageConfiguration(struct soap*, const char*, struct __tds__SetStorageConfiguration *, const char*);
SOAP_FMAC1 struct __tds__SetStorageConfiguration * SOAP_FMAC2 soap_instantiate___tds__SetStorageConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__SetStorageConfiguration * soap_new___tds__SetStorageConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__SetStorageConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __tds__SetStorageConfiguration * soap_new_req___tds__SetStorageConfiguration(
	struct soap *soap)
{
	struct __tds__SetStorageConfiguration *_p = soap_new___tds__SetStorageConfiguration(soap);
	if (_p)
	{	soap_default___tds__SetStorageConfiguration(soap, _p);
	}
	return _p;
}

inline struct __tds__SetStorageConfiguration * soap_new_set___tds__SetStorageConfiguration(
	struct soap *soap,
	_tds__SetStorageConfiguration *tds__SetStorageConfiguration)
{
	struct __tds__SetStorageConfiguration *_p = soap_new___tds__SetStorageConfiguration(soap);
	if (_p)
	{	soap_default___tds__SetStorageConfiguration(soap, _p);
		_p->tds__SetStorageConfiguration = tds__SetStorageConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__SetStorageConfiguration(struct soap*, const struct __tds__SetStorageConfiguration *, const char*, const char*);

inline int soap_write___tds__SetStorageConfiguration(struct soap *soap, struct __tds__SetStorageConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tds__SetStorageConfiguration(soap, p), 0) || soap_put___tds__SetStorageConfiguration(soap, p, "-tds:SetStorageConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__SetStorageConfiguration * SOAP_FMAC4 soap_get___tds__SetStorageConfiguration(struct soap*, struct __tds__SetStorageConfiguration *, const char*, const char*);

inline int soap_read___tds__SetStorageConfiguration(struct soap *soap, struct __tds__SetStorageConfiguration *p)
{
	if (p)
	{	soap_default___tds__SetStorageConfiguration(soap, p);
		if (soap_begin_recv(soap) || soap_get___tds__SetStorageConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tds__GetStorageConfiguration_DEFINED
#define SOAP_TYPE___tds__GetStorageConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__GetStorageConfiguration(struct soap*, struct __tds__GetStorageConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__GetStorageConfiguration(struct soap*, const struct __tds__GetStorageConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__GetStorageConfiguration(struct soap*, const char*, int, const struct __tds__GetStorageConfiguration *, const char*);
SOAP_FMAC3 struct __tds__GetStorageConfiguration * SOAP_FMAC4 soap_in___tds__GetStorageConfiguration(struct soap*, const char*, struct __tds__GetStorageConfiguration *, const char*);
SOAP_FMAC1 struct __tds__GetStorageConfiguration * SOAP_FMAC2 soap_instantiate___tds__GetStorageConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__GetStorageConfiguration * soap_new___tds__GetStorageConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__GetStorageConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __tds__GetStorageConfiguration * soap_new_req___tds__GetStorageConfiguration(
	struct soap *soap)
{
	struct __tds__GetStorageConfiguration *_p = soap_new___tds__GetStorageConfiguration(soap);
	if (_p)
	{	soap_default___tds__GetStorageConfiguration(soap, _p);
	}
	return _p;
}

inline struct __tds__GetStorageConfiguration * soap_new_set___tds__GetStorageConfiguration(
	struct soap *soap,
	_tds__GetStorageConfiguration *tds__GetStorageConfiguration)
{
	struct __tds__GetStorageConfiguration *_p = soap_new___tds__GetStorageConfiguration(soap);
	if (_p)
	{	soap_default___tds__GetStorageConfiguration(soap, _p);
		_p->tds__GetStorageConfiguration = tds__GetStorageConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__GetStorageConfiguration(struct soap*, const struct __tds__GetStorageConfiguration *, const char*, const char*);

inline int soap_write___tds__GetStorageConfiguration(struct soap *soap, struct __tds__GetStorageConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tds__GetStorageConfiguration(soap, p), 0) || soap_put___tds__GetStorageConfiguration(soap, p, "-tds:GetStorageConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__GetStorageConfiguration * SOAP_FMAC4 soap_get___tds__GetStorageConfiguration(struct soap*, struct __tds__GetStorageConfiguration *, const char*, const char*);

inline int soap_read___tds__GetStorageConfiguration(struct soap *soap, struct __tds__GetStorageConfiguration *p)
{
	if (p)
	{	soap_default___tds__GetStorageConfiguration(soap, p);
		if (soap_begin_recv(soap) || soap_get___tds__GetStorageConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tds__CreateStorageConfiguration_DEFINED
#define SOAP_TYPE___tds__CreateStorageConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__CreateStorageConfiguration(struct soap*, struct __tds__CreateStorageConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__CreateStorageConfiguration(struct soap*, const struct __tds__CreateStorageConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__CreateStorageConfiguration(struct soap*, const char*, int, const struct __tds__CreateStorageConfiguration *, const char*);
SOAP_FMAC3 struct __tds__CreateStorageConfiguration * SOAP_FMAC4 soap_in___tds__CreateStorageConfiguration(struct soap*, const char*, struct __tds__CreateStorageConfiguration *, const char*);
SOAP_FMAC1 struct __tds__CreateStorageConfiguration * SOAP_FMAC2 soap_instantiate___tds__CreateStorageConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__CreateStorageConfiguration * soap_new___tds__CreateStorageConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__CreateStorageConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __tds__CreateStorageConfiguration * soap_new_req___tds__CreateStorageConfiguration(
	struct soap *soap)
{
	struct __tds__CreateStorageConfiguration *_p = soap_new___tds__CreateStorageConfiguration(soap);
	if (_p)
	{	soap_default___tds__CreateStorageConfiguration(soap, _p);
	}
	return _p;
}

inline struct __tds__CreateStorageConfiguration * soap_new_set___tds__CreateStorageConfiguration(
	struct soap *soap,
	_tds__CreateStorageConfiguration *tds__CreateStorageConfiguration)
{
	struct __tds__CreateStorageConfiguration *_p = soap_new___tds__CreateStorageConfiguration(soap);
	if (_p)
	{	soap_default___tds__CreateStorageConfiguration(soap, _p);
		_p->tds__CreateStorageConfiguration = tds__CreateStorageConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__CreateStorageConfiguration(struct soap*, const struct __tds__CreateStorageConfiguration *, const char*, const char*);

inline int soap_write___tds__CreateStorageConfiguration(struct soap *soap, struct __tds__CreateStorageConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tds__CreateStorageConfiguration(soap, p), 0) || soap_put___tds__CreateStorageConfiguration(soap, p, "-tds:CreateStorageConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__CreateStorageConfiguration * SOAP_FMAC4 soap_get___tds__CreateStorageConfiguration(struct soap*, struct __tds__CreateStorageConfiguration *, const char*, const char*);

inline int soap_read___tds__CreateStorageConfiguration(struct soap *soap, struct __tds__CreateStorageConfiguration *p)
{
	if (p)
	{	soap_default___tds__CreateStorageConfiguration(soap, p);
		if (soap_begin_recv(soap) || soap_get___tds__CreateStorageConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tds__GetStorageConfigurations_DEFINED
#define SOAP_TYPE___tds__GetStorageConfigurations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__GetStorageConfigurations(struct soap*, struct __tds__GetStorageConfigurations *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__GetStorageConfigurations(struct soap*, const struct __tds__GetStorageConfigurations *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__GetStorageConfigurations(struct soap*, const char*, int, const struct __tds__GetStorageConfigurations *, const char*);
SOAP_FMAC3 struct __tds__GetStorageConfigurations * SOAP_FMAC4 soap_in___tds__GetStorageConfigurations(struct soap*, const char*, struct __tds__GetStorageConfigurations *, const char*);
SOAP_FMAC1 struct __tds__GetStorageConfigurations * SOAP_FMAC2 soap_instantiate___tds__GetStorageConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__GetStorageConfigurations * soap_new___tds__GetStorageConfigurations(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__GetStorageConfigurations(soap, n, NULL, NULL, NULL);
}

inline struct __tds__GetStorageConfigurations * soap_new_req___tds__GetStorageConfigurations(
	struct soap *soap)
{
	struct __tds__GetStorageConfigurations *_p = soap_new___tds__GetStorageConfigurations(soap);
	if (_p)
	{	soap_default___tds__GetStorageConfigurations(soap, _p);
	}
	return _p;
}

inline struct __tds__GetStorageConfigurations * soap_new_set___tds__GetStorageConfigurations(
	struct soap *soap,
	_tds__GetStorageConfigurations *tds__GetStorageConfigurations)
{
	struct __tds__GetStorageConfigurations *_p = soap_new___tds__GetStorageConfigurations(soap);
	if (_p)
	{	soap_default___tds__GetStorageConfigurations(soap, _p);
		_p->tds__GetStorageConfigurations = tds__GetStorageConfigurations;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__GetStorageConfigurations(struct soap*, const struct __tds__GetStorageConfigurations *, const char*, const char*);

inline int soap_write___tds__GetStorageConfigurations(struct soap *soap, struct __tds__GetStorageConfigurations const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tds__GetStorageConfigurations(soap, p), 0) || soap_put___tds__GetStorageConfigurations(soap, p, "-tds:GetStorageConfigurations", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__GetStorageConfigurations * SOAP_FMAC4 soap_get___tds__GetStorageConfigurations(struct soap*, struct __tds__GetStorageConfigurations *, const char*, const char*);

inline int soap_read___tds__GetStorageConfigurations(struct soap *soap, struct __tds__GetStorageConfigurations *p)
{
	if (p)
	{	soap_default___tds__GetStorageConfigurations(soap, p);
		if (soap_begin_recv(soap) || soap_get___tds__GetStorageConfigurations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tds__StartSystemRestore_DEFINED
#define SOAP_TYPE___tds__StartSystemRestore_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__StartSystemRestore(struct soap*, struct __tds__StartSystemRestore *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__StartSystemRestore(struct soap*, const struct __tds__StartSystemRestore *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__StartSystemRestore(struct soap*, const char*, int, const struct __tds__StartSystemRestore *, const char*);
SOAP_FMAC3 struct __tds__StartSystemRestore * SOAP_FMAC4 soap_in___tds__StartSystemRestore(struct soap*, const char*, struct __tds__StartSystemRestore *, const char*);
SOAP_FMAC1 struct __tds__StartSystemRestore * SOAP_FMAC2 soap_instantiate___tds__StartSystemRestore(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__StartSystemRestore * soap_new___tds__StartSystemRestore(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__StartSystemRestore(soap, n, NULL, NULL, NULL);
}

inline struct __tds__StartSystemRestore * soap_new_req___tds__StartSystemRestore(
	struct soap *soap)
{
	struct __tds__StartSystemRestore *_p = soap_new___tds__StartSystemRestore(soap);
	if (_p)
	{	soap_default___tds__StartSystemRestore(soap, _p);
	}
	return _p;
}

inline struct __tds__StartSystemRestore * soap_new_set___tds__StartSystemRestore(
	struct soap *soap,
	_tds__StartSystemRestore *tds__StartSystemRestore)
{
	struct __tds__StartSystemRestore *_p = soap_new___tds__StartSystemRestore(soap);
	if (_p)
	{	soap_default___tds__StartSystemRestore(soap, _p);
		_p->tds__StartSystemRestore = tds__StartSystemRestore;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__StartSystemRestore(struct soap*, const struct __tds__StartSystemRestore *, const char*, const char*);

inline int soap_write___tds__StartSystemRestore(struct soap *soap, struct __tds__StartSystemRestore const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tds__StartSystemRestore(soap, p), 0) || soap_put___tds__StartSystemRestore(soap, p, "-tds:StartSystemRestore", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__StartSystemRestore * SOAP_FMAC4 soap_get___tds__StartSystemRestore(struct soap*, struct __tds__StartSystemRestore *, const char*, const char*);

inline int soap_read___tds__StartSystemRestore(struct soap *soap, struct __tds__StartSystemRestore *p)
{
	if (p)
	{	soap_default___tds__StartSystemRestore(soap, p);
		if (soap_begin_recv(soap) || soap_get___tds__StartSystemRestore(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tds__StartFirmwareUpgrade_DEFINED
#define SOAP_TYPE___tds__StartFirmwareUpgrade_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__StartFirmwareUpgrade(struct soap*, struct __tds__StartFirmwareUpgrade *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__StartFirmwareUpgrade(struct soap*, const struct __tds__StartFirmwareUpgrade *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__StartFirmwareUpgrade(struct soap*, const char*, int, const struct __tds__StartFirmwareUpgrade *, const char*);
SOAP_FMAC3 struct __tds__StartFirmwareUpgrade * SOAP_FMAC4 soap_in___tds__StartFirmwareUpgrade(struct soap*, const char*, struct __tds__StartFirmwareUpgrade *, const char*);
SOAP_FMAC1 struct __tds__StartFirmwareUpgrade * SOAP_FMAC2 soap_instantiate___tds__StartFirmwareUpgrade(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__StartFirmwareUpgrade * soap_new___tds__StartFirmwareUpgrade(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__StartFirmwareUpgrade(soap, n, NULL, NULL, NULL);
}

inline struct __tds__StartFirmwareUpgrade * soap_new_req___tds__StartFirmwareUpgrade(
	struct soap *soap)
{
	struct __tds__StartFirmwareUpgrade *_p = soap_new___tds__StartFirmwareUpgrade(soap);
	if (_p)
	{	soap_default___tds__StartFirmwareUpgrade(soap, _p);
	}
	return _p;
}

inline struct __tds__StartFirmwareUpgrade * soap_new_set___tds__StartFirmwareUpgrade(
	struct soap *soap,
	_tds__StartFirmwareUpgrade *tds__StartFirmwareUpgrade)
{
	struct __tds__StartFirmwareUpgrade *_p = soap_new___tds__StartFirmwareUpgrade(soap);
	if (_p)
	{	soap_default___tds__StartFirmwareUpgrade(soap, _p);
		_p->tds__StartFirmwareUpgrade = tds__StartFirmwareUpgrade;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__StartFirmwareUpgrade(struct soap*, const struct __tds__StartFirmwareUpgrade *, const char*, const char*);

inline int soap_write___tds__StartFirmwareUpgrade(struct soap *soap, struct __tds__StartFirmwareUpgrade const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tds__StartFirmwareUpgrade(soap, p), 0) || soap_put___tds__StartFirmwareUpgrade(soap, p, "-tds:StartFirmwareUpgrade", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__StartFirmwareUpgrade * SOAP_FMAC4 soap_get___tds__StartFirmwareUpgrade(struct soap*, struct __tds__StartFirmwareUpgrade *, const char*, const char*);

inline int soap_read___tds__StartFirmwareUpgrade(struct soap *soap, struct __tds__StartFirmwareUpgrade *p)
{
	if (p)
	{	soap_default___tds__StartFirmwareUpgrade(soap, p);
		if (soap_begin_recv(soap) || soap_get___tds__StartFirmwareUpgrade(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tds__GetSystemUris_DEFINED
#define SOAP_TYPE___tds__GetSystemUris_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__GetSystemUris(struct soap*, struct __tds__GetSystemUris *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__GetSystemUris(struct soap*, const struct __tds__GetSystemUris *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__GetSystemUris(struct soap*, const char*, int, const struct __tds__GetSystemUris *, const char*);
SOAP_FMAC3 struct __tds__GetSystemUris * SOAP_FMAC4 soap_in___tds__GetSystemUris(struct soap*, const char*, struct __tds__GetSystemUris *, const char*);
SOAP_FMAC1 struct __tds__GetSystemUris * SOAP_FMAC2 soap_instantiate___tds__GetSystemUris(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__GetSystemUris * soap_new___tds__GetSystemUris(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__GetSystemUris(soap, n, NULL, NULL, NULL);
}

inline struct __tds__GetSystemUris * soap_new_req___tds__GetSystemUris(
	struct soap *soap)
{
	struct __tds__GetSystemUris *_p = soap_new___tds__GetSystemUris(soap);
	if (_p)
	{	soap_default___tds__GetSystemUris(soap, _p);
	}
	return _p;
}

inline struct __tds__GetSystemUris * soap_new_set___tds__GetSystemUris(
	struct soap *soap,
	_tds__GetSystemUris *tds__GetSystemUris)
{
	struct __tds__GetSystemUris *_p = soap_new___tds__GetSystemUris(soap);
	if (_p)
	{	soap_default___tds__GetSystemUris(soap, _p);
		_p->tds__GetSystemUris = tds__GetSystemUris;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__GetSystemUris(struct soap*, const struct __tds__GetSystemUris *, const char*, const char*);

inline int soap_write___tds__GetSystemUris(struct soap *soap, struct __tds__GetSystemUris const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tds__GetSystemUris(soap, p), 0) || soap_put___tds__GetSystemUris(soap, p, "-tds:GetSystemUris", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__GetSystemUris * SOAP_FMAC4 soap_get___tds__GetSystemUris(struct soap*, struct __tds__GetSystemUris *, const char*, const char*);

inline int soap_read___tds__GetSystemUris(struct soap *soap, struct __tds__GetSystemUris *p)
{
	if (p)
	{	soap_default___tds__GetSystemUris(soap, p);
		if (soap_begin_recv(soap) || soap_get___tds__GetSystemUris(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tds__ScanAvailableDot11Networks_DEFINED
#define SOAP_TYPE___tds__ScanAvailableDot11Networks_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__ScanAvailableDot11Networks(struct soap*, struct __tds__ScanAvailableDot11Networks *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__ScanAvailableDot11Networks(struct soap*, const struct __tds__ScanAvailableDot11Networks *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__ScanAvailableDot11Networks(struct soap*, const char*, int, const struct __tds__ScanAvailableDot11Networks *, const char*);
SOAP_FMAC3 struct __tds__ScanAvailableDot11Networks * SOAP_FMAC4 soap_in___tds__ScanAvailableDot11Networks(struct soap*, const char*, struct __tds__ScanAvailableDot11Networks *, const char*);
SOAP_FMAC1 struct __tds__ScanAvailableDot11Networks * SOAP_FMAC2 soap_instantiate___tds__ScanAvailableDot11Networks(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__ScanAvailableDot11Networks * soap_new___tds__ScanAvailableDot11Networks(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__ScanAvailableDot11Networks(soap, n, NULL, NULL, NULL);
}

inline struct __tds__ScanAvailableDot11Networks * soap_new_req___tds__ScanAvailableDot11Networks(
	struct soap *soap)
{
	struct __tds__ScanAvailableDot11Networks *_p = soap_new___tds__ScanAvailableDot11Networks(soap);
	if (_p)
	{	soap_default___tds__ScanAvailableDot11Networks(soap, _p);
	}
	return _p;
}

inline struct __tds__ScanAvailableDot11Networks * soap_new_set___tds__ScanAvailableDot11Networks(
	struct soap *soap,
	_tds__ScanAvailableDot11Networks *tds__ScanAvailableDot11Networks)
{
	struct __tds__ScanAvailableDot11Networks *_p = soap_new___tds__ScanAvailableDot11Networks(soap);
	if (_p)
	{	soap_default___tds__ScanAvailableDot11Networks(soap, _p);
		_p->tds__ScanAvailableDot11Networks = tds__ScanAvailableDot11Networks;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__ScanAvailableDot11Networks(struct soap*, const struct __tds__ScanAvailableDot11Networks *, const char*, const char*);

inline int soap_write___tds__ScanAvailableDot11Networks(struct soap *soap, struct __tds__ScanAvailableDot11Networks const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tds__ScanAvailableDot11Networks(soap, p), 0) || soap_put___tds__ScanAvailableDot11Networks(soap, p, "-tds:ScanAvailableDot11Networks", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__ScanAvailableDot11Networks * SOAP_FMAC4 soap_get___tds__ScanAvailableDot11Networks(struct soap*, struct __tds__ScanAvailableDot11Networks *, const char*, const char*);

inline int soap_read___tds__ScanAvailableDot11Networks(struct soap *soap, struct __tds__ScanAvailableDot11Networks *p)
{
	if (p)
	{	soap_default___tds__ScanAvailableDot11Networks(soap, p);
		if (soap_begin_recv(soap) || soap_get___tds__ScanAvailableDot11Networks(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tds__GetDot11Status_DEFINED
#define SOAP_TYPE___tds__GetDot11Status_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__GetDot11Status(struct soap*, struct __tds__GetDot11Status *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__GetDot11Status(struct soap*, const struct __tds__GetDot11Status *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__GetDot11Status(struct soap*, const char*, int, const struct __tds__GetDot11Status *, const char*);
SOAP_FMAC3 struct __tds__GetDot11Status * SOAP_FMAC4 soap_in___tds__GetDot11Status(struct soap*, const char*, struct __tds__GetDot11Status *, const char*);
SOAP_FMAC1 struct __tds__GetDot11Status * SOAP_FMAC2 soap_instantiate___tds__GetDot11Status(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__GetDot11Status * soap_new___tds__GetDot11Status(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__GetDot11Status(soap, n, NULL, NULL, NULL);
}

inline struct __tds__GetDot11Status * soap_new_req___tds__GetDot11Status(
	struct soap *soap)
{
	struct __tds__GetDot11Status *_p = soap_new___tds__GetDot11Status(soap);
	if (_p)
	{	soap_default___tds__GetDot11Status(soap, _p);
	}
	return _p;
}

inline struct __tds__GetDot11Status * soap_new_set___tds__GetDot11Status(
	struct soap *soap,
	_tds__GetDot11Status *tds__GetDot11Status)
{
	struct __tds__GetDot11Status *_p = soap_new___tds__GetDot11Status(soap);
	if (_p)
	{	soap_default___tds__GetDot11Status(soap, _p);
		_p->tds__GetDot11Status = tds__GetDot11Status;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__GetDot11Status(struct soap*, const struct __tds__GetDot11Status *, const char*, const char*);

inline int soap_write___tds__GetDot11Status(struct soap *soap, struct __tds__GetDot11Status const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tds__GetDot11Status(soap, p), 0) || soap_put___tds__GetDot11Status(soap, p, "-tds:GetDot11Status", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__GetDot11Status * SOAP_FMAC4 soap_get___tds__GetDot11Status(struct soap*, struct __tds__GetDot11Status *, const char*, const char*);

inline int soap_read___tds__GetDot11Status(struct soap *soap, struct __tds__GetDot11Status *p)
{
	if (p)
	{	soap_default___tds__GetDot11Status(soap, p);
		if (soap_begin_recv(soap) || soap_get___tds__GetDot11Status(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tds__GetDot11Capabilities_DEFINED
#define SOAP_TYPE___tds__GetDot11Capabilities_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__GetDot11Capabilities(struct soap*, struct __tds__GetDot11Capabilities *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__GetDot11Capabilities(struct soap*, const struct __tds__GetDot11Capabilities *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__GetDot11Capabilities(struct soap*, const char*, int, const struct __tds__GetDot11Capabilities *, const char*);
SOAP_FMAC3 struct __tds__GetDot11Capabilities * SOAP_FMAC4 soap_in___tds__GetDot11Capabilities(struct soap*, const char*, struct __tds__GetDot11Capabilities *, const char*);
SOAP_FMAC1 struct __tds__GetDot11Capabilities * SOAP_FMAC2 soap_instantiate___tds__GetDot11Capabilities(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__GetDot11Capabilities * soap_new___tds__GetDot11Capabilities(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__GetDot11Capabilities(soap, n, NULL, NULL, NULL);
}

inline struct __tds__GetDot11Capabilities * soap_new_req___tds__GetDot11Capabilities(
	struct soap *soap)
{
	struct __tds__GetDot11Capabilities *_p = soap_new___tds__GetDot11Capabilities(soap);
	if (_p)
	{	soap_default___tds__GetDot11Capabilities(soap, _p);
	}
	return _p;
}

inline struct __tds__GetDot11Capabilities * soap_new_set___tds__GetDot11Capabilities(
	struct soap *soap,
	_tds__GetDot11Capabilities *tds__GetDot11Capabilities)
{
	struct __tds__GetDot11Capabilities *_p = soap_new___tds__GetDot11Capabilities(soap);
	if (_p)
	{	soap_default___tds__GetDot11Capabilities(soap, _p);
		_p->tds__GetDot11Capabilities = tds__GetDot11Capabilities;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__GetDot11Capabilities(struct soap*, const struct __tds__GetDot11Capabilities *, const char*, const char*);

inline int soap_write___tds__GetDot11Capabilities(struct soap *soap, struct __tds__GetDot11Capabilities const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tds__GetDot11Capabilities(soap, p), 0) || soap_put___tds__GetDot11Capabilities(soap, p, "-tds:GetDot11Capabilities", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__GetDot11Capabilities * SOAP_FMAC4 soap_get___tds__GetDot11Capabilities(struct soap*, struct __tds__GetDot11Capabilities *, const char*, const char*);

inline int soap_read___tds__GetDot11Capabilities(struct soap *soap, struct __tds__GetDot11Capabilities *p)
{
	if (p)
	{	soap_default___tds__GetDot11Capabilities(soap, p);
		if (soap_begin_recv(soap) || soap_get___tds__GetDot11Capabilities(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tds__DeleteDot1XConfiguration_DEFINED
#define SOAP_TYPE___tds__DeleteDot1XConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__DeleteDot1XConfiguration(struct soap*, struct __tds__DeleteDot1XConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__DeleteDot1XConfiguration(struct soap*, const struct __tds__DeleteDot1XConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__DeleteDot1XConfiguration(struct soap*, const char*, int, const struct __tds__DeleteDot1XConfiguration *, const char*);
SOAP_FMAC3 struct __tds__DeleteDot1XConfiguration * SOAP_FMAC4 soap_in___tds__DeleteDot1XConfiguration(struct soap*, const char*, struct __tds__DeleteDot1XConfiguration *, const char*);
SOAP_FMAC1 struct __tds__DeleteDot1XConfiguration * SOAP_FMAC2 soap_instantiate___tds__DeleteDot1XConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__DeleteDot1XConfiguration * soap_new___tds__DeleteDot1XConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__DeleteDot1XConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __tds__DeleteDot1XConfiguration * soap_new_req___tds__DeleteDot1XConfiguration(
	struct soap *soap)
{
	struct __tds__DeleteDot1XConfiguration *_p = soap_new___tds__DeleteDot1XConfiguration(soap);
	if (_p)
	{	soap_default___tds__DeleteDot1XConfiguration(soap, _p);
	}
	return _p;
}

inline struct __tds__DeleteDot1XConfiguration * soap_new_set___tds__DeleteDot1XConfiguration(
	struct soap *soap,
	_tds__DeleteDot1XConfiguration *tds__DeleteDot1XConfiguration)
{
	struct __tds__DeleteDot1XConfiguration *_p = soap_new___tds__DeleteDot1XConfiguration(soap);
	if (_p)
	{	soap_default___tds__DeleteDot1XConfiguration(soap, _p);
		_p->tds__DeleteDot1XConfiguration = tds__DeleteDot1XConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__DeleteDot1XConfiguration(struct soap*, const struct __tds__DeleteDot1XConfiguration *, const char*, const char*);

inline int soap_write___tds__DeleteDot1XConfiguration(struct soap *soap, struct __tds__DeleteDot1XConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tds__DeleteDot1XConfiguration(soap, p), 0) || soap_put___tds__DeleteDot1XConfiguration(soap, p, "-tds:DeleteDot1XConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__DeleteDot1XConfiguration * SOAP_FMAC4 soap_get___tds__DeleteDot1XConfiguration(struct soap*, struct __tds__DeleteDot1XConfiguration *, const char*, const char*);

inline int soap_read___tds__DeleteDot1XConfiguration(struct soap *soap, struct __tds__DeleteDot1XConfiguration *p)
{
	if (p)
	{	soap_default___tds__DeleteDot1XConfiguration(soap, p);
		if (soap_begin_recv(soap) || soap_get___tds__DeleteDot1XConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tds__GetDot1XConfigurations_DEFINED
#define SOAP_TYPE___tds__GetDot1XConfigurations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__GetDot1XConfigurations(struct soap*, struct __tds__GetDot1XConfigurations *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__GetDot1XConfigurations(struct soap*, const struct __tds__GetDot1XConfigurations *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__GetDot1XConfigurations(struct soap*, const char*, int, const struct __tds__GetDot1XConfigurations *, const char*);
SOAP_FMAC3 struct __tds__GetDot1XConfigurations * SOAP_FMAC4 soap_in___tds__GetDot1XConfigurations(struct soap*, const char*, struct __tds__GetDot1XConfigurations *, const char*);
SOAP_FMAC1 struct __tds__GetDot1XConfigurations * SOAP_FMAC2 soap_instantiate___tds__GetDot1XConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__GetDot1XConfigurations * soap_new___tds__GetDot1XConfigurations(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__GetDot1XConfigurations(soap, n, NULL, NULL, NULL);
}

inline struct __tds__GetDot1XConfigurations * soap_new_req___tds__GetDot1XConfigurations(
	struct soap *soap)
{
	struct __tds__GetDot1XConfigurations *_p = soap_new___tds__GetDot1XConfigurations(soap);
	if (_p)
	{	soap_default___tds__GetDot1XConfigurations(soap, _p);
	}
	return _p;
}

inline struct __tds__GetDot1XConfigurations * soap_new_set___tds__GetDot1XConfigurations(
	struct soap *soap,
	_tds__GetDot1XConfigurations *tds__GetDot1XConfigurations)
{
	struct __tds__GetDot1XConfigurations *_p = soap_new___tds__GetDot1XConfigurations(soap);
	if (_p)
	{	soap_default___tds__GetDot1XConfigurations(soap, _p);
		_p->tds__GetDot1XConfigurations = tds__GetDot1XConfigurations;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__GetDot1XConfigurations(struct soap*, const struct __tds__GetDot1XConfigurations *, const char*, const char*);

inline int soap_write___tds__GetDot1XConfigurations(struct soap *soap, struct __tds__GetDot1XConfigurations const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tds__GetDot1XConfigurations(soap, p), 0) || soap_put___tds__GetDot1XConfigurations(soap, p, "-tds:GetDot1XConfigurations", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__GetDot1XConfigurations * SOAP_FMAC4 soap_get___tds__GetDot1XConfigurations(struct soap*, struct __tds__GetDot1XConfigurations *, const char*, const char*);

inline int soap_read___tds__GetDot1XConfigurations(struct soap *soap, struct __tds__GetDot1XConfigurations *p)
{
	if (p)
	{	soap_default___tds__GetDot1XConfigurations(soap, p);
		if (soap_begin_recv(soap) || soap_get___tds__GetDot1XConfigurations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tds__GetDot1XConfiguration_DEFINED
#define SOAP_TYPE___tds__GetDot1XConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__GetDot1XConfiguration(struct soap*, struct __tds__GetDot1XConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__GetDot1XConfiguration(struct soap*, const struct __tds__GetDot1XConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__GetDot1XConfiguration(struct soap*, const char*, int, const struct __tds__GetDot1XConfiguration *, const char*);
SOAP_FMAC3 struct __tds__GetDot1XConfiguration * SOAP_FMAC4 soap_in___tds__GetDot1XConfiguration(struct soap*, const char*, struct __tds__GetDot1XConfiguration *, const char*);
SOAP_FMAC1 struct __tds__GetDot1XConfiguration * SOAP_FMAC2 soap_instantiate___tds__GetDot1XConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__GetDot1XConfiguration * soap_new___tds__GetDot1XConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__GetDot1XConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __tds__GetDot1XConfiguration * soap_new_req___tds__GetDot1XConfiguration(
	struct soap *soap)
{
	struct __tds__GetDot1XConfiguration *_p = soap_new___tds__GetDot1XConfiguration(soap);
	if (_p)
	{	soap_default___tds__GetDot1XConfiguration(soap, _p);
	}
	return _p;
}

inline struct __tds__GetDot1XConfiguration * soap_new_set___tds__GetDot1XConfiguration(
	struct soap *soap,
	_tds__GetDot1XConfiguration *tds__GetDot1XConfiguration)
{
	struct __tds__GetDot1XConfiguration *_p = soap_new___tds__GetDot1XConfiguration(soap);
	if (_p)
	{	soap_default___tds__GetDot1XConfiguration(soap, _p);
		_p->tds__GetDot1XConfiguration = tds__GetDot1XConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__GetDot1XConfiguration(struct soap*, const struct __tds__GetDot1XConfiguration *, const char*, const char*);

inline int soap_write___tds__GetDot1XConfiguration(struct soap *soap, struct __tds__GetDot1XConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tds__GetDot1XConfiguration(soap, p), 0) || soap_put___tds__GetDot1XConfiguration(soap, p, "-tds:GetDot1XConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__GetDot1XConfiguration * SOAP_FMAC4 soap_get___tds__GetDot1XConfiguration(struct soap*, struct __tds__GetDot1XConfiguration *, const char*, const char*);

inline int soap_read___tds__GetDot1XConfiguration(struct soap *soap, struct __tds__GetDot1XConfiguration *p)
{
	if (p)
	{	soap_default___tds__GetDot1XConfiguration(soap, p);
		if (soap_begin_recv(soap) || soap_get___tds__GetDot1XConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tds__SetDot1XConfiguration_DEFINED
#define SOAP_TYPE___tds__SetDot1XConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__SetDot1XConfiguration(struct soap*, struct __tds__SetDot1XConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__SetDot1XConfiguration(struct soap*, const struct __tds__SetDot1XConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__SetDot1XConfiguration(struct soap*, const char*, int, const struct __tds__SetDot1XConfiguration *, const char*);
SOAP_FMAC3 struct __tds__SetDot1XConfiguration * SOAP_FMAC4 soap_in___tds__SetDot1XConfiguration(struct soap*, const char*, struct __tds__SetDot1XConfiguration *, const char*);
SOAP_FMAC1 struct __tds__SetDot1XConfiguration * SOAP_FMAC2 soap_instantiate___tds__SetDot1XConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__SetDot1XConfiguration * soap_new___tds__SetDot1XConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__SetDot1XConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __tds__SetDot1XConfiguration * soap_new_req___tds__SetDot1XConfiguration(
	struct soap *soap)
{
	struct __tds__SetDot1XConfiguration *_p = soap_new___tds__SetDot1XConfiguration(soap);
	if (_p)
	{	soap_default___tds__SetDot1XConfiguration(soap, _p);
	}
	return _p;
}

inline struct __tds__SetDot1XConfiguration * soap_new_set___tds__SetDot1XConfiguration(
	struct soap *soap,
	_tds__SetDot1XConfiguration *tds__SetDot1XConfiguration)
{
	struct __tds__SetDot1XConfiguration *_p = soap_new___tds__SetDot1XConfiguration(soap);
	if (_p)
	{	soap_default___tds__SetDot1XConfiguration(soap, _p);
		_p->tds__SetDot1XConfiguration = tds__SetDot1XConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__SetDot1XConfiguration(struct soap*, const struct __tds__SetDot1XConfiguration *, const char*, const char*);

inline int soap_write___tds__SetDot1XConfiguration(struct soap *soap, struct __tds__SetDot1XConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tds__SetDot1XConfiguration(soap, p), 0) || soap_put___tds__SetDot1XConfiguration(soap, p, "-tds:SetDot1XConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__SetDot1XConfiguration * SOAP_FMAC4 soap_get___tds__SetDot1XConfiguration(struct soap*, struct __tds__SetDot1XConfiguration *, const char*, const char*);

inline int soap_read___tds__SetDot1XConfiguration(struct soap *soap, struct __tds__SetDot1XConfiguration *p)
{
	if (p)
	{	soap_default___tds__SetDot1XConfiguration(soap, p);
		if (soap_begin_recv(soap) || soap_get___tds__SetDot1XConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tds__CreateDot1XConfiguration_DEFINED
#define SOAP_TYPE___tds__CreateDot1XConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__CreateDot1XConfiguration(struct soap*, struct __tds__CreateDot1XConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__CreateDot1XConfiguration(struct soap*, const struct __tds__CreateDot1XConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__CreateDot1XConfiguration(struct soap*, const char*, int, const struct __tds__CreateDot1XConfiguration *, const char*);
SOAP_FMAC3 struct __tds__CreateDot1XConfiguration * SOAP_FMAC4 soap_in___tds__CreateDot1XConfiguration(struct soap*, const char*, struct __tds__CreateDot1XConfiguration *, const char*);
SOAP_FMAC1 struct __tds__CreateDot1XConfiguration * SOAP_FMAC2 soap_instantiate___tds__CreateDot1XConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__CreateDot1XConfiguration * soap_new___tds__CreateDot1XConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__CreateDot1XConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __tds__CreateDot1XConfiguration * soap_new_req___tds__CreateDot1XConfiguration(
	struct soap *soap)
{
	struct __tds__CreateDot1XConfiguration *_p = soap_new___tds__CreateDot1XConfiguration(soap);
	if (_p)
	{	soap_default___tds__CreateDot1XConfiguration(soap, _p);
	}
	return _p;
}

inline struct __tds__CreateDot1XConfiguration * soap_new_set___tds__CreateDot1XConfiguration(
	struct soap *soap,
	_tds__CreateDot1XConfiguration *tds__CreateDot1XConfiguration)
{
	struct __tds__CreateDot1XConfiguration *_p = soap_new___tds__CreateDot1XConfiguration(soap);
	if (_p)
	{	soap_default___tds__CreateDot1XConfiguration(soap, _p);
		_p->tds__CreateDot1XConfiguration = tds__CreateDot1XConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__CreateDot1XConfiguration(struct soap*, const struct __tds__CreateDot1XConfiguration *, const char*, const char*);

inline int soap_write___tds__CreateDot1XConfiguration(struct soap *soap, struct __tds__CreateDot1XConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tds__CreateDot1XConfiguration(soap, p), 0) || soap_put___tds__CreateDot1XConfiguration(soap, p, "-tds:CreateDot1XConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__CreateDot1XConfiguration * SOAP_FMAC4 soap_get___tds__CreateDot1XConfiguration(struct soap*, struct __tds__CreateDot1XConfiguration *, const char*, const char*);

inline int soap_read___tds__CreateDot1XConfiguration(struct soap *soap, struct __tds__CreateDot1XConfiguration *p)
{
	if (p)
	{	soap_default___tds__CreateDot1XConfiguration(soap, p);
		if (soap_begin_recv(soap) || soap_get___tds__CreateDot1XConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tds__LoadCACertificates_DEFINED
#define SOAP_TYPE___tds__LoadCACertificates_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__LoadCACertificates(struct soap*, struct __tds__LoadCACertificates *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__LoadCACertificates(struct soap*, const struct __tds__LoadCACertificates *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__LoadCACertificates(struct soap*, const char*, int, const struct __tds__LoadCACertificates *, const char*);
SOAP_FMAC3 struct __tds__LoadCACertificates * SOAP_FMAC4 soap_in___tds__LoadCACertificates(struct soap*, const char*, struct __tds__LoadCACertificates *, const char*);
SOAP_FMAC1 struct __tds__LoadCACertificates * SOAP_FMAC2 soap_instantiate___tds__LoadCACertificates(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__LoadCACertificates * soap_new___tds__LoadCACertificates(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__LoadCACertificates(soap, n, NULL, NULL, NULL);
}

inline struct __tds__LoadCACertificates * soap_new_req___tds__LoadCACertificates(
	struct soap *soap)
{
	struct __tds__LoadCACertificates *_p = soap_new___tds__LoadCACertificates(soap);
	if (_p)
	{	soap_default___tds__LoadCACertificates(soap, _p);
	}
	return _p;
}

inline struct __tds__LoadCACertificates * soap_new_set___tds__LoadCACertificates(
	struct soap *soap,
	_tds__LoadCACertificates *tds__LoadCACertificates)
{
	struct __tds__LoadCACertificates *_p = soap_new___tds__LoadCACertificates(soap);
	if (_p)
	{	soap_default___tds__LoadCACertificates(soap, _p);
		_p->tds__LoadCACertificates = tds__LoadCACertificates;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__LoadCACertificates(struct soap*, const struct __tds__LoadCACertificates *, const char*, const char*);

inline int soap_write___tds__LoadCACertificates(struct soap *soap, struct __tds__LoadCACertificates const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tds__LoadCACertificates(soap, p), 0) || soap_put___tds__LoadCACertificates(soap, p, "-tds:LoadCACertificates", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__LoadCACertificates * SOAP_FMAC4 soap_get___tds__LoadCACertificates(struct soap*, struct __tds__LoadCACertificates *, const char*, const char*);

inline int soap_read___tds__LoadCACertificates(struct soap *soap, struct __tds__LoadCACertificates *p)
{
	if (p)
	{	soap_default___tds__LoadCACertificates(soap, p);
		if (soap_begin_recv(soap) || soap_get___tds__LoadCACertificates(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tds__GetCertificateInformation_DEFINED
#define SOAP_TYPE___tds__GetCertificateInformation_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__GetCertificateInformation(struct soap*, struct __tds__GetCertificateInformation *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__GetCertificateInformation(struct soap*, const struct __tds__GetCertificateInformation *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__GetCertificateInformation(struct soap*, const char*, int, const struct __tds__GetCertificateInformation *, const char*);
SOAP_FMAC3 struct __tds__GetCertificateInformation * SOAP_FMAC4 soap_in___tds__GetCertificateInformation(struct soap*, const char*, struct __tds__GetCertificateInformation *, const char*);
SOAP_FMAC1 struct __tds__GetCertificateInformation * SOAP_FMAC2 soap_instantiate___tds__GetCertificateInformation(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__GetCertificateInformation * soap_new___tds__GetCertificateInformation(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__GetCertificateInformation(soap, n, NULL, NULL, NULL);
}

inline struct __tds__GetCertificateInformation * soap_new_req___tds__GetCertificateInformation(
	struct soap *soap)
{
	struct __tds__GetCertificateInformation *_p = soap_new___tds__GetCertificateInformation(soap);
	if (_p)
	{	soap_default___tds__GetCertificateInformation(soap, _p);
	}
	return _p;
}

inline struct __tds__GetCertificateInformation * soap_new_set___tds__GetCertificateInformation(
	struct soap *soap,
	_tds__GetCertificateInformation *tds__GetCertificateInformation)
{
	struct __tds__GetCertificateInformation *_p = soap_new___tds__GetCertificateInformation(soap);
	if (_p)
	{	soap_default___tds__GetCertificateInformation(soap, _p);
		_p->tds__GetCertificateInformation = tds__GetCertificateInformation;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__GetCertificateInformation(struct soap*, const struct __tds__GetCertificateInformation *, const char*, const char*);

inline int soap_write___tds__GetCertificateInformation(struct soap *soap, struct __tds__GetCertificateInformation const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tds__GetCertificateInformation(soap, p), 0) || soap_put___tds__GetCertificateInformation(soap, p, "-tds:GetCertificateInformation", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__GetCertificateInformation * SOAP_FMAC4 soap_get___tds__GetCertificateInformation(struct soap*, struct __tds__GetCertificateInformation *, const char*, const char*);

inline int soap_read___tds__GetCertificateInformation(struct soap *soap, struct __tds__GetCertificateInformation *p)
{
	if (p)
	{	soap_default___tds__GetCertificateInformation(soap, p);
		if (soap_begin_recv(soap) || soap_get___tds__GetCertificateInformation(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tds__LoadCertificateWithPrivateKey_DEFINED
#define SOAP_TYPE___tds__LoadCertificateWithPrivateKey_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__LoadCertificateWithPrivateKey(struct soap*, struct __tds__LoadCertificateWithPrivateKey *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__LoadCertificateWithPrivateKey(struct soap*, const struct __tds__LoadCertificateWithPrivateKey *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__LoadCertificateWithPrivateKey(struct soap*, const char*, int, const struct __tds__LoadCertificateWithPrivateKey *, const char*);
SOAP_FMAC3 struct __tds__LoadCertificateWithPrivateKey * SOAP_FMAC4 soap_in___tds__LoadCertificateWithPrivateKey(struct soap*, const char*, struct __tds__LoadCertificateWithPrivateKey *, const char*);
SOAP_FMAC1 struct __tds__LoadCertificateWithPrivateKey * SOAP_FMAC2 soap_instantiate___tds__LoadCertificateWithPrivateKey(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__LoadCertificateWithPrivateKey * soap_new___tds__LoadCertificateWithPrivateKey(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__LoadCertificateWithPrivateKey(soap, n, NULL, NULL, NULL);
}

inline struct __tds__LoadCertificateWithPrivateKey * soap_new_req___tds__LoadCertificateWithPrivateKey(
	struct soap *soap)
{
	struct __tds__LoadCertificateWithPrivateKey *_p = soap_new___tds__LoadCertificateWithPrivateKey(soap);
	if (_p)
	{	soap_default___tds__LoadCertificateWithPrivateKey(soap, _p);
	}
	return _p;
}

inline struct __tds__LoadCertificateWithPrivateKey * soap_new_set___tds__LoadCertificateWithPrivateKey(
	struct soap *soap,
	_tds__LoadCertificateWithPrivateKey *tds__LoadCertificateWithPrivateKey)
{
	struct __tds__LoadCertificateWithPrivateKey *_p = soap_new___tds__LoadCertificateWithPrivateKey(soap);
	if (_p)
	{	soap_default___tds__LoadCertificateWithPrivateKey(soap, _p);
		_p->tds__LoadCertificateWithPrivateKey = tds__LoadCertificateWithPrivateKey;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__LoadCertificateWithPrivateKey(struct soap*, const struct __tds__LoadCertificateWithPrivateKey *, const char*, const char*);

inline int soap_write___tds__LoadCertificateWithPrivateKey(struct soap *soap, struct __tds__LoadCertificateWithPrivateKey const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tds__LoadCertificateWithPrivateKey(soap, p), 0) || soap_put___tds__LoadCertificateWithPrivateKey(soap, p, "-tds:LoadCertificateWithPrivateKey", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__LoadCertificateWithPrivateKey * SOAP_FMAC4 soap_get___tds__LoadCertificateWithPrivateKey(struct soap*, struct __tds__LoadCertificateWithPrivateKey *, const char*, const char*);

inline int soap_read___tds__LoadCertificateWithPrivateKey(struct soap *soap, struct __tds__LoadCertificateWithPrivateKey *p)
{
	if (p)
	{	soap_default___tds__LoadCertificateWithPrivateKey(soap, p);
		if (soap_begin_recv(soap) || soap_get___tds__LoadCertificateWithPrivateKey(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tds__GetCACertificates_DEFINED
#define SOAP_TYPE___tds__GetCACertificates_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__GetCACertificates(struct soap*, struct __tds__GetCACertificates *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__GetCACertificates(struct soap*, const struct __tds__GetCACertificates *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__GetCACertificates(struct soap*, const char*, int, const struct __tds__GetCACertificates *, const char*);
SOAP_FMAC3 struct __tds__GetCACertificates * SOAP_FMAC4 soap_in___tds__GetCACertificates(struct soap*, const char*, struct __tds__GetCACertificates *, const char*);
SOAP_FMAC1 struct __tds__GetCACertificates * SOAP_FMAC2 soap_instantiate___tds__GetCACertificates(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__GetCACertificates * soap_new___tds__GetCACertificates(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__GetCACertificates(soap, n, NULL, NULL, NULL);
}

inline struct __tds__GetCACertificates * soap_new_req___tds__GetCACertificates(
	struct soap *soap)
{
	struct __tds__GetCACertificates *_p = soap_new___tds__GetCACertificates(soap);
	if (_p)
	{	soap_default___tds__GetCACertificates(soap, _p);
	}
	return _p;
}

inline struct __tds__GetCACertificates * soap_new_set___tds__GetCACertificates(
	struct soap *soap,
	_tds__GetCACertificates *tds__GetCACertificates)
{
	struct __tds__GetCACertificates *_p = soap_new___tds__GetCACertificates(soap);
	if (_p)
	{	soap_default___tds__GetCACertificates(soap, _p);
		_p->tds__GetCACertificates = tds__GetCACertificates;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__GetCACertificates(struct soap*, const struct __tds__GetCACertificates *, const char*, const char*);

inline int soap_write___tds__GetCACertificates(struct soap *soap, struct __tds__GetCACertificates const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tds__GetCACertificates(soap, p), 0) || soap_put___tds__GetCACertificates(soap, p, "-tds:GetCACertificates", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__GetCACertificates * SOAP_FMAC4 soap_get___tds__GetCACertificates(struct soap*, struct __tds__GetCACertificates *, const char*, const char*);

inline int soap_read___tds__GetCACertificates(struct soap *soap, struct __tds__GetCACertificates *p)
{
	if (p)
	{	soap_default___tds__GetCACertificates(soap, p);
		if (soap_begin_recv(soap) || soap_get___tds__GetCACertificates(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tds__SendAuxiliaryCommand_DEFINED
#define SOAP_TYPE___tds__SendAuxiliaryCommand_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__SendAuxiliaryCommand(struct soap*, struct __tds__SendAuxiliaryCommand *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__SendAuxiliaryCommand(struct soap*, const struct __tds__SendAuxiliaryCommand *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__SendAuxiliaryCommand(struct soap*, const char*, int, const struct __tds__SendAuxiliaryCommand *, const char*);
SOAP_FMAC3 struct __tds__SendAuxiliaryCommand * SOAP_FMAC4 soap_in___tds__SendAuxiliaryCommand(struct soap*, const char*, struct __tds__SendAuxiliaryCommand *, const char*);
SOAP_FMAC1 struct __tds__SendAuxiliaryCommand * SOAP_FMAC2 soap_instantiate___tds__SendAuxiliaryCommand(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__SendAuxiliaryCommand * soap_new___tds__SendAuxiliaryCommand(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__SendAuxiliaryCommand(soap, n, NULL, NULL, NULL);
}

inline struct __tds__SendAuxiliaryCommand * soap_new_req___tds__SendAuxiliaryCommand(
	struct soap *soap)
{
	struct __tds__SendAuxiliaryCommand *_p = soap_new___tds__SendAuxiliaryCommand(soap);
	if (_p)
	{	soap_default___tds__SendAuxiliaryCommand(soap, _p);
	}
	return _p;
}

inline struct __tds__SendAuxiliaryCommand * soap_new_set___tds__SendAuxiliaryCommand(
	struct soap *soap,
	_tds__SendAuxiliaryCommand *tds__SendAuxiliaryCommand)
{
	struct __tds__SendAuxiliaryCommand *_p = soap_new___tds__SendAuxiliaryCommand(soap);
	if (_p)
	{	soap_default___tds__SendAuxiliaryCommand(soap, _p);
		_p->tds__SendAuxiliaryCommand = tds__SendAuxiliaryCommand;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__SendAuxiliaryCommand(struct soap*, const struct __tds__SendAuxiliaryCommand *, const char*, const char*);

inline int soap_write___tds__SendAuxiliaryCommand(struct soap *soap, struct __tds__SendAuxiliaryCommand const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tds__SendAuxiliaryCommand(soap, p), 0) || soap_put___tds__SendAuxiliaryCommand(soap, p, "-tds:SendAuxiliaryCommand", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__SendAuxiliaryCommand * SOAP_FMAC4 soap_get___tds__SendAuxiliaryCommand(struct soap*, struct __tds__SendAuxiliaryCommand *, const char*, const char*);

inline int soap_read___tds__SendAuxiliaryCommand(struct soap *soap, struct __tds__SendAuxiliaryCommand *p)
{
	if (p)
	{	soap_default___tds__SendAuxiliaryCommand(soap, p);
		if (soap_begin_recv(soap) || soap_get___tds__SendAuxiliaryCommand(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tds__SetRelayOutputState_DEFINED
#define SOAP_TYPE___tds__SetRelayOutputState_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__SetRelayOutputState(struct soap*, struct __tds__SetRelayOutputState *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__SetRelayOutputState(struct soap*, const struct __tds__SetRelayOutputState *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__SetRelayOutputState(struct soap*, const char*, int, const struct __tds__SetRelayOutputState *, const char*);
SOAP_FMAC3 struct __tds__SetRelayOutputState * SOAP_FMAC4 soap_in___tds__SetRelayOutputState(struct soap*, const char*, struct __tds__SetRelayOutputState *, const char*);
SOAP_FMAC1 struct __tds__SetRelayOutputState * SOAP_FMAC2 soap_instantiate___tds__SetRelayOutputState(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__SetRelayOutputState * soap_new___tds__SetRelayOutputState(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__SetRelayOutputState(soap, n, NULL, NULL, NULL);
}

inline struct __tds__SetRelayOutputState * soap_new_req___tds__SetRelayOutputState(
	struct soap *soap)
{
	struct __tds__SetRelayOutputState *_p = soap_new___tds__SetRelayOutputState(soap);
	if (_p)
	{	soap_default___tds__SetRelayOutputState(soap, _p);
	}
	return _p;
}

inline struct __tds__SetRelayOutputState * soap_new_set___tds__SetRelayOutputState(
	struct soap *soap,
	_tds__SetRelayOutputState *tds__SetRelayOutputState)
{
	struct __tds__SetRelayOutputState *_p = soap_new___tds__SetRelayOutputState(soap);
	if (_p)
	{	soap_default___tds__SetRelayOutputState(soap, _p);
		_p->tds__SetRelayOutputState = tds__SetRelayOutputState;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__SetRelayOutputState(struct soap*, const struct __tds__SetRelayOutputState *, const char*, const char*);

inline int soap_write___tds__SetRelayOutputState(struct soap *soap, struct __tds__SetRelayOutputState const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tds__SetRelayOutputState(soap, p), 0) || soap_put___tds__SetRelayOutputState(soap, p, "-tds:SetRelayOutputState", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__SetRelayOutputState * SOAP_FMAC4 soap_get___tds__SetRelayOutputState(struct soap*, struct __tds__SetRelayOutputState *, const char*, const char*);

inline int soap_read___tds__SetRelayOutputState(struct soap *soap, struct __tds__SetRelayOutputState *p)
{
	if (p)
	{	soap_default___tds__SetRelayOutputState(soap, p);
		if (soap_begin_recv(soap) || soap_get___tds__SetRelayOutputState(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tds__SetRelayOutputSettings_DEFINED
#define SOAP_TYPE___tds__SetRelayOutputSettings_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__SetRelayOutputSettings(struct soap*, struct __tds__SetRelayOutputSettings *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__SetRelayOutputSettings(struct soap*, const struct __tds__SetRelayOutputSettings *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__SetRelayOutputSettings(struct soap*, const char*, int, const struct __tds__SetRelayOutputSettings *, const char*);
SOAP_FMAC3 struct __tds__SetRelayOutputSettings * SOAP_FMAC4 soap_in___tds__SetRelayOutputSettings(struct soap*, const char*, struct __tds__SetRelayOutputSettings *, const char*);
SOAP_FMAC1 struct __tds__SetRelayOutputSettings * SOAP_FMAC2 soap_instantiate___tds__SetRelayOutputSettings(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__SetRelayOutputSettings * soap_new___tds__SetRelayOutputSettings(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__SetRelayOutputSettings(soap, n, NULL, NULL, NULL);
}

inline struct __tds__SetRelayOutputSettings * soap_new_req___tds__SetRelayOutputSettings(
	struct soap *soap)
{
	struct __tds__SetRelayOutputSettings *_p = soap_new___tds__SetRelayOutputSettings(soap);
	if (_p)
	{	soap_default___tds__SetRelayOutputSettings(soap, _p);
	}
	return _p;
}

inline struct __tds__SetRelayOutputSettings * soap_new_set___tds__SetRelayOutputSettings(
	struct soap *soap,
	_tds__SetRelayOutputSettings *tds__SetRelayOutputSettings)
{
	struct __tds__SetRelayOutputSettings *_p = soap_new___tds__SetRelayOutputSettings(soap);
	if (_p)
	{	soap_default___tds__SetRelayOutputSettings(soap, _p);
		_p->tds__SetRelayOutputSettings = tds__SetRelayOutputSettings;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__SetRelayOutputSettings(struct soap*, const struct __tds__SetRelayOutputSettings *, const char*, const char*);

inline int soap_write___tds__SetRelayOutputSettings(struct soap *soap, struct __tds__SetRelayOutputSettings const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tds__SetRelayOutputSettings(soap, p), 0) || soap_put___tds__SetRelayOutputSettings(soap, p, "-tds:SetRelayOutputSettings", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__SetRelayOutputSettings * SOAP_FMAC4 soap_get___tds__SetRelayOutputSettings(struct soap*, struct __tds__SetRelayOutputSettings *, const char*, const char*);

inline int soap_read___tds__SetRelayOutputSettings(struct soap *soap, struct __tds__SetRelayOutputSettings *p)
{
	if (p)
	{	soap_default___tds__SetRelayOutputSettings(soap, p);
		if (soap_begin_recv(soap) || soap_get___tds__SetRelayOutputSettings(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tds__GetRelayOutputs_DEFINED
#define SOAP_TYPE___tds__GetRelayOutputs_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__GetRelayOutputs(struct soap*, struct __tds__GetRelayOutputs *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__GetRelayOutputs(struct soap*, const struct __tds__GetRelayOutputs *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__GetRelayOutputs(struct soap*, const char*, int, const struct __tds__GetRelayOutputs *, const char*);
SOAP_FMAC3 struct __tds__GetRelayOutputs * SOAP_FMAC4 soap_in___tds__GetRelayOutputs(struct soap*, const char*, struct __tds__GetRelayOutputs *, const char*);
SOAP_FMAC1 struct __tds__GetRelayOutputs * SOAP_FMAC2 soap_instantiate___tds__GetRelayOutputs(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__GetRelayOutputs * soap_new___tds__GetRelayOutputs(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__GetRelayOutputs(soap, n, NULL, NULL, NULL);
}

inline struct __tds__GetRelayOutputs * soap_new_req___tds__GetRelayOutputs(
	struct soap *soap)
{
	struct __tds__GetRelayOutputs *_p = soap_new___tds__GetRelayOutputs(soap);
	if (_p)
	{	soap_default___tds__GetRelayOutputs(soap, _p);
	}
	return _p;
}

inline struct __tds__GetRelayOutputs * soap_new_set___tds__GetRelayOutputs(
	struct soap *soap,
	_tds__GetRelayOutputs *tds__GetRelayOutputs)
{
	struct __tds__GetRelayOutputs *_p = soap_new___tds__GetRelayOutputs(soap);
	if (_p)
	{	soap_default___tds__GetRelayOutputs(soap, _p);
		_p->tds__GetRelayOutputs = tds__GetRelayOutputs;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__GetRelayOutputs(struct soap*, const struct __tds__GetRelayOutputs *, const char*, const char*);

inline int soap_write___tds__GetRelayOutputs(struct soap *soap, struct __tds__GetRelayOutputs const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tds__GetRelayOutputs(soap, p), 0) || soap_put___tds__GetRelayOutputs(soap, p, "-tds:GetRelayOutputs", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__GetRelayOutputs * SOAP_FMAC4 soap_get___tds__GetRelayOutputs(struct soap*, struct __tds__GetRelayOutputs *, const char*, const char*);

inline int soap_read___tds__GetRelayOutputs(struct soap *soap, struct __tds__GetRelayOutputs *p)
{
	if (p)
	{	soap_default___tds__GetRelayOutputs(soap, p);
		if (soap_begin_recv(soap) || soap_get___tds__GetRelayOutputs(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tds__SetClientCertificateMode_DEFINED
#define SOAP_TYPE___tds__SetClientCertificateMode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__SetClientCertificateMode(struct soap*, struct __tds__SetClientCertificateMode *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__SetClientCertificateMode(struct soap*, const struct __tds__SetClientCertificateMode *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__SetClientCertificateMode(struct soap*, const char*, int, const struct __tds__SetClientCertificateMode *, const char*);
SOAP_FMAC3 struct __tds__SetClientCertificateMode * SOAP_FMAC4 soap_in___tds__SetClientCertificateMode(struct soap*, const char*, struct __tds__SetClientCertificateMode *, const char*);
SOAP_FMAC1 struct __tds__SetClientCertificateMode * SOAP_FMAC2 soap_instantiate___tds__SetClientCertificateMode(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__SetClientCertificateMode * soap_new___tds__SetClientCertificateMode(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__SetClientCertificateMode(soap, n, NULL, NULL, NULL);
}

inline struct __tds__SetClientCertificateMode * soap_new_req___tds__SetClientCertificateMode(
	struct soap *soap)
{
	struct __tds__SetClientCertificateMode *_p = soap_new___tds__SetClientCertificateMode(soap);
	if (_p)
	{	soap_default___tds__SetClientCertificateMode(soap, _p);
	}
	return _p;
}

inline struct __tds__SetClientCertificateMode * soap_new_set___tds__SetClientCertificateMode(
	struct soap *soap,
	_tds__SetClientCertificateMode *tds__SetClientCertificateMode)
{
	struct __tds__SetClientCertificateMode *_p = soap_new___tds__SetClientCertificateMode(soap);
	if (_p)
	{	soap_default___tds__SetClientCertificateMode(soap, _p);
		_p->tds__SetClientCertificateMode = tds__SetClientCertificateMode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__SetClientCertificateMode(struct soap*, const struct __tds__SetClientCertificateMode *, const char*, const char*);

inline int soap_write___tds__SetClientCertificateMode(struct soap *soap, struct __tds__SetClientCertificateMode const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tds__SetClientCertificateMode(soap, p), 0) || soap_put___tds__SetClientCertificateMode(soap, p, "-tds:SetClientCertificateMode", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__SetClientCertificateMode * SOAP_FMAC4 soap_get___tds__SetClientCertificateMode(struct soap*, struct __tds__SetClientCertificateMode *, const char*, const char*);

inline int soap_read___tds__SetClientCertificateMode(struct soap *soap, struct __tds__SetClientCertificateMode *p)
{
	if (p)
	{	soap_default___tds__SetClientCertificateMode(soap, p);
		if (soap_begin_recv(soap) || soap_get___tds__SetClientCertificateMode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tds__GetClientCertificateMode_DEFINED
#define SOAP_TYPE___tds__GetClientCertificateMode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__GetClientCertificateMode(struct soap*, struct __tds__GetClientCertificateMode *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__GetClientCertificateMode(struct soap*, const struct __tds__GetClientCertificateMode *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__GetClientCertificateMode(struct soap*, const char*, int, const struct __tds__GetClientCertificateMode *, const char*);
SOAP_FMAC3 struct __tds__GetClientCertificateMode * SOAP_FMAC4 soap_in___tds__GetClientCertificateMode(struct soap*, const char*, struct __tds__GetClientCertificateMode *, const char*);
SOAP_FMAC1 struct __tds__GetClientCertificateMode * SOAP_FMAC2 soap_instantiate___tds__GetClientCertificateMode(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__GetClientCertificateMode * soap_new___tds__GetClientCertificateMode(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__GetClientCertificateMode(soap, n, NULL, NULL, NULL);
}

inline struct __tds__GetClientCertificateMode * soap_new_req___tds__GetClientCertificateMode(
	struct soap *soap)
{
	struct __tds__GetClientCertificateMode *_p = soap_new___tds__GetClientCertificateMode(soap);
	if (_p)
	{	soap_default___tds__GetClientCertificateMode(soap, _p);
	}
	return _p;
}

inline struct __tds__GetClientCertificateMode * soap_new_set___tds__GetClientCertificateMode(
	struct soap *soap,
	_tds__GetClientCertificateMode *tds__GetClientCertificateMode)
{
	struct __tds__GetClientCertificateMode *_p = soap_new___tds__GetClientCertificateMode(soap);
	if (_p)
	{	soap_default___tds__GetClientCertificateMode(soap, _p);
		_p->tds__GetClientCertificateMode = tds__GetClientCertificateMode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__GetClientCertificateMode(struct soap*, const struct __tds__GetClientCertificateMode *, const char*, const char*);

inline int soap_write___tds__GetClientCertificateMode(struct soap *soap, struct __tds__GetClientCertificateMode const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tds__GetClientCertificateMode(soap, p), 0) || soap_put___tds__GetClientCertificateMode(soap, p, "-tds:GetClientCertificateMode", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__GetClientCertificateMode * SOAP_FMAC4 soap_get___tds__GetClientCertificateMode(struct soap*, struct __tds__GetClientCertificateMode *, const char*, const char*);

inline int soap_read___tds__GetClientCertificateMode(struct soap *soap, struct __tds__GetClientCertificateMode *p)
{
	if (p)
	{	soap_default___tds__GetClientCertificateMode(soap, p);
		if (soap_begin_recv(soap) || soap_get___tds__GetClientCertificateMode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tds__LoadCertificates_DEFINED
#define SOAP_TYPE___tds__LoadCertificates_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__LoadCertificates(struct soap*, struct __tds__LoadCertificates *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__LoadCertificates(struct soap*, const struct __tds__LoadCertificates *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__LoadCertificates(struct soap*, const char*, int, const struct __tds__LoadCertificates *, const char*);
SOAP_FMAC3 struct __tds__LoadCertificates * SOAP_FMAC4 soap_in___tds__LoadCertificates(struct soap*, const char*, struct __tds__LoadCertificates *, const char*);
SOAP_FMAC1 struct __tds__LoadCertificates * SOAP_FMAC2 soap_instantiate___tds__LoadCertificates(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__LoadCertificates * soap_new___tds__LoadCertificates(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__LoadCertificates(soap, n, NULL, NULL, NULL);
}

inline struct __tds__LoadCertificates * soap_new_req___tds__LoadCertificates(
	struct soap *soap)
{
	struct __tds__LoadCertificates *_p = soap_new___tds__LoadCertificates(soap);
	if (_p)
	{	soap_default___tds__LoadCertificates(soap, _p);
	}
	return _p;
}

inline struct __tds__LoadCertificates * soap_new_set___tds__LoadCertificates(
	struct soap *soap,
	_tds__LoadCertificates *tds__LoadCertificates)
{
	struct __tds__LoadCertificates *_p = soap_new___tds__LoadCertificates(soap);
	if (_p)
	{	soap_default___tds__LoadCertificates(soap, _p);
		_p->tds__LoadCertificates = tds__LoadCertificates;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__LoadCertificates(struct soap*, const struct __tds__LoadCertificates *, const char*, const char*);

inline int soap_write___tds__LoadCertificates(struct soap *soap, struct __tds__LoadCertificates const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tds__LoadCertificates(soap, p), 0) || soap_put___tds__LoadCertificates(soap, p, "-tds:LoadCertificates", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__LoadCertificates * SOAP_FMAC4 soap_get___tds__LoadCertificates(struct soap*, struct __tds__LoadCertificates *, const char*, const char*);

inline int soap_read___tds__LoadCertificates(struct soap *soap, struct __tds__LoadCertificates *p)
{
	if (p)
	{	soap_default___tds__LoadCertificates(soap, p);
		if (soap_begin_recv(soap) || soap_get___tds__LoadCertificates(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tds__GetPkcs10Request_DEFINED
#define SOAP_TYPE___tds__GetPkcs10Request_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__GetPkcs10Request(struct soap*, struct __tds__GetPkcs10Request *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__GetPkcs10Request(struct soap*, const struct __tds__GetPkcs10Request *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__GetPkcs10Request(struct soap*, const char*, int, const struct __tds__GetPkcs10Request *, const char*);
SOAP_FMAC3 struct __tds__GetPkcs10Request * SOAP_FMAC4 soap_in___tds__GetPkcs10Request(struct soap*, const char*, struct __tds__GetPkcs10Request *, const char*);
SOAP_FMAC1 struct __tds__GetPkcs10Request * SOAP_FMAC2 soap_instantiate___tds__GetPkcs10Request(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__GetPkcs10Request * soap_new___tds__GetPkcs10Request(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__GetPkcs10Request(soap, n, NULL, NULL, NULL);
}

inline struct __tds__GetPkcs10Request * soap_new_req___tds__GetPkcs10Request(
	struct soap *soap)
{
	struct __tds__GetPkcs10Request *_p = soap_new___tds__GetPkcs10Request(soap);
	if (_p)
	{	soap_default___tds__GetPkcs10Request(soap, _p);
	}
	return _p;
}

inline struct __tds__GetPkcs10Request * soap_new_set___tds__GetPkcs10Request(
	struct soap *soap,
	_tds__GetPkcs10Request *tds__GetPkcs10Request)
{
	struct __tds__GetPkcs10Request *_p = soap_new___tds__GetPkcs10Request(soap);
	if (_p)
	{	soap_default___tds__GetPkcs10Request(soap, _p);
		_p->tds__GetPkcs10Request = tds__GetPkcs10Request;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__GetPkcs10Request(struct soap*, const struct __tds__GetPkcs10Request *, const char*, const char*);

inline int soap_write___tds__GetPkcs10Request(struct soap *soap, struct __tds__GetPkcs10Request const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tds__GetPkcs10Request(soap, p), 0) || soap_put___tds__GetPkcs10Request(soap, p, "-tds:GetPkcs10Request", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__GetPkcs10Request * SOAP_FMAC4 soap_get___tds__GetPkcs10Request(struct soap*, struct __tds__GetPkcs10Request *, const char*, const char*);

inline int soap_read___tds__GetPkcs10Request(struct soap *soap, struct __tds__GetPkcs10Request *p)
{
	if (p)
	{	soap_default___tds__GetPkcs10Request(soap, p);
		if (soap_begin_recv(soap) || soap_get___tds__GetPkcs10Request(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tds__DeleteCertificates_DEFINED
#define SOAP_TYPE___tds__DeleteCertificates_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__DeleteCertificates(struct soap*, struct __tds__DeleteCertificates *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__DeleteCertificates(struct soap*, const struct __tds__DeleteCertificates *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__DeleteCertificates(struct soap*, const char*, int, const struct __tds__DeleteCertificates *, const char*);
SOAP_FMAC3 struct __tds__DeleteCertificates * SOAP_FMAC4 soap_in___tds__DeleteCertificates(struct soap*, const char*, struct __tds__DeleteCertificates *, const char*);
SOAP_FMAC1 struct __tds__DeleteCertificates * SOAP_FMAC2 soap_instantiate___tds__DeleteCertificates(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__DeleteCertificates * soap_new___tds__DeleteCertificates(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__DeleteCertificates(soap, n, NULL, NULL, NULL);
}

inline struct __tds__DeleteCertificates * soap_new_req___tds__DeleteCertificates(
	struct soap *soap)
{
	struct __tds__DeleteCertificates *_p = soap_new___tds__DeleteCertificates(soap);
	if (_p)
	{	soap_default___tds__DeleteCertificates(soap, _p);
	}
	return _p;
}

inline struct __tds__DeleteCertificates * soap_new_set___tds__DeleteCertificates(
	struct soap *soap,
	_tds__DeleteCertificates *tds__DeleteCertificates)
{
	struct __tds__DeleteCertificates *_p = soap_new___tds__DeleteCertificates(soap);
	if (_p)
	{	soap_default___tds__DeleteCertificates(soap, _p);
		_p->tds__DeleteCertificates = tds__DeleteCertificates;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__DeleteCertificates(struct soap*, const struct __tds__DeleteCertificates *, const char*, const char*);

inline int soap_write___tds__DeleteCertificates(struct soap *soap, struct __tds__DeleteCertificates const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tds__DeleteCertificates(soap, p), 0) || soap_put___tds__DeleteCertificates(soap, p, "-tds:DeleteCertificates", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__DeleteCertificates * SOAP_FMAC4 soap_get___tds__DeleteCertificates(struct soap*, struct __tds__DeleteCertificates *, const char*, const char*);

inline int soap_read___tds__DeleteCertificates(struct soap *soap, struct __tds__DeleteCertificates *p)
{
	if (p)
	{	soap_default___tds__DeleteCertificates(soap, p);
		if (soap_begin_recv(soap) || soap_get___tds__DeleteCertificates(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tds__SetCertificatesStatus_DEFINED
#define SOAP_TYPE___tds__SetCertificatesStatus_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__SetCertificatesStatus(struct soap*, struct __tds__SetCertificatesStatus *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__SetCertificatesStatus(struct soap*, const struct __tds__SetCertificatesStatus *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__SetCertificatesStatus(struct soap*, const char*, int, const struct __tds__SetCertificatesStatus *, const char*);
SOAP_FMAC3 struct __tds__SetCertificatesStatus * SOAP_FMAC4 soap_in___tds__SetCertificatesStatus(struct soap*, const char*, struct __tds__SetCertificatesStatus *, const char*);
SOAP_FMAC1 struct __tds__SetCertificatesStatus * SOAP_FMAC2 soap_instantiate___tds__SetCertificatesStatus(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__SetCertificatesStatus * soap_new___tds__SetCertificatesStatus(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__SetCertificatesStatus(soap, n, NULL, NULL, NULL);
}

inline struct __tds__SetCertificatesStatus * soap_new_req___tds__SetCertificatesStatus(
	struct soap *soap)
{
	struct __tds__SetCertificatesStatus *_p = soap_new___tds__SetCertificatesStatus(soap);
	if (_p)
	{	soap_default___tds__SetCertificatesStatus(soap, _p);
	}
	return _p;
}

inline struct __tds__SetCertificatesStatus * soap_new_set___tds__SetCertificatesStatus(
	struct soap *soap,
	_tds__SetCertificatesStatus *tds__SetCertificatesStatus)
{
	struct __tds__SetCertificatesStatus *_p = soap_new___tds__SetCertificatesStatus(soap);
	if (_p)
	{	soap_default___tds__SetCertificatesStatus(soap, _p);
		_p->tds__SetCertificatesStatus = tds__SetCertificatesStatus;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__SetCertificatesStatus(struct soap*, const struct __tds__SetCertificatesStatus *, const char*, const char*);

inline int soap_write___tds__SetCertificatesStatus(struct soap *soap, struct __tds__SetCertificatesStatus const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tds__SetCertificatesStatus(soap, p), 0) || soap_put___tds__SetCertificatesStatus(soap, p, "-tds:SetCertificatesStatus", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__SetCertificatesStatus * SOAP_FMAC4 soap_get___tds__SetCertificatesStatus(struct soap*, struct __tds__SetCertificatesStatus *, const char*, const char*);

inline int soap_read___tds__SetCertificatesStatus(struct soap *soap, struct __tds__SetCertificatesStatus *p)
{
	if (p)
	{	soap_default___tds__SetCertificatesStatus(soap, p);
		if (soap_begin_recv(soap) || soap_get___tds__SetCertificatesStatus(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tds__GetCertificatesStatus_DEFINED
#define SOAP_TYPE___tds__GetCertificatesStatus_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__GetCertificatesStatus(struct soap*, struct __tds__GetCertificatesStatus *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__GetCertificatesStatus(struct soap*, const struct __tds__GetCertificatesStatus *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__GetCertificatesStatus(struct soap*, const char*, int, const struct __tds__GetCertificatesStatus *, const char*);
SOAP_FMAC3 struct __tds__GetCertificatesStatus * SOAP_FMAC4 soap_in___tds__GetCertificatesStatus(struct soap*, const char*, struct __tds__GetCertificatesStatus *, const char*);
SOAP_FMAC1 struct __tds__GetCertificatesStatus * SOAP_FMAC2 soap_instantiate___tds__GetCertificatesStatus(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__GetCertificatesStatus * soap_new___tds__GetCertificatesStatus(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__GetCertificatesStatus(soap, n, NULL, NULL, NULL);
}

inline struct __tds__GetCertificatesStatus * soap_new_req___tds__GetCertificatesStatus(
	struct soap *soap)
{
	struct __tds__GetCertificatesStatus *_p = soap_new___tds__GetCertificatesStatus(soap);
	if (_p)
	{	soap_default___tds__GetCertificatesStatus(soap, _p);
	}
	return _p;
}

inline struct __tds__GetCertificatesStatus * soap_new_set___tds__GetCertificatesStatus(
	struct soap *soap,
	_tds__GetCertificatesStatus *tds__GetCertificatesStatus)
{
	struct __tds__GetCertificatesStatus *_p = soap_new___tds__GetCertificatesStatus(soap);
	if (_p)
	{	soap_default___tds__GetCertificatesStatus(soap, _p);
		_p->tds__GetCertificatesStatus = tds__GetCertificatesStatus;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__GetCertificatesStatus(struct soap*, const struct __tds__GetCertificatesStatus *, const char*, const char*);

inline int soap_write___tds__GetCertificatesStatus(struct soap *soap, struct __tds__GetCertificatesStatus const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tds__GetCertificatesStatus(soap, p), 0) || soap_put___tds__GetCertificatesStatus(soap, p, "-tds:GetCertificatesStatus", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__GetCertificatesStatus * SOAP_FMAC4 soap_get___tds__GetCertificatesStatus(struct soap*, struct __tds__GetCertificatesStatus *, const char*, const char*);

inline int soap_read___tds__GetCertificatesStatus(struct soap *soap, struct __tds__GetCertificatesStatus *p)
{
	if (p)
	{	soap_default___tds__GetCertificatesStatus(soap, p);
		if (soap_begin_recv(soap) || soap_get___tds__GetCertificatesStatus(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tds__GetCertificates_DEFINED
#define SOAP_TYPE___tds__GetCertificates_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__GetCertificates(struct soap*, struct __tds__GetCertificates *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__GetCertificates(struct soap*, const struct __tds__GetCertificates *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__GetCertificates(struct soap*, const char*, int, const struct __tds__GetCertificates *, const char*);
SOAP_FMAC3 struct __tds__GetCertificates * SOAP_FMAC4 soap_in___tds__GetCertificates(struct soap*, const char*, struct __tds__GetCertificates *, const char*);
SOAP_FMAC1 struct __tds__GetCertificates * SOAP_FMAC2 soap_instantiate___tds__GetCertificates(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__GetCertificates * soap_new___tds__GetCertificates(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__GetCertificates(soap, n, NULL, NULL, NULL);
}

inline struct __tds__GetCertificates * soap_new_req___tds__GetCertificates(
	struct soap *soap)
{
	struct __tds__GetCertificates *_p = soap_new___tds__GetCertificates(soap);
	if (_p)
	{	soap_default___tds__GetCertificates(soap, _p);
	}
	return _p;
}

inline struct __tds__GetCertificates * soap_new_set___tds__GetCertificates(
	struct soap *soap,
	_tds__GetCertificates *tds__GetCertificates)
{
	struct __tds__GetCertificates *_p = soap_new___tds__GetCertificates(soap);
	if (_p)
	{	soap_default___tds__GetCertificates(soap, _p);
		_p->tds__GetCertificates = tds__GetCertificates;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__GetCertificates(struct soap*, const struct __tds__GetCertificates *, const char*, const char*);

inline int soap_write___tds__GetCertificates(struct soap *soap, struct __tds__GetCertificates const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tds__GetCertificates(soap, p), 0) || soap_put___tds__GetCertificates(soap, p, "-tds:GetCertificates", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__GetCertificates * SOAP_FMAC4 soap_get___tds__GetCertificates(struct soap*, struct __tds__GetCertificates *, const char*, const char*);

inline int soap_read___tds__GetCertificates(struct soap *soap, struct __tds__GetCertificates *p)
{
	if (p)
	{	soap_default___tds__GetCertificates(soap, p);
		if (soap_begin_recv(soap) || soap_get___tds__GetCertificates(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tds__CreateCertificate_DEFINED
#define SOAP_TYPE___tds__CreateCertificate_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__CreateCertificate(struct soap*, struct __tds__CreateCertificate *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__CreateCertificate(struct soap*, const struct __tds__CreateCertificate *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__CreateCertificate(struct soap*, const char*, int, const struct __tds__CreateCertificate *, const char*);
SOAP_FMAC3 struct __tds__CreateCertificate * SOAP_FMAC4 soap_in___tds__CreateCertificate(struct soap*, const char*, struct __tds__CreateCertificate *, const char*);
SOAP_FMAC1 struct __tds__CreateCertificate * SOAP_FMAC2 soap_instantiate___tds__CreateCertificate(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__CreateCertificate * soap_new___tds__CreateCertificate(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__CreateCertificate(soap, n, NULL, NULL, NULL);
}

inline struct __tds__CreateCertificate * soap_new_req___tds__CreateCertificate(
	struct soap *soap)
{
	struct __tds__CreateCertificate *_p = soap_new___tds__CreateCertificate(soap);
	if (_p)
	{	soap_default___tds__CreateCertificate(soap, _p);
	}
	return _p;
}

inline struct __tds__CreateCertificate * soap_new_set___tds__CreateCertificate(
	struct soap *soap,
	_tds__CreateCertificate *tds__CreateCertificate)
{
	struct __tds__CreateCertificate *_p = soap_new___tds__CreateCertificate(soap);
	if (_p)
	{	soap_default___tds__CreateCertificate(soap, _p);
		_p->tds__CreateCertificate = tds__CreateCertificate;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__CreateCertificate(struct soap*, const struct __tds__CreateCertificate *, const char*, const char*);

inline int soap_write___tds__CreateCertificate(struct soap *soap, struct __tds__CreateCertificate const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tds__CreateCertificate(soap, p), 0) || soap_put___tds__CreateCertificate(soap, p, "-tds:CreateCertificate", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__CreateCertificate * SOAP_FMAC4 soap_get___tds__CreateCertificate(struct soap*, struct __tds__CreateCertificate *, const char*, const char*);

inline int soap_read___tds__CreateCertificate(struct soap *soap, struct __tds__CreateCertificate *p)
{
	if (p)
	{	soap_default___tds__CreateCertificate(soap, p);
		if (soap_begin_recv(soap) || soap_get___tds__CreateCertificate(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tds__SetAccessPolicy_DEFINED
#define SOAP_TYPE___tds__SetAccessPolicy_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__SetAccessPolicy(struct soap*, struct __tds__SetAccessPolicy *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__SetAccessPolicy(struct soap*, const struct __tds__SetAccessPolicy *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__SetAccessPolicy(struct soap*, const char*, int, const struct __tds__SetAccessPolicy *, const char*);
SOAP_FMAC3 struct __tds__SetAccessPolicy * SOAP_FMAC4 soap_in___tds__SetAccessPolicy(struct soap*, const char*, struct __tds__SetAccessPolicy *, const char*);
SOAP_FMAC1 struct __tds__SetAccessPolicy * SOAP_FMAC2 soap_instantiate___tds__SetAccessPolicy(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__SetAccessPolicy * soap_new___tds__SetAccessPolicy(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__SetAccessPolicy(soap, n, NULL, NULL, NULL);
}

inline struct __tds__SetAccessPolicy * soap_new_req___tds__SetAccessPolicy(
	struct soap *soap)
{
	struct __tds__SetAccessPolicy *_p = soap_new___tds__SetAccessPolicy(soap);
	if (_p)
	{	soap_default___tds__SetAccessPolicy(soap, _p);
	}
	return _p;
}

inline struct __tds__SetAccessPolicy * soap_new_set___tds__SetAccessPolicy(
	struct soap *soap,
	_tds__SetAccessPolicy *tds__SetAccessPolicy)
{
	struct __tds__SetAccessPolicy *_p = soap_new___tds__SetAccessPolicy(soap);
	if (_p)
	{	soap_default___tds__SetAccessPolicy(soap, _p);
		_p->tds__SetAccessPolicy = tds__SetAccessPolicy;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__SetAccessPolicy(struct soap*, const struct __tds__SetAccessPolicy *, const char*, const char*);

inline int soap_write___tds__SetAccessPolicy(struct soap *soap, struct __tds__SetAccessPolicy const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tds__SetAccessPolicy(soap, p), 0) || soap_put___tds__SetAccessPolicy(soap, p, "-tds:SetAccessPolicy", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__SetAccessPolicy * SOAP_FMAC4 soap_get___tds__SetAccessPolicy(struct soap*, struct __tds__SetAccessPolicy *, const char*, const char*);

inline int soap_read___tds__SetAccessPolicy(struct soap *soap, struct __tds__SetAccessPolicy *p)
{
	if (p)
	{	soap_default___tds__SetAccessPolicy(soap, p);
		if (soap_begin_recv(soap) || soap_get___tds__SetAccessPolicy(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tds__GetAccessPolicy_DEFINED
#define SOAP_TYPE___tds__GetAccessPolicy_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__GetAccessPolicy(struct soap*, struct __tds__GetAccessPolicy *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__GetAccessPolicy(struct soap*, const struct __tds__GetAccessPolicy *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__GetAccessPolicy(struct soap*, const char*, int, const struct __tds__GetAccessPolicy *, const char*);
SOAP_FMAC3 struct __tds__GetAccessPolicy * SOAP_FMAC4 soap_in___tds__GetAccessPolicy(struct soap*, const char*, struct __tds__GetAccessPolicy *, const char*);
SOAP_FMAC1 struct __tds__GetAccessPolicy * SOAP_FMAC2 soap_instantiate___tds__GetAccessPolicy(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__GetAccessPolicy * soap_new___tds__GetAccessPolicy(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__GetAccessPolicy(soap, n, NULL, NULL, NULL);
}

inline struct __tds__GetAccessPolicy * soap_new_req___tds__GetAccessPolicy(
	struct soap *soap)
{
	struct __tds__GetAccessPolicy *_p = soap_new___tds__GetAccessPolicy(soap);
	if (_p)
	{	soap_default___tds__GetAccessPolicy(soap, _p);
	}
	return _p;
}

inline struct __tds__GetAccessPolicy * soap_new_set___tds__GetAccessPolicy(
	struct soap *soap,
	_tds__GetAccessPolicy *tds__GetAccessPolicy)
{
	struct __tds__GetAccessPolicy *_p = soap_new___tds__GetAccessPolicy(soap);
	if (_p)
	{	soap_default___tds__GetAccessPolicy(soap, _p);
		_p->tds__GetAccessPolicy = tds__GetAccessPolicy;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__GetAccessPolicy(struct soap*, const struct __tds__GetAccessPolicy *, const char*, const char*);

inline int soap_write___tds__GetAccessPolicy(struct soap *soap, struct __tds__GetAccessPolicy const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tds__GetAccessPolicy(soap, p), 0) || soap_put___tds__GetAccessPolicy(soap, p, "-tds:GetAccessPolicy", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__GetAccessPolicy * SOAP_FMAC4 soap_get___tds__GetAccessPolicy(struct soap*, struct __tds__GetAccessPolicy *, const char*, const char*);

inline int soap_read___tds__GetAccessPolicy(struct soap *soap, struct __tds__GetAccessPolicy *p)
{
	if (p)
	{	soap_default___tds__GetAccessPolicy(soap, p);
		if (soap_begin_recv(soap) || soap_get___tds__GetAccessPolicy(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tds__RemoveIPAddressFilter_DEFINED
#define SOAP_TYPE___tds__RemoveIPAddressFilter_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__RemoveIPAddressFilter(struct soap*, struct __tds__RemoveIPAddressFilter *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__RemoveIPAddressFilter(struct soap*, const struct __tds__RemoveIPAddressFilter *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__RemoveIPAddressFilter(struct soap*, const char*, int, const struct __tds__RemoveIPAddressFilter *, const char*);
SOAP_FMAC3 struct __tds__RemoveIPAddressFilter * SOAP_FMAC4 soap_in___tds__RemoveIPAddressFilter(struct soap*, const char*, struct __tds__RemoveIPAddressFilter *, const char*);
SOAP_FMAC1 struct __tds__RemoveIPAddressFilter * SOAP_FMAC2 soap_instantiate___tds__RemoveIPAddressFilter(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__RemoveIPAddressFilter * soap_new___tds__RemoveIPAddressFilter(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__RemoveIPAddressFilter(soap, n, NULL, NULL, NULL);
}

inline struct __tds__RemoveIPAddressFilter * soap_new_req___tds__RemoveIPAddressFilter(
	struct soap *soap)
{
	struct __tds__RemoveIPAddressFilter *_p = soap_new___tds__RemoveIPAddressFilter(soap);
	if (_p)
	{	soap_default___tds__RemoveIPAddressFilter(soap, _p);
	}
	return _p;
}

inline struct __tds__RemoveIPAddressFilter * soap_new_set___tds__RemoveIPAddressFilter(
	struct soap *soap,
	_tds__RemoveIPAddressFilter *tds__RemoveIPAddressFilter)
{
	struct __tds__RemoveIPAddressFilter *_p = soap_new___tds__RemoveIPAddressFilter(soap);
	if (_p)
	{	soap_default___tds__RemoveIPAddressFilter(soap, _p);
		_p->tds__RemoveIPAddressFilter = tds__RemoveIPAddressFilter;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__RemoveIPAddressFilter(struct soap*, const struct __tds__RemoveIPAddressFilter *, const char*, const char*);

inline int soap_write___tds__RemoveIPAddressFilter(struct soap *soap, struct __tds__RemoveIPAddressFilter const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tds__RemoveIPAddressFilter(soap, p), 0) || soap_put___tds__RemoveIPAddressFilter(soap, p, "-tds:RemoveIPAddressFilter", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__RemoveIPAddressFilter * SOAP_FMAC4 soap_get___tds__RemoveIPAddressFilter(struct soap*, struct __tds__RemoveIPAddressFilter *, const char*, const char*);

inline int soap_read___tds__RemoveIPAddressFilter(struct soap *soap, struct __tds__RemoveIPAddressFilter *p)
{
	if (p)
	{	soap_default___tds__RemoveIPAddressFilter(soap, p);
		if (soap_begin_recv(soap) || soap_get___tds__RemoveIPAddressFilter(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tds__AddIPAddressFilter_DEFINED
#define SOAP_TYPE___tds__AddIPAddressFilter_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__AddIPAddressFilter(struct soap*, struct __tds__AddIPAddressFilter *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__AddIPAddressFilter(struct soap*, const struct __tds__AddIPAddressFilter *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__AddIPAddressFilter(struct soap*, const char*, int, const struct __tds__AddIPAddressFilter *, const char*);
SOAP_FMAC3 struct __tds__AddIPAddressFilter * SOAP_FMAC4 soap_in___tds__AddIPAddressFilter(struct soap*, const char*, struct __tds__AddIPAddressFilter *, const char*);
SOAP_FMAC1 struct __tds__AddIPAddressFilter * SOAP_FMAC2 soap_instantiate___tds__AddIPAddressFilter(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__AddIPAddressFilter * soap_new___tds__AddIPAddressFilter(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__AddIPAddressFilter(soap, n, NULL, NULL, NULL);
}

inline struct __tds__AddIPAddressFilter * soap_new_req___tds__AddIPAddressFilter(
	struct soap *soap)
{
	struct __tds__AddIPAddressFilter *_p = soap_new___tds__AddIPAddressFilter(soap);
	if (_p)
	{	soap_default___tds__AddIPAddressFilter(soap, _p);
	}
	return _p;
}

inline struct __tds__AddIPAddressFilter * soap_new_set___tds__AddIPAddressFilter(
	struct soap *soap,
	_tds__AddIPAddressFilter *tds__AddIPAddressFilter)
{
	struct __tds__AddIPAddressFilter *_p = soap_new___tds__AddIPAddressFilter(soap);
	if (_p)
	{	soap_default___tds__AddIPAddressFilter(soap, _p);
		_p->tds__AddIPAddressFilter = tds__AddIPAddressFilter;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__AddIPAddressFilter(struct soap*, const struct __tds__AddIPAddressFilter *, const char*, const char*);

inline int soap_write___tds__AddIPAddressFilter(struct soap *soap, struct __tds__AddIPAddressFilter const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tds__AddIPAddressFilter(soap, p), 0) || soap_put___tds__AddIPAddressFilter(soap, p, "-tds:AddIPAddressFilter", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__AddIPAddressFilter * SOAP_FMAC4 soap_get___tds__AddIPAddressFilter(struct soap*, struct __tds__AddIPAddressFilter *, const char*, const char*);

inline int soap_read___tds__AddIPAddressFilter(struct soap *soap, struct __tds__AddIPAddressFilter *p)
{
	if (p)
	{	soap_default___tds__AddIPAddressFilter(soap, p);
		if (soap_begin_recv(soap) || soap_get___tds__AddIPAddressFilter(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tds__SetIPAddressFilter_DEFINED
#define SOAP_TYPE___tds__SetIPAddressFilter_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__SetIPAddressFilter(struct soap*, struct __tds__SetIPAddressFilter *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__SetIPAddressFilter(struct soap*, const struct __tds__SetIPAddressFilter *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__SetIPAddressFilter(struct soap*, const char*, int, const struct __tds__SetIPAddressFilter *, const char*);
SOAP_FMAC3 struct __tds__SetIPAddressFilter * SOAP_FMAC4 soap_in___tds__SetIPAddressFilter(struct soap*, const char*, struct __tds__SetIPAddressFilter *, const char*);
SOAP_FMAC1 struct __tds__SetIPAddressFilter * SOAP_FMAC2 soap_instantiate___tds__SetIPAddressFilter(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__SetIPAddressFilter * soap_new___tds__SetIPAddressFilter(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__SetIPAddressFilter(soap, n, NULL, NULL, NULL);
}

inline struct __tds__SetIPAddressFilter * soap_new_req___tds__SetIPAddressFilter(
	struct soap *soap)
{
	struct __tds__SetIPAddressFilter *_p = soap_new___tds__SetIPAddressFilter(soap);
	if (_p)
	{	soap_default___tds__SetIPAddressFilter(soap, _p);
	}
	return _p;
}

inline struct __tds__SetIPAddressFilter * soap_new_set___tds__SetIPAddressFilter(
	struct soap *soap,
	_tds__SetIPAddressFilter *tds__SetIPAddressFilter)
{
	struct __tds__SetIPAddressFilter *_p = soap_new___tds__SetIPAddressFilter(soap);
	if (_p)
	{	soap_default___tds__SetIPAddressFilter(soap, _p);
		_p->tds__SetIPAddressFilter = tds__SetIPAddressFilter;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__SetIPAddressFilter(struct soap*, const struct __tds__SetIPAddressFilter *, const char*, const char*);

inline int soap_write___tds__SetIPAddressFilter(struct soap *soap, struct __tds__SetIPAddressFilter const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tds__SetIPAddressFilter(soap, p), 0) || soap_put___tds__SetIPAddressFilter(soap, p, "-tds:SetIPAddressFilter", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__SetIPAddressFilter * SOAP_FMAC4 soap_get___tds__SetIPAddressFilter(struct soap*, struct __tds__SetIPAddressFilter *, const char*, const char*);

inline int soap_read___tds__SetIPAddressFilter(struct soap *soap, struct __tds__SetIPAddressFilter *p)
{
	if (p)
	{	soap_default___tds__SetIPAddressFilter(soap, p);
		if (soap_begin_recv(soap) || soap_get___tds__SetIPAddressFilter(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tds__GetIPAddressFilter_DEFINED
#define SOAP_TYPE___tds__GetIPAddressFilter_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__GetIPAddressFilter(struct soap*, struct __tds__GetIPAddressFilter *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__GetIPAddressFilter(struct soap*, const struct __tds__GetIPAddressFilter *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__GetIPAddressFilter(struct soap*, const char*, int, const struct __tds__GetIPAddressFilter *, const char*);
SOAP_FMAC3 struct __tds__GetIPAddressFilter * SOAP_FMAC4 soap_in___tds__GetIPAddressFilter(struct soap*, const char*, struct __tds__GetIPAddressFilter *, const char*);
SOAP_FMAC1 struct __tds__GetIPAddressFilter * SOAP_FMAC2 soap_instantiate___tds__GetIPAddressFilter(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__GetIPAddressFilter * soap_new___tds__GetIPAddressFilter(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__GetIPAddressFilter(soap, n, NULL, NULL, NULL);
}

inline struct __tds__GetIPAddressFilter * soap_new_req___tds__GetIPAddressFilter(
	struct soap *soap)
{
	struct __tds__GetIPAddressFilter *_p = soap_new___tds__GetIPAddressFilter(soap);
	if (_p)
	{	soap_default___tds__GetIPAddressFilter(soap, _p);
	}
	return _p;
}

inline struct __tds__GetIPAddressFilter * soap_new_set___tds__GetIPAddressFilter(
	struct soap *soap,
	_tds__GetIPAddressFilter *tds__GetIPAddressFilter)
{
	struct __tds__GetIPAddressFilter *_p = soap_new___tds__GetIPAddressFilter(soap);
	if (_p)
	{	soap_default___tds__GetIPAddressFilter(soap, _p);
		_p->tds__GetIPAddressFilter = tds__GetIPAddressFilter;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__GetIPAddressFilter(struct soap*, const struct __tds__GetIPAddressFilter *, const char*, const char*);

inline int soap_write___tds__GetIPAddressFilter(struct soap *soap, struct __tds__GetIPAddressFilter const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tds__GetIPAddressFilter(soap, p), 0) || soap_put___tds__GetIPAddressFilter(soap, p, "-tds:GetIPAddressFilter", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__GetIPAddressFilter * SOAP_FMAC4 soap_get___tds__GetIPAddressFilter(struct soap*, struct __tds__GetIPAddressFilter *, const char*, const char*);

inline int soap_read___tds__GetIPAddressFilter(struct soap *soap, struct __tds__GetIPAddressFilter *p)
{
	if (p)
	{	soap_default___tds__GetIPAddressFilter(soap, p);
		if (soap_begin_recv(soap) || soap_get___tds__GetIPAddressFilter(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tds__SetZeroConfiguration_DEFINED
#define SOAP_TYPE___tds__SetZeroConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__SetZeroConfiguration(struct soap*, struct __tds__SetZeroConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__SetZeroConfiguration(struct soap*, const struct __tds__SetZeroConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__SetZeroConfiguration(struct soap*, const char*, int, const struct __tds__SetZeroConfiguration *, const char*);
SOAP_FMAC3 struct __tds__SetZeroConfiguration * SOAP_FMAC4 soap_in___tds__SetZeroConfiguration(struct soap*, const char*, struct __tds__SetZeroConfiguration *, const char*);
SOAP_FMAC1 struct __tds__SetZeroConfiguration * SOAP_FMAC2 soap_instantiate___tds__SetZeroConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__SetZeroConfiguration * soap_new___tds__SetZeroConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__SetZeroConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __tds__SetZeroConfiguration * soap_new_req___tds__SetZeroConfiguration(
	struct soap *soap)
{
	struct __tds__SetZeroConfiguration *_p = soap_new___tds__SetZeroConfiguration(soap);
	if (_p)
	{	soap_default___tds__SetZeroConfiguration(soap, _p);
	}
	return _p;
}

inline struct __tds__SetZeroConfiguration * soap_new_set___tds__SetZeroConfiguration(
	struct soap *soap,
	_tds__SetZeroConfiguration *tds__SetZeroConfiguration)
{
	struct __tds__SetZeroConfiguration *_p = soap_new___tds__SetZeroConfiguration(soap);
	if (_p)
	{	soap_default___tds__SetZeroConfiguration(soap, _p);
		_p->tds__SetZeroConfiguration = tds__SetZeroConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__SetZeroConfiguration(struct soap*, const struct __tds__SetZeroConfiguration *, const char*, const char*);

inline int soap_write___tds__SetZeroConfiguration(struct soap *soap, struct __tds__SetZeroConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tds__SetZeroConfiguration(soap, p), 0) || soap_put___tds__SetZeroConfiguration(soap, p, "-tds:SetZeroConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__SetZeroConfiguration * SOAP_FMAC4 soap_get___tds__SetZeroConfiguration(struct soap*, struct __tds__SetZeroConfiguration *, const char*, const char*);

inline int soap_read___tds__SetZeroConfiguration(struct soap *soap, struct __tds__SetZeroConfiguration *p)
{
	if (p)
	{	soap_default___tds__SetZeroConfiguration(soap, p);
		if (soap_begin_recv(soap) || soap_get___tds__SetZeroConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tds__GetZeroConfiguration_DEFINED
#define SOAP_TYPE___tds__GetZeroConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__GetZeroConfiguration(struct soap*, struct __tds__GetZeroConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__GetZeroConfiguration(struct soap*, const struct __tds__GetZeroConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__GetZeroConfiguration(struct soap*, const char*, int, const struct __tds__GetZeroConfiguration *, const char*);
SOAP_FMAC3 struct __tds__GetZeroConfiguration * SOAP_FMAC4 soap_in___tds__GetZeroConfiguration(struct soap*, const char*, struct __tds__GetZeroConfiguration *, const char*);
SOAP_FMAC1 struct __tds__GetZeroConfiguration * SOAP_FMAC2 soap_instantiate___tds__GetZeroConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__GetZeroConfiguration * soap_new___tds__GetZeroConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__GetZeroConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __tds__GetZeroConfiguration * soap_new_req___tds__GetZeroConfiguration(
	struct soap *soap)
{
	struct __tds__GetZeroConfiguration *_p = soap_new___tds__GetZeroConfiguration(soap);
	if (_p)
	{	soap_default___tds__GetZeroConfiguration(soap, _p);
	}
	return _p;
}

inline struct __tds__GetZeroConfiguration * soap_new_set___tds__GetZeroConfiguration(
	struct soap *soap,
	_tds__GetZeroConfiguration *tds__GetZeroConfiguration)
{
	struct __tds__GetZeroConfiguration *_p = soap_new___tds__GetZeroConfiguration(soap);
	if (_p)
	{	soap_default___tds__GetZeroConfiguration(soap, _p);
		_p->tds__GetZeroConfiguration = tds__GetZeroConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__GetZeroConfiguration(struct soap*, const struct __tds__GetZeroConfiguration *, const char*, const char*);

inline int soap_write___tds__GetZeroConfiguration(struct soap *soap, struct __tds__GetZeroConfiguration const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tds__GetZeroConfiguration(soap, p), 0) || soap_put___tds__GetZeroConfiguration(soap, p, "-tds:GetZeroConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__GetZeroConfiguration * SOAP_FMAC4 soap_get___tds__GetZeroConfiguration(struct soap*, struct __tds__GetZeroConfiguration *, const char*, const char*);

inline int soap_read___tds__GetZeroConfiguration(struct soap *soap, struct __tds__GetZeroConfiguration *p)
{
	if (p)
	{	soap_default___tds__GetZeroConfiguration(soap, p);
		if (soap_begin_recv(soap) || soap_get___tds__GetZeroConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tds__SetNetworkDefaultGateway_DEFINED
#define SOAP_TYPE___tds__SetNetworkDefaultGateway_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__SetNetworkDefaultGateway(struct soap*, struct __tds__SetNetworkDefaultGateway *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__SetNetworkDefaultGateway(struct soap*, const struct __tds__SetNetworkDefaultGateway *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__SetNetworkDefaultGateway(struct soap*, const char*, int, const struct __tds__SetNetworkDefaultGateway *, const char*);
SOAP_FMAC3 struct __tds__SetNetworkDefaultGateway * SOAP_FMAC4 soap_in___tds__SetNetworkDefaultGateway(struct soap*, const char*, struct __tds__SetNetworkDefaultGateway *, const char*);
SOAP_FMAC1 struct __tds__SetNetworkDefaultGateway * SOAP_FMAC2 soap_instantiate___tds__SetNetworkDefaultGateway(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__SetNetworkDefaultGateway * soap_new___tds__SetNetworkDefaultGateway(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__SetNetworkDefaultGateway(soap, n, NULL, NULL, NULL);
}

inline struct __tds__SetNetworkDefaultGateway * soap_new_req___tds__SetNetworkDefaultGateway(
	struct soap *soap)
{
	struct __tds__SetNetworkDefaultGateway *_p = soap_new___tds__SetNetworkDefaultGateway(soap);
	if (_p)
	{	soap_default___tds__SetNetworkDefaultGateway(soap, _p);
	}
	return _p;
}

inline struct __tds__SetNetworkDefaultGateway * soap_new_set___tds__SetNetworkDefaultGateway(
	struct soap *soap,
	_tds__SetNetworkDefaultGateway *tds__SetNetworkDefaultGateway)
{
	struct __tds__SetNetworkDefaultGateway *_p = soap_new___tds__SetNetworkDefaultGateway(soap);
	if (_p)
	{	soap_default___tds__SetNetworkDefaultGateway(soap, _p);
		_p->tds__SetNetworkDefaultGateway = tds__SetNetworkDefaultGateway;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__SetNetworkDefaultGateway(struct soap*, const struct __tds__SetNetworkDefaultGateway *, const char*, const char*);

inline int soap_write___tds__SetNetworkDefaultGateway(struct soap *soap, struct __tds__SetNetworkDefaultGateway const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tds__SetNetworkDefaultGateway(soap, p), 0) || soap_put___tds__SetNetworkDefaultGateway(soap, p, "-tds:SetNetworkDefaultGateway", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__SetNetworkDefaultGateway * SOAP_FMAC4 soap_get___tds__SetNetworkDefaultGateway(struct soap*, struct __tds__SetNetworkDefaultGateway *, const char*, const char*);

inline int soap_read___tds__SetNetworkDefaultGateway(struct soap *soap, struct __tds__SetNetworkDefaultGateway *p)
{
	if (p)
	{	soap_default___tds__SetNetworkDefaultGateway(soap, p);
		if (soap_begin_recv(soap) || soap_get___tds__SetNetworkDefaultGateway(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tds__GetNetworkDefaultGateway_DEFINED
#define SOAP_TYPE___tds__GetNetworkDefaultGateway_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__GetNetworkDefaultGateway(struct soap*, struct __tds__GetNetworkDefaultGateway *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__GetNetworkDefaultGateway(struct soap*, const struct __tds__GetNetworkDefaultGateway *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__GetNetworkDefaultGateway(struct soap*, const char*, int, const struct __tds__GetNetworkDefaultGateway *, const char*);
SOAP_FMAC3 struct __tds__GetNetworkDefaultGateway * SOAP_FMAC4 soap_in___tds__GetNetworkDefaultGateway(struct soap*, const char*, struct __tds__GetNetworkDefaultGateway *, const char*);
SOAP_FMAC1 struct __tds__GetNetworkDefaultGateway * SOAP_FMAC2 soap_instantiate___tds__GetNetworkDefaultGateway(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__GetNetworkDefaultGateway * soap_new___tds__GetNetworkDefaultGateway(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__GetNetworkDefaultGateway(soap, n, NULL, NULL, NULL);
}

inline struct __tds__GetNetworkDefaultGateway * soap_new_req___tds__GetNetworkDefaultGateway(
	struct soap *soap)
{
	struct __tds__GetNetworkDefaultGateway *_p = soap_new___tds__GetNetworkDefaultGateway(soap);
	if (_p)
	{	soap_default___tds__GetNetworkDefaultGateway(soap, _p);
	}
	return _p;
}

inline struct __tds__GetNetworkDefaultGateway * soap_new_set___tds__GetNetworkDefaultGateway(
	struct soap *soap,
	_tds__GetNetworkDefaultGateway *tds__GetNetworkDefaultGateway)
{
	struct __tds__GetNetworkDefaultGateway *_p = soap_new___tds__GetNetworkDefaultGateway(soap);
	if (_p)
	{	soap_default___tds__GetNetworkDefaultGateway(soap, _p);
		_p->tds__GetNetworkDefaultGateway = tds__GetNetworkDefaultGateway;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__GetNetworkDefaultGateway(struct soap*, const struct __tds__GetNetworkDefaultGateway *, const char*, const char*);

inline int soap_write___tds__GetNetworkDefaultGateway(struct soap *soap, struct __tds__GetNetworkDefaultGateway const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tds__GetNetworkDefaultGateway(soap, p), 0) || soap_put___tds__GetNetworkDefaultGateway(soap, p, "-tds:GetNetworkDefaultGateway", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__GetNetworkDefaultGateway * SOAP_FMAC4 soap_get___tds__GetNetworkDefaultGateway(struct soap*, struct __tds__GetNetworkDefaultGateway *, const char*, const char*);

inline int soap_read___tds__GetNetworkDefaultGateway(struct soap *soap, struct __tds__GetNetworkDefaultGateway *p)
{
	if (p)
	{	soap_default___tds__GetNetworkDefaultGateway(soap, p);
		if (soap_begin_recv(soap) || soap_get___tds__GetNetworkDefaultGateway(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tds__SetNetworkProtocols_DEFINED
#define SOAP_TYPE___tds__SetNetworkProtocols_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__SetNetworkProtocols(struct soap*, struct __tds__SetNetworkProtocols *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__SetNetworkProtocols(struct soap*, const struct __tds__SetNetworkProtocols *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__SetNetworkProtocols(struct soap*, const char*, int, const struct __tds__SetNetworkProtocols *, const char*);
SOAP_FMAC3 struct __tds__SetNetworkProtocols * SOAP_FMAC4 soap_in___tds__SetNetworkProtocols(struct soap*, const char*, struct __tds__SetNetworkProtocols *, const char*);
SOAP_FMAC1 struct __tds__SetNetworkProtocols * SOAP_FMAC2 soap_instantiate___tds__SetNetworkProtocols(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__SetNetworkProtocols * soap_new___tds__SetNetworkProtocols(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__SetNetworkProtocols(soap, n, NULL, NULL, NULL);
}

inline struct __tds__SetNetworkProtocols * soap_new_req___tds__SetNetworkProtocols(
	struct soap *soap)
{
	struct __tds__SetNetworkProtocols *_p = soap_new___tds__SetNetworkProtocols(soap);
	if (_p)
	{	soap_default___tds__SetNetworkProtocols(soap, _p);
	}
	return _p;
}

inline struct __tds__SetNetworkProtocols * soap_new_set___tds__SetNetworkProtocols(
	struct soap *soap,
	_tds__SetNetworkProtocols *tds__SetNetworkProtocols)
{
	struct __tds__SetNetworkProtocols *_p = soap_new___tds__SetNetworkProtocols(soap);
	if (_p)
	{	soap_default___tds__SetNetworkProtocols(soap, _p);
		_p->tds__SetNetworkProtocols = tds__SetNetworkProtocols;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__SetNetworkProtocols(struct soap*, const struct __tds__SetNetworkProtocols *, const char*, const char*);

inline int soap_write___tds__SetNetworkProtocols(struct soap *soap, struct __tds__SetNetworkProtocols const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tds__SetNetworkProtocols(soap, p), 0) || soap_put___tds__SetNetworkProtocols(soap, p, "-tds:SetNetworkProtocols", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__SetNetworkProtocols * SOAP_FMAC4 soap_get___tds__SetNetworkProtocols(struct soap*, struct __tds__SetNetworkProtocols *, const char*, const char*);

inline int soap_read___tds__SetNetworkProtocols(struct soap *soap, struct __tds__SetNetworkProtocols *p)
{
	if (p)
	{	soap_default___tds__SetNetworkProtocols(soap, p);
		if (soap_begin_recv(soap) || soap_get___tds__SetNetworkProtocols(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tds__GetNetworkProtocols_DEFINED
#define SOAP_TYPE___tds__GetNetworkProtocols_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__GetNetworkProtocols(struct soap*, struct __tds__GetNetworkProtocols *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__GetNetworkProtocols(struct soap*, const struct __tds__GetNetworkProtocols *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__GetNetworkProtocols(struct soap*, const char*, int, const struct __tds__GetNetworkProtocols *, const char*);
SOAP_FMAC3 struct __tds__GetNetworkProtocols * SOAP_FMAC4 soap_in___tds__GetNetworkProtocols(struct soap*, const char*, struct __tds__GetNetworkProtocols *, const char*);
SOAP_FMAC1 struct __tds__GetNetworkProtocols * SOAP_FMAC2 soap_instantiate___tds__GetNetworkProtocols(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__GetNetworkProtocols * soap_new___tds__GetNetworkProtocols(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__GetNetworkProtocols(soap, n, NULL, NULL, NULL);
}

inline struct __tds__GetNetworkProtocols * soap_new_req___tds__GetNetworkProtocols(
	struct soap *soap)
{
	struct __tds__GetNetworkProtocols *_p = soap_new___tds__GetNetworkProtocols(soap);
	if (_p)
	{	soap_default___tds__GetNetworkProtocols(soap, _p);
	}
	return _p;
}

inline struct __tds__GetNetworkProtocols * soap_new_set___tds__GetNetworkProtocols(
	struct soap *soap,
	_tds__GetNetworkProtocols *tds__GetNetworkProtocols)
{
	struct __tds__GetNetworkProtocols *_p = soap_new___tds__GetNetworkProtocols(soap);
	if (_p)
	{	soap_default___tds__GetNetworkProtocols(soap, _p);
		_p->tds__GetNetworkProtocols = tds__GetNetworkProtocols;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__GetNetworkProtocols(struct soap*, const struct __tds__GetNetworkProtocols *, const char*, const char*);

inline int soap_write___tds__GetNetworkProtocols(struct soap *soap, struct __tds__GetNetworkProtocols const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tds__GetNetworkProtocols(soap, p), 0) || soap_put___tds__GetNetworkProtocols(soap, p, "-tds:GetNetworkProtocols", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__GetNetworkProtocols * SOAP_FMAC4 soap_get___tds__GetNetworkProtocols(struct soap*, struct __tds__GetNetworkProtocols *, const char*, const char*);

inline int soap_read___tds__GetNetworkProtocols(struct soap *soap, struct __tds__GetNetworkProtocols *p)
{
	if (p)
	{	soap_default___tds__GetNetworkProtocols(soap, p);
		if (soap_begin_recv(soap) || soap_get___tds__GetNetworkProtocols(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tds__SetNetworkInterfaces_DEFINED
#define SOAP_TYPE___tds__SetNetworkInterfaces_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__SetNetworkInterfaces(struct soap*, struct __tds__SetNetworkInterfaces *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__SetNetworkInterfaces(struct soap*, const struct __tds__SetNetworkInterfaces *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__SetNetworkInterfaces(struct soap*, const char*, int, const struct __tds__SetNetworkInterfaces *, const char*);
SOAP_FMAC3 struct __tds__SetNetworkInterfaces * SOAP_FMAC4 soap_in___tds__SetNetworkInterfaces(struct soap*, const char*, struct __tds__SetNetworkInterfaces *, const char*);
SOAP_FMAC1 struct __tds__SetNetworkInterfaces * SOAP_FMAC2 soap_instantiate___tds__SetNetworkInterfaces(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__SetNetworkInterfaces * soap_new___tds__SetNetworkInterfaces(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__SetNetworkInterfaces(soap, n, NULL, NULL, NULL);
}

inline struct __tds__SetNetworkInterfaces * soap_new_req___tds__SetNetworkInterfaces(
	struct soap *soap)
{
	struct __tds__SetNetworkInterfaces *_p = soap_new___tds__SetNetworkInterfaces(soap);
	if (_p)
	{	soap_default___tds__SetNetworkInterfaces(soap, _p);
	}
	return _p;
}

inline struct __tds__SetNetworkInterfaces * soap_new_set___tds__SetNetworkInterfaces(
	struct soap *soap,
	_tds__SetNetworkInterfaces *tds__SetNetworkInterfaces)
{
	struct __tds__SetNetworkInterfaces *_p = soap_new___tds__SetNetworkInterfaces(soap);
	if (_p)
	{	soap_default___tds__SetNetworkInterfaces(soap, _p);
		_p->tds__SetNetworkInterfaces = tds__SetNetworkInterfaces;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__SetNetworkInterfaces(struct soap*, const struct __tds__SetNetworkInterfaces *, const char*, const char*);

inline int soap_write___tds__SetNetworkInterfaces(struct soap *soap, struct __tds__SetNetworkInterfaces const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tds__SetNetworkInterfaces(soap, p), 0) || soap_put___tds__SetNetworkInterfaces(soap, p, "-tds:SetNetworkInterfaces", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__SetNetworkInterfaces * SOAP_FMAC4 soap_get___tds__SetNetworkInterfaces(struct soap*, struct __tds__SetNetworkInterfaces *, const char*, const char*);

inline int soap_read___tds__SetNetworkInterfaces(struct soap *soap, struct __tds__SetNetworkInterfaces *p)
{
	if (p)
	{	soap_default___tds__SetNetworkInterfaces(soap, p);
		if (soap_begin_recv(soap) || soap_get___tds__SetNetworkInterfaces(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tds__GetNetworkInterfaces_DEFINED
#define SOAP_TYPE___tds__GetNetworkInterfaces_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__GetNetworkInterfaces(struct soap*, struct __tds__GetNetworkInterfaces *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__GetNetworkInterfaces(struct soap*, const struct __tds__GetNetworkInterfaces *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__GetNetworkInterfaces(struct soap*, const char*, int, const struct __tds__GetNetworkInterfaces *, const char*);
SOAP_FMAC3 struct __tds__GetNetworkInterfaces * SOAP_FMAC4 soap_in___tds__GetNetworkInterfaces(struct soap*, const char*, struct __tds__GetNetworkInterfaces *, const char*);
SOAP_FMAC1 struct __tds__GetNetworkInterfaces * SOAP_FMAC2 soap_instantiate___tds__GetNetworkInterfaces(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__GetNetworkInterfaces * soap_new___tds__GetNetworkInterfaces(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__GetNetworkInterfaces(soap, n, NULL, NULL, NULL);
}

inline struct __tds__GetNetworkInterfaces * soap_new_req___tds__GetNetworkInterfaces(
	struct soap *soap)
{
	struct __tds__GetNetworkInterfaces *_p = soap_new___tds__GetNetworkInterfaces(soap);
	if (_p)
	{	soap_default___tds__GetNetworkInterfaces(soap, _p);
	}
	return _p;
}

inline struct __tds__GetNetworkInterfaces * soap_new_set___tds__GetNetworkInterfaces(
	struct soap *soap,
	_tds__GetNetworkInterfaces *tds__GetNetworkInterfaces)
{
	struct __tds__GetNetworkInterfaces *_p = soap_new___tds__GetNetworkInterfaces(soap);
	if (_p)
	{	soap_default___tds__GetNetworkInterfaces(soap, _p);
		_p->tds__GetNetworkInterfaces = tds__GetNetworkInterfaces;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__GetNetworkInterfaces(struct soap*, const struct __tds__GetNetworkInterfaces *, const char*, const char*);

inline int soap_write___tds__GetNetworkInterfaces(struct soap *soap, struct __tds__GetNetworkInterfaces const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tds__GetNetworkInterfaces(soap, p), 0) || soap_put___tds__GetNetworkInterfaces(soap, p, "-tds:GetNetworkInterfaces", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__GetNetworkInterfaces * SOAP_FMAC4 soap_get___tds__GetNetworkInterfaces(struct soap*, struct __tds__GetNetworkInterfaces *, const char*, const char*);

inline int soap_read___tds__GetNetworkInterfaces(struct soap *soap, struct __tds__GetNetworkInterfaces *p)
{
	if (p)
	{	soap_default___tds__GetNetworkInterfaces(soap, p);
		if (soap_begin_recv(soap) || soap_get___tds__GetNetworkInterfaces(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tds__SetDynamicDNS_DEFINED
#define SOAP_TYPE___tds__SetDynamicDNS_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__SetDynamicDNS(struct soap*, struct __tds__SetDynamicDNS *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__SetDynamicDNS(struct soap*, const struct __tds__SetDynamicDNS *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__SetDynamicDNS(struct soap*, const char*, int, const struct __tds__SetDynamicDNS *, const char*);
SOAP_FMAC3 struct __tds__SetDynamicDNS * SOAP_FMAC4 soap_in___tds__SetDynamicDNS(struct soap*, const char*, struct __tds__SetDynamicDNS *, const char*);
SOAP_FMAC1 struct __tds__SetDynamicDNS * SOAP_FMAC2 soap_instantiate___tds__SetDynamicDNS(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__SetDynamicDNS * soap_new___tds__SetDynamicDNS(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__SetDynamicDNS(soap, n, NULL, NULL, NULL);
}

inline struct __tds__SetDynamicDNS * soap_new_req___tds__SetDynamicDNS(
	struct soap *soap)
{
	struct __tds__SetDynamicDNS *_p = soap_new___tds__SetDynamicDNS(soap);
	if (_p)
	{	soap_default___tds__SetDynamicDNS(soap, _p);
	}
	return _p;
}

inline struct __tds__SetDynamicDNS * soap_new_set___tds__SetDynamicDNS(
	struct soap *soap,
	_tds__SetDynamicDNS *tds__SetDynamicDNS)
{
	struct __tds__SetDynamicDNS *_p = soap_new___tds__SetDynamicDNS(soap);
	if (_p)
	{	soap_default___tds__SetDynamicDNS(soap, _p);
		_p->tds__SetDynamicDNS = tds__SetDynamicDNS;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__SetDynamicDNS(struct soap*, const struct __tds__SetDynamicDNS *, const char*, const char*);

inline int soap_write___tds__SetDynamicDNS(struct soap *soap, struct __tds__SetDynamicDNS const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tds__SetDynamicDNS(soap, p), 0) || soap_put___tds__SetDynamicDNS(soap, p, "-tds:SetDynamicDNS", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__SetDynamicDNS * SOAP_FMAC4 soap_get___tds__SetDynamicDNS(struct soap*, struct __tds__SetDynamicDNS *, const char*, const char*);

inline int soap_read___tds__SetDynamicDNS(struct soap *soap, struct __tds__SetDynamicDNS *p)
{
	if (p)
	{	soap_default___tds__SetDynamicDNS(soap, p);
		if (soap_begin_recv(soap) || soap_get___tds__SetDynamicDNS(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tds__GetDynamicDNS_DEFINED
#define SOAP_TYPE___tds__GetDynamicDNS_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__GetDynamicDNS(struct soap*, struct __tds__GetDynamicDNS *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__GetDynamicDNS(struct soap*, const struct __tds__GetDynamicDNS *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__GetDynamicDNS(struct soap*, const char*, int, const struct __tds__GetDynamicDNS *, const char*);
SOAP_FMAC3 struct __tds__GetDynamicDNS * SOAP_FMAC4 soap_in___tds__GetDynamicDNS(struct soap*, const char*, struct __tds__GetDynamicDNS *, const char*);
SOAP_FMAC1 struct __tds__GetDynamicDNS * SOAP_FMAC2 soap_instantiate___tds__GetDynamicDNS(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__GetDynamicDNS * soap_new___tds__GetDynamicDNS(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__GetDynamicDNS(soap, n, NULL, NULL, NULL);
}

inline struct __tds__GetDynamicDNS * soap_new_req___tds__GetDynamicDNS(
	struct soap *soap)
{
	struct __tds__GetDynamicDNS *_p = soap_new___tds__GetDynamicDNS(soap);
	if (_p)
	{	soap_default___tds__GetDynamicDNS(soap, _p);
	}
	return _p;
}

inline struct __tds__GetDynamicDNS * soap_new_set___tds__GetDynamicDNS(
	struct soap *soap,
	_tds__GetDynamicDNS *tds__GetDynamicDNS)
{
	struct __tds__GetDynamicDNS *_p = soap_new___tds__GetDynamicDNS(soap);
	if (_p)
	{	soap_default___tds__GetDynamicDNS(soap, _p);
		_p->tds__GetDynamicDNS = tds__GetDynamicDNS;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__GetDynamicDNS(struct soap*, const struct __tds__GetDynamicDNS *, const char*, const char*);

inline int soap_write___tds__GetDynamicDNS(struct soap *soap, struct __tds__GetDynamicDNS const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tds__GetDynamicDNS(soap, p), 0) || soap_put___tds__GetDynamicDNS(soap, p, "-tds:GetDynamicDNS", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__GetDynamicDNS * SOAP_FMAC4 soap_get___tds__GetDynamicDNS(struct soap*, struct __tds__GetDynamicDNS *, const char*, const char*);

inline int soap_read___tds__GetDynamicDNS(struct soap *soap, struct __tds__GetDynamicDNS *p)
{
	if (p)
	{	soap_default___tds__GetDynamicDNS(soap, p);
		if (soap_begin_recv(soap) || soap_get___tds__GetDynamicDNS(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tds__SetNTP_DEFINED
#define SOAP_TYPE___tds__SetNTP_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__SetNTP(struct soap*, struct __tds__SetNTP *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__SetNTP(struct soap*, const struct __tds__SetNTP *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__SetNTP(struct soap*, const char*, int, const struct __tds__SetNTP *, const char*);
SOAP_FMAC3 struct __tds__SetNTP * SOAP_FMAC4 soap_in___tds__SetNTP(struct soap*, const char*, struct __tds__SetNTP *, const char*);
SOAP_FMAC1 struct __tds__SetNTP * SOAP_FMAC2 soap_instantiate___tds__SetNTP(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__SetNTP * soap_new___tds__SetNTP(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__SetNTP(soap, n, NULL, NULL, NULL);
}

inline struct __tds__SetNTP * soap_new_req___tds__SetNTP(
	struct soap *soap)
{
	struct __tds__SetNTP *_p = soap_new___tds__SetNTP(soap);
	if (_p)
	{	soap_default___tds__SetNTP(soap, _p);
	}
	return _p;
}

inline struct __tds__SetNTP * soap_new_set___tds__SetNTP(
	struct soap *soap,
	_tds__SetNTP *tds__SetNTP)
{
	struct __tds__SetNTP *_p = soap_new___tds__SetNTP(soap);
	if (_p)
	{	soap_default___tds__SetNTP(soap, _p);
		_p->tds__SetNTP = tds__SetNTP;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__SetNTP(struct soap*, const struct __tds__SetNTP *, const char*, const char*);

inline int soap_write___tds__SetNTP(struct soap *soap, struct __tds__SetNTP const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tds__SetNTP(soap, p), 0) || soap_put___tds__SetNTP(soap, p, "-tds:SetNTP", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__SetNTP * SOAP_FMAC4 soap_get___tds__SetNTP(struct soap*, struct __tds__SetNTP *, const char*, const char*);

inline int soap_read___tds__SetNTP(struct soap *soap, struct __tds__SetNTP *p)
{
	if (p)
	{	soap_default___tds__SetNTP(soap, p);
		if (soap_begin_recv(soap) || soap_get___tds__SetNTP(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tds__GetNTP_DEFINED
#define SOAP_TYPE___tds__GetNTP_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__GetNTP(struct soap*, struct __tds__GetNTP *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__GetNTP(struct soap*, const struct __tds__GetNTP *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__GetNTP(struct soap*, const char*, int, const struct __tds__GetNTP *, const char*);
SOAP_FMAC3 struct __tds__GetNTP * SOAP_FMAC4 soap_in___tds__GetNTP(struct soap*, const char*, struct __tds__GetNTP *, const char*);
SOAP_FMAC1 struct __tds__GetNTP * SOAP_FMAC2 soap_instantiate___tds__GetNTP(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__GetNTP * soap_new___tds__GetNTP(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__GetNTP(soap, n, NULL, NULL, NULL);
}

inline struct __tds__GetNTP * soap_new_req___tds__GetNTP(
	struct soap *soap)
{
	struct __tds__GetNTP *_p = soap_new___tds__GetNTP(soap);
	if (_p)
	{	soap_default___tds__GetNTP(soap, _p);
	}
	return _p;
}

inline struct __tds__GetNTP * soap_new_set___tds__GetNTP(
	struct soap *soap,
	_tds__GetNTP *tds__GetNTP)
{
	struct __tds__GetNTP *_p = soap_new___tds__GetNTP(soap);
	if (_p)
	{	soap_default___tds__GetNTP(soap, _p);
		_p->tds__GetNTP = tds__GetNTP;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__GetNTP(struct soap*, const struct __tds__GetNTP *, const char*, const char*);

inline int soap_write___tds__GetNTP(struct soap *soap, struct __tds__GetNTP const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tds__GetNTP(soap, p), 0) || soap_put___tds__GetNTP(soap, p, "-tds:GetNTP", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__GetNTP * SOAP_FMAC4 soap_get___tds__GetNTP(struct soap*, struct __tds__GetNTP *, const char*, const char*);

inline int soap_read___tds__GetNTP(struct soap *soap, struct __tds__GetNTP *p)
{
	if (p)
	{	soap_default___tds__GetNTP(soap, p);
		if (soap_begin_recv(soap) || soap_get___tds__GetNTP(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tds__SetDNS_DEFINED
#define SOAP_TYPE___tds__SetDNS_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__SetDNS(struct soap*, struct __tds__SetDNS *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__SetDNS(struct soap*, const struct __tds__SetDNS *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__SetDNS(struct soap*, const char*, int, const struct __tds__SetDNS *, const char*);
SOAP_FMAC3 struct __tds__SetDNS * SOAP_FMAC4 soap_in___tds__SetDNS(struct soap*, const char*, struct __tds__SetDNS *, const char*);
SOAP_FMAC1 struct __tds__SetDNS * SOAP_FMAC2 soap_instantiate___tds__SetDNS(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__SetDNS * soap_new___tds__SetDNS(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__SetDNS(soap, n, NULL, NULL, NULL);
}

inline struct __tds__SetDNS * soap_new_req___tds__SetDNS(
	struct soap *soap)
{
	struct __tds__SetDNS *_p = soap_new___tds__SetDNS(soap);
	if (_p)
	{	soap_default___tds__SetDNS(soap, _p);
	}
	return _p;
}

inline struct __tds__SetDNS * soap_new_set___tds__SetDNS(
	struct soap *soap,
	_tds__SetDNS *tds__SetDNS)
{
	struct __tds__SetDNS *_p = soap_new___tds__SetDNS(soap);
	if (_p)
	{	soap_default___tds__SetDNS(soap, _p);
		_p->tds__SetDNS = tds__SetDNS;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__SetDNS(struct soap*, const struct __tds__SetDNS *, const char*, const char*);

inline int soap_write___tds__SetDNS(struct soap *soap, struct __tds__SetDNS const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tds__SetDNS(soap, p), 0) || soap_put___tds__SetDNS(soap, p, "-tds:SetDNS", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__SetDNS * SOAP_FMAC4 soap_get___tds__SetDNS(struct soap*, struct __tds__SetDNS *, const char*, const char*);

inline int soap_read___tds__SetDNS(struct soap *soap, struct __tds__SetDNS *p)
{
	if (p)
	{	soap_default___tds__SetDNS(soap, p);
		if (soap_begin_recv(soap) || soap_get___tds__SetDNS(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tds__GetDNS_DEFINED
#define SOAP_TYPE___tds__GetDNS_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__GetDNS(struct soap*, struct __tds__GetDNS *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__GetDNS(struct soap*, const struct __tds__GetDNS *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__GetDNS(struct soap*, const char*, int, const struct __tds__GetDNS *, const char*);
SOAP_FMAC3 struct __tds__GetDNS * SOAP_FMAC4 soap_in___tds__GetDNS(struct soap*, const char*, struct __tds__GetDNS *, const char*);
SOAP_FMAC1 struct __tds__GetDNS * SOAP_FMAC2 soap_instantiate___tds__GetDNS(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__GetDNS * soap_new___tds__GetDNS(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__GetDNS(soap, n, NULL, NULL, NULL);
}

inline struct __tds__GetDNS * soap_new_req___tds__GetDNS(
	struct soap *soap)
{
	struct __tds__GetDNS *_p = soap_new___tds__GetDNS(soap);
	if (_p)
	{	soap_default___tds__GetDNS(soap, _p);
	}
	return _p;
}

inline struct __tds__GetDNS * soap_new_set___tds__GetDNS(
	struct soap *soap,
	_tds__GetDNS *tds__GetDNS)
{
	struct __tds__GetDNS *_p = soap_new___tds__GetDNS(soap);
	if (_p)
	{	soap_default___tds__GetDNS(soap, _p);
		_p->tds__GetDNS = tds__GetDNS;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__GetDNS(struct soap*, const struct __tds__GetDNS *, const char*, const char*);

inline int soap_write___tds__GetDNS(struct soap *soap, struct __tds__GetDNS const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tds__GetDNS(soap, p), 0) || soap_put___tds__GetDNS(soap, p, "-tds:GetDNS", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__GetDNS * SOAP_FMAC4 soap_get___tds__GetDNS(struct soap*, struct __tds__GetDNS *, const char*, const char*);

inline int soap_read___tds__GetDNS(struct soap *soap, struct __tds__GetDNS *p)
{
	if (p)
	{	soap_default___tds__GetDNS(soap, p);
		if (soap_begin_recv(soap) || soap_get___tds__GetDNS(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tds__SetHostnameFromDHCP_DEFINED
#define SOAP_TYPE___tds__SetHostnameFromDHCP_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__SetHostnameFromDHCP(struct soap*, struct __tds__SetHostnameFromDHCP *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__SetHostnameFromDHCP(struct soap*, const struct __tds__SetHostnameFromDHCP *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__SetHostnameFromDHCP(struct soap*, const char*, int, const struct __tds__SetHostnameFromDHCP *, const char*);
SOAP_FMAC3 struct __tds__SetHostnameFromDHCP * SOAP_FMAC4 soap_in___tds__SetHostnameFromDHCP(struct soap*, const char*, struct __tds__SetHostnameFromDHCP *, const char*);
SOAP_FMAC1 struct __tds__SetHostnameFromDHCP * SOAP_FMAC2 soap_instantiate___tds__SetHostnameFromDHCP(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__SetHostnameFromDHCP * soap_new___tds__SetHostnameFromDHCP(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__SetHostnameFromDHCP(soap, n, NULL, NULL, NULL);
}

inline struct __tds__SetHostnameFromDHCP * soap_new_req___tds__SetHostnameFromDHCP(
	struct soap *soap)
{
	struct __tds__SetHostnameFromDHCP *_p = soap_new___tds__SetHostnameFromDHCP(soap);
	if (_p)
	{	soap_default___tds__SetHostnameFromDHCP(soap, _p);
	}
	return _p;
}

inline struct __tds__SetHostnameFromDHCP * soap_new_set___tds__SetHostnameFromDHCP(
	struct soap *soap,
	_tds__SetHostnameFromDHCP *tds__SetHostnameFromDHCP)
{
	struct __tds__SetHostnameFromDHCP *_p = soap_new___tds__SetHostnameFromDHCP(soap);
	if (_p)
	{	soap_default___tds__SetHostnameFromDHCP(soap, _p);
		_p->tds__SetHostnameFromDHCP = tds__SetHostnameFromDHCP;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__SetHostnameFromDHCP(struct soap*, const struct __tds__SetHostnameFromDHCP *, const char*, const char*);

inline int soap_write___tds__SetHostnameFromDHCP(struct soap *soap, struct __tds__SetHostnameFromDHCP const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tds__SetHostnameFromDHCP(soap, p), 0) || soap_put___tds__SetHostnameFromDHCP(soap, p, "-tds:SetHostnameFromDHCP", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__SetHostnameFromDHCP * SOAP_FMAC4 soap_get___tds__SetHostnameFromDHCP(struct soap*, struct __tds__SetHostnameFromDHCP *, const char*, const char*);

inline int soap_read___tds__SetHostnameFromDHCP(struct soap *soap, struct __tds__SetHostnameFromDHCP *p)
{
	if (p)
	{	soap_default___tds__SetHostnameFromDHCP(soap, p);
		if (soap_begin_recv(soap) || soap_get___tds__SetHostnameFromDHCP(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tds__SetHostname_DEFINED
#define SOAP_TYPE___tds__SetHostname_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__SetHostname(struct soap*, struct __tds__SetHostname *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__SetHostname(struct soap*, const struct __tds__SetHostname *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__SetHostname(struct soap*, const char*, int, const struct __tds__SetHostname *, const char*);
SOAP_FMAC3 struct __tds__SetHostname * SOAP_FMAC4 soap_in___tds__SetHostname(struct soap*, const char*, struct __tds__SetHostname *, const char*);
SOAP_FMAC1 struct __tds__SetHostname * SOAP_FMAC2 soap_instantiate___tds__SetHostname(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__SetHostname * soap_new___tds__SetHostname(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__SetHostname(soap, n, NULL, NULL, NULL);
}

inline struct __tds__SetHostname * soap_new_req___tds__SetHostname(
	struct soap *soap)
{
	struct __tds__SetHostname *_p = soap_new___tds__SetHostname(soap);
	if (_p)
	{	soap_default___tds__SetHostname(soap, _p);
	}
	return _p;
}

inline struct __tds__SetHostname * soap_new_set___tds__SetHostname(
	struct soap *soap,
	_tds__SetHostname *tds__SetHostname)
{
	struct __tds__SetHostname *_p = soap_new___tds__SetHostname(soap);
	if (_p)
	{	soap_default___tds__SetHostname(soap, _p);
		_p->tds__SetHostname = tds__SetHostname;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__SetHostname(struct soap*, const struct __tds__SetHostname *, const char*, const char*);

inline int soap_write___tds__SetHostname(struct soap *soap, struct __tds__SetHostname const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tds__SetHostname(soap, p), 0) || soap_put___tds__SetHostname(soap, p, "-tds:SetHostname", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__SetHostname * SOAP_FMAC4 soap_get___tds__SetHostname(struct soap*, struct __tds__SetHostname *, const char*, const char*);

inline int soap_read___tds__SetHostname(struct soap *soap, struct __tds__SetHostname *p)
{
	if (p)
	{	soap_default___tds__SetHostname(soap, p);
		if (soap_begin_recv(soap) || soap_get___tds__SetHostname(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tds__GetHostname_DEFINED
#define SOAP_TYPE___tds__GetHostname_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__GetHostname(struct soap*, struct __tds__GetHostname *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__GetHostname(struct soap*, const struct __tds__GetHostname *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__GetHostname(struct soap*, const char*, int, const struct __tds__GetHostname *, const char*);
SOAP_FMAC3 struct __tds__GetHostname * SOAP_FMAC4 soap_in___tds__GetHostname(struct soap*, const char*, struct __tds__GetHostname *, const char*);
SOAP_FMAC1 struct __tds__GetHostname * SOAP_FMAC2 soap_instantiate___tds__GetHostname(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__GetHostname * soap_new___tds__GetHostname(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__GetHostname(soap, n, NULL, NULL, NULL);
}

inline struct __tds__GetHostname * soap_new_req___tds__GetHostname(
	struct soap *soap)
{
	struct __tds__GetHostname *_p = soap_new___tds__GetHostname(soap);
	if (_p)
	{	soap_default___tds__GetHostname(soap, _p);
	}
	return _p;
}

inline struct __tds__GetHostname * soap_new_set___tds__GetHostname(
	struct soap *soap,
	_tds__GetHostname *tds__GetHostname)
{
	struct __tds__GetHostname *_p = soap_new___tds__GetHostname(soap);
	if (_p)
	{	soap_default___tds__GetHostname(soap, _p);
		_p->tds__GetHostname = tds__GetHostname;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__GetHostname(struct soap*, const struct __tds__GetHostname *, const char*, const char*);

inline int soap_write___tds__GetHostname(struct soap *soap, struct __tds__GetHostname const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tds__GetHostname(soap, p), 0) || soap_put___tds__GetHostname(soap, p, "-tds:GetHostname", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__GetHostname * SOAP_FMAC4 soap_get___tds__GetHostname(struct soap*, struct __tds__GetHostname *, const char*, const char*);

inline int soap_read___tds__GetHostname(struct soap *soap, struct __tds__GetHostname *p)
{
	if (p)
	{	soap_default___tds__GetHostname(soap, p);
		if (soap_begin_recv(soap) || soap_get___tds__GetHostname(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tds__SetDPAddresses_DEFINED
#define SOAP_TYPE___tds__SetDPAddresses_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__SetDPAddresses(struct soap*, struct __tds__SetDPAddresses *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__SetDPAddresses(struct soap*, const struct __tds__SetDPAddresses *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__SetDPAddresses(struct soap*, const char*, int, const struct __tds__SetDPAddresses *, const char*);
SOAP_FMAC3 struct __tds__SetDPAddresses * SOAP_FMAC4 soap_in___tds__SetDPAddresses(struct soap*, const char*, struct __tds__SetDPAddresses *, const char*);
SOAP_FMAC1 struct __tds__SetDPAddresses * SOAP_FMAC2 soap_instantiate___tds__SetDPAddresses(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__SetDPAddresses * soap_new___tds__SetDPAddresses(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__SetDPAddresses(soap, n, NULL, NULL, NULL);
}

inline struct __tds__SetDPAddresses * soap_new_req___tds__SetDPAddresses(
	struct soap *soap)
{
	struct __tds__SetDPAddresses *_p = soap_new___tds__SetDPAddresses(soap);
	if (_p)
	{	soap_default___tds__SetDPAddresses(soap, _p);
	}
	return _p;
}

inline struct __tds__SetDPAddresses * soap_new_set___tds__SetDPAddresses(
	struct soap *soap,
	_tds__SetDPAddresses *tds__SetDPAddresses)
{
	struct __tds__SetDPAddresses *_p = soap_new___tds__SetDPAddresses(soap);
	if (_p)
	{	soap_default___tds__SetDPAddresses(soap, _p);
		_p->tds__SetDPAddresses = tds__SetDPAddresses;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__SetDPAddresses(struct soap*, const struct __tds__SetDPAddresses *, const char*, const char*);

inline int soap_write___tds__SetDPAddresses(struct soap *soap, struct __tds__SetDPAddresses const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tds__SetDPAddresses(soap, p), 0) || soap_put___tds__SetDPAddresses(soap, p, "-tds:SetDPAddresses", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__SetDPAddresses * SOAP_FMAC4 soap_get___tds__SetDPAddresses(struct soap*, struct __tds__SetDPAddresses *, const char*, const char*);

inline int soap_read___tds__SetDPAddresses(struct soap *soap, struct __tds__SetDPAddresses *p)
{
	if (p)
	{	soap_default___tds__SetDPAddresses(soap, p);
		if (soap_begin_recv(soap) || soap_get___tds__SetDPAddresses(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tds__GetCapabilities_DEFINED
#define SOAP_TYPE___tds__GetCapabilities_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__GetCapabilities(struct soap*, struct __tds__GetCapabilities *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__GetCapabilities(struct soap*, const struct __tds__GetCapabilities *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__GetCapabilities(struct soap*, const char*, int, const struct __tds__GetCapabilities *, const char*);
SOAP_FMAC3 struct __tds__GetCapabilities * SOAP_FMAC4 soap_in___tds__GetCapabilities(struct soap*, const char*, struct __tds__GetCapabilities *, const char*);
SOAP_FMAC1 struct __tds__GetCapabilities * SOAP_FMAC2 soap_instantiate___tds__GetCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__GetCapabilities * soap_new___tds__GetCapabilities(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__GetCapabilities(soap, n, NULL, NULL, NULL);
}

inline struct __tds__GetCapabilities * soap_new_req___tds__GetCapabilities(
	struct soap *soap)
{
	struct __tds__GetCapabilities *_p = soap_new___tds__GetCapabilities(soap);
	if (_p)
	{	soap_default___tds__GetCapabilities(soap, _p);
	}
	return _p;
}

inline struct __tds__GetCapabilities * soap_new_set___tds__GetCapabilities(
	struct soap *soap,
	_tds__GetCapabilities *tds__GetCapabilities)
{
	struct __tds__GetCapabilities *_p = soap_new___tds__GetCapabilities(soap);
	if (_p)
	{	soap_default___tds__GetCapabilities(soap, _p);
		_p->tds__GetCapabilities = tds__GetCapabilities;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__GetCapabilities(struct soap*, const struct __tds__GetCapabilities *, const char*, const char*);

inline int soap_write___tds__GetCapabilities(struct soap *soap, struct __tds__GetCapabilities const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tds__GetCapabilities(soap, p), 0) || soap_put___tds__GetCapabilities(soap, p, "-tds:GetCapabilities", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__GetCapabilities * SOAP_FMAC4 soap_get___tds__GetCapabilities(struct soap*, struct __tds__GetCapabilities *, const char*, const char*);

inline int soap_read___tds__GetCapabilities(struct soap *soap, struct __tds__GetCapabilities *p)
{
	if (p)
	{	soap_default___tds__GetCapabilities(soap, p);
		if (soap_begin_recv(soap) || soap_get___tds__GetCapabilities(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tds__GetWsdlUrl_DEFINED
#define SOAP_TYPE___tds__GetWsdlUrl_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__GetWsdlUrl(struct soap*, struct __tds__GetWsdlUrl *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__GetWsdlUrl(struct soap*, const struct __tds__GetWsdlUrl *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__GetWsdlUrl(struct soap*, const char*, int, const struct __tds__GetWsdlUrl *, const char*);
SOAP_FMAC3 struct __tds__GetWsdlUrl * SOAP_FMAC4 soap_in___tds__GetWsdlUrl(struct soap*, const char*, struct __tds__GetWsdlUrl *, const char*);
SOAP_FMAC1 struct __tds__GetWsdlUrl * SOAP_FMAC2 soap_instantiate___tds__GetWsdlUrl(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__GetWsdlUrl * soap_new___tds__GetWsdlUrl(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__GetWsdlUrl(soap, n, NULL, NULL, NULL);
}

inline struct __tds__GetWsdlUrl * soap_new_req___tds__GetWsdlUrl(
	struct soap *soap)
{
	struct __tds__GetWsdlUrl *_p = soap_new___tds__GetWsdlUrl(soap);
	if (_p)
	{	soap_default___tds__GetWsdlUrl(soap, _p);
	}
	return _p;
}

inline struct __tds__GetWsdlUrl * soap_new_set___tds__GetWsdlUrl(
	struct soap *soap,
	_tds__GetWsdlUrl *tds__GetWsdlUrl)
{
	struct __tds__GetWsdlUrl *_p = soap_new___tds__GetWsdlUrl(soap);
	if (_p)
	{	soap_default___tds__GetWsdlUrl(soap, _p);
		_p->tds__GetWsdlUrl = tds__GetWsdlUrl;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__GetWsdlUrl(struct soap*, const struct __tds__GetWsdlUrl *, const char*, const char*);

inline int soap_write___tds__GetWsdlUrl(struct soap *soap, struct __tds__GetWsdlUrl const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tds__GetWsdlUrl(soap, p), 0) || soap_put___tds__GetWsdlUrl(soap, p, "-tds:GetWsdlUrl", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__GetWsdlUrl * SOAP_FMAC4 soap_get___tds__GetWsdlUrl(struct soap*, struct __tds__GetWsdlUrl *, const char*, const char*);

inline int soap_read___tds__GetWsdlUrl(struct soap *soap, struct __tds__GetWsdlUrl *p)
{
	if (p)
	{	soap_default___tds__GetWsdlUrl(soap, p);
		if (soap_begin_recv(soap) || soap_get___tds__GetWsdlUrl(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tds__SetUser_DEFINED
#define SOAP_TYPE___tds__SetUser_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__SetUser(struct soap*, struct __tds__SetUser *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__SetUser(struct soap*, const struct __tds__SetUser *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__SetUser(struct soap*, const char*, int, const struct __tds__SetUser *, const char*);
SOAP_FMAC3 struct __tds__SetUser * SOAP_FMAC4 soap_in___tds__SetUser(struct soap*, const char*, struct __tds__SetUser *, const char*);
SOAP_FMAC1 struct __tds__SetUser * SOAP_FMAC2 soap_instantiate___tds__SetUser(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__SetUser * soap_new___tds__SetUser(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__SetUser(soap, n, NULL, NULL, NULL);
}

inline struct __tds__SetUser * soap_new_req___tds__SetUser(
	struct soap *soap)
{
	struct __tds__SetUser *_p = soap_new___tds__SetUser(soap);
	if (_p)
	{	soap_default___tds__SetUser(soap, _p);
	}
	return _p;
}

inline struct __tds__SetUser * soap_new_set___tds__SetUser(
	struct soap *soap,
	_tds__SetUser *tds__SetUser)
{
	struct __tds__SetUser *_p = soap_new___tds__SetUser(soap);
	if (_p)
	{	soap_default___tds__SetUser(soap, _p);
		_p->tds__SetUser = tds__SetUser;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__SetUser(struct soap*, const struct __tds__SetUser *, const char*, const char*);

inline int soap_write___tds__SetUser(struct soap *soap, struct __tds__SetUser const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tds__SetUser(soap, p), 0) || soap_put___tds__SetUser(soap, p, "-tds:SetUser", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__SetUser * SOAP_FMAC4 soap_get___tds__SetUser(struct soap*, struct __tds__SetUser *, const char*, const char*);

inline int soap_read___tds__SetUser(struct soap *soap, struct __tds__SetUser *p)
{
	if (p)
	{	soap_default___tds__SetUser(soap, p);
		if (soap_begin_recv(soap) || soap_get___tds__SetUser(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tds__DeleteUsers_DEFINED
#define SOAP_TYPE___tds__DeleteUsers_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__DeleteUsers(struct soap*, struct __tds__DeleteUsers *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__DeleteUsers(struct soap*, const struct __tds__DeleteUsers *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__DeleteUsers(struct soap*, const char*, int, const struct __tds__DeleteUsers *, const char*);
SOAP_FMAC3 struct __tds__DeleteUsers * SOAP_FMAC4 soap_in___tds__DeleteUsers(struct soap*, const char*, struct __tds__DeleteUsers *, const char*);
SOAP_FMAC1 struct __tds__DeleteUsers * SOAP_FMAC2 soap_instantiate___tds__DeleteUsers(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__DeleteUsers * soap_new___tds__DeleteUsers(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__DeleteUsers(soap, n, NULL, NULL, NULL);
}

inline struct __tds__DeleteUsers * soap_new_req___tds__DeleteUsers(
	struct soap *soap)
{
	struct __tds__DeleteUsers *_p = soap_new___tds__DeleteUsers(soap);
	if (_p)
	{	soap_default___tds__DeleteUsers(soap, _p);
	}
	return _p;
}

inline struct __tds__DeleteUsers * soap_new_set___tds__DeleteUsers(
	struct soap *soap,
	_tds__DeleteUsers *tds__DeleteUsers)
{
	struct __tds__DeleteUsers *_p = soap_new___tds__DeleteUsers(soap);
	if (_p)
	{	soap_default___tds__DeleteUsers(soap, _p);
		_p->tds__DeleteUsers = tds__DeleteUsers;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__DeleteUsers(struct soap*, const struct __tds__DeleteUsers *, const char*, const char*);

inline int soap_write___tds__DeleteUsers(struct soap *soap, struct __tds__DeleteUsers const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tds__DeleteUsers(soap, p), 0) || soap_put___tds__DeleteUsers(soap, p, "-tds:DeleteUsers", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__DeleteUsers * SOAP_FMAC4 soap_get___tds__DeleteUsers(struct soap*, struct __tds__DeleteUsers *, const char*, const char*);

inline int soap_read___tds__DeleteUsers(struct soap *soap, struct __tds__DeleteUsers *p)
{
	if (p)
	{	soap_default___tds__DeleteUsers(soap, p);
		if (soap_begin_recv(soap) || soap_get___tds__DeleteUsers(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tds__CreateUsers_DEFINED
#define SOAP_TYPE___tds__CreateUsers_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__CreateUsers(struct soap*, struct __tds__CreateUsers *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__CreateUsers(struct soap*, const struct __tds__CreateUsers *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__CreateUsers(struct soap*, const char*, int, const struct __tds__CreateUsers *, const char*);
SOAP_FMAC3 struct __tds__CreateUsers * SOAP_FMAC4 soap_in___tds__CreateUsers(struct soap*, const char*, struct __tds__CreateUsers *, const char*);
SOAP_FMAC1 struct __tds__CreateUsers * SOAP_FMAC2 soap_instantiate___tds__CreateUsers(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__CreateUsers * soap_new___tds__CreateUsers(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__CreateUsers(soap, n, NULL, NULL, NULL);
}

inline struct __tds__CreateUsers * soap_new_req___tds__CreateUsers(
	struct soap *soap)
{
	struct __tds__CreateUsers *_p = soap_new___tds__CreateUsers(soap);
	if (_p)
	{	soap_default___tds__CreateUsers(soap, _p);
	}
	return _p;
}

inline struct __tds__CreateUsers * soap_new_set___tds__CreateUsers(
	struct soap *soap,
	_tds__CreateUsers *tds__CreateUsers)
{
	struct __tds__CreateUsers *_p = soap_new___tds__CreateUsers(soap);
	if (_p)
	{	soap_default___tds__CreateUsers(soap, _p);
		_p->tds__CreateUsers = tds__CreateUsers;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__CreateUsers(struct soap*, const struct __tds__CreateUsers *, const char*, const char*);

inline int soap_write___tds__CreateUsers(struct soap *soap, struct __tds__CreateUsers const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tds__CreateUsers(soap, p), 0) || soap_put___tds__CreateUsers(soap, p, "-tds:CreateUsers", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__CreateUsers * SOAP_FMAC4 soap_get___tds__CreateUsers(struct soap*, struct __tds__CreateUsers *, const char*, const char*);

inline int soap_read___tds__CreateUsers(struct soap *soap, struct __tds__CreateUsers *p)
{
	if (p)
	{	soap_default___tds__CreateUsers(soap, p);
		if (soap_begin_recv(soap) || soap_get___tds__CreateUsers(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tds__GetUsers_DEFINED
#define SOAP_TYPE___tds__GetUsers_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__GetUsers(struct soap*, struct __tds__GetUsers *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__GetUsers(struct soap*, const struct __tds__GetUsers *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__GetUsers(struct soap*, const char*, int, const struct __tds__GetUsers *, const char*);
SOAP_FMAC3 struct __tds__GetUsers * SOAP_FMAC4 soap_in___tds__GetUsers(struct soap*, const char*, struct __tds__GetUsers *, const char*);
SOAP_FMAC1 struct __tds__GetUsers * SOAP_FMAC2 soap_instantiate___tds__GetUsers(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__GetUsers * soap_new___tds__GetUsers(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__GetUsers(soap, n, NULL, NULL, NULL);
}

inline struct __tds__GetUsers * soap_new_req___tds__GetUsers(
	struct soap *soap)
{
	struct __tds__GetUsers *_p = soap_new___tds__GetUsers(soap);
	if (_p)
	{	soap_default___tds__GetUsers(soap, _p);
	}
	return _p;
}

inline struct __tds__GetUsers * soap_new_set___tds__GetUsers(
	struct soap *soap,
	_tds__GetUsers *tds__GetUsers)
{
	struct __tds__GetUsers *_p = soap_new___tds__GetUsers(soap);
	if (_p)
	{	soap_default___tds__GetUsers(soap, _p);
		_p->tds__GetUsers = tds__GetUsers;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__GetUsers(struct soap*, const struct __tds__GetUsers *, const char*, const char*);

inline int soap_write___tds__GetUsers(struct soap *soap, struct __tds__GetUsers const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tds__GetUsers(soap, p), 0) || soap_put___tds__GetUsers(soap, p, "-tds:GetUsers", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__GetUsers * SOAP_FMAC4 soap_get___tds__GetUsers(struct soap*, struct __tds__GetUsers *, const char*, const char*);

inline int soap_read___tds__GetUsers(struct soap *soap, struct __tds__GetUsers *p)
{
	if (p)
	{	soap_default___tds__GetUsers(soap, p);
		if (soap_begin_recv(soap) || soap_get___tds__GetUsers(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tds__SetRemoteUser_DEFINED
#define SOAP_TYPE___tds__SetRemoteUser_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__SetRemoteUser(struct soap*, struct __tds__SetRemoteUser *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__SetRemoteUser(struct soap*, const struct __tds__SetRemoteUser *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__SetRemoteUser(struct soap*, const char*, int, const struct __tds__SetRemoteUser *, const char*);
SOAP_FMAC3 struct __tds__SetRemoteUser * SOAP_FMAC4 soap_in___tds__SetRemoteUser(struct soap*, const char*, struct __tds__SetRemoteUser *, const char*);
SOAP_FMAC1 struct __tds__SetRemoteUser * SOAP_FMAC2 soap_instantiate___tds__SetRemoteUser(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__SetRemoteUser * soap_new___tds__SetRemoteUser(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__SetRemoteUser(soap, n, NULL, NULL, NULL);
}

inline struct __tds__SetRemoteUser * soap_new_req___tds__SetRemoteUser(
	struct soap *soap)
{
	struct __tds__SetRemoteUser *_p = soap_new___tds__SetRemoteUser(soap);
	if (_p)
	{	soap_default___tds__SetRemoteUser(soap, _p);
	}
	return _p;
}

inline struct __tds__SetRemoteUser * soap_new_set___tds__SetRemoteUser(
	struct soap *soap,
	_tds__SetRemoteUser *tds__SetRemoteUser)
{
	struct __tds__SetRemoteUser *_p = soap_new___tds__SetRemoteUser(soap);
	if (_p)
	{	soap_default___tds__SetRemoteUser(soap, _p);
		_p->tds__SetRemoteUser = tds__SetRemoteUser;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__SetRemoteUser(struct soap*, const struct __tds__SetRemoteUser *, const char*, const char*);

inline int soap_write___tds__SetRemoteUser(struct soap *soap, struct __tds__SetRemoteUser const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tds__SetRemoteUser(soap, p), 0) || soap_put___tds__SetRemoteUser(soap, p, "-tds:SetRemoteUser", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__SetRemoteUser * SOAP_FMAC4 soap_get___tds__SetRemoteUser(struct soap*, struct __tds__SetRemoteUser *, const char*, const char*);

inline int soap_read___tds__SetRemoteUser(struct soap *soap, struct __tds__SetRemoteUser *p)
{
	if (p)
	{	soap_default___tds__SetRemoteUser(soap, p);
		if (soap_begin_recv(soap) || soap_get___tds__SetRemoteUser(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tds__GetRemoteUser_DEFINED
#define SOAP_TYPE___tds__GetRemoteUser_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__GetRemoteUser(struct soap*, struct __tds__GetRemoteUser *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__GetRemoteUser(struct soap*, const struct __tds__GetRemoteUser *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__GetRemoteUser(struct soap*, const char*, int, const struct __tds__GetRemoteUser *, const char*);
SOAP_FMAC3 struct __tds__GetRemoteUser * SOAP_FMAC4 soap_in___tds__GetRemoteUser(struct soap*, const char*, struct __tds__GetRemoteUser *, const char*);
SOAP_FMAC1 struct __tds__GetRemoteUser * SOAP_FMAC2 soap_instantiate___tds__GetRemoteUser(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__GetRemoteUser * soap_new___tds__GetRemoteUser(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__GetRemoteUser(soap, n, NULL, NULL, NULL);
}

inline struct __tds__GetRemoteUser * soap_new_req___tds__GetRemoteUser(
	struct soap *soap)
{
	struct __tds__GetRemoteUser *_p = soap_new___tds__GetRemoteUser(soap);
	if (_p)
	{	soap_default___tds__GetRemoteUser(soap, _p);
	}
	return _p;
}

inline struct __tds__GetRemoteUser * soap_new_set___tds__GetRemoteUser(
	struct soap *soap,
	_tds__GetRemoteUser *tds__GetRemoteUser)
{
	struct __tds__GetRemoteUser *_p = soap_new___tds__GetRemoteUser(soap);
	if (_p)
	{	soap_default___tds__GetRemoteUser(soap, _p);
		_p->tds__GetRemoteUser = tds__GetRemoteUser;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__GetRemoteUser(struct soap*, const struct __tds__GetRemoteUser *, const char*, const char*);

inline int soap_write___tds__GetRemoteUser(struct soap *soap, struct __tds__GetRemoteUser const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tds__GetRemoteUser(soap, p), 0) || soap_put___tds__GetRemoteUser(soap, p, "-tds:GetRemoteUser", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__GetRemoteUser * SOAP_FMAC4 soap_get___tds__GetRemoteUser(struct soap*, struct __tds__GetRemoteUser *, const char*, const char*);

inline int soap_read___tds__GetRemoteUser(struct soap *soap, struct __tds__GetRemoteUser *p)
{
	if (p)
	{	soap_default___tds__GetRemoteUser(soap, p);
		if (soap_begin_recv(soap) || soap_get___tds__GetRemoteUser(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tds__GetEndpointReference_DEFINED
#define SOAP_TYPE___tds__GetEndpointReference_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__GetEndpointReference(struct soap*, struct __tds__GetEndpointReference *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__GetEndpointReference(struct soap*, const struct __tds__GetEndpointReference *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__GetEndpointReference(struct soap*, const char*, int, const struct __tds__GetEndpointReference *, const char*);
SOAP_FMAC3 struct __tds__GetEndpointReference * SOAP_FMAC4 soap_in___tds__GetEndpointReference(struct soap*, const char*, struct __tds__GetEndpointReference *, const char*);
SOAP_FMAC1 struct __tds__GetEndpointReference * SOAP_FMAC2 soap_instantiate___tds__GetEndpointReference(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__GetEndpointReference * soap_new___tds__GetEndpointReference(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__GetEndpointReference(soap, n, NULL, NULL, NULL);
}

inline struct __tds__GetEndpointReference * soap_new_req___tds__GetEndpointReference(
	struct soap *soap)
{
	struct __tds__GetEndpointReference *_p = soap_new___tds__GetEndpointReference(soap);
	if (_p)
	{	soap_default___tds__GetEndpointReference(soap, _p);
	}
	return _p;
}

inline struct __tds__GetEndpointReference * soap_new_set___tds__GetEndpointReference(
	struct soap *soap,
	_tds__GetEndpointReference *tds__GetEndpointReference)
{
	struct __tds__GetEndpointReference *_p = soap_new___tds__GetEndpointReference(soap);
	if (_p)
	{	soap_default___tds__GetEndpointReference(soap, _p);
		_p->tds__GetEndpointReference = tds__GetEndpointReference;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__GetEndpointReference(struct soap*, const struct __tds__GetEndpointReference *, const char*, const char*);

inline int soap_write___tds__GetEndpointReference(struct soap *soap, struct __tds__GetEndpointReference const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tds__GetEndpointReference(soap, p), 0) || soap_put___tds__GetEndpointReference(soap, p, "-tds:GetEndpointReference", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__GetEndpointReference * SOAP_FMAC4 soap_get___tds__GetEndpointReference(struct soap*, struct __tds__GetEndpointReference *, const char*, const char*);

inline int soap_read___tds__GetEndpointReference(struct soap *soap, struct __tds__GetEndpointReference *p)
{
	if (p)
	{	soap_default___tds__GetEndpointReference(soap, p);
		if (soap_begin_recv(soap) || soap_get___tds__GetEndpointReference(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tds__GetDPAddresses_DEFINED
#define SOAP_TYPE___tds__GetDPAddresses_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__GetDPAddresses(struct soap*, struct __tds__GetDPAddresses *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__GetDPAddresses(struct soap*, const struct __tds__GetDPAddresses *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__GetDPAddresses(struct soap*, const char*, int, const struct __tds__GetDPAddresses *, const char*);
SOAP_FMAC3 struct __tds__GetDPAddresses * SOAP_FMAC4 soap_in___tds__GetDPAddresses(struct soap*, const char*, struct __tds__GetDPAddresses *, const char*);
SOAP_FMAC1 struct __tds__GetDPAddresses * SOAP_FMAC2 soap_instantiate___tds__GetDPAddresses(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__GetDPAddresses * soap_new___tds__GetDPAddresses(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__GetDPAddresses(soap, n, NULL, NULL, NULL);
}

inline struct __tds__GetDPAddresses * soap_new_req___tds__GetDPAddresses(
	struct soap *soap)
{
	struct __tds__GetDPAddresses *_p = soap_new___tds__GetDPAddresses(soap);
	if (_p)
	{	soap_default___tds__GetDPAddresses(soap, _p);
	}
	return _p;
}

inline struct __tds__GetDPAddresses * soap_new_set___tds__GetDPAddresses(
	struct soap *soap,
	_tds__GetDPAddresses *tds__GetDPAddresses)
{
	struct __tds__GetDPAddresses *_p = soap_new___tds__GetDPAddresses(soap);
	if (_p)
	{	soap_default___tds__GetDPAddresses(soap, _p);
		_p->tds__GetDPAddresses = tds__GetDPAddresses;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__GetDPAddresses(struct soap*, const struct __tds__GetDPAddresses *, const char*, const char*);

inline int soap_write___tds__GetDPAddresses(struct soap *soap, struct __tds__GetDPAddresses const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tds__GetDPAddresses(soap, p), 0) || soap_put___tds__GetDPAddresses(soap, p, "-tds:GetDPAddresses", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__GetDPAddresses * SOAP_FMAC4 soap_get___tds__GetDPAddresses(struct soap*, struct __tds__GetDPAddresses *, const char*, const char*);

inline int soap_read___tds__GetDPAddresses(struct soap *soap, struct __tds__GetDPAddresses *p)
{
	if (p)
	{	soap_default___tds__GetDPAddresses(soap, p);
		if (soap_begin_recv(soap) || soap_get___tds__GetDPAddresses(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tds__SetRemoteDiscoveryMode_DEFINED
#define SOAP_TYPE___tds__SetRemoteDiscoveryMode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__SetRemoteDiscoveryMode(struct soap*, struct __tds__SetRemoteDiscoveryMode *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__SetRemoteDiscoveryMode(struct soap*, const struct __tds__SetRemoteDiscoveryMode *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__SetRemoteDiscoveryMode(struct soap*, const char*, int, const struct __tds__SetRemoteDiscoveryMode *, const char*);
SOAP_FMAC3 struct __tds__SetRemoteDiscoveryMode * SOAP_FMAC4 soap_in___tds__SetRemoteDiscoveryMode(struct soap*, const char*, struct __tds__SetRemoteDiscoveryMode *, const char*);
SOAP_FMAC1 struct __tds__SetRemoteDiscoveryMode * SOAP_FMAC2 soap_instantiate___tds__SetRemoteDiscoveryMode(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__SetRemoteDiscoveryMode * soap_new___tds__SetRemoteDiscoveryMode(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__SetRemoteDiscoveryMode(soap, n, NULL, NULL, NULL);
}

inline struct __tds__SetRemoteDiscoveryMode * soap_new_req___tds__SetRemoteDiscoveryMode(
	struct soap *soap)
{
	struct __tds__SetRemoteDiscoveryMode *_p = soap_new___tds__SetRemoteDiscoveryMode(soap);
	if (_p)
	{	soap_default___tds__SetRemoteDiscoveryMode(soap, _p);
	}
	return _p;
}

inline struct __tds__SetRemoteDiscoveryMode * soap_new_set___tds__SetRemoteDiscoveryMode(
	struct soap *soap,
	_tds__SetRemoteDiscoveryMode *tds__SetRemoteDiscoveryMode)
{
	struct __tds__SetRemoteDiscoveryMode *_p = soap_new___tds__SetRemoteDiscoveryMode(soap);
	if (_p)
	{	soap_default___tds__SetRemoteDiscoveryMode(soap, _p);
		_p->tds__SetRemoteDiscoveryMode = tds__SetRemoteDiscoveryMode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__SetRemoteDiscoveryMode(struct soap*, const struct __tds__SetRemoteDiscoveryMode *, const char*, const char*);

inline int soap_write___tds__SetRemoteDiscoveryMode(struct soap *soap, struct __tds__SetRemoteDiscoveryMode const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tds__SetRemoteDiscoveryMode(soap, p), 0) || soap_put___tds__SetRemoteDiscoveryMode(soap, p, "-tds:SetRemoteDiscoveryMode", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__SetRemoteDiscoveryMode * SOAP_FMAC4 soap_get___tds__SetRemoteDiscoveryMode(struct soap*, struct __tds__SetRemoteDiscoveryMode *, const char*, const char*);

inline int soap_read___tds__SetRemoteDiscoveryMode(struct soap *soap, struct __tds__SetRemoteDiscoveryMode *p)
{
	if (p)
	{	soap_default___tds__SetRemoteDiscoveryMode(soap, p);
		if (soap_begin_recv(soap) || soap_get___tds__SetRemoteDiscoveryMode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tds__GetRemoteDiscoveryMode_DEFINED
#define SOAP_TYPE___tds__GetRemoteDiscoveryMode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__GetRemoteDiscoveryMode(struct soap*, struct __tds__GetRemoteDiscoveryMode *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__GetRemoteDiscoveryMode(struct soap*, const struct __tds__GetRemoteDiscoveryMode *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__GetRemoteDiscoveryMode(struct soap*, const char*, int, const struct __tds__GetRemoteDiscoveryMode *, const char*);
SOAP_FMAC3 struct __tds__GetRemoteDiscoveryMode * SOAP_FMAC4 soap_in___tds__GetRemoteDiscoveryMode(struct soap*, const char*, struct __tds__GetRemoteDiscoveryMode *, const char*);
SOAP_FMAC1 struct __tds__GetRemoteDiscoveryMode * SOAP_FMAC2 soap_instantiate___tds__GetRemoteDiscoveryMode(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__GetRemoteDiscoveryMode * soap_new___tds__GetRemoteDiscoveryMode(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__GetRemoteDiscoveryMode(soap, n, NULL, NULL, NULL);
}

inline struct __tds__GetRemoteDiscoveryMode * soap_new_req___tds__GetRemoteDiscoveryMode(
	struct soap *soap)
{
	struct __tds__GetRemoteDiscoveryMode *_p = soap_new___tds__GetRemoteDiscoveryMode(soap);
	if (_p)
	{	soap_default___tds__GetRemoteDiscoveryMode(soap, _p);
	}
	return _p;
}

inline struct __tds__GetRemoteDiscoveryMode * soap_new_set___tds__GetRemoteDiscoveryMode(
	struct soap *soap,
	_tds__GetRemoteDiscoveryMode *tds__GetRemoteDiscoveryMode)
{
	struct __tds__GetRemoteDiscoveryMode *_p = soap_new___tds__GetRemoteDiscoveryMode(soap);
	if (_p)
	{	soap_default___tds__GetRemoteDiscoveryMode(soap, _p);
		_p->tds__GetRemoteDiscoveryMode = tds__GetRemoteDiscoveryMode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__GetRemoteDiscoveryMode(struct soap*, const struct __tds__GetRemoteDiscoveryMode *, const char*, const char*);

inline int soap_write___tds__GetRemoteDiscoveryMode(struct soap *soap, struct __tds__GetRemoteDiscoveryMode const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tds__GetRemoteDiscoveryMode(soap, p), 0) || soap_put___tds__GetRemoteDiscoveryMode(soap, p, "-tds:GetRemoteDiscoveryMode", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__GetRemoteDiscoveryMode * SOAP_FMAC4 soap_get___tds__GetRemoteDiscoveryMode(struct soap*, struct __tds__GetRemoteDiscoveryMode *, const char*, const char*);

inline int soap_read___tds__GetRemoteDiscoveryMode(struct soap *soap, struct __tds__GetRemoteDiscoveryMode *p)
{
	if (p)
	{	soap_default___tds__GetRemoteDiscoveryMode(soap, p);
		if (soap_begin_recv(soap) || soap_get___tds__GetRemoteDiscoveryMode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tds__SetDiscoveryMode_DEFINED
#define SOAP_TYPE___tds__SetDiscoveryMode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__SetDiscoveryMode(struct soap*, struct __tds__SetDiscoveryMode *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__SetDiscoveryMode(struct soap*, const struct __tds__SetDiscoveryMode *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__SetDiscoveryMode(struct soap*, const char*, int, const struct __tds__SetDiscoveryMode *, const char*);
SOAP_FMAC3 struct __tds__SetDiscoveryMode * SOAP_FMAC4 soap_in___tds__SetDiscoveryMode(struct soap*, const char*, struct __tds__SetDiscoveryMode *, const char*);
SOAP_FMAC1 struct __tds__SetDiscoveryMode * SOAP_FMAC2 soap_instantiate___tds__SetDiscoveryMode(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__SetDiscoveryMode * soap_new___tds__SetDiscoveryMode(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__SetDiscoveryMode(soap, n, NULL, NULL, NULL);
}

inline struct __tds__SetDiscoveryMode * soap_new_req___tds__SetDiscoveryMode(
	struct soap *soap)
{
	struct __tds__SetDiscoveryMode *_p = soap_new___tds__SetDiscoveryMode(soap);
	if (_p)
	{	soap_default___tds__SetDiscoveryMode(soap, _p);
	}
	return _p;
}

inline struct __tds__SetDiscoveryMode * soap_new_set___tds__SetDiscoveryMode(
	struct soap *soap,
	_tds__SetDiscoveryMode *tds__SetDiscoveryMode)
{
	struct __tds__SetDiscoveryMode *_p = soap_new___tds__SetDiscoveryMode(soap);
	if (_p)
	{	soap_default___tds__SetDiscoveryMode(soap, _p);
		_p->tds__SetDiscoveryMode = tds__SetDiscoveryMode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__SetDiscoveryMode(struct soap*, const struct __tds__SetDiscoveryMode *, const char*, const char*);

inline int soap_write___tds__SetDiscoveryMode(struct soap *soap, struct __tds__SetDiscoveryMode const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tds__SetDiscoveryMode(soap, p), 0) || soap_put___tds__SetDiscoveryMode(soap, p, "-tds:SetDiscoveryMode", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__SetDiscoveryMode * SOAP_FMAC4 soap_get___tds__SetDiscoveryMode(struct soap*, struct __tds__SetDiscoveryMode *, const char*, const char*);

inline int soap_read___tds__SetDiscoveryMode(struct soap *soap, struct __tds__SetDiscoveryMode *p)
{
	if (p)
	{	soap_default___tds__SetDiscoveryMode(soap, p);
		if (soap_begin_recv(soap) || soap_get___tds__SetDiscoveryMode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tds__GetDiscoveryMode_DEFINED
#define SOAP_TYPE___tds__GetDiscoveryMode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__GetDiscoveryMode(struct soap*, struct __tds__GetDiscoveryMode *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__GetDiscoveryMode(struct soap*, const struct __tds__GetDiscoveryMode *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__GetDiscoveryMode(struct soap*, const char*, int, const struct __tds__GetDiscoveryMode *, const char*);
SOAP_FMAC3 struct __tds__GetDiscoveryMode * SOAP_FMAC4 soap_in___tds__GetDiscoveryMode(struct soap*, const char*, struct __tds__GetDiscoveryMode *, const char*);
SOAP_FMAC1 struct __tds__GetDiscoveryMode * SOAP_FMAC2 soap_instantiate___tds__GetDiscoveryMode(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__GetDiscoveryMode * soap_new___tds__GetDiscoveryMode(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__GetDiscoveryMode(soap, n, NULL, NULL, NULL);
}

inline struct __tds__GetDiscoveryMode * soap_new_req___tds__GetDiscoveryMode(
	struct soap *soap)
{
	struct __tds__GetDiscoveryMode *_p = soap_new___tds__GetDiscoveryMode(soap);
	if (_p)
	{	soap_default___tds__GetDiscoveryMode(soap, _p);
	}
	return _p;
}

inline struct __tds__GetDiscoveryMode * soap_new_set___tds__GetDiscoveryMode(
	struct soap *soap,
	_tds__GetDiscoveryMode *tds__GetDiscoveryMode)
{
	struct __tds__GetDiscoveryMode *_p = soap_new___tds__GetDiscoveryMode(soap);
	if (_p)
	{	soap_default___tds__GetDiscoveryMode(soap, _p);
		_p->tds__GetDiscoveryMode = tds__GetDiscoveryMode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__GetDiscoveryMode(struct soap*, const struct __tds__GetDiscoveryMode *, const char*, const char*);

inline int soap_write___tds__GetDiscoveryMode(struct soap *soap, struct __tds__GetDiscoveryMode const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tds__GetDiscoveryMode(soap, p), 0) || soap_put___tds__GetDiscoveryMode(soap, p, "-tds:GetDiscoveryMode", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__GetDiscoveryMode * SOAP_FMAC4 soap_get___tds__GetDiscoveryMode(struct soap*, struct __tds__GetDiscoveryMode *, const char*, const char*);

inline int soap_read___tds__GetDiscoveryMode(struct soap *soap, struct __tds__GetDiscoveryMode *p)
{
	if (p)
	{	soap_default___tds__GetDiscoveryMode(soap, p);
		if (soap_begin_recv(soap) || soap_get___tds__GetDiscoveryMode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tds__RemoveScopes_DEFINED
#define SOAP_TYPE___tds__RemoveScopes_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__RemoveScopes(struct soap*, struct __tds__RemoveScopes *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__RemoveScopes(struct soap*, const struct __tds__RemoveScopes *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__RemoveScopes(struct soap*, const char*, int, const struct __tds__RemoveScopes *, const char*);
SOAP_FMAC3 struct __tds__RemoveScopes * SOAP_FMAC4 soap_in___tds__RemoveScopes(struct soap*, const char*, struct __tds__RemoveScopes *, const char*);
SOAP_FMAC1 struct __tds__RemoveScopes * SOAP_FMAC2 soap_instantiate___tds__RemoveScopes(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__RemoveScopes * soap_new___tds__RemoveScopes(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__RemoveScopes(soap, n, NULL, NULL, NULL);
}

inline struct __tds__RemoveScopes * soap_new_req___tds__RemoveScopes(
	struct soap *soap)
{
	struct __tds__RemoveScopes *_p = soap_new___tds__RemoveScopes(soap);
	if (_p)
	{	soap_default___tds__RemoveScopes(soap, _p);
	}
	return _p;
}

inline struct __tds__RemoveScopes * soap_new_set___tds__RemoveScopes(
	struct soap *soap,
	_tds__RemoveScopes *tds__RemoveScopes)
{
	struct __tds__RemoveScopes *_p = soap_new___tds__RemoveScopes(soap);
	if (_p)
	{	soap_default___tds__RemoveScopes(soap, _p);
		_p->tds__RemoveScopes = tds__RemoveScopes;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__RemoveScopes(struct soap*, const struct __tds__RemoveScopes *, const char*, const char*);

inline int soap_write___tds__RemoveScopes(struct soap *soap, struct __tds__RemoveScopes const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tds__RemoveScopes(soap, p), 0) || soap_put___tds__RemoveScopes(soap, p, "-tds:RemoveScopes", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__RemoveScopes * SOAP_FMAC4 soap_get___tds__RemoveScopes(struct soap*, struct __tds__RemoveScopes *, const char*, const char*);

inline int soap_read___tds__RemoveScopes(struct soap *soap, struct __tds__RemoveScopes *p)
{
	if (p)
	{	soap_default___tds__RemoveScopes(soap, p);
		if (soap_begin_recv(soap) || soap_get___tds__RemoveScopes(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tds__AddScopes_DEFINED
#define SOAP_TYPE___tds__AddScopes_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__AddScopes(struct soap*, struct __tds__AddScopes *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__AddScopes(struct soap*, const struct __tds__AddScopes *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__AddScopes(struct soap*, const char*, int, const struct __tds__AddScopes *, const char*);
SOAP_FMAC3 struct __tds__AddScopes * SOAP_FMAC4 soap_in___tds__AddScopes(struct soap*, const char*, struct __tds__AddScopes *, const char*);
SOAP_FMAC1 struct __tds__AddScopes * SOAP_FMAC2 soap_instantiate___tds__AddScopes(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__AddScopes * soap_new___tds__AddScopes(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__AddScopes(soap, n, NULL, NULL, NULL);
}

inline struct __tds__AddScopes * soap_new_req___tds__AddScopes(
	struct soap *soap)
{
	struct __tds__AddScopes *_p = soap_new___tds__AddScopes(soap);
	if (_p)
	{	soap_default___tds__AddScopes(soap, _p);
	}
	return _p;
}

inline struct __tds__AddScopes * soap_new_set___tds__AddScopes(
	struct soap *soap,
	_tds__AddScopes *tds__AddScopes)
{
	struct __tds__AddScopes *_p = soap_new___tds__AddScopes(soap);
	if (_p)
	{	soap_default___tds__AddScopes(soap, _p);
		_p->tds__AddScopes = tds__AddScopes;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__AddScopes(struct soap*, const struct __tds__AddScopes *, const char*, const char*);

inline int soap_write___tds__AddScopes(struct soap *soap, struct __tds__AddScopes const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tds__AddScopes(soap, p), 0) || soap_put___tds__AddScopes(soap, p, "-tds:AddScopes", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__AddScopes * SOAP_FMAC4 soap_get___tds__AddScopes(struct soap*, struct __tds__AddScopes *, const char*, const char*);

inline int soap_read___tds__AddScopes(struct soap *soap, struct __tds__AddScopes *p)
{
	if (p)
	{	soap_default___tds__AddScopes(soap, p);
		if (soap_begin_recv(soap) || soap_get___tds__AddScopes(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tds__SetScopes_DEFINED
#define SOAP_TYPE___tds__SetScopes_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__SetScopes(struct soap*, struct __tds__SetScopes *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__SetScopes(struct soap*, const struct __tds__SetScopes *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__SetScopes(struct soap*, const char*, int, const struct __tds__SetScopes *, const char*);
SOAP_FMAC3 struct __tds__SetScopes * SOAP_FMAC4 soap_in___tds__SetScopes(struct soap*, const char*, struct __tds__SetScopes *, const char*);
SOAP_FMAC1 struct __tds__SetScopes * SOAP_FMAC2 soap_instantiate___tds__SetScopes(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__SetScopes * soap_new___tds__SetScopes(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__SetScopes(soap, n, NULL, NULL, NULL);
}

inline struct __tds__SetScopes * soap_new_req___tds__SetScopes(
	struct soap *soap)
{
	struct __tds__SetScopes *_p = soap_new___tds__SetScopes(soap);
	if (_p)
	{	soap_default___tds__SetScopes(soap, _p);
	}
	return _p;
}

inline struct __tds__SetScopes * soap_new_set___tds__SetScopes(
	struct soap *soap,
	_tds__SetScopes *tds__SetScopes)
{
	struct __tds__SetScopes *_p = soap_new___tds__SetScopes(soap);
	if (_p)
	{	soap_default___tds__SetScopes(soap, _p);
		_p->tds__SetScopes = tds__SetScopes;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__SetScopes(struct soap*, const struct __tds__SetScopes *, const char*, const char*);

inline int soap_write___tds__SetScopes(struct soap *soap, struct __tds__SetScopes const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tds__SetScopes(soap, p), 0) || soap_put___tds__SetScopes(soap, p, "-tds:SetScopes", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__SetScopes * SOAP_FMAC4 soap_get___tds__SetScopes(struct soap*, struct __tds__SetScopes *, const char*, const char*);

inline int soap_read___tds__SetScopes(struct soap *soap, struct __tds__SetScopes *p)
{
	if (p)
	{	soap_default___tds__SetScopes(soap, p);
		if (soap_begin_recv(soap) || soap_get___tds__SetScopes(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tds__GetScopes_DEFINED
#define SOAP_TYPE___tds__GetScopes_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__GetScopes(struct soap*, struct __tds__GetScopes *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__GetScopes(struct soap*, const struct __tds__GetScopes *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__GetScopes(struct soap*, const char*, int, const struct __tds__GetScopes *, const char*);
SOAP_FMAC3 struct __tds__GetScopes * SOAP_FMAC4 soap_in___tds__GetScopes(struct soap*, const char*, struct __tds__GetScopes *, const char*);
SOAP_FMAC1 struct __tds__GetScopes * SOAP_FMAC2 soap_instantiate___tds__GetScopes(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__GetScopes * soap_new___tds__GetScopes(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__GetScopes(soap, n, NULL, NULL, NULL);
}

inline struct __tds__GetScopes * soap_new_req___tds__GetScopes(
	struct soap *soap)
{
	struct __tds__GetScopes *_p = soap_new___tds__GetScopes(soap);
	if (_p)
	{	soap_default___tds__GetScopes(soap, _p);
	}
	return _p;
}

inline struct __tds__GetScopes * soap_new_set___tds__GetScopes(
	struct soap *soap,
	_tds__GetScopes *tds__GetScopes)
{
	struct __tds__GetScopes *_p = soap_new___tds__GetScopes(soap);
	if (_p)
	{	soap_default___tds__GetScopes(soap, _p);
		_p->tds__GetScopes = tds__GetScopes;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__GetScopes(struct soap*, const struct __tds__GetScopes *, const char*, const char*);

inline int soap_write___tds__GetScopes(struct soap *soap, struct __tds__GetScopes const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tds__GetScopes(soap, p), 0) || soap_put___tds__GetScopes(soap, p, "-tds:GetScopes", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__GetScopes * SOAP_FMAC4 soap_get___tds__GetScopes(struct soap*, struct __tds__GetScopes *, const char*, const char*);

inline int soap_read___tds__GetScopes(struct soap *soap, struct __tds__GetScopes *p)
{
	if (p)
	{	soap_default___tds__GetScopes(soap, p);
		if (soap_begin_recv(soap) || soap_get___tds__GetScopes(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tds__GetSystemSupportInformation_DEFINED
#define SOAP_TYPE___tds__GetSystemSupportInformation_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__GetSystemSupportInformation(struct soap*, struct __tds__GetSystemSupportInformation *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__GetSystemSupportInformation(struct soap*, const struct __tds__GetSystemSupportInformation *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__GetSystemSupportInformation(struct soap*, const char*, int, const struct __tds__GetSystemSupportInformation *, const char*);
SOAP_FMAC3 struct __tds__GetSystemSupportInformation * SOAP_FMAC4 soap_in___tds__GetSystemSupportInformation(struct soap*, const char*, struct __tds__GetSystemSupportInformation *, const char*);
SOAP_FMAC1 struct __tds__GetSystemSupportInformation * SOAP_FMAC2 soap_instantiate___tds__GetSystemSupportInformation(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__GetSystemSupportInformation * soap_new___tds__GetSystemSupportInformation(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__GetSystemSupportInformation(soap, n, NULL, NULL, NULL);
}

inline struct __tds__GetSystemSupportInformation * soap_new_req___tds__GetSystemSupportInformation(
	struct soap *soap)
{
	struct __tds__GetSystemSupportInformation *_p = soap_new___tds__GetSystemSupportInformation(soap);
	if (_p)
	{	soap_default___tds__GetSystemSupportInformation(soap, _p);
	}
	return _p;
}

inline struct __tds__GetSystemSupportInformation * soap_new_set___tds__GetSystemSupportInformation(
	struct soap *soap,
	_tds__GetSystemSupportInformation *tds__GetSystemSupportInformation)
{
	struct __tds__GetSystemSupportInformation *_p = soap_new___tds__GetSystemSupportInformation(soap);
	if (_p)
	{	soap_default___tds__GetSystemSupportInformation(soap, _p);
		_p->tds__GetSystemSupportInformation = tds__GetSystemSupportInformation;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__GetSystemSupportInformation(struct soap*, const struct __tds__GetSystemSupportInformation *, const char*, const char*);

inline int soap_write___tds__GetSystemSupportInformation(struct soap *soap, struct __tds__GetSystemSupportInformation const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tds__GetSystemSupportInformation(soap, p), 0) || soap_put___tds__GetSystemSupportInformation(soap, p, "-tds:GetSystemSupportInformation", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__GetSystemSupportInformation * SOAP_FMAC4 soap_get___tds__GetSystemSupportInformation(struct soap*, struct __tds__GetSystemSupportInformation *, const char*, const char*);

inline int soap_read___tds__GetSystemSupportInformation(struct soap *soap, struct __tds__GetSystemSupportInformation *p)
{
	if (p)
	{	soap_default___tds__GetSystemSupportInformation(soap, p);
		if (soap_begin_recv(soap) || soap_get___tds__GetSystemSupportInformation(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tds__GetSystemLog_DEFINED
#define SOAP_TYPE___tds__GetSystemLog_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__GetSystemLog(struct soap*, struct __tds__GetSystemLog *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__GetSystemLog(struct soap*, const struct __tds__GetSystemLog *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__GetSystemLog(struct soap*, const char*, int, const struct __tds__GetSystemLog *, const char*);
SOAP_FMAC3 struct __tds__GetSystemLog * SOAP_FMAC4 soap_in___tds__GetSystemLog(struct soap*, const char*, struct __tds__GetSystemLog *, const char*);
SOAP_FMAC1 struct __tds__GetSystemLog * SOAP_FMAC2 soap_instantiate___tds__GetSystemLog(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__GetSystemLog * soap_new___tds__GetSystemLog(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__GetSystemLog(soap, n, NULL, NULL, NULL);
}

inline struct __tds__GetSystemLog * soap_new_req___tds__GetSystemLog(
	struct soap *soap)
{
	struct __tds__GetSystemLog *_p = soap_new___tds__GetSystemLog(soap);
	if (_p)
	{	soap_default___tds__GetSystemLog(soap, _p);
	}
	return _p;
}

inline struct __tds__GetSystemLog * soap_new_set___tds__GetSystemLog(
	struct soap *soap,
	_tds__GetSystemLog *tds__GetSystemLog)
{
	struct __tds__GetSystemLog *_p = soap_new___tds__GetSystemLog(soap);
	if (_p)
	{	soap_default___tds__GetSystemLog(soap, _p);
		_p->tds__GetSystemLog = tds__GetSystemLog;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__GetSystemLog(struct soap*, const struct __tds__GetSystemLog *, const char*, const char*);

inline int soap_write___tds__GetSystemLog(struct soap *soap, struct __tds__GetSystemLog const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tds__GetSystemLog(soap, p), 0) || soap_put___tds__GetSystemLog(soap, p, "-tds:GetSystemLog", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__GetSystemLog * SOAP_FMAC4 soap_get___tds__GetSystemLog(struct soap*, struct __tds__GetSystemLog *, const char*, const char*);

inline int soap_read___tds__GetSystemLog(struct soap *soap, struct __tds__GetSystemLog *p)
{
	if (p)
	{	soap_default___tds__GetSystemLog(soap, p);
		if (soap_begin_recv(soap) || soap_get___tds__GetSystemLog(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tds__GetSystemBackup_DEFINED
#define SOAP_TYPE___tds__GetSystemBackup_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__GetSystemBackup(struct soap*, struct __tds__GetSystemBackup *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__GetSystemBackup(struct soap*, const struct __tds__GetSystemBackup *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__GetSystemBackup(struct soap*, const char*, int, const struct __tds__GetSystemBackup *, const char*);
SOAP_FMAC3 struct __tds__GetSystemBackup * SOAP_FMAC4 soap_in___tds__GetSystemBackup(struct soap*, const char*, struct __tds__GetSystemBackup *, const char*);
SOAP_FMAC1 struct __tds__GetSystemBackup * SOAP_FMAC2 soap_instantiate___tds__GetSystemBackup(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__GetSystemBackup * soap_new___tds__GetSystemBackup(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__GetSystemBackup(soap, n, NULL, NULL, NULL);
}

inline struct __tds__GetSystemBackup * soap_new_req___tds__GetSystemBackup(
	struct soap *soap)
{
	struct __tds__GetSystemBackup *_p = soap_new___tds__GetSystemBackup(soap);
	if (_p)
	{	soap_default___tds__GetSystemBackup(soap, _p);
	}
	return _p;
}

inline struct __tds__GetSystemBackup * soap_new_set___tds__GetSystemBackup(
	struct soap *soap,
	_tds__GetSystemBackup *tds__GetSystemBackup)
{
	struct __tds__GetSystemBackup *_p = soap_new___tds__GetSystemBackup(soap);
	if (_p)
	{	soap_default___tds__GetSystemBackup(soap, _p);
		_p->tds__GetSystemBackup = tds__GetSystemBackup;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__GetSystemBackup(struct soap*, const struct __tds__GetSystemBackup *, const char*, const char*);

inline int soap_write___tds__GetSystemBackup(struct soap *soap, struct __tds__GetSystemBackup const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tds__GetSystemBackup(soap, p), 0) || soap_put___tds__GetSystemBackup(soap, p, "-tds:GetSystemBackup", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__GetSystemBackup * SOAP_FMAC4 soap_get___tds__GetSystemBackup(struct soap*, struct __tds__GetSystemBackup *, const char*, const char*);

inline int soap_read___tds__GetSystemBackup(struct soap *soap, struct __tds__GetSystemBackup *p)
{
	if (p)
	{	soap_default___tds__GetSystemBackup(soap, p);
		if (soap_begin_recv(soap) || soap_get___tds__GetSystemBackup(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tds__RestoreSystem_DEFINED
#define SOAP_TYPE___tds__RestoreSystem_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__RestoreSystem(struct soap*, struct __tds__RestoreSystem *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__RestoreSystem(struct soap*, const struct __tds__RestoreSystem *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__RestoreSystem(struct soap*, const char*, int, const struct __tds__RestoreSystem *, const char*);
SOAP_FMAC3 struct __tds__RestoreSystem * SOAP_FMAC4 soap_in___tds__RestoreSystem(struct soap*, const char*, struct __tds__RestoreSystem *, const char*);
SOAP_FMAC1 struct __tds__RestoreSystem * SOAP_FMAC2 soap_instantiate___tds__RestoreSystem(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__RestoreSystem * soap_new___tds__RestoreSystem(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__RestoreSystem(soap, n, NULL, NULL, NULL);
}

inline struct __tds__RestoreSystem * soap_new_req___tds__RestoreSystem(
	struct soap *soap)
{
	struct __tds__RestoreSystem *_p = soap_new___tds__RestoreSystem(soap);
	if (_p)
	{	soap_default___tds__RestoreSystem(soap, _p);
	}
	return _p;
}

inline struct __tds__RestoreSystem * soap_new_set___tds__RestoreSystem(
	struct soap *soap,
	_tds__RestoreSystem *tds__RestoreSystem)
{
	struct __tds__RestoreSystem *_p = soap_new___tds__RestoreSystem(soap);
	if (_p)
	{	soap_default___tds__RestoreSystem(soap, _p);
		_p->tds__RestoreSystem = tds__RestoreSystem;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__RestoreSystem(struct soap*, const struct __tds__RestoreSystem *, const char*, const char*);

inline int soap_write___tds__RestoreSystem(struct soap *soap, struct __tds__RestoreSystem const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tds__RestoreSystem(soap, p), 0) || soap_put___tds__RestoreSystem(soap, p, "-tds:RestoreSystem", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__RestoreSystem * SOAP_FMAC4 soap_get___tds__RestoreSystem(struct soap*, struct __tds__RestoreSystem *, const char*, const char*);

inline int soap_read___tds__RestoreSystem(struct soap *soap, struct __tds__RestoreSystem *p)
{
	if (p)
	{	soap_default___tds__RestoreSystem(soap, p);
		if (soap_begin_recv(soap) || soap_get___tds__RestoreSystem(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tds__SystemReboot_DEFINED
#define SOAP_TYPE___tds__SystemReboot_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__SystemReboot(struct soap*, struct __tds__SystemReboot *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__SystemReboot(struct soap*, const struct __tds__SystemReboot *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__SystemReboot(struct soap*, const char*, int, const struct __tds__SystemReboot *, const char*);
SOAP_FMAC3 struct __tds__SystemReboot * SOAP_FMAC4 soap_in___tds__SystemReboot(struct soap*, const char*, struct __tds__SystemReboot *, const char*);
SOAP_FMAC1 struct __tds__SystemReboot * SOAP_FMAC2 soap_instantiate___tds__SystemReboot(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__SystemReboot * soap_new___tds__SystemReboot(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__SystemReboot(soap, n, NULL, NULL, NULL);
}

inline struct __tds__SystemReboot * soap_new_req___tds__SystemReboot(
	struct soap *soap)
{
	struct __tds__SystemReboot *_p = soap_new___tds__SystemReboot(soap);
	if (_p)
	{	soap_default___tds__SystemReboot(soap, _p);
	}
	return _p;
}

inline struct __tds__SystemReboot * soap_new_set___tds__SystemReboot(
	struct soap *soap,
	_tds__SystemReboot *tds__SystemReboot)
{
	struct __tds__SystemReboot *_p = soap_new___tds__SystemReboot(soap);
	if (_p)
	{	soap_default___tds__SystemReboot(soap, _p);
		_p->tds__SystemReboot = tds__SystemReboot;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__SystemReboot(struct soap*, const struct __tds__SystemReboot *, const char*, const char*);

inline int soap_write___tds__SystemReboot(struct soap *soap, struct __tds__SystemReboot const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tds__SystemReboot(soap, p), 0) || soap_put___tds__SystemReboot(soap, p, "-tds:SystemReboot", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__SystemReboot * SOAP_FMAC4 soap_get___tds__SystemReboot(struct soap*, struct __tds__SystemReboot *, const char*, const char*);

inline int soap_read___tds__SystemReboot(struct soap *soap, struct __tds__SystemReboot *p)
{
	if (p)
	{	soap_default___tds__SystemReboot(soap, p);
		if (soap_begin_recv(soap) || soap_get___tds__SystemReboot(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tds__UpgradeSystemFirmware_DEFINED
#define SOAP_TYPE___tds__UpgradeSystemFirmware_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__UpgradeSystemFirmware(struct soap*, struct __tds__UpgradeSystemFirmware *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__UpgradeSystemFirmware(struct soap*, const struct __tds__UpgradeSystemFirmware *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__UpgradeSystemFirmware(struct soap*, const char*, int, const struct __tds__UpgradeSystemFirmware *, const char*);
SOAP_FMAC3 struct __tds__UpgradeSystemFirmware * SOAP_FMAC4 soap_in___tds__UpgradeSystemFirmware(struct soap*, const char*, struct __tds__UpgradeSystemFirmware *, const char*);
SOAP_FMAC1 struct __tds__UpgradeSystemFirmware * SOAP_FMAC2 soap_instantiate___tds__UpgradeSystemFirmware(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__UpgradeSystemFirmware * soap_new___tds__UpgradeSystemFirmware(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__UpgradeSystemFirmware(soap, n, NULL, NULL, NULL);
}

inline struct __tds__UpgradeSystemFirmware * soap_new_req___tds__UpgradeSystemFirmware(
	struct soap *soap)
{
	struct __tds__UpgradeSystemFirmware *_p = soap_new___tds__UpgradeSystemFirmware(soap);
	if (_p)
	{	soap_default___tds__UpgradeSystemFirmware(soap, _p);
	}
	return _p;
}

inline struct __tds__UpgradeSystemFirmware * soap_new_set___tds__UpgradeSystemFirmware(
	struct soap *soap,
	_tds__UpgradeSystemFirmware *tds__UpgradeSystemFirmware)
{
	struct __tds__UpgradeSystemFirmware *_p = soap_new___tds__UpgradeSystemFirmware(soap);
	if (_p)
	{	soap_default___tds__UpgradeSystemFirmware(soap, _p);
		_p->tds__UpgradeSystemFirmware = tds__UpgradeSystemFirmware;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__UpgradeSystemFirmware(struct soap*, const struct __tds__UpgradeSystemFirmware *, const char*, const char*);

inline int soap_write___tds__UpgradeSystemFirmware(struct soap *soap, struct __tds__UpgradeSystemFirmware const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tds__UpgradeSystemFirmware(soap, p), 0) || soap_put___tds__UpgradeSystemFirmware(soap, p, "-tds:UpgradeSystemFirmware", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__UpgradeSystemFirmware * SOAP_FMAC4 soap_get___tds__UpgradeSystemFirmware(struct soap*, struct __tds__UpgradeSystemFirmware *, const char*, const char*);

inline int soap_read___tds__UpgradeSystemFirmware(struct soap *soap, struct __tds__UpgradeSystemFirmware *p)
{
	if (p)
	{	soap_default___tds__UpgradeSystemFirmware(soap, p);
		if (soap_begin_recv(soap) || soap_get___tds__UpgradeSystemFirmware(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tds__SetSystemFactoryDefault_DEFINED
#define SOAP_TYPE___tds__SetSystemFactoryDefault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__SetSystemFactoryDefault(struct soap*, struct __tds__SetSystemFactoryDefault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__SetSystemFactoryDefault(struct soap*, const struct __tds__SetSystemFactoryDefault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__SetSystemFactoryDefault(struct soap*, const char*, int, const struct __tds__SetSystemFactoryDefault *, const char*);
SOAP_FMAC3 struct __tds__SetSystemFactoryDefault * SOAP_FMAC4 soap_in___tds__SetSystemFactoryDefault(struct soap*, const char*, struct __tds__SetSystemFactoryDefault *, const char*);
SOAP_FMAC1 struct __tds__SetSystemFactoryDefault * SOAP_FMAC2 soap_instantiate___tds__SetSystemFactoryDefault(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__SetSystemFactoryDefault * soap_new___tds__SetSystemFactoryDefault(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__SetSystemFactoryDefault(soap, n, NULL, NULL, NULL);
}

inline struct __tds__SetSystemFactoryDefault * soap_new_req___tds__SetSystemFactoryDefault(
	struct soap *soap)
{
	struct __tds__SetSystemFactoryDefault *_p = soap_new___tds__SetSystemFactoryDefault(soap);
	if (_p)
	{	soap_default___tds__SetSystemFactoryDefault(soap, _p);
	}
	return _p;
}

inline struct __tds__SetSystemFactoryDefault * soap_new_set___tds__SetSystemFactoryDefault(
	struct soap *soap,
	_tds__SetSystemFactoryDefault *tds__SetSystemFactoryDefault)
{
	struct __tds__SetSystemFactoryDefault *_p = soap_new___tds__SetSystemFactoryDefault(soap);
	if (_p)
	{	soap_default___tds__SetSystemFactoryDefault(soap, _p);
		_p->tds__SetSystemFactoryDefault = tds__SetSystemFactoryDefault;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__SetSystemFactoryDefault(struct soap*, const struct __tds__SetSystemFactoryDefault *, const char*, const char*);

inline int soap_write___tds__SetSystemFactoryDefault(struct soap *soap, struct __tds__SetSystemFactoryDefault const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tds__SetSystemFactoryDefault(soap, p), 0) || soap_put___tds__SetSystemFactoryDefault(soap, p, "-tds:SetSystemFactoryDefault", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__SetSystemFactoryDefault * SOAP_FMAC4 soap_get___tds__SetSystemFactoryDefault(struct soap*, struct __tds__SetSystemFactoryDefault *, const char*, const char*);

inline int soap_read___tds__SetSystemFactoryDefault(struct soap *soap, struct __tds__SetSystemFactoryDefault *p)
{
	if (p)
	{	soap_default___tds__SetSystemFactoryDefault(soap, p);
		if (soap_begin_recv(soap) || soap_get___tds__SetSystemFactoryDefault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tds__GetSystemDateAndTime_DEFINED
#define SOAP_TYPE___tds__GetSystemDateAndTime_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__GetSystemDateAndTime(struct soap*, struct __tds__GetSystemDateAndTime *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__GetSystemDateAndTime(struct soap*, const struct __tds__GetSystemDateAndTime *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__GetSystemDateAndTime(struct soap*, const char*, int, const struct __tds__GetSystemDateAndTime *, const char*);
SOAP_FMAC3 struct __tds__GetSystemDateAndTime * SOAP_FMAC4 soap_in___tds__GetSystemDateAndTime(struct soap*, const char*, struct __tds__GetSystemDateAndTime *, const char*);
SOAP_FMAC1 struct __tds__GetSystemDateAndTime * SOAP_FMAC2 soap_instantiate___tds__GetSystemDateAndTime(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__GetSystemDateAndTime * soap_new___tds__GetSystemDateAndTime(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__GetSystemDateAndTime(soap, n, NULL, NULL, NULL);
}

inline struct __tds__GetSystemDateAndTime * soap_new_req___tds__GetSystemDateAndTime(
	struct soap *soap)
{
	struct __tds__GetSystemDateAndTime *_p = soap_new___tds__GetSystemDateAndTime(soap);
	if (_p)
	{	soap_default___tds__GetSystemDateAndTime(soap, _p);
	}
	return _p;
}

inline struct __tds__GetSystemDateAndTime * soap_new_set___tds__GetSystemDateAndTime(
	struct soap *soap,
	_tds__GetSystemDateAndTime *tds__GetSystemDateAndTime)
{
	struct __tds__GetSystemDateAndTime *_p = soap_new___tds__GetSystemDateAndTime(soap);
	if (_p)
	{	soap_default___tds__GetSystemDateAndTime(soap, _p);
		_p->tds__GetSystemDateAndTime = tds__GetSystemDateAndTime;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__GetSystemDateAndTime(struct soap*, const struct __tds__GetSystemDateAndTime *, const char*, const char*);

inline int soap_write___tds__GetSystemDateAndTime(struct soap *soap, struct __tds__GetSystemDateAndTime const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tds__GetSystemDateAndTime(soap, p), 0) || soap_put___tds__GetSystemDateAndTime(soap, p, "-tds:GetSystemDateAndTime", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__GetSystemDateAndTime * SOAP_FMAC4 soap_get___tds__GetSystemDateAndTime(struct soap*, struct __tds__GetSystemDateAndTime *, const char*, const char*);

inline int soap_read___tds__GetSystemDateAndTime(struct soap *soap, struct __tds__GetSystemDateAndTime *p)
{
	if (p)
	{	soap_default___tds__GetSystemDateAndTime(soap, p);
		if (soap_begin_recv(soap) || soap_get___tds__GetSystemDateAndTime(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tds__SetSystemDateAndTime_DEFINED
#define SOAP_TYPE___tds__SetSystemDateAndTime_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__SetSystemDateAndTime(struct soap*, struct __tds__SetSystemDateAndTime *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__SetSystemDateAndTime(struct soap*, const struct __tds__SetSystemDateAndTime *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__SetSystemDateAndTime(struct soap*, const char*, int, const struct __tds__SetSystemDateAndTime *, const char*);
SOAP_FMAC3 struct __tds__SetSystemDateAndTime * SOAP_FMAC4 soap_in___tds__SetSystemDateAndTime(struct soap*, const char*, struct __tds__SetSystemDateAndTime *, const char*);
SOAP_FMAC1 struct __tds__SetSystemDateAndTime * SOAP_FMAC2 soap_instantiate___tds__SetSystemDateAndTime(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__SetSystemDateAndTime * soap_new___tds__SetSystemDateAndTime(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__SetSystemDateAndTime(soap, n, NULL, NULL, NULL);
}

inline struct __tds__SetSystemDateAndTime * soap_new_req___tds__SetSystemDateAndTime(
	struct soap *soap)
{
	struct __tds__SetSystemDateAndTime *_p = soap_new___tds__SetSystemDateAndTime(soap);
	if (_p)
	{	soap_default___tds__SetSystemDateAndTime(soap, _p);
	}
	return _p;
}

inline struct __tds__SetSystemDateAndTime * soap_new_set___tds__SetSystemDateAndTime(
	struct soap *soap,
	_tds__SetSystemDateAndTime *tds__SetSystemDateAndTime)
{
	struct __tds__SetSystemDateAndTime *_p = soap_new___tds__SetSystemDateAndTime(soap);
	if (_p)
	{	soap_default___tds__SetSystemDateAndTime(soap, _p);
		_p->tds__SetSystemDateAndTime = tds__SetSystemDateAndTime;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__SetSystemDateAndTime(struct soap*, const struct __tds__SetSystemDateAndTime *, const char*, const char*);

inline int soap_write___tds__SetSystemDateAndTime(struct soap *soap, struct __tds__SetSystemDateAndTime const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tds__SetSystemDateAndTime(soap, p), 0) || soap_put___tds__SetSystemDateAndTime(soap, p, "-tds:SetSystemDateAndTime", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__SetSystemDateAndTime * SOAP_FMAC4 soap_get___tds__SetSystemDateAndTime(struct soap*, struct __tds__SetSystemDateAndTime *, const char*, const char*);

inline int soap_read___tds__SetSystemDateAndTime(struct soap *soap, struct __tds__SetSystemDateAndTime *p)
{
	if (p)
	{	soap_default___tds__SetSystemDateAndTime(soap, p);
		if (soap_begin_recv(soap) || soap_get___tds__SetSystemDateAndTime(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tds__GetDeviceInformation_DEFINED
#define SOAP_TYPE___tds__GetDeviceInformation_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__GetDeviceInformation(struct soap*, struct __tds__GetDeviceInformation *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__GetDeviceInformation(struct soap*, const struct __tds__GetDeviceInformation *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__GetDeviceInformation(struct soap*, const char*, int, const struct __tds__GetDeviceInformation *, const char*);
SOAP_FMAC3 struct __tds__GetDeviceInformation * SOAP_FMAC4 soap_in___tds__GetDeviceInformation(struct soap*, const char*, struct __tds__GetDeviceInformation *, const char*);
SOAP_FMAC1 struct __tds__GetDeviceInformation * SOAP_FMAC2 soap_instantiate___tds__GetDeviceInformation(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__GetDeviceInformation * soap_new___tds__GetDeviceInformation(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__GetDeviceInformation(soap, n, NULL, NULL, NULL);
}

inline struct __tds__GetDeviceInformation * soap_new_req___tds__GetDeviceInformation(
	struct soap *soap)
{
	struct __tds__GetDeviceInformation *_p = soap_new___tds__GetDeviceInformation(soap);
	if (_p)
	{	soap_default___tds__GetDeviceInformation(soap, _p);
	}
	return _p;
}

inline struct __tds__GetDeviceInformation * soap_new_set___tds__GetDeviceInformation(
	struct soap *soap,
	_tds__GetDeviceInformation *tds__GetDeviceInformation)
{
	struct __tds__GetDeviceInformation *_p = soap_new___tds__GetDeviceInformation(soap);
	if (_p)
	{	soap_default___tds__GetDeviceInformation(soap, _p);
		_p->tds__GetDeviceInformation = tds__GetDeviceInformation;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__GetDeviceInformation(struct soap*, const struct __tds__GetDeviceInformation *, const char*, const char*);

inline int soap_write___tds__GetDeviceInformation(struct soap *soap, struct __tds__GetDeviceInformation const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tds__GetDeviceInformation(soap, p), 0) || soap_put___tds__GetDeviceInformation(soap, p, "-tds:GetDeviceInformation", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__GetDeviceInformation * SOAP_FMAC4 soap_get___tds__GetDeviceInformation(struct soap*, struct __tds__GetDeviceInformation *, const char*, const char*);

inline int soap_read___tds__GetDeviceInformation(struct soap *soap, struct __tds__GetDeviceInformation *p)
{
	if (p)
	{	soap_default___tds__GetDeviceInformation(soap, p);
		if (soap_begin_recv(soap) || soap_get___tds__GetDeviceInformation(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tds__GetServiceCapabilities_DEFINED
#define SOAP_TYPE___tds__GetServiceCapabilities_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__GetServiceCapabilities(struct soap*, struct __tds__GetServiceCapabilities *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__GetServiceCapabilities(struct soap*, const struct __tds__GetServiceCapabilities *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__GetServiceCapabilities(struct soap*, const char*, int, const struct __tds__GetServiceCapabilities *, const char*);
SOAP_FMAC3 struct __tds__GetServiceCapabilities * SOAP_FMAC4 soap_in___tds__GetServiceCapabilities(struct soap*, const char*, struct __tds__GetServiceCapabilities *, const char*);
SOAP_FMAC1 struct __tds__GetServiceCapabilities * SOAP_FMAC2 soap_instantiate___tds__GetServiceCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__GetServiceCapabilities * soap_new___tds__GetServiceCapabilities(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__GetServiceCapabilities(soap, n, NULL, NULL, NULL);
}

inline struct __tds__GetServiceCapabilities * soap_new_req___tds__GetServiceCapabilities(
	struct soap *soap)
{
	struct __tds__GetServiceCapabilities *_p = soap_new___tds__GetServiceCapabilities(soap);
	if (_p)
	{	soap_default___tds__GetServiceCapabilities(soap, _p);
	}
	return _p;
}

inline struct __tds__GetServiceCapabilities * soap_new_set___tds__GetServiceCapabilities(
	struct soap *soap,
	_tds__GetServiceCapabilities *tds__GetServiceCapabilities)
{
	struct __tds__GetServiceCapabilities *_p = soap_new___tds__GetServiceCapabilities(soap);
	if (_p)
	{	soap_default___tds__GetServiceCapabilities(soap, _p);
		_p->tds__GetServiceCapabilities = tds__GetServiceCapabilities;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__GetServiceCapabilities(struct soap*, const struct __tds__GetServiceCapabilities *, const char*, const char*);

inline int soap_write___tds__GetServiceCapabilities(struct soap *soap, struct __tds__GetServiceCapabilities const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tds__GetServiceCapabilities(soap, p), 0) || soap_put___tds__GetServiceCapabilities(soap, p, "-tds:GetServiceCapabilities", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__GetServiceCapabilities * SOAP_FMAC4 soap_get___tds__GetServiceCapabilities(struct soap*, struct __tds__GetServiceCapabilities *, const char*, const char*);

inline int soap_read___tds__GetServiceCapabilities(struct soap *soap, struct __tds__GetServiceCapabilities *p)
{
	if (p)
	{	soap_default___tds__GetServiceCapabilities(soap, p);
		if (soap_begin_recv(soap) || soap_get___tds__GetServiceCapabilities(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tds__GetServices_DEFINED
#define SOAP_TYPE___tds__GetServices_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__GetServices(struct soap*, struct __tds__GetServices *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__GetServices(struct soap*, const struct __tds__GetServices *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__GetServices(struct soap*, const char*, int, const struct __tds__GetServices *, const char*);
SOAP_FMAC3 struct __tds__GetServices * SOAP_FMAC4 soap_in___tds__GetServices(struct soap*, const char*, struct __tds__GetServices *, const char*);
SOAP_FMAC1 struct __tds__GetServices * SOAP_FMAC2 soap_instantiate___tds__GetServices(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__GetServices * soap_new___tds__GetServices(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__GetServices(soap, n, NULL, NULL, NULL);
}

inline struct __tds__GetServices * soap_new_req___tds__GetServices(
	struct soap *soap)
{
	struct __tds__GetServices *_p = soap_new___tds__GetServices(soap);
	if (_p)
	{	soap_default___tds__GetServices(soap, _p);
	}
	return _p;
}

inline struct __tds__GetServices * soap_new_set___tds__GetServices(
	struct soap *soap,
	_tds__GetServices *tds__GetServices)
{
	struct __tds__GetServices *_p = soap_new___tds__GetServices(soap);
	if (_p)
	{	soap_default___tds__GetServices(soap, _p);
		_p->tds__GetServices = tds__GetServices;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__GetServices(struct soap*, const struct __tds__GetServices *, const char*, const char*);

inline int soap_write___tds__GetServices(struct soap *soap, struct __tds__GetServices const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___tds__GetServices(soap, p), 0) || soap_put___tds__GetServices(soap, p, "-tds:GetServices", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__GetServices * SOAP_FMAC4 soap_get___tds__GetServices(struct soap*, struct __tds__GetServices *, const char*, const char*);

inline int soap_read___tds__GetServices(struct soap *soap, struct __tds__GetServices *p)
{
	if (p)
	{	soap_default___tds__GetServices(soap, p);
		if (soap_begin_recv(soap) || soap_get___tds__GetServices(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Envelope_DEFINED
#define SOAP_TYPE_SOAP_ENV__Envelope_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Envelope(struct soap*, struct SOAP_ENV__Envelope *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Envelope(struct soap*, const struct SOAP_ENV__Envelope *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Envelope(struct soap*, const char*, int, const struct SOAP_ENV__Envelope *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Envelope * SOAP_FMAC4 soap_in_SOAP_ENV__Envelope(struct soap*, const char*, struct SOAP_ENV__Envelope *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Envelope * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Envelope(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Envelope * soap_new_SOAP_ENV__Envelope(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Envelope(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Envelope * soap_new_req_SOAP_ENV__Envelope(
	struct soap *soap)
{
	struct SOAP_ENV__Envelope *_p = soap_new_SOAP_ENV__Envelope(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Envelope(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Envelope * soap_new_set_SOAP_ENV__Envelope(
	struct soap *soap,
	struct SOAP_ENV__Header *SOAP_ENV__Header,
	char *SOAP_ENV__Body)
{
	struct SOAP_ENV__Envelope *_p = soap_new_SOAP_ENV__Envelope(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Envelope(soap, _p);
		_p->SOAP_ENV__Header = SOAP_ENV__Header;
		_p->SOAP_ENV__Body = SOAP_ENV__Body;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Envelope(struct soap*, const struct SOAP_ENV__Envelope *, const char*, const char*);

inline int soap_write_SOAP_ENV__Envelope(struct soap *soap, struct SOAP_ENV__Envelope const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Envelope(soap, p), 0) || soap_put_SOAP_ENV__Envelope(soap, p, "SOAP-ENV:Envelope", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Envelope * SOAP_FMAC4 soap_get_SOAP_ENV__Envelope(struct soap*, struct SOAP_ENV__Envelope *, const char*, const char*);

inline int soap_read_SOAP_ENV__Envelope(struct soap *soap, struct SOAP_ENV__Envelope *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Envelope(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Envelope(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault_DEFINED
#define SOAP_TYPE_SOAP_ENV__Fault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(
	struct soap *soap)
{
	struct SOAP_ENV__Fault *_p = soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Fault(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(
	struct soap *soap,
	char *faultcode,
	char *faultstring,
	char *faultactor,
	struct SOAP_ENV__Detail *detail,
	struct SOAP_ENV__Code *SOAP_ENV__Code,
	struct SOAP_ENV__Reason *SOAP_ENV__Reason,
	char *SOAP_ENV__Node,
	char *SOAP_ENV__Role,
	struct SOAP_ENV__Detail *SOAP_ENV__Detail)
{
	struct SOAP_ENV__Fault *_p = soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Fault(soap, _p);
		_p->faultcode = faultcode;
		_p->faultstring = faultstring;
		_p->faultactor = faultactor;
		_p->detail = detail;
		_p->SOAP_ENV__Code = SOAP_ENV__Code;
		_p->SOAP_ENV__Reason = SOAP_ENV__Reason;
		_p->SOAP_ENV__Node = SOAP_ENV__Node;
		_p->SOAP_ENV__Role = SOAP_ENV__Role;
		_p->SOAP_ENV__Detail = SOAP_ENV__Detail;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_write_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Fault(soap, p), 0) || soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_read_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Fault(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Fault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_SOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(
	struct soap *soap)
{
	struct SOAP_ENV__Reason *_p = soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Reason(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(
	struct soap *soap,
	char *SOAP_ENV__Text)
{
	struct SOAP_ENV__Reason *_p = soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Reason(soap, _p);
		_p->SOAP_ENV__Text = SOAP_ENV__Text;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_write_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Reason(soap, p), 0) || soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_read_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Reason(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Reason(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code_DEFINED
#define SOAP_TYPE_SOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(
	struct soap *soap)
{
	struct SOAP_ENV__Code *_p = soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Code(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(
	struct soap *soap,
	char *SOAP_ENV__Value,
	struct SOAP_ENV__Code *SOAP_ENV__Subcode)
{
	struct SOAP_ENV__Code *_p = soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Code(soap, _p);
		_p->SOAP_ENV__Value = SOAP_ENV__Value;
		_p->SOAP_ENV__Subcode = SOAP_ENV__Subcode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_write_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Code(soap, p), 0) || soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_read_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Code(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_SOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(
	struct soap *soap,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(
	struct soap *soap,
	char *__any,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__any = __any;
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_write_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Detail(soap, p), 0) || soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_read_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Detail(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Detail(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header_DEFINED
#define SOAP_TYPE_SOAP_ENV__Header_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(
	struct soap *soap,
	char *wsa5__MessageID,
	struct wsa5__RelatesToType *wsa5__RelatesTo,
	struct wsa5__EndpointReferenceType *wsa5__From,
	struct wsa5__EndpointReferenceType *wsa5__ReplyTo,
	struct wsa5__EndpointReferenceType *wsa5__FaultTo,
	char *wsa5__To,
	char *wsa5__Action,
	struct chan__ChannelInstanceType *chan__ChannelInstance)
{
	struct SOAP_ENV__Header *_p = soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Header(soap, _p);
		_p->wsa5__MessageID = wsa5__MessageID;
		_p->wsa5__RelatesTo = wsa5__RelatesTo;
		_p->wsa5__From = wsa5__From;
		_p->wsa5__ReplyTo = wsa5__ReplyTo;
		_p->wsa5__FaultTo = wsa5__FaultTo;
		_p->wsa5__To = wsa5__To;
		_p->wsa5__Action = wsa5__Action;
		_p->chan__ChannelInstance = chan__ChannelInstance;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_write_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Header(soap, p), 0) || soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_read_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Header(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Header(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#endif

#ifndef SOAP_TYPE_chan__ChannelInstanceType_DEFINED
#define SOAP_TYPE_chan__ChannelInstanceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_chan__ChannelInstanceType(struct soap*, struct chan__ChannelInstanceType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_chan__ChannelInstanceType(struct soap*, const struct chan__ChannelInstanceType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_chan__ChannelInstanceType(struct soap*, const char*, int, const struct chan__ChannelInstanceType *, const char*);
SOAP_FMAC3 struct chan__ChannelInstanceType * SOAP_FMAC4 soap_in_chan__ChannelInstanceType(struct soap*, const char*, struct chan__ChannelInstanceType *, const char*);
SOAP_FMAC1 struct chan__ChannelInstanceType * SOAP_FMAC2 soap_instantiate_chan__ChannelInstanceType(struct soap*, int, const char*, const char*, size_t*);

inline struct chan__ChannelInstanceType * soap_new_chan__ChannelInstanceType(struct soap *soap, int n = -1)
{
	return soap_instantiate_chan__ChannelInstanceType(soap, n, NULL, NULL, NULL);
}

inline struct chan__ChannelInstanceType * soap_new_req_chan__ChannelInstanceType(
	struct soap *soap,
	int __item)
{
	struct chan__ChannelInstanceType *_p = soap_new_chan__ChannelInstanceType(soap);
	if (_p)
	{	soap_default_chan__ChannelInstanceType(soap, _p);
		_p->__item = __item;
	}
	return _p;
}

inline struct chan__ChannelInstanceType * soap_new_set_chan__ChannelInstanceType(
	struct soap *soap,
	int __item,
	enum _wsa5__IsReferenceParameter wsa5__IsReferenceParameter)
{
	struct chan__ChannelInstanceType *_p = soap_new_chan__ChannelInstanceType(soap);
	if (_p)
	{	soap_default_chan__ChannelInstanceType(soap, _p);
		_p->__item = __item;
		_p->wsa5__IsReferenceParameter = wsa5__IsReferenceParameter;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_chan__ChannelInstanceType(struct soap*, const struct chan__ChannelInstanceType *, const char*, const char*);

inline int soap_write_chan__ChannelInstanceType(struct soap *soap, struct chan__ChannelInstanceType const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_chan__ChannelInstanceType(soap, p), 0) || soap_put_chan__ChannelInstanceType(soap, p, "chan:ChannelInstanceType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct chan__ChannelInstanceType * SOAP_FMAC4 soap_get_chan__ChannelInstanceType(struct soap*, struct chan__ChannelInstanceType *, const char*, const char*);

inline int soap_read_chan__ChannelInstanceType(struct soap *soap, struct chan__ChannelInstanceType *p)
{
	if (p)
	{	soap_default_chan__ChannelInstanceType(soap, p);
		if (soap_begin_recv(soap) || soap_get_chan__ChannelInstanceType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif
/* _wsa5__ProblemAction is a typedef synonym for wsa5__ProblemActionType */

#ifndef SOAP_TYPE__wsa5__ProblemAction_DEFINED
#define SOAP_TYPE__wsa5__ProblemAction_DEFINED

#define soap_default__wsa5__ProblemAction(soap, a) soap_default_wsa5__ProblemActionType(soap, a)


#define soap_serialize__wsa5__ProblemAction soap_serialize_wsa5__ProblemActionType


#define soap__wsa5__ProblemAction2s soap_wsa5__ProblemActionType2s


#define soap_out__wsa5__ProblemAction soap_out_wsa5__ProblemActionType


#define soap_s2_wsa5__ProblemAction soap_s2wsa5__ProblemActionType


#define soap_in__wsa5__ProblemAction soap_in_wsa5__ProblemActionType


#define soap_instantiate__wsa5__ProblemAction soap_instantiate_wsa5__ProblemActionType


#define soap_new__wsa5__ProblemAction soap_new_wsa5__ProblemActionType


#define soap_new_req__wsa5__ProblemAction soap_new_req_wsa5__ProblemActionType


#define soap_new_set__wsa5__ProblemAction soap_new_set_wsa5__ProblemActionType


#define soap_put__wsa5__ProblemAction soap_put_wsa5__ProblemActionType


#define soap_write__wsa5__ProblemAction soap_write_wsa5__ProblemActionType


#define soap_get__wsa5__ProblemAction soap_get_wsa5__ProblemActionType


#define soap_read__wsa5__ProblemAction soap_read_wsa5__ProblemActionType

#endif
/* _wsa5__FaultTo is a typedef synonym for wsa5__EndpointReferenceType */

#ifndef SOAP_TYPE__wsa5__FaultTo_DEFINED
#define SOAP_TYPE__wsa5__FaultTo_DEFINED

#define soap_default__wsa5__FaultTo(soap, a) soap_default_wsa5__EndpointReferenceType(soap, a)


#define soap_serialize__wsa5__FaultTo soap_serialize_wsa5__EndpointReferenceType


#define soap__wsa5__FaultTo2s soap_wsa5__EndpointReferenceType2s


#define soap_out__wsa5__FaultTo soap_out_wsa5__EndpointReferenceType


#define soap_s2_wsa5__FaultTo soap_s2wsa5__EndpointReferenceType


#define soap_in__wsa5__FaultTo soap_in_wsa5__EndpointReferenceType


#define soap_instantiate__wsa5__FaultTo soap_instantiate_wsa5__EndpointReferenceType


#define soap_new__wsa5__FaultTo soap_new_wsa5__EndpointReferenceType


#define soap_new_req__wsa5__FaultTo soap_new_req_wsa5__EndpointReferenceType


#define soap_new_set__wsa5__FaultTo soap_new_set_wsa5__EndpointReferenceType


#define soap_put__wsa5__FaultTo soap_put_wsa5__EndpointReferenceType


#define soap_write__wsa5__FaultTo soap_write_wsa5__EndpointReferenceType


#define soap_get__wsa5__FaultTo soap_get_wsa5__EndpointReferenceType


#define soap_read__wsa5__FaultTo soap_read_wsa5__EndpointReferenceType

#endif
/* _wsa5__From is a typedef synonym for wsa5__EndpointReferenceType */

#ifndef SOAP_TYPE__wsa5__From_DEFINED
#define SOAP_TYPE__wsa5__From_DEFINED

#define soap_default__wsa5__From(soap, a) soap_default_wsa5__EndpointReferenceType(soap, a)


#define soap_serialize__wsa5__From soap_serialize_wsa5__EndpointReferenceType


#define soap__wsa5__From2s soap_wsa5__EndpointReferenceType2s


#define soap_out__wsa5__From soap_out_wsa5__EndpointReferenceType


#define soap_s2_wsa5__From soap_s2wsa5__EndpointReferenceType


#define soap_in__wsa5__From soap_in_wsa5__EndpointReferenceType


#define soap_instantiate__wsa5__From soap_instantiate_wsa5__EndpointReferenceType


#define soap_new__wsa5__From soap_new_wsa5__EndpointReferenceType


#define soap_new_req__wsa5__From soap_new_req_wsa5__EndpointReferenceType


#define soap_new_set__wsa5__From soap_new_set_wsa5__EndpointReferenceType


#define soap_put__wsa5__From soap_put_wsa5__EndpointReferenceType


#define soap_write__wsa5__From soap_write_wsa5__EndpointReferenceType


#define soap_get__wsa5__From soap_get_wsa5__EndpointReferenceType


#define soap_read__wsa5__From soap_read_wsa5__EndpointReferenceType

#endif
/* _wsa5__ReplyTo is a typedef synonym for wsa5__EndpointReferenceType */

#ifndef SOAP_TYPE__wsa5__ReplyTo_DEFINED
#define SOAP_TYPE__wsa5__ReplyTo_DEFINED

#define soap_default__wsa5__ReplyTo(soap, a) soap_default_wsa5__EndpointReferenceType(soap, a)


#define soap_serialize__wsa5__ReplyTo soap_serialize_wsa5__EndpointReferenceType


#define soap__wsa5__ReplyTo2s soap_wsa5__EndpointReferenceType2s


#define soap_out__wsa5__ReplyTo soap_out_wsa5__EndpointReferenceType


#define soap_s2_wsa5__ReplyTo soap_s2wsa5__EndpointReferenceType


#define soap_in__wsa5__ReplyTo soap_in_wsa5__EndpointReferenceType


#define soap_instantiate__wsa5__ReplyTo soap_instantiate_wsa5__EndpointReferenceType


#define soap_new__wsa5__ReplyTo soap_new_wsa5__EndpointReferenceType


#define soap_new_req__wsa5__ReplyTo soap_new_req_wsa5__EndpointReferenceType


#define soap_new_set__wsa5__ReplyTo soap_new_set_wsa5__EndpointReferenceType


#define soap_put__wsa5__ReplyTo soap_put_wsa5__EndpointReferenceType


#define soap_write__wsa5__ReplyTo soap_write_wsa5__EndpointReferenceType


#define soap_get__wsa5__ReplyTo soap_get_wsa5__EndpointReferenceType


#define soap_read__wsa5__ReplyTo soap_read_wsa5__EndpointReferenceType

#endif
/* _wsa5__RelatesTo is a typedef synonym for wsa5__RelatesToType */

#ifndef SOAP_TYPE__wsa5__RelatesTo_DEFINED
#define SOAP_TYPE__wsa5__RelatesTo_DEFINED

#define soap_default__wsa5__RelatesTo(soap, a) soap_default_wsa5__RelatesToType(soap, a)


#define soap_serialize__wsa5__RelatesTo soap_serialize_wsa5__RelatesToType


#define soap__wsa5__RelatesTo2s soap_wsa5__RelatesToType2s


#define soap_out__wsa5__RelatesTo soap_out_wsa5__RelatesToType


#define soap_s2_wsa5__RelatesTo soap_s2wsa5__RelatesToType


#define soap_in__wsa5__RelatesTo soap_in_wsa5__RelatesToType


#define soap_instantiate__wsa5__RelatesTo soap_instantiate_wsa5__RelatesToType


#define soap_new__wsa5__RelatesTo soap_new_wsa5__RelatesToType


#define soap_new_req__wsa5__RelatesTo soap_new_req_wsa5__RelatesToType


#define soap_new_set__wsa5__RelatesTo soap_new_set_wsa5__RelatesToType


#define soap_put__wsa5__RelatesTo soap_put_wsa5__RelatesToType


#define soap_write__wsa5__RelatesTo soap_write_wsa5__RelatesToType


#define soap_get__wsa5__RelatesTo soap_get_wsa5__RelatesToType


#define soap_read__wsa5__RelatesTo soap_read_wsa5__RelatesToType

#endif
/* _wsa5__Metadata is a typedef synonym for wsa5__MetadataType */

#ifndef SOAP_TYPE__wsa5__Metadata_DEFINED
#define SOAP_TYPE__wsa5__Metadata_DEFINED

#define soap_default__wsa5__Metadata(soap, a) soap_default_wsa5__MetadataType(soap, a)


#define soap_serialize__wsa5__Metadata soap_serialize_wsa5__MetadataType


#define soap__wsa5__Metadata2s soap_wsa5__MetadataType2s


#define soap_out__wsa5__Metadata soap_out_wsa5__MetadataType


#define soap_s2_wsa5__Metadata soap_s2wsa5__MetadataType


#define soap_in__wsa5__Metadata soap_in_wsa5__MetadataType


#define soap_instantiate__wsa5__Metadata soap_instantiate_wsa5__MetadataType


#define soap_new__wsa5__Metadata soap_new_wsa5__MetadataType


#define soap_new_req__wsa5__Metadata soap_new_req_wsa5__MetadataType


#define soap_new_set__wsa5__Metadata soap_new_set_wsa5__MetadataType


#define soap_put__wsa5__Metadata soap_put_wsa5__MetadataType


#define soap_write__wsa5__Metadata soap_write_wsa5__MetadataType


#define soap_get__wsa5__Metadata soap_get_wsa5__MetadataType


#define soap_read__wsa5__Metadata soap_read_wsa5__MetadataType

#endif
/* _wsa5__ReferenceParameters is a typedef synonym for wsa5__ReferenceParametersType */

#ifndef SOAP_TYPE__wsa5__ReferenceParameters_DEFINED
#define SOAP_TYPE__wsa5__ReferenceParameters_DEFINED

#define soap_default__wsa5__ReferenceParameters(soap, a) soap_default_wsa5__ReferenceParametersType(soap, a)


#define soap_serialize__wsa5__ReferenceParameters soap_serialize_wsa5__ReferenceParametersType


#define soap__wsa5__ReferenceParameters2s soap_wsa5__ReferenceParametersType2s


#define soap_out__wsa5__ReferenceParameters soap_out_wsa5__ReferenceParametersType


#define soap_s2_wsa5__ReferenceParameters soap_s2wsa5__ReferenceParametersType


#define soap_in__wsa5__ReferenceParameters soap_in_wsa5__ReferenceParametersType


#define soap_instantiate__wsa5__ReferenceParameters soap_instantiate_wsa5__ReferenceParametersType


#define soap_new__wsa5__ReferenceParameters soap_new_wsa5__ReferenceParametersType


#define soap_new_req__wsa5__ReferenceParameters soap_new_req_wsa5__ReferenceParametersType


#define soap_new_set__wsa5__ReferenceParameters soap_new_set_wsa5__ReferenceParametersType


#define soap_put__wsa5__ReferenceParameters soap_put_wsa5__ReferenceParametersType


#define soap_write__wsa5__ReferenceParameters soap_write_wsa5__ReferenceParametersType


#define soap_get__wsa5__ReferenceParameters soap_get_wsa5__ReferenceParametersType


#define soap_read__wsa5__ReferenceParameters soap_read_wsa5__ReferenceParametersType

#endif
/* _wsa5__EndpointReference is a typedef synonym for wsa5__EndpointReferenceType */

#ifndef SOAP_TYPE__wsa5__EndpointReference_DEFINED
#define SOAP_TYPE__wsa5__EndpointReference_DEFINED

#define soap_default__wsa5__EndpointReference(soap, a) soap_default_wsa5__EndpointReferenceType(soap, a)


#define soap_serialize__wsa5__EndpointReference soap_serialize_wsa5__EndpointReferenceType


#define soap__wsa5__EndpointReference2s soap_wsa5__EndpointReferenceType2s


#define soap_out__wsa5__EndpointReference soap_out_wsa5__EndpointReferenceType


#define soap_s2_wsa5__EndpointReference soap_s2wsa5__EndpointReferenceType


#define soap_in__wsa5__EndpointReference soap_in_wsa5__EndpointReferenceType


#define soap_instantiate__wsa5__EndpointReference soap_instantiate_wsa5__EndpointReferenceType


#define soap_new__wsa5__EndpointReference soap_new_wsa5__EndpointReferenceType


#define soap_new_req__wsa5__EndpointReference soap_new_req_wsa5__EndpointReferenceType


#define soap_new_set__wsa5__EndpointReference soap_new_set_wsa5__EndpointReferenceType


#define soap_put__wsa5__EndpointReference soap_put_wsa5__EndpointReferenceType


#define soap_write__wsa5__EndpointReference soap_write_wsa5__EndpointReferenceType


#define soap_get__wsa5__EndpointReference soap_get_wsa5__EndpointReferenceType


#define soap_read__wsa5__EndpointReference soap_read_wsa5__EndpointReferenceType

#endif

#ifndef SOAP_TYPE_wsa5__ProblemActionType_DEFINED
#define SOAP_TYPE_wsa5__ProblemActionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsa5__ProblemActionType(struct soap*, struct wsa5__ProblemActionType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__ProblemActionType(struct soap*, const struct wsa5__ProblemActionType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__ProblemActionType(struct soap*, const char*, int, const struct wsa5__ProblemActionType *, const char*);
SOAP_FMAC3 struct wsa5__ProblemActionType * SOAP_FMAC4 soap_in_wsa5__ProblemActionType(struct soap*, const char*, struct wsa5__ProblemActionType *, const char*);
SOAP_FMAC1 struct wsa5__ProblemActionType * SOAP_FMAC2 soap_instantiate_wsa5__ProblemActionType(struct soap*, int, const char*, const char*, size_t*);

inline struct wsa5__ProblemActionType * soap_new_wsa5__ProblemActionType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsa5__ProblemActionType(soap, n, NULL, NULL, NULL);
}

inline struct wsa5__ProblemActionType * soap_new_req_wsa5__ProblemActionType(
	struct soap *soap)
{
	struct wsa5__ProblemActionType *_p = soap_new_wsa5__ProblemActionType(soap);
	if (_p)
	{	soap_default_wsa5__ProblemActionType(soap, _p);
	}
	return _p;
}

inline struct wsa5__ProblemActionType * soap_new_set_wsa5__ProblemActionType(
	struct soap *soap,
	char *Action,
	char *SoapAction,
	char *__anyAttribute)
{
	struct wsa5__ProblemActionType *_p = soap_new_wsa5__ProblemActionType(soap);
	if (_p)
	{	soap_default_wsa5__ProblemActionType(soap, _p);
		_p->Action = Action;
		_p->SoapAction = SoapAction;
		_p->__anyAttribute = __anyAttribute;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__ProblemActionType(struct soap*, const struct wsa5__ProblemActionType *, const char*, const char*);

inline int soap_write_wsa5__ProblemActionType(struct soap *soap, struct wsa5__ProblemActionType const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_wsa5__ProblemActionType(soap, p), 0) || soap_put_wsa5__ProblemActionType(soap, p, "wsa5:ProblemActionType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct wsa5__ProblemActionType * SOAP_FMAC4 soap_get_wsa5__ProblemActionType(struct soap*, struct wsa5__ProblemActionType *, const char*, const char*);

inline int soap_read_wsa5__ProblemActionType(struct soap *soap, struct wsa5__ProblemActionType *p)
{
	if (p)
	{	soap_default_wsa5__ProblemActionType(soap, p);
		if (soap_begin_recv(soap) || soap_get_wsa5__ProblemActionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_wsa5__RelatesToType_DEFINED
#define SOAP_TYPE_wsa5__RelatesToType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsa5__RelatesToType(struct soap*, struct wsa5__RelatesToType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__RelatesToType(struct soap*, const struct wsa5__RelatesToType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__RelatesToType(struct soap*, const char*, int, const struct wsa5__RelatesToType *, const char*);
SOAP_FMAC3 struct wsa5__RelatesToType * SOAP_FMAC4 soap_in_wsa5__RelatesToType(struct soap*, const char*, struct wsa5__RelatesToType *, const char*);
SOAP_FMAC1 struct wsa5__RelatesToType * SOAP_FMAC2 soap_instantiate_wsa5__RelatesToType(struct soap*, int, const char*, const char*, size_t*);

inline struct wsa5__RelatesToType * soap_new_wsa5__RelatesToType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsa5__RelatesToType(soap, n, NULL, NULL, NULL);
}

inline struct wsa5__RelatesToType * soap_new_req_wsa5__RelatesToType(
	struct soap *soap)
{
	struct wsa5__RelatesToType *_p = soap_new_wsa5__RelatesToType(soap);
	if (_p)
	{	soap_default_wsa5__RelatesToType(soap, _p);
	}
	return _p;
}

inline struct wsa5__RelatesToType * soap_new_set_wsa5__RelatesToType(
	struct soap *soap,
	char *__item,
	char *RelationshipType,
	char *__anyAttribute)
{
	struct wsa5__RelatesToType *_p = soap_new_wsa5__RelatesToType(soap);
	if (_p)
	{	soap_default_wsa5__RelatesToType(soap, _p);
		_p->__item = __item;
		_p->RelationshipType = RelationshipType;
		_p->__anyAttribute = __anyAttribute;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__RelatesToType(struct soap*, const struct wsa5__RelatesToType *, const char*, const char*);

inline int soap_write_wsa5__RelatesToType(struct soap *soap, struct wsa5__RelatesToType const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_wsa5__RelatesToType(soap, p), 0) || soap_put_wsa5__RelatesToType(soap, p, "wsa5:RelatesToType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct wsa5__RelatesToType * SOAP_FMAC4 soap_get_wsa5__RelatesToType(struct soap*, struct wsa5__RelatesToType *, const char*, const char*);

inline int soap_read_wsa5__RelatesToType(struct soap *soap, struct wsa5__RelatesToType *p)
{
	if (p)
	{	soap_default_wsa5__RelatesToType(soap, p);
		if (soap_begin_recv(soap) || soap_get_wsa5__RelatesToType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_wsa5__MetadataType_DEFINED
#define SOAP_TYPE_wsa5__MetadataType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsa5__MetadataType(struct soap*, struct wsa5__MetadataType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__MetadataType(struct soap*, const struct wsa5__MetadataType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__MetadataType(struct soap*, const char*, int, const struct wsa5__MetadataType *, const char*);
SOAP_FMAC3 struct wsa5__MetadataType * SOAP_FMAC4 soap_in_wsa5__MetadataType(struct soap*, const char*, struct wsa5__MetadataType *, const char*);
SOAP_FMAC1 struct wsa5__MetadataType * SOAP_FMAC2 soap_instantiate_wsa5__MetadataType(struct soap*, int, const char*, const char*, size_t*);

inline struct wsa5__MetadataType * soap_new_wsa5__MetadataType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsa5__MetadataType(soap, n, NULL, NULL, NULL);
}

inline struct wsa5__MetadataType * soap_new_req_wsa5__MetadataType(
	struct soap *soap,
	int __size,
	char **__any)
{
	struct wsa5__MetadataType *_p = soap_new_wsa5__MetadataType(soap);
	if (_p)
	{	soap_default_wsa5__MetadataType(soap, _p);
		_p->__size = __size;
		_p->__any = __any;
	}
	return _p;
}

inline struct wsa5__MetadataType * soap_new_set_wsa5__MetadataType(
	struct soap *soap,
	int __size,
	char **__any,
	char *__anyAttribute)
{
	struct wsa5__MetadataType *_p = soap_new_wsa5__MetadataType(soap);
	if (_p)
	{	soap_default_wsa5__MetadataType(soap, _p);
		_p->__size = __size;
		_p->__any = __any;
		_p->__anyAttribute = __anyAttribute;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__MetadataType(struct soap*, const struct wsa5__MetadataType *, const char*, const char*);

inline int soap_write_wsa5__MetadataType(struct soap *soap, struct wsa5__MetadataType const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_wsa5__MetadataType(soap, p), 0) || soap_put_wsa5__MetadataType(soap, p, "wsa5:MetadataType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct wsa5__MetadataType * SOAP_FMAC4 soap_get_wsa5__MetadataType(struct soap*, struct wsa5__MetadataType *, const char*, const char*);

inline int soap_read_wsa5__MetadataType(struct soap *soap, struct wsa5__MetadataType *p)
{
	if (p)
	{	soap_default_wsa5__MetadataType(soap, p);
		if (soap_begin_recv(soap) || soap_get_wsa5__MetadataType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_wsa5__ReferenceParametersType_DEFINED
#define SOAP_TYPE_wsa5__ReferenceParametersType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsa5__ReferenceParametersType(struct soap*, struct wsa5__ReferenceParametersType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__ReferenceParametersType(struct soap*, const struct wsa5__ReferenceParametersType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__ReferenceParametersType(struct soap*, const char*, int, const struct wsa5__ReferenceParametersType *, const char*);
SOAP_FMAC3 struct wsa5__ReferenceParametersType * SOAP_FMAC4 soap_in_wsa5__ReferenceParametersType(struct soap*, const char*, struct wsa5__ReferenceParametersType *, const char*);
SOAP_FMAC1 struct wsa5__ReferenceParametersType * SOAP_FMAC2 soap_instantiate_wsa5__ReferenceParametersType(struct soap*, int, const char*, const char*, size_t*);

inline struct wsa5__ReferenceParametersType * soap_new_wsa5__ReferenceParametersType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsa5__ReferenceParametersType(soap, n, NULL, NULL, NULL);
}

inline struct wsa5__ReferenceParametersType * soap_new_req_wsa5__ReferenceParametersType(
	struct soap *soap,
	int __size,
	char **__any)
{
	struct wsa5__ReferenceParametersType *_p = soap_new_wsa5__ReferenceParametersType(soap);
	if (_p)
	{	soap_default_wsa5__ReferenceParametersType(soap, _p);
		_p->__size = __size;
		_p->__any = __any;
	}
	return _p;
}

inline struct wsa5__ReferenceParametersType * soap_new_set_wsa5__ReferenceParametersType(
	struct soap *soap,
	int *chan__ChannelInstance,
	int __size,
	char **__any,
	char *__anyAttribute)
{
	struct wsa5__ReferenceParametersType *_p = soap_new_wsa5__ReferenceParametersType(soap);
	if (_p)
	{	soap_default_wsa5__ReferenceParametersType(soap, _p);
		_p->chan__ChannelInstance = chan__ChannelInstance;
		_p->__size = __size;
		_p->__any = __any;
		_p->__anyAttribute = __anyAttribute;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__ReferenceParametersType(struct soap*, const struct wsa5__ReferenceParametersType *, const char*, const char*);

inline int soap_write_wsa5__ReferenceParametersType(struct soap *soap, struct wsa5__ReferenceParametersType const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_wsa5__ReferenceParametersType(soap, p), 0) || soap_put_wsa5__ReferenceParametersType(soap, p, "wsa5:ReferenceParametersType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct wsa5__ReferenceParametersType * SOAP_FMAC4 soap_get_wsa5__ReferenceParametersType(struct soap*, struct wsa5__ReferenceParametersType *, const char*, const char*);

inline int soap_read_wsa5__ReferenceParametersType(struct soap *soap, struct wsa5__ReferenceParametersType *p)
{
	if (p)
	{	soap_default_wsa5__ReferenceParametersType(soap, p);
		if (soap_begin_recv(soap) || soap_get_wsa5__ReferenceParametersType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_wsa5__EndpointReferenceType_DEFINED
#define SOAP_TYPE_wsa5__EndpointReferenceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsa5__EndpointReferenceType(struct soap*, struct wsa5__EndpointReferenceType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__EndpointReferenceType(struct soap*, const struct wsa5__EndpointReferenceType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__EndpointReferenceType(struct soap*, const char*, int, const struct wsa5__EndpointReferenceType *, const char*);
SOAP_FMAC3 struct wsa5__EndpointReferenceType * SOAP_FMAC4 soap_in_wsa5__EndpointReferenceType(struct soap*, const char*, struct wsa5__EndpointReferenceType *, const char*);
SOAP_FMAC1 struct wsa5__EndpointReferenceType * SOAP_FMAC2 soap_instantiate_wsa5__EndpointReferenceType(struct soap*, int, const char*, const char*, size_t*);

inline struct wsa5__EndpointReferenceType * soap_new_wsa5__EndpointReferenceType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsa5__EndpointReferenceType(soap, n, NULL, NULL, NULL);
}

inline struct wsa5__EndpointReferenceType * soap_new_req_wsa5__EndpointReferenceType(
	struct soap *soap,
	char *Address,
	int __size,
	char **__any)
{
	struct wsa5__EndpointReferenceType *_p = soap_new_wsa5__EndpointReferenceType(soap);
	if (_p)
	{	soap_default_wsa5__EndpointReferenceType(soap, _p);
		_p->Address = Address;
		_p->__size = __size;
		_p->__any = __any;
	}
	return _p;
}

inline struct wsa5__EndpointReferenceType * soap_new_set_wsa5__EndpointReferenceType(
	struct soap *soap,
	char *Address,
	struct wsa5__ReferenceParametersType *ReferenceParameters,
	struct wsa5__MetadataType *Metadata,
	int __size,
	char **__any,
	char *__anyAttribute)
{
	struct wsa5__EndpointReferenceType *_p = soap_new_wsa5__EndpointReferenceType(soap);
	if (_p)
	{	soap_default_wsa5__EndpointReferenceType(soap, _p);
		_p->Address = Address;
		_p->ReferenceParameters = ReferenceParameters;
		_p->Metadata = Metadata;
		_p->__size = __size;
		_p->__any = __any;
		_p->__anyAttribute = __anyAttribute;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__EndpointReferenceType(struct soap*, const struct wsa5__EndpointReferenceType *, const char*, const char*);

inline int soap_write_wsa5__EndpointReferenceType(struct soap *soap, struct wsa5__EndpointReferenceType const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_wsa5__EndpointReferenceType(soap, p), 0) || soap_put_wsa5__EndpointReferenceType(soap, p, "wsa5:EndpointReferenceType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct wsa5__EndpointReferenceType * SOAP_FMAC4 soap_get_wsa5__EndpointReferenceType(struct soap*, struct wsa5__EndpointReferenceType *, const char*, const char*);

inline int soap_read_wsa5__EndpointReferenceType(struct soap *soap, struct wsa5__EndpointReferenceType *p)
{
	if (p)
	{	soap_default_wsa5__EndpointReferenceType(soap, p);
		if (soap_begin_recv(soap) || soap_get_wsa5__EndpointReferenceType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__xop__Include_DEFINED
#define SOAP_TYPE__xop__Include_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default__xop__Include(struct soap*, struct _xop__Include *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__xop__Include(struct soap*, const struct _xop__Include *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__xop__Include(struct soap*, const char*, int, const struct _xop__Include *, const char*);
SOAP_FMAC3 struct _xop__Include * SOAP_FMAC4 soap_in__xop__Include(struct soap*, const char*, struct _xop__Include *, const char*);
SOAP_FMAC1 struct _xop__Include * SOAP_FMAC2 soap_instantiate__xop__Include(struct soap*, int, const char*, const char*, size_t*);

inline struct _xop__Include * soap_new__xop__Include(struct soap *soap, int n = -1)
{
	return soap_instantiate__xop__Include(soap, n, NULL, NULL, NULL);
}

inline struct _xop__Include * soap_new_req__xop__Include(
	struct soap *soap)
{
	struct _xop__Include *_p = soap_new__xop__Include(soap);
	if (_p)
	{	soap_default__xop__Include(soap, _p);
	}
	return _p;
}

inline struct _xop__Include * soap_new_set__xop__Include(
	struct soap *soap,
	unsigned char *__ptr,
	int __size,
	char *id,
	char *type,
	char *options)
{
	struct _xop__Include *_p = soap_new__xop__Include(soap);
	if (_p)
	{	soap_default__xop__Include(soap, _p);
		_p->__ptr = __ptr;
		_p->__size = __size;
		_p->id = id;
		_p->type = type;
		_p->options = options;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put__xop__Include(struct soap*, const struct _xop__Include *, const char*, const char*);

inline int soap_write__xop__Include(struct soap *soap, struct _xop__Include const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize__xop__Include(soap, p), 0) || soap_put__xop__Include(soap, p, "xop:Include", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct _xop__Include * SOAP_FMAC4 soap_get__xop__Include(struct soap*, struct _xop__Include *, const char*, const char*);

inline int soap_read__xop__Include(struct soap *soap, struct _xop__Include *p)
{
	if (p)
	{	soap_default__xop__Include(soap, p);
		if (soap_begin_recv(soap) || soap_get__xop__Include(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tt__union_ColorOptions_DEFINED
#define SOAP_TYPE__tt__union_ColorOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__tt__union_ColorOptions(struct soap*, int, const union _tt__union_ColorOptions *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tt__union_ColorOptions(struct soap*, int, const union _tt__union_ColorOptions *);
SOAP_FMAC3 union _tt__union_ColorOptions * SOAP_FMAC4 soap_in__tt__union_ColorOptions(struct soap*, int*, union _tt__union_ColorOptions *);
#endif

#ifndef SOAP_TYPE__tt__union_EventStream_DEFINED
#define SOAP_TYPE__tt__union_EventStream_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__tt__union_EventStream(struct soap*, int, const union _tt__union_EventStream *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tt__union_EventStream(struct soap*, int, const union _tt__union_EventStream *);
SOAP_FMAC3 union _tt__union_EventStream * SOAP_FMAC4 soap_in__tt__union_EventStream(struct soap*, int*, union _tt__union_EventStream *);
#endif

#ifndef SOAP_TYPE__tt__union_PTZStream_DEFINED
#define SOAP_TYPE__tt__union_PTZStream_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__tt__union_PTZStream(struct soap*, int, const union _tt__union_PTZStream *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tt__union_PTZStream(struct soap*, int, const union _tt__union_PTZStream *);
SOAP_FMAC3 union _tt__union_PTZStream * SOAP_FMAC4 soap_in__tt__union_PTZStream(struct soap*, int*, union _tt__union_PTZStream *);
#endif

#ifndef SOAP_TYPE__tt__union_VideoAnalyticsStream_DEFINED
#define SOAP_TYPE__tt__union_VideoAnalyticsStream_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__tt__union_VideoAnalyticsStream(struct soap*, int, const union _tt__union_VideoAnalyticsStream *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tt__union_VideoAnalyticsStream(struct soap*, int, const union _tt__union_VideoAnalyticsStream *);
SOAP_FMAC3 union _tt__union_VideoAnalyticsStream * SOAP_FMAC4 soap_in__tt__union_VideoAnalyticsStream(struct soap*, int*, union _tt__union_VideoAnalyticsStream *);
#endif

#ifndef SOAP_TYPE__tt__union_MetadataStream_DEFINED
#define SOAP_TYPE__tt__union_MetadataStream_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__tt__union_MetadataStream(struct soap*, int, const union _tt__union_MetadataStream *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tt__union_MetadataStream(struct soap*, int, const union _tt__union_MetadataStream *);
SOAP_FMAC3 union _tt__union_MetadataStream * SOAP_FMAC4 soap_in__tt__union_MetadataStream(struct soap*, int*, union _tt__union_MetadataStream *);
#endif

#ifndef SOAP_TYPE__tt__union_PTZPresetTourPresetDetail_DEFINED
#define SOAP_TYPE__tt__union_PTZPresetTourPresetDetail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__tt__union_PTZPresetTourPresetDetail(struct soap*, int, const union _tt__union_PTZPresetTourPresetDetail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tt__union_PTZPresetTourPresetDetail(struct soap*, int, const union _tt__union_PTZPresetTourPresetDetail *);
SOAP_FMAC3 union _tt__union_PTZPresetTourPresetDetail * SOAP_FMAC4 soap_in__tt__union_PTZPresetTourPresetDetail(struct soap*, int*, union _tt__union_PTZPresetTourPresetDetail *);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__DeleteOSD_DEFINED
#define SOAP_TYPE_PointerTo_trt__DeleteOSD_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__DeleteOSD(struct soap*, _trt__DeleteOSD *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__DeleteOSD(struct soap*, const char *, int, _trt__DeleteOSD *const*, const char *);
SOAP_FMAC3 _trt__DeleteOSD ** SOAP_FMAC4 soap_in_PointerTo_trt__DeleteOSD(struct soap*, const char*, _trt__DeleteOSD **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__DeleteOSD(struct soap*, _trt__DeleteOSD *const*, const char*, const char*);
SOAP_FMAC3 _trt__DeleteOSD ** SOAP_FMAC4 soap_get_PointerTo_trt__DeleteOSD(struct soap*, _trt__DeleteOSD **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__CreateOSD_DEFINED
#define SOAP_TYPE_PointerTo_trt__CreateOSD_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__CreateOSD(struct soap*, _trt__CreateOSD *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__CreateOSD(struct soap*, const char *, int, _trt__CreateOSD *const*, const char *);
SOAP_FMAC3 _trt__CreateOSD ** SOAP_FMAC4 soap_in_PointerTo_trt__CreateOSD(struct soap*, const char*, _trt__CreateOSD **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__CreateOSD(struct soap*, _trt__CreateOSD *const*, const char*, const char*);
SOAP_FMAC3 _trt__CreateOSD ** SOAP_FMAC4 soap_get_PointerTo_trt__CreateOSD(struct soap*, _trt__CreateOSD **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__SetOSD_DEFINED
#define SOAP_TYPE_PointerTo_trt__SetOSD_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__SetOSD(struct soap*, _trt__SetOSD *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__SetOSD(struct soap*, const char *, int, _trt__SetOSD *const*, const char *);
SOAP_FMAC3 _trt__SetOSD ** SOAP_FMAC4 soap_in_PointerTo_trt__SetOSD(struct soap*, const char*, _trt__SetOSD **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__SetOSD(struct soap*, _trt__SetOSD *const*, const char*, const char*);
SOAP_FMAC3 _trt__SetOSD ** SOAP_FMAC4 soap_get_PointerTo_trt__SetOSD(struct soap*, _trt__SetOSD **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__GetOSDOptions_DEFINED
#define SOAP_TYPE_PointerTo_trt__GetOSDOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__GetOSDOptions(struct soap*, _trt__GetOSDOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__GetOSDOptions(struct soap*, const char *, int, _trt__GetOSDOptions *const*, const char *);
SOAP_FMAC3 _trt__GetOSDOptions ** SOAP_FMAC4 soap_in_PointerTo_trt__GetOSDOptions(struct soap*, const char*, _trt__GetOSDOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__GetOSDOptions(struct soap*, _trt__GetOSDOptions *const*, const char*, const char*);
SOAP_FMAC3 _trt__GetOSDOptions ** SOAP_FMAC4 soap_get_PointerTo_trt__GetOSDOptions(struct soap*, _trt__GetOSDOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__GetOSD_DEFINED
#define SOAP_TYPE_PointerTo_trt__GetOSD_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__GetOSD(struct soap*, _trt__GetOSD *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__GetOSD(struct soap*, const char *, int, _trt__GetOSD *const*, const char *);
SOAP_FMAC3 _trt__GetOSD ** SOAP_FMAC4 soap_in_PointerTo_trt__GetOSD(struct soap*, const char*, _trt__GetOSD **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__GetOSD(struct soap*, _trt__GetOSD *const*, const char*, const char*);
SOAP_FMAC3 _trt__GetOSD ** SOAP_FMAC4 soap_get_PointerTo_trt__GetOSD(struct soap*, _trt__GetOSD **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__GetOSDs_DEFINED
#define SOAP_TYPE_PointerTo_trt__GetOSDs_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__GetOSDs(struct soap*, _trt__GetOSDs *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__GetOSDs(struct soap*, const char *, int, _trt__GetOSDs *const*, const char *);
SOAP_FMAC3 _trt__GetOSDs ** SOAP_FMAC4 soap_in_PointerTo_trt__GetOSDs(struct soap*, const char*, _trt__GetOSDs **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__GetOSDs(struct soap*, _trt__GetOSDs *const*, const char*, const char*);
SOAP_FMAC3 _trt__GetOSDs ** SOAP_FMAC4 soap_get_PointerTo_trt__GetOSDs(struct soap*, _trt__GetOSDs **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__SetVideoSourceMode_DEFINED
#define SOAP_TYPE_PointerTo_trt__SetVideoSourceMode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__SetVideoSourceMode(struct soap*, _trt__SetVideoSourceMode *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__SetVideoSourceMode(struct soap*, const char *, int, _trt__SetVideoSourceMode *const*, const char *);
SOAP_FMAC3 _trt__SetVideoSourceMode ** SOAP_FMAC4 soap_in_PointerTo_trt__SetVideoSourceMode(struct soap*, const char*, _trt__SetVideoSourceMode **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__SetVideoSourceMode(struct soap*, _trt__SetVideoSourceMode *const*, const char*, const char*);
SOAP_FMAC3 _trt__SetVideoSourceMode ** SOAP_FMAC4 soap_get_PointerTo_trt__SetVideoSourceMode(struct soap*, _trt__SetVideoSourceMode **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__GetVideoSourceModes_DEFINED
#define SOAP_TYPE_PointerTo_trt__GetVideoSourceModes_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__GetVideoSourceModes(struct soap*, _trt__GetVideoSourceModes *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__GetVideoSourceModes(struct soap*, const char *, int, _trt__GetVideoSourceModes *const*, const char *);
SOAP_FMAC3 _trt__GetVideoSourceModes ** SOAP_FMAC4 soap_in_PointerTo_trt__GetVideoSourceModes(struct soap*, const char*, _trt__GetVideoSourceModes **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__GetVideoSourceModes(struct soap*, _trt__GetVideoSourceModes *const*, const char*, const char*);
SOAP_FMAC3 _trt__GetVideoSourceModes ** SOAP_FMAC4 soap_get_PointerTo_trt__GetVideoSourceModes(struct soap*, _trt__GetVideoSourceModes **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__GetSnapshotUri_DEFINED
#define SOAP_TYPE_PointerTo_trt__GetSnapshotUri_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__GetSnapshotUri(struct soap*, _trt__GetSnapshotUri *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__GetSnapshotUri(struct soap*, const char *, int, _trt__GetSnapshotUri *const*, const char *);
SOAP_FMAC3 _trt__GetSnapshotUri ** SOAP_FMAC4 soap_in_PointerTo_trt__GetSnapshotUri(struct soap*, const char*, _trt__GetSnapshotUri **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__GetSnapshotUri(struct soap*, _trt__GetSnapshotUri *const*, const char*, const char*);
SOAP_FMAC3 _trt__GetSnapshotUri ** SOAP_FMAC4 soap_get_PointerTo_trt__GetSnapshotUri(struct soap*, _trt__GetSnapshotUri **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__SetSynchronizationPoint_DEFINED
#define SOAP_TYPE_PointerTo_trt__SetSynchronizationPoint_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__SetSynchronizationPoint(struct soap*, _trt__SetSynchronizationPoint *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__SetSynchronizationPoint(struct soap*, const char *, int, _trt__SetSynchronizationPoint *const*, const char *);
SOAP_FMAC3 _trt__SetSynchronizationPoint ** SOAP_FMAC4 soap_in_PointerTo_trt__SetSynchronizationPoint(struct soap*, const char*, _trt__SetSynchronizationPoint **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__SetSynchronizationPoint(struct soap*, _trt__SetSynchronizationPoint *const*, const char*, const char*);
SOAP_FMAC3 _trt__SetSynchronizationPoint ** SOAP_FMAC4 soap_get_PointerTo_trt__SetSynchronizationPoint(struct soap*, _trt__SetSynchronizationPoint **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__StopMulticastStreaming_DEFINED
#define SOAP_TYPE_PointerTo_trt__StopMulticastStreaming_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__StopMulticastStreaming(struct soap*, _trt__StopMulticastStreaming *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__StopMulticastStreaming(struct soap*, const char *, int, _trt__StopMulticastStreaming *const*, const char *);
SOAP_FMAC3 _trt__StopMulticastStreaming ** SOAP_FMAC4 soap_in_PointerTo_trt__StopMulticastStreaming(struct soap*, const char*, _trt__StopMulticastStreaming **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__StopMulticastStreaming(struct soap*, _trt__StopMulticastStreaming *const*, const char*, const char*);
SOAP_FMAC3 _trt__StopMulticastStreaming ** SOAP_FMAC4 soap_get_PointerTo_trt__StopMulticastStreaming(struct soap*, _trt__StopMulticastStreaming **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__StartMulticastStreaming_DEFINED
#define SOAP_TYPE_PointerTo_trt__StartMulticastStreaming_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__StartMulticastStreaming(struct soap*, _trt__StartMulticastStreaming *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__StartMulticastStreaming(struct soap*, const char *, int, _trt__StartMulticastStreaming *const*, const char *);
SOAP_FMAC3 _trt__StartMulticastStreaming ** SOAP_FMAC4 soap_in_PointerTo_trt__StartMulticastStreaming(struct soap*, const char*, _trt__StartMulticastStreaming **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__StartMulticastStreaming(struct soap*, _trt__StartMulticastStreaming *const*, const char*, const char*);
SOAP_FMAC3 _trt__StartMulticastStreaming ** SOAP_FMAC4 soap_get_PointerTo_trt__StartMulticastStreaming(struct soap*, _trt__StartMulticastStreaming **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__GetStreamUri_DEFINED
#define SOAP_TYPE_PointerTo_trt__GetStreamUri_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__GetStreamUri(struct soap*, _trt__GetStreamUri *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__GetStreamUri(struct soap*, const char *, int, _trt__GetStreamUri *const*, const char *);
SOAP_FMAC3 _trt__GetStreamUri ** SOAP_FMAC4 soap_in_PointerTo_trt__GetStreamUri(struct soap*, const char*, _trt__GetStreamUri **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__GetStreamUri(struct soap*, _trt__GetStreamUri *const*, const char*, const char*);
SOAP_FMAC3 _trt__GetStreamUri ** SOAP_FMAC4 soap_get_PointerTo_trt__GetStreamUri(struct soap*, _trt__GetStreamUri **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__GetGuaranteedNumberOfVideoEncoderInstances_DEFINED
#define SOAP_TYPE_PointerTo_trt__GetGuaranteedNumberOfVideoEncoderInstances_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__GetGuaranteedNumberOfVideoEncoderInstances(struct soap*, _trt__GetGuaranteedNumberOfVideoEncoderInstances *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__GetGuaranteedNumberOfVideoEncoderInstances(struct soap*, const char *, int, _trt__GetGuaranteedNumberOfVideoEncoderInstances *const*, const char *);
SOAP_FMAC3 _trt__GetGuaranteedNumberOfVideoEncoderInstances ** SOAP_FMAC4 soap_in_PointerTo_trt__GetGuaranteedNumberOfVideoEncoderInstances(struct soap*, const char*, _trt__GetGuaranteedNumberOfVideoEncoderInstances **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__GetGuaranteedNumberOfVideoEncoderInstances(struct soap*, _trt__GetGuaranteedNumberOfVideoEncoderInstances *const*, const char*, const char*);
SOAP_FMAC3 _trt__GetGuaranteedNumberOfVideoEncoderInstances ** SOAP_FMAC4 soap_get_PointerTo_trt__GetGuaranteedNumberOfVideoEncoderInstances(struct soap*, _trt__GetGuaranteedNumberOfVideoEncoderInstances **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__GetAudioDecoderConfigurationOptions_DEFINED
#define SOAP_TYPE_PointerTo_trt__GetAudioDecoderConfigurationOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__GetAudioDecoderConfigurationOptions(struct soap*, _trt__GetAudioDecoderConfigurationOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__GetAudioDecoderConfigurationOptions(struct soap*, const char *, int, _trt__GetAudioDecoderConfigurationOptions *const*, const char *);
SOAP_FMAC3 _trt__GetAudioDecoderConfigurationOptions ** SOAP_FMAC4 soap_in_PointerTo_trt__GetAudioDecoderConfigurationOptions(struct soap*, const char*, _trt__GetAudioDecoderConfigurationOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__GetAudioDecoderConfigurationOptions(struct soap*, _trt__GetAudioDecoderConfigurationOptions *const*, const char*, const char*);
SOAP_FMAC3 _trt__GetAudioDecoderConfigurationOptions ** SOAP_FMAC4 soap_get_PointerTo_trt__GetAudioDecoderConfigurationOptions(struct soap*, _trt__GetAudioDecoderConfigurationOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__GetAudioOutputConfigurationOptions_DEFINED
#define SOAP_TYPE_PointerTo_trt__GetAudioOutputConfigurationOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__GetAudioOutputConfigurationOptions(struct soap*, _trt__GetAudioOutputConfigurationOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__GetAudioOutputConfigurationOptions(struct soap*, const char *, int, _trt__GetAudioOutputConfigurationOptions *const*, const char *);
SOAP_FMAC3 _trt__GetAudioOutputConfigurationOptions ** SOAP_FMAC4 soap_in_PointerTo_trt__GetAudioOutputConfigurationOptions(struct soap*, const char*, _trt__GetAudioOutputConfigurationOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__GetAudioOutputConfigurationOptions(struct soap*, _trt__GetAudioOutputConfigurationOptions *const*, const char*, const char*);
SOAP_FMAC3 _trt__GetAudioOutputConfigurationOptions ** SOAP_FMAC4 soap_get_PointerTo_trt__GetAudioOutputConfigurationOptions(struct soap*, _trt__GetAudioOutputConfigurationOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__GetMetadataConfigurationOptions_DEFINED
#define SOAP_TYPE_PointerTo_trt__GetMetadataConfigurationOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__GetMetadataConfigurationOptions(struct soap*, _trt__GetMetadataConfigurationOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__GetMetadataConfigurationOptions(struct soap*, const char *, int, _trt__GetMetadataConfigurationOptions *const*, const char *);
SOAP_FMAC3 _trt__GetMetadataConfigurationOptions ** SOAP_FMAC4 soap_in_PointerTo_trt__GetMetadataConfigurationOptions(struct soap*, const char*, _trt__GetMetadataConfigurationOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__GetMetadataConfigurationOptions(struct soap*, _trt__GetMetadataConfigurationOptions *const*, const char*, const char*);
SOAP_FMAC3 _trt__GetMetadataConfigurationOptions ** SOAP_FMAC4 soap_get_PointerTo_trt__GetMetadataConfigurationOptions(struct soap*, _trt__GetMetadataConfigurationOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__GetAudioEncoderConfigurationOptions_DEFINED
#define SOAP_TYPE_PointerTo_trt__GetAudioEncoderConfigurationOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__GetAudioEncoderConfigurationOptions(struct soap*, _trt__GetAudioEncoderConfigurationOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__GetAudioEncoderConfigurationOptions(struct soap*, const char *, int, _trt__GetAudioEncoderConfigurationOptions *const*, const char *);
SOAP_FMAC3 _trt__GetAudioEncoderConfigurationOptions ** SOAP_FMAC4 soap_in_PointerTo_trt__GetAudioEncoderConfigurationOptions(struct soap*, const char*, _trt__GetAudioEncoderConfigurationOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__GetAudioEncoderConfigurationOptions(struct soap*, _trt__GetAudioEncoderConfigurationOptions *const*, const char*, const char*);
SOAP_FMAC3 _trt__GetAudioEncoderConfigurationOptions ** SOAP_FMAC4 soap_get_PointerTo_trt__GetAudioEncoderConfigurationOptions(struct soap*, _trt__GetAudioEncoderConfigurationOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__GetAudioSourceConfigurationOptions_DEFINED
#define SOAP_TYPE_PointerTo_trt__GetAudioSourceConfigurationOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__GetAudioSourceConfigurationOptions(struct soap*, _trt__GetAudioSourceConfigurationOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__GetAudioSourceConfigurationOptions(struct soap*, const char *, int, _trt__GetAudioSourceConfigurationOptions *const*, const char *);
SOAP_FMAC3 _trt__GetAudioSourceConfigurationOptions ** SOAP_FMAC4 soap_in_PointerTo_trt__GetAudioSourceConfigurationOptions(struct soap*, const char*, _trt__GetAudioSourceConfigurationOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__GetAudioSourceConfigurationOptions(struct soap*, _trt__GetAudioSourceConfigurationOptions *const*, const char*, const char*);
SOAP_FMAC3 _trt__GetAudioSourceConfigurationOptions ** SOAP_FMAC4 soap_get_PointerTo_trt__GetAudioSourceConfigurationOptions(struct soap*, _trt__GetAudioSourceConfigurationOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__GetVideoEncoderConfigurationOptions_DEFINED
#define SOAP_TYPE_PointerTo_trt__GetVideoEncoderConfigurationOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__GetVideoEncoderConfigurationOptions(struct soap*, _trt__GetVideoEncoderConfigurationOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__GetVideoEncoderConfigurationOptions(struct soap*, const char *, int, _trt__GetVideoEncoderConfigurationOptions *const*, const char *);
SOAP_FMAC3 _trt__GetVideoEncoderConfigurationOptions ** SOAP_FMAC4 soap_in_PointerTo_trt__GetVideoEncoderConfigurationOptions(struct soap*, const char*, _trt__GetVideoEncoderConfigurationOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__GetVideoEncoderConfigurationOptions(struct soap*, _trt__GetVideoEncoderConfigurationOptions *const*, const char*, const char*);
SOAP_FMAC3 _trt__GetVideoEncoderConfigurationOptions ** SOAP_FMAC4 soap_get_PointerTo_trt__GetVideoEncoderConfigurationOptions(struct soap*, _trt__GetVideoEncoderConfigurationOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__GetVideoSourceConfigurationOptions_DEFINED
#define SOAP_TYPE_PointerTo_trt__GetVideoSourceConfigurationOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__GetVideoSourceConfigurationOptions(struct soap*, _trt__GetVideoSourceConfigurationOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__GetVideoSourceConfigurationOptions(struct soap*, const char *, int, _trt__GetVideoSourceConfigurationOptions *const*, const char *);
SOAP_FMAC3 _trt__GetVideoSourceConfigurationOptions ** SOAP_FMAC4 soap_in_PointerTo_trt__GetVideoSourceConfigurationOptions(struct soap*, const char*, _trt__GetVideoSourceConfigurationOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__GetVideoSourceConfigurationOptions(struct soap*, _trt__GetVideoSourceConfigurationOptions *const*, const char*, const char*);
SOAP_FMAC3 _trt__GetVideoSourceConfigurationOptions ** SOAP_FMAC4 soap_get_PointerTo_trt__GetVideoSourceConfigurationOptions(struct soap*, _trt__GetVideoSourceConfigurationOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__SetAudioDecoderConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_trt__SetAudioDecoderConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__SetAudioDecoderConfiguration(struct soap*, _trt__SetAudioDecoderConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__SetAudioDecoderConfiguration(struct soap*, const char *, int, _trt__SetAudioDecoderConfiguration *const*, const char *);
SOAP_FMAC3 _trt__SetAudioDecoderConfiguration ** SOAP_FMAC4 soap_in_PointerTo_trt__SetAudioDecoderConfiguration(struct soap*, const char*, _trt__SetAudioDecoderConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__SetAudioDecoderConfiguration(struct soap*, _trt__SetAudioDecoderConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _trt__SetAudioDecoderConfiguration ** SOAP_FMAC4 soap_get_PointerTo_trt__SetAudioDecoderConfiguration(struct soap*, _trt__SetAudioDecoderConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__SetAudioOutputConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_trt__SetAudioOutputConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__SetAudioOutputConfiguration(struct soap*, _trt__SetAudioOutputConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__SetAudioOutputConfiguration(struct soap*, const char *, int, _trt__SetAudioOutputConfiguration *const*, const char *);
SOAP_FMAC3 _trt__SetAudioOutputConfiguration ** SOAP_FMAC4 soap_in_PointerTo_trt__SetAudioOutputConfiguration(struct soap*, const char*, _trt__SetAudioOutputConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__SetAudioOutputConfiguration(struct soap*, _trt__SetAudioOutputConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _trt__SetAudioOutputConfiguration ** SOAP_FMAC4 soap_get_PointerTo_trt__SetAudioOutputConfiguration(struct soap*, _trt__SetAudioOutputConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__SetMetadataConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_trt__SetMetadataConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__SetMetadataConfiguration(struct soap*, _trt__SetMetadataConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__SetMetadataConfiguration(struct soap*, const char *, int, _trt__SetMetadataConfiguration *const*, const char *);
SOAP_FMAC3 _trt__SetMetadataConfiguration ** SOAP_FMAC4 soap_in_PointerTo_trt__SetMetadataConfiguration(struct soap*, const char*, _trt__SetMetadataConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__SetMetadataConfiguration(struct soap*, _trt__SetMetadataConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _trt__SetMetadataConfiguration ** SOAP_FMAC4 soap_get_PointerTo_trt__SetMetadataConfiguration(struct soap*, _trt__SetMetadataConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__SetVideoAnalyticsConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_trt__SetVideoAnalyticsConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__SetVideoAnalyticsConfiguration(struct soap*, _trt__SetVideoAnalyticsConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__SetVideoAnalyticsConfiguration(struct soap*, const char *, int, _trt__SetVideoAnalyticsConfiguration *const*, const char *);
SOAP_FMAC3 _trt__SetVideoAnalyticsConfiguration ** SOAP_FMAC4 soap_in_PointerTo_trt__SetVideoAnalyticsConfiguration(struct soap*, const char*, _trt__SetVideoAnalyticsConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__SetVideoAnalyticsConfiguration(struct soap*, _trt__SetVideoAnalyticsConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _trt__SetVideoAnalyticsConfiguration ** SOAP_FMAC4 soap_get_PointerTo_trt__SetVideoAnalyticsConfiguration(struct soap*, _trt__SetVideoAnalyticsConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__SetAudioEncoderConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_trt__SetAudioEncoderConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__SetAudioEncoderConfiguration(struct soap*, _trt__SetAudioEncoderConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__SetAudioEncoderConfiguration(struct soap*, const char *, int, _trt__SetAudioEncoderConfiguration *const*, const char *);
SOAP_FMAC3 _trt__SetAudioEncoderConfiguration ** SOAP_FMAC4 soap_in_PointerTo_trt__SetAudioEncoderConfiguration(struct soap*, const char*, _trt__SetAudioEncoderConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__SetAudioEncoderConfiguration(struct soap*, _trt__SetAudioEncoderConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _trt__SetAudioEncoderConfiguration ** SOAP_FMAC4 soap_get_PointerTo_trt__SetAudioEncoderConfiguration(struct soap*, _trt__SetAudioEncoderConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__SetAudioSourceConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_trt__SetAudioSourceConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__SetAudioSourceConfiguration(struct soap*, _trt__SetAudioSourceConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__SetAudioSourceConfiguration(struct soap*, const char *, int, _trt__SetAudioSourceConfiguration *const*, const char *);
SOAP_FMAC3 _trt__SetAudioSourceConfiguration ** SOAP_FMAC4 soap_in_PointerTo_trt__SetAudioSourceConfiguration(struct soap*, const char*, _trt__SetAudioSourceConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__SetAudioSourceConfiguration(struct soap*, _trt__SetAudioSourceConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _trt__SetAudioSourceConfiguration ** SOAP_FMAC4 soap_get_PointerTo_trt__SetAudioSourceConfiguration(struct soap*, _trt__SetAudioSourceConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__SetVideoEncoderConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_trt__SetVideoEncoderConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__SetVideoEncoderConfiguration(struct soap*, _trt__SetVideoEncoderConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__SetVideoEncoderConfiguration(struct soap*, const char *, int, _trt__SetVideoEncoderConfiguration *const*, const char *);
SOAP_FMAC3 _trt__SetVideoEncoderConfiguration ** SOAP_FMAC4 soap_in_PointerTo_trt__SetVideoEncoderConfiguration(struct soap*, const char*, _trt__SetVideoEncoderConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__SetVideoEncoderConfiguration(struct soap*, _trt__SetVideoEncoderConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _trt__SetVideoEncoderConfiguration ** SOAP_FMAC4 soap_get_PointerTo_trt__SetVideoEncoderConfiguration(struct soap*, _trt__SetVideoEncoderConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__SetVideoSourceConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_trt__SetVideoSourceConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__SetVideoSourceConfiguration(struct soap*, _trt__SetVideoSourceConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__SetVideoSourceConfiguration(struct soap*, const char *, int, _trt__SetVideoSourceConfiguration *const*, const char *);
SOAP_FMAC3 _trt__SetVideoSourceConfiguration ** SOAP_FMAC4 soap_in_PointerTo_trt__SetVideoSourceConfiguration(struct soap*, const char*, _trt__SetVideoSourceConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__SetVideoSourceConfiguration(struct soap*, _trt__SetVideoSourceConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _trt__SetVideoSourceConfiguration ** SOAP_FMAC4 soap_get_PointerTo_trt__SetVideoSourceConfiguration(struct soap*, _trt__SetVideoSourceConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__GetCompatibleAudioDecoderConfigurations_DEFINED
#define SOAP_TYPE_PointerTo_trt__GetCompatibleAudioDecoderConfigurations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__GetCompatibleAudioDecoderConfigurations(struct soap*, _trt__GetCompatibleAudioDecoderConfigurations *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__GetCompatibleAudioDecoderConfigurations(struct soap*, const char *, int, _trt__GetCompatibleAudioDecoderConfigurations *const*, const char *);
SOAP_FMAC3 _trt__GetCompatibleAudioDecoderConfigurations ** SOAP_FMAC4 soap_in_PointerTo_trt__GetCompatibleAudioDecoderConfigurations(struct soap*, const char*, _trt__GetCompatibleAudioDecoderConfigurations **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__GetCompatibleAudioDecoderConfigurations(struct soap*, _trt__GetCompatibleAudioDecoderConfigurations *const*, const char*, const char*);
SOAP_FMAC3 _trt__GetCompatibleAudioDecoderConfigurations ** SOAP_FMAC4 soap_get_PointerTo_trt__GetCompatibleAudioDecoderConfigurations(struct soap*, _trt__GetCompatibleAudioDecoderConfigurations **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__GetCompatibleAudioOutputConfigurations_DEFINED
#define SOAP_TYPE_PointerTo_trt__GetCompatibleAudioOutputConfigurations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__GetCompatibleAudioOutputConfigurations(struct soap*, _trt__GetCompatibleAudioOutputConfigurations *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__GetCompatibleAudioOutputConfigurations(struct soap*, const char *, int, _trt__GetCompatibleAudioOutputConfigurations *const*, const char *);
SOAP_FMAC3 _trt__GetCompatibleAudioOutputConfigurations ** SOAP_FMAC4 soap_in_PointerTo_trt__GetCompatibleAudioOutputConfigurations(struct soap*, const char*, _trt__GetCompatibleAudioOutputConfigurations **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__GetCompatibleAudioOutputConfigurations(struct soap*, _trt__GetCompatibleAudioOutputConfigurations *const*, const char*, const char*);
SOAP_FMAC3 _trt__GetCompatibleAudioOutputConfigurations ** SOAP_FMAC4 soap_get_PointerTo_trt__GetCompatibleAudioOutputConfigurations(struct soap*, _trt__GetCompatibleAudioOutputConfigurations **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__GetCompatibleMetadataConfigurations_DEFINED
#define SOAP_TYPE_PointerTo_trt__GetCompatibleMetadataConfigurations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__GetCompatibleMetadataConfigurations(struct soap*, _trt__GetCompatibleMetadataConfigurations *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__GetCompatibleMetadataConfigurations(struct soap*, const char *, int, _trt__GetCompatibleMetadataConfigurations *const*, const char *);
SOAP_FMAC3 _trt__GetCompatibleMetadataConfigurations ** SOAP_FMAC4 soap_in_PointerTo_trt__GetCompatibleMetadataConfigurations(struct soap*, const char*, _trt__GetCompatibleMetadataConfigurations **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__GetCompatibleMetadataConfigurations(struct soap*, _trt__GetCompatibleMetadataConfigurations *const*, const char*, const char*);
SOAP_FMAC3 _trt__GetCompatibleMetadataConfigurations ** SOAP_FMAC4 soap_get_PointerTo_trt__GetCompatibleMetadataConfigurations(struct soap*, _trt__GetCompatibleMetadataConfigurations **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__GetCompatibleVideoAnalyticsConfigurations_DEFINED
#define SOAP_TYPE_PointerTo_trt__GetCompatibleVideoAnalyticsConfigurations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__GetCompatibleVideoAnalyticsConfigurations(struct soap*, _trt__GetCompatibleVideoAnalyticsConfigurations *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__GetCompatibleVideoAnalyticsConfigurations(struct soap*, const char *, int, _trt__GetCompatibleVideoAnalyticsConfigurations *const*, const char *);
SOAP_FMAC3 _trt__GetCompatibleVideoAnalyticsConfigurations ** SOAP_FMAC4 soap_in_PointerTo_trt__GetCompatibleVideoAnalyticsConfigurations(struct soap*, const char*, _trt__GetCompatibleVideoAnalyticsConfigurations **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__GetCompatibleVideoAnalyticsConfigurations(struct soap*, _trt__GetCompatibleVideoAnalyticsConfigurations *const*, const char*, const char*);
SOAP_FMAC3 _trt__GetCompatibleVideoAnalyticsConfigurations ** SOAP_FMAC4 soap_get_PointerTo_trt__GetCompatibleVideoAnalyticsConfigurations(struct soap*, _trt__GetCompatibleVideoAnalyticsConfigurations **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__GetCompatibleAudioSourceConfigurations_DEFINED
#define SOAP_TYPE_PointerTo_trt__GetCompatibleAudioSourceConfigurations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__GetCompatibleAudioSourceConfigurations(struct soap*, _trt__GetCompatibleAudioSourceConfigurations *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__GetCompatibleAudioSourceConfigurations(struct soap*, const char *, int, _trt__GetCompatibleAudioSourceConfigurations *const*, const char *);
SOAP_FMAC3 _trt__GetCompatibleAudioSourceConfigurations ** SOAP_FMAC4 soap_in_PointerTo_trt__GetCompatibleAudioSourceConfigurations(struct soap*, const char*, _trt__GetCompatibleAudioSourceConfigurations **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__GetCompatibleAudioSourceConfigurations(struct soap*, _trt__GetCompatibleAudioSourceConfigurations *const*, const char*, const char*);
SOAP_FMAC3 _trt__GetCompatibleAudioSourceConfigurations ** SOAP_FMAC4 soap_get_PointerTo_trt__GetCompatibleAudioSourceConfigurations(struct soap*, _trt__GetCompatibleAudioSourceConfigurations **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__GetCompatibleAudioEncoderConfigurations_DEFINED
#define SOAP_TYPE_PointerTo_trt__GetCompatibleAudioEncoderConfigurations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__GetCompatibleAudioEncoderConfigurations(struct soap*, _trt__GetCompatibleAudioEncoderConfigurations *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__GetCompatibleAudioEncoderConfigurations(struct soap*, const char *, int, _trt__GetCompatibleAudioEncoderConfigurations *const*, const char *);
SOAP_FMAC3 _trt__GetCompatibleAudioEncoderConfigurations ** SOAP_FMAC4 soap_in_PointerTo_trt__GetCompatibleAudioEncoderConfigurations(struct soap*, const char*, _trt__GetCompatibleAudioEncoderConfigurations **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__GetCompatibleAudioEncoderConfigurations(struct soap*, _trt__GetCompatibleAudioEncoderConfigurations *const*, const char*, const char*);
SOAP_FMAC3 _trt__GetCompatibleAudioEncoderConfigurations ** SOAP_FMAC4 soap_get_PointerTo_trt__GetCompatibleAudioEncoderConfigurations(struct soap*, _trt__GetCompatibleAudioEncoderConfigurations **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__GetCompatibleVideoSourceConfigurations_DEFINED
#define SOAP_TYPE_PointerTo_trt__GetCompatibleVideoSourceConfigurations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__GetCompatibleVideoSourceConfigurations(struct soap*, _trt__GetCompatibleVideoSourceConfigurations *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__GetCompatibleVideoSourceConfigurations(struct soap*, const char *, int, _trt__GetCompatibleVideoSourceConfigurations *const*, const char *);
SOAP_FMAC3 _trt__GetCompatibleVideoSourceConfigurations ** SOAP_FMAC4 soap_in_PointerTo_trt__GetCompatibleVideoSourceConfigurations(struct soap*, const char*, _trt__GetCompatibleVideoSourceConfigurations **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__GetCompatibleVideoSourceConfigurations(struct soap*, _trt__GetCompatibleVideoSourceConfigurations *const*, const char*, const char*);
SOAP_FMAC3 _trt__GetCompatibleVideoSourceConfigurations ** SOAP_FMAC4 soap_get_PointerTo_trt__GetCompatibleVideoSourceConfigurations(struct soap*, _trt__GetCompatibleVideoSourceConfigurations **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__GetCompatibleVideoEncoderConfigurations_DEFINED
#define SOAP_TYPE_PointerTo_trt__GetCompatibleVideoEncoderConfigurations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__GetCompatibleVideoEncoderConfigurations(struct soap*, _trt__GetCompatibleVideoEncoderConfigurations *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__GetCompatibleVideoEncoderConfigurations(struct soap*, const char *, int, _trt__GetCompatibleVideoEncoderConfigurations *const*, const char *);
SOAP_FMAC3 _trt__GetCompatibleVideoEncoderConfigurations ** SOAP_FMAC4 soap_in_PointerTo_trt__GetCompatibleVideoEncoderConfigurations(struct soap*, const char*, _trt__GetCompatibleVideoEncoderConfigurations **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__GetCompatibleVideoEncoderConfigurations(struct soap*, _trt__GetCompatibleVideoEncoderConfigurations *const*, const char*, const char*);
SOAP_FMAC3 _trt__GetCompatibleVideoEncoderConfigurations ** SOAP_FMAC4 soap_get_PointerTo_trt__GetCompatibleVideoEncoderConfigurations(struct soap*, _trt__GetCompatibleVideoEncoderConfigurations **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__GetAudioDecoderConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_trt__GetAudioDecoderConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__GetAudioDecoderConfiguration(struct soap*, _trt__GetAudioDecoderConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__GetAudioDecoderConfiguration(struct soap*, const char *, int, _trt__GetAudioDecoderConfiguration *const*, const char *);
SOAP_FMAC3 _trt__GetAudioDecoderConfiguration ** SOAP_FMAC4 soap_in_PointerTo_trt__GetAudioDecoderConfiguration(struct soap*, const char*, _trt__GetAudioDecoderConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__GetAudioDecoderConfiguration(struct soap*, _trt__GetAudioDecoderConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _trt__GetAudioDecoderConfiguration ** SOAP_FMAC4 soap_get_PointerTo_trt__GetAudioDecoderConfiguration(struct soap*, _trt__GetAudioDecoderConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__GetAudioOutputConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_trt__GetAudioOutputConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__GetAudioOutputConfiguration(struct soap*, _trt__GetAudioOutputConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__GetAudioOutputConfiguration(struct soap*, const char *, int, _trt__GetAudioOutputConfiguration *const*, const char *);
SOAP_FMAC3 _trt__GetAudioOutputConfiguration ** SOAP_FMAC4 soap_in_PointerTo_trt__GetAudioOutputConfiguration(struct soap*, const char*, _trt__GetAudioOutputConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__GetAudioOutputConfiguration(struct soap*, _trt__GetAudioOutputConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _trt__GetAudioOutputConfiguration ** SOAP_FMAC4 soap_get_PointerTo_trt__GetAudioOutputConfiguration(struct soap*, _trt__GetAudioOutputConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__GetMetadataConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_trt__GetMetadataConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__GetMetadataConfiguration(struct soap*, _trt__GetMetadataConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__GetMetadataConfiguration(struct soap*, const char *, int, _trt__GetMetadataConfiguration *const*, const char *);
SOAP_FMAC3 _trt__GetMetadataConfiguration ** SOAP_FMAC4 soap_in_PointerTo_trt__GetMetadataConfiguration(struct soap*, const char*, _trt__GetMetadataConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__GetMetadataConfiguration(struct soap*, _trt__GetMetadataConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _trt__GetMetadataConfiguration ** SOAP_FMAC4 soap_get_PointerTo_trt__GetMetadataConfiguration(struct soap*, _trt__GetMetadataConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__GetVideoAnalyticsConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_trt__GetVideoAnalyticsConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__GetVideoAnalyticsConfiguration(struct soap*, _trt__GetVideoAnalyticsConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__GetVideoAnalyticsConfiguration(struct soap*, const char *, int, _trt__GetVideoAnalyticsConfiguration *const*, const char *);
SOAP_FMAC3 _trt__GetVideoAnalyticsConfiguration ** SOAP_FMAC4 soap_in_PointerTo_trt__GetVideoAnalyticsConfiguration(struct soap*, const char*, _trt__GetVideoAnalyticsConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__GetVideoAnalyticsConfiguration(struct soap*, _trt__GetVideoAnalyticsConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _trt__GetVideoAnalyticsConfiguration ** SOAP_FMAC4 soap_get_PointerTo_trt__GetVideoAnalyticsConfiguration(struct soap*, _trt__GetVideoAnalyticsConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__GetAudioEncoderConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_trt__GetAudioEncoderConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__GetAudioEncoderConfiguration(struct soap*, _trt__GetAudioEncoderConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__GetAudioEncoderConfiguration(struct soap*, const char *, int, _trt__GetAudioEncoderConfiguration *const*, const char *);
SOAP_FMAC3 _trt__GetAudioEncoderConfiguration ** SOAP_FMAC4 soap_in_PointerTo_trt__GetAudioEncoderConfiguration(struct soap*, const char*, _trt__GetAudioEncoderConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__GetAudioEncoderConfiguration(struct soap*, _trt__GetAudioEncoderConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _trt__GetAudioEncoderConfiguration ** SOAP_FMAC4 soap_get_PointerTo_trt__GetAudioEncoderConfiguration(struct soap*, _trt__GetAudioEncoderConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__GetAudioSourceConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_trt__GetAudioSourceConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__GetAudioSourceConfiguration(struct soap*, _trt__GetAudioSourceConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__GetAudioSourceConfiguration(struct soap*, const char *, int, _trt__GetAudioSourceConfiguration *const*, const char *);
SOAP_FMAC3 _trt__GetAudioSourceConfiguration ** SOAP_FMAC4 soap_in_PointerTo_trt__GetAudioSourceConfiguration(struct soap*, const char*, _trt__GetAudioSourceConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__GetAudioSourceConfiguration(struct soap*, _trt__GetAudioSourceConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _trt__GetAudioSourceConfiguration ** SOAP_FMAC4 soap_get_PointerTo_trt__GetAudioSourceConfiguration(struct soap*, _trt__GetAudioSourceConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__GetVideoEncoderConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_trt__GetVideoEncoderConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__GetVideoEncoderConfiguration(struct soap*, _trt__GetVideoEncoderConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__GetVideoEncoderConfiguration(struct soap*, const char *, int, _trt__GetVideoEncoderConfiguration *const*, const char *);
SOAP_FMAC3 _trt__GetVideoEncoderConfiguration ** SOAP_FMAC4 soap_in_PointerTo_trt__GetVideoEncoderConfiguration(struct soap*, const char*, _trt__GetVideoEncoderConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__GetVideoEncoderConfiguration(struct soap*, _trt__GetVideoEncoderConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _trt__GetVideoEncoderConfiguration ** SOAP_FMAC4 soap_get_PointerTo_trt__GetVideoEncoderConfiguration(struct soap*, _trt__GetVideoEncoderConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__GetVideoSourceConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_trt__GetVideoSourceConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__GetVideoSourceConfiguration(struct soap*, _trt__GetVideoSourceConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__GetVideoSourceConfiguration(struct soap*, const char *, int, _trt__GetVideoSourceConfiguration *const*, const char *);
SOAP_FMAC3 _trt__GetVideoSourceConfiguration ** SOAP_FMAC4 soap_in_PointerTo_trt__GetVideoSourceConfiguration(struct soap*, const char*, _trt__GetVideoSourceConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__GetVideoSourceConfiguration(struct soap*, _trt__GetVideoSourceConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _trt__GetVideoSourceConfiguration ** SOAP_FMAC4 soap_get_PointerTo_trt__GetVideoSourceConfiguration(struct soap*, _trt__GetVideoSourceConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__GetAudioDecoderConfigurations_DEFINED
#define SOAP_TYPE_PointerTo_trt__GetAudioDecoderConfigurations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__GetAudioDecoderConfigurations(struct soap*, _trt__GetAudioDecoderConfigurations *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__GetAudioDecoderConfigurations(struct soap*, const char *, int, _trt__GetAudioDecoderConfigurations *const*, const char *);
SOAP_FMAC3 _trt__GetAudioDecoderConfigurations ** SOAP_FMAC4 soap_in_PointerTo_trt__GetAudioDecoderConfigurations(struct soap*, const char*, _trt__GetAudioDecoderConfigurations **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__GetAudioDecoderConfigurations(struct soap*, _trt__GetAudioDecoderConfigurations *const*, const char*, const char*);
SOAP_FMAC3 _trt__GetAudioDecoderConfigurations ** SOAP_FMAC4 soap_get_PointerTo_trt__GetAudioDecoderConfigurations(struct soap*, _trt__GetAudioDecoderConfigurations **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__GetAudioOutputConfigurations_DEFINED
#define SOAP_TYPE_PointerTo_trt__GetAudioOutputConfigurations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__GetAudioOutputConfigurations(struct soap*, _trt__GetAudioOutputConfigurations *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__GetAudioOutputConfigurations(struct soap*, const char *, int, _trt__GetAudioOutputConfigurations *const*, const char *);
SOAP_FMAC3 _trt__GetAudioOutputConfigurations ** SOAP_FMAC4 soap_in_PointerTo_trt__GetAudioOutputConfigurations(struct soap*, const char*, _trt__GetAudioOutputConfigurations **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__GetAudioOutputConfigurations(struct soap*, _trt__GetAudioOutputConfigurations *const*, const char*, const char*);
SOAP_FMAC3 _trt__GetAudioOutputConfigurations ** SOAP_FMAC4 soap_get_PointerTo_trt__GetAudioOutputConfigurations(struct soap*, _trt__GetAudioOutputConfigurations **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__GetMetadataConfigurations_DEFINED
#define SOAP_TYPE_PointerTo_trt__GetMetadataConfigurations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__GetMetadataConfigurations(struct soap*, _trt__GetMetadataConfigurations *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__GetMetadataConfigurations(struct soap*, const char *, int, _trt__GetMetadataConfigurations *const*, const char *);
SOAP_FMAC3 _trt__GetMetadataConfigurations ** SOAP_FMAC4 soap_in_PointerTo_trt__GetMetadataConfigurations(struct soap*, const char*, _trt__GetMetadataConfigurations **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__GetMetadataConfigurations(struct soap*, _trt__GetMetadataConfigurations *const*, const char*, const char*);
SOAP_FMAC3 _trt__GetMetadataConfigurations ** SOAP_FMAC4 soap_get_PointerTo_trt__GetMetadataConfigurations(struct soap*, _trt__GetMetadataConfigurations **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__GetVideoAnalyticsConfigurations_DEFINED
#define SOAP_TYPE_PointerTo_trt__GetVideoAnalyticsConfigurations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__GetVideoAnalyticsConfigurations(struct soap*, _trt__GetVideoAnalyticsConfigurations *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__GetVideoAnalyticsConfigurations(struct soap*, const char *, int, _trt__GetVideoAnalyticsConfigurations *const*, const char *);
SOAP_FMAC3 _trt__GetVideoAnalyticsConfigurations ** SOAP_FMAC4 soap_in_PointerTo_trt__GetVideoAnalyticsConfigurations(struct soap*, const char*, _trt__GetVideoAnalyticsConfigurations **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__GetVideoAnalyticsConfigurations(struct soap*, _trt__GetVideoAnalyticsConfigurations *const*, const char*, const char*);
SOAP_FMAC3 _trt__GetVideoAnalyticsConfigurations ** SOAP_FMAC4 soap_get_PointerTo_trt__GetVideoAnalyticsConfigurations(struct soap*, _trt__GetVideoAnalyticsConfigurations **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__GetAudioEncoderConfigurations_DEFINED
#define SOAP_TYPE_PointerTo_trt__GetAudioEncoderConfigurations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__GetAudioEncoderConfigurations(struct soap*, _trt__GetAudioEncoderConfigurations *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__GetAudioEncoderConfigurations(struct soap*, const char *, int, _trt__GetAudioEncoderConfigurations *const*, const char *);
SOAP_FMAC3 _trt__GetAudioEncoderConfigurations ** SOAP_FMAC4 soap_in_PointerTo_trt__GetAudioEncoderConfigurations(struct soap*, const char*, _trt__GetAudioEncoderConfigurations **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__GetAudioEncoderConfigurations(struct soap*, _trt__GetAudioEncoderConfigurations *const*, const char*, const char*);
SOAP_FMAC3 _trt__GetAudioEncoderConfigurations ** SOAP_FMAC4 soap_get_PointerTo_trt__GetAudioEncoderConfigurations(struct soap*, _trt__GetAudioEncoderConfigurations **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__GetAudioSourceConfigurations_DEFINED
#define SOAP_TYPE_PointerTo_trt__GetAudioSourceConfigurations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__GetAudioSourceConfigurations(struct soap*, _trt__GetAudioSourceConfigurations *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__GetAudioSourceConfigurations(struct soap*, const char *, int, _trt__GetAudioSourceConfigurations *const*, const char *);
SOAP_FMAC3 _trt__GetAudioSourceConfigurations ** SOAP_FMAC4 soap_in_PointerTo_trt__GetAudioSourceConfigurations(struct soap*, const char*, _trt__GetAudioSourceConfigurations **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__GetAudioSourceConfigurations(struct soap*, _trt__GetAudioSourceConfigurations *const*, const char*, const char*);
SOAP_FMAC3 _trt__GetAudioSourceConfigurations ** SOAP_FMAC4 soap_get_PointerTo_trt__GetAudioSourceConfigurations(struct soap*, _trt__GetAudioSourceConfigurations **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__GetVideoEncoderConfigurations_DEFINED
#define SOAP_TYPE_PointerTo_trt__GetVideoEncoderConfigurations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__GetVideoEncoderConfigurations(struct soap*, _trt__GetVideoEncoderConfigurations *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__GetVideoEncoderConfigurations(struct soap*, const char *, int, _trt__GetVideoEncoderConfigurations *const*, const char *);
SOAP_FMAC3 _trt__GetVideoEncoderConfigurations ** SOAP_FMAC4 soap_in_PointerTo_trt__GetVideoEncoderConfigurations(struct soap*, const char*, _trt__GetVideoEncoderConfigurations **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__GetVideoEncoderConfigurations(struct soap*, _trt__GetVideoEncoderConfigurations *const*, const char*, const char*);
SOAP_FMAC3 _trt__GetVideoEncoderConfigurations ** SOAP_FMAC4 soap_get_PointerTo_trt__GetVideoEncoderConfigurations(struct soap*, _trt__GetVideoEncoderConfigurations **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__GetVideoSourceConfigurations_DEFINED
#define SOAP_TYPE_PointerTo_trt__GetVideoSourceConfigurations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__GetVideoSourceConfigurations(struct soap*, _trt__GetVideoSourceConfigurations *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__GetVideoSourceConfigurations(struct soap*, const char *, int, _trt__GetVideoSourceConfigurations *const*, const char *);
SOAP_FMAC3 _trt__GetVideoSourceConfigurations ** SOAP_FMAC4 soap_in_PointerTo_trt__GetVideoSourceConfigurations(struct soap*, const char*, _trt__GetVideoSourceConfigurations **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__GetVideoSourceConfigurations(struct soap*, _trt__GetVideoSourceConfigurations *const*, const char*, const char*);
SOAP_FMAC3 _trt__GetVideoSourceConfigurations ** SOAP_FMAC4 soap_get_PointerTo_trt__GetVideoSourceConfigurations(struct soap*, _trt__GetVideoSourceConfigurations **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__DeleteProfile_DEFINED
#define SOAP_TYPE_PointerTo_trt__DeleteProfile_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__DeleteProfile(struct soap*, _trt__DeleteProfile *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__DeleteProfile(struct soap*, const char *, int, _trt__DeleteProfile *const*, const char *);
SOAP_FMAC3 _trt__DeleteProfile ** SOAP_FMAC4 soap_in_PointerTo_trt__DeleteProfile(struct soap*, const char*, _trt__DeleteProfile **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__DeleteProfile(struct soap*, _trt__DeleteProfile *const*, const char*, const char*);
SOAP_FMAC3 _trt__DeleteProfile ** SOAP_FMAC4 soap_get_PointerTo_trt__DeleteProfile(struct soap*, _trt__DeleteProfile **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__RemoveAudioDecoderConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_trt__RemoveAudioDecoderConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__RemoveAudioDecoderConfiguration(struct soap*, _trt__RemoveAudioDecoderConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__RemoveAudioDecoderConfiguration(struct soap*, const char *, int, _trt__RemoveAudioDecoderConfiguration *const*, const char *);
SOAP_FMAC3 _trt__RemoveAudioDecoderConfiguration ** SOAP_FMAC4 soap_in_PointerTo_trt__RemoveAudioDecoderConfiguration(struct soap*, const char*, _trt__RemoveAudioDecoderConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__RemoveAudioDecoderConfiguration(struct soap*, _trt__RemoveAudioDecoderConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _trt__RemoveAudioDecoderConfiguration ** SOAP_FMAC4 soap_get_PointerTo_trt__RemoveAudioDecoderConfiguration(struct soap*, _trt__RemoveAudioDecoderConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__RemoveAudioOutputConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_trt__RemoveAudioOutputConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__RemoveAudioOutputConfiguration(struct soap*, _trt__RemoveAudioOutputConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__RemoveAudioOutputConfiguration(struct soap*, const char *, int, _trt__RemoveAudioOutputConfiguration *const*, const char *);
SOAP_FMAC3 _trt__RemoveAudioOutputConfiguration ** SOAP_FMAC4 soap_in_PointerTo_trt__RemoveAudioOutputConfiguration(struct soap*, const char*, _trt__RemoveAudioOutputConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__RemoveAudioOutputConfiguration(struct soap*, _trt__RemoveAudioOutputConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _trt__RemoveAudioOutputConfiguration ** SOAP_FMAC4 soap_get_PointerTo_trt__RemoveAudioOutputConfiguration(struct soap*, _trt__RemoveAudioOutputConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__RemoveMetadataConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_trt__RemoveMetadataConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__RemoveMetadataConfiguration(struct soap*, _trt__RemoveMetadataConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__RemoveMetadataConfiguration(struct soap*, const char *, int, _trt__RemoveMetadataConfiguration *const*, const char *);
SOAP_FMAC3 _trt__RemoveMetadataConfiguration ** SOAP_FMAC4 soap_in_PointerTo_trt__RemoveMetadataConfiguration(struct soap*, const char*, _trt__RemoveMetadataConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__RemoveMetadataConfiguration(struct soap*, _trt__RemoveMetadataConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _trt__RemoveMetadataConfiguration ** SOAP_FMAC4 soap_get_PointerTo_trt__RemoveMetadataConfiguration(struct soap*, _trt__RemoveMetadataConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__RemoveVideoAnalyticsConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_trt__RemoveVideoAnalyticsConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__RemoveVideoAnalyticsConfiguration(struct soap*, _trt__RemoveVideoAnalyticsConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__RemoveVideoAnalyticsConfiguration(struct soap*, const char *, int, _trt__RemoveVideoAnalyticsConfiguration *const*, const char *);
SOAP_FMAC3 _trt__RemoveVideoAnalyticsConfiguration ** SOAP_FMAC4 soap_in_PointerTo_trt__RemoveVideoAnalyticsConfiguration(struct soap*, const char*, _trt__RemoveVideoAnalyticsConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__RemoveVideoAnalyticsConfiguration(struct soap*, _trt__RemoveVideoAnalyticsConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _trt__RemoveVideoAnalyticsConfiguration ** SOAP_FMAC4 soap_get_PointerTo_trt__RemoveVideoAnalyticsConfiguration(struct soap*, _trt__RemoveVideoAnalyticsConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__RemovePTZConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_trt__RemovePTZConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__RemovePTZConfiguration(struct soap*, _trt__RemovePTZConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__RemovePTZConfiguration(struct soap*, const char *, int, _trt__RemovePTZConfiguration *const*, const char *);
SOAP_FMAC3 _trt__RemovePTZConfiguration ** SOAP_FMAC4 soap_in_PointerTo_trt__RemovePTZConfiguration(struct soap*, const char*, _trt__RemovePTZConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__RemovePTZConfiguration(struct soap*, _trt__RemovePTZConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _trt__RemovePTZConfiguration ** SOAP_FMAC4 soap_get_PointerTo_trt__RemovePTZConfiguration(struct soap*, _trt__RemovePTZConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__RemoveAudioSourceConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_trt__RemoveAudioSourceConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__RemoveAudioSourceConfiguration(struct soap*, _trt__RemoveAudioSourceConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__RemoveAudioSourceConfiguration(struct soap*, const char *, int, _trt__RemoveAudioSourceConfiguration *const*, const char *);
SOAP_FMAC3 _trt__RemoveAudioSourceConfiguration ** SOAP_FMAC4 soap_in_PointerTo_trt__RemoveAudioSourceConfiguration(struct soap*, const char*, _trt__RemoveAudioSourceConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__RemoveAudioSourceConfiguration(struct soap*, _trt__RemoveAudioSourceConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _trt__RemoveAudioSourceConfiguration ** SOAP_FMAC4 soap_get_PointerTo_trt__RemoveAudioSourceConfiguration(struct soap*, _trt__RemoveAudioSourceConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__RemoveAudioEncoderConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_trt__RemoveAudioEncoderConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__RemoveAudioEncoderConfiguration(struct soap*, _trt__RemoveAudioEncoderConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__RemoveAudioEncoderConfiguration(struct soap*, const char *, int, _trt__RemoveAudioEncoderConfiguration *const*, const char *);
SOAP_FMAC3 _trt__RemoveAudioEncoderConfiguration ** SOAP_FMAC4 soap_in_PointerTo_trt__RemoveAudioEncoderConfiguration(struct soap*, const char*, _trt__RemoveAudioEncoderConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__RemoveAudioEncoderConfiguration(struct soap*, _trt__RemoveAudioEncoderConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _trt__RemoveAudioEncoderConfiguration ** SOAP_FMAC4 soap_get_PointerTo_trt__RemoveAudioEncoderConfiguration(struct soap*, _trt__RemoveAudioEncoderConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__RemoveVideoSourceConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_trt__RemoveVideoSourceConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__RemoveVideoSourceConfiguration(struct soap*, _trt__RemoveVideoSourceConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__RemoveVideoSourceConfiguration(struct soap*, const char *, int, _trt__RemoveVideoSourceConfiguration *const*, const char *);
SOAP_FMAC3 _trt__RemoveVideoSourceConfiguration ** SOAP_FMAC4 soap_in_PointerTo_trt__RemoveVideoSourceConfiguration(struct soap*, const char*, _trt__RemoveVideoSourceConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__RemoveVideoSourceConfiguration(struct soap*, _trt__RemoveVideoSourceConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _trt__RemoveVideoSourceConfiguration ** SOAP_FMAC4 soap_get_PointerTo_trt__RemoveVideoSourceConfiguration(struct soap*, _trt__RemoveVideoSourceConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__RemoveVideoEncoderConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_trt__RemoveVideoEncoderConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__RemoveVideoEncoderConfiguration(struct soap*, _trt__RemoveVideoEncoderConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__RemoveVideoEncoderConfiguration(struct soap*, const char *, int, _trt__RemoveVideoEncoderConfiguration *const*, const char *);
SOAP_FMAC3 _trt__RemoveVideoEncoderConfiguration ** SOAP_FMAC4 soap_in_PointerTo_trt__RemoveVideoEncoderConfiguration(struct soap*, const char*, _trt__RemoveVideoEncoderConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__RemoveVideoEncoderConfiguration(struct soap*, _trt__RemoveVideoEncoderConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _trt__RemoveVideoEncoderConfiguration ** SOAP_FMAC4 soap_get_PointerTo_trt__RemoveVideoEncoderConfiguration(struct soap*, _trt__RemoveVideoEncoderConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__AddAudioDecoderConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_trt__AddAudioDecoderConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__AddAudioDecoderConfiguration(struct soap*, _trt__AddAudioDecoderConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__AddAudioDecoderConfiguration(struct soap*, const char *, int, _trt__AddAudioDecoderConfiguration *const*, const char *);
SOAP_FMAC3 _trt__AddAudioDecoderConfiguration ** SOAP_FMAC4 soap_in_PointerTo_trt__AddAudioDecoderConfiguration(struct soap*, const char*, _trt__AddAudioDecoderConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__AddAudioDecoderConfiguration(struct soap*, _trt__AddAudioDecoderConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _trt__AddAudioDecoderConfiguration ** SOAP_FMAC4 soap_get_PointerTo_trt__AddAudioDecoderConfiguration(struct soap*, _trt__AddAudioDecoderConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__AddAudioOutputConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_trt__AddAudioOutputConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__AddAudioOutputConfiguration(struct soap*, _trt__AddAudioOutputConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__AddAudioOutputConfiguration(struct soap*, const char *, int, _trt__AddAudioOutputConfiguration *const*, const char *);
SOAP_FMAC3 _trt__AddAudioOutputConfiguration ** SOAP_FMAC4 soap_in_PointerTo_trt__AddAudioOutputConfiguration(struct soap*, const char*, _trt__AddAudioOutputConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__AddAudioOutputConfiguration(struct soap*, _trt__AddAudioOutputConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _trt__AddAudioOutputConfiguration ** SOAP_FMAC4 soap_get_PointerTo_trt__AddAudioOutputConfiguration(struct soap*, _trt__AddAudioOutputConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__AddMetadataConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_trt__AddMetadataConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__AddMetadataConfiguration(struct soap*, _trt__AddMetadataConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__AddMetadataConfiguration(struct soap*, const char *, int, _trt__AddMetadataConfiguration *const*, const char *);
SOAP_FMAC3 _trt__AddMetadataConfiguration ** SOAP_FMAC4 soap_in_PointerTo_trt__AddMetadataConfiguration(struct soap*, const char*, _trt__AddMetadataConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__AddMetadataConfiguration(struct soap*, _trt__AddMetadataConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _trt__AddMetadataConfiguration ** SOAP_FMAC4 soap_get_PointerTo_trt__AddMetadataConfiguration(struct soap*, _trt__AddMetadataConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__AddVideoAnalyticsConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_trt__AddVideoAnalyticsConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__AddVideoAnalyticsConfiguration(struct soap*, _trt__AddVideoAnalyticsConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__AddVideoAnalyticsConfiguration(struct soap*, const char *, int, _trt__AddVideoAnalyticsConfiguration *const*, const char *);
SOAP_FMAC3 _trt__AddVideoAnalyticsConfiguration ** SOAP_FMAC4 soap_in_PointerTo_trt__AddVideoAnalyticsConfiguration(struct soap*, const char*, _trt__AddVideoAnalyticsConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__AddVideoAnalyticsConfiguration(struct soap*, _trt__AddVideoAnalyticsConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _trt__AddVideoAnalyticsConfiguration ** SOAP_FMAC4 soap_get_PointerTo_trt__AddVideoAnalyticsConfiguration(struct soap*, _trt__AddVideoAnalyticsConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__AddPTZConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_trt__AddPTZConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__AddPTZConfiguration(struct soap*, _trt__AddPTZConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__AddPTZConfiguration(struct soap*, const char *, int, _trt__AddPTZConfiguration *const*, const char *);
SOAP_FMAC3 _trt__AddPTZConfiguration ** SOAP_FMAC4 soap_in_PointerTo_trt__AddPTZConfiguration(struct soap*, const char*, _trt__AddPTZConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__AddPTZConfiguration(struct soap*, _trt__AddPTZConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _trt__AddPTZConfiguration ** SOAP_FMAC4 soap_get_PointerTo_trt__AddPTZConfiguration(struct soap*, _trt__AddPTZConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__AddAudioSourceConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_trt__AddAudioSourceConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__AddAudioSourceConfiguration(struct soap*, _trt__AddAudioSourceConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__AddAudioSourceConfiguration(struct soap*, const char *, int, _trt__AddAudioSourceConfiguration *const*, const char *);
SOAP_FMAC3 _trt__AddAudioSourceConfiguration ** SOAP_FMAC4 soap_in_PointerTo_trt__AddAudioSourceConfiguration(struct soap*, const char*, _trt__AddAudioSourceConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__AddAudioSourceConfiguration(struct soap*, _trt__AddAudioSourceConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _trt__AddAudioSourceConfiguration ** SOAP_FMAC4 soap_get_PointerTo_trt__AddAudioSourceConfiguration(struct soap*, _trt__AddAudioSourceConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__AddAudioEncoderConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_trt__AddAudioEncoderConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__AddAudioEncoderConfiguration(struct soap*, _trt__AddAudioEncoderConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__AddAudioEncoderConfiguration(struct soap*, const char *, int, _trt__AddAudioEncoderConfiguration *const*, const char *);
SOAP_FMAC3 _trt__AddAudioEncoderConfiguration ** SOAP_FMAC4 soap_in_PointerTo_trt__AddAudioEncoderConfiguration(struct soap*, const char*, _trt__AddAudioEncoderConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__AddAudioEncoderConfiguration(struct soap*, _trt__AddAudioEncoderConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _trt__AddAudioEncoderConfiguration ** SOAP_FMAC4 soap_get_PointerTo_trt__AddAudioEncoderConfiguration(struct soap*, _trt__AddAudioEncoderConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__AddVideoSourceConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_trt__AddVideoSourceConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__AddVideoSourceConfiguration(struct soap*, _trt__AddVideoSourceConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__AddVideoSourceConfiguration(struct soap*, const char *, int, _trt__AddVideoSourceConfiguration *const*, const char *);
SOAP_FMAC3 _trt__AddVideoSourceConfiguration ** SOAP_FMAC4 soap_in_PointerTo_trt__AddVideoSourceConfiguration(struct soap*, const char*, _trt__AddVideoSourceConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__AddVideoSourceConfiguration(struct soap*, _trt__AddVideoSourceConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _trt__AddVideoSourceConfiguration ** SOAP_FMAC4 soap_get_PointerTo_trt__AddVideoSourceConfiguration(struct soap*, _trt__AddVideoSourceConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__AddVideoEncoderConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_trt__AddVideoEncoderConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__AddVideoEncoderConfiguration(struct soap*, _trt__AddVideoEncoderConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__AddVideoEncoderConfiguration(struct soap*, const char *, int, _trt__AddVideoEncoderConfiguration *const*, const char *);
SOAP_FMAC3 _trt__AddVideoEncoderConfiguration ** SOAP_FMAC4 soap_in_PointerTo_trt__AddVideoEncoderConfiguration(struct soap*, const char*, _trt__AddVideoEncoderConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__AddVideoEncoderConfiguration(struct soap*, _trt__AddVideoEncoderConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _trt__AddVideoEncoderConfiguration ** SOAP_FMAC4 soap_get_PointerTo_trt__AddVideoEncoderConfiguration(struct soap*, _trt__AddVideoEncoderConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__GetProfiles_DEFINED
#define SOAP_TYPE_PointerTo_trt__GetProfiles_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__GetProfiles(struct soap*, _trt__GetProfiles *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__GetProfiles(struct soap*, const char *, int, _trt__GetProfiles *const*, const char *);
SOAP_FMAC3 _trt__GetProfiles ** SOAP_FMAC4 soap_in_PointerTo_trt__GetProfiles(struct soap*, const char*, _trt__GetProfiles **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__GetProfiles(struct soap*, _trt__GetProfiles *const*, const char*, const char*);
SOAP_FMAC3 _trt__GetProfiles ** SOAP_FMAC4 soap_get_PointerTo_trt__GetProfiles(struct soap*, _trt__GetProfiles **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__GetProfile_DEFINED
#define SOAP_TYPE_PointerTo_trt__GetProfile_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__GetProfile(struct soap*, _trt__GetProfile *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__GetProfile(struct soap*, const char *, int, _trt__GetProfile *const*, const char *);
SOAP_FMAC3 _trt__GetProfile ** SOAP_FMAC4 soap_in_PointerTo_trt__GetProfile(struct soap*, const char*, _trt__GetProfile **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__GetProfile(struct soap*, _trt__GetProfile *const*, const char*, const char*);
SOAP_FMAC3 _trt__GetProfile ** SOAP_FMAC4 soap_get_PointerTo_trt__GetProfile(struct soap*, _trt__GetProfile **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__CreateProfile_DEFINED
#define SOAP_TYPE_PointerTo_trt__CreateProfile_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__CreateProfile(struct soap*, _trt__CreateProfile *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__CreateProfile(struct soap*, const char *, int, _trt__CreateProfile *const*, const char *);
SOAP_FMAC3 _trt__CreateProfile ** SOAP_FMAC4 soap_in_PointerTo_trt__CreateProfile(struct soap*, const char*, _trt__CreateProfile **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__CreateProfile(struct soap*, _trt__CreateProfile *const*, const char*, const char*);
SOAP_FMAC3 _trt__CreateProfile ** SOAP_FMAC4 soap_get_PointerTo_trt__CreateProfile(struct soap*, _trt__CreateProfile **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__GetAudioOutputs_DEFINED
#define SOAP_TYPE_PointerTo_trt__GetAudioOutputs_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__GetAudioOutputs(struct soap*, _trt__GetAudioOutputs *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__GetAudioOutputs(struct soap*, const char *, int, _trt__GetAudioOutputs *const*, const char *);
SOAP_FMAC3 _trt__GetAudioOutputs ** SOAP_FMAC4 soap_in_PointerTo_trt__GetAudioOutputs(struct soap*, const char*, _trt__GetAudioOutputs **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__GetAudioOutputs(struct soap*, _trt__GetAudioOutputs *const*, const char*, const char*);
SOAP_FMAC3 _trt__GetAudioOutputs ** SOAP_FMAC4 soap_get_PointerTo_trt__GetAudioOutputs(struct soap*, _trt__GetAudioOutputs **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__GetAudioSources_DEFINED
#define SOAP_TYPE_PointerTo_trt__GetAudioSources_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__GetAudioSources(struct soap*, _trt__GetAudioSources *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__GetAudioSources(struct soap*, const char *, int, _trt__GetAudioSources *const*, const char *);
SOAP_FMAC3 _trt__GetAudioSources ** SOAP_FMAC4 soap_in_PointerTo_trt__GetAudioSources(struct soap*, const char*, _trt__GetAudioSources **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__GetAudioSources(struct soap*, _trt__GetAudioSources *const*, const char*, const char*);
SOAP_FMAC3 _trt__GetAudioSources ** SOAP_FMAC4 soap_get_PointerTo_trt__GetAudioSources(struct soap*, _trt__GetAudioSources **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__GetVideoSources_DEFINED
#define SOAP_TYPE_PointerTo_trt__GetVideoSources_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__GetVideoSources(struct soap*, _trt__GetVideoSources *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__GetVideoSources(struct soap*, const char *, int, _trt__GetVideoSources *const*, const char *);
SOAP_FMAC3 _trt__GetVideoSources ** SOAP_FMAC4 soap_in_PointerTo_trt__GetVideoSources(struct soap*, const char*, _trt__GetVideoSources **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__GetVideoSources(struct soap*, _trt__GetVideoSources *const*, const char*, const char*);
SOAP_FMAC3 _trt__GetVideoSources ** SOAP_FMAC4 soap_get_PointerTo_trt__GetVideoSources(struct soap*, _trt__GetVideoSources **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__GetServiceCapabilities_DEFINED
#define SOAP_TYPE_PointerTo_trt__GetServiceCapabilities_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__GetServiceCapabilities(struct soap*, _trt__GetServiceCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__GetServiceCapabilities(struct soap*, const char *, int, _trt__GetServiceCapabilities *const*, const char *);
SOAP_FMAC3 _trt__GetServiceCapabilities ** SOAP_FMAC4 soap_in_PointerTo_trt__GetServiceCapabilities(struct soap*, const char*, _trt__GetServiceCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__GetServiceCapabilities(struct soap*, _trt__GetServiceCapabilities *const*, const char*, const char*);
SOAP_FMAC3 _trt__GetServiceCapabilities ** SOAP_FMAC4 soap_get_PointerTo_trt__GetServiceCapabilities(struct soap*, _trt__GetServiceCapabilities **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__GetCompatibleConfigurations_DEFINED
#define SOAP_TYPE_PointerTo_tptz__GetCompatibleConfigurations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__GetCompatibleConfigurations(struct soap*, _tptz__GetCompatibleConfigurations *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__GetCompatibleConfigurations(struct soap*, const char *, int, _tptz__GetCompatibleConfigurations *const*, const char *);
SOAP_FMAC3 _tptz__GetCompatibleConfigurations ** SOAP_FMAC4 soap_in_PointerTo_tptz__GetCompatibleConfigurations(struct soap*, const char*, _tptz__GetCompatibleConfigurations **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__GetCompatibleConfigurations(struct soap*, _tptz__GetCompatibleConfigurations *const*, const char*, const char*);
SOAP_FMAC3 _tptz__GetCompatibleConfigurations ** SOAP_FMAC4 soap_get_PointerTo_tptz__GetCompatibleConfigurations(struct soap*, _tptz__GetCompatibleConfigurations **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__RemovePresetTour_DEFINED
#define SOAP_TYPE_PointerTo_tptz__RemovePresetTour_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__RemovePresetTour(struct soap*, _tptz__RemovePresetTour *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__RemovePresetTour(struct soap*, const char *, int, _tptz__RemovePresetTour *const*, const char *);
SOAP_FMAC3 _tptz__RemovePresetTour ** SOAP_FMAC4 soap_in_PointerTo_tptz__RemovePresetTour(struct soap*, const char*, _tptz__RemovePresetTour **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__RemovePresetTour(struct soap*, _tptz__RemovePresetTour *const*, const char*, const char*);
SOAP_FMAC3 _tptz__RemovePresetTour ** SOAP_FMAC4 soap_get_PointerTo_tptz__RemovePresetTour(struct soap*, _tptz__RemovePresetTour **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__OperatePresetTour_DEFINED
#define SOAP_TYPE_PointerTo_tptz__OperatePresetTour_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__OperatePresetTour(struct soap*, _tptz__OperatePresetTour *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__OperatePresetTour(struct soap*, const char *, int, _tptz__OperatePresetTour *const*, const char *);
SOAP_FMAC3 _tptz__OperatePresetTour ** SOAP_FMAC4 soap_in_PointerTo_tptz__OperatePresetTour(struct soap*, const char*, _tptz__OperatePresetTour **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__OperatePresetTour(struct soap*, _tptz__OperatePresetTour *const*, const char*, const char*);
SOAP_FMAC3 _tptz__OperatePresetTour ** SOAP_FMAC4 soap_get_PointerTo_tptz__OperatePresetTour(struct soap*, _tptz__OperatePresetTour **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__ModifyPresetTour_DEFINED
#define SOAP_TYPE_PointerTo_tptz__ModifyPresetTour_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__ModifyPresetTour(struct soap*, _tptz__ModifyPresetTour *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__ModifyPresetTour(struct soap*, const char *, int, _tptz__ModifyPresetTour *const*, const char *);
SOAP_FMAC3 _tptz__ModifyPresetTour ** SOAP_FMAC4 soap_in_PointerTo_tptz__ModifyPresetTour(struct soap*, const char*, _tptz__ModifyPresetTour **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__ModifyPresetTour(struct soap*, _tptz__ModifyPresetTour *const*, const char*, const char*);
SOAP_FMAC3 _tptz__ModifyPresetTour ** SOAP_FMAC4 soap_get_PointerTo_tptz__ModifyPresetTour(struct soap*, _tptz__ModifyPresetTour **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__CreatePresetTour_DEFINED
#define SOAP_TYPE_PointerTo_tptz__CreatePresetTour_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__CreatePresetTour(struct soap*, _tptz__CreatePresetTour *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__CreatePresetTour(struct soap*, const char *, int, _tptz__CreatePresetTour *const*, const char *);
SOAP_FMAC3 _tptz__CreatePresetTour ** SOAP_FMAC4 soap_in_PointerTo_tptz__CreatePresetTour(struct soap*, const char*, _tptz__CreatePresetTour **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__CreatePresetTour(struct soap*, _tptz__CreatePresetTour *const*, const char*, const char*);
SOAP_FMAC3 _tptz__CreatePresetTour ** SOAP_FMAC4 soap_get_PointerTo_tptz__CreatePresetTour(struct soap*, _tptz__CreatePresetTour **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__GetPresetTourOptions_DEFINED
#define SOAP_TYPE_PointerTo_tptz__GetPresetTourOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__GetPresetTourOptions(struct soap*, _tptz__GetPresetTourOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__GetPresetTourOptions(struct soap*, const char *, int, _tptz__GetPresetTourOptions *const*, const char *);
SOAP_FMAC3 _tptz__GetPresetTourOptions ** SOAP_FMAC4 soap_in_PointerTo_tptz__GetPresetTourOptions(struct soap*, const char*, _tptz__GetPresetTourOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__GetPresetTourOptions(struct soap*, _tptz__GetPresetTourOptions *const*, const char*, const char*);
SOAP_FMAC3 _tptz__GetPresetTourOptions ** SOAP_FMAC4 soap_get_PointerTo_tptz__GetPresetTourOptions(struct soap*, _tptz__GetPresetTourOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__GetPresetTour_DEFINED
#define SOAP_TYPE_PointerTo_tptz__GetPresetTour_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__GetPresetTour(struct soap*, _tptz__GetPresetTour *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__GetPresetTour(struct soap*, const char *, int, _tptz__GetPresetTour *const*, const char *);
SOAP_FMAC3 _tptz__GetPresetTour ** SOAP_FMAC4 soap_in_PointerTo_tptz__GetPresetTour(struct soap*, const char*, _tptz__GetPresetTour **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__GetPresetTour(struct soap*, _tptz__GetPresetTour *const*, const char*, const char*);
SOAP_FMAC3 _tptz__GetPresetTour ** SOAP_FMAC4 soap_get_PointerTo_tptz__GetPresetTour(struct soap*, _tptz__GetPresetTour **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__GetPresetTours_DEFINED
#define SOAP_TYPE_PointerTo_tptz__GetPresetTours_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__GetPresetTours(struct soap*, _tptz__GetPresetTours *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__GetPresetTours(struct soap*, const char *, int, _tptz__GetPresetTours *const*, const char *);
SOAP_FMAC3 _tptz__GetPresetTours ** SOAP_FMAC4 soap_in_PointerTo_tptz__GetPresetTours(struct soap*, const char*, _tptz__GetPresetTours **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__GetPresetTours(struct soap*, _tptz__GetPresetTours *const*, const char*, const char*);
SOAP_FMAC3 _tptz__GetPresetTours ** SOAP_FMAC4 soap_get_PointerTo_tptz__GetPresetTours(struct soap*, _tptz__GetPresetTours **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__Stop_DEFINED
#define SOAP_TYPE_PointerTo_tptz__Stop_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__Stop(struct soap*, _tptz__Stop *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__Stop(struct soap*, const char *, int, _tptz__Stop *const*, const char *);
SOAP_FMAC3 _tptz__Stop ** SOAP_FMAC4 soap_in_PointerTo_tptz__Stop(struct soap*, const char*, _tptz__Stop **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__Stop(struct soap*, _tptz__Stop *const*, const char*, const char*);
SOAP_FMAC3 _tptz__Stop ** SOAP_FMAC4 soap_get_PointerTo_tptz__Stop(struct soap*, _tptz__Stop **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__AbsoluteMove_DEFINED
#define SOAP_TYPE_PointerTo_tptz__AbsoluteMove_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__AbsoluteMove(struct soap*, _tptz__AbsoluteMove *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__AbsoluteMove(struct soap*, const char *, int, _tptz__AbsoluteMove *const*, const char *);
SOAP_FMAC3 _tptz__AbsoluteMove ** SOAP_FMAC4 soap_in_PointerTo_tptz__AbsoluteMove(struct soap*, const char*, _tptz__AbsoluteMove **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__AbsoluteMove(struct soap*, _tptz__AbsoluteMove *const*, const char*, const char*);
SOAP_FMAC3 _tptz__AbsoluteMove ** SOAP_FMAC4 soap_get_PointerTo_tptz__AbsoluteMove(struct soap*, _tptz__AbsoluteMove **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__SendAuxiliaryCommand_DEFINED
#define SOAP_TYPE_PointerTo_tptz__SendAuxiliaryCommand_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__SendAuxiliaryCommand(struct soap*, _tptz__SendAuxiliaryCommand *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__SendAuxiliaryCommand(struct soap*, const char *, int, _tptz__SendAuxiliaryCommand *const*, const char *);
SOAP_FMAC3 _tptz__SendAuxiliaryCommand ** SOAP_FMAC4 soap_in_PointerTo_tptz__SendAuxiliaryCommand(struct soap*, const char*, _tptz__SendAuxiliaryCommand **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__SendAuxiliaryCommand(struct soap*, _tptz__SendAuxiliaryCommand *const*, const char*, const char*);
SOAP_FMAC3 _tptz__SendAuxiliaryCommand ** SOAP_FMAC4 soap_get_PointerTo_tptz__SendAuxiliaryCommand(struct soap*, _tptz__SendAuxiliaryCommand **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__RelativeMove_DEFINED
#define SOAP_TYPE_PointerTo_tptz__RelativeMove_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__RelativeMove(struct soap*, _tptz__RelativeMove *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__RelativeMove(struct soap*, const char *, int, _tptz__RelativeMove *const*, const char *);
SOAP_FMAC3 _tptz__RelativeMove ** SOAP_FMAC4 soap_in_PointerTo_tptz__RelativeMove(struct soap*, const char*, _tptz__RelativeMove **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__RelativeMove(struct soap*, _tptz__RelativeMove *const*, const char*, const char*);
SOAP_FMAC3 _tptz__RelativeMove ** SOAP_FMAC4 soap_get_PointerTo_tptz__RelativeMove(struct soap*, _tptz__RelativeMove **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__ContinuousMove_DEFINED
#define SOAP_TYPE_PointerTo_tptz__ContinuousMove_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__ContinuousMove(struct soap*, _tptz__ContinuousMove *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__ContinuousMove(struct soap*, const char *, int, _tptz__ContinuousMove *const*, const char *);
SOAP_FMAC3 _tptz__ContinuousMove ** SOAP_FMAC4 soap_in_PointerTo_tptz__ContinuousMove(struct soap*, const char*, _tptz__ContinuousMove **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__ContinuousMove(struct soap*, _tptz__ContinuousMove *const*, const char*, const char*);
SOAP_FMAC3 _tptz__ContinuousMove ** SOAP_FMAC4 soap_get_PointerTo_tptz__ContinuousMove(struct soap*, _tptz__ContinuousMove **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__SetHomePosition_DEFINED
#define SOAP_TYPE_PointerTo_tptz__SetHomePosition_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__SetHomePosition(struct soap*, _tptz__SetHomePosition *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__SetHomePosition(struct soap*, const char *, int, _tptz__SetHomePosition *const*, const char *);
SOAP_FMAC3 _tptz__SetHomePosition ** SOAP_FMAC4 soap_in_PointerTo_tptz__SetHomePosition(struct soap*, const char*, _tptz__SetHomePosition **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__SetHomePosition(struct soap*, _tptz__SetHomePosition *const*, const char*, const char*);
SOAP_FMAC3 _tptz__SetHomePosition ** SOAP_FMAC4 soap_get_PointerTo_tptz__SetHomePosition(struct soap*, _tptz__SetHomePosition **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__GotoHomePosition_DEFINED
#define SOAP_TYPE_PointerTo_tptz__GotoHomePosition_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__GotoHomePosition(struct soap*, _tptz__GotoHomePosition *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__GotoHomePosition(struct soap*, const char *, int, _tptz__GotoHomePosition *const*, const char *);
SOAP_FMAC3 _tptz__GotoHomePosition ** SOAP_FMAC4 soap_in_PointerTo_tptz__GotoHomePosition(struct soap*, const char*, _tptz__GotoHomePosition **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__GotoHomePosition(struct soap*, _tptz__GotoHomePosition *const*, const char*, const char*);
SOAP_FMAC3 _tptz__GotoHomePosition ** SOAP_FMAC4 soap_get_PointerTo_tptz__GotoHomePosition(struct soap*, _tptz__GotoHomePosition **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__GetConfigurationOptions_DEFINED
#define SOAP_TYPE_PointerTo_tptz__GetConfigurationOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__GetConfigurationOptions(struct soap*, _tptz__GetConfigurationOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__GetConfigurationOptions(struct soap*, const char *, int, _tptz__GetConfigurationOptions *const*, const char *);
SOAP_FMAC3 _tptz__GetConfigurationOptions ** SOAP_FMAC4 soap_in_PointerTo_tptz__GetConfigurationOptions(struct soap*, const char*, _tptz__GetConfigurationOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__GetConfigurationOptions(struct soap*, _tptz__GetConfigurationOptions *const*, const char*, const char*);
SOAP_FMAC3 _tptz__GetConfigurationOptions ** SOAP_FMAC4 soap_get_PointerTo_tptz__GetConfigurationOptions(struct soap*, _tptz__GetConfigurationOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__SetConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_tptz__SetConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__SetConfiguration(struct soap*, _tptz__SetConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__SetConfiguration(struct soap*, const char *, int, _tptz__SetConfiguration *const*, const char *);
SOAP_FMAC3 _tptz__SetConfiguration ** SOAP_FMAC4 soap_in_PointerTo_tptz__SetConfiguration(struct soap*, const char*, _tptz__SetConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__SetConfiguration(struct soap*, _tptz__SetConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _tptz__SetConfiguration ** SOAP_FMAC4 soap_get_PointerTo_tptz__SetConfiguration(struct soap*, _tptz__SetConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__GetNode_DEFINED
#define SOAP_TYPE_PointerTo_tptz__GetNode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__GetNode(struct soap*, _tptz__GetNode *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__GetNode(struct soap*, const char *, int, _tptz__GetNode *const*, const char *);
SOAP_FMAC3 _tptz__GetNode ** SOAP_FMAC4 soap_in_PointerTo_tptz__GetNode(struct soap*, const char*, _tptz__GetNode **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__GetNode(struct soap*, _tptz__GetNode *const*, const char*, const char*);
SOAP_FMAC3 _tptz__GetNode ** SOAP_FMAC4 soap_get_PointerTo_tptz__GetNode(struct soap*, _tptz__GetNode **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__GetNodes_DEFINED
#define SOAP_TYPE_PointerTo_tptz__GetNodes_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__GetNodes(struct soap*, _tptz__GetNodes *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__GetNodes(struct soap*, const char *, int, _tptz__GetNodes *const*, const char *);
SOAP_FMAC3 _tptz__GetNodes ** SOAP_FMAC4 soap_in_PointerTo_tptz__GetNodes(struct soap*, const char*, _tptz__GetNodes **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__GetNodes(struct soap*, _tptz__GetNodes *const*, const char*, const char*);
SOAP_FMAC3 _tptz__GetNodes ** SOAP_FMAC4 soap_get_PointerTo_tptz__GetNodes(struct soap*, _tptz__GetNodes **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__GetConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_tptz__GetConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__GetConfiguration(struct soap*, _tptz__GetConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__GetConfiguration(struct soap*, const char *, int, _tptz__GetConfiguration *const*, const char *);
SOAP_FMAC3 _tptz__GetConfiguration ** SOAP_FMAC4 soap_in_PointerTo_tptz__GetConfiguration(struct soap*, const char*, _tptz__GetConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__GetConfiguration(struct soap*, _tptz__GetConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _tptz__GetConfiguration ** SOAP_FMAC4 soap_get_PointerTo_tptz__GetConfiguration(struct soap*, _tptz__GetConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__GetStatus_DEFINED
#define SOAP_TYPE_PointerTo_tptz__GetStatus_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__GetStatus(struct soap*, _tptz__GetStatus *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__GetStatus(struct soap*, const char *, int, _tptz__GetStatus *const*, const char *);
SOAP_FMAC3 _tptz__GetStatus ** SOAP_FMAC4 soap_in_PointerTo_tptz__GetStatus(struct soap*, const char*, _tptz__GetStatus **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__GetStatus(struct soap*, _tptz__GetStatus *const*, const char*, const char*);
SOAP_FMAC3 _tptz__GetStatus ** SOAP_FMAC4 soap_get_PointerTo_tptz__GetStatus(struct soap*, _tptz__GetStatus **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__GotoPreset_DEFINED
#define SOAP_TYPE_PointerTo_tptz__GotoPreset_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__GotoPreset(struct soap*, _tptz__GotoPreset *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__GotoPreset(struct soap*, const char *, int, _tptz__GotoPreset *const*, const char *);
SOAP_FMAC3 _tptz__GotoPreset ** SOAP_FMAC4 soap_in_PointerTo_tptz__GotoPreset(struct soap*, const char*, _tptz__GotoPreset **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__GotoPreset(struct soap*, _tptz__GotoPreset *const*, const char*, const char*);
SOAP_FMAC3 _tptz__GotoPreset ** SOAP_FMAC4 soap_get_PointerTo_tptz__GotoPreset(struct soap*, _tptz__GotoPreset **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__RemovePreset_DEFINED
#define SOAP_TYPE_PointerTo_tptz__RemovePreset_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__RemovePreset(struct soap*, _tptz__RemovePreset *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__RemovePreset(struct soap*, const char *, int, _tptz__RemovePreset *const*, const char *);
SOAP_FMAC3 _tptz__RemovePreset ** SOAP_FMAC4 soap_in_PointerTo_tptz__RemovePreset(struct soap*, const char*, _tptz__RemovePreset **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__RemovePreset(struct soap*, _tptz__RemovePreset *const*, const char*, const char*);
SOAP_FMAC3 _tptz__RemovePreset ** SOAP_FMAC4 soap_get_PointerTo_tptz__RemovePreset(struct soap*, _tptz__RemovePreset **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__SetPreset_DEFINED
#define SOAP_TYPE_PointerTo_tptz__SetPreset_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__SetPreset(struct soap*, _tptz__SetPreset *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__SetPreset(struct soap*, const char *, int, _tptz__SetPreset *const*, const char *);
SOAP_FMAC3 _tptz__SetPreset ** SOAP_FMAC4 soap_in_PointerTo_tptz__SetPreset(struct soap*, const char*, _tptz__SetPreset **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__SetPreset(struct soap*, _tptz__SetPreset *const*, const char*, const char*);
SOAP_FMAC3 _tptz__SetPreset ** SOAP_FMAC4 soap_get_PointerTo_tptz__SetPreset(struct soap*, _tptz__SetPreset **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__GetPresets_DEFINED
#define SOAP_TYPE_PointerTo_tptz__GetPresets_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__GetPresets(struct soap*, _tptz__GetPresets *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__GetPresets(struct soap*, const char *, int, _tptz__GetPresets *const*, const char *);
SOAP_FMAC3 _tptz__GetPresets ** SOAP_FMAC4 soap_in_PointerTo_tptz__GetPresets(struct soap*, const char*, _tptz__GetPresets **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__GetPresets(struct soap*, _tptz__GetPresets *const*, const char*, const char*);
SOAP_FMAC3 _tptz__GetPresets ** SOAP_FMAC4 soap_get_PointerTo_tptz__GetPresets(struct soap*, _tptz__GetPresets **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__GetConfigurations_DEFINED
#define SOAP_TYPE_PointerTo_tptz__GetConfigurations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__GetConfigurations(struct soap*, _tptz__GetConfigurations *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__GetConfigurations(struct soap*, const char *, int, _tptz__GetConfigurations *const*, const char *);
SOAP_FMAC3 _tptz__GetConfigurations ** SOAP_FMAC4 soap_in_PointerTo_tptz__GetConfigurations(struct soap*, const char*, _tptz__GetConfigurations **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__GetConfigurations(struct soap*, _tptz__GetConfigurations *const*, const char*, const char*);
SOAP_FMAC3 _tptz__GetConfigurations ** SOAP_FMAC4 soap_get_PointerTo_tptz__GetConfigurations(struct soap*, _tptz__GetConfigurations **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__GetServiceCapabilities_DEFINED
#define SOAP_TYPE_PointerTo_tptz__GetServiceCapabilities_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__GetServiceCapabilities(struct soap*, _tptz__GetServiceCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__GetServiceCapabilities(struct soap*, const char *, int, _tptz__GetServiceCapabilities *const*, const char *);
SOAP_FMAC3 _tptz__GetServiceCapabilities ** SOAP_FMAC4 soap_in_PointerTo_tptz__GetServiceCapabilities(struct soap*, const char*, _tptz__GetServiceCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__GetServiceCapabilities(struct soap*, _tptz__GetServiceCapabilities *const*, const char*, const char*);
SOAP_FMAC3 _tptz__GetServiceCapabilities ** SOAP_FMAC4 soap_get_PointerTo_tptz__GetServiceCapabilities(struct soap*, _tptz__GetServiceCapabilities **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__DeleteStorageConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_tds__DeleteStorageConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__DeleteStorageConfiguration(struct soap*, _tds__DeleteStorageConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__DeleteStorageConfiguration(struct soap*, const char *, int, _tds__DeleteStorageConfiguration *const*, const char *);
SOAP_FMAC3 _tds__DeleteStorageConfiguration ** SOAP_FMAC4 soap_in_PointerTo_tds__DeleteStorageConfiguration(struct soap*, const char*, _tds__DeleteStorageConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__DeleteStorageConfiguration(struct soap*, _tds__DeleteStorageConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _tds__DeleteStorageConfiguration ** SOAP_FMAC4 soap_get_PointerTo_tds__DeleteStorageConfiguration(struct soap*, _tds__DeleteStorageConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__SetStorageConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_tds__SetStorageConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__SetStorageConfiguration(struct soap*, _tds__SetStorageConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__SetStorageConfiguration(struct soap*, const char *, int, _tds__SetStorageConfiguration *const*, const char *);
SOAP_FMAC3 _tds__SetStorageConfiguration ** SOAP_FMAC4 soap_in_PointerTo_tds__SetStorageConfiguration(struct soap*, const char*, _tds__SetStorageConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__SetStorageConfiguration(struct soap*, _tds__SetStorageConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _tds__SetStorageConfiguration ** SOAP_FMAC4 soap_get_PointerTo_tds__SetStorageConfiguration(struct soap*, _tds__SetStorageConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__GetStorageConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_tds__GetStorageConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__GetStorageConfiguration(struct soap*, _tds__GetStorageConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__GetStorageConfiguration(struct soap*, const char *, int, _tds__GetStorageConfiguration *const*, const char *);
SOAP_FMAC3 _tds__GetStorageConfiguration ** SOAP_FMAC4 soap_in_PointerTo_tds__GetStorageConfiguration(struct soap*, const char*, _tds__GetStorageConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__GetStorageConfiguration(struct soap*, _tds__GetStorageConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _tds__GetStorageConfiguration ** SOAP_FMAC4 soap_get_PointerTo_tds__GetStorageConfiguration(struct soap*, _tds__GetStorageConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__CreateStorageConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_tds__CreateStorageConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__CreateStorageConfiguration(struct soap*, _tds__CreateStorageConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__CreateStorageConfiguration(struct soap*, const char *, int, _tds__CreateStorageConfiguration *const*, const char *);
SOAP_FMAC3 _tds__CreateStorageConfiguration ** SOAP_FMAC4 soap_in_PointerTo_tds__CreateStorageConfiguration(struct soap*, const char*, _tds__CreateStorageConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__CreateStorageConfiguration(struct soap*, _tds__CreateStorageConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _tds__CreateStorageConfiguration ** SOAP_FMAC4 soap_get_PointerTo_tds__CreateStorageConfiguration(struct soap*, _tds__CreateStorageConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__GetStorageConfigurations_DEFINED
#define SOAP_TYPE_PointerTo_tds__GetStorageConfigurations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__GetStorageConfigurations(struct soap*, _tds__GetStorageConfigurations *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__GetStorageConfigurations(struct soap*, const char *, int, _tds__GetStorageConfigurations *const*, const char *);
SOAP_FMAC3 _tds__GetStorageConfigurations ** SOAP_FMAC4 soap_in_PointerTo_tds__GetStorageConfigurations(struct soap*, const char*, _tds__GetStorageConfigurations **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__GetStorageConfigurations(struct soap*, _tds__GetStorageConfigurations *const*, const char*, const char*);
SOAP_FMAC3 _tds__GetStorageConfigurations ** SOAP_FMAC4 soap_get_PointerTo_tds__GetStorageConfigurations(struct soap*, _tds__GetStorageConfigurations **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__StartSystemRestore_DEFINED
#define SOAP_TYPE_PointerTo_tds__StartSystemRestore_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__StartSystemRestore(struct soap*, _tds__StartSystemRestore *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__StartSystemRestore(struct soap*, const char *, int, _tds__StartSystemRestore *const*, const char *);
SOAP_FMAC3 _tds__StartSystemRestore ** SOAP_FMAC4 soap_in_PointerTo_tds__StartSystemRestore(struct soap*, const char*, _tds__StartSystemRestore **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__StartSystemRestore(struct soap*, _tds__StartSystemRestore *const*, const char*, const char*);
SOAP_FMAC3 _tds__StartSystemRestore ** SOAP_FMAC4 soap_get_PointerTo_tds__StartSystemRestore(struct soap*, _tds__StartSystemRestore **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__StartFirmwareUpgrade_DEFINED
#define SOAP_TYPE_PointerTo_tds__StartFirmwareUpgrade_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__StartFirmwareUpgrade(struct soap*, _tds__StartFirmwareUpgrade *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__StartFirmwareUpgrade(struct soap*, const char *, int, _tds__StartFirmwareUpgrade *const*, const char *);
SOAP_FMAC3 _tds__StartFirmwareUpgrade ** SOAP_FMAC4 soap_in_PointerTo_tds__StartFirmwareUpgrade(struct soap*, const char*, _tds__StartFirmwareUpgrade **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__StartFirmwareUpgrade(struct soap*, _tds__StartFirmwareUpgrade *const*, const char*, const char*);
SOAP_FMAC3 _tds__StartFirmwareUpgrade ** SOAP_FMAC4 soap_get_PointerTo_tds__StartFirmwareUpgrade(struct soap*, _tds__StartFirmwareUpgrade **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__GetSystemUris_DEFINED
#define SOAP_TYPE_PointerTo_tds__GetSystemUris_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__GetSystemUris(struct soap*, _tds__GetSystemUris *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__GetSystemUris(struct soap*, const char *, int, _tds__GetSystemUris *const*, const char *);
SOAP_FMAC3 _tds__GetSystemUris ** SOAP_FMAC4 soap_in_PointerTo_tds__GetSystemUris(struct soap*, const char*, _tds__GetSystemUris **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__GetSystemUris(struct soap*, _tds__GetSystemUris *const*, const char*, const char*);
SOAP_FMAC3 _tds__GetSystemUris ** SOAP_FMAC4 soap_get_PointerTo_tds__GetSystemUris(struct soap*, _tds__GetSystemUris **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__ScanAvailableDot11Networks_DEFINED
#define SOAP_TYPE_PointerTo_tds__ScanAvailableDot11Networks_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__ScanAvailableDot11Networks(struct soap*, _tds__ScanAvailableDot11Networks *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__ScanAvailableDot11Networks(struct soap*, const char *, int, _tds__ScanAvailableDot11Networks *const*, const char *);
SOAP_FMAC3 _tds__ScanAvailableDot11Networks ** SOAP_FMAC4 soap_in_PointerTo_tds__ScanAvailableDot11Networks(struct soap*, const char*, _tds__ScanAvailableDot11Networks **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__ScanAvailableDot11Networks(struct soap*, _tds__ScanAvailableDot11Networks *const*, const char*, const char*);
SOAP_FMAC3 _tds__ScanAvailableDot11Networks ** SOAP_FMAC4 soap_get_PointerTo_tds__ScanAvailableDot11Networks(struct soap*, _tds__ScanAvailableDot11Networks **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__GetDot11Status_DEFINED
#define SOAP_TYPE_PointerTo_tds__GetDot11Status_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__GetDot11Status(struct soap*, _tds__GetDot11Status *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__GetDot11Status(struct soap*, const char *, int, _tds__GetDot11Status *const*, const char *);
SOAP_FMAC3 _tds__GetDot11Status ** SOAP_FMAC4 soap_in_PointerTo_tds__GetDot11Status(struct soap*, const char*, _tds__GetDot11Status **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__GetDot11Status(struct soap*, _tds__GetDot11Status *const*, const char*, const char*);
SOAP_FMAC3 _tds__GetDot11Status ** SOAP_FMAC4 soap_get_PointerTo_tds__GetDot11Status(struct soap*, _tds__GetDot11Status **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__GetDot11Capabilities_DEFINED
#define SOAP_TYPE_PointerTo_tds__GetDot11Capabilities_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__GetDot11Capabilities(struct soap*, _tds__GetDot11Capabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__GetDot11Capabilities(struct soap*, const char *, int, _tds__GetDot11Capabilities *const*, const char *);
SOAP_FMAC3 _tds__GetDot11Capabilities ** SOAP_FMAC4 soap_in_PointerTo_tds__GetDot11Capabilities(struct soap*, const char*, _tds__GetDot11Capabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__GetDot11Capabilities(struct soap*, _tds__GetDot11Capabilities *const*, const char*, const char*);
SOAP_FMAC3 _tds__GetDot11Capabilities ** SOAP_FMAC4 soap_get_PointerTo_tds__GetDot11Capabilities(struct soap*, _tds__GetDot11Capabilities **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__DeleteDot1XConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_tds__DeleteDot1XConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__DeleteDot1XConfiguration(struct soap*, _tds__DeleteDot1XConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__DeleteDot1XConfiguration(struct soap*, const char *, int, _tds__DeleteDot1XConfiguration *const*, const char *);
SOAP_FMAC3 _tds__DeleteDot1XConfiguration ** SOAP_FMAC4 soap_in_PointerTo_tds__DeleteDot1XConfiguration(struct soap*, const char*, _tds__DeleteDot1XConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__DeleteDot1XConfiguration(struct soap*, _tds__DeleteDot1XConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _tds__DeleteDot1XConfiguration ** SOAP_FMAC4 soap_get_PointerTo_tds__DeleteDot1XConfiguration(struct soap*, _tds__DeleteDot1XConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__GetDot1XConfigurations_DEFINED
#define SOAP_TYPE_PointerTo_tds__GetDot1XConfigurations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__GetDot1XConfigurations(struct soap*, _tds__GetDot1XConfigurations *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__GetDot1XConfigurations(struct soap*, const char *, int, _tds__GetDot1XConfigurations *const*, const char *);
SOAP_FMAC3 _tds__GetDot1XConfigurations ** SOAP_FMAC4 soap_in_PointerTo_tds__GetDot1XConfigurations(struct soap*, const char*, _tds__GetDot1XConfigurations **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__GetDot1XConfigurations(struct soap*, _tds__GetDot1XConfigurations *const*, const char*, const char*);
SOAP_FMAC3 _tds__GetDot1XConfigurations ** SOAP_FMAC4 soap_get_PointerTo_tds__GetDot1XConfigurations(struct soap*, _tds__GetDot1XConfigurations **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__GetDot1XConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_tds__GetDot1XConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__GetDot1XConfiguration(struct soap*, _tds__GetDot1XConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__GetDot1XConfiguration(struct soap*, const char *, int, _tds__GetDot1XConfiguration *const*, const char *);
SOAP_FMAC3 _tds__GetDot1XConfiguration ** SOAP_FMAC4 soap_in_PointerTo_tds__GetDot1XConfiguration(struct soap*, const char*, _tds__GetDot1XConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__GetDot1XConfiguration(struct soap*, _tds__GetDot1XConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _tds__GetDot1XConfiguration ** SOAP_FMAC4 soap_get_PointerTo_tds__GetDot1XConfiguration(struct soap*, _tds__GetDot1XConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__SetDot1XConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_tds__SetDot1XConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__SetDot1XConfiguration(struct soap*, _tds__SetDot1XConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__SetDot1XConfiguration(struct soap*, const char *, int, _tds__SetDot1XConfiguration *const*, const char *);
SOAP_FMAC3 _tds__SetDot1XConfiguration ** SOAP_FMAC4 soap_in_PointerTo_tds__SetDot1XConfiguration(struct soap*, const char*, _tds__SetDot1XConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__SetDot1XConfiguration(struct soap*, _tds__SetDot1XConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _tds__SetDot1XConfiguration ** SOAP_FMAC4 soap_get_PointerTo_tds__SetDot1XConfiguration(struct soap*, _tds__SetDot1XConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__CreateDot1XConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_tds__CreateDot1XConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__CreateDot1XConfiguration(struct soap*, _tds__CreateDot1XConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__CreateDot1XConfiguration(struct soap*, const char *, int, _tds__CreateDot1XConfiguration *const*, const char *);
SOAP_FMAC3 _tds__CreateDot1XConfiguration ** SOAP_FMAC4 soap_in_PointerTo_tds__CreateDot1XConfiguration(struct soap*, const char*, _tds__CreateDot1XConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__CreateDot1XConfiguration(struct soap*, _tds__CreateDot1XConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _tds__CreateDot1XConfiguration ** SOAP_FMAC4 soap_get_PointerTo_tds__CreateDot1XConfiguration(struct soap*, _tds__CreateDot1XConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__LoadCACertificates_DEFINED
#define SOAP_TYPE_PointerTo_tds__LoadCACertificates_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__LoadCACertificates(struct soap*, _tds__LoadCACertificates *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__LoadCACertificates(struct soap*, const char *, int, _tds__LoadCACertificates *const*, const char *);
SOAP_FMAC3 _tds__LoadCACertificates ** SOAP_FMAC4 soap_in_PointerTo_tds__LoadCACertificates(struct soap*, const char*, _tds__LoadCACertificates **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__LoadCACertificates(struct soap*, _tds__LoadCACertificates *const*, const char*, const char*);
SOAP_FMAC3 _tds__LoadCACertificates ** SOAP_FMAC4 soap_get_PointerTo_tds__LoadCACertificates(struct soap*, _tds__LoadCACertificates **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__GetCertificateInformation_DEFINED
#define SOAP_TYPE_PointerTo_tds__GetCertificateInformation_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__GetCertificateInformation(struct soap*, _tds__GetCertificateInformation *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__GetCertificateInformation(struct soap*, const char *, int, _tds__GetCertificateInformation *const*, const char *);
SOAP_FMAC3 _tds__GetCertificateInformation ** SOAP_FMAC4 soap_in_PointerTo_tds__GetCertificateInformation(struct soap*, const char*, _tds__GetCertificateInformation **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__GetCertificateInformation(struct soap*, _tds__GetCertificateInformation *const*, const char*, const char*);
SOAP_FMAC3 _tds__GetCertificateInformation ** SOAP_FMAC4 soap_get_PointerTo_tds__GetCertificateInformation(struct soap*, _tds__GetCertificateInformation **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__LoadCertificateWithPrivateKey_DEFINED
#define SOAP_TYPE_PointerTo_tds__LoadCertificateWithPrivateKey_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__LoadCertificateWithPrivateKey(struct soap*, _tds__LoadCertificateWithPrivateKey *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__LoadCertificateWithPrivateKey(struct soap*, const char *, int, _tds__LoadCertificateWithPrivateKey *const*, const char *);
SOAP_FMAC3 _tds__LoadCertificateWithPrivateKey ** SOAP_FMAC4 soap_in_PointerTo_tds__LoadCertificateWithPrivateKey(struct soap*, const char*, _tds__LoadCertificateWithPrivateKey **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__LoadCertificateWithPrivateKey(struct soap*, _tds__LoadCertificateWithPrivateKey *const*, const char*, const char*);
SOAP_FMAC3 _tds__LoadCertificateWithPrivateKey ** SOAP_FMAC4 soap_get_PointerTo_tds__LoadCertificateWithPrivateKey(struct soap*, _tds__LoadCertificateWithPrivateKey **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__GetCACertificates_DEFINED
#define SOAP_TYPE_PointerTo_tds__GetCACertificates_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__GetCACertificates(struct soap*, _tds__GetCACertificates *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__GetCACertificates(struct soap*, const char *, int, _tds__GetCACertificates *const*, const char *);
SOAP_FMAC3 _tds__GetCACertificates ** SOAP_FMAC4 soap_in_PointerTo_tds__GetCACertificates(struct soap*, const char*, _tds__GetCACertificates **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__GetCACertificates(struct soap*, _tds__GetCACertificates *const*, const char*, const char*);
SOAP_FMAC3 _tds__GetCACertificates ** SOAP_FMAC4 soap_get_PointerTo_tds__GetCACertificates(struct soap*, _tds__GetCACertificates **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__SendAuxiliaryCommand_DEFINED
#define SOAP_TYPE_PointerTo_tds__SendAuxiliaryCommand_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__SendAuxiliaryCommand(struct soap*, _tds__SendAuxiliaryCommand *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__SendAuxiliaryCommand(struct soap*, const char *, int, _tds__SendAuxiliaryCommand *const*, const char *);
SOAP_FMAC3 _tds__SendAuxiliaryCommand ** SOAP_FMAC4 soap_in_PointerTo_tds__SendAuxiliaryCommand(struct soap*, const char*, _tds__SendAuxiliaryCommand **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__SendAuxiliaryCommand(struct soap*, _tds__SendAuxiliaryCommand *const*, const char*, const char*);
SOAP_FMAC3 _tds__SendAuxiliaryCommand ** SOAP_FMAC4 soap_get_PointerTo_tds__SendAuxiliaryCommand(struct soap*, _tds__SendAuxiliaryCommand **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__SetRelayOutputState_DEFINED
#define SOAP_TYPE_PointerTo_tds__SetRelayOutputState_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__SetRelayOutputState(struct soap*, _tds__SetRelayOutputState *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__SetRelayOutputState(struct soap*, const char *, int, _tds__SetRelayOutputState *const*, const char *);
SOAP_FMAC3 _tds__SetRelayOutputState ** SOAP_FMAC4 soap_in_PointerTo_tds__SetRelayOutputState(struct soap*, const char*, _tds__SetRelayOutputState **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__SetRelayOutputState(struct soap*, _tds__SetRelayOutputState *const*, const char*, const char*);
SOAP_FMAC3 _tds__SetRelayOutputState ** SOAP_FMAC4 soap_get_PointerTo_tds__SetRelayOutputState(struct soap*, _tds__SetRelayOutputState **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__SetRelayOutputSettings_DEFINED
#define SOAP_TYPE_PointerTo_tds__SetRelayOutputSettings_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__SetRelayOutputSettings(struct soap*, _tds__SetRelayOutputSettings *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__SetRelayOutputSettings(struct soap*, const char *, int, _tds__SetRelayOutputSettings *const*, const char *);
SOAP_FMAC3 _tds__SetRelayOutputSettings ** SOAP_FMAC4 soap_in_PointerTo_tds__SetRelayOutputSettings(struct soap*, const char*, _tds__SetRelayOutputSettings **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__SetRelayOutputSettings(struct soap*, _tds__SetRelayOutputSettings *const*, const char*, const char*);
SOAP_FMAC3 _tds__SetRelayOutputSettings ** SOAP_FMAC4 soap_get_PointerTo_tds__SetRelayOutputSettings(struct soap*, _tds__SetRelayOutputSettings **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__GetRelayOutputs_DEFINED
#define SOAP_TYPE_PointerTo_tds__GetRelayOutputs_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__GetRelayOutputs(struct soap*, _tds__GetRelayOutputs *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__GetRelayOutputs(struct soap*, const char *, int, _tds__GetRelayOutputs *const*, const char *);
SOAP_FMAC3 _tds__GetRelayOutputs ** SOAP_FMAC4 soap_in_PointerTo_tds__GetRelayOutputs(struct soap*, const char*, _tds__GetRelayOutputs **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__GetRelayOutputs(struct soap*, _tds__GetRelayOutputs *const*, const char*, const char*);
SOAP_FMAC3 _tds__GetRelayOutputs ** SOAP_FMAC4 soap_get_PointerTo_tds__GetRelayOutputs(struct soap*, _tds__GetRelayOutputs **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__SetClientCertificateMode_DEFINED
#define SOAP_TYPE_PointerTo_tds__SetClientCertificateMode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__SetClientCertificateMode(struct soap*, _tds__SetClientCertificateMode *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__SetClientCertificateMode(struct soap*, const char *, int, _tds__SetClientCertificateMode *const*, const char *);
SOAP_FMAC3 _tds__SetClientCertificateMode ** SOAP_FMAC4 soap_in_PointerTo_tds__SetClientCertificateMode(struct soap*, const char*, _tds__SetClientCertificateMode **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__SetClientCertificateMode(struct soap*, _tds__SetClientCertificateMode *const*, const char*, const char*);
SOAP_FMAC3 _tds__SetClientCertificateMode ** SOAP_FMAC4 soap_get_PointerTo_tds__SetClientCertificateMode(struct soap*, _tds__SetClientCertificateMode **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__GetClientCertificateMode_DEFINED
#define SOAP_TYPE_PointerTo_tds__GetClientCertificateMode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__GetClientCertificateMode(struct soap*, _tds__GetClientCertificateMode *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__GetClientCertificateMode(struct soap*, const char *, int, _tds__GetClientCertificateMode *const*, const char *);
SOAP_FMAC3 _tds__GetClientCertificateMode ** SOAP_FMAC4 soap_in_PointerTo_tds__GetClientCertificateMode(struct soap*, const char*, _tds__GetClientCertificateMode **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__GetClientCertificateMode(struct soap*, _tds__GetClientCertificateMode *const*, const char*, const char*);
SOAP_FMAC3 _tds__GetClientCertificateMode ** SOAP_FMAC4 soap_get_PointerTo_tds__GetClientCertificateMode(struct soap*, _tds__GetClientCertificateMode **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__LoadCertificates_DEFINED
#define SOAP_TYPE_PointerTo_tds__LoadCertificates_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__LoadCertificates(struct soap*, _tds__LoadCertificates *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__LoadCertificates(struct soap*, const char *, int, _tds__LoadCertificates *const*, const char *);
SOAP_FMAC3 _tds__LoadCertificates ** SOAP_FMAC4 soap_in_PointerTo_tds__LoadCertificates(struct soap*, const char*, _tds__LoadCertificates **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__LoadCertificates(struct soap*, _tds__LoadCertificates *const*, const char*, const char*);
SOAP_FMAC3 _tds__LoadCertificates ** SOAP_FMAC4 soap_get_PointerTo_tds__LoadCertificates(struct soap*, _tds__LoadCertificates **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__GetPkcs10Request_DEFINED
#define SOAP_TYPE_PointerTo_tds__GetPkcs10Request_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__GetPkcs10Request(struct soap*, _tds__GetPkcs10Request *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__GetPkcs10Request(struct soap*, const char *, int, _tds__GetPkcs10Request *const*, const char *);
SOAP_FMAC3 _tds__GetPkcs10Request ** SOAP_FMAC4 soap_in_PointerTo_tds__GetPkcs10Request(struct soap*, const char*, _tds__GetPkcs10Request **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__GetPkcs10Request(struct soap*, _tds__GetPkcs10Request *const*, const char*, const char*);
SOAP_FMAC3 _tds__GetPkcs10Request ** SOAP_FMAC4 soap_get_PointerTo_tds__GetPkcs10Request(struct soap*, _tds__GetPkcs10Request **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__DeleteCertificates_DEFINED
#define SOAP_TYPE_PointerTo_tds__DeleteCertificates_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__DeleteCertificates(struct soap*, _tds__DeleteCertificates *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__DeleteCertificates(struct soap*, const char *, int, _tds__DeleteCertificates *const*, const char *);
SOAP_FMAC3 _tds__DeleteCertificates ** SOAP_FMAC4 soap_in_PointerTo_tds__DeleteCertificates(struct soap*, const char*, _tds__DeleteCertificates **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__DeleteCertificates(struct soap*, _tds__DeleteCertificates *const*, const char*, const char*);
SOAP_FMAC3 _tds__DeleteCertificates ** SOAP_FMAC4 soap_get_PointerTo_tds__DeleteCertificates(struct soap*, _tds__DeleteCertificates **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__SetCertificatesStatus_DEFINED
#define SOAP_TYPE_PointerTo_tds__SetCertificatesStatus_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__SetCertificatesStatus(struct soap*, _tds__SetCertificatesStatus *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__SetCertificatesStatus(struct soap*, const char *, int, _tds__SetCertificatesStatus *const*, const char *);
SOAP_FMAC3 _tds__SetCertificatesStatus ** SOAP_FMAC4 soap_in_PointerTo_tds__SetCertificatesStatus(struct soap*, const char*, _tds__SetCertificatesStatus **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__SetCertificatesStatus(struct soap*, _tds__SetCertificatesStatus *const*, const char*, const char*);
SOAP_FMAC3 _tds__SetCertificatesStatus ** SOAP_FMAC4 soap_get_PointerTo_tds__SetCertificatesStatus(struct soap*, _tds__SetCertificatesStatus **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__GetCertificatesStatus_DEFINED
#define SOAP_TYPE_PointerTo_tds__GetCertificatesStatus_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__GetCertificatesStatus(struct soap*, _tds__GetCertificatesStatus *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__GetCertificatesStatus(struct soap*, const char *, int, _tds__GetCertificatesStatus *const*, const char *);
SOAP_FMAC3 _tds__GetCertificatesStatus ** SOAP_FMAC4 soap_in_PointerTo_tds__GetCertificatesStatus(struct soap*, const char*, _tds__GetCertificatesStatus **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__GetCertificatesStatus(struct soap*, _tds__GetCertificatesStatus *const*, const char*, const char*);
SOAP_FMAC3 _tds__GetCertificatesStatus ** SOAP_FMAC4 soap_get_PointerTo_tds__GetCertificatesStatus(struct soap*, _tds__GetCertificatesStatus **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__GetCertificates_DEFINED
#define SOAP_TYPE_PointerTo_tds__GetCertificates_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__GetCertificates(struct soap*, _tds__GetCertificates *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__GetCertificates(struct soap*, const char *, int, _tds__GetCertificates *const*, const char *);
SOAP_FMAC3 _tds__GetCertificates ** SOAP_FMAC4 soap_in_PointerTo_tds__GetCertificates(struct soap*, const char*, _tds__GetCertificates **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__GetCertificates(struct soap*, _tds__GetCertificates *const*, const char*, const char*);
SOAP_FMAC3 _tds__GetCertificates ** SOAP_FMAC4 soap_get_PointerTo_tds__GetCertificates(struct soap*, _tds__GetCertificates **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__CreateCertificate_DEFINED
#define SOAP_TYPE_PointerTo_tds__CreateCertificate_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__CreateCertificate(struct soap*, _tds__CreateCertificate *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__CreateCertificate(struct soap*, const char *, int, _tds__CreateCertificate *const*, const char *);
SOAP_FMAC3 _tds__CreateCertificate ** SOAP_FMAC4 soap_in_PointerTo_tds__CreateCertificate(struct soap*, const char*, _tds__CreateCertificate **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__CreateCertificate(struct soap*, _tds__CreateCertificate *const*, const char*, const char*);
SOAP_FMAC3 _tds__CreateCertificate ** SOAP_FMAC4 soap_get_PointerTo_tds__CreateCertificate(struct soap*, _tds__CreateCertificate **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__SetAccessPolicy_DEFINED
#define SOAP_TYPE_PointerTo_tds__SetAccessPolicy_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__SetAccessPolicy(struct soap*, _tds__SetAccessPolicy *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__SetAccessPolicy(struct soap*, const char *, int, _tds__SetAccessPolicy *const*, const char *);
SOAP_FMAC3 _tds__SetAccessPolicy ** SOAP_FMAC4 soap_in_PointerTo_tds__SetAccessPolicy(struct soap*, const char*, _tds__SetAccessPolicy **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__SetAccessPolicy(struct soap*, _tds__SetAccessPolicy *const*, const char*, const char*);
SOAP_FMAC3 _tds__SetAccessPolicy ** SOAP_FMAC4 soap_get_PointerTo_tds__SetAccessPolicy(struct soap*, _tds__SetAccessPolicy **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__GetAccessPolicy_DEFINED
#define SOAP_TYPE_PointerTo_tds__GetAccessPolicy_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__GetAccessPolicy(struct soap*, _tds__GetAccessPolicy *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__GetAccessPolicy(struct soap*, const char *, int, _tds__GetAccessPolicy *const*, const char *);
SOAP_FMAC3 _tds__GetAccessPolicy ** SOAP_FMAC4 soap_in_PointerTo_tds__GetAccessPolicy(struct soap*, const char*, _tds__GetAccessPolicy **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__GetAccessPolicy(struct soap*, _tds__GetAccessPolicy *const*, const char*, const char*);
SOAP_FMAC3 _tds__GetAccessPolicy ** SOAP_FMAC4 soap_get_PointerTo_tds__GetAccessPolicy(struct soap*, _tds__GetAccessPolicy **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__RemoveIPAddressFilter_DEFINED
#define SOAP_TYPE_PointerTo_tds__RemoveIPAddressFilter_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__RemoveIPAddressFilter(struct soap*, _tds__RemoveIPAddressFilter *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__RemoveIPAddressFilter(struct soap*, const char *, int, _tds__RemoveIPAddressFilter *const*, const char *);
SOAP_FMAC3 _tds__RemoveIPAddressFilter ** SOAP_FMAC4 soap_in_PointerTo_tds__RemoveIPAddressFilter(struct soap*, const char*, _tds__RemoveIPAddressFilter **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__RemoveIPAddressFilter(struct soap*, _tds__RemoveIPAddressFilter *const*, const char*, const char*);
SOAP_FMAC3 _tds__RemoveIPAddressFilter ** SOAP_FMAC4 soap_get_PointerTo_tds__RemoveIPAddressFilter(struct soap*, _tds__RemoveIPAddressFilter **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__AddIPAddressFilter_DEFINED
#define SOAP_TYPE_PointerTo_tds__AddIPAddressFilter_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__AddIPAddressFilter(struct soap*, _tds__AddIPAddressFilter *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__AddIPAddressFilter(struct soap*, const char *, int, _tds__AddIPAddressFilter *const*, const char *);
SOAP_FMAC3 _tds__AddIPAddressFilter ** SOAP_FMAC4 soap_in_PointerTo_tds__AddIPAddressFilter(struct soap*, const char*, _tds__AddIPAddressFilter **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__AddIPAddressFilter(struct soap*, _tds__AddIPAddressFilter *const*, const char*, const char*);
SOAP_FMAC3 _tds__AddIPAddressFilter ** SOAP_FMAC4 soap_get_PointerTo_tds__AddIPAddressFilter(struct soap*, _tds__AddIPAddressFilter **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__SetIPAddressFilter_DEFINED
#define SOAP_TYPE_PointerTo_tds__SetIPAddressFilter_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__SetIPAddressFilter(struct soap*, _tds__SetIPAddressFilter *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__SetIPAddressFilter(struct soap*, const char *, int, _tds__SetIPAddressFilter *const*, const char *);
SOAP_FMAC3 _tds__SetIPAddressFilter ** SOAP_FMAC4 soap_in_PointerTo_tds__SetIPAddressFilter(struct soap*, const char*, _tds__SetIPAddressFilter **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__SetIPAddressFilter(struct soap*, _tds__SetIPAddressFilter *const*, const char*, const char*);
SOAP_FMAC3 _tds__SetIPAddressFilter ** SOAP_FMAC4 soap_get_PointerTo_tds__SetIPAddressFilter(struct soap*, _tds__SetIPAddressFilter **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__GetIPAddressFilter_DEFINED
#define SOAP_TYPE_PointerTo_tds__GetIPAddressFilter_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__GetIPAddressFilter(struct soap*, _tds__GetIPAddressFilter *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__GetIPAddressFilter(struct soap*, const char *, int, _tds__GetIPAddressFilter *const*, const char *);
SOAP_FMAC3 _tds__GetIPAddressFilter ** SOAP_FMAC4 soap_in_PointerTo_tds__GetIPAddressFilter(struct soap*, const char*, _tds__GetIPAddressFilter **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__GetIPAddressFilter(struct soap*, _tds__GetIPAddressFilter *const*, const char*, const char*);
SOAP_FMAC3 _tds__GetIPAddressFilter ** SOAP_FMAC4 soap_get_PointerTo_tds__GetIPAddressFilter(struct soap*, _tds__GetIPAddressFilter **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__SetZeroConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_tds__SetZeroConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__SetZeroConfiguration(struct soap*, _tds__SetZeroConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__SetZeroConfiguration(struct soap*, const char *, int, _tds__SetZeroConfiguration *const*, const char *);
SOAP_FMAC3 _tds__SetZeroConfiguration ** SOAP_FMAC4 soap_in_PointerTo_tds__SetZeroConfiguration(struct soap*, const char*, _tds__SetZeroConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__SetZeroConfiguration(struct soap*, _tds__SetZeroConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _tds__SetZeroConfiguration ** SOAP_FMAC4 soap_get_PointerTo_tds__SetZeroConfiguration(struct soap*, _tds__SetZeroConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__GetZeroConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_tds__GetZeroConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__GetZeroConfiguration(struct soap*, _tds__GetZeroConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__GetZeroConfiguration(struct soap*, const char *, int, _tds__GetZeroConfiguration *const*, const char *);
SOAP_FMAC3 _tds__GetZeroConfiguration ** SOAP_FMAC4 soap_in_PointerTo_tds__GetZeroConfiguration(struct soap*, const char*, _tds__GetZeroConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__GetZeroConfiguration(struct soap*, _tds__GetZeroConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _tds__GetZeroConfiguration ** SOAP_FMAC4 soap_get_PointerTo_tds__GetZeroConfiguration(struct soap*, _tds__GetZeroConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__SetNetworkDefaultGateway_DEFINED
#define SOAP_TYPE_PointerTo_tds__SetNetworkDefaultGateway_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__SetNetworkDefaultGateway(struct soap*, _tds__SetNetworkDefaultGateway *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__SetNetworkDefaultGateway(struct soap*, const char *, int, _tds__SetNetworkDefaultGateway *const*, const char *);
SOAP_FMAC3 _tds__SetNetworkDefaultGateway ** SOAP_FMAC4 soap_in_PointerTo_tds__SetNetworkDefaultGateway(struct soap*, const char*, _tds__SetNetworkDefaultGateway **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__SetNetworkDefaultGateway(struct soap*, _tds__SetNetworkDefaultGateway *const*, const char*, const char*);
SOAP_FMAC3 _tds__SetNetworkDefaultGateway ** SOAP_FMAC4 soap_get_PointerTo_tds__SetNetworkDefaultGateway(struct soap*, _tds__SetNetworkDefaultGateway **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__GetNetworkDefaultGateway_DEFINED
#define SOAP_TYPE_PointerTo_tds__GetNetworkDefaultGateway_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__GetNetworkDefaultGateway(struct soap*, _tds__GetNetworkDefaultGateway *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__GetNetworkDefaultGateway(struct soap*, const char *, int, _tds__GetNetworkDefaultGateway *const*, const char *);
SOAP_FMAC3 _tds__GetNetworkDefaultGateway ** SOAP_FMAC4 soap_in_PointerTo_tds__GetNetworkDefaultGateway(struct soap*, const char*, _tds__GetNetworkDefaultGateway **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__GetNetworkDefaultGateway(struct soap*, _tds__GetNetworkDefaultGateway *const*, const char*, const char*);
SOAP_FMAC3 _tds__GetNetworkDefaultGateway ** SOAP_FMAC4 soap_get_PointerTo_tds__GetNetworkDefaultGateway(struct soap*, _tds__GetNetworkDefaultGateway **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__SetNetworkProtocols_DEFINED
#define SOAP_TYPE_PointerTo_tds__SetNetworkProtocols_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__SetNetworkProtocols(struct soap*, _tds__SetNetworkProtocols *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__SetNetworkProtocols(struct soap*, const char *, int, _tds__SetNetworkProtocols *const*, const char *);
SOAP_FMAC3 _tds__SetNetworkProtocols ** SOAP_FMAC4 soap_in_PointerTo_tds__SetNetworkProtocols(struct soap*, const char*, _tds__SetNetworkProtocols **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__SetNetworkProtocols(struct soap*, _tds__SetNetworkProtocols *const*, const char*, const char*);
SOAP_FMAC3 _tds__SetNetworkProtocols ** SOAP_FMAC4 soap_get_PointerTo_tds__SetNetworkProtocols(struct soap*, _tds__SetNetworkProtocols **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__GetNetworkProtocols_DEFINED
#define SOAP_TYPE_PointerTo_tds__GetNetworkProtocols_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__GetNetworkProtocols(struct soap*, _tds__GetNetworkProtocols *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__GetNetworkProtocols(struct soap*, const char *, int, _tds__GetNetworkProtocols *const*, const char *);
SOAP_FMAC3 _tds__GetNetworkProtocols ** SOAP_FMAC4 soap_in_PointerTo_tds__GetNetworkProtocols(struct soap*, const char*, _tds__GetNetworkProtocols **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__GetNetworkProtocols(struct soap*, _tds__GetNetworkProtocols *const*, const char*, const char*);
SOAP_FMAC3 _tds__GetNetworkProtocols ** SOAP_FMAC4 soap_get_PointerTo_tds__GetNetworkProtocols(struct soap*, _tds__GetNetworkProtocols **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__SetNetworkInterfaces_DEFINED
#define SOAP_TYPE_PointerTo_tds__SetNetworkInterfaces_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__SetNetworkInterfaces(struct soap*, _tds__SetNetworkInterfaces *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__SetNetworkInterfaces(struct soap*, const char *, int, _tds__SetNetworkInterfaces *const*, const char *);
SOAP_FMAC3 _tds__SetNetworkInterfaces ** SOAP_FMAC4 soap_in_PointerTo_tds__SetNetworkInterfaces(struct soap*, const char*, _tds__SetNetworkInterfaces **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__SetNetworkInterfaces(struct soap*, _tds__SetNetworkInterfaces *const*, const char*, const char*);
SOAP_FMAC3 _tds__SetNetworkInterfaces ** SOAP_FMAC4 soap_get_PointerTo_tds__SetNetworkInterfaces(struct soap*, _tds__SetNetworkInterfaces **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__GetNetworkInterfaces_DEFINED
#define SOAP_TYPE_PointerTo_tds__GetNetworkInterfaces_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__GetNetworkInterfaces(struct soap*, _tds__GetNetworkInterfaces *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__GetNetworkInterfaces(struct soap*, const char *, int, _tds__GetNetworkInterfaces *const*, const char *);
SOAP_FMAC3 _tds__GetNetworkInterfaces ** SOAP_FMAC4 soap_in_PointerTo_tds__GetNetworkInterfaces(struct soap*, const char*, _tds__GetNetworkInterfaces **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__GetNetworkInterfaces(struct soap*, _tds__GetNetworkInterfaces *const*, const char*, const char*);
SOAP_FMAC3 _tds__GetNetworkInterfaces ** SOAP_FMAC4 soap_get_PointerTo_tds__GetNetworkInterfaces(struct soap*, _tds__GetNetworkInterfaces **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__SetDynamicDNS_DEFINED
#define SOAP_TYPE_PointerTo_tds__SetDynamicDNS_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__SetDynamicDNS(struct soap*, _tds__SetDynamicDNS *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__SetDynamicDNS(struct soap*, const char *, int, _tds__SetDynamicDNS *const*, const char *);
SOAP_FMAC3 _tds__SetDynamicDNS ** SOAP_FMAC4 soap_in_PointerTo_tds__SetDynamicDNS(struct soap*, const char*, _tds__SetDynamicDNS **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__SetDynamicDNS(struct soap*, _tds__SetDynamicDNS *const*, const char*, const char*);
SOAP_FMAC3 _tds__SetDynamicDNS ** SOAP_FMAC4 soap_get_PointerTo_tds__SetDynamicDNS(struct soap*, _tds__SetDynamicDNS **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__GetDynamicDNS_DEFINED
#define SOAP_TYPE_PointerTo_tds__GetDynamicDNS_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__GetDynamicDNS(struct soap*, _tds__GetDynamicDNS *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__GetDynamicDNS(struct soap*, const char *, int, _tds__GetDynamicDNS *const*, const char *);
SOAP_FMAC3 _tds__GetDynamicDNS ** SOAP_FMAC4 soap_in_PointerTo_tds__GetDynamicDNS(struct soap*, const char*, _tds__GetDynamicDNS **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__GetDynamicDNS(struct soap*, _tds__GetDynamicDNS *const*, const char*, const char*);
SOAP_FMAC3 _tds__GetDynamicDNS ** SOAP_FMAC4 soap_get_PointerTo_tds__GetDynamicDNS(struct soap*, _tds__GetDynamicDNS **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__SetNTP_DEFINED
#define SOAP_TYPE_PointerTo_tds__SetNTP_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__SetNTP(struct soap*, _tds__SetNTP *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__SetNTP(struct soap*, const char *, int, _tds__SetNTP *const*, const char *);
SOAP_FMAC3 _tds__SetNTP ** SOAP_FMAC4 soap_in_PointerTo_tds__SetNTP(struct soap*, const char*, _tds__SetNTP **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__SetNTP(struct soap*, _tds__SetNTP *const*, const char*, const char*);
SOAP_FMAC3 _tds__SetNTP ** SOAP_FMAC4 soap_get_PointerTo_tds__SetNTP(struct soap*, _tds__SetNTP **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__GetNTP_DEFINED
#define SOAP_TYPE_PointerTo_tds__GetNTP_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__GetNTP(struct soap*, _tds__GetNTP *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__GetNTP(struct soap*, const char *, int, _tds__GetNTP *const*, const char *);
SOAP_FMAC3 _tds__GetNTP ** SOAP_FMAC4 soap_in_PointerTo_tds__GetNTP(struct soap*, const char*, _tds__GetNTP **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__GetNTP(struct soap*, _tds__GetNTP *const*, const char*, const char*);
SOAP_FMAC3 _tds__GetNTP ** SOAP_FMAC4 soap_get_PointerTo_tds__GetNTP(struct soap*, _tds__GetNTP **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__SetDNS_DEFINED
#define SOAP_TYPE_PointerTo_tds__SetDNS_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__SetDNS(struct soap*, _tds__SetDNS *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__SetDNS(struct soap*, const char *, int, _tds__SetDNS *const*, const char *);
SOAP_FMAC3 _tds__SetDNS ** SOAP_FMAC4 soap_in_PointerTo_tds__SetDNS(struct soap*, const char*, _tds__SetDNS **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__SetDNS(struct soap*, _tds__SetDNS *const*, const char*, const char*);
SOAP_FMAC3 _tds__SetDNS ** SOAP_FMAC4 soap_get_PointerTo_tds__SetDNS(struct soap*, _tds__SetDNS **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__GetDNS_DEFINED
#define SOAP_TYPE_PointerTo_tds__GetDNS_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__GetDNS(struct soap*, _tds__GetDNS *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__GetDNS(struct soap*, const char *, int, _tds__GetDNS *const*, const char *);
SOAP_FMAC3 _tds__GetDNS ** SOAP_FMAC4 soap_in_PointerTo_tds__GetDNS(struct soap*, const char*, _tds__GetDNS **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__GetDNS(struct soap*, _tds__GetDNS *const*, const char*, const char*);
SOAP_FMAC3 _tds__GetDNS ** SOAP_FMAC4 soap_get_PointerTo_tds__GetDNS(struct soap*, _tds__GetDNS **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__SetHostnameFromDHCP_DEFINED
#define SOAP_TYPE_PointerTo_tds__SetHostnameFromDHCP_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__SetHostnameFromDHCP(struct soap*, _tds__SetHostnameFromDHCP *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__SetHostnameFromDHCP(struct soap*, const char *, int, _tds__SetHostnameFromDHCP *const*, const char *);
SOAP_FMAC3 _tds__SetHostnameFromDHCP ** SOAP_FMAC4 soap_in_PointerTo_tds__SetHostnameFromDHCP(struct soap*, const char*, _tds__SetHostnameFromDHCP **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__SetHostnameFromDHCP(struct soap*, _tds__SetHostnameFromDHCP *const*, const char*, const char*);
SOAP_FMAC3 _tds__SetHostnameFromDHCP ** SOAP_FMAC4 soap_get_PointerTo_tds__SetHostnameFromDHCP(struct soap*, _tds__SetHostnameFromDHCP **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__SetHostname_DEFINED
#define SOAP_TYPE_PointerTo_tds__SetHostname_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__SetHostname(struct soap*, _tds__SetHostname *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__SetHostname(struct soap*, const char *, int, _tds__SetHostname *const*, const char *);
SOAP_FMAC3 _tds__SetHostname ** SOAP_FMAC4 soap_in_PointerTo_tds__SetHostname(struct soap*, const char*, _tds__SetHostname **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__SetHostname(struct soap*, _tds__SetHostname *const*, const char*, const char*);
SOAP_FMAC3 _tds__SetHostname ** SOAP_FMAC4 soap_get_PointerTo_tds__SetHostname(struct soap*, _tds__SetHostname **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__GetHostname_DEFINED
#define SOAP_TYPE_PointerTo_tds__GetHostname_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__GetHostname(struct soap*, _tds__GetHostname *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__GetHostname(struct soap*, const char *, int, _tds__GetHostname *const*, const char *);
SOAP_FMAC3 _tds__GetHostname ** SOAP_FMAC4 soap_in_PointerTo_tds__GetHostname(struct soap*, const char*, _tds__GetHostname **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__GetHostname(struct soap*, _tds__GetHostname *const*, const char*, const char*);
SOAP_FMAC3 _tds__GetHostname ** SOAP_FMAC4 soap_get_PointerTo_tds__GetHostname(struct soap*, _tds__GetHostname **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__SetDPAddresses_DEFINED
#define SOAP_TYPE_PointerTo_tds__SetDPAddresses_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__SetDPAddresses(struct soap*, _tds__SetDPAddresses *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__SetDPAddresses(struct soap*, const char *, int, _tds__SetDPAddresses *const*, const char *);
SOAP_FMAC3 _tds__SetDPAddresses ** SOAP_FMAC4 soap_in_PointerTo_tds__SetDPAddresses(struct soap*, const char*, _tds__SetDPAddresses **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__SetDPAddresses(struct soap*, _tds__SetDPAddresses *const*, const char*, const char*);
SOAP_FMAC3 _tds__SetDPAddresses ** SOAP_FMAC4 soap_get_PointerTo_tds__SetDPAddresses(struct soap*, _tds__SetDPAddresses **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__GetCapabilities_DEFINED
#define SOAP_TYPE_PointerTo_tds__GetCapabilities_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__GetCapabilities(struct soap*, _tds__GetCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__GetCapabilities(struct soap*, const char *, int, _tds__GetCapabilities *const*, const char *);
SOAP_FMAC3 _tds__GetCapabilities ** SOAP_FMAC4 soap_in_PointerTo_tds__GetCapabilities(struct soap*, const char*, _tds__GetCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__GetCapabilities(struct soap*, _tds__GetCapabilities *const*, const char*, const char*);
SOAP_FMAC3 _tds__GetCapabilities ** SOAP_FMAC4 soap_get_PointerTo_tds__GetCapabilities(struct soap*, _tds__GetCapabilities **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__GetWsdlUrl_DEFINED
#define SOAP_TYPE_PointerTo_tds__GetWsdlUrl_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__GetWsdlUrl(struct soap*, _tds__GetWsdlUrl *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__GetWsdlUrl(struct soap*, const char *, int, _tds__GetWsdlUrl *const*, const char *);
SOAP_FMAC3 _tds__GetWsdlUrl ** SOAP_FMAC4 soap_in_PointerTo_tds__GetWsdlUrl(struct soap*, const char*, _tds__GetWsdlUrl **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__GetWsdlUrl(struct soap*, _tds__GetWsdlUrl *const*, const char*, const char*);
SOAP_FMAC3 _tds__GetWsdlUrl ** SOAP_FMAC4 soap_get_PointerTo_tds__GetWsdlUrl(struct soap*, _tds__GetWsdlUrl **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__SetUser_DEFINED
#define SOAP_TYPE_PointerTo_tds__SetUser_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__SetUser(struct soap*, _tds__SetUser *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__SetUser(struct soap*, const char *, int, _tds__SetUser *const*, const char *);
SOAP_FMAC3 _tds__SetUser ** SOAP_FMAC4 soap_in_PointerTo_tds__SetUser(struct soap*, const char*, _tds__SetUser **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__SetUser(struct soap*, _tds__SetUser *const*, const char*, const char*);
SOAP_FMAC3 _tds__SetUser ** SOAP_FMAC4 soap_get_PointerTo_tds__SetUser(struct soap*, _tds__SetUser **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__DeleteUsers_DEFINED
#define SOAP_TYPE_PointerTo_tds__DeleteUsers_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__DeleteUsers(struct soap*, _tds__DeleteUsers *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__DeleteUsers(struct soap*, const char *, int, _tds__DeleteUsers *const*, const char *);
SOAP_FMAC3 _tds__DeleteUsers ** SOAP_FMAC4 soap_in_PointerTo_tds__DeleteUsers(struct soap*, const char*, _tds__DeleteUsers **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__DeleteUsers(struct soap*, _tds__DeleteUsers *const*, const char*, const char*);
SOAP_FMAC3 _tds__DeleteUsers ** SOAP_FMAC4 soap_get_PointerTo_tds__DeleteUsers(struct soap*, _tds__DeleteUsers **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__CreateUsers_DEFINED
#define SOAP_TYPE_PointerTo_tds__CreateUsers_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__CreateUsers(struct soap*, _tds__CreateUsers *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__CreateUsers(struct soap*, const char *, int, _tds__CreateUsers *const*, const char *);
SOAP_FMAC3 _tds__CreateUsers ** SOAP_FMAC4 soap_in_PointerTo_tds__CreateUsers(struct soap*, const char*, _tds__CreateUsers **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__CreateUsers(struct soap*, _tds__CreateUsers *const*, const char*, const char*);
SOAP_FMAC3 _tds__CreateUsers ** SOAP_FMAC4 soap_get_PointerTo_tds__CreateUsers(struct soap*, _tds__CreateUsers **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__GetUsers_DEFINED
#define SOAP_TYPE_PointerTo_tds__GetUsers_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__GetUsers(struct soap*, _tds__GetUsers *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__GetUsers(struct soap*, const char *, int, _tds__GetUsers *const*, const char *);
SOAP_FMAC3 _tds__GetUsers ** SOAP_FMAC4 soap_in_PointerTo_tds__GetUsers(struct soap*, const char*, _tds__GetUsers **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__GetUsers(struct soap*, _tds__GetUsers *const*, const char*, const char*);
SOAP_FMAC3 _tds__GetUsers ** SOAP_FMAC4 soap_get_PointerTo_tds__GetUsers(struct soap*, _tds__GetUsers **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__SetRemoteUser_DEFINED
#define SOAP_TYPE_PointerTo_tds__SetRemoteUser_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__SetRemoteUser(struct soap*, _tds__SetRemoteUser *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__SetRemoteUser(struct soap*, const char *, int, _tds__SetRemoteUser *const*, const char *);
SOAP_FMAC3 _tds__SetRemoteUser ** SOAP_FMAC4 soap_in_PointerTo_tds__SetRemoteUser(struct soap*, const char*, _tds__SetRemoteUser **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__SetRemoteUser(struct soap*, _tds__SetRemoteUser *const*, const char*, const char*);
SOAP_FMAC3 _tds__SetRemoteUser ** SOAP_FMAC4 soap_get_PointerTo_tds__SetRemoteUser(struct soap*, _tds__SetRemoteUser **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__GetRemoteUser_DEFINED
#define SOAP_TYPE_PointerTo_tds__GetRemoteUser_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__GetRemoteUser(struct soap*, _tds__GetRemoteUser *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__GetRemoteUser(struct soap*, const char *, int, _tds__GetRemoteUser *const*, const char *);
SOAP_FMAC3 _tds__GetRemoteUser ** SOAP_FMAC4 soap_in_PointerTo_tds__GetRemoteUser(struct soap*, const char*, _tds__GetRemoteUser **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__GetRemoteUser(struct soap*, _tds__GetRemoteUser *const*, const char*, const char*);
SOAP_FMAC3 _tds__GetRemoteUser ** SOAP_FMAC4 soap_get_PointerTo_tds__GetRemoteUser(struct soap*, _tds__GetRemoteUser **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__GetEndpointReference_DEFINED
#define SOAP_TYPE_PointerTo_tds__GetEndpointReference_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__GetEndpointReference(struct soap*, _tds__GetEndpointReference *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__GetEndpointReference(struct soap*, const char *, int, _tds__GetEndpointReference *const*, const char *);
SOAP_FMAC3 _tds__GetEndpointReference ** SOAP_FMAC4 soap_in_PointerTo_tds__GetEndpointReference(struct soap*, const char*, _tds__GetEndpointReference **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__GetEndpointReference(struct soap*, _tds__GetEndpointReference *const*, const char*, const char*);
SOAP_FMAC3 _tds__GetEndpointReference ** SOAP_FMAC4 soap_get_PointerTo_tds__GetEndpointReference(struct soap*, _tds__GetEndpointReference **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__GetDPAddresses_DEFINED
#define SOAP_TYPE_PointerTo_tds__GetDPAddresses_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__GetDPAddresses(struct soap*, _tds__GetDPAddresses *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__GetDPAddresses(struct soap*, const char *, int, _tds__GetDPAddresses *const*, const char *);
SOAP_FMAC3 _tds__GetDPAddresses ** SOAP_FMAC4 soap_in_PointerTo_tds__GetDPAddresses(struct soap*, const char*, _tds__GetDPAddresses **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__GetDPAddresses(struct soap*, _tds__GetDPAddresses *const*, const char*, const char*);
SOAP_FMAC3 _tds__GetDPAddresses ** SOAP_FMAC4 soap_get_PointerTo_tds__GetDPAddresses(struct soap*, _tds__GetDPAddresses **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__SetRemoteDiscoveryMode_DEFINED
#define SOAP_TYPE_PointerTo_tds__SetRemoteDiscoveryMode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__SetRemoteDiscoveryMode(struct soap*, _tds__SetRemoteDiscoveryMode *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__SetRemoteDiscoveryMode(struct soap*, const char *, int, _tds__SetRemoteDiscoveryMode *const*, const char *);
SOAP_FMAC3 _tds__SetRemoteDiscoveryMode ** SOAP_FMAC4 soap_in_PointerTo_tds__SetRemoteDiscoveryMode(struct soap*, const char*, _tds__SetRemoteDiscoveryMode **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__SetRemoteDiscoveryMode(struct soap*, _tds__SetRemoteDiscoveryMode *const*, const char*, const char*);
SOAP_FMAC3 _tds__SetRemoteDiscoveryMode ** SOAP_FMAC4 soap_get_PointerTo_tds__SetRemoteDiscoveryMode(struct soap*, _tds__SetRemoteDiscoveryMode **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__GetRemoteDiscoveryMode_DEFINED
#define SOAP_TYPE_PointerTo_tds__GetRemoteDiscoveryMode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__GetRemoteDiscoveryMode(struct soap*, _tds__GetRemoteDiscoveryMode *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__GetRemoteDiscoveryMode(struct soap*, const char *, int, _tds__GetRemoteDiscoveryMode *const*, const char *);
SOAP_FMAC3 _tds__GetRemoteDiscoveryMode ** SOAP_FMAC4 soap_in_PointerTo_tds__GetRemoteDiscoveryMode(struct soap*, const char*, _tds__GetRemoteDiscoveryMode **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__GetRemoteDiscoveryMode(struct soap*, _tds__GetRemoteDiscoveryMode *const*, const char*, const char*);
SOAP_FMAC3 _tds__GetRemoteDiscoveryMode ** SOAP_FMAC4 soap_get_PointerTo_tds__GetRemoteDiscoveryMode(struct soap*, _tds__GetRemoteDiscoveryMode **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__SetDiscoveryMode_DEFINED
#define SOAP_TYPE_PointerTo_tds__SetDiscoveryMode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__SetDiscoveryMode(struct soap*, _tds__SetDiscoveryMode *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__SetDiscoveryMode(struct soap*, const char *, int, _tds__SetDiscoveryMode *const*, const char *);
SOAP_FMAC3 _tds__SetDiscoveryMode ** SOAP_FMAC4 soap_in_PointerTo_tds__SetDiscoveryMode(struct soap*, const char*, _tds__SetDiscoveryMode **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__SetDiscoveryMode(struct soap*, _tds__SetDiscoveryMode *const*, const char*, const char*);
SOAP_FMAC3 _tds__SetDiscoveryMode ** SOAP_FMAC4 soap_get_PointerTo_tds__SetDiscoveryMode(struct soap*, _tds__SetDiscoveryMode **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__GetDiscoveryMode_DEFINED
#define SOAP_TYPE_PointerTo_tds__GetDiscoveryMode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__GetDiscoveryMode(struct soap*, _tds__GetDiscoveryMode *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__GetDiscoveryMode(struct soap*, const char *, int, _tds__GetDiscoveryMode *const*, const char *);
SOAP_FMAC3 _tds__GetDiscoveryMode ** SOAP_FMAC4 soap_in_PointerTo_tds__GetDiscoveryMode(struct soap*, const char*, _tds__GetDiscoveryMode **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__GetDiscoveryMode(struct soap*, _tds__GetDiscoveryMode *const*, const char*, const char*);
SOAP_FMAC3 _tds__GetDiscoveryMode ** SOAP_FMAC4 soap_get_PointerTo_tds__GetDiscoveryMode(struct soap*, _tds__GetDiscoveryMode **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__RemoveScopes_DEFINED
#define SOAP_TYPE_PointerTo_tds__RemoveScopes_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__RemoveScopes(struct soap*, _tds__RemoveScopes *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__RemoveScopes(struct soap*, const char *, int, _tds__RemoveScopes *const*, const char *);
SOAP_FMAC3 _tds__RemoveScopes ** SOAP_FMAC4 soap_in_PointerTo_tds__RemoveScopes(struct soap*, const char*, _tds__RemoveScopes **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__RemoveScopes(struct soap*, _tds__RemoveScopes *const*, const char*, const char*);
SOAP_FMAC3 _tds__RemoveScopes ** SOAP_FMAC4 soap_get_PointerTo_tds__RemoveScopes(struct soap*, _tds__RemoveScopes **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__AddScopes_DEFINED
#define SOAP_TYPE_PointerTo_tds__AddScopes_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__AddScopes(struct soap*, _tds__AddScopes *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__AddScopes(struct soap*, const char *, int, _tds__AddScopes *const*, const char *);
SOAP_FMAC3 _tds__AddScopes ** SOAP_FMAC4 soap_in_PointerTo_tds__AddScopes(struct soap*, const char*, _tds__AddScopes **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__AddScopes(struct soap*, _tds__AddScopes *const*, const char*, const char*);
SOAP_FMAC3 _tds__AddScopes ** SOAP_FMAC4 soap_get_PointerTo_tds__AddScopes(struct soap*, _tds__AddScopes **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__SetScopes_DEFINED
#define SOAP_TYPE_PointerTo_tds__SetScopes_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__SetScopes(struct soap*, _tds__SetScopes *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__SetScopes(struct soap*, const char *, int, _tds__SetScopes *const*, const char *);
SOAP_FMAC3 _tds__SetScopes ** SOAP_FMAC4 soap_in_PointerTo_tds__SetScopes(struct soap*, const char*, _tds__SetScopes **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__SetScopes(struct soap*, _tds__SetScopes *const*, const char*, const char*);
SOAP_FMAC3 _tds__SetScopes ** SOAP_FMAC4 soap_get_PointerTo_tds__SetScopes(struct soap*, _tds__SetScopes **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__GetScopes_DEFINED
#define SOAP_TYPE_PointerTo_tds__GetScopes_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__GetScopes(struct soap*, _tds__GetScopes *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__GetScopes(struct soap*, const char *, int, _tds__GetScopes *const*, const char *);
SOAP_FMAC3 _tds__GetScopes ** SOAP_FMAC4 soap_in_PointerTo_tds__GetScopes(struct soap*, const char*, _tds__GetScopes **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__GetScopes(struct soap*, _tds__GetScopes *const*, const char*, const char*);
SOAP_FMAC3 _tds__GetScopes ** SOAP_FMAC4 soap_get_PointerTo_tds__GetScopes(struct soap*, _tds__GetScopes **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__GetSystemSupportInformation_DEFINED
#define SOAP_TYPE_PointerTo_tds__GetSystemSupportInformation_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__GetSystemSupportInformation(struct soap*, _tds__GetSystemSupportInformation *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__GetSystemSupportInformation(struct soap*, const char *, int, _tds__GetSystemSupportInformation *const*, const char *);
SOAP_FMAC3 _tds__GetSystemSupportInformation ** SOAP_FMAC4 soap_in_PointerTo_tds__GetSystemSupportInformation(struct soap*, const char*, _tds__GetSystemSupportInformation **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__GetSystemSupportInformation(struct soap*, _tds__GetSystemSupportInformation *const*, const char*, const char*);
SOAP_FMAC3 _tds__GetSystemSupportInformation ** SOAP_FMAC4 soap_get_PointerTo_tds__GetSystemSupportInformation(struct soap*, _tds__GetSystemSupportInformation **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__GetSystemLog_DEFINED
#define SOAP_TYPE_PointerTo_tds__GetSystemLog_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__GetSystemLog(struct soap*, _tds__GetSystemLog *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__GetSystemLog(struct soap*, const char *, int, _tds__GetSystemLog *const*, const char *);
SOAP_FMAC3 _tds__GetSystemLog ** SOAP_FMAC4 soap_in_PointerTo_tds__GetSystemLog(struct soap*, const char*, _tds__GetSystemLog **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__GetSystemLog(struct soap*, _tds__GetSystemLog *const*, const char*, const char*);
SOAP_FMAC3 _tds__GetSystemLog ** SOAP_FMAC4 soap_get_PointerTo_tds__GetSystemLog(struct soap*, _tds__GetSystemLog **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__GetSystemBackup_DEFINED
#define SOAP_TYPE_PointerTo_tds__GetSystemBackup_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__GetSystemBackup(struct soap*, _tds__GetSystemBackup *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__GetSystemBackup(struct soap*, const char *, int, _tds__GetSystemBackup *const*, const char *);
SOAP_FMAC3 _tds__GetSystemBackup ** SOAP_FMAC4 soap_in_PointerTo_tds__GetSystemBackup(struct soap*, const char*, _tds__GetSystemBackup **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__GetSystemBackup(struct soap*, _tds__GetSystemBackup *const*, const char*, const char*);
SOAP_FMAC3 _tds__GetSystemBackup ** SOAP_FMAC4 soap_get_PointerTo_tds__GetSystemBackup(struct soap*, _tds__GetSystemBackup **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__RestoreSystem_DEFINED
#define SOAP_TYPE_PointerTo_tds__RestoreSystem_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__RestoreSystem(struct soap*, _tds__RestoreSystem *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__RestoreSystem(struct soap*, const char *, int, _tds__RestoreSystem *const*, const char *);
SOAP_FMAC3 _tds__RestoreSystem ** SOAP_FMAC4 soap_in_PointerTo_tds__RestoreSystem(struct soap*, const char*, _tds__RestoreSystem **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__RestoreSystem(struct soap*, _tds__RestoreSystem *const*, const char*, const char*);
SOAP_FMAC3 _tds__RestoreSystem ** SOAP_FMAC4 soap_get_PointerTo_tds__RestoreSystem(struct soap*, _tds__RestoreSystem **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__SystemReboot_DEFINED
#define SOAP_TYPE_PointerTo_tds__SystemReboot_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__SystemReboot(struct soap*, _tds__SystemReboot *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__SystemReboot(struct soap*, const char *, int, _tds__SystemReboot *const*, const char *);
SOAP_FMAC3 _tds__SystemReboot ** SOAP_FMAC4 soap_in_PointerTo_tds__SystemReboot(struct soap*, const char*, _tds__SystemReboot **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__SystemReboot(struct soap*, _tds__SystemReboot *const*, const char*, const char*);
SOAP_FMAC3 _tds__SystemReboot ** SOAP_FMAC4 soap_get_PointerTo_tds__SystemReboot(struct soap*, _tds__SystemReboot **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__UpgradeSystemFirmware_DEFINED
#define SOAP_TYPE_PointerTo_tds__UpgradeSystemFirmware_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__UpgradeSystemFirmware(struct soap*, _tds__UpgradeSystemFirmware *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__UpgradeSystemFirmware(struct soap*, const char *, int, _tds__UpgradeSystemFirmware *const*, const char *);
SOAP_FMAC3 _tds__UpgradeSystemFirmware ** SOAP_FMAC4 soap_in_PointerTo_tds__UpgradeSystemFirmware(struct soap*, const char*, _tds__UpgradeSystemFirmware **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__UpgradeSystemFirmware(struct soap*, _tds__UpgradeSystemFirmware *const*, const char*, const char*);
SOAP_FMAC3 _tds__UpgradeSystemFirmware ** SOAP_FMAC4 soap_get_PointerTo_tds__UpgradeSystemFirmware(struct soap*, _tds__UpgradeSystemFirmware **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__SetSystemFactoryDefault_DEFINED
#define SOAP_TYPE_PointerTo_tds__SetSystemFactoryDefault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__SetSystemFactoryDefault(struct soap*, _tds__SetSystemFactoryDefault *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__SetSystemFactoryDefault(struct soap*, const char *, int, _tds__SetSystemFactoryDefault *const*, const char *);
SOAP_FMAC3 _tds__SetSystemFactoryDefault ** SOAP_FMAC4 soap_in_PointerTo_tds__SetSystemFactoryDefault(struct soap*, const char*, _tds__SetSystemFactoryDefault **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__SetSystemFactoryDefault(struct soap*, _tds__SetSystemFactoryDefault *const*, const char*, const char*);
SOAP_FMAC3 _tds__SetSystemFactoryDefault ** SOAP_FMAC4 soap_get_PointerTo_tds__SetSystemFactoryDefault(struct soap*, _tds__SetSystemFactoryDefault **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__GetSystemDateAndTime_DEFINED
#define SOAP_TYPE_PointerTo_tds__GetSystemDateAndTime_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__GetSystemDateAndTime(struct soap*, _tds__GetSystemDateAndTime *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__GetSystemDateAndTime(struct soap*, const char *, int, _tds__GetSystemDateAndTime *const*, const char *);
SOAP_FMAC3 _tds__GetSystemDateAndTime ** SOAP_FMAC4 soap_in_PointerTo_tds__GetSystemDateAndTime(struct soap*, const char*, _tds__GetSystemDateAndTime **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__GetSystemDateAndTime(struct soap*, _tds__GetSystemDateAndTime *const*, const char*, const char*);
SOAP_FMAC3 _tds__GetSystemDateAndTime ** SOAP_FMAC4 soap_get_PointerTo_tds__GetSystemDateAndTime(struct soap*, _tds__GetSystemDateAndTime **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__SetSystemDateAndTime_DEFINED
#define SOAP_TYPE_PointerTo_tds__SetSystemDateAndTime_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__SetSystemDateAndTime(struct soap*, _tds__SetSystemDateAndTime *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__SetSystemDateAndTime(struct soap*, const char *, int, _tds__SetSystemDateAndTime *const*, const char *);
SOAP_FMAC3 _tds__SetSystemDateAndTime ** SOAP_FMAC4 soap_in_PointerTo_tds__SetSystemDateAndTime(struct soap*, const char*, _tds__SetSystemDateAndTime **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__SetSystemDateAndTime(struct soap*, _tds__SetSystemDateAndTime *const*, const char*, const char*);
SOAP_FMAC3 _tds__SetSystemDateAndTime ** SOAP_FMAC4 soap_get_PointerTo_tds__SetSystemDateAndTime(struct soap*, _tds__SetSystemDateAndTime **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__GetDeviceInformation_DEFINED
#define SOAP_TYPE_PointerTo_tds__GetDeviceInformation_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__GetDeviceInformation(struct soap*, _tds__GetDeviceInformation *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__GetDeviceInformation(struct soap*, const char *, int, _tds__GetDeviceInformation *const*, const char *);
SOAP_FMAC3 _tds__GetDeviceInformation ** SOAP_FMAC4 soap_in_PointerTo_tds__GetDeviceInformation(struct soap*, const char*, _tds__GetDeviceInformation **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__GetDeviceInformation(struct soap*, _tds__GetDeviceInformation *const*, const char*, const char*);
SOAP_FMAC3 _tds__GetDeviceInformation ** SOAP_FMAC4 soap_get_PointerTo_tds__GetDeviceInformation(struct soap*, _tds__GetDeviceInformation **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__GetServiceCapabilities_DEFINED
#define SOAP_TYPE_PointerTo_tds__GetServiceCapabilities_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__GetServiceCapabilities(struct soap*, _tds__GetServiceCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__GetServiceCapabilities(struct soap*, const char *, int, _tds__GetServiceCapabilities *const*, const char *);
SOAP_FMAC3 _tds__GetServiceCapabilities ** SOAP_FMAC4 soap_in_PointerTo_tds__GetServiceCapabilities(struct soap*, const char*, _tds__GetServiceCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__GetServiceCapabilities(struct soap*, _tds__GetServiceCapabilities *const*, const char*, const char*);
SOAP_FMAC3 _tds__GetServiceCapabilities ** SOAP_FMAC4 soap_get_PointerTo_tds__GetServiceCapabilities(struct soap*, _tds__GetServiceCapabilities **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__GetServices_DEFINED
#define SOAP_TYPE_PointerTo_tds__GetServices_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__GetServices(struct soap*, _tds__GetServices *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__GetServices(struct soap*, const char *, int, _tds__GetServices *const*, const char *);
SOAP_FMAC3 _tds__GetServices ** SOAP_FMAC4 soap_in_PointerTo_tds__GetServices(struct soap*, const char*, _tds__GetServices **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__GetServices(struct soap*, _tds__GetServices *const*, const char*, const char*);
SOAP_FMAC3 _tds__GetServices ** SOAP_FMAC4 soap_get_PointerTo_tds__GetServices(struct soap*, _tds__GetServices **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxsd__NCName_DEFINED
#define SOAP_TYPE_PointerToxsd__NCName_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__NCName(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__NCName(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__NCName(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__NCName(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__NCName(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTostd__vectorTemplateOf_wstop__TopicNamespaceType_Topic_DEFINED
#define SOAP_TYPE_PointerTostd__vectorTemplateOf_wstop__TopicNamespaceType_Topic_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__vectorTemplateOf_wstop__TopicNamespaceType_Topic(struct soap*, std::vector<_wstop__TopicNamespaceType_Topic> *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__vectorTemplateOf_wstop__TopicNamespaceType_Topic(struct soap*, const char *, int, std::vector<_wstop__TopicNamespaceType_Topic> *const*, const char *);
SOAP_FMAC3 std::vector<_wstop__TopicNamespaceType_Topic> ** SOAP_FMAC4 soap_in_PointerTostd__vectorTemplateOf_wstop__TopicNamespaceType_Topic(struct soap*, const char*, std::vector<_wstop__TopicNamespaceType_Topic> **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__vectorTemplateOf_wstop__TopicNamespaceType_Topic(struct soap*, std::vector<_wstop__TopicNamespaceType_Topic> *const*, const char*, const char*);
SOAP_FMAC3 std::vector<_wstop__TopicNamespaceType_Topic> ** SOAP_FMAC4 soap_get_PointerTostd__vectorTemplateOf_wstop__TopicNamespaceType_Topic(struct soap*, std::vector<_wstop__TopicNamespaceType_Topic> **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowstop__ConcreteTopicExpression_DEFINED
#define SOAP_TYPE_PointerTowstop__ConcreteTopicExpression_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowstop__ConcreteTopicExpression(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowstop__ConcreteTopicExpression(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTowstop__ConcreteTopicExpression(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowstop__ConcreteTopicExpression(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTowstop__ConcreteTopicExpression(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxsd__QName_DEFINED
#define SOAP_TYPE_PointerToxsd__QName_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__QName(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__QName(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__QName(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__QName(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__QName(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowstop__TopicType_DEFINED
#define SOAP_TYPE_PointerTowstop__TopicType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowstop__TopicType(struct soap*, wstop__TopicType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowstop__TopicType(struct soap*, const char *, int, wstop__TopicType *const*, const char *);
SOAP_FMAC3 wstop__TopicType ** SOAP_FMAC4 soap_in_PointerTowstop__TopicType(struct soap*, const char*, wstop__TopicType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowstop__TopicType(struct soap*, wstop__TopicType *const*, const char*, const char*);
SOAP_FMAC3 wstop__TopicType ** SOAP_FMAC4 soap_get_PointerTowstop__TopicType(struct soap*, wstop__TopicType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowstop__QueryExpressionType_DEFINED
#define SOAP_TYPE_PointerTowstop__QueryExpressionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowstop__QueryExpressionType(struct soap*, wstop__QueryExpressionType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowstop__QueryExpressionType(struct soap*, const char *, int, wstop__QueryExpressionType *const*, const char *);
SOAP_FMAC3 wstop__QueryExpressionType ** SOAP_FMAC4 soap_in_PointerTowstop__QueryExpressionType(struct soap*, const char*, wstop__QueryExpressionType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowstop__QueryExpressionType(struct soap*, wstop__QueryExpressionType *const*, const char*, const char*);
SOAP_FMAC3 wstop__QueryExpressionType ** SOAP_FMAC4 soap_get_PointerTowstop__QueryExpressionType(struct soap*, wstop__QueryExpressionType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__OSDConfigurationExtension_DEFINED
#define SOAP_TYPE_PointerTott__OSDConfigurationExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__OSDConfigurationExtension(struct soap*, tt__OSDConfigurationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__OSDConfigurationExtension(struct soap*, const char *, int, tt__OSDConfigurationExtension *const*, const char *);
SOAP_FMAC3 tt__OSDConfigurationExtension ** SOAP_FMAC4 soap_in_PointerTott__OSDConfigurationExtension(struct soap*, const char*, tt__OSDConfigurationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__OSDConfigurationExtension(struct soap*, tt__OSDConfigurationExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__OSDConfigurationExtension ** SOAP_FMAC4 soap_get_PointerTott__OSDConfigurationExtension(struct soap*, tt__OSDConfigurationExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__OSDImgConfiguration_DEFINED
#define SOAP_TYPE_PointerTott__OSDImgConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__OSDImgConfiguration(struct soap*, tt__OSDImgConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__OSDImgConfiguration(struct soap*, const char *, int, tt__OSDImgConfiguration *const*, const char *);
SOAP_FMAC3 tt__OSDImgConfiguration ** SOAP_FMAC4 soap_in_PointerTott__OSDImgConfiguration(struct soap*, const char*, tt__OSDImgConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__OSDImgConfiguration(struct soap*, tt__OSDImgConfiguration *const*, const char*, const char*);
SOAP_FMAC3 tt__OSDImgConfiguration ** SOAP_FMAC4 soap_get_PointerTott__OSDImgConfiguration(struct soap*, tt__OSDImgConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__OSDTextConfiguration_DEFINED
#define SOAP_TYPE_PointerTott__OSDTextConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__OSDTextConfiguration(struct soap*, tt__OSDTextConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__OSDTextConfiguration(struct soap*, const char *, int, tt__OSDTextConfiguration *const*, const char *);
SOAP_FMAC3 tt__OSDTextConfiguration ** SOAP_FMAC4 soap_in_PointerTott__OSDTextConfiguration(struct soap*, const char*, tt__OSDTextConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__OSDTextConfiguration(struct soap*, tt__OSDTextConfiguration *const*, const char*, const char*);
SOAP_FMAC3 tt__OSDTextConfiguration ** SOAP_FMAC4 soap_get_PointerTott__OSDTextConfiguration(struct soap*, tt__OSDTextConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__OSDPosConfiguration_DEFINED
#define SOAP_TYPE_PointerTott__OSDPosConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__OSDPosConfiguration(struct soap*, tt__OSDPosConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__OSDPosConfiguration(struct soap*, const char *, int, tt__OSDPosConfiguration *const*, const char *);
SOAP_FMAC3 tt__OSDPosConfiguration ** SOAP_FMAC4 soap_in_PointerTott__OSDPosConfiguration(struct soap*, const char*, tt__OSDPosConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__OSDPosConfiguration(struct soap*, tt__OSDPosConfiguration *const*, const char*, const char*);
SOAP_FMAC3 tt__OSDPosConfiguration ** SOAP_FMAC4 soap_get_PointerTott__OSDPosConfiguration(struct soap*, tt__OSDPosConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__OSDReference_DEFINED
#define SOAP_TYPE_PointerTott__OSDReference_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__OSDReference(struct soap*, tt__OSDReference *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__OSDReference(struct soap*, const char *, int, tt__OSDReference *const*, const char *);
SOAP_FMAC3 tt__OSDReference ** SOAP_FMAC4 soap_in_PointerTott__OSDReference(struct soap*, const char*, tt__OSDReference **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__OSDReference(struct soap*, tt__OSDReference *const*, const char*, const char*);
SOAP_FMAC3 tt__OSDReference ** SOAP_FMAC4 soap_get_PointerTott__OSDReference(struct soap*, tt__OSDReference **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__MetadataInput_DEFINED
#define SOAP_TYPE_PointerTott__MetadataInput_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__MetadataInput(struct soap*, tt__MetadataInput *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__MetadataInput(struct soap*, const char *, int, tt__MetadataInput *const*, const char *);
SOAP_FMAC3 tt__MetadataInput ** SOAP_FMAC4 soap_in_PointerTott__MetadataInput(struct soap*, const char*, tt__MetadataInput **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__MetadataInput(struct soap*, tt__MetadataInput *const*, const char*, const char*);
SOAP_FMAC3 tt__MetadataInput ** SOAP_FMAC4 soap_get_PointerTott__MetadataInput(struct soap*, tt__MetadataInput **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__SourceIdentification_DEFINED
#define SOAP_TYPE_PointerTott__SourceIdentification_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__SourceIdentification(struct soap*, tt__SourceIdentification *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__SourceIdentification(struct soap*, const char *, int, tt__SourceIdentification *const*, const char *);
SOAP_FMAC3 tt__SourceIdentification ** SOAP_FMAC4 soap_in_PointerTott__SourceIdentification(struct soap*, const char*, tt__SourceIdentification **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__SourceIdentification(struct soap*, tt__SourceIdentification *const*, const char*, const char*);
SOAP_FMAC3 tt__SourceIdentification ** SOAP_FMAC4 soap_get_PointerTott__SourceIdentification(struct soap*, tt__SourceIdentification **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__AnalyticsDeviceEngineConfiguration_DEFINED
#define SOAP_TYPE_PointerTott__AnalyticsDeviceEngineConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__AnalyticsDeviceEngineConfiguration(struct soap*, tt__AnalyticsDeviceEngineConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__AnalyticsDeviceEngineConfiguration(struct soap*, const char *, int, tt__AnalyticsDeviceEngineConfiguration *const*, const char *);
SOAP_FMAC3 tt__AnalyticsDeviceEngineConfiguration ** SOAP_FMAC4 soap_in_PointerTott__AnalyticsDeviceEngineConfiguration(struct soap*, const char*, tt__AnalyticsDeviceEngineConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__AnalyticsDeviceEngineConfiguration(struct soap*, tt__AnalyticsDeviceEngineConfiguration *const*, const char*, const char*);
SOAP_FMAC3 tt__AnalyticsDeviceEngineConfiguration ** SOAP_FMAC4 soap_get_PointerTott__AnalyticsDeviceEngineConfiguration(struct soap*, tt__AnalyticsDeviceEngineConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__ObjectExtension_DEFINED
#define SOAP_TYPE_PointerTott__ObjectExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ObjectExtension(struct soap*, tt__ObjectExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ObjectExtension(struct soap*, const char *, int, tt__ObjectExtension *const*, const char *);
SOAP_FMAC3 tt__ObjectExtension ** SOAP_FMAC4 soap_in_PointerTott__ObjectExtension(struct soap*, const char*, tt__ObjectExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ObjectExtension(struct soap*, tt__ObjectExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__ObjectExtension ** SOAP_FMAC4 soap_get_PointerTott__ObjectExtension(struct soap*, tt__ObjectExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Behaviour_DEFINED
#define SOAP_TYPE_PointerTott__Behaviour_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Behaviour(struct soap*, tt__Behaviour *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Behaviour(struct soap*, const char *, int, tt__Behaviour *const*, const char *);
SOAP_FMAC3 tt__Behaviour ** SOAP_FMAC4 soap_in_PointerTott__Behaviour(struct soap*, const char*, tt__Behaviour **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Behaviour(struct soap*, tt__Behaviour *const*, const char*, const char*);
SOAP_FMAC3 tt__Behaviour ** SOAP_FMAC4 soap_get_PointerTott__Behaviour(struct soap*, tt__Behaviour **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Appearance_DEFINED
#define SOAP_TYPE_PointerTott__Appearance_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Appearance(struct soap*, tt__Appearance *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Appearance(struct soap*, const char *, int, tt__Appearance *const*, const char *);
SOAP_FMAC3 tt__Appearance ** SOAP_FMAC4 soap_in_PointerTott__Appearance(struct soap*, const char*, tt__Appearance **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Appearance(struct soap*, tt__Appearance *const*, const char*, const char*);
SOAP_FMAC3 tt__Appearance ** SOAP_FMAC4 soap_get_PointerTott__Appearance(struct soap*, tt__Appearance **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZConfigurationExtension_DEFINED
#define SOAP_TYPE_PointerTott__PTZConfigurationExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZConfigurationExtension(struct soap*, tt__PTZConfigurationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZConfigurationExtension(struct soap*, const char *, int, tt__PTZConfigurationExtension *const*, const char *);
SOAP_FMAC3 tt__PTZConfigurationExtension ** SOAP_FMAC4 soap_in_PointerTott__PTZConfigurationExtension(struct soap*, const char*, tt__PTZConfigurationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZConfigurationExtension(struct soap*, tt__PTZConfigurationExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZConfigurationExtension ** SOAP_FMAC4 soap_get_PointerTott__PTZConfigurationExtension(struct soap*, tt__PTZConfigurationExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__ZoomLimits_DEFINED
#define SOAP_TYPE_PointerTott__ZoomLimits_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ZoomLimits(struct soap*, tt__ZoomLimits *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ZoomLimits(struct soap*, const char *, int, tt__ZoomLimits *const*, const char *);
SOAP_FMAC3 tt__ZoomLimits ** SOAP_FMAC4 soap_in_PointerTott__ZoomLimits(struct soap*, const char*, tt__ZoomLimits **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ZoomLimits(struct soap*, tt__ZoomLimits *const*, const char*, const char*);
SOAP_FMAC3 tt__ZoomLimits ** SOAP_FMAC4 soap_get_PointerTott__ZoomLimits(struct soap*, tt__ZoomLimits **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PanTiltLimits_DEFINED
#define SOAP_TYPE_PointerTott__PanTiltLimits_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PanTiltLimits(struct soap*, tt__PanTiltLimits *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PanTiltLimits(struct soap*, const char *, int, tt__PanTiltLimits *const*, const char *);
SOAP_FMAC3 tt__PanTiltLimits ** SOAP_FMAC4 soap_in_PointerTott__PanTiltLimits(struct soap*, const char*, tt__PanTiltLimits **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PanTiltLimits(struct soap*, tt__PanTiltLimits *const*, const char*, const char*);
SOAP_FMAC3 tt__PanTiltLimits ** SOAP_FMAC4 soap_get_PointerTott__PanTiltLimits(struct soap*, tt__PanTiltLimits **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZNodeExtension_DEFINED
#define SOAP_TYPE_PointerTott__PTZNodeExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZNodeExtension(struct soap*, tt__PTZNodeExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZNodeExtension(struct soap*, const char *, int, tt__PTZNodeExtension *const*, const char *);
SOAP_FMAC3 tt__PTZNodeExtension ** SOAP_FMAC4 soap_in_PointerTott__PTZNodeExtension(struct soap*, const char*, tt__PTZNodeExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZNodeExtension(struct soap*, tt__PTZNodeExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZNodeExtension ** SOAP_FMAC4 soap_get_PointerTott__PTZNodeExtension(struct soap*, tt__PTZNodeExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__DigitalIdleState_DEFINED
#define SOAP_TYPE_PointerTott__DigitalIdleState_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__DigitalIdleState(struct soap*, enum tt__DigitalIdleState *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__DigitalIdleState(struct soap*, const char *, int, enum tt__DigitalIdleState *const*, const char *);
SOAP_FMAC3 enum tt__DigitalIdleState ** SOAP_FMAC4 soap_in_PointerTott__DigitalIdleState(struct soap*, const char*, enum tt__DigitalIdleState **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__DigitalIdleState(struct soap*, enum tt__DigitalIdleState *const*, const char*, const char*);
SOAP_FMAC3 enum tt__DigitalIdleState ** SOAP_FMAC4 soap_get_PointerTott__DigitalIdleState(struct soap*, enum tt__DigitalIdleState **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__NetworkInterfaceExtension_DEFINED
#define SOAP_TYPE_PointerTott__NetworkInterfaceExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__NetworkInterfaceExtension(struct soap*, tt__NetworkInterfaceExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__NetworkInterfaceExtension(struct soap*, const char *, int, tt__NetworkInterfaceExtension *const*, const char *);
SOAP_FMAC3 tt__NetworkInterfaceExtension ** SOAP_FMAC4 soap_in_PointerTott__NetworkInterfaceExtension(struct soap*, const char*, tt__NetworkInterfaceExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__NetworkInterfaceExtension(struct soap*, tt__NetworkInterfaceExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__NetworkInterfaceExtension ** SOAP_FMAC4 soap_get_PointerTott__NetworkInterfaceExtension(struct soap*, tt__NetworkInterfaceExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__IPv6NetworkInterface_DEFINED
#define SOAP_TYPE_PointerTott__IPv6NetworkInterface_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__IPv6NetworkInterface(struct soap*, tt__IPv6NetworkInterface *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__IPv6NetworkInterface(struct soap*, const char *, int, tt__IPv6NetworkInterface *const*, const char *);
SOAP_FMAC3 tt__IPv6NetworkInterface ** SOAP_FMAC4 soap_in_PointerTott__IPv6NetworkInterface(struct soap*, const char*, tt__IPv6NetworkInterface **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__IPv6NetworkInterface(struct soap*, tt__IPv6NetworkInterface *const*, const char*, const char*);
SOAP_FMAC3 tt__IPv6NetworkInterface ** SOAP_FMAC4 soap_get_PointerTott__IPv6NetworkInterface(struct soap*, tt__IPv6NetworkInterface **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__IPv4NetworkInterface_DEFINED
#define SOAP_TYPE_PointerTott__IPv4NetworkInterface_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__IPv4NetworkInterface(struct soap*, tt__IPv4NetworkInterface *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__IPv4NetworkInterface(struct soap*, const char *, int, tt__IPv4NetworkInterface *const*, const char *);
SOAP_FMAC3 tt__IPv4NetworkInterface ** SOAP_FMAC4 soap_in_PointerTott__IPv4NetworkInterface(struct soap*, const char*, tt__IPv4NetworkInterface **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__IPv4NetworkInterface(struct soap*, tt__IPv4NetworkInterface *const*, const char*, const char*);
SOAP_FMAC3 tt__IPv4NetworkInterface ** SOAP_FMAC4 soap_get_PointerTott__IPv4NetworkInterface(struct soap*, tt__IPv4NetworkInterface **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__NetworkInterfaceLink_DEFINED
#define SOAP_TYPE_PointerTott__NetworkInterfaceLink_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__NetworkInterfaceLink(struct soap*, tt__NetworkInterfaceLink *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__NetworkInterfaceLink(struct soap*, const char *, int, tt__NetworkInterfaceLink *const*, const char *);
SOAP_FMAC3 tt__NetworkInterfaceLink ** SOAP_FMAC4 soap_in_PointerTott__NetworkInterfaceLink(struct soap*, const char*, tt__NetworkInterfaceLink **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__NetworkInterfaceLink(struct soap*, tt__NetworkInterfaceLink *const*, const char*, const char*);
SOAP_FMAC3 tt__NetworkInterfaceLink ** SOAP_FMAC4 soap_get_PointerTott__NetworkInterfaceLink(struct soap*, tt__NetworkInterfaceLink **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__NetworkInterfaceInfo_DEFINED
#define SOAP_TYPE_PointerTott__NetworkInterfaceInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__NetworkInterfaceInfo(struct soap*, tt__NetworkInterfaceInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__NetworkInterfaceInfo(struct soap*, const char *, int, tt__NetworkInterfaceInfo *const*, const char *);
SOAP_FMAC3 tt__NetworkInterfaceInfo ** SOAP_FMAC4 soap_in_PointerTott__NetworkInterfaceInfo(struct soap*, const char*, tt__NetworkInterfaceInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__NetworkInterfaceInfo(struct soap*, tt__NetworkInterfaceInfo *const*, const char*, const char*);
SOAP_FMAC3 tt__NetworkInterfaceInfo ** SOAP_FMAC4 soap_get_PointerTott__NetworkInterfaceInfo(struct soap*, tt__NetworkInterfaceInfo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__VideoOutputExtension_DEFINED
#define SOAP_TYPE_PointerTott__VideoOutputExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__VideoOutputExtension(struct soap*, tt__VideoOutputExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__VideoOutputExtension(struct soap*, const char *, int, tt__VideoOutputExtension *const*, const char *);
SOAP_FMAC3 tt__VideoOutputExtension ** SOAP_FMAC4 soap_in_PointerTott__VideoOutputExtension(struct soap*, const char*, tt__VideoOutputExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__VideoOutputExtension(struct soap*, tt__VideoOutputExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__VideoOutputExtension ** SOAP_FMAC4 soap_get_PointerTott__VideoOutputExtension(struct soap*, tt__VideoOutputExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Layout_DEFINED
#define SOAP_TYPE_PointerTott__Layout_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Layout(struct soap*, tt__Layout *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Layout(struct soap*, const char *, int, tt__Layout *const*, const char *);
SOAP_FMAC3 tt__Layout ** SOAP_FMAC4 soap_in_PointerTott__Layout(struct soap*, const char*, tt__Layout **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Layout(struct soap*, tt__Layout *const*, const char*, const char*);
SOAP_FMAC3 tt__Layout ** SOAP_FMAC4 soap_get_PointerTott__Layout(struct soap*, tt__Layout **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__MetadataConfigurationExtension_DEFINED
#define SOAP_TYPE_PointerTott__MetadataConfigurationExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__MetadataConfigurationExtension(struct soap*, tt__MetadataConfigurationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__MetadataConfigurationExtension(struct soap*, const char *, int, tt__MetadataConfigurationExtension *const*, const char *);
SOAP_FMAC3 tt__MetadataConfigurationExtension ** SOAP_FMAC4 soap_in_PointerTott__MetadataConfigurationExtension(struct soap*, const char*, tt__MetadataConfigurationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__MetadataConfigurationExtension(struct soap*, tt__MetadataConfigurationExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__MetadataConfigurationExtension ** SOAP_FMAC4 soap_get_PointerTott__MetadataConfigurationExtension(struct soap*, tt__MetadataConfigurationExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__EventSubscription_DEFINED
#define SOAP_TYPE_PointerTott__EventSubscription_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__EventSubscription(struct soap*, tt__EventSubscription *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__EventSubscription(struct soap*, const char *, int, tt__EventSubscription *const*, const char *);
SOAP_FMAC3 tt__EventSubscription ** SOAP_FMAC4 soap_in_PointerTott__EventSubscription(struct soap*, const char*, tt__EventSubscription **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__EventSubscription(struct soap*, tt__EventSubscription *const*, const char*, const char*);
SOAP_FMAC3 tt__EventSubscription ** SOAP_FMAC4 soap_get_PointerTott__EventSubscription(struct soap*, tt__EventSubscription **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZFilter_DEFINED
#define SOAP_TYPE_PointerTott__PTZFilter_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZFilter(struct soap*, tt__PTZFilter *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZFilter(struct soap*, const char *, int, tt__PTZFilter *const*, const char *);
SOAP_FMAC3 tt__PTZFilter ** SOAP_FMAC4 soap_in_PointerTott__PTZFilter(struct soap*, const char*, tt__PTZFilter **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZFilter(struct soap*, tt__PTZFilter *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZFilter ** SOAP_FMAC4 soap_get_PointerTott__PTZFilter(struct soap*, tt__PTZFilter **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__RuleEngineConfiguration_DEFINED
#define SOAP_TYPE_PointerTott__RuleEngineConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__RuleEngineConfiguration(struct soap*, tt__RuleEngineConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__RuleEngineConfiguration(struct soap*, const char *, int, tt__RuleEngineConfiguration *const*, const char *);
SOAP_FMAC3 tt__RuleEngineConfiguration ** SOAP_FMAC4 soap_in_PointerTott__RuleEngineConfiguration(struct soap*, const char*, tt__RuleEngineConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__RuleEngineConfiguration(struct soap*, tt__RuleEngineConfiguration *const*, const char*, const char*);
SOAP_FMAC3 tt__RuleEngineConfiguration ** SOAP_FMAC4 soap_get_PointerTott__RuleEngineConfiguration(struct soap*, tt__RuleEngineConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__AnalyticsEngineConfiguration_DEFINED
#define SOAP_TYPE_PointerTott__AnalyticsEngineConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__AnalyticsEngineConfiguration(struct soap*, tt__AnalyticsEngineConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__AnalyticsEngineConfiguration(struct soap*, const char *, int, tt__AnalyticsEngineConfiguration *const*, const char *);
SOAP_FMAC3 tt__AnalyticsEngineConfiguration ** SOAP_FMAC4 soap_in_PointerTott__AnalyticsEngineConfiguration(struct soap*, const char*, tt__AnalyticsEngineConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__AnalyticsEngineConfiguration(struct soap*, tt__AnalyticsEngineConfiguration *const*, const char*, const char*);
SOAP_FMAC3 tt__AnalyticsEngineConfiguration ** SOAP_FMAC4 soap_get_PointerTott__AnalyticsEngineConfiguration(struct soap*, tt__AnalyticsEngineConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__VideoRateControl2_DEFINED
#define SOAP_TYPE_PointerTott__VideoRateControl2_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__VideoRateControl2(struct soap*, tt__VideoRateControl2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__VideoRateControl2(struct soap*, const char *, int, tt__VideoRateControl2 *const*, const char *);
SOAP_FMAC3 tt__VideoRateControl2 ** SOAP_FMAC4 soap_in_PointerTott__VideoRateControl2(struct soap*, const char*, tt__VideoRateControl2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__VideoRateControl2(struct soap*, tt__VideoRateControl2 *const*, const char*, const char*);
SOAP_FMAC3 tt__VideoRateControl2 ** SOAP_FMAC4 soap_get_PointerTott__VideoRateControl2(struct soap*, tt__VideoRateControl2 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__MulticastConfiguration_DEFINED
#define SOAP_TYPE_PointerTott__MulticastConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__MulticastConfiguration(struct soap*, tt__MulticastConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__MulticastConfiguration(struct soap*, const char *, int, tt__MulticastConfiguration *const*, const char *);
SOAP_FMAC3 tt__MulticastConfiguration ** SOAP_FMAC4 soap_in_PointerTott__MulticastConfiguration(struct soap*, const char*, tt__MulticastConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__MulticastConfiguration(struct soap*, tt__MulticastConfiguration *const*, const char*, const char*);
SOAP_FMAC3 tt__MulticastConfiguration ** SOAP_FMAC4 soap_get_PointerTott__MulticastConfiguration(struct soap*, tt__MulticastConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__H264Configuration_DEFINED
#define SOAP_TYPE_PointerTott__H264Configuration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__H264Configuration(struct soap*, tt__H264Configuration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__H264Configuration(struct soap*, const char *, int, tt__H264Configuration *const*, const char *);
SOAP_FMAC3 tt__H264Configuration ** SOAP_FMAC4 soap_in_PointerTott__H264Configuration(struct soap*, const char*, tt__H264Configuration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__H264Configuration(struct soap*, tt__H264Configuration *const*, const char*, const char*);
SOAP_FMAC3 tt__H264Configuration ** SOAP_FMAC4 soap_get_PointerTott__H264Configuration(struct soap*, tt__H264Configuration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Mpeg4Configuration_DEFINED
#define SOAP_TYPE_PointerTott__Mpeg4Configuration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Mpeg4Configuration(struct soap*, tt__Mpeg4Configuration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Mpeg4Configuration(struct soap*, const char *, int, tt__Mpeg4Configuration *const*, const char *);
SOAP_FMAC3 tt__Mpeg4Configuration ** SOAP_FMAC4 soap_in_PointerTott__Mpeg4Configuration(struct soap*, const char*, tt__Mpeg4Configuration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Mpeg4Configuration(struct soap*, tt__Mpeg4Configuration *const*, const char*, const char*);
SOAP_FMAC3 tt__Mpeg4Configuration ** SOAP_FMAC4 soap_get_PointerTott__Mpeg4Configuration(struct soap*, tt__Mpeg4Configuration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__VideoRateControl_DEFINED
#define SOAP_TYPE_PointerTott__VideoRateControl_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__VideoRateControl(struct soap*, tt__VideoRateControl *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__VideoRateControl(struct soap*, const char *, int, tt__VideoRateControl *const*, const char *);
SOAP_FMAC3 tt__VideoRateControl ** SOAP_FMAC4 soap_in_PointerTott__VideoRateControl(struct soap*, const char*, tt__VideoRateControl **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__VideoRateControl(struct soap*, tt__VideoRateControl *const*, const char*, const char*);
SOAP_FMAC3 tt__VideoRateControl ** SOAP_FMAC4 soap_get_PointerTott__VideoRateControl(struct soap*, tt__VideoRateControl **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__VideoSourceConfigurationExtension_DEFINED
#define SOAP_TYPE_PointerTott__VideoSourceConfigurationExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__VideoSourceConfigurationExtension(struct soap*, tt__VideoSourceConfigurationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__VideoSourceConfigurationExtension(struct soap*, const char *, int, tt__VideoSourceConfigurationExtension *const*, const char *);
SOAP_FMAC3 tt__VideoSourceConfigurationExtension ** SOAP_FMAC4 soap_in_PointerTott__VideoSourceConfigurationExtension(struct soap*, const char*, tt__VideoSourceConfigurationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__VideoSourceConfigurationExtension(struct soap*, tt__VideoSourceConfigurationExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__VideoSourceConfigurationExtension ** SOAP_FMAC4 soap_get_PointerTott__VideoSourceConfigurationExtension(struct soap*, tt__VideoSourceConfigurationExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__IntRectangle_DEFINED
#define SOAP_TYPE_PointerTott__IntRectangle_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__IntRectangle(struct soap*, tt__IntRectangle *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__IntRectangle(struct soap*, const char *, int, tt__IntRectangle *const*, const char *);
SOAP_FMAC3 tt__IntRectangle ** SOAP_FMAC4 soap_in_PointerTott__IntRectangle(struct soap*, const char*, tt__IntRectangle **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__IntRectangle(struct soap*, tt__IntRectangle *const*, const char*, const char*);
SOAP_FMAC3 tt__IntRectangle ** SOAP_FMAC4 soap_get_PointerTott__IntRectangle(struct soap*, tt__IntRectangle **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__VideoSourceExtension_DEFINED
#define SOAP_TYPE_PointerTott__VideoSourceExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__VideoSourceExtension(struct soap*, tt__VideoSourceExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__VideoSourceExtension(struct soap*, const char *, int, tt__VideoSourceExtension *const*, const char *);
SOAP_FMAC3 tt__VideoSourceExtension ** SOAP_FMAC4 soap_in_PointerTott__VideoSourceExtension(struct soap*, const char*, tt__VideoSourceExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__VideoSourceExtension(struct soap*, tt__VideoSourceExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__VideoSourceExtension ** SOAP_FMAC4 soap_get_PointerTott__VideoSourceExtension(struct soap*, tt__VideoSourceExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__ImagingSettings_DEFINED
#define SOAP_TYPE_PointerTott__ImagingSettings_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ImagingSettings(struct soap*, tt__ImagingSettings *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ImagingSettings(struct soap*, const char *, int, tt__ImagingSettings *const*, const char *);
SOAP_FMAC3 tt__ImagingSettings ** SOAP_FMAC4 soap_in_PointerTott__ImagingSettings(struct soap*, const char*, tt__ImagingSettings **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ImagingSettings(struct soap*, tt__ImagingSettings *const*, const char*, const char*);
SOAP_FMAC3 tt__ImagingSettings ** SOAP_FMAC4 soap_get_PointerTott__ImagingSettings(struct soap*, tt__ImagingSettings **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZPresetTourOptions_DEFINED
#define SOAP_TYPE_PointerTott__PTZPresetTourOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZPresetTourOptions(struct soap*, tt__PTZPresetTourOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZPresetTourOptions(struct soap*, const char *, int, tt__PTZPresetTourOptions *const*, const char *);
SOAP_FMAC3 tt__PTZPresetTourOptions ** SOAP_FMAC4 soap_in_PointerTott__PTZPresetTourOptions(struct soap*, const char*, tt__PTZPresetTourOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZPresetTourOptions(struct soap*, tt__PTZPresetTourOptions *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZPresetTourOptions ** SOAP_FMAC4 soap_get_PointerTott__PTZPresetTourOptions(struct soap*, tt__PTZPresetTourOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PresetTour_DEFINED
#define SOAP_TYPE_PointerTott__PresetTour_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PresetTour(struct soap*, tt__PresetTour *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PresetTour(struct soap*, const char *, int, tt__PresetTour *const*, const char *);
SOAP_FMAC3 tt__PresetTour ** SOAP_FMAC4 soap_in_PointerTott__PresetTour(struct soap*, const char*, tt__PresetTour **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PresetTour(struct soap*, tt__PresetTour *const*, const char*, const char*);
SOAP_FMAC3 tt__PresetTour ** SOAP_FMAC4 soap_get_PointerTott__PresetTour(struct soap*, tt__PresetTour **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZPreset_DEFINED
#define SOAP_TYPE_PointerTott__PTZPreset_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZPreset(struct soap*, tt__PTZPreset *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZPreset(struct soap*, const char *, int, tt__PTZPreset *const*, const char *);
SOAP_FMAC3 tt__PTZPreset ** SOAP_FMAC4 soap_in_PointerTott__PTZPreset(struct soap*, const char*, tt__PTZPreset **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZPreset(struct soap*, tt__PTZPreset *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZPreset ** SOAP_FMAC4 soap_get_PointerTott__PTZPreset(struct soap*, tt__PTZPreset **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZConfigurationOptions_DEFINED
#define SOAP_TYPE_PointerTott__PTZConfigurationOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZConfigurationOptions(struct soap*, tt__PTZConfigurationOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZConfigurationOptions(struct soap*, const char *, int, tt__PTZConfigurationOptions *const*, const char *);
SOAP_FMAC3 tt__PTZConfigurationOptions ** SOAP_FMAC4 soap_in_PointerTott__PTZConfigurationOptions(struct soap*, const char*, tt__PTZConfigurationOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZConfigurationOptions(struct soap*, tt__PTZConfigurationOptions *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZConfigurationOptions ** SOAP_FMAC4 soap_get_PointerTott__PTZConfigurationOptions(struct soap*, tt__PTZConfigurationOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo__tptz__SetConfigurationResponse_sequence_DEFINED
#define SOAP_TYPE_PointerTo__tptz__SetConfigurationResponse_sequence_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__tptz__SetConfigurationResponse_sequence(struct soap*, __tptz__SetConfigurationResponse_sequence *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__tptz__SetConfigurationResponse_sequence(struct soap*, const char *, int, __tptz__SetConfigurationResponse_sequence *const*, const char *);
SOAP_FMAC3 __tptz__SetConfigurationResponse_sequence ** SOAP_FMAC4 soap_in_PointerTo__tptz__SetConfigurationResponse_sequence(struct soap*, const char*, __tptz__SetConfigurationResponse_sequence **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__tptz__SetConfigurationResponse_sequence(struct soap*, __tptz__SetConfigurationResponse_sequence *const*, const char*, const char*);
SOAP_FMAC3 __tptz__SetConfigurationResponse_sequence ** SOAP_FMAC4 soap_get_PointerTo__tptz__SetConfigurationResponse_sequence(struct soap*, __tptz__SetConfigurationResponse_sequence **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZNode_DEFINED
#define SOAP_TYPE_PointerTott__PTZNode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZNode(struct soap*, tt__PTZNode *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZNode(struct soap*, const char *, int, tt__PTZNode *const*, const char *);
SOAP_FMAC3 tt__PTZNode ** SOAP_FMAC4 soap_in_PointerTott__PTZNode(struct soap*, const char*, tt__PTZNode **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZNode(struct soap*, tt__PTZNode *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZNode ** SOAP_FMAC4 soap_get_PointerTott__PTZNode(struct soap*, tt__PTZNode **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTotptz__Capabilities_DEFINED
#define SOAP_TYPE_PointerTotptz__Capabilities_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotptz__Capabilities(struct soap*, tptz__Capabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotptz__Capabilities(struct soap*, const char *, int, tptz__Capabilities *const*, const char *);
SOAP_FMAC3 tptz__Capabilities ** SOAP_FMAC4 soap_in_PointerTotptz__Capabilities(struct soap*, const char*, tptz__Capabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotptz__Capabilities(struct soap*, tptz__Capabilities *const*, const char*, const char*);
SOAP_FMAC3 tptz__Capabilities ** SOAP_FMAC4 soap_get_PointerTotptz__Capabilities(struct soap*, tptz__Capabilities **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__OSDConfigurationOptions_DEFINED
#define SOAP_TYPE_PointerTott__OSDConfigurationOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__OSDConfigurationOptions(struct soap*, tt__OSDConfigurationOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__OSDConfigurationOptions(struct soap*, const char *, int, tt__OSDConfigurationOptions *const*, const char *);
SOAP_FMAC3 tt__OSDConfigurationOptions ** SOAP_FMAC4 soap_in_PointerTott__OSDConfigurationOptions(struct soap*, const char*, tt__OSDConfigurationOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__OSDConfigurationOptions(struct soap*, tt__OSDConfigurationOptions *const*, const char*, const char*);
SOAP_FMAC3 tt__OSDConfigurationOptions ** SOAP_FMAC4 soap_get_PointerTott__OSDConfigurationOptions(struct soap*, tt__OSDConfigurationOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__OSDConfiguration_DEFINED
#define SOAP_TYPE_PointerTott__OSDConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__OSDConfiguration(struct soap*, tt__OSDConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__OSDConfiguration(struct soap*, const char *, int, tt__OSDConfiguration *const*, const char *);
SOAP_FMAC3 tt__OSDConfiguration ** SOAP_FMAC4 soap_in_PointerTott__OSDConfiguration(struct soap*, const char*, tt__OSDConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__OSDConfiguration(struct soap*, tt__OSDConfiguration *const*, const char*, const char*);
SOAP_FMAC3 tt__OSDConfiguration ** SOAP_FMAC4 soap_get_PointerTott__OSDConfiguration(struct soap*, tt__OSDConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTotrt__VideoSourceMode_DEFINED
#define SOAP_TYPE_PointerTotrt__VideoSourceMode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotrt__VideoSourceMode(struct soap*, trt__VideoSourceMode *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotrt__VideoSourceMode(struct soap*, const char *, int, trt__VideoSourceMode *const*, const char *);
SOAP_FMAC3 trt__VideoSourceMode ** SOAP_FMAC4 soap_in_PointerTotrt__VideoSourceMode(struct soap*, const char*, trt__VideoSourceMode **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotrt__VideoSourceMode(struct soap*, trt__VideoSourceMode *const*, const char*, const char*);
SOAP_FMAC3 trt__VideoSourceMode ** SOAP_FMAC4 soap_get_PointerTotrt__VideoSourceMode(struct soap*, trt__VideoSourceMode **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__MediaUri_DEFINED
#define SOAP_TYPE_PointerTott__MediaUri_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__MediaUri(struct soap*, tt__MediaUri *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__MediaUri(struct soap*, const char *, int, tt__MediaUri *const*, const char *);
SOAP_FMAC3 tt__MediaUri ** SOAP_FMAC4 soap_in_PointerTott__MediaUri(struct soap*, const char*, tt__MediaUri **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__MediaUri(struct soap*, tt__MediaUri *const*, const char*, const char*);
SOAP_FMAC3 tt__MediaUri ** SOAP_FMAC4 soap_get_PointerTott__MediaUri(struct soap*, tt__MediaUri **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__AudioOutputConfigurationOptions_DEFINED
#define SOAP_TYPE_PointerTott__AudioOutputConfigurationOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__AudioOutputConfigurationOptions(struct soap*, tt__AudioOutputConfigurationOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__AudioOutputConfigurationOptions(struct soap*, const char *, int, tt__AudioOutputConfigurationOptions *const*, const char *);
SOAP_FMAC3 tt__AudioOutputConfigurationOptions ** SOAP_FMAC4 soap_in_PointerTott__AudioOutputConfigurationOptions(struct soap*, const char*, tt__AudioOutputConfigurationOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__AudioOutputConfigurationOptions(struct soap*, tt__AudioOutputConfigurationOptions *const*, const char*, const char*);
SOAP_FMAC3 tt__AudioOutputConfigurationOptions ** SOAP_FMAC4 soap_get_PointerTott__AudioOutputConfigurationOptions(struct soap*, tt__AudioOutputConfigurationOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__MetadataConfigurationOptions_DEFINED
#define SOAP_TYPE_PointerTott__MetadataConfigurationOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__MetadataConfigurationOptions(struct soap*, tt__MetadataConfigurationOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__MetadataConfigurationOptions(struct soap*, const char *, int, tt__MetadataConfigurationOptions *const*, const char *);
SOAP_FMAC3 tt__MetadataConfigurationOptions ** SOAP_FMAC4 soap_in_PointerTott__MetadataConfigurationOptions(struct soap*, const char*, tt__MetadataConfigurationOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__MetadataConfigurationOptions(struct soap*, tt__MetadataConfigurationOptions *const*, const char*, const char*);
SOAP_FMAC3 tt__MetadataConfigurationOptions ** SOAP_FMAC4 soap_get_PointerTott__MetadataConfigurationOptions(struct soap*, tt__MetadataConfigurationOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__AudioSourceConfigurationOptions_DEFINED
#define SOAP_TYPE_PointerTott__AudioSourceConfigurationOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__AudioSourceConfigurationOptions(struct soap*, tt__AudioSourceConfigurationOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__AudioSourceConfigurationOptions(struct soap*, const char *, int, tt__AudioSourceConfigurationOptions *const*, const char *);
SOAP_FMAC3 tt__AudioSourceConfigurationOptions ** SOAP_FMAC4 soap_in_PointerTott__AudioSourceConfigurationOptions(struct soap*, const char*, tt__AudioSourceConfigurationOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__AudioSourceConfigurationOptions(struct soap*, tt__AudioSourceConfigurationOptions *const*, const char*, const char*);
SOAP_FMAC3 tt__AudioSourceConfigurationOptions ** SOAP_FMAC4 soap_get_PointerTott__AudioSourceConfigurationOptions(struct soap*, tt__AudioSourceConfigurationOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__VideoEncoderConfigurationOptions_DEFINED
#define SOAP_TYPE_PointerTott__VideoEncoderConfigurationOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__VideoEncoderConfigurationOptions(struct soap*, tt__VideoEncoderConfigurationOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__VideoEncoderConfigurationOptions(struct soap*, const char *, int, tt__VideoEncoderConfigurationOptions *const*, const char *);
SOAP_FMAC3 tt__VideoEncoderConfigurationOptions ** SOAP_FMAC4 soap_in_PointerTott__VideoEncoderConfigurationOptions(struct soap*, const char*, tt__VideoEncoderConfigurationOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__VideoEncoderConfigurationOptions(struct soap*, tt__VideoEncoderConfigurationOptions *const*, const char*, const char*);
SOAP_FMAC3 tt__VideoEncoderConfigurationOptions ** SOAP_FMAC4 soap_get_PointerTott__VideoEncoderConfigurationOptions(struct soap*, tt__VideoEncoderConfigurationOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__VideoSourceConfigurationOptions_DEFINED
#define SOAP_TYPE_PointerTott__VideoSourceConfigurationOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__VideoSourceConfigurationOptions(struct soap*, tt__VideoSourceConfigurationOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__VideoSourceConfigurationOptions(struct soap*, const char *, int, tt__VideoSourceConfigurationOptions *const*, const char *);
SOAP_FMAC3 tt__VideoSourceConfigurationOptions ** SOAP_FMAC4 soap_in_PointerTott__VideoSourceConfigurationOptions(struct soap*, const char*, tt__VideoSourceConfigurationOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__VideoSourceConfigurationOptions(struct soap*, tt__VideoSourceConfigurationOptions *const*, const char*, const char*);
SOAP_FMAC3 tt__VideoSourceConfigurationOptions ** SOAP_FMAC4 soap_get_PointerTott__VideoSourceConfigurationOptions(struct soap*, tt__VideoSourceConfigurationOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Profile_DEFINED
#define SOAP_TYPE_PointerTott__Profile_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Profile(struct soap*, tt__Profile *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Profile(struct soap*, const char *, int, tt__Profile *const*, const char *);
SOAP_FMAC3 tt__Profile ** SOAP_FMAC4 soap_in_PointerTott__Profile(struct soap*, const char*, tt__Profile **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Profile(struct soap*, tt__Profile *const*, const char*, const char*);
SOAP_FMAC3 tt__Profile ** SOAP_FMAC4 soap_get_PointerTott__Profile(struct soap*, tt__Profile **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__AudioOutput_DEFINED
#define SOAP_TYPE_PointerTott__AudioOutput_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__AudioOutput(struct soap*, tt__AudioOutput *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__AudioOutput(struct soap*, const char *, int, tt__AudioOutput *const*, const char *);
SOAP_FMAC3 tt__AudioOutput ** SOAP_FMAC4 soap_in_PointerTott__AudioOutput(struct soap*, const char*, tt__AudioOutput **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__AudioOutput(struct soap*, tt__AudioOutput *const*, const char*, const char*);
SOAP_FMAC3 tt__AudioOutput ** SOAP_FMAC4 soap_get_PointerTott__AudioOutput(struct soap*, tt__AudioOutput **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__AudioSource_DEFINED
#define SOAP_TYPE_PointerTott__AudioSource_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__AudioSource(struct soap*, tt__AudioSource *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__AudioSource(struct soap*, const char *, int, tt__AudioSource *const*, const char *);
SOAP_FMAC3 tt__AudioSource ** SOAP_FMAC4 soap_in_PointerTott__AudioSource(struct soap*, const char*, tt__AudioSource **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__AudioSource(struct soap*, tt__AudioSource *const*, const char*, const char*);
SOAP_FMAC3 tt__AudioSource ** SOAP_FMAC4 soap_get_PointerTott__AudioSource(struct soap*, tt__AudioSource **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__VideoSource_DEFINED
#define SOAP_TYPE_PointerTott__VideoSource_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__VideoSource(struct soap*, tt__VideoSource *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__VideoSource(struct soap*, const char *, int, tt__VideoSource *const*, const char *);
SOAP_FMAC3 tt__VideoSource ** SOAP_FMAC4 soap_in_PointerTott__VideoSource(struct soap*, const char*, tt__VideoSource **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__VideoSource(struct soap*, tt__VideoSource *const*, const char*, const char*);
SOAP_FMAC3 tt__VideoSource ** SOAP_FMAC4 soap_get_PointerTott__VideoSource(struct soap*, tt__VideoSource **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTotrt__Capabilities_DEFINED
#define SOAP_TYPE_PointerTotrt__Capabilities_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotrt__Capabilities(struct soap*, trt__Capabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotrt__Capabilities(struct soap*, const char *, int, trt__Capabilities *const*, const char *);
SOAP_FMAC3 trt__Capabilities ** SOAP_FMAC4 soap_in_PointerTotrt__Capabilities(struct soap*, const char*, trt__Capabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotrt__Capabilities(struct soap*, trt__Capabilities *const*, const char*, const char*);
SOAP_FMAC3 trt__Capabilities ** SOAP_FMAC4 soap_get_PointerTotrt__Capabilities(struct soap*, trt__Capabilities **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTotrt__VideoSourceModeExtension_DEFINED
#define SOAP_TYPE_PointerTotrt__VideoSourceModeExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotrt__VideoSourceModeExtension(struct soap*, trt__VideoSourceModeExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotrt__VideoSourceModeExtension(struct soap*, const char *, int, trt__VideoSourceModeExtension *const*, const char *);
SOAP_FMAC3 trt__VideoSourceModeExtension ** SOAP_FMAC4 soap_in_PointerTotrt__VideoSourceModeExtension(struct soap*, const char*, trt__VideoSourceModeExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotrt__VideoSourceModeExtension(struct soap*, trt__VideoSourceModeExtension *const*, const char*, const char*);
SOAP_FMAC3 trt__VideoSourceModeExtension ** SOAP_FMAC4 soap_get_PointerTotrt__VideoSourceModeExtension(struct soap*, trt__VideoSourceModeExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Description_DEFINED
#define SOAP_TYPE_PointerTott__Description_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Description(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Description(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTott__Description(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Description(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTott__Description(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTotrt__StreamingCapabilities_DEFINED
#define SOAP_TYPE_PointerTotrt__StreamingCapabilities_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotrt__StreamingCapabilities(struct soap*, trt__StreamingCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotrt__StreamingCapabilities(struct soap*, const char *, int, trt__StreamingCapabilities *const*, const char *);
SOAP_FMAC3 trt__StreamingCapabilities ** SOAP_FMAC4 soap_in_PointerTotrt__StreamingCapabilities(struct soap*, const char*, trt__StreamingCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotrt__StreamingCapabilities(struct soap*, trt__StreamingCapabilities *const*, const char*, const char*);
SOAP_FMAC3 trt__StreamingCapabilities ** SOAP_FMAC4 soap_get_PointerTotrt__StreamingCapabilities(struct soap*, trt__StreamingCapabilities **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTotrt__ProfileCapabilities_DEFINED
#define SOAP_TYPE_PointerTotrt__ProfileCapabilities_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotrt__ProfileCapabilities(struct soap*, trt__ProfileCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotrt__ProfileCapabilities(struct soap*, const char *, int, trt__ProfileCapabilities *const*, const char *);
SOAP_FMAC3 trt__ProfileCapabilities ** SOAP_FMAC4 soap_in_PointerTotrt__ProfileCapabilities(struct soap*, const char*, trt__ProfileCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotrt__ProfileCapabilities(struct soap*, trt__ProfileCapabilities *const*, const char*, const char*);
SOAP_FMAC3 trt__ProfileCapabilities ** SOAP_FMAC4 soap_get_PointerTotrt__ProfileCapabilities(struct soap*, trt__ProfileCapabilities **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowstop__Documentation_DEFINED
#define SOAP_TYPE_PointerTowstop__Documentation_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowstop__Documentation(struct soap*, wstop__Documentation *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowstop__Documentation(struct soap*, const char *, int, wstop__Documentation *const*, const char *);
SOAP_FMAC3 wstop__Documentation ** SOAP_FMAC4 soap_in_PointerTowstop__Documentation(struct soap*, const char*, wstop__Documentation **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowstop__Documentation(struct soap*, wstop__Documentation *const*, const char*, const char*);
SOAP_FMAC3 wstop__Documentation ** SOAP_FMAC4 soap_get_PointerTowstop__Documentation(struct soap*, wstop__Documentation **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wsrfbf__BaseFaultType_FaultCause_DEFINED
#define SOAP_TYPE_PointerTo_wsrfbf__BaseFaultType_FaultCause_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsrfbf__BaseFaultType_FaultCause(struct soap*, _wsrfbf__BaseFaultType_FaultCause *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsrfbf__BaseFaultType_FaultCause(struct soap*, const char *, int, _wsrfbf__BaseFaultType_FaultCause *const*, const char *);
SOAP_FMAC3 _wsrfbf__BaseFaultType_FaultCause ** SOAP_FMAC4 soap_in_PointerTo_wsrfbf__BaseFaultType_FaultCause(struct soap*, const char*, _wsrfbf__BaseFaultType_FaultCause **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsrfbf__BaseFaultType_FaultCause(struct soap*, _wsrfbf__BaseFaultType_FaultCause *const*, const char*, const char*);
SOAP_FMAC3 _wsrfbf__BaseFaultType_FaultCause ** SOAP_FMAC4 soap_get_PointerTo_wsrfbf__BaseFaultType_FaultCause(struct soap*, _wsrfbf__BaseFaultType_FaultCause **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTostd__vectorTemplateOf_wsrfbf__BaseFaultType_Description_DEFINED
#define SOAP_TYPE_PointerTostd__vectorTemplateOf_wsrfbf__BaseFaultType_Description_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__vectorTemplateOf_wsrfbf__BaseFaultType_Description(struct soap*, std::vector<_wsrfbf__BaseFaultType_Description> *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__vectorTemplateOf_wsrfbf__BaseFaultType_Description(struct soap*, const char *, int, std::vector<_wsrfbf__BaseFaultType_Description> *const*, const char *);
SOAP_FMAC3 std::vector<_wsrfbf__BaseFaultType_Description> ** SOAP_FMAC4 soap_in_PointerTostd__vectorTemplateOf_wsrfbf__BaseFaultType_Description(struct soap*, const char*, std::vector<_wsrfbf__BaseFaultType_Description> **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__vectorTemplateOf_wsrfbf__BaseFaultType_Description(struct soap*, std::vector<_wsrfbf__BaseFaultType_Description> *const*, const char*, const char*);
SOAP_FMAC3 std::vector<_wsrfbf__BaseFaultType_Description> ** SOAP_FMAC4 soap_get_PointerTostd__vectorTemplateOf_wsrfbf__BaseFaultType_Description(struct soap*, std::vector<_wsrfbf__BaseFaultType_Description> **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_xml__lang_DEFINED
#define SOAP_TYPE_PointerTo_xml__lang_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_xml__lang(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_xml__lang(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTo_xml__lang(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_xml__lang(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTo_xml__lang(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wsrfbf__BaseFaultType_ErrorCode_DEFINED
#define SOAP_TYPE_PointerTo_wsrfbf__BaseFaultType_ErrorCode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsrfbf__BaseFaultType_ErrorCode(struct soap*, _wsrfbf__BaseFaultType_ErrorCode *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsrfbf__BaseFaultType_ErrorCode(struct soap*, const char *, int, _wsrfbf__BaseFaultType_ErrorCode *const*, const char *);
SOAP_FMAC3 _wsrfbf__BaseFaultType_ErrorCode ** SOAP_FMAC4 soap_in_PointerTo_wsrfbf__BaseFaultType_ErrorCode(struct soap*, const char*, _wsrfbf__BaseFaultType_ErrorCode **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsrfbf__BaseFaultType_ErrorCode(struct soap*, _wsrfbf__BaseFaultType_ErrorCode *const*, const char*, const char*);
SOAP_FMAC3 _wsrfbf__BaseFaultType_ErrorCode ** SOAP_FMAC4 soap_get_PointerTo_wsrfbf__BaseFaultType_ErrorCode(struct soap*, _wsrfbf__BaseFaultType_ErrorCode **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxsd__nonNegativeInteger_DEFINED
#define SOAP_TYPE_PointerToxsd__nonNegativeInteger_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__nonNegativeInteger(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__nonNegativeInteger(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__nonNegativeInteger(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__nonNegativeInteger(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__nonNegativeInteger(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wsnt__Subscribe_SubscriptionPolicy_DEFINED
#define SOAP_TYPE_PointerTo_wsnt__Subscribe_SubscriptionPolicy_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsnt__Subscribe_SubscriptionPolicy(struct soap*, _wsnt__Subscribe_SubscriptionPolicy *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsnt__Subscribe_SubscriptionPolicy(struct soap*, const char *, int, _wsnt__Subscribe_SubscriptionPolicy *const*, const char *);
SOAP_FMAC3 _wsnt__Subscribe_SubscriptionPolicy ** SOAP_FMAC4 soap_in_PointerTo_wsnt__Subscribe_SubscriptionPolicy(struct soap*, const char*, _wsnt__Subscribe_SubscriptionPolicy **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsnt__Subscribe_SubscriptionPolicy(struct soap*, _wsnt__Subscribe_SubscriptionPolicy *const*, const char*, const char*);
SOAP_FMAC3 _wsnt__Subscribe_SubscriptionPolicy ** SOAP_FMAC4 soap_get_PointerTo_wsnt__Subscribe_SubscriptionPolicy(struct soap*, _wsnt__Subscribe_SubscriptionPolicy **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowsnt__AbsoluteOrRelativeTimeType_DEFINED
#define SOAP_TYPE_PointerTowsnt__AbsoluteOrRelativeTimeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsnt__AbsoluteOrRelativeTimeType(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsnt__AbsoluteOrRelativeTimeType(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTowsnt__AbsoluteOrRelativeTimeType(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsnt__AbsoluteOrRelativeTimeType(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTowsnt__AbsoluteOrRelativeTimeType(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowsnt__SubscriptionPolicyType_DEFINED
#define SOAP_TYPE_PointerTowsnt__SubscriptionPolicyType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsnt__SubscriptionPolicyType(struct soap*, wsnt__SubscriptionPolicyType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsnt__SubscriptionPolicyType(struct soap*, const char *, int, wsnt__SubscriptionPolicyType *const*, const char *);
SOAP_FMAC3 wsnt__SubscriptionPolicyType ** SOAP_FMAC4 soap_in_PointerTowsnt__SubscriptionPolicyType(struct soap*, const char*, wsnt__SubscriptionPolicyType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsnt__SubscriptionPolicyType(struct soap*, wsnt__SubscriptionPolicyType *const*, const char*, const char*);
SOAP_FMAC3 wsnt__SubscriptionPolicyType ** SOAP_FMAC4 soap_get_PointerTowsnt__SubscriptionPolicyType(struct soap*, wsnt__SubscriptionPolicyType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowstop__TopicSetType_DEFINED
#define SOAP_TYPE_PointerTowstop__TopicSetType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowstop__TopicSetType(struct soap*, wstop__TopicSetType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowstop__TopicSetType(struct soap*, const char *, int, wstop__TopicSetType *const*, const char *);
SOAP_FMAC3 wstop__TopicSetType ** SOAP_FMAC4 soap_in_PointerTowstop__TopicSetType(struct soap*, const char*, wstop__TopicSetType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowstop__TopicSetType(struct soap*, wstop__TopicSetType *const*, const char*, const char*);
SOAP_FMAC3 wstop__TopicSetType ** SOAP_FMAC4 soap_get_PointerTowstop__TopicSetType(struct soap*, wstop__TopicSetType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowsnt__TopicExpressionType_DEFINED
#define SOAP_TYPE_PointerTowsnt__TopicExpressionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsnt__TopicExpressionType(struct soap*, wsnt__TopicExpressionType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsnt__TopicExpressionType(struct soap*, const char *, int, wsnt__TopicExpressionType *const*, const char *);
SOAP_FMAC3 wsnt__TopicExpressionType ** SOAP_FMAC4 soap_in_PointerTowsnt__TopicExpressionType(struct soap*, const char*, wsnt__TopicExpressionType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsnt__TopicExpressionType(struct soap*, wsnt__TopicExpressionType *const*, const char*, const char*);
SOAP_FMAC3 wsnt__TopicExpressionType ** SOAP_FMAC4 soap_get_PointerTowsnt__TopicExpressionType(struct soap*, wsnt__TopicExpressionType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowsa5__EndpointReferenceType_DEFINED
#define SOAP_TYPE_PointerTowsa5__EndpointReferenceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsa5__EndpointReferenceType(struct soap*, struct wsa5__EndpointReferenceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsa5__EndpointReferenceType(struct soap*, const char *, int, struct wsa5__EndpointReferenceType *const*, const char *);
SOAP_FMAC3 struct wsa5__EndpointReferenceType ** SOAP_FMAC4 soap_in_PointerTowsa5__EndpointReferenceType(struct soap*, const char*, struct wsa5__EndpointReferenceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsa5__EndpointReferenceType(struct soap*, struct wsa5__EndpointReferenceType *const*, const char*, const char*);
SOAP_FMAC3 struct wsa5__EndpointReferenceType ** SOAP_FMAC4 soap_get_PointerTowsa5__EndpointReferenceType(struct soap*, struct wsa5__EndpointReferenceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PropertyOperation_DEFINED
#define SOAP_TYPE_PointerTott__PropertyOperation_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PropertyOperation(struct soap*, enum tt__PropertyOperation *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PropertyOperation(struct soap*, const char *, int, enum tt__PropertyOperation *const*, const char *);
SOAP_FMAC3 enum tt__PropertyOperation ** SOAP_FMAC4 soap_in_PointerTott__PropertyOperation(struct soap*, const char*, enum tt__PropertyOperation **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PropertyOperation(struct soap*, enum tt__PropertyOperation *const*, const char*, const char*);
SOAP_FMAC3 enum tt__PropertyOperation ** SOAP_FMAC4 soap_get_PointerTott__PropertyOperation(struct soap*, enum tt__PropertyOperation **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__MessageExtension_DEFINED
#define SOAP_TYPE_PointerTott__MessageExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__MessageExtension(struct soap*, tt__MessageExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__MessageExtension(struct soap*, const char *, int, tt__MessageExtension *const*, const char *);
SOAP_FMAC3 tt__MessageExtension ** SOAP_FMAC4 soap_in_PointerTott__MessageExtension(struct soap*, const char*, tt__MessageExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__MessageExtension(struct soap*, tt__MessageExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__MessageExtension ** SOAP_FMAC4 soap_get_PointerTott__MessageExtension(struct soap*, tt__MessageExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__StorageReferencePathExtension_DEFINED
#define SOAP_TYPE_PointerTott__StorageReferencePathExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__StorageReferencePathExtension(struct soap*, tt__StorageReferencePathExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__StorageReferencePathExtension(struct soap*, const char *, int, tt__StorageReferencePathExtension *const*, const char *);
SOAP_FMAC3 tt__StorageReferencePathExtension ** SOAP_FMAC4 soap_in_PointerTott__StorageReferencePathExtension(struct soap*, const char*, tt__StorageReferencePathExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__StorageReferencePathExtension(struct soap*, tt__StorageReferencePathExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__StorageReferencePathExtension ** SOAP_FMAC4 soap_get_PointerTott__StorageReferencePathExtension(struct soap*, tt__StorageReferencePathExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__ArrayOfFileProgressExtension_DEFINED
#define SOAP_TYPE_PointerTott__ArrayOfFileProgressExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ArrayOfFileProgressExtension(struct soap*, tt__ArrayOfFileProgressExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ArrayOfFileProgressExtension(struct soap*, const char *, int, tt__ArrayOfFileProgressExtension *const*, const char *);
SOAP_FMAC3 tt__ArrayOfFileProgressExtension ** SOAP_FMAC4 soap_in_PointerTott__ArrayOfFileProgressExtension(struct soap*, const char*, tt__ArrayOfFileProgressExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ArrayOfFileProgressExtension(struct soap*, tt__ArrayOfFileProgressExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__ArrayOfFileProgressExtension ** SOAP_FMAC4 soap_get_PointerTott__ArrayOfFileProgressExtension(struct soap*, tt__ArrayOfFileProgressExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__FileProgress_DEFINED
#define SOAP_TYPE_PointerTott__FileProgress_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__FileProgress(struct soap*, tt__FileProgress *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__FileProgress(struct soap*, const char *, int, tt__FileProgress *const*, const char *);
SOAP_FMAC3 tt__FileProgress ** SOAP_FMAC4 soap_in_PointerTott__FileProgress(struct soap*, const char*, tt__FileProgress **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__FileProgress(struct soap*, tt__FileProgress *const*, const char*, const char*);
SOAP_FMAC3 tt__FileProgress ** SOAP_FMAC4 soap_get_PointerTott__FileProgress(struct soap*, tt__FileProgress **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__OSDConfigurationOptionsExtension_DEFINED
#define SOAP_TYPE_PointerTott__OSDConfigurationOptionsExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__OSDConfigurationOptionsExtension(struct soap*, tt__OSDConfigurationOptionsExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__OSDConfigurationOptionsExtension(struct soap*, const char *, int, tt__OSDConfigurationOptionsExtension *const*, const char *);
SOAP_FMAC3 tt__OSDConfigurationOptionsExtension ** SOAP_FMAC4 soap_in_PointerTott__OSDConfigurationOptionsExtension(struct soap*, const char*, tt__OSDConfigurationOptionsExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__OSDConfigurationOptionsExtension(struct soap*, tt__OSDConfigurationOptionsExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__OSDConfigurationOptionsExtension ** SOAP_FMAC4 soap_get_PointerTott__OSDConfigurationOptionsExtension(struct soap*, tt__OSDConfigurationOptionsExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__OSDImgOptions_DEFINED
#define SOAP_TYPE_PointerTott__OSDImgOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__OSDImgOptions(struct soap*, tt__OSDImgOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__OSDImgOptions(struct soap*, const char *, int, tt__OSDImgOptions *const*, const char *);
SOAP_FMAC3 tt__OSDImgOptions ** SOAP_FMAC4 soap_in_PointerTott__OSDImgOptions(struct soap*, const char*, tt__OSDImgOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__OSDImgOptions(struct soap*, tt__OSDImgOptions *const*, const char*, const char*);
SOAP_FMAC3 tt__OSDImgOptions ** SOAP_FMAC4 soap_get_PointerTott__OSDImgOptions(struct soap*, tt__OSDImgOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__OSDTextOptions_DEFINED
#define SOAP_TYPE_PointerTott__OSDTextOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__OSDTextOptions(struct soap*, tt__OSDTextOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__OSDTextOptions(struct soap*, const char *, int, tt__OSDTextOptions *const*, const char *);
SOAP_FMAC3 tt__OSDTextOptions ** SOAP_FMAC4 soap_in_PointerTott__OSDTextOptions(struct soap*, const char*, tt__OSDTextOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__OSDTextOptions(struct soap*, tt__OSDTextOptions *const*, const char*, const char*);
SOAP_FMAC3 tt__OSDTextOptions ** SOAP_FMAC4 soap_get_PointerTott__OSDTextOptions(struct soap*, tt__OSDTextOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__MaximumNumberOfOSDs_DEFINED
#define SOAP_TYPE_PointerTott__MaximumNumberOfOSDs_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__MaximumNumberOfOSDs(struct soap*, tt__MaximumNumberOfOSDs *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__MaximumNumberOfOSDs(struct soap*, const char *, int, tt__MaximumNumberOfOSDs *const*, const char *);
SOAP_FMAC3 tt__MaximumNumberOfOSDs ** SOAP_FMAC4 soap_in_PointerTott__MaximumNumberOfOSDs(struct soap*, const char*, tt__MaximumNumberOfOSDs **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__MaximumNumberOfOSDs(struct soap*, tt__MaximumNumberOfOSDs *const*, const char*, const char*);
SOAP_FMAC3 tt__MaximumNumberOfOSDs ** SOAP_FMAC4 soap_get_PointerTott__MaximumNumberOfOSDs(struct soap*, tt__MaximumNumberOfOSDs **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__OSDImgOptionsExtension_DEFINED
#define SOAP_TYPE_PointerTott__OSDImgOptionsExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__OSDImgOptionsExtension(struct soap*, tt__OSDImgOptionsExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__OSDImgOptionsExtension(struct soap*, const char *, int, tt__OSDImgOptionsExtension *const*, const char *);
SOAP_FMAC3 tt__OSDImgOptionsExtension ** SOAP_FMAC4 soap_in_PointerTott__OSDImgOptionsExtension(struct soap*, const char*, tt__OSDImgOptionsExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__OSDImgOptionsExtension(struct soap*, tt__OSDImgOptionsExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__OSDImgOptionsExtension ** SOAP_FMAC4 soap_get_PointerTott__OSDImgOptionsExtension(struct soap*, tt__OSDImgOptionsExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__OSDTextOptionsExtension_DEFINED
#define SOAP_TYPE_PointerTott__OSDTextOptionsExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__OSDTextOptionsExtension(struct soap*, tt__OSDTextOptionsExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__OSDTextOptionsExtension(struct soap*, const char *, int, tt__OSDTextOptionsExtension *const*, const char *);
SOAP_FMAC3 tt__OSDTextOptionsExtension ** SOAP_FMAC4 soap_in_PointerTott__OSDTextOptionsExtension(struct soap*, const char*, tt__OSDTextOptionsExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__OSDTextOptionsExtension(struct soap*, tt__OSDTextOptionsExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__OSDTextOptionsExtension ** SOAP_FMAC4 soap_get_PointerTott__OSDTextOptionsExtension(struct soap*, tt__OSDTextOptionsExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__OSDColorOptions_DEFINED
#define SOAP_TYPE_PointerTott__OSDColorOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__OSDColorOptions(struct soap*, tt__OSDColorOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__OSDColorOptions(struct soap*, const char *, int, tt__OSDColorOptions *const*, const char *);
SOAP_FMAC3 tt__OSDColorOptions ** SOAP_FMAC4 soap_in_PointerTott__OSDColorOptions(struct soap*, const char*, tt__OSDColorOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__OSDColorOptions(struct soap*, tt__OSDColorOptions *const*, const char*, const char*);
SOAP_FMAC3 tt__OSDColorOptions ** SOAP_FMAC4 soap_get_PointerTott__OSDColorOptions(struct soap*, tt__OSDColorOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__OSDColorOptionsExtension_DEFINED
#define SOAP_TYPE_PointerTott__OSDColorOptionsExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__OSDColorOptionsExtension(struct soap*, tt__OSDColorOptionsExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__OSDColorOptionsExtension(struct soap*, const char *, int, tt__OSDColorOptionsExtension *const*, const char *);
SOAP_FMAC3 tt__OSDColorOptionsExtension ** SOAP_FMAC4 soap_in_PointerTott__OSDColorOptionsExtension(struct soap*, const char*, tt__OSDColorOptionsExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__OSDColorOptionsExtension(struct soap*, tt__OSDColorOptionsExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__OSDColorOptionsExtension ** SOAP_FMAC4 soap_get_PointerTott__OSDColorOptionsExtension(struct soap*, tt__OSDColorOptionsExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__ColorOptions_DEFINED
#define SOAP_TYPE_PointerTott__ColorOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ColorOptions(struct soap*, tt__ColorOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ColorOptions(struct soap*, const char *, int, tt__ColorOptions *const*, const char *);
SOAP_FMAC3 tt__ColorOptions ** SOAP_FMAC4 soap_in_PointerTott__ColorOptions(struct soap*, const char*, tt__ColorOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ColorOptions(struct soap*, tt__ColorOptions *const*, const char*, const char*);
SOAP_FMAC3 tt__ColorOptions ** SOAP_FMAC4 soap_get_PointerTott__ColorOptions(struct soap*, tt__ColorOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTostd__vectorTemplateOfPointerTott__ColorspaceRange_DEFINED
#define SOAP_TYPE_PointerTostd__vectorTemplateOfPointerTott__ColorspaceRange_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__vectorTemplateOfPointerTott__ColorspaceRange(struct soap*, std::vector<tt__ColorspaceRange *> *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__vectorTemplateOfPointerTott__ColorspaceRange(struct soap*, const char *, int, std::vector<tt__ColorspaceRange *> *const*, const char *);
SOAP_FMAC3 std::vector<tt__ColorspaceRange *> ** SOAP_FMAC4 soap_in_PointerTostd__vectorTemplateOfPointerTott__ColorspaceRange(struct soap*, const char*, std::vector<tt__ColorspaceRange *> **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__vectorTemplateOfPointerTott__ColorspaceRange(struct soap*, std::vector<tt__ColorspaceRange *> *const*, const char*, const char*);
SOAP_FMAC3 std::vector<tt__ColorspaceRange *> ** SOAP_FMAC4 soap_get_PointerTostd__vectorTemplateOfPointerTott__ColorspaceRange(struct soap*, std::vector<tt__ColorspaceRange *> **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__ColorspaceRange_DEFINED
#define SOAP_TYPE_PointerTott__ColorspaceRange_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ColorspaceRange(struct soap*, tt__ColorspaceRange *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ColorspaceRange(struct soap*, const char *, int, tt__ColorspaceRange *const*, const char *);
SOAP_FMAC3 tt__ColorspaceRange ** SOAP_FMAC4 soap_in_PointerTott__ColorspaceRange(struct soap*, const char*, tt__ColorspaceRange **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ColorspaceRange(struct soap*, tt__ColorspaceRange *const*, const char*, const char*);
SOAP_FMAC3 tt__ColorspaceRange ** SOAP_FMAC4 soap_get_PointerTott__ColorspaceRange(struct soap*, tt__ColorspaceRange **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTostd__vectorTemplateOfPointerTott__Color_DEFINED
#define SOAP_TYPE_PointerTostd__vectorTemplateOfPointerTott__Color_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__vectorTemplateOfPointerTott__Color(struct soap*, std::vector<tt__Color *> *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__vectorTemplateOfPointerTott__Color(struct soap*, const char *, int, std::vector<tt__Color *> *const*, const char *);
SOAP_FMAC3 std::vector<tt__Color *> ** SOAP_FMAC4 soap_in_PointerTostd__vectorTemplateOfPointerTott__Color(struct soap*, const char*, std::vector<tt__Color *> **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__vectorTemplateOfPointerTott__Color(struct soap*, std::vector<tt__Color *> *const*, const char*, const char*);
SOAP_FMAC3 std::vector<tt__Color *> ** SOAP_FMAC4 soap_get_PointerTostd__vectorTemplateOfPointerTott__Color(struct soap*, std::vector<tt__Color *> **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__OSDImgConfigurationExtension_DEFINED
#define SOAP_TYPE_PointerTott__OSDImgConfigurationExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__OSDImgConfigurationExtension(struct soap*, tt__OSDImgConfigurationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__OSDImgConfigurationExtension(struct soap*, const char *, int, tt__OSDImgConfigurationExtension *const*, const char *);
SOAP_FMAC3 tt__OSDImgConfigurationExtension ** SOAP_FMAC4 soap_in_PointerTott__OSDImgConfigurationExtension(struct soap*, const char*, tt__OSDImgConfigurationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__OSDImgConfigurationExtension(struct soap*, tt__OSDImgConfigurationExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__OSDImgConfigurationExtension ** SOAP_FMAC4 soap_get_PointerTott__OSDImgConfigurationExtension(struct soap*, tt__OSDImgConfigurationExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__OSDTextConfigurationExtension_DEFINED
#define SOAP_TYPE_PointerTott__OSDTextConfigurationExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__OSDTextConfigurationExtension(struct soap*, tt__OSDTextConfigurationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__OSDTextConfigurationExtension(struct soap*, const char *, int, tt__OSDTextConfigurationExtension *const*, const char *);
SOAP_FMAC3 tt__OSDTextConfigurationExtension ** SOAP_FMAC4 soap_in_PointerTott__OSDTextConfigurationExtension(struct soap*, const char*, tt__OSDTextConfigurationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__OSDTextConfigurationExtension(struct soap*, tt__OSDTextConfigurationExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__OSDTextConfigurationExtension ** SOAP_FMAC4 soap_get_PointerTott__OSDTextConfigurationExtension(struct soap*, tt__OSDTextConfigurationExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__OSDColor_DEFINED
#define SOAP_TYPE_PointerTott__OSDColor_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__OSDColor(struct soap*, tt__OSDColor *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__OSDColor(struct soap*, const char *, int, tt__OSDColor *const*, const char *);
SOAP_FMAC3 tt__OSDColor ** SOAP_FMAC4 soap_in_PointerTott__OSDColor(struct soap*, const char*, tt__OSDColor **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__OSDColor(struct soap*, tt__OSDColor *const*, const char*, const char*);
SOAP_FMAC3 tt__OSDColor ** SOAP_FMAC4 soap_get_PointerTott__OSDColor(struct soap*, tt__OSDColor **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__OSDPosConfigurationExtension_DEFINED
#define SOAP_TYPE_PointerTott__OSDPosConfigurationExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__OSDPosConfigurationExtension(struct soap*, tt__OSDPosConfigurationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__OSDPosConfigurationExtension(struct soap*, const char *, int, tt__OSDPosConfigurationExtension *const*, const char *);
SOAP_FMAC3 tt__OSDPosConfigurationExtension ** SOAP_FMAC4 soap_in_PointerTott__OSDPosConfigurationExtension(struct soap*, const char*, tt__OSDPosConfigurationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__OSDPosConfigurationExtension(struct soap*, tt__OSDPosConfigurationExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__OSDPosConfigurationExtension ** SOAP_FMAC4 soap_get_PointerTott__OSDPosConfigurationExtension(struct soap*, tt__OSDPosConfigurationExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__ProfileStatusExtension_DEFINED
#define SOAP_TYPE_PointerTott__ProfileStatusExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ProfileStatusExtension(struct soap*, tt__ProfileStatusExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ProfileStatusExtension(struct soap*, const char *, int, tt__ProfileStatusExtension *const*, const char *);
SOAP_FMAC3 tt__ProfileStatusExtension ** SOAP_FMAC4 soap_in_PointerTott__ProfileStatusExtension(struct soap*, const char*, tt__ProfileStatusExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ProfileStatusExtension(struct soap*, tt__ProfileStatusExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__ProfileStatusExtension ** SOAP_FMAC4 soap_get_PointerTott__ProfileStatusExtension(struct soap*, tt__ProfileStatusExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__ActiveConnection_DEFINED
#define SOAP_TYPE_PointerTott__ActiveConnection_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ActiveConnection(struct soap*, tt__ActiveConnection *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ActiveConnection(struct soap*, const char *, int, tt__ActiveConnection *const*, const char *);
SOAP_FMAC3 tt__ActiveConnection ** SOAP_FMAC4 soap_in_PointerTott__ActiveConnection(struct soap*, const char*, tt__ActiveConnection **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ActiveConnection(struct soap*, tt__ActiveConnection *const*, const char*, const char*);
SOAP_FMAC3 tt__ActiveConnection ** SOAP_FMAC4 soap_get_PointerTott__ActiveConnection(struct soap*, tt__ActiveConnection **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__AudioClassDescriptorExtension_DEFINED
#define SOAP_TYPE_PointerTott__AudioClassDescriptorExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__AudioClassDescriptorExtension(struct soap*, tt__AudioClassDescriptorExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__AudioClassDescriptorExtension(struct soap*, const char *, int, tt__AudioClassDescriptorExtension *const*, const char *);
SOAP_FMAC3 tt__AudioClassDescriptorExtension ** SOAP_FMAC4 soap_in_PointerTott__AudioClassDescriptorExtension(struct soap*, const char*, tt__AudioClassDescriptorExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__AudioClassDescriptorExtension(struct soap*, tt__AudioClassDescriptorExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__AudioClassDescriptorExtension ** SOAP_FMAC4 soap_get_PointerTott__AudioClassDescriptorExtension(struct soap*, tt__AudioClassDescriptorExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__AudioClassCandidate_DEFINED
#define SOAP_TYPE_PointerTott__AudioClassCandidate_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__AudioClassCandidate(struct soap*, tt__AudioClassCandidate *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__AudioClassCandidate(struct soap*, const char *, int, tt__AudioClassCandidate *const*, const char *);
SOAP_FMAC3 tt__AudioClassCandidate ** SOAP_FMAC4 soap_in_PointerTott__AudioClassCandidate(struct soap*, const char*, tt__AudioClassCandidate **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__AudioClassCandidate(struct soap*, tt__AudioClassCandidate *const*, const char*, const char*);
SOAP_FMAC3 tt__AudioClassCandidate ** SOAP_FMAC4 soap_get_PointerTott__AudioClassCandidate(struct soap*, tt__AudioClassCandidate **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__ActionEngineEventPayloadExtension_DEFINED
#define SOAP_TYPE_PointerTott__ActionEngineEventPayloadExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ActionEngineEventPayloadExtension(struct soap*, tt__ActionEngineEventPayloadExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ActionEngineEventPayloadExtension(struct soap*, const char *, int, tt__ActionEngineEventPayloadExtension *const*, const char *);
SOAP_FMAC3 tt__ActionEngineEventPayloadExtension ** SOAP_FMAC4 soap_in_PointerTott__ActionEngineEventPayloadExtension(struct soap*, const char*, tt__ActionEngineEventPayloadExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ActionEngineEventPayloadExtension(struct soap*, tt__ActionEngineEventPayloadExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__ActionEngineEventPayloadExtension ** SOAP_FMAC4 soap_get_PointerTott__ActionEngineEventPayloadExtension(struct soap*, tt__ActionEngineEventPayloadExtension **, const char*, const char*);
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Fault_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Fault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Fault(struct soap*, const char *, int, struct SOAP_ENV__Fault *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Fault ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault **, const char*, const char*);
#endif

#endif

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Envelope_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Envelope_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Envelope(struct soap*, struct SOAP_ENV__Envelope *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Envelope(struct soap*, const char *, int, struct SOAP_ENV__Envelope *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Envelope ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Envelope(struct soap*, const char*, struct SOAP_ENV__Envelope **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Envelope(struct soap*, struct SOAP_ENV__Envelope *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Envelope ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Envelope(struct soap*, struct SOAP_ENV__Envelope **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__AnalyticsState_DEFINED
#define SOAP_TYPE_PointerTott__AnalyticsState_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__AnalyticsState(struct soap*, tt__AnalyticsState *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__AnalyticsState(struct soap*, const char *, int, tt__AnalyticsState *const*, const char *);
SOAP_FMAC3 tt__AnalyticsState ** SOAP_FMAC4 soap_in_PointerTott__AnalyticsState(struct soap*, const char*, tt__AnalyticsState **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__AnalyticsState(struct soap*, tt__AnalyticsState *const*, const char*, const char*);
SOAP_FMAC3 tt__AnalyticsState ** SOAP_FMAC4 soap_get_PointerTott__AnalyticsState(struct soap*, tt__AnalyticsState **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__MetadataInputExtension_DEFINED
#define SOAP_TYPE_PointerTott__MetadataInputExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__MetadataInputExtension(struct soap*, tt__MetadataInputExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__MetadataInputExtension(struct soap*, const char *, int, tt__MetadataInputExtension *const*, const char *);
SOAP_FMAC3 tt__MetadataInputExtension ** SOAP_FMAC4 soap_in_PointerTott__MetadataInputExtension(struct soap*, const char*, tt__MetadataInputExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__MetadataInputExtension(struct soap*, tt__MetadataInputExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__MetadataInputExtension ** SOAP_FMAC4 soap_get_PointerTott__MetadataInputExtension(struct soap*, tt__MetadataInputExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__SourceIdentificationExtension_DEFINED
#define SOAP_TYPE_PointerTott__SourceIdentificationExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__SourceIdentificationExtension(struct soap*, tt__SourceIdentificationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__SourceIdentificationExtension(struct soap*, const char *, int, tt__SourceIdentificationExtension *const*, const char *);
SOAP_FMAC3 tt__SourceIdentificationExtension ** SOAP_FMAC4 soap_in_PointerTott__SourceIdentificationExtension(struct soap*, const char*, tt__SourceIdentificationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__SourceIdentificationExtension(struct soap*, tt__SourceIdentificationExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__SourceIdentificationExtension ** SOAP_FMAC4 soap_get_PointerTott__SourceIdentificationExtension(struct soap*, tt__SourceIdentificationExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__AnalyticsEngineInputInfoExtension_DEFINED
#define SOAP_TYPE_PointerTott__AnalyticsEngineInputInfoExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__AnalyticsEngineInputInfoExtension(struct soap*, tt__AnalyticsEngineInputInfoExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__AnalyticsEngineInputInfoExtension(struct soap*, const char *, int, tt__AnalyticsEngineInputInfoExtension *const*, const char *);
SOAP_FMAC3 tt__AnalyticsEngineInputInfoExtension ** SOAP_FMAC4 soap_in_PointerTott__AnalyticsEngineInputInfoExtension(struct soap*, const char*, tt__AnalyticsEngineInputInfoExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__AnalyticsEngineInputInfoExtension(struct soap*, tt__AnalyticsEngineInputInfoExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__AnalyticsEngineInputInfoExtension ** SOAP_FMAC4 soap_get_PointerTott__AnalyticsEngineInputInfoExtension(struct soap*, tt__AnalyticsEngineInputInfoExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__AnalyticsEngineInputInfo_DEFINED
#define SOAP_TYPE_PointerTott__AnalyticsEngineInputInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__AnalyticsEngineInputInfo(struct soap*, tt__AnalyticsEngineInputInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__AnalyticsEngineInputInfo(struct soap*, const char *, int, tt__AnalyticsEngineInputInfo *const*, const char *);
SOAP_FMAC3 tt__AnalyticsEngineInputInfo ** SOAP_FMAC4 soap_in_PointerTott__AnalyticsEngineInputInfo(struct soap*, const char*, tt__AnalyticsEngineInputInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__AnalyticsEngineInputInfo(struct soap*, tt__AnalyticsEngineInputInfo *const*, const char*, const char*);
SOAP_FMAC3 tt__AnalyticsEngineInputInfo ** SOAP_FMAC4 soap_get_PointerTott__AnalyticsEngineInputInfo(struct soap*, tt__AnalyticsEngineInputInfo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__AnalyticsDeviceEngineConfigurationExtension_DEFINED
#define SOAP_TYPE_PointerTott__AnalyticsDeviceEngineConfigurationExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__AnalyticsDeviceEngineConfigurationExtension(struct soap*, tt__AnalyticsDeviceEngineConfigurationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__AnalyticsDeviceEngineConfigurationExtension(struct soap*, const char *, int, tt__AnalyticsDeviceEngineConfigurationExtension *const*, const char *);
SOAP_FMAC3 tt__AnalyticsDeviceEngineConfigurationExtension ** SOAP_FMAC4 soap_in_PointerTott__AnalyticsDeviceEngineConfigurationExtension(struct soap*, const char*, tt__AnalyticsDeviceEngineConfigurationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__AnalyticsDeviceEngineConfigurationExtension(struct soap*, tt__AnalyticsDeviceEngineConfigurationExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__AnalyticsDeviceEngineConfigurationExtension ** SOAP_FMAC4 soap_get_PointerTott__AnalyticsDeviceEngineConfigurationExtension(struct soap*, tt__AnalyticsDeviceEngineConfigurationExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__EngineConfiguration_DEFINED
#define SOAP_TYPE_PointerTott__EngineConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__EngineConfiguration(struct soap*, tt__EngineConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__EngineConfiguration(struct soap*, const char *, int, tt__EngineConfiguration *const*, const char *);
SOAP_FMAC3 tt__EngineConfiguration ** SOAP_FMAC4 soap_in_PointerTott__EngineConfiguration(struct soap*, const char*, tt__EngineConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__EngineConfiguration(struct soap*, tt__EngineConfiguration *const*, const char*, const char*);
SOAP_FMAC3 tt__EngineConfiguration ** SOAP_FMAC4 soap_get_PointerTott__EngineConfiguration(struct soap*, tt__EngineConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__RecordingJobConfiguration_DEFINED
#define SOAP_TYPE_PointerTott__RecordingJobConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__RecordingJobConfiguration(struct soap*, tt__RecordingJobConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__RecordingJobConfiguration(struct soap*, const char *, int, tt__RecordingJobConfiguration *const*, const char *);
SOAP_FMAC3 tt__RecordingJobConfiguration ** SOAP_FMAC4 soap_in_PointerTott__RecordingJobConfiguration(struct soap*, const char*, tt__RecordingJobConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__RecordingJobConfiguration(struct soap*, tt__RecordingJobConfiguration *const*, const char*, const char*);
SOAP_FMAC3 tt__RecordingJobConfiguration ** SOAP_FMAC4 soap_get_PointerTott__RecordingJobConfiguration(struct soap*, tt__RecordingJobConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__RecordingJobStateTrack_DEFINED
#define SOAP_TYPE_PointerTott__RecordingJobStateTrack_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__RecordingJobStateTrack(struct soap*, tt__RecordingJobStateTrack *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__RecordingJobStateTrack(struct soap*, const char *, int, tt__RecordingJobStateTrack *const*, const char *);
SOAP_FMAC3 tt__RecordingJobStateTrack ** SOAP_FMAC4 soap_in_PointerTott__RecordingJobStateTrack(struct soap*, const char*, tt__RecordingJobStateTrack **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__RecordingJobStateTrack(struct soap*, tt__RecordingJobStateTrack *const*, const char*, const char*);
SOAP_FMAC3 tt__RecordingJobStateTrack ** SOAP_FMAC4 soap_get_PointerTott__RecordingJobStateTrack(struct soap*, tt__RecordingJobStateTrack **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__RecordingJobStateTracks_DEFINED
#define SOAP_TYPE_PointerTott__RecordingJobStateTracks_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__RecordingJobStateTracks(struct soap*, tt__RecordingJobStateTracks *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__RecordingJobStateTracks(struct soap*, const char *, int, tt__RecordingJobStateTracks *const*, const char *);
SOAP_FMAC3 tt__RecordingJobStateTracks ** SOAP_FMAC4 soap_in_PointerTott__RecordingJobStateTracks(struct soap*, const char*, tt__RecordingJobStateTracks **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__RecordingJobStateTracks(struct soap*, tt__RecordingJobStateTracks *const*, const char*, const char*);
SOAP_FMAC3 tt__RecordingJobStateTracks ** SOAP_FMAC4 soap_get_PointerTott__RecordingJobStateTracks(struct soap*, tt__RecordingJobStateTracks **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__RecordingJobStateInformationExtension_DEFINED
#define SOAP_TYPE_PointerTott__RecordingJobStateInformationExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__RecordingJobStateInformationExtension(struct soap*, tt__RecordingJobStateInformationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__RecordingJobStateInformationExtension(struct soap*, const char *, int, tt__RecordingJobStateInformationExtension *const*, const char *);
SOAP_FMAC3 tt__RecordingJobStateInformationExtension ** SOAP_FMAC4 soap_in_PointerTott__RecordingJobStateInformationExtension(struct soap*, const char*, tt__RecordingJobStateInformationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__RecordingJobStateInformationExtension(struct soap*, tt__RecordingJobStateInformationExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__RecordingJobStateInformationExtension ** SOAP_FMAC4 soap_get_PointerTott__RecordingJobStateInformationExtension(struct soap*, tt__RecordingJobStateInformationExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__RecordingJobStateSource_DEFINED
#define SOAP_TYPE_PointerTott__RecordingJobStateSource_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__RecordingJobStateSource(struct soap*, tt__RecordingJobStateSource *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__RecordingJobStateSource(struct soap*, const char *, int, tt__RecordingJobStateSource *const*, const char *);
SOAP_FMAC3 tt__RecordingJobStateSource ** SOAP_FMAC4 soap_in_PointerTott__RecordingJobStateSource(struct soap*, const char*, tt__RecordingJobStateSource **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__RecordingJobStateSource(struct soap*, tt__RecordingJobStateSource *const*, const char*, const char*);
SOAP_FMAC3 tt__RecordingJobStateSource ** SOAP_FMAC4 soap_get_PointerTott__RecordingJobStateSource(struct soap*, tt__RecordingJobStateSource **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__RecordingJobSourceExtension_DEFINED
#define SOAP_TYPE_PointerTott__RecordingJobSourceExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__RecordingJobSourceExtension(struct soap*, tt__RecordingJobSourceExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__RecordingJobSourceExtension(struct soap*, const char *, int, tt__RecordingJobSourceExtension *const*, const char *);
SOAP_FMAC3 tt__RecordingJobSourceExtension ** SOAP_FMAC4 soap_in_PointerTott__RecordingJobSourceExtension(struct soap*, const char*, tt__RecordingJobSourceExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__RecordingJobSourceExtension(struct soap*, tt__RecordingJobSourceExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__RecordingJobSourceExtension ** SOAP_FMAC4 soap_get_PointerTott__RecordingJobSourceExtension(struct soap*, tt__RecordingJobSourceExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__RecordingJobTrack_DEFINED
#define SOAP_TYPE_PointerTott__RecordingJobTrack_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__RecordingJobTrack(struct soap*, tt__RecordingJobTrack *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__RecordingJobTrack(struct soap*, const char *, int, tt__RecordingJobTrack *const*, const char *);
SOAP_FMAC3 tt__RecordingJobTrack ** SOAP_FMAC4 soap_in_PointerTott__RecordingJobTrack(struct soap*, const char*, tt__RecordingJobTrack **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__RecordingJobTrack(struct soap*, tt__RecordingJobTrack *const*, const char*, const char*);
SOAP_FMAC3 tt__RecordingJobTrack ** SOAP_FMAC4 soap_get_PointerTott__RecordingJobTrack(struct soap*, tt__RecordingJobTrack **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__RecordingJobConfigurationExtension_DEFINED
#define SOAP_TYPE_PointerTott__RecordingJobConfigurationExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__RecordingJobConfigurationExtension(struct soap*, tt__RecordingJobConfigurationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__RecordingJobConfigurationExtension(struct soap*, const char *, int, tt__RecordingJobConfigurationExtension *const*, const char *);
SOAP_FMAC3 tt__RecordingJobConfigurationExtension ** SOAP_FMAC4 soap_in_PointerTott__RecordingJobConfigurationExtension(struct soap*, const char*, tt__RecordingJobConfigurationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__RecordingJobConfigurationExtension(struct soap*, tt__RecordingJobConfigurationExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__RecordingJobConfigurationExtension ** SOAP_FMAC4 soap_get_PointerTott__RecordingJobConfigurationExtension(struct soap*, tt__RecordingJobConfigurationExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__RecordingJobSource_DEFINED
#define SOAP_TYPE_PointerTott__RecordingJobSource_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__RecordingJobSource(struct soap*, tt__RecordingJobSource *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__RecordingJobSource(struct soap*, const char *, int, tt__RecordingJobSource *const*, const char *);
SOAP_FMAC3 tt__RecordingJobSource ** SOAP_FMAC4 soap_in_PointerTott__RecordingJobSource(struct soap*, const char*, tt__RecordingJobSource **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__RecordingJobSource(struct soap*, tt__RecordingJobSource *const*, const char*, const char*);
SOAP_FMAC3 tt__RecordingJobSource ** SOAP_FMAC4 soap_get_PointerTott__RecordingJobSource(struct soap*, tt__RecordingJobSource **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__TrackConfiguration_DEFINED
#define SOAP_TYPE_PointerTott__TrackConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__TrackConfiguration(struct soap*, tt__TrackConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__TrackConfiguration(struct soap*, const char *, int, tt__TrackConfiguration *const*, const char *);
SOAP_FMAC3 tt__TrackConfiguration ** SOAP_FMAC4 soap_in_PointerTott__TrackConfiguration(struct soap*, const char*, tt__TrackConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__TrackConfiguration(struct soap*, tt__TrackConfiguration *const*, const char*, const char*);
SOAP_FMAC3 tt__TrackConfiguration ** SOAP_FMAC4 soap_get_PointerTott__TrackConfiguration(struct soap*, tt__TrackConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__GetTracksResponseItem_DEFINED
#define SOAP_TYPE_PointerTott__GetTracksResponseItem_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__GetTracksResponseItem(struct soap*, tt__GetTracksResponseItem *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__GetTracksResponseItem(struct soap*, const char *, int, tt__GetTracksResponseItem *const*, const char *);
SOAP_FMAC3 tt__GetTracksResponseItem ** SOAP_FMAC4 soap_in_PointerTott__GetTracksResponseItem(struct soap*, const char*, tt__GetTracksResponseItem **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__GetTracksResponseItem(struct soap*, tt__GetTracksResponseItem *const*, const char*, const char*);
SOAP_FMAC3 tt__GetTracksResponseItem ** SOAP_FMAC4 soap_get_PointerTott__GetTracksResponseItem(struct soap*, tt__GetTracksResponseItem **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__GetTracksResponseList_DEFINED
#define SOAP_TYPE_PointerTott__GetTracksResponseList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__GetTracksResponseList(struct soap*, tt__GetTracksResponseList *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__GetTracksResponseList(struct soap*, const char *, int, tt__GetTracksResponseList *const*, const char *);
SOAP_FMAC3 tt__GetTracksResponseList ** SOAP_FMAC4 soap_in_PointerTott__GetTracksResponseList(struct soap*, const char*, tt__GetTracksResponseList **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__GetTracksResponseList(struct soap*, tt__GetTracksResponseList *const*, const char*, const char*);
SOAP_FMAC3 tt__GetTracksResponseList ** SOAP_FMAC4 soap_get_PointerTott__GetTracksResponseList(struct soap*, tt__GetTracksResponseList **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__RecordingConfiguration_DEFINED
#define SOAP_TYPE_PointerTott__RecordingConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__RecordingConfiguration(struct soap*, tt__RecordingConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__RecordingConfiguration(struct soap*, const char *, int, tt__RecordingConfiguration *const*, const char *);
SOAP_FMAC3 tt__RecordingConfiguration ** SOAP_FMAC4 soap_in_PointerTott__RecordingConfiguration(struct soap*, const char*, tt__RecordingConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__RecordingConfiguration(struct soap*, tt__RecordingConfiguration *const*, const char*, const char*);
SOAP_FMAC3 tt__RecordingConfiguration ** SOAP_FMAC4 soap_get_PointerTott__RecordingConfiguration(struct soap*, tt__RecordingConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__TrackAttributesExtension_DEFINED
#define SOAP_TYPE_PointerTott__TrackAttributesExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__TrackAttributesExtension(struct soap*, tt__TrackAttributesExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__TrackAttributesExtension(struct soap*, const char *, int, tt__TrackAttributesExtension *const*, const char *);
SOAP_FMAC3 tt__TrackAttributesExtension ** SOAP_FMAC4 soap_in_PointerTott__TrackAttributesExtension(struct soap*, const char*, tt__TrackAttributesExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__TrackAttributesExtension(struct soap*, tt__TrackAttributesExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__TrackAttributesExtension ** SOAP_FMAC4 soap_get_PointerTott__TrackAttributesExtension(struct soap*, tt__TrackAttributesExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__MetadataAttributes_DEFINED
#define SOAP_TYPE_PointerTott__MetadataAttributes_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__MetadataAttributes(struct soap*, tt__MetadataAttributes *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__MetadataAttributes(struct soap*, const char *, int, tt__MetadataAttributes *const*, const char *);
SOAP_FMAC3 tt__MetadataAttributes ** SOAP_FMAC4 soap_in_PointerTott__MetadataAttributes(struct soap*, const char*, tt__MetadataAttributes **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__MetadataAttributes(struct soap*, tt__MetadataAttributes *const*, const char*, const char*);
SOAP_FMAC3 tt__MetadataAttributes ** SOAP_FMAC4 soap_get_PointerTott__MetadataAttributes(struct soap*, tt__MetadataAttributes **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__AudioAttributes_DEFINED
#define SOAP_TYPE_PointerTott__AudioAttributes_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__AudioAttributes(struct soap*, tt__AudioAttributes *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__AudioAttributes(struct soap*, const char *, int, tt__AudioAttributes *const*, const char *);
SOAP_FMAC3 tt__AudioAttributes ** SOAP_FMAC4 soap_in_PointerTott__AudioAttributes(struct soap*, const char*, tt__AudioAttributes **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__AudioAttributes(struct soap*, tt__AudioAttributes *const*, const char*, const char*);
SOAP_FMAC3 tt__AudioAttributes ** SOAP_FMAC4 soap_get_PointerTott__AudioAttributes(struct soap*, tt__AudioAttributes **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__VideoAttributes_DEFINED
#define SOAP_TYPE_PointerTott__VideoAttributes_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__VideoAttributes(struct soap*, tt__VideoAttributes *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__VideoAttributes(struct soap*, const char *, int, tt__VideoAttributes *const*, const char *);
SOAP_FMAC3 tt__VideoAttributes ** SOAP_FMAC4 soap_in_PointerTott__VideoAttributes(struct soap*, const char*, tt__VideoAttributes **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__VideoAttributes(struct soap*, tt__VideoAttributes *const*, const char*, const char*);
SOAP_FMAC3 tt__VideoAttributes ** SOAP_FMAC4 soap_get_PointerTott__VideoAttributes(struct soap*, tt__VideoAttributes **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__TrackAttributes_DEFINED
#define SOAP_TYPE_PointerTott__TrackAttributes_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__TrackAttributes(struct soap*, tt__TrackAttributes *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__TrackAttributes(struct soap*, const char *, int, tt__TrackAttributes *const*, const char *);
SOAP_FMAC3 tt__TrackAttributes ** SOAP_FMAC4 soap_in_PointerTott__TrackAttributes(struct soap*, const char*, tt__TrackAttributes **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__TrackAttributes(struct soap*, tt__TrackAttributes *const*, const char*, const char*);
SOAP_FMAC3 tt__TrackAttributes ** SOAP_FMAC4 soap_get_PointerTott__TrackAttributes(struct soap*, tt__TrackAttributes **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__TrackInformation_DEFINED
#define SOAP_TYPE_PointerTott__TrackInformation_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__TrackInformation(struct soap*, tt__TrackInformation *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__TrackInformation(struct soap*, const char *, int, tt__TrackInformation *const*, const char *);
SOAP_FMAC3 tt__TrackInformation ** SOAP_FMAC4 soap_in_PointerTott__TrackInformation(struct soap*, const char*, tt__TrackInformation **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__TrackInformation(struct soap*, tt__TrackInformation *const*, const char*, const char*);
SOAP_FMAC3 tt__TrackInformation ** SOAP_FMAC4 soap_get_PointerTott__TrackInformation(struct soap*, tt__TrackInformation **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__RecordingSourceInformation_DEFINED
#define SOAP_TYPE_PointerTott__RecordingSourceInformation_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__RecordingSourceInformation(struct soap*, tt__RecordingSourceInformation *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__RecordingSourceInformation(struct soap*, const char *, int, tt__RecordingSourceInformation *const*, const char *);
SOAP_FMAC3 tt__RecordingSourceInformation ** SOAP_FMAC4 soap_in_PointerTott__RecordingSourceInformation(struct soap*, const char*, tt__RecordingSourceInformation **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__RecordingSourceInformation(struct soap*, tt__RecordingSourceInformation *const*, const char*, const char*);
SOAP_FMAC3 tt__RecordingSourceInformation ** SOAP_FMAC4 soap_get_PointerTott__RecordingSourceInformation(struct soap*, tt__RecordingSourceInformation **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__FindMetadataResult_DEFINED
#define SOAP_TYPE_PointerTott__FindMetadataResult_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__FindMetadataResult(struct soap*, tt__FindMetadataResult *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__FindMetadataResult(struct soap*, const char *, int, tt__FindMetadataResult *const*, const char *);
SOAP_FMAC3 tt__FindMetadataResult ** SOAP_FMAC4 soap_in_PointerTott__FindMetadataResult(struct soap*, const char*, tt__FindMetadataResult **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__FindMetadataResult(struct soap*, tt__FindMetadataResult *const*, const char*, const char*);
SOAP_FMAC3 tt__FindMetadataResult ** SOAP_FMAC4 soap_get_PointerTott__FindMetadataResult(struct soap*, tt__FindMetadataResult **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__FindPTZPositionResult_DEFINED
#define SOAP_TYPE_PointerTott__FindPTZPositionResult_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__FindPTZPositionResult(struct soap*, tt__FindPTZPositionResult *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__FindPTZPositionResult(struct soap*, const char *, int, tt__FindPTZPositionResult *const*, const char *);
SOAP_FMAC3 tt__FindPTZPositionResult ** SOAP_FMAC4 soap_in_PointerTott__FindPTZPositionResult(struct soap*, const char*, tt__FindPTZPositionResult **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__FindPTZPositionResult(struct soap*, tt__FindPTZPositionResult *const*, const char*, const char*);
SOAP_FMAC3 tt__FindPTZPositionResult ** SOAP_FMAC4 soap_get_PointerTott__FindPTZPositionResult(struct soap*, tt__FindPTZPositionResult **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__FindEventResult_DEFINED
#define SOAP_TYPE_PointerTott__FindEventResult_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__FindEventResult(struct soap*, tt__FindEventResult *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__FindEventResult(struct soap*, const char *, int, tt__FindEventResult *const*, const char *);
SOAP_FMAC3 tt__FindEventResult ** SOAP_FMAC4 soap_in_PointerTott__FindEventResult(struct soap*, const char*, tt__FindEventResult **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__FindEventResult(struct soap*, tt__FindEventResult *const*, const char*, const char*);
SOAP_FMAC3 tt__FindEventResult ** SOAP_FMAC4 soap_get_PointerTott__FindEventResult(struct soap*, tt__FindEventResult **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__RecordingInformation_DEFINED
#define SOAP_TYPE_PointerTott__RecordingInformation_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__RecordingInformation(struct soap*, tt__RecordingInformation *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__RecordingInformation(struct soap*, const char *, int, tt__RecordingInformation *const*, const char *);
SOAP_FMAC3 tt__RecordingInformation ** SOAP_FMAC4 soap_in_PointerTott__RecordingInformation(struct soap*, const char*, tt__RecordingInformation **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__RecordingInformation(struct soap*, tt__RecordingInformation *const*, const char*, const char*);
SOAP_FMAC3 tt__RecordingInformation ** SOAP_FMAC4 soap_get_PointerTott__RecordingInformation(struct soap*, tt__RecordingInformation **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__SearchScopeExtension_DEFINED
#define SOAP_TYPE_PointerTott__SearchScopeExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__SearchScopeExtension(struct soap*, tt__SearchScopeExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__SearchScopeExtension(struct soap*, const char *, int, tt__SearchScopeExtension *const*, const char *);
SOAP_FMAC3 tt__SearchScopeExtension ** SOAP_FMAC4 soap_in_PointerTott__SearchScopeExtension(struct soap*, const char*, tt__SearchScopeExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__SearchScopeExtension(struct soap*, tt__SearchScopeExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__SearchScopeExtension ** SOAP_FMAC4 soap_get_PointerTott__SearchScopeExtension(struct soap*, tt__SearchScopeExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__XPathExpression_DEFINED
#define SOAP_TYPE_PointerTott__XPathExpression_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__XPathExpression(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__XPathExpression(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTott__XPathExpression(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__XPathExpression(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTott__XPathExpression(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__SourceReference_DEFINED
#define SOAP_TYPE_PointerTott__SourceReference_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__SourceReference(struct soap*, tt__SourceReference *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__SourceReference(struct soap*, const char *, int, tt__SourceReference *const*, const char *);
SOAP_FMAC3 tt__SourceReference ** SOAP_FMAC4 soap_in_PointerTott__SourceReference(struct soap*, const char*, tt__SourceReference **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__SourceReference(struct soap*, tt__SourceReference *const*, const char*, const char*);
SOAP_FMAC3 tt__SourceReference ** SOAP_FMAC4 soap_get_PointerTott__SourceReference(struct soap*, tt__SourceReference **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__StreamSetup_DEFINED
#define SOAP_TYPE_PointerTott__StreamSetup_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__StreamSetup(struct soap*, tt__StreamSetup *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__StreamSetup(struct soap*, const char *, int, tt__StreamSetup *const*, const char *);
SOAP_FMAC3 tt__StreamSetup ** SOAP_FMAC4 soap_in_PointerTott__StreamSetup(struct soap*, const char*, tt__StreamSetup **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__StreamSetup(struct soap*, tt__StreamSetup *const*, const char*, const char*);
SOAP_FMAC3 tt__StreamSetup ** SOAP_FMAC4 soap_get_PointerTott__StreamSetup(struct soap*, tt__StreamSetup **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__ReceiverConfiguration_DEFINED
#define SOAP_TYPE_PointerTott__ReceiverConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ReceiverConfiguration(struct soap*, tt__ReceiverConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ReceiverConfiguration(struct soap*, const char *, int, tt__ReceiverConfiguration *const*, const char *);
SOAP_FMAC3 tt__ReceiverConfiguration ** SOAP_FMAC4 soap_in_PointerTott__ReceiverConfiguration(struct soap*, const char*, tt__ReceiverConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ReceiverConfiguration(struct soap*, tt__ReceiverConfiguration *const*, const char*, const char*);
SOAP_FMAC3 tt__ReceiverConfiguration ** SOAP_FMAC4 soap_get_PointerTott__ReceiverConfiguration(struct soap*, tt__ReceiverConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PaneOptionExtension_DEFINED
#define SOAP_TYPE_PointerTott__PaneOptionExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PaneOptionExtension(struct soap*, tt__PaneOptionExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PaneOptionExtension(struct soap*, const char *, int, tt__PaneOptionExtension *const*, const char *);
SOAP_FMAC3 tt__PaneOptionExtension ** SOAP_FMAC4 soap_in_PointerTott__PaneOptionExtension(struct soap*, const char*, tt__PaneOptionExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PaneOptionExtension(struct soap*, tt__PaneOptionExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__PaneOptionExtension ** SOAP_FMAC4 soap_get_PointerTott__PaneOptionExtension(struct soap*, tt__PaneOptionExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__LayoutOptionsExtension_DEFINED
#define SOAP_TYPE_PointerTott__LayoutOptionsExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__LayoutOptionsExtension(struct soap*, tt__LayoutOptionsExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__LayoutOptionsExtension(struct soap*, const char *, int, tt__LayoutOptionsExtension *const*, const char *);
SOAP_FMAC3 tt__LayoutOptionsExtension ** SOAP_FMAC4 soap_in_PointerTott__LayoutOptionsExtension(struct soap*, const char*, tt__LayoutOptionsExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__LayoutOptionsExtension(struct soap*, tt__LayoutOptionsExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__LayoutOptionsExtension ** SOAP_FMAC4 soap_get_PointerTott__LayoutOptionsExtension(struct soap*, tt__LayoutOptionsExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PaneLayoutOptions_DEFINED
#define SOAP_TYPE_PointerTott__PaneLayoutOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PaneLayoutOptions(struct soap*, tt__PaneLayoutOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PaneLayoutOptions(struct soap*, const char *, int, tt__PaneLayoutOptions *const*, const char *);
SOAP_FMAC3 tt__PaneLayoutOptions ** SOAP_FMAC4 soap_in_PointerTott__PaneLayoutOptions(struct soap*, const char*, tt__PaneLayoutOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PaneLayoutOptions(struct soap*, tt__PaneLayoutOptions *const*, const char*, const char*);
SOAP_FMAC3 tt__PaneLayoutOptions ** SOAP_FMAC4 soap_get_PointerTott__PaneLayoutOptions(struct soap*, tt__PaneLayoutOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__VideoDecoderConfigurationOptions_DEFINED
#define SOAP_TYPE_PointerTott__VideoDecoderConfigurationOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__VideoDecoderConfigurationOptions(struct soap*, tt__VideoDecoderConfigurationOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__VideoDecoderConfigurationOptions(struct soap*, const char *, int, tt__VideoDecoderConfigurationOptions *const*, const char *);
SOAP_FMAC3 tt__VideoDecoderConfigurationOptions ** SOAP_FMAC4 soap_in_PointerTott__VideoDecoderConfigurationOptions(struct soap*, const char*, tt__VideoDecoderConfigurationOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__VideoDecoderConfigurationOptions(struct soap*, tt__VideoDecoderConfigurationOptions *const*, const char*, const char*);
SOAP_FMAC3 tt__VideoDecoderConfigurationOptions ** SOAP_FMAC4 soap_get_PointerTott__VideoDecoderConfigurationOptions(struct soap*, tt__VideoDecoderConfigurationOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__AudioDecoderConfigurationOptions_DEFINED
#define SOAP_TYPE_PointerTott__AudioDecoderConfigurationOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__AudioDecoderConfigurationOptions(struct soap*, tt__AudioDecoderConfigurationOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__AudioDecoderConfigurationOptions(struct soap*, const char *, int, tt__AudioDecoderConfigurationOptions *const*, const char *);
SOAP_FMAC3 tt__AudioDecoderConfigurationOptions ** SOAP_FMAC4 soap_in_PointerTott__AudioDecoderConfigurationOptions(struct soap*, const char*, tt__AudioDecoderConfigurationOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__AudioDecoderConfigurationOptions(struct soap*, tt__AudioDecoderConfigurationOptions *const*, const char*, const char*);
SOAP_FMAC3 tt__AudioDecoderConfigurationOptions ** SOAP_FMAC4 soap_get_PointerTott__AudioDecoderConfigurationOptions(struct soap*, tt__AudioDecoderConfigurationOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__AudioEncoderConfigurationOptions_DEFINED
#define SOAP_TYPE_PointerTott__AudioEncoderConfigurationOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__AudioEncoderConfigurationOptions(struct soap*, tt__AudioEncoderConfigurationOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__AudioEncoderConfigurationOptions(struct soap*, const char *, int, tt__AudioEncoderConfigurationOptions *const*, const char *);
SOAP_FMAC3 tt__AudioEncoderConfigurationOptions ** SOAP_FMAC4 soap_in_PointerTott__AudioEncoderConfigurationOptions(struct soap*, const char*, tt__AudioEncoderConfigurationOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__AudioEncoderConfigurationOptions(struct soap*, tt__AudioEncoderConfigurationOptions *const*, const char*, const char*);
SOAP_FMAC3 tt__AudioEncoderConfigurationOptions ** SOAP_FMAC4 soap_get_PointerTott__AudioEncoderConfigurationOptions(struct soap*, tt__AudioEncoderConfigurationOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__LayoutExtension_DEFINED
#define SOAP_TYPE_PointerTott__LayoutExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__LayoutExtension(struct soap*, tt__LayoutExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__LayoutExtension(struct soap*, const char *, int, tt__LayoutExtension *const*, const char *);
SOAP_FMAC3 tt__LayoutExtension ** SOAP_FMAC4 soap_in_PointerTott__LayoutExtension(struct soap*, const char*, tt__LayoutExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__LayoutExtension(struct soap*, tt__LayoutExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__LayoutExtension ** SOAP_FMAC4 soap_get_PointerTott__LayoutExtension(struct soap*, tt__LayoutExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PaneLayout_DEFINED
#define SOAP_TYPE_PointerTott__PaneLayout_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PaneLayout(struct soap*, tt__PaneLayout *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PaneLayout(struct soap*, const char *, int, tt__PaneLayout *const*, const char *);
SOAP_FMAC3 tt__PaneLayout ** SOAP_FMAC4 soap_in_PointerTott__PaneLayout(struct soap*, const char*, tt__PaneLayout **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PaneLayout(struct soap*, tt__PaneLayout *const*, const char*, const char*);
SOAP_FMAC3 tt__PaneLayout ** SOAP_FMAC4 soap_get_PointerTott__PaneLayout(struct soap*, tt__PaneLayout **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo__tt__union_EventStream_DEFINED
#define SOAP_TYPE_PointerTo__tt__union_EventStream_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__tt__union_EventStream(struct soap*, __tt__union_EventStream *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__tt__union_EventStream(struct soap*, const char *, int, __tt__union_EventStream *const*, const char *);
SOAP_FMAC3 __tt__union_EventStream ** SOAP_FMAC4 soap_in_PointerTo__tt__union_EventStream(struct soap*, const char*, __tt__union_EventStream **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__tt__union_EventStream(struct soap*, __tt__union_EventStream *const*, const char*, const char*);
SOAP_FMAC3 __tt__union_EventStream ** SOAP_FMAC4 soap_get_PointerTo__tt__union_EventStream(struct soap*, __tt__union_EventStream **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__EventStreamExtension_DEFINED
#define SOAP_TYPE_PointerTott__EventStreamExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__EventStreamExtension(struct soap*, tt__EventStreamExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__EventStreamExtension(struct soap*, const char *, int, tt__EventStreamExtension *const*, const char *);
SOAP_FMAC3 tt__EventStreamExtension ** SOAP_FMAC4 soap_in_PointerTott__EventStreamExtension(struct soap*, const char*, tt__EventStreamExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__EventStreamExtension(struct soap*, tt__EventStreamExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__EventStreamExtension ** SOAP_FMAC4 soap_get_PointerTott__EventStreamExtension(struct soap*, tt__EventStreamExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowsnt__NotificationMessageHolderType_DEFINED
#define SOAP_TYPE_PointerTowsnt__NotificationMessageHolderType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsnt__NotificationMessageHolderType(struct soap*, wsnt__NotificationMessageHolderType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsnt__NotificationMessageHolderType(struct soap*, const char *, int, wsnt__NotificationMessageHolderType *const*, const char *);
SOAP_FMAC3 wsnt__NotificationMessageHolderType ** SOAP_FMAC4 soap_in_PointerTowsnt__NotificationMessageHolderType(struct soap*, const char*, wsnt__NotificationMessageHolderType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsnt__NotificationMessageHolderType(struct soap*, wsnt__NotificationMessageHolderType *const*, const char*, const char*);
SOAP_FMAC3 wsnt__NotificationMessageHolderType ** SOAP_FMAC4 soap_get_PointerTowsnt__NotificationMessageHolderType(struct soap*, wsnt__NotificationMessageHolderType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo__tt__union_PTZStream_DEFINED
#define SOAP_TYPE_PointerTo__tt__union_PTZStream_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__tt__union_PTZStream(struct soap*, __tt__union_PTZStream *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__tt__union_PTZStream(struct soap*, const char *, int, __tt__union_PTZStream *const*, const char *);
SOAP_FMAC3 __tt__union_PTZStream ** SOAP_FMAC4 soap_in_PointerTo__tt__union_PTZStream(struct soap*, const char*, __tt__union_PTZStream **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__tt__union_PTZStream(struct soap*, __tt__union_PTZStream *const*, const char*, const char*);
SOAP_FMAC3 __tt__union_PTZStream ** SOAP_FMAC4 soap_get_PointerTo__tt__union_PTZStream(struct soap*, __tt__union_PTZStream **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZStreamExtension_DEFINED
#define SOAP_TYPE_PointerTott__PTZStreamExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZStreamExtension(struct soap*, tt__PTZStreamExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZStreamExtension(struct soap*, const char *, int, tt__PTZStreamExtension *const*, const char *);
SOAP_FMAC3 tt__PTZStreamExtension ** SOAP_FMAC4 soap_in_PointerTott__PTZStreamExtension(struct soap*, const char*, tt__PTZStreamExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZStreamExtension(struct soap*, tt__PTZStreamExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZStreamExtension ** SOAP_FMAC4 soap_get_PointerTott__PTZStreamExtension(struct soap*, tt__PTZStreamExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo__tt__union_VideoAnalyticsStream_DEFINED
#define SOAP_TYPE_PointerTo__tt__union_VideoAnalyticsStream_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__tt__union_VideoAnalyticsStream(struct soap*, __tt__union_VideoAnalyticsStream *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__tt__union_VideoAnalyticsStream(struct soap*, const char *, int, __tt__union_VideoAnalyticsStream *const*, const char *);
SOAP_FMAC3 __tt__union_VideoAnalyticsStream ** SOAP_FMAC4 soap_in_PointerTo__tt__union_VideoAnalyticsStream(struct soap*, const char*, __tt__union_VideoAnalyticsStream **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__tt__union_VideoAnalyticsStream(struct soap*, __tt__union_VideoAnalyticsStream *const*, const char*, const char*);
SOAP_FMAC3 __tt__union_VideoAnalyticsStream ** SOAP_FMAC4 soap_get_PointerTo__tt__union_VideoAnalyticsStream(struct soap*, __tt__union_VideoAnalyticsStream **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__VideoAnalyticsStreamExtension_DEFINED
#define SOAP_TYPE_PointerTott__VideoAnalyticsStreamExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__VideoAnalyticsStreamExtension(struct soap*, tt__VideoAnalyticsStreamExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__VideoAnalyticsStreamExtension(struct soap*, const char *, int, tt__VideoAnalyticsStreamExtension *const*, const char *);
SOAP_FMAC3 tt__VideoAnalyticsStreamExtension ** SOAP_FMAC4 soap_in_PointerTott__VideoAnalyticsStreamExtension(struct soap*, const char*, tt__VideoAnalyticsStreamExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__VideoAnalyticsStreamExtension(struct soap*, tt__VideoAnalyticsStreamExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__VideoAnalyticsStreamExtension ** SOAP_FMAC4 soap_get_PointerTott__VideoAnalyticsStreamExtension(struct soap*, tt__VideoAnalyticsStreamExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Frame_DEFINED
#define SOAP_TYPE_PointerTott__Frame_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Frame(struct soap*, tt__Frame *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Frame(struct soap*, const char *, int, tt__Frame *const*, const char *);
SOAP_FMAC3 tt__Frame ** SOAP_FMAC4 soap_in_PointerTott__Frame(struct soap*, const char*, tt__Frame **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Frame(struct soap*, tt__Frame *const*, const char*, const char*);
SOAP_FMAC3 tt__Frame ** SOAP_FMAC4 soap_get_PointerTott__Frame(struct soap*, tt__Frame **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__AudioAnalyticsStreamExtension_DEFINED
#define SOAP_TYPE_PointerTott__AudioAnalyticsStreamExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__AudioAnalyticsStreamExtension(struct soap*, tt__AudioAnalyticsStreamExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__AudioAnalyticsStreamExtension(struct soap*, const char *, int, tt__AudioAnalyticsStreamExtension *const*, const char *);
SOAP_FMAC3 tt__AudioAnalyticsStreamExtension ** SOAP_FMAC4 soap_in_PointerTott__AudioAnalyticsStreamExtension(struct soap*, const char*, tt__AudioAnalyticsStreamExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__AudioAnalyticsStreamExtension(struct soap*, tt__AudioAnalyticsStreamExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__AudioAnalyticsStreamExtension ** SOAP_FMAC4 soap_get_PointerTott__AudioAnalyticsStreamExtension(struct soap*, tt__AudioAnalyticsStreamExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__AudioDescriptor_DEFINED
#define SOAP_TYPE_PointerTott__AudioDescriptor_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__AudioDescriptor(struct soap*, tt__AudioDescriptor *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__AudioDescriptor(struct soap*, const char *, int, tt__AudioDescriptor *const*, const char *);
SOAP_FMAC3 tt__AudioDescriptor ** SOAP_FMAC4 soap_in_PointerTott__AudioDescriptor(struct soap*, const char*, tt__AudioDescriptor **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__AudioDescriptor(struct soap*, tt__AudioDescriptor *const*, const char*, const char*);
SOAP_FMAC3 tt__AudioDescriptor ** SOAP_FMAC4 soap_get_PointerTott__AudioDescriptor(struct soap*, tt__AudioDescriptor **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__MetadataStreamExtension2_DEFINED
#define SOAP_TYPE_PointerTott__MetadataStreamExtension2_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__MetadataStreamExtension2(struct soap*, tt__MetadataStreamExtension2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__MetadataStreamExtension2(struct soap*, const char *, int, tt__MetadataStreamExtension2 *const*, const char *);
SOAP_FMAC3 tt__MetadataStreamExtension2 ** SOAP_FMAC4 soap_in_PointerTott__MetadataStreamExtension2(struct soap*, const char*, tt__MetadataStreamExtension2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__MetadataStreamExtension2(struct soap*, tt__MetadataStreamExtension2 *const*, const char*, const char*);
SOAP_FMAC3 tt__MetadataStreamExtension2 ** SOAP_FMAC4 soap_get_PointerTott__MetadataStreamExtension2(struct soap*, tt__MetadataStreamExtension2 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__AudioAnalyticsStream_DEFINED
#define SOAP_TYPE_PointerTott__AudioAnalyticsStream_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__AudioAnalyticsStream(struct soap*, tt__AudioAnalyticsStream *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__AudioAnalyticsStream(struct soap*, const char *, int, tt__AudioAnalyticsStream *const*, const char *);
SOAP_FMAC3 tt__AudioAnalyticsStream ** SOAP_FMAC4 soap_in_PointerTott__AudioAnalyticsStream(struct soap*, const char*, tt__AudioAnalyticsStream **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__AudioAnalyticsStream(struct soap*, tt__AudioAnalyticsStream *const*, const char*, const char*);
SOAP_FMAC3 tt__AudioAnalyticsStream ** SOAP_FMAC4 soap_get_PointerTott__AudioAnalyticsStream(struct soap*, tt__AudioAnalyticsStream **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo__tt__union_MetadataStream_DEFINED
#define SOAP_TYPE_PointerTo__tt__union_MetadataStream_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__tt__union_MetadataStream(struct soap*, __tt__union_MetadataStream *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__tt__union_MetadataStream(struct soap*, const char *, int, __tt__union_MetadataStream *const*, const char *);
SOAP_FMAC3 __tt__union_MetadataStream ** SOAP_FMAC4 soap_in_PointerTo__tt__union_MetadataStream(struct soap*, const char*, __tt__union_MetadataStream **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__tt__union_MetadataStream(struct soap*, __tt__union_MetadataStream *const*, const char*, const char*);
SOAP_FMAC3 __tt__union_MetadataStream ** SOAP_FMAC4 soap_get_PointerTo__tt__union_MetadataStream(struct soap*, __tt__union_MetadataStream **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__MetadataStreamExtension_DEFINED
#define SOAP_TYPE_PointerTott__MetadataStreamExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__MetadataStreamExtension(struct soap*, tt__MetadataStreamExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__MetadataStreamExtension(struct soap*, const char *, int, tt__MetadataStreamExtension *const*, const char *);
SOAP_FMAC3 tt__MetadataStreamExtension ** SOAP_FMAC4 soap_in_PointerTott__MetadataStreamExtension(struct soap*, const char*, tt__MetadataStreamExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__MetadataStreamExtension(struct soap*, tt__MetadataStreamExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__MetadataStreamExtension ** SOAP_FMAC4 soap_get_PointerTott__MetadataStreamExtension(struct soap*, tt__MetadataStreamExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__EventStream_DEFINED
#define SOAP_TYPE_PointerTott__EventStream_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__EventStream(struct soap*, tt__EventStream *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__EventStream(struct soap*, const char *, int, tt__EventStream *const*, const char *);
SOAP_FMAC3 tt__EventStream ** SOAP_FMAC4 soap_in_PointerTott__EventStream(struct soap*, const char*, tt__EventStream **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__EventStream(struct soap*, tt__EventStream *const*, const char*, const char*);
SOAP_FMAC3 tt__EventStream ** SOAP_FMAC4 soap_get_PointerTott__EventStream(struct soap*, tt__EventStream **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZStream_DEFINED
#define SOAP_TYPE_PointerTott__PTZStream_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZStream(struct soap*, tt__PTZStream *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZStream(struct soap*, const char *, int, tt__PTZStream *const*, const char *);
SOAP_FMAC3 tt__PTZStream ** SOAP_FMAC4 soap_in_PointerTott__PTZStream(struct soap*, const char*, tt__PTZStream **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZStream(struct soap*, tt__PTZStream *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZStream ** SOAP_FMAC4 soap_get_PointerTott__PTZStream(struct soap*, tt__PTZStream **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__VideoAnalyticsStream_DEFINED
#define SOAP_TYPE_PointerTott__VideoAnalyticsStream_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__VideoAnalyticsStream(struct soap*, tt__VideoAnalyticsStream *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__VideoAnalyticsStream(struct soap*, const char *, int, tt__VideoAnalyticsStream *const*, const char *);
SOAP_FMAC3 tt__VideoAnalyticsStream ** SOAP_FMAC4 soap_in_PointerTott__VideoAnalyticsStream(struct soap*, const char*, tt__VideoAnalyticsStream **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__VideoAnalyticsStream(struct soap*, tt__VideoAnalyticsStream *const*, const char*, const char*);
SOAP_FMAC3 tt__VideoAnalyticsStream ** SOAP_FMAC4 soap_get_PointerTott__VideoAnalyticsStream(struct soap*, tt__VideoAnalyticsStream **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__MotionExpression_DEFINED
#define SOAP_TYPE_PointerTott__MotionExpression_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__MotionExpression(struct soap*, tt__MotionExpression *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__MotionExpression(struct soap*, const char *, int, tt__MotionExpression *const*, const char *);
SOAP_FMAC3 tt__MotionExpression ** SOAP_FMAC4 soap_in_PointerTott__MotionExpression(struct soap*, const char*, tt__MotionExpression **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__MotionExpression(struct soap*, tt__MotionExpression *const*, const char*, const char*);
SOAP_FMAC3 tt__MotionExpression ** SOAP_FMAC4 soap_get_PointerTott__MotionExpression(struct soap*, tt__MotionExpression **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PolylineArray_DEFINED
#define SOAP_TYPE_PointerTott__PolylineArray_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PolylineArray(struct soap*, tt__PolylineArray *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PolylineArray(struct soap*, const char *, int, tt__PolylineArray *const*, const char *);
SOAP_FMAC3 tt__PolylineArray ** SOAP_FMAC4 soap_in_PointerTott__PolylineArray(struct soap*, const char*, tt__PolylineArray **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PolylineArray(struct soap*, tt__PolylineArray *const*, const char*, const char*);
SOAP_FMAC3 tt__PolylineArray ** SOAP_FMAC4 soap_get_PointerTott__PolylineArray(struct soap*, tt__PolylineArray **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PolylineArrayExtension_DEFINED
#define SOAP_TYPE_PointerTott__PolylineArrayExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PolylineArrayExtension(struct soap*, tt__PolylineArrayExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PolylineArrayExtension(struct soap*, const char *, int, tt__PolylineArrayExtension *const*, const char *);
SOAP_FMAC3 tt__PolylineArrayExtension ** SOAP_FMAC4 soap_in_PointerTott__PolylineArrayExtension(struct soap*, const char*, tt__PolylineArrayExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PolylineArrayExtension(struct soap*, tt__PolylineArrayExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__PolylineArrayExtension ** SOAP_FMAC4 soap_get_PointerTott__PolylineArrayExtension(struct soap*, tt__PolylineArrayExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Polyline_DEFINED
#define SOAP_TYPE_PointerTott__Polyline_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Polyline(struct soap*, tt__Polyline *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Polyline(struct soap*, const char *, int, tt__Polyline *const*, const char *);
SOAP_FMAC3 tt__Polyline ** SOAP_FMAC4 soap_in_PointerTott__Polyline(struct soap*, const char*, tt__Polyline **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Polyline(struct soap*, tt__Polyline *const*, const char*, const char*);
SOAP_FMAC3 tt__Polyline ** SOAP_FMAC4 soap_get_PointerTott__Polyline(struct soap*, tt__Polyline **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__SupportedAnalyticsModulesExtension_DEFINED
#define SOAP_TYPE_PointerTott__SupportedAnalyticsModulesExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__SupportedAnalyticsModulesExtension(struct soap*, tt__SupportedAnalyticsModulesExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__SupportedAnalyticsModulesExtension(struct soap*, const char *, int, tt__SupportedAnalyticsModulesExtension *const*, const char *);
SOAP_FMAC3 tt__SupportedAnalyticsModulesExtension ** SOAP_FMAC4 soap_in_PointerTott__SupportedAnalyticsModulesExtension(struct soap*, const char*, tt__SupportedAnalyticsModulesExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__SupportedAnalyticsModulesExtension(struct soap*, tt__SupportedAnalyticsModulesExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__SupportedAnalyticsModulesExtension ** SOAP_FMAC4 soap_get_PointerTott__SupportedAnalyticsModulesExtension(struct soap*, tt__SupportedAnalyticsModulesExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__SupportedRulesExtension_DEFINED
#define SOAP_TYPE_PointerTott__SupportedRulesExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__SupportedRulesExtension(struct soap*, tt__SupportedRulesExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__SupportedRulesExtension(struct soap*, const char *, int, tt__SupportedRulesExtension *const*, const char *);
SOAP_FMAC3 tt__SupportedRulesExtension ** SOAP_FMAC4 soap_in_PointerTott__SupportedRulesExtension(struct soap*, const char*, tt__SupportedRulesExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__SupportedRulesExtension(struct soap*, tt__SupportedRulesExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__SupportedRulesExtension ** SOAP_FMAC4 soap_get_PointerTott__SupportedRulesExtension(struct soap*, tt__SupportedRulesExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__ConfigDescription_DEFINED
#define SOAP_TYPE_PointerTott__ConfigDescription_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ConfigDescription(struct soap*, tt__ConfigDescription *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ConfigDescription(struct soap*, const char *, int, tt__ConfigDescription *const*, const char *);
SOAP_FMAC3 tt__ConfigDescription ** SOAP_FMAC4 soap_in_PointerTott__ConfigDescription(struct soap*, const char*, tt__ConfigDescription **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ConfigDescription(struct soap*, tt__ConfigDescription *const*, const char*, const char*);
SOAP_FMAC3 tt__ConfigDescription ** SOAP_FMAC4 soap_get_PointerTott__ConfigDescription(struct soap*, tt__ConfigDescription **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__ConfigDescriptionExtension_DEFINED
#define SOAP_TYPE_PointerTott__ConfigDescriptionExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ConfigDescriptionExtension(struct soap*, tt__ConfigDescriptionExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ConfigDescriptionExtension(struct soap*, const char *, int, tt__ConfigDescriptionExtension *const*, const char *);
SOAP_FMAC3 tt__ConfigDescriptionExtension ** SOAP_FMAC4 soap_in_PointerTott__ConfigDescriptionExtension(struct soap*, const char*, tt__ConfigDescriptionExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ConfigDescriptionExtension(struct soap*, tt__ConfigDescriptionExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__ConfigDescriptionExtension ** SOAP_FMAC4 soap_get_PointerTott__ConfigDescriptionExtension(struct soap*, tt__ConfigDescriptionExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTostd__vectorTemplateOf_tt__ConfigDescription_Messages_DEFINED
#define SOAP_TYPE_PointerTostd__vectorTemplateOf_tt__ConfigDescription_Messages_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__vectorTemplateOf_tt__ConfigDescription_Messages(struct soap*, std::vector<_tt__ConfigDescription_Messages> *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__vectorTemplateOf_tt__ConfigDescription_Messages(struct soap*, const char *, int, std::vector<_tt__ConfigDescription_Messages> *const*, const char *);
SOAP_FMAC3 std::vector<_tt__ConfigDescription_Messages> ** SOAP_FMAC4 soap_in_PointerTostd__vectorTemplateOf_tt__ConfigDescription_Messages(struct soap*, const char*, std::vector<_tt__ConfigDescription_Messages> **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__vectorTemplateOf_tt__ConfigDescription_Messages(struct soap*, std::vector<_tt__ConfigDescription_Messages> *const*, const char*, const char*);
SOAP_FMAC3 std::vector<_tt__ConfigDescription_Messages> ** SOAP_FMAC4 soap_get_PointerTostd__vectorTemplateOf_tt__ConfigDescription_Messages(struct soap*, std::vector<_tt__ConfigDescription_Messages> **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__ItemList_DEFINED
#define SOAP_TYPE_PointerTott__ItemList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ItemList(struct soap*, tt__ItemList *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ItemList(struct soap*, const char *, int, tt__ItemList *const*, const char *);
SOAP_FMAC3 tt__ItemList ** SOAP_FMAC4 soap_in_PointerTott__ItemList(struct soap*, const char*, tt__ItemList **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ItemList(struct soap*, tt__ItemList *const*, const char*, const char*);
SOAP_FMAC3 tt__ItemList ** SOAP_FMAC4 soap_get_PointerTott__ItemList(struct soap*, tt__ItemList **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__RuleEngineConfigurationExtension_DEFINED
#define SOAP_TYPE_PointerTott__RuleEngineConfigurationExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__RuleEngineConfigurationExtension(struct soap*, tt__RuleEngineConfigurationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__RuleEngineConfigurationExtension(struct soap*, const char *, int, tt__RuleEngineConfigurationExtension *const*, const char *);
SOAP_FMAC3 tt__RuleEngineConfigurationExtension ** SOAP_FMAC4 soap_in_PointerTott__RuleEngineConfigurationExtension(struct soap*, const char*, tt__RuleEngineConfigurationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__RuleEngineConfigurationExtension(struct soap*, tt__RuleEngineConfigurationExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__RuleEngineConfigurationExtension ** SOAP_FMAC4 soap_get_PointerTott__RuleEngineConfigurationExtension(struct soap*, tt__RuleEngineConfigurationExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__AnalyticsEngineConfigurationExtension_DEFINED
#define SOAP_TYPE_PointerTott__AnalyticsEngineConfigurationExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__AnalyticsEngineConfigurationExtension(struct soap*, tt__AnalyticsEngineConfigurationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__AnalyticsEngineConfigurationExtension(struct soap*, const char *, int, tt__AnalyticsEngineConfigurationExtension *const*, const char *);
SOAP_FMAC3 tt__AnalyticsEngineConfigurationExtension ** SOAP_FMAC4 soap_in_PointerTott__AnalyticsEngineConfigurationExtension(struct soap*, const char*, tt__AnalyticsEngineConfigurationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__AnalyticsEngineConfigurationExtension(struct soap*, tt__AnalyticsEngineConfigurationExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__AnalyticsEngineConfigurationExtension ** SOAP_FMAC4 soap_get_PointerTott__AnalyticsEngineConfigurationExtension(struct soap*, tt__AnalyticsEngineConfigurationExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Config_DEFINED
#define SOAP_TYPE_PointerTott__Config_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Config(struct soap*, tt__Config *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Config(struct soap*, const char *, int, tt__Config *const*, const char *);
SOAP_FMAC3 tt__Config ** SOAP_FMAC4 soap_in_PointerTott__Config(struct soap*, const char*, tt__Config **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Config(struct soap*, tt__Config *const*, const char*, const char*);
SOAP_FMAC3 tt__Config ** SOAP_FMAC4 soap_get_PointerTott__Config(struct soap*, tt__Config **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__ObjectTreeExtension_DEFINED
#define SOAP_TYPE_PointerTott__ObjectTreeExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ObjectTreeExtension(struct soap*, tt__ObjectTreeExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ObjectTreeExtension(struct soap*, const char *, int, tt__ObjectTreeExtension *const*, const char *);
SOAP_FMAC3 tt__ObjectTreeExtension ** SOAP_FMAC4 soap_in_PointerTott__ObjectTreeExtension(struct soap*, const char*, tt__ObjectTreeExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ObjectTreeExtension(struct soap*, tt__ObjectTreeExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__ObjectTreeExtension ** SOAP_FMAC4 soap_get_PointerTott__ObjectTreeExtension(struct soap*, tt__ObjectTreeExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Merge_DEFINED
#define SOAP_TYPE_PointerTott__Merge_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Merge(struct soap*, tt__Merge *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Merge(struct soap*, const char *, int, tt__Merge *const*, const char *);
SOAP_FMAC3 tt__Merge ** SOAP_FMAC4 soap_in_PointerTott__Merge(struct soap*, const char*, tt__Merge **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Merge(struct soap*, tt__Merge *const*, const char*, const char*);
SOAP_FMAC3 tt__Merge ** SOAP_FMAC4 soap_get_PointerTott__Merge(struct soap*, tt__Merge **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Split_DEFINED
#define SOAP_TYPE_PointerTott__Split_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Split(struct soap*, tt__Split *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Split(struct soap*, const char *, int, tt__Split *const*, const char *);
SOAP_FMAC3 tt__Split ** SOAP_FMAC4 soap_in_PointerTott__Split(struct soap*, const char*, tt__Split **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Split(struct soap*, tt__Split *const*, const char*, const char*);
SOAP_FMAC3 tt__Split ** SOAP_FMAC4 soap_get_PointerTott__Split(struct soap*, tt__Split **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Rename_DEFINED
#define SOAP_TYPE_PointerTott__Rename_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Rename(struct soap*, tt__Rename *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Rename(struct soap*, const char *, int, tt__Rename *const*, const char *);
SOAP_FMAC3 tt__Rename ** SOAP_FMAC4 soap_in_PointerTott__Rename(struct soap*, const char*, tt__Rename **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Rename(struct soap*, tt__Rename *const*, const char*, const char*);
SOAP_FMAC3 tt__Rename ** SOAP_FMAC4 soap_get_PointerTott__Rename(struct soap*, tt__Rename **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__BehaviourExtension_DEFINED
#define SOAP_TYPE_PointerTott__BehaviourExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__BehaviourExtension(struct soap*, tt__BehaviourExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__BehaviourExtension(struct soap*, const char *, int, tt__BehaviourExtension *const*, const char *);
SOAP_FMAC3 tt__BehaviourExtension ** SOAP_FMAC4 soap_in_PointerTott__BehaviourExtension(struct soap*, const char*, tt__BehaviourExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__BehaviourExtension(struct soap*, tt__BehaviourExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__BehaviourExtension ** SOAP_FMAC4 soap_get_PointerTott__BehaviourExtension(struct soap*, tt__BehaviourExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tt__Behaviour_Idle_DEFINED
#define SOAP_TYPE_PointerTo_tt__Behaviour_Idle_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tt__Behaviour_Idle(struct soap*, _tt__Behaviour_Idle *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tt__Behaviour_Idle(struct soap*, const char *, int, _tt__Behaviour_Idle *const*, const char *);
SOAP_FMAC3 _tt__Behaviour_Idle ** SOAP_FMAC4 soap_in_PointerTo_tt__Behaviour_Idle(struct soap*, const char*, _tt__Behaviour_Idle **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tt__Behaviour_Idle(struct soap*, _tt__Behaviour_Idle *const*, const char*, const char*);
SOAP_FMAC3 _tt__Behaviour_Idle ** SOAP_FMAC4 soap_get_PointerTo_tt__Behaviour_Idle(struct soap*, _tt__Behaviour_Idle **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tt__Behaviour_Removed_DEFINED
#define SOAP_TYPE_PointerTo_tt__Behaviour_Removed_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tt__Behaviour_Removed(struct soap*, _tt__Behaviour_Removed *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tt__Behaviour_Removed(struct soap*, const char *, int, _tt__Behaviour_Removed *const*, const char *);
SOAP_FMAC3 _tt__Behaviour_Removed ** SOAP_FMAC4 soap_in_PointerTo_tt__Behaviour_Removed(struct soap*, const char*, _tt__Behaviour_Removed **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tt__Behaviour_Removed(struct soap*, _tt__Behaviour_Removed *const*, const char*, const char*);
SOAP_FMAC3 _tt__Behaviour_Removed ** SOAP_FMAC4 soap_get_PointerTo_tt__Behaviour_Removed(struct soap*, _tt__Behaviour_Removed **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxsd__integer_DEFINED
#define SOAP_TYPE_PointerToxsd__integer_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__integer(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__integer(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__integer(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__integer(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__integer(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__ObjectId_DEFINED
#define SOAP_TYPE_PointerTott__ObjectId_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ObjectId(struct soap*, tt__ObjectId *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ObjectId(struct soap*, const char *, int, tt__ObjectId *const*, const char *);
SOAP_FMAC3 tt__ObjectId ** SOAP_FMAC4 soap_in_PointerTott__ObjectId(struct soap*, const char*, tt__ObjectId **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ObjectId(struct soap*, tt__ObjectId *const*, const char*, const char*);
SOAP_FMAC3 tt__ObjectId ** SOAP_FMAC4 soap_get_PointerTott__ObjectId(struct soap*, tt__ObjectId **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__FrameExtension2_DEFINED
#define SOAP_TYPE_PointerTott__FrameExtension2_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__FrameExtension2(struct soap*, tt__FrameExtension2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__FrameExtension2(struct soap*, const char *, int, tt__FrameExtension2 *const*, const char *);
SOAP_FMAC3 tt__FrameExtension2 ** SOAP_FMAC4 soap_in_PointerTott__FrameExtension2(struct soap*, const char*, tt__FrameExtension2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__FrameExtension2(struct soap*, tt__FrameExtension2 *const*, const char*, const char*);
SOAP_FMAC3 tt__FrameExtension2 ** SOAP_FMAC4 soap_get_PointerTott__FrameExtension2(struct soap*, tt__FrameExtension2 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__MotionInCells_DEFINED
#define SOAP_TYPE_PointerTott__MotionInCells_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__MotionInCells(struct soap*, tt__MotionInCells *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__MotionInCells(struct soap*, const char *, int, tt__MotionInCells *const*, const char *);
SOAP_FMAC3 tt__MotionInCells ** SOAP_FMAC4 soap_in_PointerTott__MotionInCells(struct soap*, const char*, tt__MotionInCells **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__MotionInCells(struct soap*, tt__MotionInCells *const*, const char*, const char*);
SOAP_FMAC3 tt__MotionInCells ** SOAP_FMAC4 soap_get_PointerTott__MotionInCells(struct soap*, tt__MotionInCells **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__FrameExtension_DEFINED
#define SOAP_TYPE_PointerTott__FrameExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__FrameExtension(struct soap*, tt__FrameExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__FrameExtension(struct soap*, const char *, int, tt__FrameExtension *const*, const char *);
SOAP_FMAC3 tt__FrameExtension ** SOAP_FMAC4 soap_in_PointerTott__FrameExtension(struct soap*, const char*, tt__FrameExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__FrameExtension(struct soap*, tt__FrameExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__FrameExtension ** SOAP_FMAC4 soap_get_PointerTott__FrameExtension(struct soap*, tt__FrameExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__ObjectTree_DEFINED
#define SOAP_TYPE_PointerTott__ObjectTree_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ObjectTree(struct soap*, tt__ObjectTree *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ObjectTree(struct soap*, const char *, int, tt__ObjectTree *const*, const char *);
SOAP_FMAC3 tt__ObjectTree ** SOAP_FMAC4 soap_in_PointerTott__ObjectTree(struct soap*, const char*, tt__ObjectTree **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ObjectTree(struct soap*, tt__ObjectTree *const*, const char*, const char*);
SOAP_FMAC3 tt__ObjectTree ** SOAP_FMAC4 soap_get_PointerTott__ObjectTree(struct soap*, tt__ObjectTree **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Object_DEFINED
#define SOAP_TYPE_PointerTott__Object_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Object(struct soap*, tt__Object *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Object(struct soap*, const char *, int, tt__Object *const*, const char *);
SOAP_FMAC3 tt__Object ** SOAP_FMAC4 soap_in_PointerTott__Object(struct soap*, const char*, tt__Object **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Object(struct soap*, tt__Object *const*, const char*, const char*);
SOAP_FMAC3 tt__Object ** SOAP_FMAC4 soap_get_PointerTott__Object(struct soap*, tt__Object **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZStatus_DEFINED
#define SOAP_TYPE_PointerTott__PTZStatus_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZStatus(struct soap*, tt__PTZStatus *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZStatus(struct soap*, const char *, int, tt__PTZStatus *const*, const char *);
SOAP_FMAC3 tt__PTZStatus ** SOAP_FMAC4 soap_in_PointerTott__PTZStatus(struct soap*, const char*, tt__PTZStatus **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZStatus(struct soap*, tt__PTZStatus *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZStatus ** SOAP_FMAC4 soap_get_PointerTott__PTZStatus(struct soap*, tt__PTZStatus **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__TransformationExtension_DEFINED
#define SOAP_TYPE_PointerTott__TransformationExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__TransformationExtension(struct soap*, tt__TransformationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__TransformationExtension(struct soap*, const char *, int, tt__TransformationExtension *const*, const char *);
SOAP_FMAC3 tt__TransformationExtension ** SOAP_FMAC4 soap_in_PointerTott__TransformationExtension(struct soap*, const char*, tt__TransformationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__TransformationExtension(struct soap*, tt__TransformationExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__TransformationExtension ** SOAP_FMAC4 soap_get_PointerTott__TransformationExtension(struct soap*, tt__TransformationExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__ClassDescriptorExtension2_DEFINED
#define SOAP_TYPE_PointerTott__ClassDescriptorExtension2_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ClassDescriptorExtension2(struct soap*, tt__ClassDescriptorExtension2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ClassDescriptorExtension2(struct soap*, const char *, int, tt__ClassDescriptorExtension2 *const*, const char *);
SOAP_FMAC3 tt__ClassDescriptorExtension2 ** SOAP_FMAC4 soap_in_PointerTott__ClassDescriptorExtension2(struct soap*, const char*, tt__ClassDescriptorExtension2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ClassDescriptorExtension2(struct soap*, tt__ClassDescriptorExtension2 *const*, const char*, const char*);
SOAP_FMAC3 tt__ClassDescriptorExtension2 ** SOAP_FMAC4 soap_get_PointerTott__ClassDescriptorExtension2(struct soap*, tt__ClassDescriptorExtension2 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__OtherType_DEFINED
#define SOAP_TYPE_PointerTott__OtherType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__OtherType(struct soap*, tt__OtherType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__OtherType(struct soap*, const char *, int, tt__OtherType *const*, const char *);
SOAP_FMAC3 tt__OtherType ** SOAP_FMAC4 soap_in_PointerTott__OtherType(struct soap*, const char*, tt__OtherType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__OtherType(struct soap*, tt__OtherType *const*, const char*, const char*);
SOAP_FMAC3 tt__OtherType ** SOAP_FMAC4 soap_get_PointerTott__OtherType(struct soap*, tt__OtherType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__ClassDescriptorExtension_DEFINED
#define SOAP_TYPE_PointerTott__ClassDescriptorExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ClassDescriptorExtension(struct soap*, tt__ClassDescriptorExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ClassDescriptorExtension(struct soap*, const char *, int, tt__ClassDescriptorExtension *const*, const char *);
SOAP_FMAC3 tt__ClassDescriptorExtension ** SOAP_FMAC4 soap_in_PointerTott__ClassDescriptorExtension(struct soap*, const char*, tt__ClassDescriptorExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ClassDescriptorExtension(struct soap*, tt__ClassDescriptorExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__ClassDescriptorExtension ** SOAP_FMAC4 soap_get_PointerTott__ClassDescriptorExtension(struct soap*, tt__ClassDescriptorExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTostd__vectorTemplateOf_tt__ClassDescriptor_ClassCandidate_DEFINED
#define SOAP_TYPE_PointerTostd__vectorTemplateOf_tt__ClassDescriptor_ClassCandidate_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__vectorTemplateOf_tt__ClassDescriptor_ClassCandidate(struct soap*, std::vector<_tt__ClassDescriptor_ClassCandidate> *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__vectorTemplateOf_tt__ClassDescriptor_ClassCandidate(struct soap*, const char *, int, std::vector<_tt__ClassDescriptor_ClassCandidate> *const*, const char *);
SOAP_FMAC3 std::vector<_tt__ClassDescriptor_ClassCandidate> ** SOAP_FMAC4 soap_in_PointerTostd__vectorTemplateOf_tt__ClassDescriptor_ClassCandidate(struct soap*, const char*, std::vector<_tt__ClassDescriptor_ClassCandidate> **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__vectorTemplateOf_tt__ClassDescriptor_ClassCandidate(struct soap*, std::vector<_tt__ClassDescriptor_ClassCandidate> *const*, const char*, const char*);
SOAP_FMAC3 std::vector<_tt__ClassDescriptor_ClassCandidate> ** SOAP_FMAC4 soap_get_PointerTostd__vectorTemplateOf_tt__ClassDescriptor_ClassCandidate(struct soap*, std::vector<_tt__ClassDescriptor_ClassCandidate> **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__ColorDescriptorExtension_DEFINED
#define SOAP_TYPE_PointerTott__ColorDescriptorExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ColorDescriptorExtension(struct soap*, tt__ColorDescriptorExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ColorDescriptorExtension(struct soap*, const char *, int, tt__ColorDescriptorExtension *const*, const char *);
SOAP_FMAC3 tt__ColorDescriptorExtension ** SOAP_FMAC4 soap_in_PointerTott__ColorDescriptorExtension(struct soap*, const char*, tt__ColorDescriptorExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ColorDescriptorExtension(struct soap*, tt__ColorDescriptorExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__ColorDescriptorExtension ** SOAP_FMAC4 soap_get_PointerTott__ColorDescriptorExtension(struct soap*, tt__ColorDescriptorExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTostd__vectorTemplateOf_tt__ColorDescriptor_ColorCluster_DEFINED
#define SOAP_TYPE_PointerTostd__vectorTemplateOf_tt__ColorDescriptor_ColorCluster_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__vectorTemplateOf_tt__ColorDescriptor_ColorCluster(struct soap*, std::vector<_tt__ColorDescriptor_ColorCluster> *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__vectorTemplateOf_tt__ColorDescriptor_ColorCluster(struct soap*, const char *, int, std::vector<_tt__ColorDescriptor_ColorCluster> *const*, const char *);
SOAP_FMAC3 std::vector<_tt__ColorDescriptor_ColorCluster> ** SOAP_FMAC4 soap_in_PointerTostd__vectorTemplateOf_tt__ColorDescriptor_ColorCluster(struct soap*, const char*, std::vector<_tt__ColorDescriptor_ColorCluster> **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__vectorTemplateOf_tt__ColorDescriptor_ColorCluster(struct soap*, std::vector<_tt__ColorDescriptor_ColorCluster> *const*, const char*, const char*);
SOAP_FMAC3 std::vector<_tt__ColorDescriptor_ColorCluster> ** SOAP_FMAC4 soap_get_PointerTostd__vectorTemplateOf_tt__ColorDescriptor_ColorCluster(struct soap*, std::vector<_tt__ColorDescriptor_ColorCluster> **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__ColorCovariance_DEFINED
#define SOAP_TYPE_PointerTott__ColorCovariance_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ColorCovariance(struct soap*, tt__ColorCovariance *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ColorCovariance(struct soap*, const char *, int, tt__ColorCovariance *const*, const char *);
SOAP_FMAC3 tt__ColorCovariance ** SOAP_FMAC4 soap_in_PointerTott__ColorCovariance(struct soap*, const char*, tt__ColorCovariance **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ColorCovariance(struct soap*, tt__ColorCovariance *const*, const char*, const char*);
SOAP_FMAC3 tt__ColorCovariance ** SOAP_FMAC4 soap_get_PointerTott__ColorCovariance(struct soap*, tt__ColorCovariance **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Color_DEFINED
#define SOAP_TYPE_PointerTott__Color_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Color(struct soap*, tt__Color *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Color(struct soap*, const char *, int, tt__Color *const*, const char *);
SOAP_FMAC3 tt__Color ** SOAP_FMAC4 soap_in_PointerTott__Color(struct soap*, const char*, tt__Color **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Color(struct soap*, tt__Color *const*, const char*, const char*);
SOAP_FMAC3 tt__Color ** SOAP_FMAC4 soap_get_PointerTott__Color(struct soap*, tt__Color **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__ShapeDescriptorExtension_DEFINED
#define SOAP_TYPE_PointerTott__ShapeDescriptorExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ShapeDescriptorExtension(struct soap*, tt__ShapeDescriptorExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ShapeDescriptorExtension(struct soap*, const char *, int, tt__ShapeDescriptorExtension *const*, const char *);
SOAP_FMAC3 tt__ShapeDescriptorExtension ** SOAP_FMAC4 soap_in_PointerTott__ShapeDescriptorExtension(struct soap*, const char*, tt__ShapeDescriptorExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ShapeDescriptorExtension(struct soap*, tt__ShapeDescriptorExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__ShapeDescriptorExtension ** SOAP_FMAC4 soap_get_PointerTott__ShapeDescriptorExtension(struct soap*, tt__ShapeDescriptorExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Polygon_DEFINED
#define SOAP_TYPE_PointerTott__Polygon_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Polygon(struct soap*, tt__Polygon *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Polygon(struct soap*, const char *, int, tt__Polygon *const*, const char *);
SOAP_FMAC3 tt__Polygon ** SOAP_FMAC4 soap_in_PointerTott__Polygon(struct soap*, const char*, tt__Polygon **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Polygon(struct soap*, tt__Polygon *const*, const char*, const char*);
SOAP_FMAC3 tt__Polygon ** SOAP_FMAC4 soap_get_PointerTott__Polygon(struct soap*, tt__Polygon **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__AppearanceExtension_DEFINED
#define SOAP_TYPE_PointerTott__AppearanceExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__AppearanceExtension(struct soap*, tt__AppearanceExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__AppearanceExtension(struct soap*, const char *, int, tt__AppearanceExtension *const*, const char *);
SOAP_FMAC3 tt__AppearanceExtension ** SOAP_FMAC4 soap_in_PointerTott__AppearanceExtension(struct soap*, const char*, tt__AppearanceExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__AppearanceExtension(struct soap*, tt__AppearanceExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__AppearanceExtension ** SOAP_FMAC4 soap_get_PointerTott__AppearanceExtension(struct soap*, tt__AppearanceExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__ClassDescriptor_DEFINED
#define SOAP_TYPE_PointerTott__ClassDescriptor_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ClassDescriptor(struct soap*, tt__ClassDescriptor *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ClassDescriptor(struct soap*, const char *, int, tt__ClassDescriptor *const*, const char *);
SOAP_FMAC3 tt__ClassDescriptor ** SOAP_FMAC4 soap_in_PointerTott__ClassDescriptor(struct soap*, const char*, tt__ClassDescriptor **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ClassDescriptor(struct soap*, tt__ClassDescriptor *const*, const char*, const char*);
SOAP_FMAC3 tt__ClassDescriptor ** SOAP_FMAC4 soap_get_PointerTott__ClassDescriptor(struct soap*, tt__ClassDescriptor **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__ColorDescriptor_DEFINED
#define SOAP_TYPE_PointerTott__ColorDescriptor_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ColorDescriptor(struct soap*, tt__ColorDescriptor *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ColorDescriptor(struct soap*, const char *, int, tt__ColorDescriptor *const*, const char *);
SOAP_FMAC3 tt__ColorDescriptor ** SOAP_FMAC4 soap_in_PointerTott__ColorDescriptor(struct soap*, const char*, tt__ColorDescriptor **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ColorDescriptor(struct soap*, tt__ColorDescriptor *const*, const char*, const char*);
SOAP_FMAC3 tt__ColorDescriptor ** SOAP_FMAC4 soap_get_PointerTott__ColorDescriptor(struct soap*, tt__ColorDescriptor **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__ShapeDescriptor_DEFINED
#define SOAP_TYPE_PointerTott__ShapeDescriptor_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ShapeDescriptor(struct soap*, tt__ShapeDescriptor *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ShapeDescriptor(struct soap*, const char *, int, tt__ShapeDescriptor *const*, const char *);
SOAP_FMAC3 tt__ShapeDescriptor ** SOAP_FMAC4 soap_in_PointerTott__ShapeDescriptor(struct soap*, const char*, tt__ShapeDescriptor **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ShapeDescriptor(struct soap*, tt__ShapeDescriptor *const*, const char*, const char*);
SOAP_FMAC3 tt__ShapeDescriptor ** SOAP_FMAC4 soap_get_PointerTott__ShapeDescriptor(struct soap*, tt__ShapeDescriptor **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Transformation_DEFINED
#define SOAP_TYPE_PointerTott__Transformation_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Transformation(struct soap*, tt__Transformation *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Transformation(struct soap*, const char *, int, tt__Transformation *const*, const char *);
SOAP_FMAC3 tt__Transformation ** SOAP_FMAC4 soap_in_PointerTott__Transformation(struct soap*, const char*, tt__Transformation **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Transformation(struct soap*, tt__Transformation *const*, const char*, const char*);
SOAP_FMAC3 tt__Transformation ** SOAP_FMAC4 soap_get_PointerTott__Transformation(struct soap*, tt__Transformation **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Vector_DEFINED
#define SOAP_TYPE_PointerTott__Vector_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Vector(struct soap*, tt__Vector *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Vector(struct soap*, const char *, int, tt__Vector *const*, const char *);
SOAP_FMAC3 tt__Vector ** SOAP_FMAC4 soap_in_PointerTott__Vector(struct soap*, const char*, tt__Vector **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Vector(struct soap*, tt__Vector *const*, const char*, const char*);
SOAP_FMAC3 tt__Vector ** SOAP_FMAC4 soap_get_PointerTott__Vector(struct soap*, tt__Vector **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__ItemListDescriptionExtension_DEFINED
#define SOAP_TYPE_PointerTott__ItemListDescriptionExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ItemListDescriptionExtension(struct soap*, tt__ItemListDescriptionExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ItemListDescriptionExtension(struct soap*, const char *, int, tt__ItemListDescriptionExtension *const*, const char *);
SOAP_FMAC3 tt__ItemListDescriptionExtension ** SOAP_FMAC4 soap_in_PointerTott__ItemListDescriptionExtension(struct soap*, const char*, tt__ItemListDescriptionExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ItemListDescriptionExtension(struct soap*, tt__ItemListDescriptionExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__ItemListDescriptionExtension ** SOAP_FMAC4 soap_get_PointerTott__ItemListDescriptionExtension(struct soap*, tt__ItemListDescriptionExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTostd__vectorTemplateOf_tt__ItemListDescription_ElementItemDescription_DEFINED
#define SOAP_TYPE_PointerTostd__vectorTemplateOf_tt__ItemListDescription_ElementItemDescription_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__vectorTemplateOf_tt__ItemListDescription_ElementItemDescription(struct soap*, std::vector<_tt__ItemListDescription_ElementItemDescription> *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__vectorTemplateOf_tt__ItemListDescription_ElementItemDescription(struct soap*, const char *, int, std::vector<_tt__ItemListDescription_ElementItemDescription> *const*, const char *);
SOAP_FMAC3 std::vector<_tt__ItemListDescription_ElementItemDescription> ** SOAP_FMAC4 soap_in_PointerTostd__vectorTemplateOf_tt__ItemListDescription_ElementItemDescription(struct soap*, const char*, std::vector<_tt__ItemListDescription_ElementItemDescription> **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__vectorTemplateOf_tt__ItemListDescription_ElementItemDescription(struct soap*, std::vector<_tt__ItemListDescription_ElementItemDescription> *const*, const char*, const char*);
SOAP_FMAC3 std::vector<_tt__ItemListDescription_ElementItemDescription> ** SOAP_FMAC4 soap_get_PointerTostd__vectorTemplateOf_tt__ItemListDescription_ElementItemDescription(struct soap*, std::vector<_tt__ItemListDescription_ElementItemDescription> **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTostd__vectorTemplateOf_tt__ItemListDescription_SimpleItemDescription_DEFINED
#define SOAP_TYPE_PointerTostd__vectorTemplateOf_tt__ItemListDescription_SimpleItemDescription_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__vectorTemplateOf_tt__ItemListDescription_SimpleItemDescription(struct soap*, std::vector<_tt__ItemListDescription_SimpleItemDescription> *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__vectorTemplateOf_tt__ItemListDescription_SimpleItemDescription(struct soap*, const char *, int, std::vector<_tt__ItemListDescription_SimpleItemDescription> *const*, const char *);
SOAP_FMAC3 std::vector<_tt__ItemListDescription_SimpleItemDescription> ** SOAP_FMAC4 soap_in_PointerTostd__vectorTemplateOf_tt__ItemListDescription_SimpleItemDescription(struct soap*, const char*, std::vector<_tt__ItemListDescription_SimpleItemDescription> **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__vectorTemplateOf_tt__ItemListDescription_SimpleItemDescription(struct soap*, std::vector<_tt__ItemListDescription_SimpleItemDescription> *const*, const char*, const char*);
SOAP_FMAC3 std::vector<_tt__ItemListDescription_SimpleItemDescription> ** SOAP_FMAC4 soap_get_PointerTostd__vectorTemplateOf_tt__ItemListDescription_SimpleItemDescription(struct soap*, std::vector<_tt__ItemListDescription_SimpleItemDescription> **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__MessageDescriptionExtension_DEFINED
#define SOAP_TYPE_PointerTott__MessageDescriptionExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__MessageDescriptionExtension(struct soap*, tt__MessageDescriptionExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__MessageDescriptionExtension(struct soap*, const char *, int, tt__MessageDescriptionExtension *const*, const char *);
SOAP_FMAC3 tt__MessageDescriptionExtension ** SOAP_FMAC4 soap_in_PointerTott__MessageDescriptionExtension(struct soap*, const char*, tt__MessageDescriptionExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__MessageDescriptionExtension(struct soap*, tt__MessageDescriptionExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__MessageDescriptionExtension ** SOAP_FMAC4 soap_get_PointerTott__MessageDescriptionExtension(struct soap*, tt__MessageDescriptionExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__ItemListDescription_DEFINED
#define SOAP_TYPE_PointerTott__ItemListDescription_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ItemListDescription(struct soap*, tt__ItemListDescription *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ItemListDescription(struct soap*, const char *, int, tt__ItemListDescription *const*, const char *);
SOAP_FMAC3 tt__ItemListDescription ** SOAP_FMAC4 soap_in_PointerTott__ItemListDescription(struct soap*, const char*, tt__ItemListDescription **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ItemListDescription(struct soap*, tt__ItemListDescription *const*, const char*, const char*);
SOAP_FMAC3 tt__ItemListDescription ** SOAP_FMAC4 soap_get_PointerTott__ItemListDescription(struct soap*, tt__ItemListDescription **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__ItemListExtension_DEFINED
#define SOAP_TYPE_PointerTott__ItemListExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ItemListExtension(struct soap*, tt__ItemListExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ItemListExtension(struct soap*, const char *, int, tt__ItemListExtension *const*, const char *);
SOAP_FMAC3 tt__ItemListExtension ** SOAP_FMAC4 soap_in_PointerTott__ItemListExtension(struct soap*, const char*, tt__ItemListExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ItemListExtension(struct soap*, tt__ItemListExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__ItemListExtension ** SOAP_FMAC4 soap_get_PointerTott__ItemListExtension(struct soap*, tt__ItemListExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTostd__vectorTemplateOf_tt__ItemList_ElementItem_DEFINED
#define SOAP_TYPE_PointerTostd__vectorTemplateOf_tt__ItemList_ElementItem_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__vectorTemplateOf_tt__ItemList_ElementItem(struct soap*, std::vector<_tt__ItemList_ElementItem> *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__vectorTemplateOf_tt__ItemList_ElementItem(struct soap*, const char *, int, std::vector<_tt__ItemList_ElementItem> *const*, const char *);
SOAP_FMAC3 std::vector<_tt__ItemList_ElementItem> ** SOAP_FMAC4 soap_in_PointerTostd__vectorTemplateOf_tt__ItemList_ElementItem(struct soap*, const char*, std::vector<_tt__ItemList_ElementItem> **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__vectorTemplateOf_tt__ItemList_ElementItem(struct soap*, std::vector<_tt__ItemList_ElementItem> *const*, const char*, const char*);
SOAP_FMAC3 std::vector<_tt__ItemList_ElementItem> ** SOAP_FMAC4 soap_get_PointerTostd__vectorTemplateOf_tt__ItemList_ElementItem(struct soap*, std::vector<_tt__ItemList_ElementItem> **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTostd__vectorTemplateOf_tt__ItemList_SimpleItem_DEFINED
#define SOAP_TYPE_PointerTostd__vectorTemplateOf_tt__ItemList_SimpleItem_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__vectorTemplateOf_tt__ItemList_SimpleItem(struct soap*, std::vector<_tt__ItemList_SimpleItem> *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__vectorTemplateOf_tt__ItemList_SimpleItem(struct soap*, const char *, int, std::vector<_tt__ItemList_SimpleItem> *const*, const char *);
SOAP_FMAC3 std::vector<_tt__ItemList_SimpleItem> ** SOAP_FMAC4 soap_in_PointerTostd__vectorTemplateOf_tt__ItemList_SimpleItem(struct soap*, const char*, std::vector<_tt__ItemList_SimpleItem> **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__vectorTemplateOf_tt__ItemList_SimpleItem(struct soap*, std::vector<_tt__ItemList_SimpleItem> *const*, const char*, const char*);
SOAP_FMAC3 std::vector<_tt__ItemList_SimpleItem> ** SOAP_FMAC4 soap_get_PointerTostd__vectorTemplateOf_tt__ItemList_SimpleItem(struct soap*, std::vector<_tt__ItemList_SimpleItem> **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__FocusOptions20Extension_DEFINED
#define SOAP_TYPE_PointerTott__FocusOptions20Extension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__FocusOptions20Extension(struct soap*, tt__FocusOptions20Extension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__FocusOptions20Extension(struct soap*, const char *, int, tt__FocusOptions20Extension *const*, const char *);
SOAP_FMAC3 tt__FocusOptions20Extension ** SOAP_FMAC4 soap_in_PointerTott__FocusOptions20Extension(struct soap*, const char*, tt__FocusOptions20Extension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__FocusOptions20Extension(struct soap*, tt__FocusOptions20Extension *const*, const char*, const char*);
SOAP_FMAC3 tt__FocusOptions20Extension ** SOAP_FMAC4 soap_get_PointerTott__FocusOptions20Extension(struct soap*, tt__FocusOptions20Extension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__WhiteBalanceOptions20Extension_DEFINED
#define SOAP_TYPE_PointerTott__WhiteBalanceOptions20Extension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__WhiteBalanceOptions20Extension(struct soap*, tt__WhiteBalanceOptions20Extension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__WhiteBalanceOptions20Extension(struct soap*, const char *, int, tt__WhiteBalanceOptions20Extension *const*, const char *);
SOAP_FMAC3 tt__WhiteBalanceOptions20Extension ** SOAP_FMAC4 soap_in_PointerTott__WhiteBalanceOptions20Extension(struct soap*, const char*, tt__WhiteBalanceOptions20Extension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__WhiteBalanceOptions20Extension(struct soap*, tt__WhiteBalanceOptions20Extension *const*, const char*, const char*);
SOAP_FMAC3 tt__WhiteBalanceOptions20Extension ** SOAP_FMAC4 soap_get_PointerTott__WhiteBalanceOptions20Extension(struct soap*, tt__WhiteBalanceOptions20Extension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__FocusConfiguration20Extension_DEFINED
#define SOAP_TYPE_PointerTott__FocusConfiguration20Extension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__FocusConfiguration20Extension(struct soap*, tt__FocusConfiguration20Extension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__FocusConfiguration20Extension(struct soap*, const char *, int, tt__FocusConfiguration20Extension *const*, const char *);
SOAP_FMAC3 tt__FocusConfiguration20Extension ** SOAP_FMAC4 soap_in_PointerTott__FocusConfiguration20Extension(struct soap*, const char*, tt__FocusConfiguration20Extension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__FocusConfiguration20Extension(struct soap*, tt__FocusConfiguration20Extension *const*, const char*, const char*);
SOAP_FMAC3 tt__FocusConfiguration20Extension ** SOAP_FMAC4 soap_get_PointerTott__FocusConfiguration20Extension(struct soap*, tt__FocusConfiguration20Extension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__WhiteBalance20Extension_DEFINED
#define SOAP_TYPE_PointerTott__WhiteBalance20Extension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__WhiteBalance20Extension(struct soap*, tt__WhiteBalance20Extension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__WhiteBalance20Extension(struct soap*, const char *, int, tt__WhiteBalance20Extension *const*, const char *);
SOAP_FMAC3 tt__WhiteBalance20Extension ** SOAP_FMAC4 soap_in_PointerTott__WhiteBalance20Extension(struct soap*, const char*, tt__WhiteBalance20Extension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__WhiteBalance20Extension(struct soap*, tt__WhiteBalance20Extension *const*, const char*, const char*);
SOAP_FMAC3 tt__WhiteBalance20Extension ** SOAP_FMAC4 soap_get_PointerTott__WhiteBalance20Extension(struct soap*, tt__WhiteBalance20Extension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__RelativeFocusOptions20_DEFINED
#define SOAP_TYPE_PointerTott__RelativeFocusOptions20_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__RelativeFocusOptions20(struct soap*, tt__RelativeFocusOptions20 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__RelativeFocusOptions20(struct soap*, const char *, int, tt__RelativeFocusOptions20 *const*, const char *);
SOAP_FMAC3 tt__RelativeFocusOptions20 ** SOAP_FMAC4 soap_in_PointerTott__RelativeFocusOptions20(struct soap*, const char*, tt__RelativeFocusOptions20 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__RelativeFocusOptions20(struct soap*, tt__RelativeFocusOptions20 *const*, const char*, const char*);
SOAP_FMAC3 tt__RelativeFocusOptions20 ** SOAP_FMAC4 soap_get_PointerTott__RelativeFocusOptions20(struct soap*, tt__RelativeFocusOptions20 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__IrCutFilterAutoAdjustmentOptionsExtension_DEFINED
#define SOAP_TYPE_PointerTott__IrCutFilterAutoAdjustmentOptionsExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__IrCutFilterAutoAdjustmentOptionsExtension(struct soap*, tt__IrCutFilterAutoAdjustmentOptionsExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__IrCutFilterAutoAdjustmentOptionsExtension(struct soap*, const char *, int, tt__IrCutFilterAutoAdjustmentOptionsExtension *const*, const char *);
SOAP_FMAC3 tt__IrCutFilterAutoAdjustmentOptionsExtension ** SOAP_FMAC4 soap_in_PointerTott__IrCutFilterAutoAdjustmentOptionsExtension(struct soap*, const char*, tt__IrCutFilterAutoAdjustmentOptionsExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__IrCutFilterAutoAdjustmentOptionsExtension(struct soap*, tt__IrCutFilterAutoAdjustmentOptionsExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__IrCutFilterAutoAdjustmentOptionsExtension ** SOAP_FMAC4 soap_get_PointerTott__IrCutFilterAutoAdjustmentOptionsExtension(struct soap*, tt__IrCutFilterAutoAdjustmentOptionsExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__ImageStabilizationOptionsExtension_DEFINED
#define SOAP_TYPE_PointerTott__ImageStabilizationOptionsExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ImageStabilizationOptionsExtension(struct soap*, tt__ImageStabilizationOptionsExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ImageStabilizationOptionsExtension(struct soap*, const char *, int, tt__ImageStabilizationOptionsExtension *const*, const char *);
SOAP_FMAC3 tt__ImageStabilizationOptionsExtension ** SOAP_FMAC4 soap_in_PointerTott__ImageStabilizationOptionsExtension(struct soap*, const char*, tt__ImageStabilizationOptionsExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ImageStabilizationOptionsExtension(struct soap*, tt__ImageStabilizationOptionsExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__ImageStabilizationOptionsExtension ** SOAP_FMAC4 soap_get_PointerTott__ImageStabilizationOptionsExtension(struct soap*, tt__ImageStabilizationOptionsExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__ImagingOptions20Extension4_DEFINED
#define SOAP_TYPE_PointerTott__ImagingOptions20Extension4_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ImagingOptions20Extension4(struct soap*, tt__ImagingOptions20Extension4 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ImagingOptions20Extension4(struct soap*, const char *, int, tt__ImagingOptions20Extension4 *const*, const char *);
SOAP_FMAC3 tt__ImagingOptions20Extension4 ** SOAP_FMAC4 soap_in_PointerTott__ImagingOptions20Extension4(struct soap*, const char*, tt__ImagingOptions20Extension4 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ImagingOptions20Extension4(struct soap*, tt__ImagingOptions20Extension4 *const*, const char*, const char*);
SOAP_FMAC3 tt__ImagingOptions20Extension4 ** SOAP_FMAC4 soap_get_PointerTott__ImagingOptions20Extension4(struct soap*, tt__ImagingOptions20Extension4 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__NoiseReductionOptions_DEFINED
#define SOAP_TYPE_PointerTott__NoiseReductionOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__NoiseReductionOptions(struct soap*, tt__NoiseReductionOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__NoiseReductionOptions(struct soap*, const char *, int, tt__NoiseReductionOptions *const*, const char *);
SOAP_FMAC3 tt__NoiseReductionOptions ** SOAP_FMAC4 soap_in_PointerTott__NoiseReductionOptions(struct soap*, const char*, tt__NoiseReductionOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__NoiseReductionOptions(struct soap*, tt__NoiseReductionOptions *const*, const char*, const char*);
SOAP_FMAC3 tt__NoiseReductionOptions ** SOAP_FMAC4 soap_get_PointerTott__NoiseReductionOptions(struct soap*, tt__NoiseReductionOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__DefoggingOptions_DEFINED
#define SOAP_TYPE_PointerTott__DefoggingOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__DefoggingOptions(struct soap*, tt__DefoggingOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__DefoggingOptions(struct soap*, const char *, int, tt__DefoggingOptions *const*, const char *);
SOAP_FMAC3 tt__DefoggingOptions ** SOAP_FMAC4 soap_in_PointerTott__DefoggingOptions(struct soap*, const char*, tt__DefoggingOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__DefoggingOptions(struct soap*, tt__DefoggingOptions *const*, const char*, const char*);
SOAP_FMAC3 tt__DefoggingOptions ** SOAP_FMAC4 soap_get_PointerTott__DefoggingOptions(struct soap*, tt__DefoggingOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__ToneCompensationOptions_DEFINED
#define SOAP_TYPE_PointerTott__ToneCompensationOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ToneCompensationOptions(struct soap*, tt__ToneCompensationOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ToneCompensationOptions(struct soap*, const char *, int, tt__ToneCompensationOptions *const*, const char *);
SOAP_FMAC3 tt__ToneCompensationOptions ** SOAP_FMAC4 soap_in_PointerTott__ToneCompensationOptions(struct soap*, const char*, tt__ToneCompensationOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ToneCompensationOptions(struct soap*, tt__ToneCompensationOptions *const*, const char*, const char*);
SOAP_FMAC3 tt__ToneCompensationOptions ** SOAP_FMAC4 soap_get_PointerTott__ToneCompensationOptions(struct soap*, tt__ToneCompensationOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__ImagingOptions20Extension3_DEFINED
#define SOAP_TYPE_PointerTott__ImagingOptions20Extension3_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ImagingOptions20Extension3(struct soap*, tt__ImagingOptions20Extension3 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ImagingOptions20Extension3(struct soap*, const char *, int, tt__ImagingOptions20Extension3 *const*, const char *);
SOAP_FMAC3 tt__ImagingOptions20Extension3 ** SOAP_FMAC4 soap_in_PointerTott__ImagingOptions20Extension3(struct soap*, const char*, tt__ImagingOptions20Extension3 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ImagingOptions20Extension3(struct soap*, tt__ImagingOptions20Extension3 *const*, const char*, const char*);
SOAP_FMAC3 tt__ImagingOptions20Extension3 ** SOAP_FMAC4 soap_get_PointerTott__ImagingOptions20Extension3(struct soap*, tt__ImagingOptions20Extension3 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__IrCutFilterAutoAdjustmentOptions_DEFINED
#define SOAP_TYPE_PointerTott__IrCutFilterAutoAdjustmentOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__IrCutFilterAutoAdjustmentOptions(struct soap*, tt__IrCutFilterAutoAdjustmentOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__IrCutFilterAutoAdjustmentOptions(struct soap*, const char *, int, tt__IrCutFilterAutoAdjustmentOptions *const*, const char *);
SOAP_FMAC3 tt__IrCutFilterAutoAdjustmentOptions ** SOAP_FMAC4 soap_in_PointerTott__IrCutFilterAutoAdjustmentOptions(struct soap*, const char*, tt__IrCutFilterAutoAdjustmentOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__IrCutFilterAutoAdjustmentOptions(struct soap*, tt__IrCutFilterAutoAdjustmentOptions *const*, const char*, const char*);
SOAP_FMAC3 tt__IrCutFilterAutoAdjustmentOptions ** SOAP_FMAC4 soap_get_PointerTott__IrCutFilterAutoAdjustmentOptions(struct soap*, tt__IrCutFilterAutoAdjustmentOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__ImagingOptions20Extension2_DEFINED
#define SOAP_TYPE_PointerTott__ImagingOptions20Extension2_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ImagingOptions20Extension2(struct soap*, tt__ImagingOptions20Extension2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ImagingOptions20Extension2(struct soap*, const char *, int, tt__ImagingOptions20Extension2 *const*, const char *);
SOAP_FMAC3 tt__ImagingOptions20Extension2 ** SOAP_FMAC4 soap_in_PointerTott__ImagingOptions20Extension2(struct soap*, const char*, tt__ImagingOptions20Extension2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ImagingOptions20Extension2(struct soap*, tt__ImagingOptions20Extension2 *const*, const char*, const char*);
SOAP_FMAC3 tt__ImagingOptions20Extension2 ** SOAP_FMAC4 soap_get_PointerTott__ImagingOptions20Extension2(struct soap*, tt__ImagingOptions20Extension2 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__ImageStabilizationOptions_DEFINED
#define SOAP_TYPE_PointerTott__ImageStabilizationOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ImageStabilizationOptions(struct soap*, tt__ImageStabilizationOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ImageStabilizationOptions(struct soap*, const char *, int, tt__ImageStabilizationOptions *const*, const char *);
SOAP_FMAC3 tt__ImageStabilizationOptions ** SOAP_FMAC4 soap_in_PointerTott__ImageStabilizationOptions(struct soap*, const char*, tt__ImageStabilizationOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ImageStabilizationOptions(struct soap*, tt__ImageStabilizationOptions *const*, const char*, const char*);
SOAP_FMAC3 tt__ImageStabilizationOptions ** SOAP_FMAC4 soap_get_PointerTott__ImageStabilizationOptions(struct soap*, tt__ImageStabilizationOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__ImagingOptions20Extension_DEFINED
#define SOAP_TYPE_PointerTott__ImagingOptions20Extension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ImagingOptions20Extension(struct soap*, tt__ImagingOptions20Extension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ImagingOptions20Extension(struct soap*, const char *, int, tt__ImagingOptions20Extension *const*, const char *);
SOAP_FMAC3 tt__ImagingOptions20Extension ** SOAP_FMAC4 soap_in_PointerTott__ImagingOptions20Extension(struct soap*, const char*, tt__ImagingOptions20Extension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ImagingOptions20Extension(struct soap*, tt__ImagingOptions20Extension *const*, const char*, const char*);
SOAP_FMAC3 tt__ImagingOptions20Extension ** SOAP_FMAC4 soap_get_PointerTott__ImagingOptions20Extension(struct soap*, tt__ImagingOptions20Extension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__WhiteBalanceOptions20_DEFINED
#define SOAP_TYPE_PointerTott__WhiteBalanceOptions20_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__WhiteBalanceOptions20(struct soap*, tt__WhiteBalanceOptions20 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__WhiteBalanceOptions20(struct soap*, const char *, int, tt__WhiteBalanceOptions20 *const*, const char *);
SOAP_FMAC3 tt__WhiteBalanceOptions20 ** SOAP_FMAC4 soap_in_PointerTott__WhiteBalanceOptions20(struct soap*, const char*, tt__WhiteBalanceOptions20 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__WhiteBalanceOptions20(struct soap*, tt__WhiteBalanceOptions20 *const*, const char*, const char*);
SOAP_FMAC3 tt__WhiteBalanceOptions20 ** SOAP_FMAC4 soap_get_PointerTott__WhiteBalanceOptions20(struct soap*, tt__WhiteBalanceOptions20 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__WideDynamicRangeOptions20_DEFINED
#define SOAP_TYPE_PointerTott__WideDynamicRangeOptions20_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__WideDynamicRangeOptions20(struct soap*, tt__WideDynamicRangeOptions20 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__WideDynamicRangeOptions20(struct soap*, const char *, int, tt__WideDynamicRangeOptions20 *const*, const char *);
SOAP_FMAC3 tt__WideDynamicRangeOptions20 ** SOAP_FMAC4 soap_in_PointerTott__WideDynamicRangeOptions20(struct soap*, const char*, tt__WideDynamicRangeOptions20 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__WideDynamicRangeOptions20(struct soap*, tt__WideDynamicRangeOptions20 *const*, const char*, const char*);
SOAP_FMAC3 tt__WideDynamicRangeOptions20 ** SOAP_FMAC4 soap_get_PointerTott__WideDynamicRangeOptions20(struct soap*, tt__WideDynamicRangeOptions20 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__FocusOptions20_DEFINED
#define SOAP_TYPE_PointerTott__FocusOptions20_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__FocusOptions20(struct soap*, tt__FocusOptions20 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__FocusOptions20(struct soap*, const char *, int, tt__FocusOptions20 *const*, const char *);
SOAP_FMAC3 tt__FocusOptions20 ** SOAP_FMAC4 soap_in_PointerTott__FocusOptions20(struct soap*, const char*, tt__FocusOptions20 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__FocusOptions20(struct soap*, tt__FocusOptions20 *const*, const char*, const char*);
SOAP_FMAC3 tt__FocusOptions20 ** SOAP_FMAC4 soap_get_PointerTott__FocusOptions20(struct soap*, tt__FocusOptions20 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__ExposureOptions20_DEFINED
#define SOAP_TYPE_PointerTott__ExposureOptions20_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ExposureOptions20(struct soap*, tt__ExposureOptions20 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ExposureOptions20(struct soap*, const char *, int, tt__ExposureOptions20 *const*, const char *);
SOAP_FMAC3 tt__ExposureOptions20 ** SOAP_FMAC4 soap_in_PointerTott__ExposureOptions20(struct soap*, const char*, tt__ExposureOptions20 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ExposureOptions20(struct soap*, tt__ExposureOptions20 *const*, const char*, const char*);
SOAP_FMAC3 tt__ExposureOptions20 ** SOAP_FMAC4 soap_get_PointerTott__ExposureOptions20(struct soap*, tt__ExposureOptions20 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__BacklightCompensationOptions20_DEFINED
#define SOAP_TYPE_PointerTott__BacklightCompensationOptions20_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__BacklightCompensationOptions20(struct soap*, tt__BacklightCompensationOptions20 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__BacklightCompensationOptions20(struct soap*, const char *, int, tt__BacklightCompensationOptions20 *const*, const char *);
SOAP_FMAC3 tt__BacklightCompensationOptions20 ** SOAP_FMAC4 soap_in_PointerTott__BacklightCompensationOptions20(struct soap*, const char*, tt__BacklightCompensationOptions20 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__BacklightCompensationOptions20(struct soap*, tt__BacklightCompensationOptions20 *const*, const char*, const char*);
SOAP_FMAC3 tt__BacklightCompensationOptions20 ** SOAP_FMAC4 soap_get_PointerTott__BacklightCompensationOptions20(struct soap*, tt__BacklightCompensationOptions20 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__DefoggingExtension_DEFINED
#define SOAP_TYPE_PointerTott__DefoggingExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__DefoggingExtension(struct soap*, tt__DefoggingExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__DefoggingExtension(struct soap*, const char *, int, tt__DefoggingExtension *const*, const char *);
SOAP_FMAC3 tt__DefoggingExtension ** SOAP_FMAC4 soap_in_PointerTott__DefoggingExtension(struct soap*, const char*, tt__DefoggingExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__DefoggingExtension(struct soap*, tt__DefoggingExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__DefoggingExtension ** SOAP_FMAC4 soap_get_PointerTott__DefoggingExtension(struct soap*, tt__DefoggingExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__ToneCompensationExtension_DEFINED
#define SOAP_TYPE_PointerTott__ToneCompensationExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ToneCompensationExtension(struct soap*, tt__ToneCompensationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ToneCompensationExtension(struct soap*, const char *, int, tt__ToneCompensationExtension *const*, const char *);
SOAP_FMAC3 tt__ToneCompensationExtension ** SOAP_FMAC4 soap_in_PointerTott__ToneCompensationExtension(struct soap*, const char*, tt__ToneCompensationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ToneCompensationExtension(struct soap*, tt__ToneCompensationExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__ToneCompensationExtension ** SOAP_FMAC4 soap_get_PointerTott__ToneCompensationExtension(struct soap*, tt__ToneCompensationExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__ExposurePriority_DEFINED
#define SOAP_TYPE_PointerTott__ExposurePriority_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ExposurePriority(struct soap*, enum tt__ExposurePriority *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ExposurePriority(struct soap*, const char *, int, enum tt__ExposurePriority *const*, const char *);
SOAP_FMAC3 enum tt__ExposurePriority ** SOAP_FMAC4 soap_in_PointerTott__ExposurePriority(struct soap*, const char*, enum tt__ExposurePriority **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ExposurePriority(struct soap*, enum tt__ExposurePriority *const*, const char*, const char*);
SOAP_FMAC3 enum tt__ExposurePriority ** SOAP_FMAC4 soap_get_PointerTott__ExposurePriority(struct soap*, enum tt__ExposurePriority **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__IrCutFilterAutoAdjustmentExtension_DEFINED
#define SOAP_TYPE_PointerTott__IrCutFilterAutoAdjustmentExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__IrCutFilterAutoAdjustmentExtension(struct soap*, tt__IrCutFilterAutoAdjustmentExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__IrCutFilterAutoAdjustmentExtension(struct soap*, const char *, int, tt__IrCutFilterAutoAdjustmentExtension *const*, const char *);
SOAP_FMAC3 tt__IrCutFilterAutoAdjustmentExtension ** SOAP_FMAC4 soap_in_PointerTott__IrCutFilterAutoAdjustmentExtension(struct soap*, const char*, tt__IrCutFilterAutoAdjustmentExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__IrCutFilterAutoAdjustmentExtension(struct soap*, tt__IrCutFilterAutoAdjustmentExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__IrCutFilterAutoAdjustmentExtension ** SOAP_FMAC4 soap_get_PointerTott__IrCutFilterAutoAdjustmentExtension(struct soap*, tt__IrCutFilterAutoAdjustmentExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__ImageStabilizationExtension_DEFINED
#define SOAP_TYPE_PointerTott__ImageStabilizationExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ImageStabilizationExtension(struct soap*, tt__ImageStabilizationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ImageStabilizationExtension(struct soap*, const char *, int, tt__ImageStabilizationExtension *const*, const char *);
SOAP_FMAC3 tt__ImageStabilizationExtension ** SOAP_FMAC4 soap_in_PointerTott__ImageStabilizationExtension(struct soap*, const char*, tt__ImageStabilizationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ImageStabilizationExtension(struct soap*, tt__ImageStabilizationExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__ImageStabilizationExtension ** SOAP_FMAC4 soap_get_PointerTott__ImageStabilizationExtension(struct soap*, tt__ImageStabilizationExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__ImagingSettingsExtension204_DEFINED
#define SOAP_TYPE_PointerTott__ImagingSettingsExtension204_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ImagingSettingsExtension204(struct soap*, tt__ImagingSettingsExtension204 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ImagingSettingsExtension204(struct soap*, const char *, int, tt__ImagingSettingsExtension204 *const*, const char *);
SOAP_FMAC3 tt__ImagingSettingsExtension204 ** SOAP_FMAC4 soap_in_PointerTott__ImagingSettingsExtension204(struct soap*, const char*, tt__ImagingSettingsExtension204 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ImagingSettingsExtension204(struct soap*, tt__ImagingSettingsExtension204 *const*, const char*, const char*);
SOAP_FMAC3 tt__ImagingSettingsExtension204 ** SOAP_FMAC4 soap_get_PointerTott__ImagingSettingsExtension204(struct soap*, tt__ImagingSettingsExtension204 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__NoiseReduction_DEFINED
#define SOAP_TYPE_PointerTott__NoiseReduction_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__NoiseReduction(struct soap*, tt__NoiseReduction *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__NoiseReduction(struct soap*, const char *, int, tt__NoiseReduction *const*, const char *);
SOAP_FMAC3 tt__NoiseReduction ** SOAP_FMAC4 soap_in_PointerTott__NoiseReduction(struct soap*, const char*, tt__NoiseReduction **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__NoiseReduction(struct soap*, tt__NoiseReduction *const*, const char*, const char*);
SOAP_FMAC3 tt__NoiseReduction ** SOAP_FMAC4 soap_get_PointerTott__NoiseReduction(struct soap*, tt__NoiseReduction **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Defogging_DEFINED
#define SOAP_TYPE_PointerTott__Defogging_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Defogging(struct soap*, tt__Defogging *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Defogging(struct soap*, const char *, int, tt__Defogging *const*, const char *);
SOAP_FMAC3 tt__Defogging ** SOAP_FMAC4 soap_in_PointerTott__Defogging(struct soap*, const char*, tt__Defogging **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Defogging(struct soap*, tt__Defogging *const*, const char*, const char*);
SOAP_FMAC3 tt__Defogging ** SOAP_FMAC4 soap_get_PointerTott__Defogging(struct soap*, tt__Defogging **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__ToneCompensation_DEFINED
#define SOAP_TYPE_PointerTott__ToneCompensation_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ToneCompensation(struct soap*, tt__ToneCompensation *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ToneCompensation(struct soap*, const char *, int, tt__ToneCompensation *const*, const char *);
SOAP_FMAC3 tt__ToneCompensation ** SOAP_FMAC4 soap_in_PointerTott__ToneCompensation(struct soap*, const char*, tt__ToneCompensation **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ToneCompensation(struct soap*, tt__ToneCompensation *const*, const char*, const char*);
SOAP_FMAC3 tt__ToneCompensation ** SOAP_FMAC4 soap_get_PointerTott__ToneCompensation(struct soap*, tt__ToneCompensation **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__ImagingSettingsExtension203_DEFINED
#define SOAP_TYPE_PointerTott__ImagingSettingsExtension203_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ImagingSettingsExtension203(struct soap*, tt__ImagingSettingsExtension203 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ImagingSettingsExtension203(struct soap*, const char *, int, tt__ImagingSettingsExtension203 *const*, const char *);
SOAP_FMAC3 tt__ImagingSettingsExtension203 ** SOAP_FMAC4 soap_in_PointerTott__ImagingSettingsExtension203(struct soap*, const char*, tt__ImagingSettingsExtension203 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ImagingSettingsExtension203(struct soap*, tt__ImagingSettingsExtension203 *const*, const char*, const char*);
SOAP_FMAC3 tt__ImagingSettingsExtension203 ** SOAP_FMAC4 soap_get_PointerTott__ImagingSettingsExtension203(struct soap*, tt__ImagingSettingsExtension203 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__IrCutFilterAutoAdjustment_DEFINED
#define SOAP_TYPE_PointerTott__IrCutFilterAutoAdjustment_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__IrCutFilterAutoAdjustment(struct soap*, tt__IrCutFilterAutoAdjustment *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__IrCutFilterAutoAdjustment(struct soap*, const char *, int, tt__IrCutFilterAutoAdjustment *const*, const char *);
SOAP_FMAC3 tt__IrCutFilterAutoAdjustment ** SOAP_FMAC4 soap_in_PointerTott__IrCutFilterAutoAdjustment(struct soap*, const char*, tt__IrCutFilterAutoAdjustment **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__IrCutFilterAutoAdjustment(struct soap*, tt__IrCutFilterAutoAdjustment *const*, const char*, const char*);
SOAP_FMAC3 tt__IrCutFilterAutoAdjustment ** SOAP_FMAC4 soap_get_PointerTott__IrCutFilterAutoAdjustment(struct soap*, tt__IrCutFilterAutoAdjustment **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__ImagingSettingsExtension202_DEFINED
#define SOAP_TYPE_PointerTott__ImagingSettingsExtension202_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ImagingSettingsExtension202(struct soap*, tt__ImagingSettingsExtension202 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ImagingSettingsExtension202(struct soap*, const char *, int, tt__ImagingSettingsExtension202 *const*, const char *);
SOAP_FMAC3 tt__ImagingSettingsExtension202 ** SOAP_FMAC4 soap_in_PointerTott__ImagingSettingsExtension202(struct soap*, const char*, tt__ImagingSettingsExtension202 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ImagingSettingsExtension202(struct soap*, tt__ImagingSettingsExtension202 *const*, const char*, const char*);
SOAP_FMAC3 tt__ImagingSettingsExtension202 ** SOAP_FMAC4 soap_get_PointerTott__ImagingSettingsExtension202(struct soap*, tt__ImagingSettingsExtension202 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__ImageStabilization_DEFINED
#define SOAP_TYPE_PointerTott__ImageStabilization_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ImageStabilization(struct soap*, tt__ImageStabilization *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ImageStabilization(struct soap*, const char *, int, tt__ImageStabilization *const*, const char *);
SOAP_FMAC3 tt__ImageStabilization ** SOAP_FMAC4 soap_in_PointerTott__ImageStabilization(struct soap*, const char*, tt__ImageStabilization **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ImageStabilization(struct soap*, tt__ImageStabilization *const*, const char*, const char*);
SOAP_FMAC3 tt__ImageStabilization ** SOAP_FMAC4 soap_get_PointerTott__ImageStabilization(struct soap*, tt__ImageStabilization **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__ImagingSettingsExtension20_DEFINED
#define SOAP_TYPE_PointerTott__ImagingSettingsExtension20_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ImagingSettingsExtension20(struct soap*, tt__ImagingSettingsExtension20 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ImagingSettingsExtension20(struct soap*, const char *, int, tt__ImagingSettingsExtension20 *const*, const char *);
SOAP_FMAC3 tt__ImagingSettingsExtension20 ** SOAP_FMAC4 soap_in_PointerTott__ImagingSettingsExtension20(struct soap*, const char*, tt__ImagingSettingsExtension20 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ImagingSettingsExtension20(struct soap*, tt__ImagingSettingsExtension20 *const*, const char*, const char*);
SOAP_FMAC3 tt__ImagingSettingsExtension20 ** SOAP_FMAC4 soap_get_PointerTott__ImagingSettingsExtension20(struct soap*, tt__ImagingSettingsExtension20 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__WhiteBalance20_DEFINED
#define SOAP_TYPE_PointerTott__WhiteBalance20_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__WhiteBalance20(struct soap*, tt__WhiteBalance20 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__WhiteBalance20(struct soap*, const char *, int, tt__WhiteBalance20 *const*, const char *);
SOAP_FMAC3 tt__WhiteBalance20 ** SOAP_FMAC4 soap_in_PointerTott__WhiteBalance20(struct soap*, const char*, tt__WhiteBalance20 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__WhiteBalance20(struct soap*, tt__WhiteBalance20 *const*, const char*, const char*);
SOAP_FMAC3 tt__WhiteBalance20 ** SOAP_FMAC4 soap_get_PointerTott__WhiteBalance20(struct soap*, tt__WhiteBalance20 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__WideDynamicRange20_DEFINED
#define SOAP_TYPE_PointerTott__WideDynamicRange20_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__WideDynamicRange20(struct soap*, tt__WideDynamicRange20 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__WideDynamicRange20(struct soap*, const char *, int, tt__WideDynamicRange20 *const*, const char *);
SOAP_FMAC3 tt__WideDynamicRange20 ** SOAP_FMAC4 soap_in_PointerTott__WideDynamicRange20(struct soap*, const char*, tt__WideDynamicRange20 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__WideDynamicRange20(struct soap*, tt__WideDynamicRange20 *const*, const char*, const char*);
SOAP_FMAC3 tt__WideDynamicRange20 ** SOAP_FMAC4 soap_get_PointerTott__WideDynamicRange20(struct soap*, tt__WideDynamicRange20 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__FocusConfiguration20_DEFINED
#define SOAP_TYPE_PointerTott__FocusConfiguration20_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__FocusConfiguration20(struct soap*, tt__FocusConfiguration20 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__FocusConfiguration20(struct soap*, const char *, int, tt__FocusConfiguration20 *const*, const char *);
SOAP_FMAC3 tt__FocusConfiguration20 ** SOAP_FMAC4 soap_in_PointerTott__FocusConfiguration20(struct soap*, const char*, tt__FocusConfiguration20 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__FocusConfiguration20(struct soap*, tt__FocusConfiguration20 *const*, const char*, const char*);
SOAP_FMAC3 tt__FocusConfiguration20 ** SOAP_FMAC4 soap_get_PointerTott__FocusConfiguration20(struct soap*, tt__FocusConfiguration20 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Exposure20_DEFINED
#define SOAP_TYPE_PointerTott__Exposure20_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Exposure20(struct soap*, tt__Exposure20 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Exposure20(struct soap*, const char *, int, tt__Exposure20 *const*, const char *);
SOAP_FMAC3 tt__Exposure20 ** SOAP_FMAC4 soap_in_PointerTott__Exposure20(struct soap*, const char*, tt__Exposure20 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Exposure20(struct soap*, tt__Exposure20 *const*, const char*, const char*);
SOAP_FMAC3 tt__Exposure20 ** SOAP_FMAC4 soap_get_PointerTott__Exposure20(struct soap*, tt__Exposure20 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__BacklightCompensation20_DEFINED
#define SOAP_TYPE_PointerTott__BacklightCompensation20_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__BacklightCompensation20(struct soap*, tt__BacklightCompensation20 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__BacklightCompensation20(struct soap*, const char *, int, tt__BacklightCompensation20 *const*, const char *);
SOAP_FMAC3 tt__BacklightCompensation20 ** SOAP_FMAC4 soap_in_PointerTott__BacklightCompensation20(struct soap*, const char*, tt__BacklightCompensation20 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__BacklightCompensation20(struct soap*, tt__BacklightCompensation20 *const*, const char*, const char*);
SOAP_FMAC3 tt__BacklightCompensation20 ** SOAP_FMAC4 soap_get_PointerTott__BacklightCompensation20(struct soap*, tt__BacklightCompensation20 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__FocusStatus20Extension_DEFINED
#define SOAP_TYPE_PointerTott__FocusStatus20Extension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__FocusStatus20Extension(struct soap*, tt__FocusStatus20Extension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__FocusStatus20Extension(struct soap*, const char *, int, tt__FocusStatus20Extension *const*, const char *);
SOAP_FMAC3 tt__FocusStatus20Extension ** SOAP_FMAC4 soap_in_PointerTott__FocusStatus20Extension(struct soap*, const char*, tt__FocusStatus20Extension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__FocusStatus20Extension(struct soap*, tt__FocusStatus20Extension *const*, const char*, const char*);
SOAP_FMAC3 tt__FocusStatus20Extension ** SOAP_FMAC4 soap_get_PointerTott__FocusStatus20Extension(struct soap*, tt__FocusStatus20Extension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__ImagingStatus20Extension_DEFINED
#define SOAP_TYPE_PointerTott__ImagingStatus20Extension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ImagingStatus20Extension(struct soap*, tt__ImagingStatus20Extension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ImagingStatus20Extension(struct soap*, const char *, int, tt__ImagingStatus20Extension *const*, const char *);
SOAP_FMAC3 tt__ImagingStatus20Extension ** SOAP_FMAC4 soap_in_PointerTott__ImagingStatus20Extension(struct soap*, const char*, tt__ImagingStatus20Extension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ImagingStatus20Extension(struct soap*, tt__ImagingStatus20Extension *const*, const char*, const char*);
SOAP_FMAC3 tt__ImagingStatus20Extension ** SOAP_FMAC4 soap_get_PointerTott__ImagingStatus20Extension(struct soap*, tt__ImagingStatus20Extension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__FocusStatus20_DEFINED
#define SOAP_TYPE_PointerTott__FocusStatus20_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__FocusStatus20(struct soap*, tt__FocusStatus20 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__FocusStatus20(struct soap*, const char *, int, tt__FocusStatus20 *const*, const char *);
SOAP_FMAC3 tt__FocusStatus20 ** SOAP_FMAC4 soap_in_PointerTott__FocusStatus20(struct soap*, const char*, tt__FocusStatus20 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__FocusStatus20(struct soap*, tt__FocusStatus20 *const*, const char*, const char*);
SOAP_FMAC3 tt__FocusStatus20 ** SOAP_FMAC4 soap_get_PointerTott__FocusStatus20(struct soap*, tt__FocusStatus20 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__ContinuousFocusOptions_DEFINED
#define SOAP_TYPE_PointerTott__ContinuousFocusOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ContinuousFocusOptions(struct soap*, tt__ContinuousFocusOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ContinuousFocusOptions(struct soap*, const char *, int, tt__ContinuousFocusOptions *const*, const char *);
SOAP_FMAC3 tt__ContinuousFocusOptions ** SOAP_FMAC4 soap_in_PointerTott__ContinuousFocusOptions(struct soap*, const char*, tt__ContinuousFocusOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ContinuousFocusOptions(struct soap*, tt__ContinuousFocusOptions *const*, const char*, const char*);
SOAP_FMAC3 tt__ContinuousFocusOptions ** SOAP_FMAC4 soap_get_PointerTott__ContinuousFocusOptions(struct soap*, tt__ContinuousFocusOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__RelativeFocusOptions_DEFINED
#define SOAP_TYPE_PointerTott__RelativeFocusOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__RelativeFocusOptions(struct soap*, tt__RelativeFocusOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__RelativeFocusOptions(struct soap*, const char *, int, tt__RelativeFocusOptions *const*, const char *);
SOAP_FMAC3 tt__RelativeFocusOptions ** SOAP_FMAC4 soap_in_PointerTott__RelativeFocusOptions(struct soap*, const char*, tt__RelativeFocusOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__RelativeFocusOptions(struct soap*, tt__RelativeFocusOptions *const*, const char*, const char*);
SOAP_FMAC3 tt__RelativeFocusOptions ** SOAP_FMAC4 soap_get_PointerTott__RelativeFocusOptions(struct soap*, tt__RelativeFocusOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__AbsoluteFocusOptions_DEFINED
#define SOAP_TYPE_PointerTott__AbsoluteFocusOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__AbsoluteFocusOptions(struct soap*, tt__AbsoluteFocusOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__AbsoluteFocusOptions(struct soap*, const char *, int, tt__AbsoluteFocusOptions *const*, const char *);
SOAP_FMAC3 tt__AbsoluteFocusOptions ** SOAP_FMAC4 soap_in_PointerTott__AbsoluteFocusOptions(struct soap*, const char*, tt__AbsoluteFocusOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__AbsoluteFocusOptions(struct soap*, tt__AbsoluteFocusOptions *const*, const char*, const char*);
SOAP_FMAC3 tt__AbsoluteFocusOptions ** SOAP_FMAC4 soap_get_PointerTott__AbsoluteFocusOptions(struct soap*, tt__AbsoluteFocusOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__ContinuousFocus_DEFINED
#define SOAP_TYPE_PointerTott__ContinuousFocus_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ContinuousFocus(struct soap*, tt__ContinuousFocus *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ContinuousFocus(struct soap*, const char *, int, tt__ContinuousFocus *const*, const char *);
SOAP_FMAC3 tt__ContinuousFocus ** SOAP_FMAC4 soap_in_PointerTott__ContinuousFocus(struct soap*, const char*, tt__ContinuousFocus **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ContinuousFocus(struct soap*, tt__ContinuousFocus *const*, const char*, const char*);
SOAP_FMAC3 tt__ContinuousFocus ** SOAP_FMAC4 soap_get_PointerTott__ContinuousFocus(struct soap*, tt__ContinuousFocus **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__RelativeFocus_DEFINED
#define SOAP_TYPE_PointerTott__RelativeFocus_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__RelativeFocus(struct soap*, tt__RelativeFocus *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__RelativeFocus(struct soap*, const char *, int, tt__RelativeFocus *const*, const char *);
SOAP_FMAC3 tt__RelativeFocus ** SOAP_FMAC4 soap_in_PointerTott__RelativeFocus(struct soap*, const char*, tt__RelativeFocus **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__RelativeFocus(struct soap*, tt__RelativeFocus *const*, const char*, const char*);
SOAP_FMAC3 tt__RelativeFocus ** SOAP_FMAC4 soap_get_PointerTott__RelativeFocus(struct soap*, tt__RelativeFocus **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__AbsoluteFocus_DEFINED
#define SOAP_TYPE_PointerTott__AbsoluteFocus_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__AbsoluteFocus(struct soap*, tt__AbsoluteFocus *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__AbsoluteFocus(struct soap*, const char *, int, tt__AbsoluteFocus *const*, const char *);
SOAP_FMAC3 tt__AbsoluteFocus ** SOAP_FMAC4 soap_in_PointerTott__AbsoluteFocus(struct soap*, const char*, tt__AbsoluteFocus **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__AbsoluteFocus(struct soap*, tt__AbsoluteFocus *const*, const char*, const char*);
SOAP_FMAC3 tt__AbsoluteFocus ** SOAP_FMAC4 soap_get_PointerTott__AbsoluteFocus(struct soap*, tt__AbsoluteFocus **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__WhiteBalanceOptions_DEFINED
#define SOAP_TYPE_PointerTott__WhiteBalanceOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__WhiteBalanceOptions(struct soap*, tt__WhiteBalanceOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__WhiteBalanceOptions(struct soap*, const char *, int, tt__WhiteBalanceOptions *const*, const char *);
SOAP_FMAC3 tt__WhiteBalanceOptions ** SOAP_FMAC4 soap_in_PointerTott__WhiteBalanceOptions(struct soap*, const char*, tt__WhiteBalanceOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__WhiteBalanceOptions(struct soap*, tt__WhiteBalanceOptions *const*, const char*, const char*);
SOAP_FMAC3 tt__WhiteBalanceOptions ** SOAP_FMAC4 soap_get_PointerTott__WhiteBalanceOptions(struct soap*, tt__WhiteBalanceOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__WideDynamicRangeOptions_DEFINED
#define SOAP_TYPE_PointerTott__WideDynamicRangeOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__WideDynamicRangeOptions(struct soap*, tt__WideDynamicRangeOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__WideDynamicRangeOptions(struct soap*, const char *, int, tt__WideDynamicRangeOptions *const*, const char *);
SOAP_FMAC3 tt__WideDynamicRangeOptions ** SOAP_FMAC4 soap_in_PointerTott__WideDynamicRangeOptions(struct soap*, const char*, tt__WideDynamicRangeOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__WideDynamicRangeOptions(struct soap*, tt__WideDynamicRangeOptions *const*, const char*, const char*);
SOAP_FMAC3 tt__WideDynamicRangeOptions ** SOAP_FMAC4 soap_get_PointerTott__WideDynamicRangeOptions(struct soap*, tt__WideDynamicRangeOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__FocusOptions_DEFINED
#define SOAP_TYPE_PointerTott__FocusOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__FocusOptions(struct soap*, tt__FocusOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__FocusOptions(struct soap*, const char *, int, tt__FocusOptions *const*, const char *);
SOAP_FMAC3 tt__FocusOptions ** SOAP_FMAC4 soap_in_PointerTott__FocusOptions(struct soap*, const char*, tt__FocusOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__FocusOptions(struct soap*, tt__FocusOptions *const*, const char*, const char*);
SOAP_FMAC3 tt__FocusOptions ** SOAP_FMAC4 soap_get_PointerTott__FocusOptions(struct soap*, tt__FocusOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__ExposureOptions_DEFINED
#define SOAP_TYPE_PointerTott__ExposureOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ExposureOptions(struct soap*, tt__ExposureOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ExposureOptions(struct soap*, const char *, int, tt__ExposureOptions *const*, const char *);
SOAP_FMAC3 tt__ExposureOptions ** SOAP_FMAC4 soap_in_PointerTott__ExposureOptions(struct soap*, const char*, tt__ExposureOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ExposureOptions(struct soap*, tt__ExposureOptions *const*, const char*, const char*);
SOAP_FMAC3 tt__ExposureOptions ** SOAP_FMAC4 soap_get_PointerTott__ExposureOptions(struct soap*, tt__ExposureOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__BacklightCompensationOptions_DEFINED
#define SOAP_TYPE_PointerTott__BacklightCompensationOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__BacklightCompensationOptions(struct soap*, tt__BacklightCompensationOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__BacklightCompensationOptions(struct soap*, const char *, int, tt__BacklightCompensationOptions *const*, const char *);
SOAP_FMAC3 tt__BacklightCompensationOptions ** SOAP_FMAC4 soap_in_PointerTott__BacklightCompensationOptions(struct soap*, const char*, tt__BacklightCompensationOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__BacklightCompensationOptions(struct soap*, tt__BacklightCompensationOptions *const*, const char*, const char*);
SOAP_FMAC3 tt__BacklightCompensationOptions ** SOAP_FMAC4 soap_get_PointerTott__BacklightCompensationOptions(struct soap*, tt__BacklightCompensationOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Rectangle_DEFINED
#define SOAP_TYPE_PointerTott__Rectangle_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Rectangle(struct soap*, tt__Rectangle *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Rectangle(struct soap*, const char *, int, tt__Rectangle *const*, const char *);
SOAP_FMAC3 tt__Rectangle ** SOAP_FMAC4 soap_in_PointerTott__Rectangle(struct soap*, const char*, tt__Rectangle **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Rectangle(struct soap*, tt__Rectangle *const*, const char*, const char*);
SOAP_FMAC3 tt__Rectangle ** SOAP_FMAC4 soap_get_PointerTott__Rectangle(struct soap*, tt__Rectangle **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__ImagingSettingsExtension_DEFINED
#define SOAP_TYPE_PointerTott__ImagingSettingsExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ImagingSettingsExtension(struct soap*, tt__ImagingSettingsExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ImagingSettingsExtension(struct soap*, const char *, int, tt__ImagingSettingsExtension *const*, const char *);
SOAP_FMAC3 tt__ImagingSettingsExtension ** SOAP_FMAC4 soap_in_PointerTott__ImagingSettingsExtension(struct soap*, const char*, tt__ImagingSettingsExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ImagingSettingsExtension(struct soap*, tt__ImagingSettingsExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__ImagingSettingsExtension ** SOAP_FMAC4 soap_get_PointerTott__ImagingSettingsExtension(struct soap*, tt__ImagingSettingsExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__WhiteBalance_DEFINED
#define SOAP_TYPE_PointerTott__WhiteBalance_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__WhiteBalance(struct soap*, tt__WhiteBalance *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__WhiteBalance(struct soap*, const char *, int, tt__WhiteBalance *const*, const char *);
SOAP_FMAC3 tt__WhiteBalance ** SOAP_FMAC4 soap_in_PointerTott__WhiteBalance(struct soap*, const char*, tt__WhiteBalance **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__WhiteBalance(struct soap*, tt__WhiteBalance *const*, const char*, const char*);
SOAP_FMAC3 tt__WhiteBalance ** SOAP_FMAC4 soap_get_PointerTott__WhiteBalance(struct soap*, tt__WhiteBalance **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__WideDynamicRange_DEFINED
#define SOAP_TYPE_PointerTott__WideDynamicRange_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__WideDynamicRange(struct soap*, tt__WideDynamicRange *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__WideDynamicRange(struct soap*, const char *, int, tt__WideDynamicRange *const*, const char *);
SOAP_FMAC3 tt__WideDynamicRange ** SOAP_FMAC4 soap_in_PointerTott__WideDynamicRange(struct soap*, const char*, tt__WideDynamicRange **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__WideDynamicRange(struct soap*, tt__WideDynamicRange *const*, const char*, const char*);
SOAP_FMAC3 tt__WideDynamicRange ** SOAP_FMAC4 soap_get_PointerTott__WideDynamicRange(struct soap*, tt__WideDynamicRange **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__IrCutFilterMode_DEFINED
#define SOAP_TYPE_PointerTott__IrCutFilterMode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__IrCutFilterMode(struct soap*, enum tt__IrCutFilterMode *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__IrCutFilterMode(struct soap*, const char *, int, enum tt__IrCutFilterMode *const*, const char *);
SOAP_FMAC3 enum tt__IrCutFilterMode ** SOAP_FMAC4 soap_in_PointerTott__IrCutFilterMode(struct soap*, const char*, enum tt__IrCutFilterMode **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__IrCutFilterMode(struct soap*, enum tt__IrCutFilterMode *const*, const char*, const char*);
SOAP_FMAC3 enum tt__IrCutFilterMode ** SOAP_FMAC4 soap_get_PointerTott__IrCutFilterMode(struct soap*, enum tt__IrCutFilterMode **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__FocusConfiguration_DEFINED
#define SOAP_TYPE_PointerTott__FocusConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__FocusConfiguration(struct soap*, tt__FocusConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__FocusConfiguration(struct soap*, const char *, int, tt__FocusConfiguration *const*, const char *);
SOAP_FMAC3 tt__FocusConfiguration ** SOAP_FMAC4 soap_in_PointerTott__FocusConfiguration(struct soap*, const char*, tt__FocusConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__FocusConfiguration(struct soap*, tt__FocusConfiguration *const*, const char*, const char*);
SOAP_FMAC3 tt__FocusConfiguration ** SOAP_FMAC4 soap_get_PointerTott__FocusConfiguration(struct soap*, tt__FocusConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Exposure_DEFINED
#define SOAP_TYPE_PointerTott__Exposure_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Exposure(struct soap*, tt__Exposure *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Exposure(struct soap*, const char *, int, tt__Exposure *const*, const char *);
SOAP_FMAC3 tt__Exposure ** SOAP_FMAC4 soap_in_PointerTott__Exposure(struct soap*, const char*, tt__Exposure **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Exposure(struct soap*, tt__Exposure *const*, const char*, const char*);
SOAP_FMAC3 tt__Exposure ** SOAP_FMAC4 soap_get_PointerTott__Exposure(struct soap*, tt__Exposure **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__BacklightCompensation_DEFINED
#define SOAP_TYPE_PointerTott__BacklightCompensation_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__BacklightCompensation(struct soap*, tt__BacklightCompensation *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__BacklightCompensation(struct soap*, const char *, int, tt__BacklightCompensation *const*, const char *);
SOAP_FMAC3 tt__BacklightCompensation ** SOAP_FMAC4 soap_in_PointerTott__BacklightCompensation(struct soap*, const char*, tt__BacklightCompensation **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__BacklightCompensation(struct soap*, tt__BacklightCompensation *const*, const char*, const char*);
SOAP_FMAC3 tt__BacklightCompensation ** SOAP_FMAC4 soap_get_PointerTott__BacklightCompensation(struct soap*, tt__BacklightCompensation **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__FocusStatus_DEFINED
#define SOAP_TYPE_PointerTott__FocusStatus_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__FocusStatus(struct soap*, tt__FocusStatus *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__FocusStatus(struct soap*, const char *, int, tt__FocusStatus *const*, const char *);
SOAP_FMAC3 tt__FocusStatus ** SOAP_FMAC4 soap_in_PointerTott__FocusStatus(struct soap*, const char*, tt__FocusStatus **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__FocusStatus(struct soap*, tt__FocusStatus *const*, const char*, const char*);
SOAP_FMAC3 tt__FocusStatus ** SOAP_FMAC4 soap_get_PointerTott__FocusStatus(struct soap*, tt__FocusStatus **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZPresetTourStartingConditionOptionsExtension_DEFINED
#define SOAP_TYPE_PointerTott__PTZPresetTourStartingConditionOptionsExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZPresetTourStartingConditionOptionsExtension(struct soap*, tt__PTZPresetTourStartingConditionOptionsExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZPresetTourStartingConditionOptionsExtension(struct soap*, const char *, int, tt__PTZPresetTourStartingConditionOptionsExtension *const*, const char *);
SOAP_FMAC3 tt__PTZPresetTourStartingConditionOptionsExtension ** SOAP_FMAC4 soap_in_PointerTott__PTZPresetTourStartingConditionOptionsExtension(struct soap*, const char*, tt__PTZPresetTourStartingConditionOptionsExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZPresetTourStartingConditionOptionsExtension(struct soap*, tt__PTZPresetTourStartingConditionOptionsExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZPresetTourStartingConditionOptionsExtension ** SOAP_FMAC4 soap_get_PointerTott__PTZPresetTourStartingConditionOptionsExtension(struct soap*, tt__PTZPresetTourStartingConditionOptionsExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZPresetTourPresetDetailOptionsExtension_DEFINED
#define SOAP_TYPE_PointerTott__PTZPresetTourPresetDetailOptionsExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZPresetTourPresetDetailOptionsExtension(struct soap*, tt__PTZPresetTourPresetDetailOptionsExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZPresetTourPresetDetailOptionsExtension(struct soap*, const char *, int, tt__PTZPresetTourPresetDetailOptionsExtension *const*, const char *);
SOAP_FMAC3 tt__PTZPresetTourPresetDetailOptionsExtension ** SOAP_FMAC4 soap_in_PointerTott__PTZPresetTourPresetDetailOptionsExtension(struct soap*, const char*, tt__PTZPresetTourPresetDetailOptionsExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZPresetTourPresetDetailOptionsExtension(struct soap*, tt__PTZPresetTourPresetDetailOptionsExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZPresetTourPresetDetailOptionsExtension ** SOAP_FMAC4 soap_get_PointerTott__PTZPresetTourPresetDetailOptionsExtension(struct soap*, tt__PTZPresetTourPresetDetailOptionsExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZPresetTourPresetDetailOptions_DEFINED
#define SOAP_TYPE_PointerTott__PTZPresetTourPresetDetailOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZPresetTourPresetDetailOptions(struct soap*, tt__PTZPresetTourPresetDetailOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZPresetTourPresetDetailOptions(struct soap*, const char *, int, tt__PTZPresetTourPresetDetailOptions *const*, const char *);
SOAP_FMAC3 tt__PTZPresetTourPresetDetailOptions ** SOAP_FMAC4 soap_in_PointerTott__PTZPresetTourPresetDetailOptions(struct soap*, const char*, tt__PTZPresetTourPresetDetailOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZPresetTourPresetDetailOptions(struct soap*, tt__PTZPresetTourPresetDetailOptions *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZPresetTourPresetDetailOptions ** SOAP_FMAC4 soap_get_PointerTott__PTZPresetTourPresetDetailOptions(struct soap*, tt__PTZPresetTourPresetDetailOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZPresetTourSpotOptions_DEFINED
#define SOAP_TYPE_PointerTott__PTZPresetTourSpotOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZPresetTourSpotOptions(struct soap*, tt__PTZPresetTourSpotOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZPresetTourSpotOptions(struct soap*, const char *, int, tt__PTZPresetTourSpotOptions *const*, const char *);
SOAP_FMAC3 tt__PTZPresetTourSpotOptions ** SOAP_FMAC4 soap_in_PointerTott__PTZPresetTourSpotOptions(struct soap*, const char*, tt__PTZPresetTourSpotOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZPresetTourSpotOptions(struct soap*, tt__PTZPresetTourSpotOptions *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZPresetTourSpotOptions ** SOAP_FMAC4 soap_get_PointerTott__PTZPresetTourSpotOptions(struct soap*, tt__PTZPresetTourSpotOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZPresetTourStartingConditionOptions_DEFINED
#define SOAP_TYPE_PointerTott__PTZPresetTourStartingConditionOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZPresetTourStartingConditionOptions(struct soap*, tt__PTZPresetTourStartingConditionOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZPresetTourStartingConditionOptions(struct soap*, const char *, int, tt__PTZPresetTourStartingConditionOptions *const*, const char *);
SOAP_FMAC3 tt__PTZPresetTourStartingConditionOptions ** SOAP_FMAC4 soap_in_PointerTott__PTZPresetTourStartingConditionOptions(struct soap*, const char*, tt__PTZPresetTourStartingConditionOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZPresetTourStartingConditionOptions(struct soap*, tt__PTZPresetTourStartingConditionOptions *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZPresetTourStartingConditionOptions ** SOAP_FMAC4 soap_get_PointerTott__PTZPresetTourStartingConditionOptions(struct soap*, tt__PTZPresetTourStartingConditionOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZPresetTourStartingConditionExtension_DEFINED
#define SOAP_TYPE_PointerTott__PTZPresetTourStartingConditionExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZPresetTourStartingConditionExtension(struct soap*, tt__PTZPresetTourStartingConditionExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZPresetTourStartingConditionExtension(struct soap*, const char *, int, tt__PTZPresetTourStartingConditionExtension *const*, const char *);
SOAP_FMAC3 tt__PTZPresetTourStartingConditionExtension ** SOAP_FMAC4 soap_in_PointerTott__PTZPresetTourStartingConditionExtension(struct soap*, const char*, tt__PTZPresetTourStartingConditionExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZPresetTourStartingConditionExtension(struct soap*, tt__PTZPresetTourStartingConditionExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZPresetTourStartingConditionExtension ** SOAP_FMAC4 soap_get_PointerTott__PTZPresetTourStartingConditionExtension(struct soap*, tt__PTZPresetTourStartingConditionExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZPresetTourDirection_DEFINED
#define SOAP_TYPE_PointerTott__PTZPresetTourDirection_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZPresetTourDirection(struct soap*, enum tt__PTZPresetTourDirection *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZPresetTourDirection(struct soap*, const char *, int, enum tt__PTZPresetTourDirection *const*, const char *);
SOAP_FMAC3 enum tt__PTZPresetTourDirection ** SOAP_FMAC4 soap_in_PointerTott__PTZPresetTourDirection(struct soap*, const char*, enum tt__PTZPresetTourDirection **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZPresetTourDirection(struct soap*, enum tt__PTZPresetTourDirection *const*, const char*, const char*);
SOAP_FMAC3 enum tt__PTZPresetTourDirection ** SOAP_FMAC4 soap_get_PointerTott__PTZPresetTourDirection(struct soap*, enum tt__PTZPresetTourDirection **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZPresetTourStatusExtension_DEFINED
#define SOAP_TYPE_PointerTott__PTZPresetTourStatusExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZPresetTourStatusExtension(struct soap*, tt__PTZPresetTourStatusExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZPresetTourStatusExtension(struct soap*, const char *, int, tt__PTZPresetTourStatusExtension *const*, const char *);
SOAP_FMAC3 tt__PTZPresetTourStatusExtension ** SOAP_FMAC4 soap_in_PointerTott__PTZPresetTourStatusExtension(struct soap*, const char*, tt__PTZPresetTourStatusExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZPresetTourStatusExtension(struct soap*, tt__PTZPresetTourStatusExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZPresetTourStatusExtension ** SOAP_FMAC4 soap_get_PointerTott__PTZPresetTourStatusExtension(struct soap*, tt__PTZPresetTourStatusExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZPresetTourTypeExtension_DEFINED
#define SOAP_TYPE_PointerTott__PTZPresetTourTypeExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZPresetTourTypeExtension(struct soap*, tt__PTZPresetTourTypeExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZPresetTourTypeExtension(struct soap*, const char *, int, tt__PTZPresetTourTypeExtension *const*, const char *);
SOAP_FMAC3 tt__PTZPresetTourTypeExtension ** SOAP_FMAC4 soap_in_PointerTott__PTZPresetTourTypeExtension(struct soap*, const char*, tt__PTZPresetTourTypeExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZPresetTourTypeExtension(struct soap*, tt__PTZPresetTourTypeExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZPresetTourTypeExtension ** SOAP_FMAC4 soap_get_PointerTott__PTZPresetTourTypeExtension(struct soap*, tt__PTZPresetTourTypeExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZPresetTourSpotExtension_DEFINED
#define SOAP_TYPE_PointerTott__PTZPresetTourSpotExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZPresetTourSpotExtension(struct soap*, tt__PTZPresetTourSpotExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZPresetTourSpotExtension(struct soap*, const char *, int, tt__PTZPresetTourSpotExtension *const*, const char *);
SOAP_FMAC3 tt__PTZPresetTourSpotExtension ** SOAP_FMAC4 soap_in_PointerTott__PTZPresetTourSpotExtension(struct soap*, const char*, tt__PTZPresetTourSpotExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZPresetTourSpotExtension(struct soap*, tt__PTZPresetTourSpotExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZPresetTourSpotExtension ** SOAP_FMAC4 soap_get_PointerTott__PTZPresetTourSpotExtension(struct soap*, tt__PTZPresetTourSpotExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZSpeed_DEFINED
#define SOAP_TYPE_PointerTott__PTZSpeed_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZSpeed(struct soap*, tt__PTZSpeed *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZSpeed(struct soap*, const char *, int, tt__PTZSpeed *const*, const char *);
SOAP_FMAC3 tt__PTZSpeed ** SOAP_FMAC4 soap_in_PointerTott__PTZSpeed(struct soap*, const char*, tt__PTZSpeed **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZSpeed(struct soap*, tt__PTZSpeed *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZSpeed ** SOAP_FMAC4 soap_get_PointerTott__PTZSpeed(struct soap*, tt__PTZSpeed **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZPresetTourPresetDetail_DEFINED
#define SOAP_TYPE_PointerTott__PTZPresetTourPresetDetail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZPresetTourPresetDetail(struct soap*, tt__PTZPresetTourPresetDetail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZPresetTourPresetDetail(struct soap*, const char *, int, tt__PTZPresetTourPresetDetail *const*, const char *);
SOAP_FMAC3 tt__PTZPresetTourPresetDetail ** SOAP_FMAC4 soap_in_PointerTott__PTZPresetTourPresetDetail(struct soap*, const char*, tt__PTZPresetTourPresetDetail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZPresetTourPresetDetail(struct soap*, tt__PTZPresetTourPresetDetail *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZPresetTourPresetDetail ** SOAP_FMAC4 soap_get_PointerTott__PTZPresetTourPresetDetail(struct soap*, tt__PTZPresetTourPresetDetail **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZPresetTourExtension_DEFINED
#define SOAP_TYPE_PointerTott__PTZPresetTourExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZPresetTourExtension(struct soap*, tt__PTZPresetTourExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZPresetTourExtension(struct soap*, const char *, int, tt__PTZPresetTourExtension *const*, const char *);
SOAP_FMAC3 tt__PTZPresetTourExtension ** SOAP_FMAC4 soap_in_PointerTott__PTZPresetTourExtension(struct soap*, const char*, tt__PTZPresetTourExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZPresetTourExtension(struct soap*, tt__PTZPresetTourExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZPresetTourExtension ** SOAP_FMAC4 soap_get_PointerTott__PTZPresetTourExtension(struct soap*, tt__PTZPresetTourExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZPresetTourSpot_DEFINED
#define SOAP_TYPE_PointerTott__PTZPresetTourSpot_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZPresetTourSpot(struct soap*, tt__PTZPresetTourSpot *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZPresetTourSpot(struct soap*, const char *, int, tt__PTZPresetTourSpot *const*, const char *);
SOAP_FMAC3 tt__PTZPresetTourSpot ** SOAP_FMAC4 soap_in_PointerTott__PTZPresetTourSpot(struct soap*, const char*, tt__PTZPresetTourSpot **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZPresetTourSpot(struct soap*, tt__PTZPresetTourSpot *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZPresetTourSpot ** SOAP_FMAC4 soap_get_PointerTott__PTZPresetTourSpot(struct soap*, tt__PTZPresetTourSpot **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZPresetTourStartingCondition_DEFINED
#define SOAP_TYPE_PointerTott__PTZPresetTourStartingCondition_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZPresetTourStartingCondition(struct soap*, tt__PTZPresetTourStartingCondition *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZPresetTourStartingCondition(struct soap*, const char *, int, tt__PTZPresetTourStartingCondition *const*, const char *);
SOAP_FMAC3 tt__PTZPresetTourStartingCondition ** SOAP_FMAC4 soap_in_PointerTott__PTZPresetTourStartingCondition(struct soap*, const char*, tt__PTZPresetTourStartingCondition **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZPresetTourStartingCondition(struct soap*, tt__PTZPresetTourStartingCondition *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZPresetTourStartingCondition ** SOAP_FMAC4 soap_get_PointerTott__PTZPresetTourStartingCondition(struct soap*, tt__PTZPresetTourStartingCondition **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZPresetTourStatus_DEFINED
#define SOAP_TYPE_PointerTott__PTZPresetTourStatus_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZPresetTourStatus(struct soap*, tt__PTZPresetTourStatus *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZPresetTourStatus(struct soap*, const char *, int, tt__PTZPresetTourStatus *const*, const char *);
SOAP_FMAC3 tt__PTZPresetTourStatus ** SOAP_FMAC4 soap_in_PointerTott__PTZPresetTourStatus(struct soap*, const char*, tt__PTZPresetTourStatus **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZPresetTourStatus(struct soap*, tt__PTZPresetTourStatus *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZPresetTourStatus ** SOAP_FMAC4 soap_get_PointerTott__PTZPresetTourStatus(struct soap*, tt__PTZPresetTourStatus **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__MoveStatus_DEFINED
#define SOAP_TYPE_PointerTott__MoveStatus_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__MoveStatus(struct soap*, enum tt__MoveStatus *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__MoveStatus(struct soap*, const char *, int, enum tt__MoveStatus *const*, const char *);
SOAP_FMAC3 enum tt__MoveStatus ** SOAP_FMAC4 soap_in_PointerTott__MoveStatus(struct soap*, const char*, enum tt__MoveStatus **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__MoveStatus(struct soap*, enum tt__MoveStatus *const*, const char*, const char*);
SOAP_FMAC3 enum tt__MoveStatus ** SOAP_FMAC4 soap_get_PointerTott__MoveStatus(struct soap*, enum tt__MoveStatus **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Name_DEFINED
#define SOAP_TYPE_PointerTott__Name_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Name(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Name(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTott__Name(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Name(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTott__Name(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZMoveStatus_DEFINED
#define SOAP_TYPE_PointerTott__PTZMoveStatus_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZMoveStatus(struct soap*, tt__PTZMoveStatus *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZMoveStatus(struct soap*, const char *, int, tt__PTZMoveStatus *const*, const char *);
SOAP_FMAC3 tt__PTZMoveStatus ** SOAP_FMAC4 soap_in_PointerTott__PTZMoveStatus(struct soap*, const char*, tt__PTZMoveStatus **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZMoveStatus(struct soap*, tt__PTZMoveStatus *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZMoveStatus ** SOAP_FMAC4 soap_get_PointerTott__PTZMoveStatus(struct soap*, tt__PTZMoveStatus **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZVector_DEFINED
#define SOAP_TYPE_PointerTott__PTZVector_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZVector(struct soap*, tt__PTZVector *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZVector(struct soap*, const char *, int, tt__PTZVector *const*, const char *);
SOAP_FMAC3 tt__PTZVector ** SOAP_FMAC4 soap_in_PointerTott__PTZVector(struct soap*, const char*, tt__PTZVector **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZVector(struct soap*, tt__PTZVector *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZVector ** SOAP_FMAC4 soap_get_PointerTott__PTZVector(struct soap*, tt__PTZVector **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Vector1D_DEFINED
#define SOAP_TYPE_PointerTott__Vector1D_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Vector1D(struct soap*, tt__Vector1D *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Vector1D(struct soap*, const char *, int, tt__Vector1D *const*, const char *);
SOAP_FMAC3 tt__Vector1D ** SOAP_FMAC4 soap_in_PointerTott__Vector1D(struct soap*, const char*, tt__Vector1D **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Vector1D(struct soap*, tt__Vector1D *const*, const char*, const char*);
SOAP_FMAC3 tt__Vector1D ** SOAP_FMAC4 soap_get_PointerTott__Vector1D(struct soap*, tt__Vector1D **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Vector2D_DEFINED
#define SOAP_TYPE_PointerTott__Vector2D_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Vector2D(struct soap*, tt__Vector2D *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Vector2D(struct soap*, const char *, int, tt__Vector2D *const*, const char *);
SOAP_FMAC3 tt__Vector2D ** SOAP_FMAC4 soap_in_PointerTott__Vector2D(struct soap*, const char*, tt__Vector2D **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Vector2D(struct soap*, tt__Vector2D *const*, const char*, const char*);
SOAP_FMAC3 tt__Vector2D ** SOAP_FMAC4 soap_get_PointerTott__Vector2D(struct soap*, tt__Vector2D **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZSpacesExtension_DEFINED
#define SOAP_TYPE_PointerTott__PTZSpacesExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZSpacesExtension(struct soap*, tt__PTZSpacesExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZSpacesExtension(struct soap*, const char *, int, tt__PTZSpacesExtension *const*, const char *);
SOAP_FMAC3 tt__PTZSpacesExtension ** SOAP_FMAC4 soap_in_PointerTott__PTZSpacesExtension(struct soap*, const char*, tt__PTZSpacesExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZSpacesExtension(struct soap*, tt__PTZSpacesExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZSpacesExtension ** SOAP_FMAC4 soap_get_PointerTott__PTZSpacesExtension(struct soap*, tt__PTZSpacesExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Space1DDescription_DEFINED
#define SOAP_TYPE_PointerTott__Space1DDescription_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Space1DDescription(struct soap*, tt__Space1DDescription *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Space1DDescription(struct soap*, const char *, int, tt__Space1DDescription *const*, const char *);
SOAP_FMAC3 tt__Space1DDescription ** SOAP_FMAC4 soap_in_PointerTott__Space1DDescription(struct soap*, const char*, tt__Space1DDescription **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Space1DDescription(struct soap*, tt__Space1DDescription *const*, const char*, const char*);
SOAP_FMAC3 tt__Space1DDescription ** SOAP_FMAC4 soap_get_PointerTott__Space1DDescription(struct soap*, tt__Space1DDescription **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Space2DDescription_DEFINED
#define SOAP_TYPE_PointerTott__Space2DDescription_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Space2DDescription(struct soap*, tt__Space2DDescription *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Space2DDescription(struct soap*, const char *, int, tt__Space2DDescription *const*, const char *);
SOAP_FMAC3 tt__Space2DDescription ** SOAP_FMAC4 soap_in_PointerTott__Space2DDescription(struct soap*, const char*, tt__Space2DDescription **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Space2DDescription(struct soap*, tt__Space2DDescription *const*, const char*, const char*);
SOAP_FMAC3 tt__Space2DDescription ** SOAP_FMAC4 soap_get_PointerTott__Space2DDescription(struct soap*, tt__Space2DDescription **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__ReverseOptionsExtension_DEFINED
#define SOAP_TYPE_PointerTott__ReverseOptionsExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ReverseOptionsExtension(struct soap*, tt__ReverseOptionsExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ReverseOptionsExtension(struct soap*, const char *, int, tt__ReverseOptionsExtension *const*, const char *);
SOAP_FMAC3 tt__ReverseOptionsExtension ** SOAP_FMAC4 soap_in_PointerTott__ReverseOptionsExtension(struct soap*, const char*, tt__ReverseOptionsExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ReverseOptionsExtension(struct soap*, tt__ReverseOptionsExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__ReverseOptionsExtension ** SOAP_FMAC4 soap_get_PointerTott__ReverseOptionsExtension(struct soap*, tt__ReverseOptionsExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__EFlipOptionsExtension_DEFINED
#define SOAP_TYPE_PointerTott__EFlipOptionsExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__EFlipOptionsExtension(struct soap*, tt__EFlipOptionsExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__EFlipOptionsExtension(struct soap*, const char *, int, tt__EFlipOptionsExtension *const*, const char *);
SOAP_FMAC3 tt__EFlipOptionsExtension ** SOAP_FMAC4 soap_in_PointerTott__EFlipOptionsExtension(struct soap*, const char*, tt__EFlipOptionsExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__EFlipOptionsExtension(struct soap*, tt__EFlipOptionsExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__EFlipOptionsExtension ** SOAP_FMAC4 soap_get_PointerTott__EFlipOptionsExtension(struct soap*, tt__EFlipOptionsExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTControlDirectionOptionsExtension_DEFINED
#define SOAP_TYPE_PointerTott__PTControlDirectionOptionsExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTControlDirectionOptionsExtension(struct soap*, tt__PTControlDirectionOptionsExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTControlDirectionOptionsExtension(struct soap*, const char *, int, tt__PTControlDirectionOptionsExtension *const*, const char *);
SOAP_FMAC3 tt__PTControlDirectionOptionsExtension ** SOAP_FMAC4 soap_in_PointerTott__PTControlDirectionOptionsExtension(struct soap*, const char*, tt__PTControlDirectionOptionsExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTControlDirectionOptionsExtension(struct soap*, tt__PTControlDirectionOptionsExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__PTControlDirectionOptionsExtension ** SOAP_FMAC4 soap_get_PointerTott__PTControlDirectionOptionsExtension(struct soap*, tt__PTControlDirectionOptionsExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__ReverseOptions_DEFINED
#define SOAP_TYPE_PointerTott__ReverseOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ReverseOptions(struct soap*, tt__ReverseOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ReverseOptions(struct soap*, const char *, int, tt__ReverseOptions *const*, const char *);
SOAP_FMAC3 tt__ReverseOptions ** SOAP_FMAC4 soap_in_PointerTott__ReverseOptions(struct soap*, const char*, tt__ReverseOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ReverseOptions(struct soap*, tt__ReverseOptions *const*, const char*, const char*);
SOAP_FMAC3 tt__ReverseOptions ** SOAP_FMAC4 soap_get_PointerTott__ReverseOptions(struct soap*, tt__ReverseOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__EFlipOptions_DEFINED
#define SOAP_TYPE_PointerTott__EFlipOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__EFlipOptions(struct soap*, tt__EFlipOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__EFlipOptions(struct soap*, const char *, int, tt__EFlipOptions *const*, const char *);
SOAP_FMAC3 tt__EFlipOptions ** SOAP_FMAC4 soap_in_PointerTott__EFlipOptions(struct soap*, const char*, tt__EFlipOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__EFlipOptions(struct soap*, tt__EFlipOptions *const*, const char*, const char*);
SOAP_FMAC3 tt__EFlipOptions ** SOAP_FMAC4 soap_get_PointerTott__EFlipOptions(struct soap*, tt__EFlipOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZConfigurationOptions2_DEFINED
#define SOAP_TYPE_PointerTott__PTZConfigurationOptions2_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZConfigurationOptions2(struct soap*, tt__PTZConfigurationOptions2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZConfigurationOptions2(struct soap*, const char *, int, tt__PTZConfigurationOptions2 *const*, const char *);
SOAP_FMAC3 tt__PTZConfigurationOptions2 ** SOAP_FMAC4 soap_in_PointerTott__PTZConfigurationOptions2(struct soap*, const char*, tt__PTZConfigurationOptions2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZConfigurationOptions2(struct soap*, tt__PTZConfigurationOptions2 *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZConfigurationOptions2 ** SOAP_FMAC4 soap_get_PointerTott__PTZConfigurationOptions2(struct soap*, tt__PTZConfigurationOptions2 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTControlDirectionOptions_DEFINED
#define SOAP_TYPE_PointerTott__PTControlDirectionOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTControlDirectionOptions(struct soap*, tt__PTControlDirectionOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTControlDirectionOptions(struct soap*, const char *, int, tt__PTControlDirectionOptions *const*, const char *);
SOAP_FMAC3 tt__PTControlDirectionOptions ** SOAP_FMAC4 soap_in_PointerTott__PTControlDirectionOptions(struct soap*, const char*, tt__PTControlDirectionOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTControlDirectionOptions(struct soap*, tt__PTControlDirectionOptions *const*, const char*, const char*);
SOAP_FMAC3 tt__PTControlDirectionOptions ** SOAP_FMAC4 soap_get_PointerTott__PTControlDirectionOptions(struct soap*, tt__PTControlDirectionOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__DurationRange_DEFINED
#define SOAP_TYPE_PointerTott__DurationRange_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__DurationRange(struct soap*, tt__DurationRange *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__DurationRange(struct soap*, const char *, int, tt__DurationRange *const*, const char *);
SOAP_FMAC3 tt__DurationRange ** SOAP_FMAC4 soap_in_PointerTott__DurationRange(struct soap*, const char*, tt__DurationRange **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__DurationRange(struct soap*, tt__DurationRange *const*, const char*, const char*);
SOAP_FMAC3 tt__DurationRange ** SOAP_FMAC4 soap_get_PointerTott__DurationRange(struct soap*, tt__DurationRange **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZSpaces_DEFINED
#define SOAP_TYPE_PointerTott__PTZSpaces_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZSpaces(struct soap*, tt__PTZSpaces *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZSpaces(struct soap*, const char *, int, tt__PTZSpaces *const*, const char *);
SOAP_FMAC3 tt__PTZSpaces ** SOAP_FMAC4 soap_in_PointerTott__PTZSpaces(struct soap*, const char*, tt__PTZSpaces **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZSpaces(struct soap*, tt__PTZSpaces *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZSpaces ** SOAP_FMAC4 soap_get_PointerTott__PTZSpaces(struct soap*, tt__PTZSpaces **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTControlDirectionExtension_DEFINED
#define SOAP_TYPE_PointerTott__PTControlDirectionExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTControlDirectionExtension(struct soap*, tt__PTControlDirectionExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTControlDirectionExtension(struct soap*, const char *, int, tt__PTControlDirectionExtension *const*, const char *);
SOAP_FMAC3 tt__PTControlDirectionExtension ** SOAP_FMAC4 soap_in_PointerTott__PTControlDirectionExtension(struct soap*, const char*, tt__PTControlDirectionExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTControlDirectionExtension(struct soap*, tt__PTControlDirectionExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__PTControlDirectionExtension ** SOAP_FMAC4 soap_get_PointerTott__PTControlDirectionExtension(struct soap*, tt__PTControlDirectionExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Reverse_DEFINED
#define SOAP_TYPE_PointerTott__Reverse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Reverse(struct soap*, tt__Reverse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Reverse(struct soap*, const char *, int, tt__Reverse *const*, const char *);
SOAP_FMAC3 tt__Reverse ** SOAP_FMAC4 soap_in_PointerTott__Reverse(struct soap*, const char*, tt__Reverse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Reverse(struct soap*, tt__Reverse *const*, const char*, const char*);
SOAP_FMAC3 tt__Reverse ** SOAP_FMAC4 soap_get_PointerTott__Reverse(struct soap*, tt__Reverse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__EFlip_DEFINED
#define SOAP_TYPE_PointerTott__EFlip_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__EFlip(struct soap*, tt__EFlip *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__EFlip(struct soap*, const char *, int, tt__EFlip *const*, const char *);
SOAP_FMAC3 tt__EFlip ** SOAP_FMAC4 soap_in_PointerTott__EFlip(struct soap*, const char*, tt__EFlip **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__EFlip(struct soap*, tt__EFlip *const*, const char*, const char*);
SOAP_FMAC3 tt__EFlip ** SOAP_FMAC4 soap_get_PointerTott__EFlip(struct soap*, tt__EFlip **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZConfigurationExtension2_DEFINED
#define SOAP_TYPE_PointerTott__PTZConfigurationExtension2_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZConfigurationExtension2(struct soap*, tt__PTZConfigurationExtension2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZConfigurationExtension2(struct soap*, const char *, int, tt__PTZConfigurationExtension2 *const*, const char *);
SOAP_FMAC3 tt__PTZConfigurationExtension2 ** SOAP_FMAC4 soap_in_PointerTott__PTZConfigurationExtension2(struct soap*, const char*, tt__PTZConfigurationExtension2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZConfigurationExtension2(struct soap*, tt__PTZConfigurationExtension2 *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZConfigurationExtension2 ** SOAP_FMAC4 soap_get_PointerTott__PTZConfigurationExtension2(struct soap*, tt__PTZConfigurationExtension2 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTControlDirection_DEFINED
#define SOAP_TYPE_PointerTott__PTControlDirection_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTControlDirection(struct soap*, tt__PTControlDirection *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTControlDirection(struct soap*, const char *, int, tt__PTControlDirection *const*, const char *);
SOAP_FMAC3 tt__PTControlDirection ** SOAP_FMAC4 soap_in_PointerTott__PTControlDirection(struct soap*, const char*, tt__PTControlDirection **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTControlDirection(struct soap*, tt__PTControlDirection *const*, const char*, const char*);
SOAP_FMAC3 tt__PTControlDirection ** SOAP_FMAC4 soap_get_PointerTott__PTControlDirection(struct soap*, tt__PTControlDirection **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZPresetTourSupportedExtension_DEFINED
#define SOAP_TYPE_PointerTott__PTZPresetTourSupportedExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZPresetTourSupportedExtension(struct soap*, tt__PTZPresetTourSupportedExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZPresetTourSupportedExtension(struct soap*, const char *, int, tt__PTZPresetTourSupportedExtension *const*, const char *);
SOAP_FMAC3 tt__PTZPresetTourSupportedExtension ** SOAP_FMAC4 soap_in_PointerTott__PTZPresetTourSupportedExtension(struct soap*, const char*, tt__PTZPresetTourSupportedExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZPresetTourSupportedExtension(struct soap*, tt__PTZPresetTourSupportedExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZPresetTourSupportedExtension ** SOAP_FMAC4 soap_get_PointerTott__PTZPresetTourSupportedExtension(struct soap*, tt__PTZPresetTourSupportedExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZNodeExtension2_DEFINED
#define SOAP_TYPE_PointerTott__PTZNodeExtension2_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZNodeExtension2(struct soap*, tt__PTZNodeExtension2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZNodeExtension2(struct soap*, const char *, int, tt__PTZNodeExtension2 *const*, const char *);
SOAP_FMAC3 tt__PTZNodeExtension2 ** SOAP_FMAC4 soap_in_PointerTott__PTZNodeExtension2(struct soap*, const char*, tt__PTZNodeExtension2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZNodeExtension2(struct soap*, tt__PTZNodeExtension2 *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZNodeExtension2 ** SOAP_FMAC4 soap_get_PointerTott__PTZNodeExtension2(struct soap*, tt__PTZNodeExtension2 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZPresetTourSupported_DEFINED
#define SOAP_TYPE_PointerTott__PTZPresetTourSupported_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZPresetTourSupported(struct soap*, tt__PTZPresetTourSupported *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZPresetTourSupported(struct soap*, const char *, int, tt__PTZPresetTourSupported *const*, const char *);
SOAP_FMAC3 tt__PTZPresetTourSupported ** SOAP_FMAC4 soap_in_PointerTott__PTZPresetTourSupported(struct soap*, const char*, tt__PTZPresetTourSupported **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZPresetTourSupported(struct soap*, tt__PTZPresetTourSupported *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZPresetTourSupported ** SOAP_FMAC4 soap_get_PointerTott__PTZPresetTourSupported(struct soap*, tt__PTZPresetTourSupported **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__EapMethodExtension_DEFINED
#define SOAP_TYPE_PointerTott__EapMethodExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__EapMethodExtension(struct soap*, tt__EapMethodExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__EapMethodExtension(struct soap*, const char *, int, tt__EapMethodExtension *const*, const char *);
SOAP_FMAC3 tt__EapMethodExtension ** SOAP_FMAC4 soap_in_PointerTott__EapMethodExtension(struct soap*, const char*, tt__EapMethodExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__EapMethodExtension(struct soap*, tt__EapMethodExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__EapMethodExtension ** SOAP_FMAC4 soap_get_PointerTott__EapMethodExtension(struct soap*, tt__EapMethodExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__TLSConfiguration_DEFINED
#define SOAP_TYPE_PointerTott__TLSConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__TLSConfiguration(struct soap*, tt__TLSConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__TLSConfiguration(struct soap*, const char *, int, tt__TLSConfiguration *const*, const char *);
SOAP_FMAC3 tt__TLSConfiguration ** SOAP_FMAC4 soap_in_PointerTott__TLSConfiguration(struct soap*, const char*, tt__TLSConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__TLSConfiguration(struct soap*, tt__TLSConfiguration *const*, const char*, const char*);
SOAP_FMAC3 tt__TLSConfiguration ** SOAP_FMAC4 soap_get_PointerTott__TLSConfiguration(struct soap*, tt__TLSConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Dot1XConfigurationExtension_DEFINED
#define SOAP_TYPE_PointerTott__Dot1XConfigurationExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Dot1XConfigurationExtension(struct soap*, tt__Dot1XConfigurationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Dot1XConfigurationExtension(struct soap*, const char *, int, tt__Dot1XConfigurationExtension *const*, const char *);
SOAP_FMAC3 tt__Dot1XConfigurationExtension ** SOAP_FMAC4 soap_in_PointerTott__Dot1XConfigurationExtension(struct soap*, const char*, tt__Dot1XConfigurationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Dot1XConfigurationExtension(struct soap*, tt__Dot1XConfigurationExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__Dot1XConfigurationExtension ** SOAP_FMAC4 soap_get_PointerTott__Dot1XConfigurationExtension(struct soap*, tt__Dot1XConfigurationExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__EAPMethodConfiguration_DEFINED
#define SOAP_TYPE_PointerTott__EAPMethodConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__EAPMethodConfiguration(struct soap*, tt__EAPMethodConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__EAPMethodConfiguration(struct soap*, const char *, int, tt__EAPMethodConfiguration *const*, const char *);
SOAP_FMAC3 tt__EAPMethodConfiguration ** SOAP_FMAC4 soap_in_PointerTott__EAPMethodConfiguration(struct soap*, const char*, tt__EAPMethodConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__EAPMethodConfiguration(struct soap*, tt__EAPMethodConfiguration *const*, const char*, const char*);
SOAP_FMAC3 tt__EAPMethodConfiguration ** SOAP_FMAC4 soap_get_PointerTott__EAPMethodConfiguration(struct soap*, tt__EAPMethodConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__CertificateInformationExtension_DEFINED
#define SOAP_TYPE_PointerTott__CertificateInformationExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__CertificateInformationExtension(struct soap*, tt__CertificateInformationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__CertificateInformationExtension(struct soap*, const char *, int, tt__CertificateInformationExtension *const*, const char *);
SOAP_FMAC3 tt__CertificateInformationExtension ** SOAP_FMAC4 soap_in_PointerTott__CertificateInformationExtension(struct soap*, const char*, tt__CertificateInformationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__CertificateInformationExtension(struct soap*, tt__CertificateInformationExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__CertificateInformationExtension ** SOAP_FMAC4 soap_get_PointerTott__CertificateInformationExtension(struct soap*, tt__CertificateInformationExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__DateTimeRange_DEFINED
#define SOAP_TYPE_PointerTott__DateTimeRange_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__DateTimeRange(struct soap*, tt__DateTimeRange *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__DateTimeRange(struct soap*, const char *, int, tt__DateTimeRange *const*, const char *);
SOAP_FMAC3 tt__DateTimeRange ** SOAP_FMAC4 soap_in_PointerTott__DateTimeRange(struct soap*, const char*, tt__DateTimeRange **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__DateTimeRange(struct soap*, tt__DateTimeRange *const*, const char*, const char*);
SOAP_FMAC3 tt__DateTimeRange ** SOAP_FMAC4 soap_get_PointerTott__DateTimeRange(struct soap*, tt__DateTimeRange **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__CertificateUsage_DEFINED
#define SOAP_TYPE_PointerTott__CertificateUsage_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__CertificateUsage(struct soap*, tt__CertificateUsage *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__CertificateUsage(struct soap*, const char *, int, tt__CertificateUsage *const*, const char *);
SOAP_FMAC3 tt__CertificateUsage ** SOAP_FMAC4 soap_in_PointerTott__CertificateUsage(struct soap*, const char*, tt__CertificateUsage **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__CertificateUsage(struct soap*, tt__CertificateUsage *const*, const char*, const char*);
SOAP_FMAC3 tt__CertificateUsage ** SOAP_FMAC4 soap_get_PointerTott__CertificateUsage(struct soap*, tt__CertificateUsage **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__CertificateGenerationParametersExtension_DEFINED
#define SOAP_TYPE_PointerTott__CertificateGenerationParametersExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__CertificateGenerationParametersExtension(struct soap*, tt__CertificateGenerationParametersExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__CertificateGenerationParametersExtension(struct soap*, const char *, int, tt__CertificateGenerationParametersExtension *const*, const char *);
SOAP_FMAC3 tt__CertificateGenerationParametersExtension ** SOAP_FMAC4 soap_in_PointerTott__CertificateGenerationParametersExtension(struct soap*, const char*, tt__CertificateGenerationParametersExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__CertificateGenerationParametersExtension(struct soap*, tt__CertificateGenerationParametersExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__CertificateGenerationParametersExtension ** SOAP_FMAC4 soap_get_PointerTott__CertificateGenerationParametersExtension(struct soap*, tt__CertificateGenerationParametersExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__UserExtension_DEFINED
#define SOAP_TYPE_PointerTott__UserExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__UserExtension(struct soap*, tt__UserExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__UserExtension(struct soap*, const char *, int, tt__UserExtension *const*, const char *);
SOAP_FMAC3 tt__UserExtension ** SOAP_FMAC4 soap_in_PointerTott__UserExtension(struct soap*, const char*, tt__UserExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__UserExtension(struct soap*, tt__UserExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__UserExtension ** SOAP_FMAC4 soap_get_PointerTott__UserExtension(struct soap*, tt__UserExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Date_DEFINED
#define SOAP_TYPE_PointerTott__Date_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Date(struct soap*, tt__Date *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Date(struct soap*, const char *, int, tt__Date *const*, const char *);
SOAP_FMAC3 tt__Date ** SOAP_FMAC4 soap_in_PointerTott__Date(struct soap*, const char*, tt__Date **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Date(struct soap*, tt__Date *const*, const char*, const char*);
SOAP_FMAC3 tt__Date ** SOAP_FMAC4 soap_get_PointerTott__Date(struct soap*, tt__Date **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Time_DEFINED
#define SOAP_TYPE_PointerTott__Time_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Time(struct soap*, tt__Time *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Time(struct soap*, const char *, int, tt__Time *const*, const char *);
SOAP_FMAC3 tt__Time ** SOAP_FMAC4 soap_in_PointerTott__Time(struct soap*, const char*, tt__Time **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Time(struct soap*, tt__Time *const*, const char*, const char*);
SOAP_FMAC3 tt__Time ** SOAP_FMAC4 soap_get_PointerTott__Time(struct soap*, tt__Time **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__SystemDateTimeExtension_DEFINED
#define SOAP_TYPE_PointerTott__SystemDateTimeExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__SystemDateTimeExtension(struct soap*, tt__SystemDateTimeExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__SystemDateTimeExtension(struct soap*, const char *, int, tt__SystemDateTimeExtension *const*, const char *);
SOAP_FMAC3 tt__SystemDateTimeExtension ** SOAP_FMAC4 soap_in_PointerTott__SystemDateTimeExtension(struct soap*, const char*, tt__SystemDateTimeExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__SystemDateTimeExtension(struct soap*, tt__SystemDateTimeExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__SystemDateTimeExtension ** SOAP_FMAC4 soap_get_PointerTott__SystemDateTimeExtension(struct soap*, tt__SystemDateTimeExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__SystemLogUri_DEFINED
#define SOAP_TYPE_PointerTott__SystemLogUri_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__SystemLogUri(struct soap*, tt__SystemLogUri *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__SystemLogUri(struct soap*, const char *, int, tt__SystemLogUri *const*, const char *);
SOAP_FMAC3 tt__SystemLogUri ** SOAP_FMAC4 soap_in_PointerTott__SystemLogUri(struct soap*, const char*, tt__SystemLogUri **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__SystemLogUri(struct soap*, tt__SystemLogUri *const*, const char*, const char*);
SOAP_FMAC3 tt__SystemLogUri ** SOAP_FMAC4 soap_get_PointerTott__SystemLogUri(struct soap*, tt__SystemLogUri **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__AnalyticsDeviceExtension_DEFINED
#define SOAP_TYPE_PointerTott__AnalyticsDeviceExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__AnalyticsDeviceExtension(struct soap*, tt__AnalyticsDeviceExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__AnalyticsDeviceExtension(struct soap*, const char *, int, tt__AnalyticsDeviceExtension *const*, const char *);
SOAP_FMAC3 tt__AnalyticsDeviceExtension ** SOAP_FMAC4 soap_in_PointerTott__AnalyticsDeviceExtension(struct soap*, const char*, tt__AnalyticsDeviceExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__AnalyticsDeviceExtension(struct soap*, tt__AnalyticsDeviceExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__AnalyticsDeviceExtension ** SOAP_FMAC4 soap_get_PointerTott__AnalyticsDeviceExtension(struct soap*, tt__AnalyticsDeviceExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__SystemCapabilitiesExtension2_DEFINED
#define SOAP_TYPE_PointerTott__SystemCapabilitiesExtension2_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__SystemCapabilitiesExtension2(struct soap*, tt__SystemCapabilitiesExtension2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__SystemCapabilitiesExtension2(struct soap*, const char *, int, tt__SystemCapabilitiesExtension2 *const*, const char *);
SOAP_FMAC3 tt__SystemCapabilitiesExtension2 ** SOAP_FMAC4 soap_in_PointerTott__SystemCapabilitiesExtension2(struct soap*, const char*, tt__SystemCapabilitiesExtension2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__SystemCapabilitiesExtension2(struct soap*, tt__SystemCapabilitiesExtension2 *const*, const char*, const char*);
SOAP_FMAC3 tt__SystemCapabilitiesExtension2 ** SOAP_FMAC4 soap_get_PointerTott__SystemCapabilitiesExtension2(struct soap*, tt__SystemCapabilitiesExtension2 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__SystemCapabilitiesExtension_DEFINED
#define SOAP_TYPE_PointerTott__SystemCapabilitiesExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__SystemCapabilitiesExtension(struct soap*, tt__SystemCapabilitiesExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__SystemCapabilitiesExtension(struct soap*, const char *, int, tt__SystemCapabilitiesExtension *const*, const char *);
SOAP_FMAC3 tt__SystemCapabilitiesExtension ** SOAP_FMAC4 soap_in_PointerTott__SystemCapabilitiesExtension(struct soap*, const char*, tt__SystemCapabilitiesExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__SystemCapabilitiesExtension(struct soap*, tt__SystemCapabilitiesExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__SystemCapabilitiesExtension ** SOAP_FMAC4 soap_get_PointerTott__SystemCapabilitiesExtension(struct soap*, tt__SystemCapabilitiesExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__SecurityCapabilitiesExtension2_DEFINED
#define SOAP_TYPE_PointerTott__SecurityCapabilitiesExtension2_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__SecurityCapabilitiesExtension2(struct soap*, tt__SecurityCapabilitiesExtension2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__SecurityCapabilitiesExtension2(struct soap*, const char *, int, tt__SecurityCapabilitiesExtension2 *const*, const char *);
SOAP_FMAC3 tt__SecurityCapabilitiesExtension2 ** SOAP_FMAC4 soap_in_PointerTott__SecurityCapabilitiesExtension2(struct soap*, const char*, tt__SecurityCapabilitiesExtension2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__SecurityCapabilitiesExtension2(struct soap*, tt__SecurityCapabilitiesExtension2 *const*, const char*, const char*);
SOAP_FMAC3 tt__SecurityCapabilitiesExtension2 ** SOAP_FMAC4 soap_get_PointerTott__SecurityCapabilitiesExtension2(struct soap*, tt__SecurityCapabilitiesExtension2 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__SecurityCapabilitiesExtension_DEFINED
#define SOAP_TYPE_PointerTott__SecurityCapabilitiesExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__SecurityCapabilitiesExtension(struct soap*, tt__SecurityCapabilitiesExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__SecurityCapabilitiesExtension(struct soap*, const char *, int, tt__SecurityCapabilitiesExtension *const*, const char *);
SOAP_FMAC3 tt__SecurityCapabilitiesExtension ** SOAP_FMAC4 soap_in_PointerTott__SecurityCapabilitiesExtension(struct soap*, const char*, tt__SecurityCapabilitiesExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__SecurityCapabilitiesExtension(struct soap*, tt__SecurityCapabilitiesExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__SecurityCapabilitiesExtension ** SOAP_FMAC4 soap_get_PointerTott__SecurityCapabilitiesExtension(struct soap*, tt__SecurityCapabilitiesExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__NetworkCapabilitiesExtension2_DEFINED
#define SOAP_TYPE_PointerTott__NetworkCapabilitiesExtension2_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__NetworkCapabilitiesExtension2(struct soap*, tt__NetworkCapabilitiesExtension2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__NetworkCapabilitiesExtension2(struct soap*, const char *, int, tt__NetworkCapabilitiesExtension2 *const*, const char *);
SOAP_FMAC3 tt__NetworkCapabilitiesExtension2 ** SOAP_FMAC4 soap_in_PointerTott__NetworkCapabilitiesExtension2(struct soap*, const char*, tt__NetworkCapabilitiesExtension2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__NetworkCapabilitiesExtension2(struct soap*, tt__NetworkCapabilitiesExtension2 *const*, const char*, const char*);
SOAP_FMAC3 tt__NetworkCapabilitiesExtension2 ** SOAP_FMAC4 soap_get_PointerTott__NetworkCapabilitiesExtension2(struct soap*, tt__NetworkCapabilitiesExtension2 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__NetworkCapabilitiesExtension_DEFINED
#define SOAP_TYPE_PointerTott__NetworkCapabilitiesExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__NetworkCapabilitiesExtension(struct soap*, tt__NetworkCapabilitiesExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__NetworkCapabilitiesExtension(struct soap*, const char *, int, tt__NetworkCapabilitiesExtension *const*, const char *);
SOAP_FMAC3 tt__NetworkCapabilitiesExtension ** SOAP_FMAC4 soap_in_PointerTott__NetworkCapabilitiesExtension(struct soap*, const char*, tt__NetworkCapabilitiesExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__NetworkCapabilitiesExtension(struct soap*, tt__NetworkCapabilitiesExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__NetworkCapabilitiesExtension ** SOAP_FMAC4 soap_get_PointerTott__NetworkCapabilitiesExtension(struct soap*, tt__NetworkCapabilitiesExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__RealTimeStreamingCapabilitiesExtension_DEFINED
#define SOAP_TYPE_PointerTott__RealTimeStreamingCapabilitiesExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__RealTimeStreamingCapabilitiesExtension(struct soap*, tt__RealTimeStreamingCapabilitiesExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__RealTimeStreamingCapabilitiesExtension(struct soap*, const char *, int, tt__RealTimeStreamingCapabilitiesExtension *const*, const char *);
SOAP_FMAC3 tt__RealTimeStreamingCapabilitiesExtension ** SOAP_FMAC4 soap_in_PointerTott__RealTimeStreamingCapabilitiesExtension(struct soap*, const char*, tt__RealTimeStreamingCapabilitiesExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__RealTimeStreamingCapabilitiesExtension(struct soap*, tt__RealTimeStreamingCapabilitiesExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__RealTimeStreamingCapabilitiesExtension ** SOAP_FMAC4 soap_get_PointerTott__RealTimeStreamingCapabilitiesExtension(struct soap*, tt__RealTimeStreamingCapabilitiesExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__ProfileCapabilities_DEFINED
#define SOAP_TYPE_PointerTott__ProfileCapabilities_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ProfileCapabilities(struct soap*, tt__ProfileCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ProfileCapabilities(struct soap*, const char *, int, tt__ProfileCapabilities *const*, const char *);
SOAP_FMAC3 tt__ProfileCapabilities ** SOAP_FMAC4 soap_in_PointerTott__ProfileCapabilities(struct soap*, const char*, tt__ProfileCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ProfileCapabilities(struct soap*, tt__ProfileCapabilities *const*, const char*, const char*);
SOAP_FMAC3 tt__ProfileCapabilities ** SOAP_FMAC4 soap_get_PointerTott__ProfileCapabilities(struct soap*, tt__ProfileCapabilities **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__MediaCapabilitiesExtension_DEFINED
#define SOAP_TYPE_PointerTott__MediaCapabilitiesExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__MediaCapabilitiesExtension(struct soap*, tt__MediaCapabilitiesExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__MediaCapabilitiesExtension(struct soap*, const char *, int, tt__MediaCapabilitiesExtension *const*, const char *);
SOAP_FMAC3 tt__MediaCapabilitiesExtension ** SOAP_FMAC4 soap_in_PointerTott__MediaCapabilitiesExtension(struct soap*, const char*, tt__MediaCapabilitiesExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__MediaCapabilitiesExtension(struct soap*, tt__MediaCapabilitiesExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__MediaCapabilitiesExtension ** SOAP_FMAC4 soap_get_PointerTott__MediaCapabilitiesExtension(struct soap*, tt__MediaCapabilitiesExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__RealTimeStreamingCapabilities_DEFINED
#define SOAP_TYPE_PointerTott__RealTimeStreamingCapabilities_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__RealTimeStreamingCapabilities(struct soap*, tt__RealTimeStreamingCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__RealTimeStreamingCapabilities(struct soap*, const char *, int, tt__RealTimeStreamingCapabilities *const*, const char *);
SOAP_FMAC3 tt__RealTimeStreamingCapabilities ** SOAP_FMAC4 soap_in_PointerTott__RealTimeStreamingCapabilities(struct soap*, const char*, tt__RealTimeStreamingCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__RealTimeStreamingCapabilities(struct soap*, tt__RealTimeStreamingCapabilities *const*, const char*, const char*);
SOAP_FMAC3 tt__RealTimeStreamingCapabilities ** SOAP_FMAC4 soap_get_PointerTott__RealTimeStreamingCapabilities(struct soap*, tt__RealTimeStreamingCapabilities **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__IOCapabilitiesExtension2_DEFINED
#define SOAP_TYPE_PointerTott__IOCapabilitiesExtension2_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__IOCapabilitiesExtension2(struct soap*, tt__IOCapabilitiesExtension2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__IOCapabilitiesExtension2(struct soap*, const char *, int, tt__IOCapabilitiesExtension2 *const*, const char *);
SOAP_FMAC3 tt__IOCapabilitiesExtension2 ** SOAP_FMAC4 soap_in_PointerTott__IOCapabilitiesExtension2(struct soap*, const char*, tt__IOCapabilitiesExtension2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__IOCapabilitiesExtension2(struct soap*, tt__IOCapabilitiesExtension2 *const*, const char*, const char*);
SOAP_FMAC3 tt__IOCapabilitiesExtension2 ** SOAP_FMAC4 soap_get_PointerTott__IOCapabilitiesExtension2(struct soap*, tt__IOCapabilitiesExtension2 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__IOCapabilitiesExtension_DEFINED
#define SOAP_TYPE_PointerTott__IOCapabilitiesExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__IOCapabilitiesExtension(struct soap*, tt__IOCapabilitiesExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__IOCapabilitiesExtension(struct soap*, const char *, int, tt__IOCapabilitiesExtension *const*, const char *);
SOAP_FMAC3 tt__IOCapabilitiesExtension ** SOAP_FMAC4 soap_in_PointerTott__IOCapabilitiesExtension(struct soap*, const char*, tt__IOCapabilitiesExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__IOCapabilitiesExtension(struct soap*, tt__IOCapabilitiesExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__IOCapabilitiesExtension ** SOAP_FMAC4 soap_get_PointerTott__IOCapabilitiesExtension(struct soap*, tt__IOCapabilitiesExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__DeviceCapabilitiesExtension_DEFINED
#define SOAP_TYPE_PointerTott__DeviceCapabilitiesExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__DeviceCapabilitiesExtension(struct soap*, tt__DeviceCapabilitiesExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__DeviceCapabilitiesExtension(struct soap*, const char *, int, tt__DeviceCapabilitiesExtension *const*, const char *);
SOAP_FMAC3 tt__DeviceCapabilitiesExtension ** SOAP_FMAC4 soap_in_PointerTott__DeviceCapabilitiesExtension(struct soap*, const char*, tt__DeviceCapabilitiesExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__DeviceCapabilitiesExtension(struct soap*, tt__DeviceCapabilitiesExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__DeviceCapabilitiesExtension ** SOAP_FMAC4 soap_get_PointerTott__DeviceCapabilitiesExtension(struct soap*, tt__DeviceCapabilitiesExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__SecurityCapabilities_DEFINED
#define SOAP_TYPE_PointerTott__SecurityCapabilities_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__SecurityCapabilities(struct soap*, tt__SecurityCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__SecurityCapabilities(struct soap*, const char *, int, tt__SecurityCapabilities *const*, const char *);
SOAP_FMAC3 tt__SecurityCapabilities ** SOAP_FMAC4 soap_in_PointerTott__SecurityCapabilities(struct soap*, const char*, tt__SecurityCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__SecurityCapabilities(struct soap*, tt__SecurityCapabilities *const*, const char*, const char*);
SOAP_FMAC3 tt__SecurityCapabilities ** SOAP_FMAC4 soap_get_PointerTott__SecurityCapabilities(struct soap*, tt__SecurityCapabilities **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__IOCapabilities_DEFINED
#define SOAP_TYPE_PointerTott__IOCapabilities_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__IOCapabilities(struct soap*, tt__IOCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__IOCapabilities(struct soap*, const char *, int, tt__IOCapabilities *const*, const char *);
SOAP_FMAC3 tt__IOCapabilities ** SOAP_FMAC4 soap_in_PointerTott__IOCapabilities(struct soap*, const char*, tt__IOCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__IOCapabilities(struct soap*, tt__IOCapabilities *const*, const char*, const char*);
SOAP_FMAC3 tt__IOCapabilities ** SOAP_FMAC4 soap_get_PointerTott__IOCapabilities(struct soap*, tt__IOCapabilities **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__SystemCapabilities_DEFINED
#define SOAP_TYPE_PointerTott__SystemCapabilities_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__SystemCapabilities(struct soap*, tt__SystemCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__SystemCapabilities(struct soap*, const char *, int, tt__SystemCapabilities *const*, const char *);
SOAP_FMAC3 tt__SystemCapabilities ** SOAP_FMAC4 soap_in_PointerTott__SystemCapabilities(struct soap*, const char*, tt__SystemCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__SystemCapabilities(struct soap*, tt__SystemCapabilities *const*, const char*, const char*);
SOAP_FMAC3 tt__SystemCapabilities ** SOAP_FMAC4 soap_get_PointerTott__SystemCapabilities(struct soap*, tt__SystemCapabilities **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__NetworkCapabilities_DEFINED
#define SOAP_TYPE_PointerTott__NetworkCapabilities_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__NetworkCapabilities(struct soap*, tt__NetworkCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__NetworkCapabilities(struct soap*, const char *, int, tt__NetworkCapabilities *const*, const char *);
SOAP_FMAC3 tt__NetworkCapabilities ** SOAP_FMAC4 soap_in_PointerTott__NetworkCapabilities(struct soap*, const char*, tt__NetworkCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__NetworkCapabilities(struct soap*, tt__NetworkCapabilities *const*, const char*, const char*);
SOAP_FMAC3 tt__NetworkCapabilities ** SOAP_FMAC4 soap_get_PointerTott__NetworkCapabilities(struct soap*, tt__NetworkCapabilities **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__CapabilitiesExtension2_DEFINED
#define SOAP_TYPE_PointerTott__CapabilitiesExtension2_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__CapabilitiesExtension2(struct soap*, tt__CapabilitiesExtension2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__CapabilitiesExtension2(struct soap*, const char *, int, tt__CapabilitiesExtension2 *const*, const char *);
SOAP_FMAC3 tt__CapabilitiesExtension2 ** SOAP_FMAC4 soap_in_PointerTott__CapabilitiesExtension2(struct soap*, const char*, tt__CapabilitiesExtension2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__CapabilitiesExtension2(struct soap*, tt__CapabilitiesExtension2 *const*, const char*, const char*);
SOAP_FMAC3 tt__CapabilitiesExtension2 ** SOAP_FMAC4 soap_get_PointerTott__CapabilitiesExtension2(struct soap*, tt__CapabilitiesExtension2 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__AnalyticsDeviceCapabilities_DEFINED
#define SOAP_TYPE_PointerTott__AnalyticsDeviceCapabilities_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__AnalyticsDeviceCapabilities(struct soap*, tt__AnalyticsDeviceCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__AnalyticsDeviceCapabilities(struct soap*, const char *, int, tt__AnalyticsDeviceCapabilities *const*, const char *);
SOAP_FMAC3 tt__AnalyticsDeviceCapabilities ** SOAP_FMAC4 soap_in_PointerTott__AnalyticsDeviceCapabilities(struct soap*, const char*, tt__AnalyticsDeviceCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__AnalyticsDeviceCapabilities(struct soap*, tt__AnalyticsDeviceCapabilities *const*, const char*, const char*);
SOAP_FMAC3 tt__AnalyticsDeviceCapabilities ** SOAP_FMAC4 soap_get_PointerTott__AnalyticsDeviceCapabilities(struct soap*, tt__AnalyticsDeviceCapabilities **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__ReceiverCapabilities_DEFINED
#define SOAP_TYPE_PointerTott__ReceiverCapabilities_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ReceiverCapabilities(struct soap*, tt__ReceiverCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ReceiverCapabilities(struct soap*, const char *, int, tt__ReceiverCapabilities *const*, const char *);
SOAP_FMAC3 tt__ReceiverCapabilities ** SOAP_FMAC4 soap_in_PointerTott__ReceiverCapabilities(struct soap*, const char*, tt__ReceiverCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ReceiverCapabilities(struct soap*, tt__ReceiverCapabilities *const*, const char*, const char*);
SOAP_FMAC3 tt__ReceiverCapabilities ** SOAP_FMAC4 soap_get_PointerTott__ReceiverCapabilities(struct soap*, tt__ReceiverCapabilities **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__ReplayCapabilities_DEFINED
#define SOAP_TYPE_PointerTott__ReplayCapabilities_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ReplayCapabilities(struct soap*, tt__ReplayCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ReplayCapabilities(struct soap*, const char *, int, tt__ReplayCapabilities *const*, const char *);
SOAP_FMAC3 tt__ReplayCapabilities ** SOAP_FMAC4 soap_in_PointerTott__ReplayCapabilities(struct soap*, const char*, tt__ReplayCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ReplayCapabilities(struct soap*, tt__ReplayCapabilities *const*, const char*, const char*);
SOAP_FMAC3 tt__ReplayCapabilities ** SOAP_FMAC4 soap_get_PointerTott__ReplayCapabilities(struct soap*, tt__ReplayCapabilities **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__SearchCapabilities_DEFINED
#define SOAP_TYPE_PointerTott__SearchCapabilities_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__SearchCapabilities(struct soap*, tt__SearchCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__SearchCapabilities(struct soap*, const char *, int, tt__SearchCapabilities *const*, const char *);
SOAP_FMAC3 tt__SearchCapabilities ** SOAP_FMAC4 soap_in_PointerTott__SearchCapabilities(struct soap*, const char*, tt__SearchCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__SearchCapabilities(struct soap*, tt__SearchCapabilities *const*, const char*, const char*);
SOAP_FMAC3 tt__SearchCapabilities ** SOAP_FMAC4 soap_get_PointerTott__SearchCapabilities(struct soap*, tt__SearchCapabilities **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__RecordingCapabilities_DEFINED
#define SOAP_TYPE_PointerTott__RecordingCapabilities_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__RecordingCapabilities(struct soap*, tt__RecordingCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__RecordingCapabilities(struct soap*, const char *, int, tt__RecordingCapabilities *const*, const char *);
SOAP_FMAC3 tt__RecordingCapabilities ** SOAP_FMAC4 soap_in_PointerTott__RecordingCapabilities(struct soap*, const char*, tt__RecordingCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__RecordingCapabilities(struct soap*, tt__RecordingCapabilities *const*, const char*, const char*);
SOAP_FMAC3 tt__RecordingCapabilities ** SOAP_FMAC4 soap_get_PointerTott__RecordingCapabilities(struct soap*, tt__RecordingCapabilities **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__DisplayCapabilities_DEFINED
#define SOAP_TYPE_PointerTott__DisplayCapabilities_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__DisplayCapabilities(struct soap*, tt__DisplayCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__DisplayCapabilities(struct soap*, const char *, int, tt__DisplayCapabilities *const*, const char *);
SOAP_FMAC3 tt__DisplayCapabilities ** SOAP_FMAC4 soap_in_PointerTott__DisplayCapabilities(struct soap*, const char*, tt__DisplayCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__DisplayCapabilities(struct soap*, tt__DisplayCapabilities *const*, const char*, const char*);
SOAP_FMAC3 tt__DisplayCapabilities ** SOAP_FMAC4 soap_get_PointerTott__DisplayCapabilities(struct soap*, tt__DisplayCapabilities **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__DeviceIOCapabilities_DEFINED
#define SOAP_TYPE_PointerTott__DeviceIOCapabilities_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__DeviceIOCapabilities(struct soap*, tt__DeviceIOCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__DeviceIOCapabilities(struct soap*, const char *, int, tt__DeviceIOCapabilities *const*, const char *);
SOAP_FMAC3 tt__DeviceIOCapabilities ** SOAP_FMAC4 soap_in_PointerTott__DeviceIOCapabilities(struct soap*, const char*, tt__DeviceIOCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__DeviceIOCapabilities(struct soap*, tt__DeviceIOCapabilities *const*, const char*, const char*);
SOAP_FMAC3 tt__DeviceIOCapabilities ** SOAP_FMAC4 soap_get_PointerTott__DeviceIOCapabilities(struct soap*, tt__DeviceIOCapabilities **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__CapabilitiesExtension_DEFINED
#define SOAP_TYPE_PointerTott__CapabilitiesExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__CapabilitiesExtension(struct soap*, tt__CapabilitiesExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__CapabilitiesExtension(struct soap*, const char *, int, tt__CapabilitiesExtension *const*, const char *);
SOAP_FMAC3 tt__CapabilitiesExtension ** SOAP_FMAC4 soap_in_PointerTott__CapabilitiesExtension(struct soap*, const char*, tt__CapabilitiesExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__CapabilitiesExtension(struct soap*, tt__CapabilitiesExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__CapabilitiesExtension ** SOAP_FMAC4 soap_get_PointerTott__CapabilitiesExtension(struct soap*, tt__CapabilitiesExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZCapabilities_DEFINED
#define SOAP_TYPE_PointerTott__PTZCapabilities_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZCapabilities(struct soap*, tt__PTZCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZCapabilities(struct soap*, const char *, int, tt__PTZCapabilities *const*, const char *);
SOAP_FMAC3 tt__PTZCapabilities ** SOAP_FMAC4 soap_in_PointerTott__PTZCapabilities(struct soap*, const char*, tt__PTZCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZCapabilities(struct soap*, tt__PTZCapabilities *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZCapabilities ** SOAP_FMAC4 soap_get_PointerTott__PTZCapabilities(struct soap*, tt__PTZCapabilities **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__MediaCapabilities_DEFINED
#define SOAP_TYPE_PointerTott__MediaCapabilities_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__MediaCapabilities(struct soap*, tt__MediaCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__MediaCapabilities(struct soap*, const char *, int, tt__MediaCapabilities *const*, const char *);
SOAP_FMAC3 tt__MediaCapabilities ** SOAP_FMAC4 soap_in_PointerTott__MediaCapabilities(struct soap*, const char*, tt__MediaCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__MediaCapabilities(struct soap*, tt__MediaCapabilities *const*, const char*, const char*);
SOAP_FMAC3 tt__MediaCapabilities ** SOAP_FMAC4 soap_get_PointerTott__MediaCapabilities(struct soap*, tt__MediaCapabilities **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__ImagingCapabilities_DEFINED
#define SOAP_TYPE_PointerTott__ImagingCapabilities_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ImagingCapabilities(struct soap*, tt__ImagingCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ImagingCapabilities(struct soap*, const char *, int, tt__ImagingCapabilities *const*, const char *);
SOAP_FMAC3 tt__ImagingCapabilities ** SOAP_FMAC4 soap_in_PointerTott__ImagingCapabilities(struct soap*, const char*, tt__ImagingCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ImagingCapabilities(struct soap*, tt__ImagingCapabilities *const*, const char*, const char*);
SOAP_FMAC3 tt__ImagingCapabilities ** SOAP_FMAC4 soap_get_PointerTott__ImagingCapabilities(struct soap*, tt__ImagingCapabilities **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__EventCapabilities_DEFINED
#define SOAP_TYPE_PointerTott__EventCapabilities_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__EventCapabilities(struct soap*, tt__EventCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__EventCapabilities(struct soap*, const char *, int, tt__EventCapabilities *const*, const char *);
SOAP_FMAC3 tt__EventCapabilities ** SOAP_FMAC4 soap_in_PointerTott__EventCapabilities(struct soap*, const char*, tt__EventCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__EventCapabilities(struct soap*, tt__EventCapabilities *const*, const char*, const char*);
SOAP_FMAC3 tt__EventCapabilities ** SOAP_FMAC4 soap_get_PointerTott__EventCapabilities(struct soap*, tt__EventCapabilities **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__DeviceCapabilities_DEFINED
#define SOAP_TYPE_PointerTott__DeviceCapabilities_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__DeviceCapabilities(struct soap*, tt__DeviceCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__DeviceCapabilities(struct soap*, const char *, int, tt__DeviceCapabilities *const*, const char *);
SOAP_FMAC3 tt__DeviceCapabilities ** SOAP_FMAC4 soap_in_PointerTott__DeviceCapabilities(struct soap*, const char*, tt__DeviceCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__DeviceCapabilities(struct soap*, tt__DeviceCapabilities *const*, const char*, const char*);
SOAP_FMAC3 tt__DeviceCapabilities ** SOAP_FMAC4 soap_get_PointerTott__DeviceCapabilities(struct soap*, tt__DeviceCapabilities **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__AnalyticsCapabilities_DEFINED
#define SOAP_TYPE_PointerTott__AnalyticsCapabilities_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__AnalyticsCapabilities(struct soap*, tt__AnalyticsCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__AnalyticsCapabilities(struct soap*, const char *, int, tt__AnalyticsCapabilities *const*, const char *);
SOAP_FMAC3 tt__AnalyticsCapabilities ** SOAP_FMAC4 soap_in_PointerTott__AnalyticsCapabilities(struct soap*, const char*, tt__AnalyticsCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__AnalyticsCapabilities(struct soap*, tt__AnalyticsCapabilities *const*, const char*, const char*);
SOAP_FMAC3 tt__AnalyticsCapabilities ** SOAP_FMAC4 soap_get_PointerTott__AnalyticsCapabilities(struct soap*, tt__AnalyticsCapabilities **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Dot11AvailableNetworksExtension_DEFINED
#define SOAP_TYPE_PointerTott__Dot11AvailableNetworksExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Dot11AvailableNetworksExtension(struct soap*, tt__Dot11AvailableNetworksExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Dot11AvailableNetworksExtension(struct soap*, const char *, int, tt__Dot11AvailableNetworksExtension *const*, const char *);
SOAP_FMAC3 tt__Dot11AvailableNetworksExtension ** SOAP_FMAC4 soap_in_PointerTott__Dot11AvailableNetworksExtension(struct soap*, const char*, tt__Dot11AvailableNetworksExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Dot11AvailableNetworksExtension(struct soap*, tt__Dot11AvailableNetworksExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__Dot11AvailableNetworksExtension ** SOAP_FMAC4 soap_get_PointerTott__Dot11AvailableNetworksExtension(struct soap*, tt__Dot11AvailableNetworksExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Dot11SignalStrength_DEFINED
#define SOAP_TYPE_PointerTott__Dot11SignalStrength_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Dot11SignalStrength(struct soap*, enum tt__Dot11SignalStrength *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Dot11SignalStrength(struct soap*, const char *, int, enum tt__Dot11SignalStrength *const*, const char *);
SOAP_FMAC3 enum tt__Dot11SignalStrength ** SOAP_FMAC4 soap_in_PointerTott__Dot11SignalStrength(struct soap*, const char*, enum tt__Dot11SignalStrength **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Dot11SignalStrength(struct soap*, enum tt__Dot11SignalStrength *const*, const char*, const char*);
SOAP_FMAC3 enum tt__Dot11SignalStrength ** SOAP_FMAC4 soap_get_PointerTott__Dot11SignalStrength(struct soap*, enum tt__Dot11SignalStrength **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Dot11PSKSetExtension_DEFINED
#define SOAP_TYPE_PointerTott__Dot11PSKSetExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Dot11PSKSetExtension(struct soap*, tt__Dot11PSKSetExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Dot11PSKSetExtension(struct soap*, const char *, int, tt__Dot11PSKSetExtension *const*, const char *);
SOAP_FMAC3 tt__Dot11PSKSetExtension ** SOAP_FMAC4 soap_in_PointerTott__Dot11PSKSetExtension(struct soap*, const char*, tt__Dot11PSKSetExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Dot11PSKSetExtension(struct soap*, tt__Dot11PSKSetExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__Dot11PSKSetExtension ** SOAP_FMAC4 soap_get_PointerTott__Dot11PSKSetExtension(struct soap*, tt__Dot11PSKSetExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Dot11PSKPassphrase_DEFINED
#define SOAP_TYPE_PointerTott__Dot11PSKPassphrase_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Dot11PSKPassphrase(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Dot11PSKPassphrase(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTott__Dot11PSKPassphrase(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Dot11PSKPassphrase(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTott__Dot11PSKPassphrase(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Dot11PSK_DEFINED
#define SOAP_TYPE_PointerTott__Dot11PSK_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Dot11PSK(struct soap*, xsd__hexBinary *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Dot11PSK(struct soap*, const char *, int, xsd__hexBinary *const*, const char *);
SOAP_FMAC3 xsd__hexBinary ** SOAP_FMAC4 soap_in_PointerTott__Dot11PSK(struct soap*, const char*, xsd__hexBinary **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Dot11PSK(struct soap*, xsd__hexBinary *const*, const char*, const char*);
SOAP_FMAC3 xsd__hexBinary ** SOAP_FMAC4 soap_get_PointerTott__Dot11PSK(struct soap*, xsd__hexBinary **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Dot11SecurityConfigurationExtension_DEFINED
#define SOAP_TYPE_PointerTott__Dot11SecurityConfigurationExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Dot11SecurityConfigurationExtension(struct soap*, tt__Dot11SecurityConfigurationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Dot11SecurityConfigurationExtension(struct soap*, const char *, int, tt__Dot11SecurityConfigurationExtension *const*, const char *);
SOAP_FMAC3 tt__Dot11SecurityConfigurationExtension ** SOAP_FMAC4 soap_in_PointerTott__Dot11SecurityConfigurationExtension(struct soap*, const char*, tt__Dot11SecurityConfigurationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Dot11SecurityConfigurationExtension(struct soap*, tt__Dot11SecurityConfigurationExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__Dot11SecurityConfigurationExtension ** SOAP_FMAC4 soap_get_PointerTott__Dot11SecurityConfigurationExtension(struct soap*, tt__Dot11SecurityConfigurationExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__ReferenceToken_DEFINED
#define SOAP_TYPE_PointerTott__ReferenceToken_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ReferenceToken(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ReferenceToken(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTott__ReferenceToken(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ReferenceToken(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTott__ReferenceToken(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Dot11PSKSet_DEFINED
#define SOAP_TYPE_PointerTott__Dot11PSKSet_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Dot11PSKSet(struct soap*, tt__Dot11PSKSet *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Dot11PSKSet(struct soap*, const char *, int, tt__Dot11PSKSet *const*, const char *);
SOAP_FMAC3 tt__Dot11PSKSet ** SOAP_FMAC4 soap_in_PointerTott__Dot11PSKSet(struct soap*, const char*, tt__Dot11PSKSet **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Dot11PSKSet(struct soap*, tt__Dot11PSKSet *const*, const char*, const char*);
SOAP_FMAC3 tt__Dot11PSKSet ** SOAP_FMAC4 soap_get_PointerTott__Dot11PSKSet(struct soap*, tt__Dot11PSKSet **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Dot11Cipher_DEFINED
#define SOAP_TYPE_PointerTott__Dot11Cipher_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Dot11Cipher(struct soap*, enum tt__Dot11Cipher *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Dot11Cipher(struct soap*, const char *, int, enum tt__Dot11Cipher *const*, const char *);
SOAP_FMAC3 enum tt__Dot11Cipher ** SOAP_FMAC4 soap_in_PointerTott__Dot11Cipher(struct soap*, const char*, enum tt__Dot11Cipher **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Dot11Cipher(struct soap*, enum tt__Dot11Cipher *const*, const char*, const char*);
SOAP_FMAC3 enum tt__Dot11Cipher ** SOAP_FMAC4 soap_get_PointerTott__Dot11Cipher(struct soap*, enum tt__Dot11Cipher **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Dot11SecurityConfiguration_DEFINED
#define SOAP_TYPE_PointerTott__Dot11SecurityConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Dot11SecurityConfiguration(struct soap*, tt__Dot11SecurityConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Dot11SecurityConfiguration(struct soap*, const char *, int, tt__Dot11SecurityConfiguration *const*, const char *);
SOAP_FMAC3 tt__Dot11SecurityConfiguration ** SOAP_FMAC4 soap_in_PointerTott__Dot11SecurityConfiguration(struct soap*, const char*, tt__Dot11SecurityConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Dot11SecurityConfiguration(struct soap*, tt__Dot11SecurityConfiguration *const*, const char*, const char*);
SOAP_FMAC3 tt__Dot11SecurityConfiguration ** SOAP_FMAC4 soap_get_PointerTott__Dot11SecurityConfiguration(struct soap*, tt__Dot11SecurityConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__IPAddressFilterExtension_DEFINED
#define SOAP_TYPE_PointerTott__IPAddressFilterExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__IPAddressFilterExtension(struct soap*, tt__IPAddressFilterExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__IPAddressFilterExtension(struct soap*, const char *, int, tt__IPAddressFilterExtension *const*, const char *);
SOAP_FMAC3 tt__IPAddressFilterExtension ** SOAP_FMAC4 soap_in_PointerTott__IPAddressFilterExtension(struct soap*, const char*, tt__IPAddressFilterExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__IPAddressFilterExtension(struct soap*, tt__IPAddressFilterExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__IPAddressFilterExtension ** SOAP_FMAC4 soap_get_PointerTott__IPAddressFilterExtension(struct soap*, tt__IPAddressFilterExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__NetworkZeroConfigurationExtension2_DEFINED
#define SOAP_TYPE_PointerTott__NetworkZeroConfigurationExtension2_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__NetworkZeroConfigurationExtension2(struct soap*, tt__NetworkZeroConfigurationExtension2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__NetworkZeroConfigurationExtension2(struct soap*, const char *, int, tt__NetworkZeroConfigurationExtension2 *const*, const char *);
SOAP_FMAC3 tt__NetworkZeroConfigurationExtension2 ** SOAP_FMAC4 soap_in_PointerTott__NetworkZeroConfigurationExtension2(struct soap*, const char*, tt__NetworkZeroConfigurationExtension2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__NetworkZeroConfigurationExtension2(struct soap*, tt__NetworkZeroConfigurationExtension2 *const*, const char*, const char*);
SOAP_FMAC3 tt__NetworkZeroConfigurationExtension2 ** SOAP_FMAC4 soap_get_PointerTott__NetworkZeroConfigurationExtension2(struct soap*, tt__NetworkZeroConfigurationExtension2 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__NetworkZeroConfigurationExtension_DEFINED
#define SOAP_TYPE_PointerTott__NetworkZeroConfigurationExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__NetworkZeroConfigurationExtension(struct soap*, tt__NetworkZeroConfigurationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__NetworkZeroConfigurationExtension(struct soap*, const char *, int, tt__NetworkZeroConfigurationExtension *const*, const char *);
SOAP_FMAC3 tt__NetworkZeroConfigurationExtension ** SOAP_FMAC4 soap_in_PointerTott__NetworkZeroConfigurationExtension(struct soap*, const char*, tt__NetworkZeroConfigurationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__NetworkZeroConfigurationExtension(struct soap*, tt__NetworkZeroConfigurationExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__NetworkZeroConfigurationExtension ** SOAP_FMAC4 soap_get_PointerTott__NetworkZeroConfigurationExtension(struct soap*, tt__NetworkZeroConfigurationExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__IPv6DHCPConfiguration_DEFINED
#define SOAP_TYPE_PointerTott__IPv6DHCPConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__IPv6DHCPConfiguration(struct soap*, enum tt__IPv6DHCPConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__IPv6DHCPConfiguration(struct soap*, const char *, int, enum tt__IPv6DHCPConfiguration *const*, const char *);
SOAP_FMAC3 enum tt__IPv6DHCPConfiguration ** SOAP_FMAC4 soap_in_PointerTott__IPv6DHCPConfiguration(struct soap*, const char*, enum tt__IPv6DHCPConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__IPv6DHCPConfiguration(struct soap*, enum tt__IPv6DHCPConfiguration *const*, const char*, const char*);
SOAP_FMAC3 enum tt__IPv6DHCPConfiguration ** SOAP_FMAC4 soap_get_PointerTott__IPv6DHCPConfiguration(struct soap*, enum tt__IPv6DHCPConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__NetworkInterfaceSetConfigurationExtension2_DEFINED
#define SOAP_TYPE_PointerTott__NetworkInterfaceSetConfigurationExtension2_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__NetworkInterfaceSetConfigurationExtension2(struct soap*, tt__NetworkInterfaceSetConfigurationExtension2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__NetworkInterfaceSetConfigurationExtension2(struct soap*, const char *, int, tt__NetworkInterfaceSetConfigurationExtension2 *const*, const char *);
SOAP_FMAC3 tt__NetworkInterfaceSetConfigurationExtension2 ** SOAP_FMAC4 soap_in_PointerTott__NetworkInterfaceSetConfigurationExtension2(struct soap*, const char*, tt__NetworkInterfaceSetConfigurationExtension2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__NetworkInterfaceSetConfigurationExtension2(struct soap*, tt__NetworkInterfaceSetConfigurationExtension2 *const*, const char*, const char*);
SOAP_FMAC3 tt__NetworkInterfaceSetConfigurationExtension2 ** SOAP_FMAC4 soap_get_PointerTott__NetworkInterfaceSetConfigurationExtension2(struct soap*, tt__NetworkInterfaceSetConfigurationExtension2 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__NetworkInterfaceSetConfigurationExtension_DEFINED
#define SOAP_TYPE_PointerTott__NetworkInterfaceSetConfigurationExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__NetworkInterfaceSetConfigurationExtension(struct soap*, tt__NetworkInterfaceSetConfigurationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__NetworkInterfaceSetConfigurationExtension(struct soap*, const char *, int, tt__NetworkInterfaceSetConfigurationExtension *const*, const char *);
SOAP_FMAC3 tt__NetworkInterfaceSetConfigurationExtension ** SOAP_FMAC4 soap_in_PointerTott__NetworkInterfaceSetConfigurationExtension(struct soap*, const char*, tt__NetworkInterfaceSetConfigurationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__NetworkInterfaceSetConfigurationExtension(struct soap*, tt__NetworkInterfaceSetConfigurationExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__NetworkInterfaceSetConfigurationExtension ** SOAP_FMAC4 soap_get_PointerTott__NetworkInterfaceSetConfigurationExtension(struct soap*, tt__NetworkInterfaceSetConfigurationExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__IPv6NetworkInterfaceSetConfiguration_DEFINED
#define SOAP_TYPE_PointerTott__IPv6NetworkInterfaceSetConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__IPv6NetworkInterfaceSetConfiguration(struct soap*, tt__IPv6NetworkInterfaceSetConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__IPv6NetworkInterfaceSetConfiguration(struct soap*, const char *, int, tt__IPv6NetworkInterfaceSetConfiguration *const*, const char *);
SOAP_FMAC3 tt__IPv6NetworkInterfaceSetConfiguration ** SOAP_FMAC4 soap_in_PointerTott__IPv6NetworkInterfaceSetConfiguration(struct soap*, const char*, tt__IPv6NetworkInterfaceSetConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__IPv6NetworkInterfaceSetConfiguration(struct soap*, tt__IPv6NetworkInterfaceSetConfiguration *const*, const char*, const char*);
SOAP_FMAC3 tt__IPv6NetworkInterfaceSetConfiguration ** SOAP_FMAC4 soap_get_PointerTott__IPv6NetworkInterfaceSetConfiguration(struct soap*, tt__IPv6NetworkInterfaceSetConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__IPv4NetworkInterfaceSetConfiguration_DEFINED
#define SOAP_TYPE_PointerTott__IPv4NetworkInterfaceSetConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__IPv4NetworkInterfaceSetConfiguration(struct soap*, tt__IPv4NetworkInterfaceSetConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__IPv4NetworkInterfaceSetConfiguration(struct soap*, const char *, int, tt__IPv4NetworkInterfaceSetConfiguration *const*, const char *);
SOAP_FMAC3 tt__IPv4NetworkInterfaceSetConfiguration ** SOAP_FMAC4 soap_in_PointerTott__IPv4NetworkInterfaceSetConfiguration(struct soap*, const char*, tt__IPv4NetworkInterfaceSetConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__IPv4NetworkInterfaceSetConfiguration(struct soap*, tt__IPv4NetworkInterfaceSetConfiguration *const*, const char*, const char*);
SOAP_FMAC3 tt__IPv4NetworkInterfaceSetConfiguration ** SOAP_FMAC4 soap_get_PointerTott__IPv4NetworkInterfaceSetConfiguration(struct soap*, tt__IPv4NetworkInterfaceSetConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__DynamicDNSInformationExtension_DEFINED
#define SOAP_TYPE_PointerTott__DynamicDNSInformationExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__DynamicDNSInformationExtension(struct soap*, tt__DynamicDNSInformationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__DynamicDNSInformationExtension(struct soap*, const char *, int, tt__DynamicDNSInformationExtension *const*, const char *);
SOAP_FMAC3 tt__DynamicDNSInformationExtension ** SOAP_FMAC4 soap_in_PointerTott__DynamicDNSInformationExtension(struct soap*, const char*, tt__DynamicDNSInformationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__DynamicDNSInformationExtension(struct soap*, tt__DynamicDNSInformationExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__DynamicDNSInformationExtension ** SOAP_FMAC4 soap_get_PointerTott__DynamicDNSInformationExtension(struct soap*, tt__DynamicDNSInformationExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__NTPInformationExtension_DEFINED
#define SOAP_TYPE_PointerTott__NTPInformationExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__NTPInformationExtension(struct soap*, tt__NTPInformationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__NTPInformationExtension(struct soap*, const char *, int, tt__NTPInformationExtension *const*, const char *);
SOAP_FMAC3 tt__NTPInformationExtension ** SOAP_FMAC4 soap_in_PointerTott__NTPInformationExtension(struct soap*, const char*, tt__NTPInformationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__NTPInformationExtension(struct soap*, tt__NTPInformationExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__NTPInformationExtension ** SOAP_FMAC4 soap_get_PointerTott__NTPInformationExtension(struct soap*, tt__NTPInformationExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__DNSInformationExtension_DEFINED
#define SOAP_TYPE_PointerTott__DNSInformationExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__DNSInformationExtension(struct soap*, tt__DNSInformationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__DNSInformationExtension(struct soap*, const char *, int, tt__DNSInformationExtension *const*, const char *);
SOAP_FMAC3 tt__DNSInformationExtension ** SOAP_FMAC4 soap_in_PointerTott__DNSInformationExtension(struct soap*, const char*, tt__DNSInformationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__DNSInformationExtension(struct soap*, tt__DNSInformationExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__DNSInformationExtension ** SOAP_FMAC4 soap_get_PointerTott__DNSInformationExtension(struct soap*, tt__DNSInformationExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__HostnameInformationExtension_DEFINED
#define SOAP_TYPE_PointerTott__HostnameInformationExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__HostnameInformationExtension(struct soap*, tt__HostnameInformationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__HostnameInformationExtension(struct soap*, const char *, int, tt__HostnameInformationExtension *const*, const char *);
SOAP_FMAC3 tt__HostnameInformationExtension ** SOAP_FMAC4 soap_in_PointerTott__HostnameInformationExtension(struct soap*, const char*, tt__HostnameInformationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__HostnameInformationExtension(struct soap*, tt__HostnameInformationExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__HostnameInformationExtension ** SOAP_FMAC4 soap_get_PointerTott__HostnameInformationExtension(struct soap*, tt__HostnameInformationExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__NetworkHostExtension_DEFINED
#define SOAP_TYPE_PointerTott__NetworkHostExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__NetworkHostExtension(struct soap*, tt__NetworkHostExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__NetworkHostExtension(struct soap*, const char *, int, tt__NetworkHostExtension *const*, const char *);
SOAP_FMAC3 tt__NetworkHostExtension ** SOAP_FMAC4 soap_in_PointerTott__NetworkHostExtension(struct soap*, const char*, tt__NetworkHostExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__NetworkHostExtension(struct soap*, tt__NetworkHostExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__NetworkHostExtension ** SOAP_FMAC4 soap_get_PointerTott__NetworkHostExtension(struct soap*, tt__NetworkHostExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__IPv6Address_DEFINED
#define SOAP_TYPE_PointerTott__IPv6Address_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__IPv6Address(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__IPv6Address(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTott__IPv6Address(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__IPv6Address(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTott__IPv6Address(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__IPv4Address_DEFINED
#define SOAP_TYPE_PointerTott__IPv4Address_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__IPv4Address(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__IPv4Address(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTott__IPv4Address(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__IPv4Address(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTott__IPv4Address(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__NetworkProtocolExtension_DEFINED
#define SOAP_TYPE_PointerTott__NetworkProtocolExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__NetworkProtocolExtension(struct soap*, tt__NetworkProtocolExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__NetworkProtocolExtension(struct soap*, const char *, int, tt__NetworkProtocolExtension *const*, const char *);
SOAP_FMAC3 tt__NetworkProtocolExtension ** SOAP_FMAC4 soap_in_PointerTott__NetworkProtocolExtension(struct soap*, const char*, tt__NetworkProtocolExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__NetworkProtocolExtension(struct soap*, tt__NetworkProtocolExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__NetworkProtocolExtension ** SOAP_FMAC4 soap_get_PointerTott__NetworkProtocolExtension(struct soap*, tt__NetworkProtocolExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__IPv6ConfigurationExtension_DEFINED
#define SOAP_TYPE_PointerTott__IPv6ConfigurationExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__IPv6ConfigurationExtension(struct soap*, tt__IPv6ConfigurationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__IPv6ConfigurationExtension(struct soap*, const char *, int, tt__IPv6ConfigurationExtension *const*, const char *);
SOAP_FMAC3 tt__IPv6ConfigurationExtension ** SOAP_FMAC4 soap_in_PointerTott__IPv6ConfigurationExtension(struct soap*, const char*, tt__IPv6ConfigurationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__IPv6ConfigurationExtension(struct soap*, tt__IPv6ConfigurationExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__IPv6ConfigurationExtension ** SOAP_FMAC4 soap_get_PointerTott__IPv6ConfigurationExtension(struct soap*, tt__IPv6ConfigurationExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PrefixedIPv6Address_DEFINED
#define SOAP_TYPE_PointerTott__PrefixedIPv6Address_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PrefixedIPv6Address(struct soap*, tt__PrefixedIPv6Address *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PrefixedIPv6Address(struct soap*, const char *, int, tt__PrefixedIPv6Address *const*, const char *);
SOAP_FMAC3 tt__PrefixedIPv6Address ** SOAP_FMAC4 soap_in_PointerTott__PrefixedIPv6Address(struct soap*, const char*, tt__PrefixedIPv6Address **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PrefixedIPv6Address(struct soap*, tt__PrefixedIPv6Address *const*, const char*, const char*);
SOAP_FMAC3 tt__PrefixedIPv6Address ** SOAP_FMAC4 soap_get_PointerTott__PrefixedIPv6Address(struct soap*, tt__PrefixedIPv6Address **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PrefixedIPv4Address_DEFINED
#define SOAP_TYPE_PointerTott__PrefixedIPv4Address_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PrefixedIPv4Address(struct soap*, tt__PrefixedIPv4Address *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PrefixedIPv4Address(struct soap*, const char *, int, tt__PrefixedIPv4Address *const*, const char *);
SOAP_FMAC3 tt__PrefixedIPv4Address ** SOAP_FMAC4 soap_in_PointerTott__PrefixedIPv4Address(struct soap*, const char*, tt__PrefixedIPv4Address **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PrefixedIPv4Address(struct soap*, tt__PrefixedIPv4Address *const*, const char*, const char*);
SOAP_FMAC3 tt__PrefixedIPv4Address ** SOAP_FMAC4 soap_get_PointerTott__PrefixedIPv4Address(struct soap*, tt__PrefixedIPv4Address **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__IPv4Configuration_DEFINED
#define SOAP_TYPE_PointerTott__IPv4Configuration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__IPv4Configuration(struct soap*, tt__IPv4Configuration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__IPv4Configuration(struct soap*, const char *, int, tt__IPv4Configuration *const*, const char *);
SOAP_FMAC3 tt__IPv4Configuration ** SOAP_FMAC4 soap_in_PointerTott__IPv4Configuration(struct soap*, const char*, tt__IPv4Configuration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__IPv4Configuration(struct soap*, tt__IPv4Configuration *const*, const char*, const char*);
SOAP_FMAC3 tt__IPv4Configuration ** SOAP_FMAC4 soap_get_PointerTott__IPv4Configuration(struct soap*, tt__IPv4Configuration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__IPv6Configuration_DEFINED
#define SOAP_TYPE_PointerTott__IPv6Configuration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__IPv6Configuration(struct soap*, tt__IPv6Configuration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__IPv6Configuration(struct soap*, const char *, int, tt__IPv6Configuration *const*, const char *);
SOAP_FMAC3 tt__IPv6Configuration ** SOAP_FMAC4 soap_in_PointerTott__IPv6Configuration(struct soap*, const char*, tt__IPv6Configuration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__IPv6Configuration(struct soap*, tt__IPv6Configuration *const*, const char*, const char*);
SOAP_FMAC3 tt__IPv6Configuration ** SOAP_FMAC4 soap_get_PointerTott__IPv6Configuration(struct soap*, tt__IPv6Configuration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__NetworkInterfaceConnectionSetting_DEFINED
#define SOAP_TYPE_PointerTott__NetworkInterfaceConnectionSetting_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__NetworkInterfaceConnectionSetting(struct soap*, tt__NetworkInterfaceConnectionSetting *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__NetworkInterfaceConnectionSetting(struct soap*, const char *, int, tt__NetworkInterfaceConnectionSetting *const*, const char *);
SOAP_FMAC3 tt__NetworkInterfaceConnectionSetting ** SOAP_FMAC4 soap_in_PointerTott__NetworkInterfaceConnectionSetting(struct soap*, const char*, tt__NetworkInterfaceConnectionSetting **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__NetworkInterfaceConnectionSetting(struct soap*, tt__NetworkInterfaceConnectionSetting *const*, const char*, const char*);
SOAP_FMAC3 tt__NetworkInterfaceConnectionSetting ** SOAP_FMAC4 soap_get_PointerTott__NetworkInterfaceConnectionSetting(struct soap*, tt__NetworkInterfaceConnectionSetting **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__NetworkInterfaceExtension2_DEFINED
#define SOAP_TYPE_PointerTott__NetworkInterfaceExtension2_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__NetworkInterfaceExtension2(struct soap*, tt__NetworkInterfaceExtension2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__NetworkInterfaceExtension2(struct soap*, const char *, int, tt__NetworkInterfaceExtension2 *const*, const char *);
SOAP_FMAC3 tt__NetworkInterfaceExtension2 ** SOAP_FMAC4 soap_in_PointerTott__NetworkInterfaceExtension2(struct soap*, const char*, tt__NetworkInterfaceExtension2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__NetworkInterfaceExtension2(struct soap*, tt__NetworkInterfaceExtension2 *const*, const char*, const char*);
SOAP_FMAC3 tt__NetworkInterfaceExtension2 ** SOAP_FMAC4 soap_get_PointerTott__NetworkInterfaceExtension2(struct soap*, tt__NetworkInterfaceExtension2 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Dot11Configuration_DEFINED
#define SOAP_TYPE_PointerTott__Dot11Configuration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Dot11Configuration(struct soap*, tt__Dot11Configuration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Dot11Configuration(struct soap*, const char *, int, tt__Dot11Configuration *const*, const char *);
SOAP_FMAC3 tt__Dot11Configuration ** SOAP_FMAC4 soap_in_PointerTott__Dot11Configuration(struct soap*, const char*, tt__Dot11Configuration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Dot11Configuration(struct soap*, tt__Dot11Configuration *const*, const char*, const char*);
SOAP_FMAC3 tt__Dot11Configuration ** SOAP_FMAC4 soap_get_PointerTott__Dot11Configuration(struct soap*, tt__Dot11Configuration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Dot3Configuration_DEFINED
#define SOAP_TYPE_PointerTott__Dot3Configuration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Dot3Configuration(struct soap*, tt__Dot3Configuration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Dot3Configuration(struct soap*, const char *, int, tt__Dot3Configuration *const*, const char *);
SOAP_FMAC3 tt__Dot3Configuration ** SOAP_FMAC4 soap_in_PointerTott__Dot3Configuration(struct soap*, const char*, tt__Dot3Configuration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Dot3Configuration(struct soap*, tt__Dot3Configuration *const*, const char*, const char*);
SOAP_FMAC3 tt__Dot3Configuration ** SOAP_FMAC4 soap_get_PointerTott__Dot3Configuration(struct soap*, tt__Dot3Configuration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Transport_DEFINED
#define SOAP_TYPE_PointerTott__Transport_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Transport(struct soap*, tt__Transport *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Transport(struct soap*, const char *, int, tt__Transport *const*, const char *);
SOAP_FMAC3 tt__Transport ** SOAP_FMAC4 soap_in_PointerTott__Transport(struct soap*, const char*, tt__Transport **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Transport(struct soap*, tt__Transport *const*, const char*, const char*);
SOAP_FMAC3 tt__Transport ** SOAP_FMAC4 soap_get_PointerTott__Transport(struct soap*, tt__Transport **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__AudioDecoderConfigurationOptionsExtension_DEFINED
#define SOAP_TYPE_PointerTott__AudioDecoderConfigurationOptionsExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__AudioDecoderConfigurationOptionsExtension(struct soap*, tt__AudioDecoderConfigurationOptionsExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__AudioDecoderConfigurationOptionsExtension(struct soap*, const char *, int, tt__AudioDecoderConfigurationOptionsExtension *const*, const char *);
SOAP_FMAC3 tt__AudioDecoderConfigurationOptionsExtension ** SOAP_FMAC4 soap_in_PointerTott__AudioDecoderConfigurationOptionsExtension(struct soap*, const char*, tt__AudioDecoderConfigurationOptionsExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__AudioDecoderConfigurationOptionsExtension(struct soap*, tt__AudioDecoderConfigurationOptionsExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__AudioDecoderConfigurationOptionsExtension ** SOAP_FMAC4 soap_get_PointerTott__AudioDecoderConfigurationOptionsExtension(struct soap*, tt__AudioDecoderConfigurationOptionsExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__G726DecOptions_DEFINED
#define SOAP_TYPE_PointerTott__G726DecOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__G726DecOptions(struct soap*, tt__G726DecOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__G726DecOptions(struct soap*, const char *, int, tt__G726DecOptions *const*, const char *);
SOAP_FMAC3 tt__G726DecOptions ** SOAP_FMAC4 soap_in_PointerTott__G726DecOptions(struct soap*, const char*, tt__G726DecOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__G726DecOptions(struct soap*, tt__G726DecOptions *const*, const char*, const char*);
SOAP_FMAC3 tt__G726DecOptions ** SOAP_FMAC4 soap_get_PointerTott__G726DecOptions(struct soap*, tt__G726DecOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__G711DecOptions_DEFINED
#define SOAP_TYPE_PointerTott__G711DecOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__G711DecOptions(struct soap*, tt__G711DecOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__G711DecOptions(struct soap*, const char *, int, tt__G711DecOptions *const*, const char *);
SOAP_FMAC3 tt__G711DecOptions ** SOAP_FMAC4 soap_in_PointerTott__G711DecOptions(struct soap*, const char*, tt__G711DecOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__G711DecOptions(struct soap*, tt__G711DecOptions *const*, const char*, const char*);
SOAP_FMAC3 tt__G711DecOptions ** SOAP_FMAC4 soap_get_PointerTott__G711DecOptions(struct soap*, tt__G711DecOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__AACDecOptions_DEFINED
#define SOAP_TYPE_PointerTott__AACDecOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__AACDecOptions(struct soap*, tt__AACDecOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__AACDecOptions(struct soap*, const char *, int, tt__AACDecOptions *const*, const char *);
SOAP_FMAC3 tt__AACDecOptions ** SOAP_FMAC4 soap_in_PointerTott__AACDecOptions(struct soap*, const char*, tt__AACDecOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__AACDecOptions(struct soap*, tt__AACDecOptions *const*, const char*, const char*);
SOAP_FMAC3 tt__AACDecOptions ** SOAP_FMAC4 soap_get_PointerTott__AACDecOptions(struct soap*, tt__AACDecOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__VideoDecoderConfigurationOptionsExtension_DEFINED
#define SOAP_TYPE_PointerTott__VideoDecoderConfigurationOptionsExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__VideoDecoderConfigurationOptionsExtension(struct soap*, tt__VideoDecoderConfigurationOptionsExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__VideoDecoderConfigurationOptionsExtension(struct soap*, const char *, int, tt__VideoDecoderConfigurationOptionsExtension *const*, const char *);
SOAP_FMAC3 tt__VideoDecoderConfigurationOptionsExtension ** SOAP_FMAC4 soap_in_PointerTott__VideoDecoderConfigurationOptionsExtension(struct soap*, const char*, tt__VideoDecoderConfigurationOptionsExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__VideoDecoderConfigurationOptionsExtension(struct soap*, tt__VideoDecoderConfigurationOptionsExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__VideoDecoderConfigurationOptionsExtension ** SOAP_FMAC4 soap_get_PointerTott__VideoDecoderConfigurationOptionsExtension(struct soap*, tt__VideoDecoderConfigurationOptionsExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Mpeg4DecOptions_DEFINED
#define SOAP_TYPE_PointerTott__Mpeg4DecOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Mpeg4DecOptions(struct soap*, tt__Mpeg4DecOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Mpeg4DecOptions(struct soap*, const char *, int, tt__Mpeg4DecOptions *const*, const char *);
SOAP_FMAC3 tt__Mpeg4DecOptions ** SOAP_FMAC4 soap_in_PointerTott__Mpeg4DecOptions(struct soap*, const char*, tt__Mpeg4DecOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Mpeg4DecOptions(struct soap*, tt__Mpeg4DecOptions *const*, const char*, const char*);
SOAP_FMAC3 tt__Mpeg4DecOptions ** SOAP_FMAC4 soap_get_PointerTott__Mpeg4DecOptions(struct soap*, tt__Mpeg4DecOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__H264DecOptions_DEFINED
#define SOAP_TYPE_PointerTott__H264DecOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__H264DecOptions(struct soap*, tt__H264DecOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__H264DecOptions(struct soap*, const char *, int, tt__H264DecOptions *const*, const char *);
SOAP_FMAC3 tt__H264DecOptions ** SOAP_FMAC4 soap_in_PointerTott__H264DecOptions(struct soap*, const char*, tt__H264DecOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__H264DecOptions(struct soap*, tt__H264DecOptions *const*, const char*, const char*);
SOAP_FMAC3 tt__H264DecOptions ** SOAP_FMAC4 soap_get_PointerTott__H264DecOptions(struct soap*, tt__H264DecOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__JpegDecOptions_DEFINED
#define SOAP_TYPE_PointerTott__JpegDecOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__JpegDecOptions(struct soap*, tt__JpegDecOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__JpegDecOptions(struct soap*, const char *, int, tt__JpegDecOptions *const*, const char *);
SOAP_FMAC3 tt__JpegDecOptions ** SOAP_FMAC4 soap_in_PointerTott__JpegDecOptions(struct soap*, const char*, tt__JpegDecOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__JpegDecOptions(struct soap*, tt__JpegDecOptions *const*, const char*, const char*);
SOAP_FMAC3 tt__JpegDecOptions ** SOAP_FMAC4 soap_get_PointerTott__JpegDecOptions(struct soap*, tt__JpegDecOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZStatusFilterOptionsExtension_DEFINED
#define SOAP_TYPE_PointerTott__PTZStatusFilterOptionsExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZStatusFilterOptionsExtension(struct soap*, tt__PTZStatusFilterOptionsExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZStatusFilterOptionsExtension(struct soap*, const char *, int, tt__PTZStatusFilterOptionsExtension *const*, const char *);
SOAP_FMAC3 tt__PTZStatusFilterOptionsExtension ** SOAP_FMAC4 soap_in_PointerTott__PTZStatusFilterOptionsExtension(struct soap*, const char*, tt__PTZStatusFilterOptionsExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZStatusFilterOptionsExtension(struct soap*, tt__PTZStatusFilterOptionsExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZStatusFilterOptionsExtension ** SOAP_FMAC4 soap_get_PointerTott__PTZStatusFilterOptionsExtension(struct soap*, tt__PTZStatusFilterOptionsExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__MetadataConfigurationOptionsExtension2_DEFINED
#define SOAP_TYPE_PointerTott__MetadataConfigurationOptionsExtension2_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__MetadataConfigurationOptionsExtension2(struct soap*, tt__MetadataConfigurationOptionsExtension2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__MetadataConfigurationOptionsExtension2(struct soap*, const char *, int, tt__MetadataConfigurationOptionsExtension2 *const*, const char *);
SOAP_FMAC3 tt__MetadataConfigurationOptionsExtension2 ** SOAP_FMAC4 soap_in_PointerTott__MetadataConfigurationOptionsExtension2(struct soap*, const char*, tt__MetadataConfigurationOptionsExtension2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__MetadataConfigurationOptionsExtension2(struct soap*, tt__MetadataConfigurationOptionsExtension2 *const*, const char*, const char*);
SOAP_FMAC3 tt__MetadataConfigurationOptionsExtension2 ** SOAP_FMAC4 soap_get_PointerTott__MetadataConfigurationOptionsExtension2(struct soap*, tt__MetadataConfigurationOptionsExtension2 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__MetadataConfigurationOptionsExtension_DEFINED
#define SOAP_TYPE_PointerTott__MetadataConfigurationOptionsExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__MetadataConfigurationOptionsExtension(struct soap*, tt__MetadataConfigurationOptionsExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__MetadataConfigurationOptionsExtension(struct soap*, const char *, int, tt__MetadataConfigurationOptionsExtension *const*, const char *);
SOAP_FMAC3 tt__MetadataConfigurationOptionsExtension ** SOAP_FMAC4 soap_in_PointerTott__MetadataConfigurationOptionsExtension(struct soap*, const char*, tt__MetadataConfigurationOptionsExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__MetadataConfigurationOptionsExtension(struct soap*, tt__MetadataConfigurationOptionsExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__MetadataConfigurationOptionsExtension ** SOAP_FMAC4 soap_get_PointerTott__MetadataConfigurationOptionsExtension(struct soap*, tt__MetadataConfigurationOptionsExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZStatusFilterOptions_DEFINED
#define SOAP_TYPE_PointerTott__PTZStatusFilterOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZStatusFilterOptions(struct soap*, tt__PTZStatusFilterOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZStatusFilterOptions(struct soap*, const char *, int, tt__PTZStatusFilterOptions *const*, const char *);
SOAP_FMAC3 tt__PTZStatusFilterOptions ** SOAP_FMAC4 soap_in_PointerTott__PTZStatusFilterOptions(struct soap*, const char*, tt__PTZStatusFilterOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZStatusFilterOptions(struct soap*, tt__PTZStatusFilterOptions *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZStatusFilterOptions ** SOAP_FMAC4 soap_get_PointerTott__PTZStatusFilterOptions(struct soap*, tt__PTZStatusFilterOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tt__EventSubscription_SubscriptionPolicy_DEFINED
#define SOAP_TYPE_PointerTo_tt__EventSubscription_SubscriptionPolicy_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tt__EventSubscription_SubscriptionPolicy(struct soap*, _tt__EventSubscription_SubscriptionPolicy *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tt__EventSubscription_SubscriptionPolicy(struct soap*, const char *, int, _tt__EventSubscription_SubscriptionPolicy *const*, const char *);
SOAP_FMAC3 _tt__EventSubscription_SubscriptionPolicy ** SOAP_FMAC4 soap_in_PointerTo_tt__EventSubscription_SubscriptionPolicy(struct soap*, const char*, _tt__EventSubscription_SubscriptionPolicy **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tt__EventSubscription_SubscriptionPolicy(struct soap*, _tt__EventSubscription_SubscriptionPolicy *const*, const char*, const char*);
SOAP_FMAC3 _tt__EventSubscription_SubscriptionPolicy ** SOAP_FMAC4 soap_get_PointerTo_tt__EventSubscription_SubscriptionPolicy(struct soap*, _tt__EventSubscription_SubscriptionPolicy **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowsnt__FilterType_DEFINED
#define SOAP_TYPE_PointerTowsnt__FilterType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsnt__FilterType(struct soap*, wsnt__FilterType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsnt__FilterType(struct soap*, const char *, int, wsnt__FilterType *const*, const char *);
SOAP_FMAC3 wsnt__FilterType ** SOAP_FMAC4 soap_in_PointerTowsnt__FilterType(struct soap*, const char*, wsnt__FilterType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsnt__FilterType(struct soap*, wsnt__FilterType *const*, const char*, const char*);
SOAP_FMAC3 wsnt__FilterType ** SOAP_FMAC4 soap_get_PointerTowsnt__FilterType(struct soap*, wsnt__FilterType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__AudioEncoderConfigurationOption_DEFINED
#define SOAP_TYPE_PointerTott__AudioEncoderConfigurationOption_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__AudioEncoderConfigurationOption(struct soap*, tt__AudioEncoderConfigurationOption *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__AudioEncoderConfigurationOption(struct soap*, const char *, int, tt__AudioEncoderConfigurationOption *const*, const char *);
SOAP_FMAC3 tt__AudioEncoderConfigurationOption ** SOAP_FMAC4 soap_in_PointerTott__AudioEncoderConfigurationOption(struct soap*, const char*, tt__AudioEncoderConfigurationOption **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__AudioEncoderConfigurationOption(struct soap*, tt__AudioEncoderConfigurationOption *const*, const char*, const char*);
SOAP_FMAC3 tt__AudioEncoderConfigurationOption ** SOAP_FMAC4 soap_get_PointerTott__AudioEncoderConfigurationOption(struct soap*, tt__AudioEncoderConfigurationOption **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__AudioSourceOptionsExtension_DEFINED
#define SOAP_TYPE_PointerTott__AudioSourceOptionsExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__AudioSourceOptionsExtension(struct soap*, tt__AudioSourceOptionsExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__AudioSourceOptionsExtension(struct soap*, const char *, int, tt__AudioSourceOptionsExtension *const*, const char *);
SOAP_FMAC3 tt__AudioSourceOptionsExtension ** SOAP_FMAC4 soap_in_PointerTott__AudioSourceOptionsExtension(struct soap*, const char*, tt__AudioSourceOptionsExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__AudioSourceOptionsExtension(struct soap*, tt__AudioSourceOptionsExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__AudioSourceOptionsExtension ** SOAP_FMAC4 soap_get_PointerTott__AudioSourceOptionsExtension(struct soap*, tt__AudioSourceOptionsExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__FloatAttrList_DEFINED
#define SOAP_TYPE_PointerTott__FloatAttrList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__FloatAttrList(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__FloatAttrList(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTott__FloatAttrList(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__FloatAttrList(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTott__FloatAttrList(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__IntAttrList_DEFINED
#define SOAP_TYPE_PointerTott__IntAttrList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__IntAttrList(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__IntAttrList(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTott__IntAttrList(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__IntAttrList(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTott__IntAttrList(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__VideoResolution2_DEFINED
#define SOAP_TYPE_PointerTott__VideoResolution2_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__VideoResolution2(struct soap*, tt__VideoResolution2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__VideoResolution2(struct soap*, const char *, int, tt__VideoResolution2 *const*, const char *);
SOAP_FMAC3 tt__VideoResolution2 ** SOAP_FMAC4 soap_in_PointerTott__VideoResolution2(struct soap*, const char*, tt__VideoResolution2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__VideoResolution2(struct soap*, tt__VideoResolution2 *const*, const char*, const char*);
SOAP_FMAC3 tt__VideoResolution2 ** SOAP_FMAC4 soap_get_PointerTott__VideoResolution2(struct soap*, tt__VideoResolution2 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__VideoResolution_DEFINED
#define SOAP_TYPE_PointerTott__VideoResolution_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__VideoResolution(struct soap*, tt__VideoResolution *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__VideoResolution(struct soap*, const char *, int, tt__VideoResolution *const*, const char *);
SOAP_FMAC3 tt__VideoResolution ** SOAP_FMAC4 soap_in_PointerTott__VideoResolution(struct soap*, const char*, tt__VideoResolution **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__VideoResolution(struct soap*, tt__VideoResolution *const*, const char*, const char*);
SOAP_FMAC3 tt__VideoResolution ** SOAP_FMAC4 soap_get_PointerTott__VideoResolution(struct soap*, tt__VideoResolution **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__VideoEncoderOptionsExtension2_DEFINED
#define SOAP_TYPE_PointerTott__VideoEncoderOptionsExtension2_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__VideoEncoderOptionsExtension2(struct soap*, tt__VideoEncoderOptionsExtension2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__VideoEncoderOptionsExtension2(struct soap*, const char *, int, tt__VideoEncoderOptionsExtension2 *const*, const char *);
SOAP_FMAC3 tt__VideoEncoderOptionsExtension2 ** SOAP_FMAC4 soap_in_PointerTott__VideoEncoderOptionsExtension2(struct soap*, const char*, tt__VideoEncoderOptionsExtension2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__VideoEncoderOptionsExtension2(struct soap*, tt__VideoEncoderOptionsExtension2 *const*, const char*, const char*);
SOAP_FMAC3 tt__VideoEncoderOptionsExtension2 ** SOAP_FMAC4 soap_get_PointerTott__VideoEncoderOptionsExtension2(struct soap*, tt__VideoEncoderOptionsExtension2 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__H264Options2_DEFINED
#define SOAP_TYPE_PointerTott__H264Options2_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__H264Options2(struct soap*, tt__H264Options2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__H264Options2(struct soap*, const char *, int, tt__H264Options2 *const*, const char *);
SOAP_FMAC3 tt__H264Options2 ** SOAP_FMAC4 soap_in_PointerTott__H264Options2(struct soap*, const char*, tt__H264Options2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__H264Options2(struct soap*, tt__H264Options2 *const*, const char*, const char*);
SOAP_FMAC3 tt__H264Options2 ** SOAP_FMAC4 soap_get_PointerTott__H264Options2(struct soap*, tt__H264Options2 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Mpeg4Options2_DEFINED
#define SOAP_TYPE_PointerTott__Mpeg4Options2_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Mpeg4Options2(struct soap*, tt__Mpeg4Options2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Mpeg4Options2(struct soap*, const char *, int, tt__Mpeg4Options2 *const*, const char *);
SOAP_FMAC3 tt__Mpeg4Options2 ** SOAP_FMAC4 soap_in_PointerTott__Mpeg4Options2(struct soap*, const char*, tt__Mpeg4Options2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Mpeg4Options2(struct soap*, tt__Mpeg4Options2 *const*, const char*, const char*);
SOAP_FMAC3 tt__Mpeg4Options2 ** SOAP_FMAC4 soap_get_PointerTott__Mpeg4Options2(struct soap*, tt__Mpeg4Options2 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__JpegOptions2_DEFINED
#define SOAP_TYPE_PointerTott__JpegOptions2_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__JpegOptions2(struct soap*, tt__JpegOptions2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__JpegOptions2(struct soap*, const char *, int, tt__JpegOptions2 *const*, const char *);
SOAP_FMAC3 tt__JpegOptions2 ** SOAP_FMAC4 soap_in_PointerTott__JpegOptions2(struct soap*, const char*, tt__JpegOptions2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__JpegOptions2(struct soap*, tt__JpegOptions2 *const*, const char*, const char*);
SOAP_FMAC3 tt__JpegOptions2 ** SOAP_FMAC4 soap_get_PointerTott__JpegOptions2(struct soap*, tt__JpegOptions2 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__VideoEncoderOptionsExtension_DEFINED
#define SOAP_TYPE_PointerTott__VideoEncoderOptionsExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__VideoEncoderOptionsExtension(struct soap*, tt__VideoEncoderOptionsExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__VideoEncoderOptionsExtension(struct soap*, const char *, int, tt__VideoEncoderOptionsExtension *const*, const char *);
SOAP_FMAC3 tt__VideoEncoderOptionsExtension ** SOAP_FMAC4 soap_in_PointerTott__VideoEncoderOptionsExtension(struct soap*, const char*, tt__VideoEncoderOptionsExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__VideoEncoderOptionsExtension(struct soap*, tt__VideoEncoderOptionsExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__VideoEncoderOptionsExtension ** SOAP_FMAC4 soap_get_PointerTott__VideoEncoderOptionsExtension(struct soap*, tt__VideoEncoderOptionsExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__H264Options_DEFINED
#define SOAP_TYPE_PointerTott__H264Options_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__H264Options(struct soap*, tt__H264Options *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__H264Options(struct soap*, const char *, int, tt__H264Options *const*, const char *);
SOAP_FMAC3 tt__H264Options ** SOAP_FMAC4 soap_in_PointerTott__H264Options(struct soap*, const char*, tt__H264Options **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__H264Options(struct soap*, tt__H264Options *const*, const char*, const char*);
SOAP_FMAC3 tt__H264Options ** SOAP_FMAC4 soap_get_PointerTott__H264Options(struct soap*, tt__H264Options **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Mpeg4Options_DEFINED
#define SOAP_TYPE_PointerTott__Mpeg4Options_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Mpeg4Options(struct soap*, tt__Mpeg4Options *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Mpeg4Options(struct soap*, const char *, int, tt__Mpeg4Options *const*, const char *);
SOAP_FMAC3 tt__Mpeg4Options ** SOAP_FMAC4 soap_in_PointerTott__Mpeg4Options(struct soap*, const char*, tt__Mpeg4Options **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Mpeg4Options(struct soap*, tt__Mpeg4Options *const*, const char*, const char*);
SOAP_FMAC3 tt__Mpeg4Options ** SOAP_FMAC4 soap_get_PointerTott__Mpeg4Options(struct soap*, tt__Mpeg4Options **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__JpegOptions_DEFINED
#define SOAP_TYPE_PointerTott__JpegOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__JpegOptions(struct soap*, tt__JpegOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__JpegOptions(struct soap*, const char *, int, tt__JpegOptions *const*, const char *);
SOAP_FMAC3 tt__JpegOptions ** SOAP_FMAC4 soap_in_PointerTott__JpegOptions(struct soap*, const char*, tt__JpegOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__JpegOptions(struct soap*, tt__JpegOptions *const*, const char*, const char*);
SOAP_FMAC3 tt__JpegOptions ** SOAP_FMAC4 soap_get_PointerTott__JpegOptions(struct soap*, tt__JpegOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__FloatRange_DEFINED
#define SOAP_TYPE_PointerTott__FloatRange_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__FloatRange(struct soap*, tt__FloatRange *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__FloatRange(struct soap*, const char *, int, tt__FloatRange *const*, const char *);
SOAP_FMAC3 tt__FloatRange ** SOAP_FMAC4 soap_in_PointerTott__FloatRange(struct soap*, const char*, tt__FloatRange **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__FloatRange(struct soap*, tt__FloatRange *const*, const char*, const char*);
SOAP_FMAC3 tt__FloatRange ** SOAP_FMAC4 soap_get_PointerTott__FloatRange(struct soap*, tt__FloatRange **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__RotateOptionsExtension_DEFINED
#define SOAP_TYPE_PointerTott__RotateOptionsExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__RotateOptionsExtension(struct soap*, tt__RotateOptionsExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__RotateOptionsExtension(struct soap*, const char *, int, tt__RotateOptionsExtension *const*, const char *);
SOAP_FMAC3 tt__RotateOptionsExtension ** SOAP_FMAC4 soap_in_PointerTott__RotateOptionsExtension(struct soap*, const char*, tt__RotateOptionsExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__RotateOptionsExtension(struct soap*, tt__RotateOptionsExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__RotateOptionsExtension ** SOAP_FMAC4 soap_get_PointerTott__RotateOptionsExtension(struct soap*, tt__RotateOptionsExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__IntList_DEFINED
#define SOAP_TYPE_PointerTott__IntList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__IntList(struct soap*, tt__IntList *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__IntList(struct soap*, const char *, int, tt__IntList *const*, const char *);
SOAP_FMAC3 tt__IntList ** SOAP_FMAC4 soap_in_PointerTott__IntList(struct soap*, const char*, tt__IntList **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__IntList(struct soap*, tt__IntList *const*, const char*, const char*);
SOAP_FMAC3 tt__IntList ** SOAP_FMAC4 soap_get_PointerTott__IntList(struct soap*, tt__IntList **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__VideoSourceConfigurationOptionsExtension2_DEFINED
#define SOAP_TYPE_PointerTott__VideoSourceConfigurationOptionsExtension2_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__VideoSourceConfigurationOptionsExtension2(struct soap*, tt__VideoSourceConfigurationOptionsExtension2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__VideoSourceConfigurationOptionsExtension2(struct soap*, const char *, int, tt__VideoSourceConfigurationOptionsExtension2 *const*, const char *);
SOAP_FMAC3 tt__VideoSourceConfigurationOptionsExtension2 ** SOAP_FMAC4 soap_in_PointerTott__VideoSourceConfigurationOptionsExtension2(struct soap*, const char*, tt__VideoSourceConfigurationOptionsExtension2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__VideoSourceConfigurationOptionsExtension2(struct soap*, tt__VideoSourceConfigurationOptionsExtension2 *const*, const char*, const char*);
SOAP_FMAC3 tt__VideoSourceConfigurationOptionsExtension2 ** SOAP_FMAC4 soap_get_PointerTott__VideoSourceConfigurationOptionsExtension2(struct soap*, tt__VideoSourceConfigurationOptionsExtension2 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__RotateOptions_DEFINED
#define SOAP_TYPE_PointerTott__RotateOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__RotateOptions(struct soap*, tt__RotateOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__RotateOptions(struct soap*, const char *, int, tt__RotateOptions *const*, const char *);
SOAP_FMAC3 tt__RotateOptions ** SOAP_FMAC4 soap_in_PointerTott__RotateOptions(struct soap*, const char*, tt__RotateOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__RotateOptions(struct soap*, tt__RotateOptions *const*, const char*, const char*);
SOAP_FMAC3 tt__RotateOptions ** SOAP_FMAC4 soap_get_PointerTott__RotateOptions(struct soap*, tt__RotateOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__VideoSourceConfigurationOptionsExtension_DEFINED
#define SOAP_TYPE_PointerTott__VideoSourceConfigurationOptionsExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__VideoSourceConfigurationOptionsExtension(struct soap*, tt__VideoSourceConfigurationOptionsExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__VideoSourceConfigurationOptionsExtension(struct soap*, const char *, int, tt__VideoSourceConfigurationOptionsExtension *const*, const char *);
SOAP_FMAC3 tt__VideoSourceConfigurationOptionsExtension ** SOAP_FMAC4 soap_in_PointerTott__VideoSourceConfigurationOptionsExtension(struct soap*, const char*, tt__VideoSourceConfigurationOptionsExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__VideoSourceConfigurationOptionsExtension(struct soap*, tt__VideoSourceConfigurationOptionsExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__VideoSourceConfigurationOptionsExtension ** SOAP_FMAC4 soap_get_PointerTott__VideoSourceConfigurationOptionsExtension(struct soap*, tt__VideoSourceConfigurationOptionsExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__IntRectangleRange_DEFINED
#define SOAP_TYPE_PointerTott__IntRectangleRange_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__IntRectangleRange(struct soap*, tt__IntRectangleRange *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__IntRectangleRange(struct soap*, const char *, int, tt__IntRectangleRange *const*, const char *);
SOAP_FMAC3 tt__IntRectangleRange ** SOAP_FMAC4 soap_in_PointerTott__IntRectangleRange(struct soap*, const char*, tt__IntRectangleRange **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__IntRectangleRange(struct soap*, tt__IntRectangleRange *const*, const char*, const char*);
SOAP_FMAC3 tt__IntRectangleRange ** SOAP_FMAC4 soap_get_PointerTott__IntRectangleRange(struct soap*, tt__IntRectangleRange **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__LensProjection_DEFINED
#define SOAP_TYPE_PointerTott__LensProjection_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__LensProjection(struct soap*, tt__LensProjection *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__LensProjection(struct soap*, const char *, int, tt__LensProjection *const*, const char *);
SOAP_FMAC3 tt__LensProjection ** SOAP_FMAC4 soap_in_PointerTott__LensProjection(struct soap*, const char*, tt__LensProjection **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__LensProjection(struct soap*, tt__LensProjection *const*, const char*, const char*);
SOAP_FMAC3 tt__LensProjection ** SOAP_FMAC4 soap_get_PointerTott__LensProjection(struct soap*, tt__LensProjection **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__LensOffset_DEFINED
#define SOAP_TYPE_PointerTott__LensOffset_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__LensOffset(struct soap*, tt__LensOffset *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__LensOffset(struct soap*, const char *, int, tt__LensOffset *const*, const char *);
SOAP_FMAC3 tt__LensOffset ** SOAP_FMAC4 soap_in_PointerTott__LensOffset(struct soap*, const char*, tt__LensOffset **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__LensOffset(struct soap*, tt__LensOffset *const*, const char*, const char*);
SOAP_FMAC3 tt__LensOffset ** SOAP_FMAC4 soap_get_PointerTott__LensOffset(struct soap*, tt__LensOffset **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTofloat_DEFINED
#define SOAP_TYPE_PointerTofloat_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofloat(struct soap*, float *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofloat(struct soap*, const char *, int, float *const*, const char *);
SOAP_FMAC3 float ** SOAP_FMAC4 soap_in_PointerTofloat(struct soap*, const char*, float **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofloat(struct soap*, float *const*, const char*, const char*);
SOAP_FMAC3 float ** SOAP_FMAC4 soap_get_PointerTofloat(struct soap*, float **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__RotateExtension_DEFINED
#define SOAP_TYPE_PointerTott__RotateExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__RotateExtension(struct soap*, tt__RotateExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__RotateExtension(struct soap*, const char *, int, tt__RotateExtension *const*, const char *);
SOAP_FMAC3 tt__RotateExtension ** SOAP_FMAC4 soap_in_PointerTott__RotateExtension(struct soap*, const char*, tt__RotateExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__RotateExtension(struct soap*, tt__RotateExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__RotateExtension ** SOAP_FMAC4 soap_get_PointerTott__RotateExtension(struct soap*, tt__RotateExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__LensDescription_DEFINED
#define SOAP_TYPE_PointerTott__LensDescription_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__LensDescription(struct soap*, tt__LensDescription *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__LensDescription(struct soap*, const char *, int, tt__LensDescription *const*, const char *);
SOAP_FMAC3 tt__LensDescription ** SOAP_FMAC4 soap_in_PointerTott__LensDescription(struct soap*, const char*, tt__LensDescription **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__LensDescription(struct soap*, tt__LensDescription *const*, const char*, const char*);
SOAP_FMAC3 tt__LensDescription ** SOAP_FMAC4 soap_get_PointerTott__LensDescription(struct soap*, tt__LensDescription **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__VideoSourceConfigurationExtension2_DEFINED
#define SOAP_TYPE_PointerTott__VideoSourceConfigurationExtension2_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__VideoSourceConfigurationExtension2(struct soap*, tt__VideoSourceConfigurationExtension2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__VideoSourceConfigurationExtension2(struct soap*, const char *, int, tt__VideoSourceConfigurationExtension2 *const*, const char *);
SOAP_FMAC3 tt__VideoSourceConfigurationExtension2 ** SOAP_FMAC4 soap_in_PointerTott__VideoSourceConfigurationExtension2(struct soap*, const char*, tt__VideoSourceConfigurationExtension2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__VideoSourceConfigurationExtension2(struct soap*, tt__VideoSourceConfigurationExtension2 *const*, const char*, const char*);
SOAP_FMAC3 tt__VideoSourceConfigurationExtension2 ** SOAP_FMAC4 soap_get_PointerTott__VideoSourceConfigurationExtension2(struct soap*, tt__VideoSourceConfigurationExtension2 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Rotate_DEFINED
#define SOAP_TYPE_PointerTott__Rotate_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Rotate(struct soap*, tt__Rotate *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Rotate(struct soap*, const char *, int, tt__Rotate *const*, const char *);
SOAP_FMAC3 tt__Rotate ** SOAP_FMAC4 soap_in_PointerTott__Rotate(struct soap*, const char*, tt__Rotate **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Rotate(struct soap*, tt__Rotate *const*, const char*, const char*);
SOAP_FMAC3 tt__Rotate ** SOAP_FMAC4 soap_get_PointerTott__Rotate(struct soap*, tt__Rotate **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__ProfileExtension2_DEFINED
#define SOAP_TYPE_PointerTott__ProfileExtension2_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ProfileExtension2(struct soap*, tt__ProfileExtension2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ProfileExtension2(struct soap*, const char *, int, tt__ProfileExtension2 *const*, const char *);
SOAP_FMAC3 tt__ProfileExtension2 ** SOAP_FMAC4 soap_in_PointerTott__ProfileExtension2(struct soap*, const char*, tt__ProfileExtension2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ProfileExtension2(struct soap*, tt__ProfileExtension2 *const*, const char*, const char*);
SOAP_FMAC3 tt__ProfileExtension2 ** SOAP_FMAC4 soap_get_PointerTott__ProfileExtension2(struct soap*, tt__ProfileExtension2 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__AudioDecoderConfiguration_DEFINED
#define SOAP_TYPE_PointerTott__AudioDecoderConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__AudioDecoderConfiguration(struct soap*, tt__AudioDecoderConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__AudioDecoderConfiguration(struct soap*, const char *, int, tt__AudioDecoderConfiguration *const*, const char *);
SOAP_FMAC3 tt__AudioDecoderConfiguration ** SOAP_FMAC4 soap_in_PointerTott__AudioDecoderConfiguration(struct soap*, const char*, tt__AudioDecoderConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__AudioDecoderConfiguration(struct soap*, tt__AudioDecoderConfiguration *const*, const char*, const char*);
SOAP_FMAC3 tt__AudioDecoderConfiguration ** SOAP_FMAC4 soap_get_PointerTott__AudioDecoderConfiguration(struct soap*, tt__AudioDecoderConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__AudioOutputConfiguration_DEFINED
#define SOAP_TYPE_PointerTott__AudioOutputConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__AudioOutputConfiguration(struct soap*, tt__AudioOutputConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__AudioOutputConfiguration(struct soap*, const char *, int, tt__AudioOutputConfiguration *const*, const char *);
SOAP_FMAC3 tt__AudioOutputConfiguration ** SOAP_FMAC4 soap_in_PointerTott__AudioOutputConfiguration(struct soap*, const char*, tt__AudioOutputConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__AudioOutputConfiguration(struct soap*, tt__AudioOutputConfiguration *const*, const char*, const char*);
SOAP_FMAC3 tt__AudioOutputConfiguration ** SOAP_FMAC4 soap_get_PointerTott__AudioOutputConfiguration(struct soap*, tt__AudioOutputConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__ProfileExtension_DEFINED
#define SOAP_TYPE_PointerTott__ProfileExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ProfileExtension(struct soap*, tt__ProfileExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ProfileExtension(struct soap*, const char *, int, tt__ProfileExtension *const*, const char *);
SOAP_FMAC3 tt__ProfileExtension ** SOAP_FMAC4 soap_in_PointerTott__ProfileExtension(struct soap*, const char*, tt__ProfileExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ProfileExtension(struct soap*, tt__ProfileExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__ProfileExtension ** SOAP_FMAC4 soap_get_PointerTott__ProfileExtension(struct soap*, tt__ProfileExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__MetadataConfiguration_DEFINED
#define SOAP_TYPE_PointerTott__MetadataConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__MetadataConfiguration(struct soap*, tt__MetadataConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__MetadataConfiguration(struct soap*, const char *, int, tt__MetadataConfiguration *const*, const char *);
SOAP_FMAC3 tt__MetadataConfiguration ** SOAP_FMAC4 soap_in_PointerTott__MetadataConfiguration(struct soap*, const char*, tt__MetadataConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__MetadataConfiguration(struct soap*, tt__MetadataConfiguration *const*, const char*, const char*);
SOAP_FMAC3 tt__MetadataConfiguration ** SOAP_FMAC4 soap_get_PointerTott__MetadataConfiguration(struct soap*, tt__MetadataConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZConfiguration_DEFINED
#define SOAP_TYPE_PointerTott__PTZConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZConfiguration(struct soap*, tt__PTZConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZConfiguration(struct soap*, const char *, int, tt__PTZConfiguration *const*, const char *);
SOAP_FMAC3 tt__PTZConfiguration ** SOAP_FMAC4 soap_in_PointerTott__PTZConfiguration(struct soap*, const char*, tt__PTZConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZConfiguration(struct soap*, tt__PTZConfiguration *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZConfiguration ** SOAP_FMAC4 soap_get_PointerTott__PTZConfiguration(struct soap*, tt__PTZConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__VideoAnalyticsConfiguration_DEFINED
#define SOAP_TYPE_PointerTott__VideoAnalyticsConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__VideoAnalyticsConfiguration(struct soap*, tt__VideoAnalyticsConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__VideoAnalyticsConfiguration(struct soap*, const char *, int, tt__VideoAnalyticsConfiguration *const*, const char *);
SOAP_FMAC3 tt__VideoAnalyticsConfiguration ** SOAP_FMAC4 soap_in_PointerTott__VideoAnalyticsConfiguration(struct soap*, const char*, tt__VideoAnalyticsConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__VideoAnalyticsConfiguration(struct soap*, tt__VideoAnalyticsConfiguration *const*, const char*, const char*);
SOAP_FMAC3 tt__VideoAnalyticsConfiguration ** SOAP_FMAC4 soap_get_PointerTott__VideoAnalyticsConfiguration(struct soap*, tt__VideoAnalyticsConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__AudioEncoderConfiguration_DEFINED
#define SOAP_TYPE_PointerTott__AudioEncoderConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__AudioEncoderConfiguration(struct soap*, tt__AudioEncoderConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__AudioEncoderConfiguration(struct soap*, const char *, int, tt__AudioEncoderConfiguration *const*, const char *);
SOAP_FMAC3 tt__AudioEncoderConfiguration ** SOAP_FMAC4 soap_in_PointerTott__AudioEncoderConfiguration(struct soap*, const char*, tt__AudioEncoderConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__AudioEncoderConfiguration(struct soap*, tt__AudioEncoderConfiguration *const*, const char*, const char*);
SOAP_FMAC3 tt__AudioEncoderConfiguration ** SOAP_FMAC4 soap_get_PointerTott__AudioEncoderConfiguration(struct soap*, tt__AudioEncoderConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__VideoEncoderConfiguration_DEFINED
#define SOAP_TYPE_PointerTott__VideoEncoderConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__VideoEncoderConfiguration(struct soap*, tt__VideoEncoderConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__VideoEncoderConfiguration(struct soap*, const char *, int, tt__VideoEncoderConfiguration *const*, const char *);
SOAP_FMAC3 tt__VideoEncoderConfiguration ** SOAP_FMAC4 soap_in_PointerTott__VideoEncoderConfiguration(struct soap*, const char*, tt__VideoEncoderConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__VideoEncoderConfiguration(struct soap*, tt__VideoEncoderConfiguration *const*, const char*, const char*);
SOAP_FMAC3 tt__VideoEncoderConfiguration ** SOAP_FMAC4 soap_get_PointerTott__VideoEncoderConfiguration(struct soap*, tt__VideoEncoderConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__AudioSourceConfiguration_DEFINED
#define SOAP_TYPE_PointerTott__AudioSourceConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__AudioSourceConfiguration(struct soap*, tt__AudioSourceConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__AudioSourceConfiguration(struct soap*, const char *, int, tt__AudioSourceConfiguration *const*, const char *);
SOAP_FMAC3 tt__AudioSourceConfiguration ** SOAP_FMAC4 soap_in_PointerTott__AudioSourceConfiguration(struct soap*, const char*, tt__AudioSourceConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__AudioSourceConfiguration(struct soap*, tt__AudioSourceConfiguration *const*, const char*, const char*);
SOAP_FMAC3 tt__AudioSourceConfiguration ** SOAP_FMAC4 soap_get_PointerTott__AudioSourceConfiguration(struct soap*, tt__AudioSourceConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__VideoSourceConfiguration_DEFINED
#define SOAP_TYPE_PointerTott__VideoSourceConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__VideoSourceConfiguration(struct soap*, tt__VideoSourceConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__VideoSourceConfiguration(struct soap*, const char *, int, tt__VideoSourceConfiguration *const*, const char *);
SOAP_FMAC3 tt__VideoSourceConfiguration ** SOAP_FMAC4 soap_in_PointerTott__VideoSourceConfiguration(struct soap*, const char*, tt__VideoSourceConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__VideoSourceConfiguration(struct soap*, tt__VideoSourceConfiguration *const*, const char*, const char*);
SOAP_FMAC3 tt__VideoSourceConfiguration ** SOAP_FMAC4 soap_get_PointerTott__VideoSourceConfiguration(struct soap*, tt__VideoSourceConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__VideoSourceExtension2_DEFINED
#define SOAP_TYPE_PointerTott__VideoSourceExtension2_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__VideoSourceExtension2(struct soap*, tt__VideoSourceExtension2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__VideoSourceExtension2(struct soap*, const char *, int, tt__VideoSourceExtension2 *const*, const char *);
SOAP_FMAC3 tt__VideoSourceExtension2 ** SOAP_FMAC4 soap_in_PointerTott__VideoSourceExtension2(struct soap*, const char*, tt__VideoSourceExtension2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__VideoSourceExtension2(struct soap*, tt__VideoSourceExtension2 *const*, const char*, const char*);
SOAP_FMAC3 tt__VideoSourceExtension2 ** SOAP_FMAC4 soap_get_PointerTott__VideoSourceExtension2(struct soap*, tt__VideoSourceExtension2 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__ImagingSettings20_DEFINED
#define SOAP_TYPE_PointerTott__ImagingSettings20_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ImagingSettings20(struct soap*, tt__ImagingSettings20 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ImagingSettings20(struct soap*, const char *, int, tt__ImagingSettings20 *const*, const char *);
SOAP_FMAC3 tt__ImagingSettings20 ** SOAP_FMAC4 soap_in_PointerTott__ImagingSettings20(struct soap*, const char*, tt__ImagingSettings20 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ImagingSettings20(struct soap*, tt__ImagingSettings20 *const*, const char*, const char*);
SOAP_FMAC3 tt__ImagingSettings20 ** SOAP_FMAC4 soap_get_PointerTott__ImagingSettings20(struct soap*, tt__ImagingSettings20 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__IntRange_DEFINED
#define SOAP_TYPE_PointerTott__IntRange_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__IntRange(struct soap*, tt__IntRange *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__IntRange(struct soap*, const char *, int, tt__IntRange *const*, const char *);
SOAP_FMAC3 tt__IntRange ** SOAP_FMAC4 soap_in_PointerTott__IntRange(struct soap*, const char*, tt__IntRange **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__IntRange(struct soap*, tt__IntRange *const*, const char*, const char*);
SOAP_FMAC3 tt__IntRange ** SOAP_FMAC4 soap_get_PointerTott__IntRange(struct soap*, tt__IntRange **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTotds__StorageConfigurationData_DEFINED
#define SOAP_TYPE_PointerTotds__StorageConfigurationData_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotds__StorageConfigurationData(struct soap*, tds__StorageConfigurationData *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotds__StorageConfigurationData(struct soap*, const char *, int, tds__StorageConfigurationData *const*, const char *);
SOAP_FMAC3 tds__StorageConfigurationData ** SOAP_FMAC4 soap_in_PointerTotds__StorageConfigurationData(struct soap*, const char*, tds__StorageConfigurationData **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotds__StorageConfigurationData(struct soap*, tds__StorageConfigurationData *const*, const char*, const char*);
SOAP_FMAC3 tds__StorageConfigurationData ** SOAP_FMAC4 soap_get_PointerTotds__StorageConfigurationData(struct soap*, tds__StorageConfigurationData **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTotds__StorageConfiguration_DEFINED
#define SOAP_TYPE_PointerTotds__StorageConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotds__StorageConfiguration(struct soap*, tds__StorageConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotds__StorageConfiguration(struct soap*, const char *, int, tds__StorageConfiguration *const*, const char *);
SOAP_FMAC3 tds__StorageConfiguration ** SOAP_FMAC4 soap_in_PointerTotds__StorageConfiguration(struct soap*, const char*, tds__StorageConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotds__StorageConfiguration(struct soap*, tds__StorageConfiguration *const*, const char*, const char*);
SOAP_FMAC3 tds__StorageConfiguration ** SOAP_FMAC4 soap_get_PointerTotds__StorageConfiguration(struct soap*, tds__StorageConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__GetSystemUrisResponse_Extension_DEFINED
#define SOAP_TYPE_PointerTo_tds__GetSystemUrisResponse_Extension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__GetSystemUrisResponse_Extension(struct soap*, _tds__GetSystemUrisResponse_Extension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__GetSystemUrisResponse_Extension(struct soap*, const char *, int, _tds__GetSystemUrisResponse_Extension *const*, const char *);
SOAP_FMAC3 _tds__GetSystemUrisResponse_Extension ** SOAP_FMAC4 soap_in_PointerTo_tds__GetSystemUrisResponse_Extension(struct soap*, const char*, _tds__GetSystemUrisResponse_Extension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__GetSystemUrisResponse_Extension(struct soap*, _tds__GetSystemUrisResponse_Extension *const*, const char*, const char*);
SOAP_FMAC3 _tds__GetSystemUrisResponse_Extension ** SOAP_FMAC4 soap_get_PointerTo_tds__GetSystemUrisResponse_Extension(struct soap*, _tds__GetSystemUrisResponse_Extension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__SystemLogUriList_DEFINED
#define SOAP_TYPE_PointerTott__SystemLogUriList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__SystemLogUriList(struct soap*, tt__SystemLogUriList *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__SystemLogUriList(struct soap*, const char *, int, tt__SystemLogUriList *const*, const char *);
SOAP_FMAC3 tt__SystemLogUriList ** SOAP_FMAC4 soap_in_PointerTott__SystemLogUriList(struct soap*, const char*, tt__SystemLogUriList **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__SystemLogUriList(struct soap*, tt__SystemLogUriList *const*, const char*, const char*);
SOAP_FMAC3 tt__SystemLogUriList ** SOAP_FMAC4 soap_get_PointerTott__SystemLogUriList(struct soap*, tt__SystemLogUriList **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Dot11AvailableNetworks_DEFINED
#define SOAP_TYPE_PointerTott__Dot11AvailableNetworks_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Dot11AvailableNetworks(struct soap*, tt__Dot11AvailableNetworks *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Dot11AvailableNetworks(struct soap*, const char *, int, tt__Dot11AvailableNetworks *const*, const char *);
SOAP_FMAC3 tt__Dot11AvailableNetworks ** SOAP_FMAC4 soap_in_PointerTott__Dot11AvailableNetworks(struct soap*, const char*, tt__Dot11AvailableNetworks **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Dot11AvailableNetworks(struct soap*, tt__Dot11AvailableNetworks *const*, const char*, const char*);
SOAP_FMAC3 tt__Dot11AvailableNetworks ** SOAP_FMAC4 soap_get_PointerTott__Dot11AvailableNetworks(struct soap*, tt__Dot11AvailableNetworks **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Dot11Status_DEFINED
#define SOAP_TYPE_PointerTott__Dot11Status_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Dot11Status(struct soap*, tt__Dot11Status *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Dot11Status(struct soap*, const char *, int, tt__Dot11Status *const*, const char *);
SOAP_FMAC3 tt__Dot11Status ** SOAP_FMAC4 soap_in_PointerTott__Dot11Status(struct soap*, const char*, tt__Dot11Status **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Dot11Status(struct soap*, tt__Dot11Status *const*, const char*, const char*);
SOAP_FMAC3 tt__Dot11Status ** SOAP_FMAC4 soap_get_PointerTott__Dot11Status(struct soap*, tt__Dot11Status **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Dot11Capabilities_DEFINED
#define SOAP_TYPE_PointerTott__Dot11Capabilities_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Dot11Capabilities(struct soap*, tt__Dot11Capabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Dot11Capabilities(struct soap*, const char *, int, tt__Dot11Capabilities *const*, const char *);
SOAP_FMAC3 tt__Dot11Capabilities ** SOAP_FMAC4 soap_in_PointerTott__Dot11Capabilities(struct soap*, const char*, tt__Dot11Capabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Dot11Capabilities(struct soap*, tt__Dot11Capabilities *const*, const char*, const char*);
SOAP_FMAC3 tt__Dot11Capabilities ** SOAP_FMAC4 soap_get_PointerTott__Dot11Capabilities(struct soap*, tt__Dot11Capabilities **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__AuxiliaryData_DEFINED
#define SOAP_TYPE_PointerTott__AuxiliaryData_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__AuxiliaryData(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__AuxiliaryData(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTott__AuxiliaryData(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__AuxiliaryData(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTott__AuxiliaryData(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__RelayOutputSettings_DEFINED
#define SOAP_TYPE_PointerTott__RelayOutputSettings_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__RelayOutputSettings(struct soap*, tt__RelayOutputSettings *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__RelayOutputSettings(struct soap*, const char *, int, tt__RelayOutputSettings *const*, const char *);
SOAP_FMAC3 tt__RelayOutputSettings ** SOAP_FMAC4 soap_in_PointerTott__RelayOutputSettings(struct soap*, const char*, tt__RelayOutputSettings **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__RelayOutputSettings(struct soap*, tt__RelayOutputSettings *const*, const char*, const char*);
SOAP_FMAC3 tt__RelayOutputSettings ** SOAP_FMAC4 soap_get_PointerTott__RelayOutputSettings(struct soap*, tt__RelayOutputSettings **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__RelayOutput_DEFINED
#define SOAP_TYPE_PointerTott__RelayOutput_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__RelayOutput(struct soap*, tt__RelayOutput *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__RelayOutput(struct soap*, const char *, int, tt__RelayOutput *const*, const char *);
SOAP_FMAC3 tt__RelayOutput ** SOAP_FMAC4 soap_in_PointerTott__RelayOutput(struct soap*, const char*, tt__RelayOutput **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__RelayOutput(struct soap*, tt__RelayOutput *const*, const char*, const char*);
SOAP_FMAC3 tt__RelayOutput ** SOAP_FMAC4 soap_get_PointerTott__RelayOutput(struct soap*, tt__RelayOutput **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Dot1XConfiguration_DEFINED
#define SOAP_TYPE_PointerTott__Dot1XConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Dot1XConfiguration(struct soap*, tt__Dot1XConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Dot1XConfiguration(struct soap*, const char *, int, tt__Dot1XConfiguration *const*, const char *);
SOAP_FMAC3 tt__Dot1XConfiguration ** SOAP_FMAC4 soap_in_PointerTott__Dot1XConfiguration(struct soap*, const char*, tt__Dot1XConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Dot1XConfiguration(struct soap*, tt__Dot1XConfiguration *const*, const char*, const char*);
SOAP_FMAC3 tt__Dot1XConfiguration ** SOAP_FMAC4 soap_get_PointerTott__Dot1XConfiguration(struct soap*, tt__Dot1XConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__CertificateInformation_DEFINED
#define SOAP_TYPE_PointerTott__CertificateInformation_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__CertificateInformation(struct soap*, tt__CertificateInformation *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__CertificateInformation(struct soap*, const char *, int, tt__CertificateInformation *const*, const char *);
SOAP_FMAC3 tt__CertificateInformation ** SOAP_FMAC4 soap_in_PointerTott__CertificateInformation(struct soap*, const char*, tt__CertificateInformation **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__CertificateInformation(struct soap*, tt__CertificateInformation *const*, const char*, const char*);
SOAP_FMAC3 tt__CertificateInformation ** SOAP_FMAC4 soap_get_PointerTott__CertificateInformation(struct soap*, tt__CertificateInformation **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__CertificateWithPrivateKey_DEFINED
#define SOAP_TYPE_PointerTott__CertificateWithPrivateKey_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__CertificateWithPrivateKey(struct soap*, tt__CertificateWithPrivateKey *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__CertificateWithPrivateKey(struct soap*, const char *, int, tt__CertificateWithPrivateKey *const*, const char *);
SOAP_FMAC3 tt__CertificateWithPrivateKey ** SOAP_FMAC4 soap_in_PointerTott__CertificateWithPrivateKey(struct soap*, const char*, tt__CertificateWithPrivateKey **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__CertificateWithPrivateKey(struct soap*, tt__CertificateWithPrivateKey *const*, const char*, const char*);
SOAP_FMAC3 tt__CertificateWithPrivateKey ** SOAP_FMAC4 soap_get_PointerTott__CertificateWithPrivateKey(struct soap*, tt__CertificateWithPrivateKey **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__CertificateStatus_DEFINED
#define SOAP_TYPE_PointerTott__CertificateStatus_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__CertificateStatus(struct soap*, tt__CertificateStatus *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__CertificateStatus(struct soap*, const char *, int, tt__CertificateStatus *const*, const char *);
SOAP_FMAC3 tt__CertificateStatus ** SOAP_FMAC4 soap_in_PointerTott__CertificateStatus(struct soap*, const char*, tt__CertificateStatus **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__CertificateStatus(struct soap*, tt__CertificateStatus *const*, const char*, const char*);
SOAP_FMAC3 tt__CertificateStatus ** SOAP_FMAC4 soap_get_PointerTott__CertificateStatus(struct soap*, tt__CertificateStatus **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Certificate_DEFINED
#define SOAP_TYPE_PointerTott__Certificate_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Certificate(struct soap*, tt__Certificate *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Certificate(struct soap*, const char *, int, tt__Certificate *const*, const char *);
SOAP_FMAC3 tt__Certificate ** SOAP_FMAC4 soap_in_PointerTott__Certificate(struct soap*, const char*, tt__Certificate **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Certificate(struct soap*, tt__Certificate *const*, const char*, const char*);
SOAP_FMAC3 tt__Certificate ** SOAP_FMAC4 soap_get_PointerTott__Certificate(struct soap*, tt__Certificate **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTodateTime_DEFINED
#define SOAP_TYPE_PointerTodateTime_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTodateTime(struct soap*, time_t *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTodateTime(struct soap*, const char *, int, time_t *const*, const char *);
SOAP_FMAC3 time_t ** SOAP_FMAC4 soap_in_PointerTodateTime(struct soap*, const char*, time_t **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTodateTime(struct soap*, time_t *const*, const char*, const char*);
SOAP_FMAC3 time_t ** SOAP_FMAC4 soap_get_PointerTodateTime(struct soap*, time_t **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxsd__token_DEFINED
#define SOAP_TYPE_PointerToxsd__token_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__token(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__token(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__token(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__token(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__token(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__BinaryData_DEFINED
#define SOAP_TYPE_PointerTott__BinaryData_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__BinaryData(struct soap*, tt__BinaryData *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__BinaryData(struct soap*, const char *, int, tt__BinaryData *const*, const char *);
SOAP_FMAC3 tt__BinaryData ** SOAP_FMAC4 soap_in_PointerTott__BinaryData(struct soap*, const char*, tt__BinaryData **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__BinaryData(struct soap*, tt__BinaryData *const*, const char*, const char*);
SOAP_FMAC3 tt__BinaryData ** SOAP_FMAC4 soap_get_PointerTott__BinaryData(struct soap*, tt__BinaryData **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__IPAddressFilter_DEFINED
#define SOAP_TYPE_PointerTott__IPAddressFilter_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__IPAddressFilter(struct soap*, tt__IPAddressFilter *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__IPAddressFilter(struct soap*, const char *, int, tt__IPAddressFilter *const*, const char *);
SOAP_FMAC3 tt__IPAddressFilter ** SOAP_FMAC4 soap_in_PointerTott__IPAddressFilter(struct soap*, const char*, tt__IPAddressFilter **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__IPAddressFilter(struct soap*, tt__IPAddressFilter *const*, const char*, const char*);
SOAP_FMAC3 tt__IPAddressFilter ** SOAP_FMAC4 soap_get_PointerTott__IPAddressFilter(struct soap*, tt__IPAddressFilter **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__NetworkZeroConfiguration_DEFINED
#define SOAP_TYPE_PointerTott__NetworkZeroConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__NetworkZeroConfiguration(struct soap*, tt__NetworkZeroConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__NetworkZeroConfiguration(struct soap*, const char *, int, tt__NetworkZeroConfiguration *const*, const char *);
SOAP_FMAC3 tt__NetworkZeroConfiguration ** SOAP_FMAC4 soap_in_PointerTott__NetworkZeroConfiguration(struct soap*, const char*, tt__NetworkZeroConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__NetworkZeroConfiguration(struct soap*, tt__NetworkZeroConfiguration *const*, const char*, const char*);
SOAP_FMAC3 tt__NetworkZeroConfiguration ** SOAP_FMAC4 soap_get_PointerTott__NetworkZeroConfiguration(struct soap*, tt__NetworkZeroConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__NetworkGateway_DEFINED
#define SOAP_TYPE_PointerTott__NetworkGateway_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__NetworkGateway(struct soap*, tt__NetworkGateway *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__NetworkGateway(struct soap*, const char *, int, tt__NetworkGateway *const*, const char *);
SOAP_FMAC3 tt__NetworkGateway ** SOAP_FMAC4 soap_in_PointerTott__NetworkGateway(struct soap*, const char*, tt__NetworkGateway **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__NetworkGateway(struct soap*, tt__NetworkGateway *const*, const char*, const char*);
SOAP_FMAC3 tt__NetworkGateway ** SOAP_FMAC4 soap_get_PointerTott__NetworkGateway(struct soap*, tt__NetworkGateway **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__NetworkProtocol_DEFINED
#define SOAP_TYPE_PointerTott__NetworkProtocol_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__NetworkProtocol(struct soap*, tt__NetworkProtocol *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__NetworkProtocol(struct soap*, const char *, int, tt__NetworkProtocol *const*, const char *);
SOAP_FMAC3 tt__NetworkProtocol ** SOAP_FMAC4 soap_in_PointerTott__NetworkProtocol(struct soap*, const char*, tt__NetworkProtocol **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__NetworkProtocol(struct soap*, tt__NetworkProtocol *const*, const char*, const char*);
SOAP_FMAC3 tt__NetworkProtocol ** SOAP_FMAC4 soap_get_PointerTott__NetworkProtocol(struct soap*, tt__NetworkProtocol **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__NetworkInterfaceSetConfiguration_DEFINED
#define SOAP_TYPE_PointerTott__NetworkInterfaceSetConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__NetworkInterfaceSetConfiguration(struct soap*, tt__NetworkInterfaceSetConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__NetworkInterfaceSetConfiguration(struct soap*, const char *, int, tt__NetworkInterfaceSetConfiguration *const*, const char *);
SOAP_FMAC3 tt__NetworkInterfaceSetConfiguration ** SOAP_FMAC4 soap_in_PointerTott__NetworkInterfaceSetConfiguration(struct soap*, const char*, tt__NetworkInterfaceSetConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__NetworkInterfaceSetConfiguration(struct soap*, tt__NetworkInterfaceSetConfiguration *const*, const char*, const char*);
SOAP_FMAC3 tt__NetworkInterfaceSetConfiguration ** SOAP_FMAC4 soap_get_PointerTott__NetworkInterfaceSetConfiguration(struct soap*, tt__NetworkInterfaceSetConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__NetworkInterface_DEFINED
#define SOAP_TYPE_PointerTott__NetworkInterface_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__NetworkInterface(struct soap*, tt__NetworkInterface *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__NetworkInterface(struct soap*, const char *, int, tt__NetworkInterface *const*, const char *);
SOAP_FMAC3 tt__NetworkInterface ** SOAP_FMAC4 soap_in_PointerTott__NetworkInterface(struct soap*, const char*, tt__NetworkInterface **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__NetworkInterface(struct soap*, tt__NetworkInterface *const*, const char*, const char*);
SOAP_FMAC3 tt__NetworkInterface ** SOAP_FMAC4 soap_get_PointerTott__NetworkInterface(struct soap*, tt__NetworkInterface **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxsd__duration_DEFINED
#define SOAP_TYPE_PointerToxsd__duration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__duration(struct soap*, LONG64 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__duration(struct soap*, const char *, int, LONG64 *const*, const char *);
SOAP_FMAC3 LONG64 ** SOAP_FMAC4 soap_in_PointerToxsd__duration(struct soap*, const char*, LONG64 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__duration(struct soap*, LONG64 *const*, const char*, const char*);
SOAP_FMAC3 LONG64 ** SOAP_FMAC4 soap_get_PointerToxsd__duration(struct soap*, LONG64 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__DNSName_DEFINED
#define SOAP_TYPE_PointerTott__DNSName_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__DNSName(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__DNSName(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTott__DNSName(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__DNSName(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTott__DNSName(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__DynamicDNSInformation_DEFINED
#define SOAP_TYPE_PointerTott__DynamicDNSInformation_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__DynamicDNSInformation(struct soap*, tt__DynamicDNSInformation *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__DynamicDNSInformation(struct soap*, const char *, int, tt__DynamicDNSInformation *const*, const char *);
SOAP_FMAC3 tt__DynamicDNSInformation ** SOAP_FMAC4 soap_in_PointerTott__DynamicDNSInformation(struct soap*, const char*, tt__DynamicDNSInformation **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__DynamicDNSInformation(struct soap*, tt__DynamicDNSInformation *const*, const char*, const char*);
SOAP_FMAC3 tt__DynamicDNSInformation ** SOAP_FMAC4 soap_get_PointerTott__DynamicDNSInformation(struct soap*, tt__DynamicDNSInformation **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__NTPInformation_DEFINED
#define SOAP_TYPE_PointerTott__NTPInformation_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__NTPInformation(struct soap*, tt__NTPInformation *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__NTPInformation(struct soap*, const char *, int, tt__NTPInformation *const*, const char *);
SOAP_FMAC3 tt__NTPInformation ** SOAP_FMAC4 soap_in_PointerTott__NTPInformation(struct soap*, const char*, tt__NTPInformation **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__NTPInformation(struct soap*, tt__NTPInformation *const*, const char*, const char*);
SOAP_FMAC3 tt__NTPInformation ** SOAP_FMAC4 soap_get_PointerTott__NTPInformation(struct soap*, tt__NTPInformation **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__IPAddress_DEFINED
#define SOAP_TYPE_PointerTott__IPAddress_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__IPAddress(struct soap*, tt__IPAddress *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__IPAddress(struct soap*, const char *, int, tt__IPAddress *const*, const char *);
SOAP_FMAC3 tt__IPAddress ** SOAP_FMAC4 soap_in_PointerTott__IPAddress(struct soap*, const char*, tt__IPAddress **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__IPAddress(struct soap*, tt__IPAddress *const*, const char*, const char*);
SOAP_FMAC3 tt__IPAddress ** SOAP_FMAC4 soap_get_PointerTott__IPAddress(struct soap*, tt__IPAddress **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__DNSInformation_DEFINED
#define SOAP_TYPE_PointerTott__DNSInformation_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__DNSInformation(struct soap*, tt__DNSInformation *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__DNSInformation(struct soap*, const char *, int, tt__DNSInformation *const*, const char *);
SOAP_FMAC3 tt__DNSInformation ** SOAP_FMAC4 soap_in_PointerTott__DNSInformation(struct soap*, const char*, tt__DNSInformation **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__DNSInformation(struct soap*, tt__DNSInformation *const*, const char*, const char*);
SOAP_FMAC3 tt__DNSInformation ** SOAP_FMAC4 soap_get_PointerTott__DNSInformation(struct soap*, tt__DNSInformation **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__HostnameInformation_DEFINED
#define SOAP_TYPE_PointerTott__HostnameInformation_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__HostnameInformation(struct soap*, tt__HostnameInformation *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__HostnameInformation(struct soap*, const char *, int, tt__HostnameInformation *const*, const char *);
SOAP_FMAC3 tt__HostnameInformation ** SOAP_FMAC4 soap_in_PointerTott__HostnameInformation(struct soap*, const char*, tt__HostnameInformation **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__HostnameInformation(struct soap*, tt__HostnameInformation *const*, const char*, const char*);
SOAP_FMAC3 tt__HostnameInformation ** SOAP_FMAC4 soap_get_PointerTott__HostnameInformation(struct soap*, tt__HostnameInformation **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Capabilities_DEFINED
#define SOAP_TYPE_PointerTott__Capabilities_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Capabilities(struct soap*, tt__Capabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Capabilities(struct soap*, const char *, int, tt__Capabilities *const*, const char *);
SOAP_FMAC3 tt__Capabilities ** SOAP_FMAC4 soap_in_PointerTott__Capabilities(struct soap*, const char*, tt__Capabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Capabilities(struct soap*, tt__Capabilities *const*, const char*, const char*);
SOAP_FMAC3 tt__Capabilities ** SOAP_FMAC4 soap_get_PointerTott__Capabilities(struct soap*, tt__Capabilities **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__User_DEFINED
#define SOAP_TYPE_PointerTott__User_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__User(struct soap*, tt__User *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__User(struct soap*, const char *, int, tt__User *const*, const char *);
SOAP_FMAC3 tt__User ** SOAP_FMAC4 soap_in_PointerTott__User(struct soap*, const char*, tt__User **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__User(struct soap*, tt__User *const*, const char*, const char*);
SOAP_FMAC3 tt__User ** SOAP_FMAC4 soap_get_PointerTott__User(struct soap*, tt__User **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__RemoteUser_DEFINED
#define SOAP_TYPE_PointerTott__RemoteUser_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__RemoteUser(struct soap*, tt__RemoteUser *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__RemoteUser(struct soap*, const char *, int, tt__RemoteUser *const*, const char *);
SOAP_FMAC3 tt__RemoteUser ** SOAP_FMAC4 soap_in_PointerTott__RemoteUser(struct soap*, const char*, tt__RemoteUser **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__RemoteUser(struct soap*, tt__RemoteUser *const*, const char*, const char*);
SOAP_FMAC3 tt__RemoteUser ** SOAP_FMAC4 soap_get_PointerTott__RemoteUser(struct soap*, tt__RemoteUser **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__NetworkHost_DEFINED
#define SOAP_TYPE_PointerTott__NetworkHost_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__NetworkHost(struct soap*, tt__NetworkHost *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__NetworkHost(struct soap*, const char *, int, tt__NetworkHost *const*, const char *);
SOAP_FMAC3 tt__NetworkHost ** SOAP_FMAC4 soap_in_PointerTott__NetworkHost(struct soap*, const char*, tt__NetworkHost **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__NetworkHost(struct soap*, tt__NetworkHost *const*, const char*, const char*);
SOAP_FMAC3 tt__NetworkHost ** SOAP_FMAC4 soap_get_PointerTott__NetworkHost(struct soap*, tt__NetworkHost **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Scope_DEFINED
#define SOAP_TYPE_PointerTott__Scope_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Scope(struct soap*, tt__Scope *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Scope(struct soap*, const char *, int, tt__Scope *const*, const char *);
SOAP_FMAC3 tt__Scope ** SOAP_FMAC4 soap_in_PointerTott__Scope(struct soap*, const char*, tt__Scope **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Scope(struct soap*, tt__Scope *const*, const char*, const char*);
SOAP_FMAC3 tt__Scope ** SOAP_FMAC4 soap_get_PointerTott__Scope(struct soap*, tt__Scope **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__SystemLog_DEFINED
#define SOAP_TYPE_PointerTott__SystemLog_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__SystemLog(struct soap*, tt__SystemLog *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__SystemLog(struct soap*, const char *, int, tt__SystemLog *const*, const char *);
SOAP_FMAC3 tt__SystemLog ** SOAP_FMAC4 soap_in_PointerTott__SystemLog(struct soap*, const char*, tt__SystemLog **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__SystemLog(struct soap*, tt__SystemLog *const*, const char*, const char*);
SOAP_FMAC3 tt__SystemLog ** SOAP_FMAC4 soap_get_PointerTott__SystemLog(struct soap*, tt__SystemLog **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__SupportInformation_DEFINED
#define SOAP_TYPE_PointerTott__SupportInformation_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__SupportInformation(struct soap*, tt__SupportInformation *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__SupportInformation(struct soap*, const char *, int, tt__SupportInformation *const*, const char *);
SOAP_FMAC3 tt__SupportInformation ** SOAP_FMAC4 soap_in_PointerTott__SupportInformation(struct soap*, const char*, tt__SupportInformation **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__SupportInformation(struct soap*, tt__SupportInformation *const*, const char*, const char*);
SOAP_FMAC3 tt__SupportInformation ** SOAP_FMAC4 soap_get_PointerTott__SupportInformation(struct soap*, tt__SupportInformation **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__BackupFile_DEFINED
#define SOAP_TYPE_PointerTott__BackupFile_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__BackupFile(struct soap*, tt__BackupFile *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__BackupFile(struct soap*, const char *, int, tt__BackupFile *const*, const char *);
SOAP_FMAC3 tt__BackupFile ** SOAP_FMAC4 soap_in_PointerTott__BackupFile(struct soap*, const char*, tt__BackupFile **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__BackupFile(struct soap*, tt__BackupFile *const*, const char*, const char*);
SOAP_FMAC3 tt__BackupFile ** SOAP_FMAC4 soap_get_PointerTott__BackupFile(struct soap*, tt__BackupFile **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__AttachmentData_DEFINED
#define SOAP_TYPE_PointerTott__AttachmentData_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__AttachmentData(struct soap*, tt__AttachmentData *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__AttachmentData(struct soap*, const char *, int, tt__AttachmentData *const*, const char *);
SOAP_FMAC3 tt__AttachmentData ** SOAP_FMAC4 soap_in_PointerTott__AttachmentData(struct soap*, const char*, tt__AttachmentData **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__AttachmentData(struct soap*, tt__AttachmentData *const*, const char*, const char*);
SOAP_FMAC3 tt__AttachmentData ** SOAP_FMAC4 soap_get_PointerTott__AttachmentData(struct soap*, tt__AttachmentData **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__SystemDateTime_DEFINED
#define SOAP_TYPE_PointerTott__SystemDateTime_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__SystemDateTime(struct soap*, tt__SystemDateTime *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__SystemDateTime(struct soap*, const char *, int, tt__SystemDateTime *const*, const char *);
SOAP_FMAC3 tt__SystemDateTime ** SOAP_FMAC4 soap_in_PointerTott__SystemDateTime(struct soap*, const char*, tt__SystemDateTime **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__SystemDateTime(struct soap*, tt__SystemDateTime *const*, const char*, const char*);
SOAP_FMAC3 tt__SystemDateTime ** SOAP_FMAC4 soap_get_PointerTott__SystemDateTime(struct soap*, tt__SystemDateTime **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__DateTime_DEFINED
#define SOAP_TYPE_PointerTott__DateTime_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__DateTime(struct soap*, tt__DateTime *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__DateTime(struct soap*, const char *, int, tt__DateTime *const*, const char *);
SOAP_FMAC3 tt__DateTime ** SOAP_FMAC4 soap_in_PointerTott__DateTime(struct soap*, const char*, tt__DateTime **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__DateTime(struct soap*, tt__DateTime *const*, const char*, const char*);
SOAP_FMAC3 tt__DateTime ** SOAP_FMAC4 soap_get_PointerTott__DateTime(struct soap*, tt__DateTime **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__TimeZone_DEFINED
#define SOAP_TYPE_PointerTott__TimeZone_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__TimeZone(struct soap*, tt__TimeZone *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__TimeZone(struct soap*, const char *, int, tt__TimeZone *const*, const char *);
SOAP_FMAC3 tt__TimeZone ** SOAP_FMAC4 soap_in_PointerTott__TimeZone(struct soap*, const char*, tt__TimeZone **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__TimeZone(struct soap*, tt__TimeZone *const*, const char*, const char*);
SOAP_FMAC3 tt__TimeZone ** SOAP_FMAC4 soap_get_PointerTott__TimeZone(struct soap*, tt__TimeZone **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTotds__DeviceServiceCapabilities_DEFINED
#define SOAP_TYPE_PointerTotds__DeviceServiceCapabilities_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotds__DeviceServiceCapabilities(struct soap*, tds__DeviceServiceCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotds__DeviceServiceCapabilities(struct soap*, const char *, int, tds__DeviceServiceCapabilities *const*, const char *);
SOAP_FMAC3 tds__DeviceServiceCapabilities ** SOAP_FMAC4 soap_in_PointerTotds__DeviceServiceCapabilities(struct soap*, const char*, tds__DeviceServiceCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotds__DeviceServiceCapabilities(struct soap*, tds__DeviceServiceCapabilities *const*, const char*, const char*);
SOAP_FMAC3 tds__DeviceServiceCapabilities ** SOAP_FMAC4 soap_get_PointerTotds__DeviceServiceCapabilities(struct soap*, tds__DeviceServiceCapabilities **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTotds__Service_DEFINED
#define SOAP_TYPE_PointerTotds__Service_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotds__Service(struct soap*, tds__Service *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotds__Service(struct soap*, const char *, int, tds__Service *const*, const char *);
SOAP_FMAC3 tds__Service ** SOAP_FMAC4 soap_in_PointerTotds__Service(struct soap*, const char*, tds__Service **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotds__Service(struct soap*, tds__Service *const*, const char*, const char*);
SOAP_FMAC3 tds__Service ** SOAP_FMAC4 soap_get_PointerTotds__Service(struct soap*, tds__Service **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__StorageConfigurationData_Extension_DEFINED
#define SOAP_TYPE_PointerTo_tds__StorageConfigurationData_Extension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__StorageConfigurationData_Extension(struct soap*, _tds__StorageConfigurationData_Extension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__StorageConfigurationData_Extension(struct soap*, const char *, int, _tds__StorageConfigurationData_Extension *const*, const char *);
SOAP_FMAC3 _tds__StorageConfigurationData_Extension ** SOAP_FMAC4 soap_in_PointerTo_tds__StorageConfigurationData_Extension(struct soap*, const char*, _tds__StorageConfigurationData_Extension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__StorageConfigurationData_Extension(struct soap*, _tds__StorageConfigurationData_Extension *const*, const char*, const char*);
SOAP_FMAC3 _tds__StorageConfigurationData_Extension ** SOAP_FMAC4 soap_get_PointerTo_tds__StorageConfigurationData_Extension(struct soap*, _tds__StorageConfigurationData_Extension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTotds__UserCredential_DEFINED
#define SOAP_TYPE_PointerTotds__UserCredential_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotds__UserCredential(struct soap*, tds__UserCredential *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotds__UserCredential(struct soap*, const char *, int, tds__UserCredential *const*, const char *);
SOAP_FMAC3 tds__UserCredential ** SOAP_FMAC4 soap_in_PointerTotds__UserCredential(struct soap*, const char*, tds__UserCredential **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotds__UserCredential(struct soap*, tds__UserCredential *const*, const char*, const char*);
SOAP_FMAC3 tds__UserCredential ** SOAP_FMAC4 soap_get_PointerTotds__UserCredential(struct soap*, tds__UserCredential **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxsd__anyURI_DEFINED
#define SOAP_TYPE_PointerToxsd__anyURI_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__anyURI(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__anyURI(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__anyURI(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__anyURI(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__anyURI(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__UserCredential_Extension_DEFINED
#define SOAP_TYPE_PointerTo_tds__UserCredential_Extension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__UserCredential_Extension(struct soap*, _tds__UserCredential_Extension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__UserCredential_Extension(struct soap*, const char *, int, _tds__UserCredential_Extension *const*, const char *);
SOAP_FMAC3 _tds__UserCredential_Extension ** SOAP_FMAC4 soap_in_PointerTo_tds__UserCredential_Extension(struct soap*, const char*, _tds__UserCredential_Extension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__UserCredential_Extension(struct soap*, _tds__UserCredential_Extension *const*, const char*, const char*);
SOAP_FMAC3 _tds__UserCredential_Extension ** SOAP_FMAC4 soap_get_PointerTo_tds__UserCredential_Extension(struct soap*, _tds__UserCredential_Extension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTostd__string_DEFINED
#define SOAP_TYPE_PointerTostd__string_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__StringAttrList_DEFINED
#define SOAP_TYPE_PointerTott__StringAttrList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__StringAttrList(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__StringAttrList(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTott__StringAttrList(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__StringAttrList(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTott__StringAttrList(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTotds__EAPMethodTypes_DEFINED
#define SOAP_TYPE_PointerTotds__EAPMethodTypes_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotds__EAPMethodTypes(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotds__EAPMethodTypes(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTotds__EAPMethodTypes(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotds__EAPMethodTypes(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTotds__EAPMethodTypes(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTobool_DEFINED
#define SOAP_TYPE_PointerTobool_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTobool(struct soap*, bool *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTobool(struct soap*, const char *, int, bool *const*, const char *);
SOAP_FMAC3 bool ** SOAP_FMAC4 soap_in_PointerTobool(struct soap*, const char*, bool **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTobool(struct soap*, bool *const*, const char*, const char*);
SOAP_FMAC3 bool ** SOAP_FMAC4 soap_get_PointerTobool(struct soap*, bool **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTotds__MiscCapabilities_DEFINED
#define SOAP_TYPE_PointerTotds__MiscCapabilities_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotds__MiscCapabilities(struct soap*, tds__MiscCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotds__MiscCapabilities(struct soap*, const char *, int, tds__MiscCapabilities *const*, const char *);
SOAP_FMAC3 tds__MiscCapabilities ** SOAP_FMAC4 soap_in_PointerTotds__MiscCapabilities(struct soap*, const char*, tds__MiscCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotds__MiscCapabilities(struct soap*, tds__MiscCapabilities *const*, const char*, const char*);
SOAP_FMAC3 tds__MiscCapabilities ** SOAP_FMAC4 soap_get_PointerTotds__MiscCapabilities(struct soap*, tds__MiscCapabilities **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTotds__SystemCapabilities_DEFINED
#define SOAP_TYPE_PointerTotds__SystemCapabilities_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotds__SystemCapabilities(struct soap*, tds__SystemCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotds__SystemCapabilities(struct soap*, const char *, int, tds__SystemCapabilities *const*, const char *);
SOAP_FMAC3 tds__SystemCapabilities ** SOAP_FMAC4 soap_in_PointerTotds__SystemCapabilities(struct soap*, const char*, tds__SystemCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotds__SystemCapabilities(struct soap*, tds__SystemCapabilities *const*, const char*, const char*);
SOAP_FMAC3 tds__SystemCapabilities ** SOAP_FMAC4 soap_get_PointerTotds__SystemCapabilities(struct soap*, tds__SystemCapabilities **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTotds__SecurityCapabilities_DEFINED
#define SOAP_TYPE_PointerTotds__SecurityCapabilities_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotds__SecurityCapabilities(struct soap*, tds__SecurityCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotds__SecurityCapabilities(struct soap*, const char *, int, tds__SecurityCapabilities *const*, const char *);
SOAP_FMAC3 tds__SecurityCapabilities ** SOAP_FMAC4 soap_in_PointerTotds__SecurityCapabilities(struct soap*, const char*, tds__SecurityCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotds__SecurityCapabilities(struct soap*, tds__SecurityCapabilities *const*, const char*, const char*);
SOAP_FMAC3 tds__SecurityCapabilities ** SOAP_FMAC4 soap_get_PointerTotds__SecurityCapabilities(struct soap*, tds__SecurityCapabilities **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTotds__NetworkCapabilities_DEFINED
#define SOAP_TYPE_PointerTotds__NetworkCapabilities_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotds__NetworkCapabilities(struct soap*, tds__NetworkCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotds__NetworkCapabilities(struct soap*, const char *, int, tds__NetworkCapabilities *const*, const char *);
SOAP_FMAC3 tds__NetworkCapabilities ** SOAP_FMAC4 soap_in_PointerTotds__NetworkCapabilities(struct soap*, const char*, tds__NetworkCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotds__NetworkCapabilities(struct soap*, tds__NetworkCapabilities *const*, const char*, const char*);
SOAP_FMAC3 tds__NetworkCapabilities ** SOAP_FMAC4 soap_get_PointerTotds__NetworkCapabilities(struct soap*, tds__NetworkCapabilities **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__OnvifVersion_DEFINED
#define SOAP_TYPE_PointerTott__OnvifVersion_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__OnvifVersion(struct soap*, tt__OnvifVersion *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__OnvifVersion(struct soap*, const char *, int, tt__OnvifVersion *const*, const char *);
SOAP_FMAC3 tt__OnvifVersion ** SOAP_FMAC4 soap_in_PointerTott__OnvifVersion(struct soap*, const char*, tt__OnvifVersion **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__OnvifVersion(struct soap*, tt__OnvifVersion *const*, const char*, const char*);
SOAP_FMAC3 tt__OnvifVersion ** SOAP_FMAC4 soap_get_PointerTott__OnvifVersion(struct soap*, tt__OnvifVersion **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__Service_Capabilities_DEFINED
#define SOAP_TYPE_PointerTo_tds__Service_Capabilities_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__Service_Capabilities(struct soap*, _tds__Service_Capabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__Service_Capabilities(struct soap*, const char *, int, _tds__Service_Capabilities *const*, const char *);
SOAP_FMAC3 _tds__Service_Capabilities ** SOAP_FMAC4 soap_in_PointerTo_tds__Service_Capabilities(struct soap*, const char*, _tds__Service_Capabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__Service_Capabilities(struct soap*, _tds__Service_Capabilities *const*, const char*, const char*);
SOAP_FMAC3 _tds__Service_Capabilities ** SOAP_FMAC4 soap_get_PointerTo_tds__Service_Capabilities(struct soap*, _tds__Service_Capabilities **, const char*, const char*);
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Header_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Header_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Header(struct soap*, const char *, int, struct SOAP_ENV__Header *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Header ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);
#endif

#endif

#ifndef SOAP_TYPE_PointerTochan__ChannelInstanceType_DEFINED
#define SOAP_TYPE_PointerTochan__ChannelInstanceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTochan__ChannelInstanceType(struct soap*, struct chan__ChannelInstanceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTochan__ChannelInstanceType(struct soap*, const char *, int, struct chan__ChannelInstanceType *const*, const char *);
SOAP_FMAC3 struct chan__ChannelInstanceType ** SOAP_FMAC4 soap_in_PointerTochan__ChannelInstanceType(struct soap*, const char*, struct chan__ChannelInstanceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTochan__ChannelInstanceType(struct soap*, struct chan__ChannelInstanceType *const*, const char*, const char*);
SOAP_FMAC3 struct chan__ChannelInstanceType ** SOAP_FMAC4 soap_get_PointerTochan__ChannelInstanceType(struct soap*, struct chan__ChannelInstanceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wsa5__FaultTo_DEFINED
#define SOAP_TYPE_PointerTo_wsa5__FaultTo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsa5__FaultTo(struct soap*, struct wsa5__EndpointReferenceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsa5__FaultTo(struct soap*, const char *, int, struct wsa5__EndpointReferenceType *const*, const char *);
SOAP_FMAC3 struct wsa5__EndpointReferenceType ** SOAP_FMAC4 soap_in_PointerTo_wsa5__FaultTo(struct soap*, const char*, struct wsa5__EndpointReferenceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsa5__FaultTo(struct soap*, struct wsa5__EndpointReferenceType *const*, const char*, const char*);
SOAP_FMAC3 struct wsa5__EndpointReferenceType ** SOAP_FMAC4 soap_get_PointerTo_wsa5__FaultTo(struct soap*, struct wsa5__EndpointReferenceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wsa5__ReplyTo_DEFINED
#define SOAP_TYPE_PointerTo_wsa5__ReplyTo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsa5__ReplyTo(struct soap*, struct wsa5__EndpointReferenceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsa5__ReplyTo(struct soap*, const char *, int, struct wsa5__EndpointReferenceType *const*, const char *);
SOAP_FMAC3 struct wsa5__EndpointReferenceType ** SOAP_FMAC4 soap_in_PointerTo_wsa5__ReplyTo(struct soap*, const char*, struct wsa5__EndpointReferenceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsa5__ReplyTo(struct soap*, struct wsa5__EndpointReferenceType *const*, const char*, const char*);
SOAP_FMAC3 struct wsa5__EndpointReferenceType ** SOAP_FMAC4 soap_get_PointerTo_wsa5__ReplyTo(struct soap*, struct wsa5__EndpointReferenceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wsa5__From_DEFINED
#define SOAP_TYPE_PointerTo_wsa5__From_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsa5__From(struct soap*, struct wsa5__EndpointReferenceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsa5__From(struct soap*, const char *, int, struct wsa5__EndpointReferenceType *const*, const char *);
SOAP_FMAC3 struct wsa5__EndpointReferenceType ** SOAP_FMAC4 soap_in_PointerTo_wsa5__From(struct soap*, const char*, struct wsa5__EndpointReferenceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsa5__From(struct soap*, struct wsa5__EndpointReferenceType *const*, const char*, const char*);
SOAP_FMAC3 struct wsa5__EndpointReferenceType ** SOAP_FMAC4 soap_get_PointerTo_wsa5__From(struct soap*, struct wsa5__EndpointReferenceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wsa5__RelatesTo_DEFINED
#define SOAP_TYPE_PointerTo_wsa5__RelatesTo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsa5__RelatesTo(struct soap*, struct wsa5__RelatesToType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsa5__RelatesTo(struct soap*, const char *, int, struct wsa5__RelatesToType *const*, const char *);
SOAP_FMAC3 struct wsa5__RelatesToType ** SOAP_FMAC4 soap_in_PointerTo_wsa5__RelatesTo(struct soap*, const char*, struct wsa5__RelatesToType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsa5__RelatesTo(struct soap*, struct wsa5__RelatesToType *const*, const char*, const char*);
SOAP_FMAC3 struct wsa5__RelatesToType ** SOAP_FMAC4 soap_get_PointerTo_wsa5__RelatesTo(struct soap*, struct wsa5__RelatesToType **, const char*, const char*);
#endif
/* _wsa5__ProblemIRI is a typedef synonym for string */

#ifndef SOAP_TYPE__wsa5__ProblemIRI_DEFINED
#define SOAP_TYPE__wsa5__ProblemIRI_DEFINED

#define soap_default__wsa5__ProblemIRI(soap, a) soap_default_string(soap, a)


#define soap_serialize__wsa5__ProblemIRI soap_serialize_string


#define soap__wsa5__ProblemIRI2s soap_string2s


#define soap_out__wsa5__ProblemIRI soap_out_string


#define soap_s2_wsa5__ProblemIRI soap_s2string


#define soap_in__wsa5__ProblemIRI soap_in_string


#define soap_put__wsa5__ProblemIRI soap_put_string


#define soap_write__wsa5__ProblemIRI soap_write_string


#define soap_get__wsa5__ProblemIRI soap_get_string


#define soap_read__wsa5__ProblemIRI soap_read_string

#endif
/* _wsa5__ProblemHeaderQName is a typedef synonym for _QName */

#ifndef SOAP_TYPE__wsa5__ProblemHeaderQName_DEFINED
#define SOAP_TYPE__wsa5__ProblemHeaderQName_DEFINED

#define soap_default__wsa5__ProblemHeaderQName(soap, a) soap_default__QName(soap, a)


#define soap_serialize__wsa5__ProblemHeaderQName soap_serialize__QName


#define soap_out__wsa5__ProblemHeaderQName soap_out__QName


#define soap_in__wsa5__ProblemHeaderQName soap_in__QName


#define soap_put__wsa5__ProblemHeaderQName soap_put__QName


#define soap_write__wsa5__ProblemHeaderQName soap_write__QName


#define soap_get__wsa5__ProblemHeaderQName soap_get__QName


#define soap_read__wsa5__ProblemHeaderQName soap_read__QName

#endif
/* _wsa5__Action is a typedef synonym for string */

#ifndef SOAP_TYPE__wsa5__Action_DEFINED
#define SOAP_TYPE__wsa5__Action_DEFINED

#define soap_default__wsa5__Action(soap, a) soap_default_string(soap, a)


#define soap_serialize__wsa5__Action soap_serialize_string


#define soap__wsa5__Action2s soap_string2s


#define soap_out__wsa5__Action soap_out_string


#define soap_s2_wsa5__Action soap_s2string


#define soap_in__wsa5__Action soap_in_string


#define soap_put__wsa5__Action soap_put_string


#define soap_write__wsa5__Action soap_write_string


#define soap_get__wsa5__Action soap_get_string


#define soap_read__wsa5__Action soap_read_string

#endif
/* _wsa5__To is a typedef synonym for string */

#ifndef SOAP_TYPE__wsa5__To_DEFINED
#define SOAP_TYPE__wsa5__To_DEFINED

#define soap_default__wsa5__To(soap, a) soap_default_string(soap, a)


#define soap_serialize__wsa5__To soap_serialize_string


#define soap__wsa5__To2s soap_string2s


#define soap_out__wsa5__To soap_out_string


#define soap_s2_wsa5__To soap_s2string


#define soap_in__wsa5__To soap_in_string


#define soap_put__wsa5__To soap_put_string


#define soap_write__wsa5__To soap_write_string


#define soap_get__wsa5__To soap_get_string


#define soap_read__wsa5__To soap_read_string

#endif
/* _wsa5__MessageID is a typedef synonym for string */

#ifndef SOAP_TYPE__wsa5__MessageID_DEFINED
#define SOAP_TYPE__wsa5__MessageID_DEFINED

#define soap_default__wsa5__MessageID(soap, a) soap_default_string(soap, a)


#define soap_serialize__wsa5__MessageID soap_serialize_string


#define soap__wsa5__MessageID2s soap_string2s


#define soap_out__wsa5__MessageID soap_out_string


#define soap_s2_wsa5__MessageID soap_s2string


#define soap_in__wsa5__MessageID soap_in_string


#define soap_put__wsa5__MessageID soap_put_string


#define soap_write__wsa5__MessageID soap_write_string


#define soap_get__wsa5__MessageID soap_get_string


#define soap_read__wsa5__MessageID soap_read_string

#endif

#ifndef SOAP_TYPE_PointerToint_DEFINED
#define SOAP_TYPE_PointerToint_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToint(struct soap*, int *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToint(struct soap*, const char *, int, int *const*, const char *);
SOAP_FMAC3 int ** SOAP_FMAC4 soap_in_PointerToint(struct soap*, const char*, int **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToint(struct soap*, int *const*, const char*, const char*);
SOAP_FMAC3 int ** SOAP_FMAC4 soap_get_PointerToint(struct soap*, int **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_XML_DEFINED
#define SOAP_TYPE_PointerTo_XML_DEFINED
#endif

#ifndef SOAP_TYPE_PointerTowsa5__MetadataType_DEFINED
#define SOAP_TYPE_PointerTowsa5__MetadataType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsa5__MetadataType(struct soap*, struct wsa5__MetadataType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsa5__MetadataType(struct soap*, const char *, int, struct wsa5__MetadataType *const*, const char *);
SOAP_FMAC3 struct wsa5__MetadataType ** SOAP_FMAC4 soap_in_PointerTowsa5__MetadataType(struct soap*, const char*, struct wsa5__MetadataType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsa5__MetadataType(struct soap*, struct wsa5__MetadataType *const*, const char*, const char*);
SOAP_FMAC3 struct wsa5__MetadataType ** SOAP_FMAC4 soap_get_PointerTowsa5__MetadataType(struct soap*, struct wsa5__MetadataType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowsa5__ReferenceParametersType_DEFINED
#define SOAP_TYPE_PointerTowsa5__ReferenceParametersType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsa5__ReferenceParametersType(struct soap*, struct wsa5__ReferenceParametersType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsa5__ReferenceParametersType(struct soap*, const char *, int, struct wsa5__ReferenceParametersType *const*, const char *);
SOAP_FMAC3 struct wsa5__ReferenceParametersType ** SOAP_FMAC4 soap_in_PointerTowsa5__ReferenceParametersType(struct soap*, const char*, struct wsa5__ReferenceParametersType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsa5__ReferenceParametersType(struct soap*, struct wsa5__ReferenceParametersType *const*, const char*, const char*);
SOAP_FMAC3 struct wsa5__ReferenceParametersType ** SOAP_FMAC4 soap_get_PointerTowsa5__ReferenceParametersType(struct soap*, struct wsa5__ReferenceParametersType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_wsa5__FaultCodesOpenEnumType_DEFINED
#define SOAP_TYPE_wsa5__FaultCodesOpenEnumType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsa5__FaultCodesOpenEnumType(struct soap*, char **);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__FaultCodesOpenEnumType(struct soap*, char *const*);

#define soap_wsa5__FaultCodesOpenEnumType2s soap_string2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__FaultCodesOpenEnumType(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2wsa5__FaultCodesOpenEnumType soap_s2string

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_wsa5__FaultCodesOpenEnumType(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__FaultCodesOpenEnumType(struct soap*, char *const*, const char*, const char*);

inline int soap_write_wsa5__FaultCodesOpenEnumType(struct soap *soap, char *const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_wsa5__FaultCodesOpenEnumType(soap, p, "wsa5:FaultCodesOpenEnumType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_wsa5__FaultCodesOpenEnumType(struct soap*, char **, const char*, const char*);

inline int soap_read_wsa5__FaultCodesOpenEnumType(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_wsa5__FaultCodesOpenEnumType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_wsa5__RelationshipTypeOpenEnum_DEFINED
#define SOAP_TYPE_wsa5__RelationshipTypeOpenEnum_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsa5__RelationshipTypeOpenEnum(struct soap*, char **);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__RelationshipTypeOpenEnum(struct soap*, char *const*);

#define soap_wsa5__RelationshipTypeOpenEnum2s soap_string2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__RelationshipTypeOpenEnum(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2wsa5__RelationshipTypeOpenEnum soap_s2string

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_wsa5__RelationshipTypeOpenEnum(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__RelationshipTypeOpenEnum(struct soap*, char *const*, const char*, const char*);

inline int soap_write_wsa5__RelationshipTypeOpenEnum(struct soap *soap, char *const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_wsa5__RelationshipTypeOpenEnum(soap, p, "wsa5:RelationshipTypeOpenEnum", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_wsa5__RelationshipTypeOpenEnum(struct soap*, char **, const char*, const char*);

inline int soap_read_wsa5__RelationshipTypeOpenEnum(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_wsa5__RelationshipTypeOpenEnum(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_PointerTounsignedByte_DEFINED
#define SOAP_TYPE_PointerTounsignedByte_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTounsignedByte(struct soap*, unsigned char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTounsignedByte(struct soap*, const char *, int, unsigned char *const*, const char *);
SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_in_PointerTounsignedByte(struct soap*, const char*, unsigned char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTounsignedByte(struct soap*, unsigned char *const*, const char*, const char*);
SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_get_PointerTounsignedByte(struct soap*, unsigned char **, const char*, const char*);
#endif

#ifndef SOAP_TYPE__XML_DEFINED
#define SOAP_TYPE__XML_DEFINED
#endif

#ifndef SOAP_TYPE__QName_DEFINED
#define SOAP_TYPE__QName_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default__QName(struct soap*, char **);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

inline int soap_write__QName(struct soap *soap, char *const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

inline int soap_read__QName(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get__QName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_string_DEFINED
#define SOAP_TYPE_string_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap*, char **);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

inline int soap_write_string(struct soap *soap, char *const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

inline int soap_read_string(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOf_wstop__TopicNamespaceType_Topic_DEFINED
#define SOAP_TYPE_std__vectorTemplateOf_wstop__TopicNamespaceType_Topic_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_wstop__TopicNamespaceType_Topic(struct soap*, std::vector<_wstop__TopicNamespaceType_Topic> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_wstop__TopicNamespaceType_Topic(struct soap*, const std::vector<_wstop__TopicNamespaceType_Topic> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_wstop__TopicNamespaceType_Topic(struct soap*, const char*, int, const std::vector<_wstop__TopicNamespaceType_Topic> *, const char*);
SOAP_FMAC3 std::vector<_wstop__TopicNamespaceType_Topic> * SOAP_FMAC4 soap_in_std__vectorTemplateOf_wstop__TopicNamespaceType_Topic(struct soap*, const char*, std::vector<_wstop__TopicNamespaceType_Topic> *, const char*);
SOAP_FMAC1 std::vector<_wstop__TopicNamespaceType_Topic>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_wstop__TopicNamespaceType_Topic(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_wstop__TopicNamespaceType_Topic>  * soap_new_std__vectorTemplateOf_wstop__TopicNamespaceType_Topic(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOf_wstop__TopicNamespaceType_Topic(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTowstop__TopicType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTowstop__TopicType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTowstop__TopicType(struct soap*, std::vector<wstop__TopicType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTowstop__TopicType(struct soap*, const std::vector<wstop__TopicType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTowstop__TopicType(struct soap*, const char*, int, const std::vector<wstop__TopicType *> *, const char*);
SOAP_FMAC3 std::vector<wstop__TopicType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTowstop__TopicType(struct soap*, const char*, std::vector<wstop__TopicType *> *, const char*);
SOAP_FMAC1 std::vector<wstop__TopicType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTowstop__TopicType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<wstop__TopicType *>  * soap_new_std__vectorTemplateOfPointerTowstop__TopicType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTowstop__TopicType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfxsd__QName_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfxsd__QName_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfxsd__QName(struct soap*, std::vector<std::string> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfxsd__QName(struct soap*, const std::vector<std::string> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfxsd__QName(struct soap*, const char*, int, const std::vector<std::string> *, const char*);
SOAP_FMAC3 std::vector<std::string> * SOAP_FMAC4 soap_in_std__vectorTemplateOfxsd__QName(struct soap*, const char*, std::vector<std::string> *, const char*);
SOAP_FMAC1 std::vector<std::string>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfxsd__QName(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<std::string>  * soap_new_std__vectorTemplateOfxsd__QName(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfxsd__QName(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__PresetTour_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__PresetTour_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__PresetTour(struct soap*, std::vector<tt__PresetTour *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__PresetTour(struct soap*, const std::vector<tt__PresetTour *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__PresetTour(struct soap*, const char*, int, const std::vector<tt__PresetTour *> *, const char*);
SOAP_FMAC3 std::vector<tt__PresetTour *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__PresetTour(struct soap*, const char*, std::vector<tt__PresetTour *> *, const char*);
SOAP_FMAC1 std::vector<tt__PresetTour *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__PresetTour(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__PresetTour *>  * soap_new_std__vectorTemplateOfPointerTott__PresetTour(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__PresetTour(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__PTZPreset_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__PTZPreset_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__PTZPreset(struct soap*, std::vector<tt__PTZPreset *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__PTZPreset(struct soap*, const std::vector<tt__PTZPreset *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__PTZPreset(struct soap*, const char*, int, const std::vector<tt__PTZPreset *> *, const char*);
SOAP_FMAC3 std::vector<tt__PTZPreset *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__PTZPreset(struct soap*, const char*, std::vector<tt__PTZPreset *> *, const char*);
SOAP_FMAC1 std::vector<tt__PTZPreset *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__PTZPreset(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__PTZPreset *>  * soap_new_std__vectorTemplateOfPointerTott__PTZPreset(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__PTZPreset(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__PTZConfiguration_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__PTZConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__PTZConfiguration(struct soap*, std::vector<tt__PTZConfiguration *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__PTZConfiguration(struct soap*, const std::vector<tt__PTZConfiguration *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__PTZConfiguration(struct soap*, const char*, int, const std::vector<tt__PTZConfiguration *> *, const char*);
SOAP_FMAC3 std::vector<tt__PTZConfiguration *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__PTZConfiguration(struct soap*, const char*, std::vector<tt__PTZConfiguration *> *, const char*);
SOAP_FMAC1 std::vector<tt__PTZConfiguration *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__PTZConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__PTZConfiguration *>  * soap_new_std__vectorTemplateOfPointerTott__PTZConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__PTZConfiguration(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__PTZNode_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__PTZNode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__PTZNode(struct soap*, std::vector<tt__PTZNode *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__PTZNode(struct soap*, const std::vector<tt__PTZNode *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__PTZNode(struct soap*, const char*, int, const std::vector<tt__PTZNode *> *, const char*);
SOAP_FMAC3 std::vector<tt__PTZNode *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__PTZNode(struct soap*, const char*, std::vector<tt__PTZNode *> *, const char*);
SOAP_FMAC1 std::vector<tt__PTZNode *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__PTZNode(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__PTZNode *>  * soap_new_std__vectorTemplateOfPointerTott__PTZNode(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__PTZNode(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__OSDConfiguration_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__OSDConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__OSDConfiguration(struct soap*, std::vector<tt__OSDConfiguration *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__OSDConfiguration(struct soap*, const std::vector<tt__OSDConfiguration *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__OSDConfiguration(struct soap*, const char*, int, const std::vector<tt__OSDConfiguration *> *, const char*);
SOAP_FMAC3 std::vector<tt__OSDConfiguration *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__OSDConfiguration(struct soap*, const char*, std::vector<tt__OSDConfiguration *> *, const char*);
SOAP_FMAC1 std::vector<tt__OSDConfiguration *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__OSDConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__OSDConfiguration *>  * soap_new_std__vectorTemplateOfPointerTott__OSDConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__OSDConfiguration(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTotrt__VideoSourceMode_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTotrt__VideoSourceMode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTotrt__VideoSourceMode(struct soap*, std::vector<trt__VideoSourceMode *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTotrt__VideoSourceMode(struct soap*, const std::vector<trt__VideoSourceMode *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTotrt__VideoSourceMode(struct soap*, const char*, int, const std::vector<trt__VideoSourceMode *> *, const char*);
SOAP_FMAC3 std::vector<trt__VideoSourceMode *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTotrt__VideoSourceMode(struct soap*, const char*, std::vector<trt__VideoSourceMode *> *, const char*);
SOAP_FMAC1 std::vector<trt__VideoSourceMode *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTotrt__VideoSourceMode(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<trt__VideoSourceMode *>  * soap_new_std__vectorTemplateOfPointerTotrt__VideoSourceMode(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTotrt__VideoSourceMode(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__AudioDecoderConfiguration_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__AudioDecoderConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__AudioDecoderConfiguration(struct soap*, std::vector<tt__AudioDecoderConfiguration *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__AudioDecoderConfiguration(struct soap*, const std::vector<tt__AudioDecoderConfiguration *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__AudioDecoderConfiguration(struct soap*, const char*, int, const std::vector<tt__AudioDecoderConfiguration *> *, const char*);
SOAP_FMAC3 std::vector<tt__AudioDecoderConfiguration *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__AudioDecoderConfiguration(struct soap*, const char*, std::vector<tt__AudioDecoderConfiguration *> *, const char*);
SOAP_FMAC1 std::vector<tt__AudioDecoderConfiguration *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__AudioDecoderConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__AudioDecoderConfiguration *>  * soap_new_std__vectorTemplateOfPointerTott__AudioDecoderConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__AudioDecoderConfiguration(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__AudioOutputConfiguration_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__AudioOutputConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__AudioOutputConfiguration(struct soap*, std::vector<tt__AudioOutputConfiguration *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__AudioOutputConfiguration(struct soap*, const std::vector<tt__AudioOutputConfiguration *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__AudioOutputConfiguration(struct soap*, const char*, int, const std::vector<tt__AudioOutputConfiguration *> *, const char*);
SOAP_FMAC3 std::vector<tt__AudioOutputConfiguration *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__AudioOutputConfiguration(struct soap*, const char*, std::vector<tt__AudioOutputConfiguration *> *, const char*);
SOAP_FMAC1 std::vector<tt__AudioOutputConfiguration *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__AudioOutputConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__AudioOutputConfiguration *>  * soap_new_std__vectorTemplateOfPointerTott__AudioOutputConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__AudioOutputConfiguration(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__MetadataConfiguration_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__MetadataConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__MetadataConfiguration(struct soap*, std::vector<tt__MetadataConfiguration *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__MetadataConfiguration(struct soap*, const std::vector<tt__MetadataConfiguration *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__MetadataConfiguration(struct soap*, const char*, int, const std::vector<tt__MetadataConfiguration *> *, const char*);
SOAP_FMAC3 std::vector<tt__MetadataConfiguration *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__MetadataConfiguration(struct soap*, const char*, std::vector<tt__MetadataConfiguration *> *, const char*);
SOAP_FMAC1 std::vector<tt__MetadataConfiguration *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__MetadataConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__MetadataConfiguration *>  * soap_new_std__vectorTemplateOfPointerTott__MetadataConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__MetadataConfiguration(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__VideoAnalyticsConfiguration_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__VideoAnalyticsConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__VideoAnalyticsConfiguration(struct soap*, std::vector<tt__VideoAnalyticsConfiguration *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__VideoAnalyticsConfiguration(struct soap*, const std::vector<tt__VideoAnalyticsConfiguration *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__VideoAnalyticsConfiguration(struct soap*, const char*, int, const std::vector<tt__VideoAnalyticsConfiguration *> *, const char*);
SOAP_FMAC3 std::vector<tt__VideoAnalyticsConfiguration *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__VideoAnalyticsConfiguration(struct soap*, const char*, std::vector<tt__VideoAnalyticsConfiguration *> *, const char*);
SOAP_FMAC1 std::vector<tt__VideoAnalyticsConfiguration *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__VideoAnalyticsConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__VideoAnalyticsConfiguration *>  * soap_new_std__vectorTemplateOfPointerTott__VideoAnalyticsConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__VideoAnalyticsConfiguration(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__AudioSourceConfiguration_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__AudioSourceConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__AudioSourceConfiguration(struct soap*, std::vector<tt__AudioSourceConfiguration *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__AudioSourceConfiguration(struct soap*, const std::vector<tt__AudioSourceConfiguration *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__AudioSourceConfiguration(struct soap*, const char*, int, const std::vector<tt__AudioSourceConfiguration *> *, const char*);
SOAP_FMAC3 std::vector<tt__AudioSourceConfiguration *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__AudioSourceConfiguration(struct soap*, const char*, std::vector<tt__AudioSourceConfiguration *> *, const char*);
SOAP_FMAC1 std::vector<tt__AudioSourceConfiguration *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__AudioSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__AudioSourceConfiguration *>  * soap_new_std__vectorTemplateOfPointerTott__AudioSourceConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__AudioSourceConfiguration(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__AudioEncoderConfiguration_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__AudioEncoderConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__AudioEncoderConfiguration(struct soap*, std::vector<tt__AudioEncoderConfiguration *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__AudioEncoderConfiguration(struct soap*, const std::vector<tt__AudioEncoderConfiguration *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__AudioEncoderConfiguration(struct soap*, const char*, int, const std::vector<tt__AudioEncoderConfiguration *> *, const char*);
SOAP_FMAC3 std::vector<tt__AudioEncoderConfiguration *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__AudioEncoderConfiguration(struct soap*, const char*, std::vector<tt__AudioEncoderConfiguration *> *, const char*);
SOAP_FMAC1 std::vector<tt__AudioEncoderConfiguration *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__AudioEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__AudioEncoderConfiguration *>  * soap_new_std__vectorTemplateOfPointerTott__AudioEncoderConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__AudioEncoderConfiguration(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__VideoSourceConfiguration_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__VideoSourceConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__VideoSourceConfiguration(struct soap*, std::vector<tt__VideoSourceConfiguration *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__VideoSourceConfiguration(struct soap*, const std::vector<tt__VideoSourceConfiguration *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__VideoSourceConfiguration(struct soap*, const char*, int, const std::vector<tt__VideoSourceConfiguration *> *, const char*);
SOAP_FMAC3 std::vector<tt__VideoSourceConfiguration *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__VideoSourceConfiguration(struct soap*, const char*, std::vector<tt__VideoSourceConfiguration *> *, const char*);
SOAP_FMAC1 std::vector<tt__VideoSourceConfiguration *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__VideoSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__VideoSourceConfiguration *>  * soap_new_std__vectorTemplateOfPointerTott__VideoSourceConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__VideoSourceConfiguration(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__VideoEncoderConfiguration_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__VideoEncoderConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__VideoEncoderConfiguration(struct soap*, std::vector<tt__VideoEncoderConfiguration *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__VideoEncoderConfiguration(struct soap*, const std::vector<tt__VideoEncoderConfiguration *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__VideoEncoderConfiguration(struct soap*, const char*, int, const std::vector<tt__VideoEncoderConfiguration *> *, const char*);
SOAP_FMAC3 std::vector<tt__VideoEncoderConfiguration *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__VideoEncoderConfiguration(struct soap*, const char*, std::vector<tt__VideoEncoderConfiguration *> *, const char*);
SOAP_FMAC1 std::vector<tt__VideoEncoderConfiguration *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__VideoEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__VideoEncoderConfiguration *>  * soap_new_std__vectorTemplateOfPointerTott__VideoEncoderConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__VideoEncoderConfiguration(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__Profile_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__Profile_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__Profile(struct soap*, std::vector<tt__Profile *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__Profile(struct soap*, const std::vector<tt__Profile *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__Profile(struct soap*, const char*, int, const std::vector<tt__Profile *> *, const char*);
SOAP_FMAC3 std::vector<tt__Profile *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__Profile(struct soap*, const char*, std::vector<tt__Profile *> *, const char*);
SOAP_FMAC1 std::vector<tt__Profile *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__Profile(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__Profile *>  * soap_new_std__vectorTemplateOfPointerTott__Profile(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__Profile(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__AudioOutput_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__AudioOutput_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__AudioOutput(struct soap*, std::vector<tt__AudioOutput *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__AudioOutput(struct soap*, const std::vector<tt__AudioOutput *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__AudioOutput(struct soap*, const char*, int, const std::vector<tt__AudioOutput *> *, const char*);
SOAP_FMAC3 std::vector<tt__AudioOutput *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__AudioOutput(struct soap*, const char*, std::vector<tt__AudioOutput *> *, const char*);
SOAP_FMAC1 std::vector<tt__AudioOutput *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__AudioOutput(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__AudioOutput *>  * soap_new_std__vectorTemplateOfPointerTott__AudioOutput(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__AudioOutput(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__AudioSource_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__AudioSource_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__AudioSource(struct soap*, std::vector<tt__AudioSource *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__AudioSource(struct soap*, const std::vector<tt__AudioSource *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__AudioSource(struct soap*, const char*, int, const std::vector<tt__AudioSource *> *, const char*);
SOAP_FMAC3 std::vector<tt__AudioSource *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__AudioSource(struct soap*, const char*, std::vector<tt__AudioSource *> *, const char*);
SOAP_FMAC1 std::vector<tt__AudioSource *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__AudioSource(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__AudioSource *>  * soap_new_std__vectorTemplateOfPointerTott__AudioSource(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__AudioSource(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__VideoSource_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__VideoSource_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__VideoSource(struct soap*, std::vector<tt__VideoSource *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__VideoSource(struct soap*, const std::vector<tt__VideoSource *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__VideoSource(struct soap*, const char*, int, const std::vector<tt__VideoSource *> *, const char*);
SOAP_FMAC3 std::vector<tt__VideoSource *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__VideoSource(struct soap*, const char*, std::vector<tt__VideoSource *> *, const char*);
SOAP_FMAC1 std::vector<tt__VideoSource *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__VideoSource(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__VideoSource *>  * soap_new_std__vectorTemplateOfPointerTott__VideoSource(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__VideoSource(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOf_wsrfbf__BaseFaultType_Description_DEFINED
#define SOAP_TYPE_std__vectorTemplateOf_wsrfbf__BaseFaultType_Description_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_wsrfbf__BaseFaultType_Description(struct soap*, std::vector<_wsrfbf__BaseFaultType_Description> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_wsrfbf__BaseFaultType_Description(struct soap*, const std::vector<_wsrfbf__BaseFaultType_Description> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_wsrfbf__BaseFaultType_Description(struct soap*, const char*, int, const std::vector<_wsrfbf__BaseFaultType_Description> *, const char*);
SOAP_FMAC3 std::vector<_wsrfbf__BaseFaultType_Description> * SOAP_FMAC4 soap_in_std__vectorTemplateOf_wsrfbf__BaseFaultType_Description(struct soap*, const char*, std::vector<_wsrfbf__BaseFaultType_Description> *, const char*);
SOAP_FMAC1 std::vector<_wsrfbf__BaseFaultType_Description>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_wsrfbf__BaseFaultType_Description(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_wsrfbf__BaseFaultType_Description>  * soap_new_std__vectorTemplateOf_wsrfbf__BaseFaultType_Description(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOf_wsrfbf__BaseFaultType_Description(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTowsnt__NotificationMessageHolderType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTowsnt__NotificationMessageHolderType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTowsnt__NotificationMessageHolderType(struct soap*, std::vector<wsnt__NotificationMessageHolderType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTowsnt__NotificationMessageHolderType(struct soap*, const std::vector<wsnt__NotificationMessageHolderType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTowsnt__NotificationMessageHolderType(struct soap*, const char*, int, const std::vector<wsnt__NotificationMessageHolderType *> *, const char*);
SOAP_FMAC3 std::vector<wsnt__NotificationMessageHolderType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTowsnt__NotificationMessageHolderType(struct soap*, const char*, std::vector<wsnt__NotificationMessageHolderType *> *, const char*);
SOAP_FMAC1 std::vector<wsnt__NotificationMessageHolderType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTowsnt__NotificationMessageHolderType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<wsnt__NotificationMessageHolderType *>  * soap_new_std__vectorTemplateOfPointerTowsnt__NotificationMessageHolderType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTowsnt__NotificationMessageHolderType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTowsnt__TopicExpressionType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTowsnt__TopicExpressionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTowsnt__TopicExpressionType(struct soap*, std::vector<wsnt__TopicExpressionType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTowsnt__TopicExpressionType(struct soap*, const std::vector<wsnt__TopicExpressionType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTowsnt__TopicExpressionType(struct soap*, const char*, int, const std::vector<wsnt__TopicExpressionType *> *, const char*);
SOAP_FMAC3 std::vector<wsnt__TopicExpressionType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTowsnt__TopicExpressionType(struct soap*, const char*, std::vector<wsnt__TopicExpressionType *> *, const char*);
SOAP_FMAC1 std::vector<wsnt__TopicExpressionType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTowsnt__TopicExpressionType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<wsnt__TopicExpressionType *>  * soap_new_std__vectorTemplateOfPointerTowsnt__TopicExpressionType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTowsnt__TopicExpressionType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__FileProgress_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__FileProgress_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__FileProgress(struct soap*, std::vector<tt__FileProgress *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__FileProgress(struct soap*, const std::vector<tt__FileProgress *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__FileProgress(struct soap*, const char*, int, const std::vector<tt__FileProgress *> *, const char*);
SOAP_FMAC3 std::vector<tt__FileProgress *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__FileProgress(struct soap*, const char*, std::vector<tt__FileProgress *> *, const char*);
SOAP_FMAC1 std::vector<tt__FileProgress *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__FileProgress(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__FileProgress *>  * soap_new_std__vectorTemplateOfPointerTott__FileProgress(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__FileProgress(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOftt__OSDType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOftt__OSDType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOftt__OSDType(struct soap*, std::vector<enum tt__OSDType> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOftt__OSDType(struct soap*, const std::vector<enum tt__OSDType> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOftt__OSDType(struct soap*, const char*, int, const std::vector<enum tt__OSDType> *, const char*);
SOAP_FMAC3 std::vector<enum tt__OSDType> * SOAP_FMAC4 soap_in_std__vectorTemplateOftt__OSDType(struct soap*, const char*, std::vector<enum tt__OSDType> *, const char*);
SOAP_FMAC1 std::vector<enum tt__OSDType>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOftt__OSDType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<enum tt__OSDType>  * soap_new_std__vectorTemplateOftt__OSDType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOftt__OSDType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__ColorspaceRange_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__ColorspaceRange_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__ColorspaceRange(struct soap*, std::vector<tt__ColorspaceRange *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__ColorspaceRange(struct soap*, const std::vector<tt__ColorspaceRange *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__ColorspaceRange(struct soap*, const char*, int, const std::vector<tt__ColorspaceRange *> *, const char*);
SOAP_FMAC3 std::vector<tt__ColorspaceRange *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__ColorspaceRange(struct soap*, const char*, std::vector<tt__ColorspaceRange *> *, const char*);
SOAP_FMAC1 std::vector<tt__ColorspaceRange *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__ColorspaceRange(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__ColorspaceRange *>  * soap_new_std__vectorTemplateOfPointerTott__ColorspaceRange(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__ColorspaceRange(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__Color_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__Color_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__Color(struct soap*, std::vector<tt__Color *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__Color(struct soap*, const std::vector<tt__Color *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__Color(struct soap*, const char*, int, const std::vector<tt__Color *> *, const char*);
SOAP_FMAC3 std::vector<tt__Color *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__Color(struct soap*, const char*, std::vector<tt__Color *> *, const char*);
SOAP_FMAC1 std::vector<tt__Color *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__Color(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__Color *>  * soap_new_std__vectorTemplateOfPointerTott__Color(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__Color(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__ActiveConnection_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__ActiveConnection_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__ActiveConnection(struct soap*, std::vector<tt__ActiveConnection *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__ActiveConnection(struct soap*, const std::vector<tt__ActiveConnection *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__ActiveConnection(struct soap*, const char*, int, const std::vector<tt__ActiveConnection *> *, const char*);
SOAP_FMAC3 std::vector<tt__ActiveConnection *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__ActiveConnection(struct soap*, const char*, std::vector<tt__ActiveConnection *> *, const char*);
SOAP_FMAC1 std::vector<tt__ActiveConnection *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__ActiveConnection(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__ActiveConnection *>  * soap_new_std__vectorTemplateOfPointerTott__ActiveConnection(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__ActiveConnection(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__AudioClassCandidate_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__AudioClassCandidate_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__AudioClassCandidate(struct soap*, std::vector<tt__AudioClassCandidate *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__AudioClassCandidate(struct soap*, const std::vector<tt__AudioClassCandidate *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__AudioClassCandidate(struct soap*, const char*, int, const std::vector<tt__AudioClassCandidate *> *, const char*);
SOAP_FMAC3 std::vector<tt__AudioClassCandidate *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__AudioClassCandidate(struct soap*, const char*, std::vector<tt__AudioClassCandidate *> *, const char*);
SOAP_FMAC1 std::vector<tt__AudioClassCandidate *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__AudioClassCandidate(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__AudioClassCandidate *>  * soap_new_std__vectorTemplateOfPointerTott__AudioClassCandidate(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__AudioClassCandidate(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__EngineConfiguration_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__EngineConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__EngineConfiguration(struct soap*, std::vector<tt__EngineConfiguration *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__EngineConfiguration(struct soap*, const std::vector<tt__EngineConfiguration *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__EngineConfiguration(struct soap*, const char*, int, const std::vector<tt__EngineConfiguration *> *, const char*);
SOAP_FMAC3 std::vector<tt__EngineConfiguration *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__EngineConfiguration(struct soap*, const char*, std::vector<tt__EngineConfiguration *> *, const char*);
SOAP_FMAC1 std::vector<tt__EngineConfiguration *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__EngineConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__EngineConfiguration *>  * soap_new_std__vectorTemplateOfPointerTott__EngineConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__EngineConfiguration(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__RecordingJobStateTrack_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__RecordingJobStateTrack_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__RecordingJobStateTrack(struct soap*, std::vector<tt__RecordingJobStateTrack *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__RecordingJobStateTrack(struct soap*, const std::vector<tt__RecordingJobStateTrack *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__RecordingJobStateTrack(struct soap*, const char*, int, const std::vector<tt__RecordingJobStateTrack *> *, const char*);
SOAP_FMAC3 std::vector<tt__RecordingJobStateTrack *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__RecordingJobStateTrack(struct soap*, const char*, std::vector<tt__RecordingJobStateTrack *> *, const char*);
SOAP_FMAC1 std::vector<tt__RecordingJobStateTrack *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__RecordingJobStateTrack(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__RecordingJobStateTrack *>  * soap_new_std__vectorTemplateOfPointerTott__RecordingJobStateTrack(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__RecordingJobStateTrack(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__RecordingJobStateSource_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__RecordingJobStateSource_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__RecordingJobStateSource(struct soap*, std::vector<tt__RecordingJobStateSource *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__RecordingJobStateSource(struct soap*, const std::vector<tt__RecordingJobStateSource *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__RecordingJobStateSource(struct soap*, const char*, int, const std::vector<tt__RecordingJobStateSource *> *, const char*);
SOAP_FMAC3 std::vector<tt__RecordingJobStateSource *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__RecordingJobStateSource(struct soap*, const char*, std::vector<tt__RecordingJobStateSource *> *, const char*);
SOAP_FMAC1 std::vector<tt__RecordingJobStateSource *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__RecordingJobStateSource(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__RecordingJobStateSource *>  * soap_new_std__vectorTemplateOfPointerTott__RecordingJobStateSource(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__RecordingJobStateSource(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__RecordingJobTrack_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__RecordingJobTrack_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__RecordingJobTrack(struct soap*, std::vector<tt__RecordingJobTrack *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__RecordingJobTrack(struct soap*, const std::vector<tt__RecordingJobTrack *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__RecordingJobTrack(struct soap*, const char*, int, const std::vector<tt__RecordingJobTrack *> *, const char*);
SOAP_FMAC3 std::vector<tt__RecordingJobTrack *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__RecordingJobTrack(struct soap*, const char*, std::vector<tt__RecordingJobTrack *> *, const char*);
SOAP_FMAC1 std::vector<tt__RecordingJobTrack *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__RecordingJobTrack(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__RecordingJobTrack *>  * soap_new_std__vectorTemplateOfPointerTott__RecordingJobTrack(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__RecordingJobTrack(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__RecordingJobSource_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__RecordingJobSource_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__RecordingJobSource(struct soap*, std::vector<tt__RecordingJobSource *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__RecordingJobSource(struct soap*, const std::vector<tt__RecordingJobSource *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__RecordingJobSource(struct soap*, const char*, int, const std::vector<tt__RecordingJobSource *> *, const char*);
SOAP_FMAC3 std::vector<tt__RecordingJobSource *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__RecordingJobSource(struct soap*, const char*, std::vector<tt__RecordingJobSource *> *, const char*);
SOAP_FMAC1 std::vector<tt__RecordingJobSource *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__RecordingJobSource(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__RecordingJobSource *>  * soap_new_std__vectorTemplateOfPointerTott__RecordingJobSource(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__RecordingJobSource(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__GetTracksResponseItem_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__GetTracksResponseItem_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__GetTracksResponseItem(struct soap*, std::vector<tt__GetTracksResponseItem *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__GetTracksResponseItem(struct soap*, const std::vector<tt__GetTracksResponseItem *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__GetTracksResponseItem(struct soap*, const char*, int, const std::vector<tt__GetTracksResponseItem *> *, const char*);
SOAP_FMAC3 std::vector<tt__GetTracksResponseItem *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__GetTracksResponseItem(struct soap*, const char*, std::vector<tt__GetTracksResponseItem *> *, const char*);
SOAP_FMAC1 std::vector<tt__GetTracksResponseItem *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__GetTracksResponseItem(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__GetTracksResponseItem *>  * soap_new_std__vectorTemplateOfPointerTott__GetTracksResponseItem(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__GetTracksResponseItem(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__TrackAttributes_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__TrackAttributes_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__TrackAttributes(struct soap*, std::vector<tt__TrackAttributes *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__TrackAttributes(struct soap*, const std::vector<tt__TrackAttributes *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__TrackAttributes(struct soap*, const char*, int, const std::vector<tt__TrackAttributes *> *, const char*);
SOAP_FMAC3 std::vector<tt__TrackAttributes *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__TrackAttributes(struct soap*, const char*, std::vector<tt__TrackAttributes *> *, const char*);
SOAP_FMAC1 std::vector<tt__TrackAttributes *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__TrackAttributes(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__TrackAttributes *>  * soap_new_std__vectorTemplateOfPointerTott__TrackAttributes(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__TrackAttributes(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__TrackInformation_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__TrackInformation_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__TrackInformation(struct soap*, std::vector<tt__TrackInformation *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__TrackInformation(struct soap*, const std::vector<tt__TrackInformation *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__TrackInformation(struct soap*, const char*, int, const std::vector<tt__TrackInformation *> *, const char*);
SOAP_FMAC3 std::vector<tt__TrackInformation *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__TrackInformation(struct soap*, const char*, std::vector<tt__TrackInformation *> *, const char*);
SOAP_FMAC1 std::vector<tt__TrackInformation *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__TrackInformation(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__TrackInformation *>  * soap_new_std__vectorTemplateOfPointerTott__TrackInformation(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__TrackInformation(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__FindMetadataResult_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__FindMetadataResult_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__FindMetadataResult(struct soap*, std::vector<tt__FindMetadataResult *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__FindMetadataResult(struct soap*, const std::vector<tt__FindMetadataResult *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__FindMetadataResult(struct soap*, const char*, int, const std::vector<tt__FindMetadataResult *> *, const char*);
SOAP_FMAC3 std::vector<tt__FindMetadataResult *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__FindMetadataResult(struct soap*, const char*, std::vector<tt__FindMetadataResult *> *, const char*);
SOAP_FMAC1 std::vector<tt__FindMetadataResult *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__FindMetadataResult(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__FindMetadataResult *>  * soap_new_std__vectorTemplateOfPointerTott__FindMetadataResult(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__FindMetadataResult(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__FindPTZPositionResult_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__FindPTZPositionResult_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__FindPTZPositionResult(struct soap*, std::vector<tt__FindPTZPositionResult *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__FindPTZPositionResult(struct soap*, const std::vector<tt__FindPTZPositionResult *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__FindPTZPositionResult(struct soap*, const char*, int, const std::vector<tt__FindPTZPositionResult *> *, const char*);
SOAP_FMAC3 std::vector<tt__FindPTZPositionResult *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__FindPTZPositionResult(struct soap*, const char*, std::vector<tt__FindPTZPositionResult *> *, const char*);
SOAP_FMAC1 std::vector<tt__FindPTZPositionResult *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__FindPTZPositionResult(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__FindPTZPositionResult *>  * soap_new_std__vectorTemplateOfPointerTott__FindPTZPositionResult(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__FindPTZPositionResult(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__FindEventResult_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__FindEventResult_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__FindEventResult(struct soap*, std::vector<tt__FindEventResult *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__FindEventResult(struct soap*, const std::vector<tt__FindEventResult *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__FindEventResult(struct soap*, const char*, int, const std::vector<tt__FindEventResult *> *, const char*);
SOAP_FMAC3 std::vector<tt__FindEventResult *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__FindEventResult(struct soap*, const char*, std::vector<tt__FindEventResult *> *, const char*);
SOAP_FMAC1 std::vector<tt__FindEventResult *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__FindEventResult(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__FindEventResult *>  * soap_new_std__vectorTemplateOfPointerTott__FindEventResult(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__FindEventResult(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__RecordingInformation_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__RecordingInformation_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__RecordingInformation(struct soap*, std::vector<tt__RecordingInformation *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__RecordingInformation(struct soap*, const std::vector<tt__RecordingInformation *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__RecordingInformation(struct soap*, const char*, int, const std::vector<tt__RecordingInformation *> *, const char*);
SOAP_FMAC3 std::vector<tt__RecordingInformation *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__RecordingInformation(struct soap*, const char*, std::vector<tt__RecordingInformation *> *, const char*);
SOAP_FMAC1 std::vector<tt__RecordingInformation *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__RecordingInformation(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__RecordingInformation *>  * soap_new_std__vectorTemplateOfPointerTott__RecordingInformation(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__RecordingInformation(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOftt__RecordingReference_DEFINED
#define SOAP_TYPE_std__vectorTemplateOftt__RecordingReference_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOftt__RecordingReference(struct soap*, std::vector<std::string> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOftt__RecordingReference(struct soap*, const std::vector<std::string> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOftt__RecordingReference(struct soap*, const char*, int, const std::vector<std::string> *, const char*);
SOAP_FMAC3 std::vector<std::string> * SOAP_FMAC4 soap_in_std__vectorTemplateOftt__RecordingReference(struct soap*, const char*, std::vector<std::string> *, const char*);
SOAP_FMAC1 std::vector<std::string>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOftt__RecordingReference(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<std::string>  * soap_new_std__vectorTemplateOftt__RecordingReference(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOftt__RecordingReference(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__SourceReference_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__SourceReference_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__SourceReference(struct soap*, std::vector<tt__SourceReference *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__SourceReference(struct soap*, const std::vector<tt__SourceReference *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__SourceReference(struct soap*, const char*, int, const std::vector<tt__SourceReference *> *, const char*);
SOAP_FMAC3 std::vector<tt__SourceReference *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__SourceReference(struct soap*, const char*, std::vector<tt__SourceReference *> *, const char*);
SOAP_FMAC1 std::vector<tt__SourceReference *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__SourceReference(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__SourceReference *>  * soap_new_std__vectorTemplateOfPointerTott__SourceReference(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__SourceReference(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__Rectangle_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__Rectangle_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__Rectangle(struct soap*, std::vector<tt__Rectangle *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__Rectangle(struct soap*, const std::vector<tt__Rectangle *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__Rectangle(struct soap*, const char*, int, const std::vector<tt__Rectangle *> *, const char*);
SOAP_FMAC3 std::vector<tt__Rectangle *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__Rectangle(struct soap*, const char*, std::vector<tt__Rectangle *> *, const char*);
SOAP_FMAC1 std::vector<tt__Rectangle *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__Rectangle(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__Rectangle *>  * soap_new_std__vectorTemplateOfPointerTott__Rectangle(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__Rectangle(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__PaneLayoutOptions_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__PaneLayoutOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__PaneLayoutOptions(struct soap*, std::vector<tt__PaneLayoutOptions *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__PaneLayoutOptions(struct soap*, const std::vector<tt__PaneLayoutOptions *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__PaneLayoutOptions(struct soap*, const char*, int, const std::vector<tt__PaneLayoutOptions *> *, const char*);
SOAP_FMAC3 std::vector<tt__PaneLayoutOptions *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__PaneLayoutOptions(struct soap*, const char*, std::vector<tt__PaneLayoutOptions *> *, const char*);
SOAP_FMAC1 std::vector<tt__PaneLayoutOptions *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__PaneLayoutOptions(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__PaneLayoutOptions *>  * soap_new_std__vectorTemplateOfPointerTott__PaneLayoutOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__PaneLayoutOptions(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__PaneLayout_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__PaneLayout_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__PaneLayout(struct soap*, std::vector<tt__PaneLayout *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__PaneLayout(struct soap*, const std::vector<tt__PaneLayout *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__PaneLayout(struct soap*, const char*, int, const std::vector<tt__PaneLayout *> *, const char*);
SOAP_FMAC3 std::vector<tt__PaneLayout *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__PaneLayout(struct soap*, const char*, std::vector<tt__PaneLayout *> *, const char*);
SOAP_FMAC1 std::vector<tt__PaneLayout *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__PaneLayout(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__PaneLayout *>  * soap_new_std__vectorTemplateOfPointerTott__PaneLayout(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__PaneLayout(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__AudioDescriptor_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__AudioDescriptor_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__AudioDescriptor(struct soap*, std::vector<tt__AudioDescriptor *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__AudioDescriptor(struct soap*, const std::vector<tt__AudioDescriptor *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__AudioDescriptor(struct soap*, const char*, int, const std::vector<tt__AudioDescriptor *> *, const char*);
SOAP_FMAC3 std::vector<tt__AudioDescriptor *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__AudioDescriptor(struct soap*, const char*, std::vector<tt__AudioDescriptor *> *, const char*);
SOAP_FMAC1 std::vector<tt__AudioDescriptor *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__AudioDescriptor(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__AudioDescriptor *>  * soap_new_std__vectorTemplateOfPointerTott__AudioDescriptor(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__AudioDescriptor(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__Polyline_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__Polyline_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__Polyline(struct soap*, std::vector<tt__Polyline *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__Polyline(struct soap*, const std::vector<tt__Polyline *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__Polyline(struct soap*, const char*, int, const std::vector<tt__Polyline *> *, const char*);
SOAP_FMAC3 std::vector<tt__Polyline *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__Polyline(struct soap*, const char*, std::vector<tt__Polyline *> *, const char*);
SOAP_FMAC1 std::vector<tt__Polyline *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__Polyline(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__Polyline *>  * soap_new_std__vectorTemplateOfPointerTott__Polyline(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__Polyline(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__ConfigDescription_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__ConfigDescription_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__ConfigDescription(struct soap*, std::vector<tt__ConfigDescription *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__ConfigDescription(struct soap*, const std::vector<tt__ConfigDescription *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__ConfigDescription(struct soap*, const char*, int, const std::vector<tt__ConfigDescription *> *, const char*);
SOAP_FMAC3 std::vector<tt__ConfigDescription *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__ConfigDescription(struct soap*, const char*, std::vector<tt__ConfigDescription *> *, const char*);
SOAP_FMAC1 std::vector<tt__ConfigDescription *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__ConfigDescription(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__ConfigDescription *>  * soap_new_std__vectorTemplateOfPointerTott__ConfigDescription(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__ConfigDescription(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOf_tt__ConfigDescription_Messages_DEFINED
#define SOAP_TYPE_std__vectorTemplateOf_tt__ConfigDescription_Messages_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_tt__ConfigDescription_Messages(struct soap*, std::vector<_tt__ConfigDescription_Messages> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_tt__ConfigDescription_Messages(struct soap*, const std::vector<_tt__ConfigDescription_Messages> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_tt__ConfigDescription_Messages(struct soap*, const char*, int, const std::vector<_tt__ConfigDescription_Messages> *, const char*);
SOAP_FMAC3 std::vector<_tt__ConfigDescription_Messages> * SOAP_FMAC4 soap_in_std__vectorTemplateOf_tt__ConfigDescription_Messages(struct soap*, const char*, std::vector<_tt__ConfigDescription_Messages> *, const char*);
SOAP_FMAC1 std::vector<_tt__ConfigDescription_Messages>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_tt__ConfigDescription_Messages(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_tt__ConfigDescription_Messages>  * soap_new_std__vectorTemplateOf_tt__ConfigDescription_Messages(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOf_tt__ConfigDescription_Messages(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__Config_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__Config_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__Config(struct soap*, std::vector<tt__Config *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__Config(struct soap*, const std::vector<tt__Config *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__Config(struct soap*, const char*, int, const std::vector<tt__Config *> *, const char*);
SOAP_FMAC3 std::vector<tt__Config *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__Config(struct soap*, const char*, std::vector<tt__Config *> *, const char*);
SOAP_FMAC1 std::vector<tt__Config *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__Config(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__Config *>  * soap_new_std__vectorTemplateOfPointerTott__Config(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__Config(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__Merge_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__Merge_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__Merge(struct soap*, std::vector<tt__Merge *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__Merge(struct soap*, const std::vector<tt__Merge *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__Merge(struct soap*, const char*, int, const std::vector<tt__Merge *> *, const char*);
SOAP_FMAC3 std::vector<tt__Merge *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__Merge(struct soap*, const char*, std::vector<tt__Merge *> *, const char*);
SOAP_FMAC1 std::vector<tt__Merge *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__Merge(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__Merge *>  * soap_new_std__vectorTemplateOfPointerTott__Merge(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__Merge(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__Split_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__Split_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__Split(struct soap*, std::vector<tt__Split *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__Split(struct soap*, const std::vector<tt__Split *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__Split(struct soap*, const char*, int, const std::vector<tt__Split *> *, const char*);
SOAP_FMAC3 std::vector<tt__Split *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__Split(struct soap*, const char*, std::vector<tt__Split *> *, const char*);
SOAP_FMAC1 std::vector<tt__Split *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__Split(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__Split *>  * soap_new_std__vectorTemplateOfPointerTott__Split(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__Split(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__Rename_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__Rename_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__Rename(struct soap*, std::vector<tt__Rename *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__Rename(struct soap*, const std::vector<tt__Rename *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__Rename(struct soap*, const char*, int, const std::vector<tt__Rename *> *, const char*);
SOAP_FMAC3 std::vector<tt__Rename *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__Rename(struct soap*, const char*, std::vector<tt__Rename *> *, const char*);
SOAP_FMAC1 std::vector<tt__Rename *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__Rename(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__Rename *>  * soap_new_std__vectorTemplateOfPointerTott__Rename(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__Rename(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__ObjectId_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__ObjectId_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__ObjectId(struct soap*, std::vector<tt__ObjectId *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__ObjectId(struct soap*, const std::vector<tt__ObjectId *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__ObjectId(struct soap*, const char*, int, const std::vector<tt__ObjectId *> *, const char*);
SOAP_FMAC3 std::vector<tt__ObjectId *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__ObjectId(struct soap*, const char*, std::vector<tt__ObjectId *> *, const char*);
SOAP_FMAC1 std::vector<tt__ObjectId *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__ObjectId(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__ObjectId *>  * soap_new_std__vectorTemplateOfPointerTott__ObjectId(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__ObjectId(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__Object_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__Object_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__Object(struct soap*, std::vector<tt__Object *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__Object(struct soap*, const std::vector<tt__Object *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__Object(struct soap*, const char*, int, const std::vector<tt__Object *> *, const char*);
SOAP_FMAC3 std::vector<tt__Object *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__Object(struct soap*, const char*, std::vector<tt__Object *> *, const char*);
SOAP_FMAC1 std::vector<tt__Object *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__Object(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__Object *>  * soap_new_std__vectorTemplateOfPointerTott__Object(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__Object(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__OtherType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__OtherType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__OtherType(struct soap*, std::vector<tt__OtherType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__OtherType(struct soap*, const std::vector<tt__OtherType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__OtherType(struct soap*, const char*, int, const std::vector<tt__OtherType *> *, const char*);
SOAP_FMAC3 std::vector<tt__OtherType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__OtherType(struct soap*, const char*, std::vector<tt__OtherType *> *, const char*);
SOAP_FMAC1 std::vector<tt__OtherType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__OtherType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__OtherType *>  * soap_new_std__vectorTemplateOfPointerTott__OtherType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__OtherType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOf_tt__ClassDescriptor_ClassCandidate_DEFINED
#define SOAP_TYPE_std__vectorTemplateOf_tt__ClassDescriptor_ClassCandidate_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_tt__ClassDescriptor_ClassCandidate(struct soap*, std::vector<_tt__ClassDescriptor_ClassCandidate> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_tt__ClassDescriptor_ClassCandidate(struct soap*, const std::vector<_tt__ClassDescriptor_ClassCandidate> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_tt__ClassDescriptor_ClassCandidate(struct soap*, const char*, int, const std::vector<_tt__ClassDescriptor_ClassCandidate> *, const char*);
SOAP_FMAC3 std::vector<_tt__ClassDescriptor_ClassCandidate> * SOAP_FMAC4 soap_in_std__vectorTemplateOf_tt__ClassDescriptor_ClassCandidate(struct soap*, const char*, std::vector<_tt__ClassDescriptor_ClassCandidate> *, const char*);
SOAP_FMAC1 std::vector<_tt__ClassDescriptor_ClassCandidate>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_tt__ClassDescriptor_ClassCandidate(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_tt__ClassDescriptor_ClassCandidate>  * soap_new_std__vectorTemplateOf_tt__ClassDescriptor_ClassCandidate(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOf_tt__ClassDescriptor_ClassCandidate(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOf_tt__ColorDescriptor_ColorCluster_DEFINED
#define SOAP_TYPE_std__vectorTemplateOf_tt__ColorDescriptor_ColorCluster_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_tt__ColorDescriptor_ColorCluster(struct soap*, std::vector<_tt__ColorDescriptor_ColorCluster> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_tt__ColorDescriptor_ColorCluster(struct soap*, const std::vector<_tt__ColorDescriptor_ColorCluster> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_tt__ColorDescriptor_ColorCluster(struct soap*, const char*, int, const std::vector<_tt__ColorDescriptor_ColorCluster> *, const char*);
SOAP_FMAC3 std::vector<_tt__ColorDescriptor_ColorCluster> * SOAP_FMAC4 soap_in_std__vectorTemplateOf_tt__ColorDescriptor_ColorCluster(struct soap*, const char*, std::vector<_tt__ColorDescriptor_ColorCluster> *, const char*);
SOAP_FMAC1 std::vector<_tt__ColorDescriptor_ColorCluster>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_tt__ColorDescriptor_ColorCluster(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_tt__ColorDescriptor_ColorCluster>  * soap_new_std__vectorTemplateOf_tt__ColorDescriptor_ColorCluster(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOf_tt__ColorDescriptor_ColorCluster(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__Polygon_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__Polygon_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__Polygon(struct soap*, std::vector<tt__Polygon *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__Polygon(struct soap*, const std::vector<tt__Polygon *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__Polygon(struct soap*, const char*, int, const std::vector<tt__Polygon *> *, const char*);
SOAP_FMAC3 std::vector<tt__Polygon *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__Polygon(struct soap*, const char*, std::vector<tt__Polygon *> *, const char*);
SOAP_FMAC1 std::vector<tt__Polygon *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__Polygon(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__Polygon *>  * soap_new_std__vectorTemplateOfPointerTott__Polygon(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__Polygon(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__Vector_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__Vector_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__Vector(struct soap*, std::vector<tt__Vector *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__Vector(struct soap*, const std::vector<tt__Vector *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__Vector(struct soap*, const char*, int, const std::vector<tt__Vector *> *, const char*);
SOAP_FMAC3 std::vector<tt__Vector *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__Vector(struct soap*, const char*, std::vector<tt__Vector *> *, const char*);
SOAP_FMAC1 std::vector<tt__Vector *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__Vector(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__Vector *>  * soap_new_std__vectorTemplateOfPointerTott__Vector(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__Vector(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOf_tt__ItemListDescription_ElementItemDescription_DEFINED
#define SOAP_TYPE_std__vectorTemplateOf_tt__ItemListDescription_ElementItemDescription_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_tt__ItemListDescription_ElementItemDescription(struct soap*, std::vector<_tt__ItemListDescription_ElementItemDescription> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_tt__ItemListDescription_ElementItemDescription(struct soap*, const std::vector<_tt__ItemListDescription_ElementItemDescription> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_tt__ItemListDescription_ElementItemDescription(struct soap*, const char*, int, const std::vector<_tt__ItemListDescription_ElementItemDescription> *, const char*);
SOAP_FMAC3 std::vector<_tt__ItemListDescription_ElementItemDescription> * SOAP_FMAC4 soap_in_std__vectorTemplateOf_tt__ItemListDescription_ElementItemDescription(struct soap*, const char*, std::vector<_tt__ItemListDescription_ElementItemDescription> *, const char*);
SOAP_FMAC1 std::vector<_tt__ItemListDescription_ElementItemDescription>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_tt__ItemListDescription_ElementItemDescription(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_tt__ItemListDescription_ElementItemDescription>  * soap_new_std__vectorTemplateOf_tt__ItemListDescription_ElementItemDescription(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOf_tt__ItemListDescription_ElementItemDescription(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOf_tt__ItemListDescription_SimpleItemDescription_DEFINED
#define SOAP_TYPE_std__vectorTemplateOf_tt__ItemListDescription_SimpleItemDescription_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_tt__ItemListDescription_SimpleItemDescription(struct soap*, std::vector<_tt__ItemListDescription_SimpleItemDescription> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_tt__ItemListDescription_SimpleItemDescription(struct soap*, const std::vector<_tt__ItemListDescription_SimpleItemDescription> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_tt__ItemListDescription_SimpleItemDescription(struct soap*, const char*, int, const std::vector<_tt__ItemListDescription_SimpleItemDescription> *, const char*);
SOAP_FMAC3 std::vector<_tt__ItemListDescription_SimpleItemDescription> * SOAP_FMAC4 soap_in_std__vectorTemplateOf_tt__ItemListDescription_SimpleItemDescription(struct soap*, const char*, std::vector<_tt__ItemListDescription_SimpleItemDescription> *, const char*);
SOAP_FMAC1 std::vector<_tt__ItemListDescription_SimpleItemDescription>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_tt__ItemListDescription_SimpleItemDescription(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_tt__ItemListDescription_SimpleItemDescription>  * soap_new_std__vectorTemplateOf_tt__ItemListDescription_SimpleItemDescription(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOf_tt__ItemListDescription_SimpleItemDescription(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOf_tt__ItemList_ElementItem_DEFINED
#define SOAP_TYPE_std__vectorTemplateOf_tt__ItemList_ElementItem_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_tt__ItemList_ElementItem(struct soap*, std::vector<_tt__ItemList_ElementItem> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_tt__ItemList_ElementItem(struct soap*, const std::vector<_tt__ItemList_ElementItem> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_tt__ItemList_ElementItem(struct soap*, const char*, int, const std::vector<_tt__ItemList_ElementItem> *, const char*);
SOAP_FMAC3 std::vector<_tt__ItemList_ElementItem> * SOAP_FMAC4 soap_in_std__vectorTemplateOf_tt__ItemList_ElementItem(struct soap*, const char*, std::vector<_tt__ItemList_ElementItem> *, const char*);
SOAP_FMAC1 std::vector<_tt__ItemList_ElementItem>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_tt__ItemList_ElementItem(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_tt__ItemList_ElementItem>  * soap_new_std__vectorTemplateOf_tt__ItemList_ElementItem(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOf_tt__ItemList_ElementItem(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOf_tt__ItemList_SimpleItem_DEFINED
#define SOAP_TYPE_std__vectorTemplateOf_tt__ItemList_SimpleItem_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_tt__ItemList_SimpleItem(struct soap*, std::vector<_tt__ItemList_SimpleItem> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_tt__ItemList_SimpleItem(struct soap*, const std::vector<_tt__ItemList_SimpleItem> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_tt__ItemList_SimpleItem(struct soap*, const char*, int, const std::vector<_tt__ItemList_SimpleItem> *, const char*);
SOAP_FMAC3 std::vector<_tt__ItemList_SimpleItem> * SOAP_FMAC4 soap_in_std__vectorTemplateOf_tt__ItemList_SimpleItem(struct soap*, const char*, std::vector<_tt__ItemList_SimpleItem> *, const char*);
SOAP_FMAC1 std::vector<_tt__ItemList_SimpleItem>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_tt__ItemList_SimpleItem(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_tt__ItemList_SimpleItem>  * soap_new_std__vectorTemplateOf_tt__ItemList_SimpleItem(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOf_tt__ItemList_SimpleItem(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOftt__BacklightCompensationMode_DEFINED
#define SOAP_TYPE_std__vectorTemplateOftt__BacklightCompensationMode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOftt__BacklightCompensationMode(struct soap*, std::vector<enum tt__BacklightCompensationMode> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOftt__BacklightCompensationMode(struct soap*, const std::vector<enum tt__BacklightCompensationMode> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOftt__BacklightCompensationMode(struct soap*, const char*, int, const std::vector<enum tt__BacklightCompensationMode> *, const char*);
SOAP_FMAC3 std::vector<enum tt__BacklightCompensationMode> * SOAP_FMAC4 soap_in_std__vectorTemplateOftt__BacklightCompensationMode(struct soap*, const char*, std::vector<enum tt__BacklightCompensationMode> *, const char*);
SOAP_FMAC1 std::vector<enum tt__BacklightCompensationMode>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOftt__BacklightCompensationMode(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<enum tt__BacklightCompensationMode>  * soap_new_std__vectorTemplateOftt__BacklightCompensationMode(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOftt__BacklightCompensationMode(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOftt__ImageStabilizationMode_DEFINED
#define SOAP_TYPE_std__vectorTemplateOftt__ImageStabilizationMode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOftt__ImageStabilizationMode(struct soap*, std::vector<enum tt__ImageStabilizationMode> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOftt__ImageStabilizationMode(struct soap*, const std::vector<enum tt__ImageStabilizationMode> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOftt__ImageStabilizationMode(struct soap*, const char*, int, const std::vector<enum tt__ImageStabilizationMode> *, const char*);
SOAP_FMAC3 std::vector<enum tt__ImageStabilizationMode> * SOAP_FMAC4 soap_in_std__vectorTemplateOftt__ImageStabilizationMode(struct soap*, const char*, std::vector<enum tt__ImageStabilizationMode> *, const char*);
SOAP_FMAC1 std::vector<enum tt__ImageStabilizationMode>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOftt__ImageStabilizationMode(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<enum tt__ImageStabilizationMode>  * soap_new_std__vectorTemplateOftt__ImageStabilizationMode(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOftt__ImageStabilizationMode(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__IrCutFilterAutoAdjustment_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__IrCutFilterAutoAdjustment_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__IrCutFilterAutoAdjustment(struct soap*, std::vector<tt__IrCutFilterAutoAdjustment *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__IrCutFilterAutoAdjustment(struct soap*, const std::vector<tt__IrCutFilterAutoAdjustment *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__IrCutFilterAutoAdjustment(struct soap*, const char*, int, const std::vector<tt__IrCutFilterAutoAdjustment *> *, const char*);
SOAP_FMAC3 std::vector<tt__IrCutFilterAutoAdjustment *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__IrCutFilterAutoAdjustment(struct soap*, const char*, std::vector<tt__IrCutFilterAutoAdjustment *> *, const char*);
SOAP_FMAC1 std::vector<tt__IrCutFilterAutoAdjustment *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__IrCutFilterAutoAdjustment(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__IrCutFilterAutoAdjustment *>  * soap_new_std__vectorTemplateOfPointerTott__IrCutFilterAutoAdjustment(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__IrCutFilterAutoAdjustment(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOftt__WhiteBalanceMode_DEFINED
#define SOAP_TYPE_std__vectorTemplateOftt__WhiteBalanceMode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOftt__WhiteBalanceMode(struct soap*, std::vector<enum tt__WhiteBalanceMode> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOftt__WhiteBalanceMode(struct soap*, const std::vector<enum tt__WhiteBalanceMode> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOftt__WhiteBalanceMode(struct soap*, const char*, int, const std::vector<enum tt__WhiteBalanceMode> *, const char*);
SOAP_FMAC3 std::vector<enum tt__WhiteBalanceMode> * SOAP_FMAC4 soap_in_std__vectorTemplateOftt__WhiteBalanceMode(struct soap*, const char*, std::vector<enum tt__WhiteBalanceMode> *, const char*);
SOAP_FMAC1 std::vector<enum tt__WhiteBalanceMode>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOftt__WhiteBalanceMode(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<enum tt__WhiteBalanceMode>  * soap_new_std__vectorTemplateOftt__WhiteBalanceMode(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOftt__WhiteBalanceMode(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOftt__ExposurePriority_DEFINED
#define SOAP_TYPE_std__vectorTemplateOftt__ExposurePriority_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOftt__ExposurePriority(struct soap*, std::vector<enum tt__ExposurePriority> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOftt__ExposurePriority(struct soap*, const std::vector<enum tt__ExposurePriority> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOftt__ExposurePriority(struct soap*, const char*, int, const std::vector<enum tt__ExposurePriority> *, const char*);
SOAP_FMAC3 std::vector<enum tt__ExposurePriority> * SOAP_FMAC4 soap_in_std__vectorTemplateOftt__ExposurePriority(struct soap*, const char*, std::vector<enum tt__ExposurePriority> *, const char*);
SOAP_FMAC1 std::vector<enum tt__ExposurePriority>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOftt__ExposurePriority(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<enum tt__ExposurePriority>  * soap_new_std__vectorTemplateOftt__ExposurePriority(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOftt__ExposurePriority(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOftt__ExposureMode_DEFINED
#define SOAP_TYPE_std__vectorTemplateOftt__ExposureMode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOftt__ExposureMode(struct soap*, std::vector<enum tt__ExposureMode> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOftt__ExposureMode(struct soap*, const std::vector<enum tt__ExposureMode> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOftt__ExposureMode(struct soap*, const char*, int, const std::vector<enum tt__ExposureMode> *, const char*);
SOAP_FMAC3 std::vector<enum tt__ExposureMode> * SOAP_FMAC4 soap_in_std__vectorTemplateOftt__ExposureMode(struct soap*, const char*, std::vector<enum tt__ExposureMode> *, const char*);
SOAP_FMAC1 std::vector<enum tt__ExposureMode>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOftt__ExposureMode(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<enum tt__ExposureMode>  * soap_new_std__vectorTemplateOftt__ExposureMode(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOftt__ExposureMode(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOftt__AutoFocusMode_DEFINED
#define SOAP_TYPE_std__vectorTemplateOftt__AutoFocusMode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOftt__AutoFocusMode(struct soap*, std::vector<enum tt__AutoFocusMode> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOftt__AutoFocusMode(struct soap*, const std::vector<enum tt__AutoFocusMode> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOftt__AutoFocusMode(struct soap*, const char*, int, const std::vector<enum tt__AutoFocusMode> *, const char*);
SOAP_FMAC3 std::vector<enum tt__AutoFocusMode> * SOAP_FMAC4 soap_in_std__vectorTemplateOftt__AutoFocusMode(struct soap*, const char*, std::vector<enum tt__AutoFocusMode> *, const char*);
SOAP_FMAC1 std::vector<enum tt__AutoFocusMode>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOftt__AutoFocusMode(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<enum tt__AutoFocusMode>  * soap_new_std__vectorTemplateOftt__AutoFocusMode(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOftt__AutoFocusMode(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOftt__WideDynamicMode_DEFINED
#define SOAP_TYPE_std__vectorTemplateOftt__WideDynamicMode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOftt__WideDynamicMode(struct soap*, std::vector<enum tt__WideDynamicMode> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOftt__WideDynamicMode(struct soap*, const std::vector<enum tt__WideDynamicMode> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOftt__WideDynamicMode(struct soap*, const char*, int, const std::vector<enum tt__WideDynamicMode> *, const char*);
SOAP_FMAC3 std::vector<enum tt__WideDynamicMode> * SOAP_FMAC4 soap_in_std__vectorTemplateOftt__WideDynamicMode(struct soap*, const char*, std::vector<enum tt__WideDynamicMode> *, const char*);
SOAP_FMAC1 std::vector<enum tt__WideDynamicMode>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOftt__WideDynamicMode(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<enum tt__WideDynamicMode>  * soap_new_std__vectorTemplateOftt__WideDynamicMode(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOftt__WideDynamicMode(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOftt__IrCutFilterMode_DEFINED
#define SOAP_TYPE_std__vectorTemplateOftt__IrCutFilterMode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOftt__IrCutFilterMode(struct soap*, std::vector<enum tt__IrCutFilterMode> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOftt__IrCutFilterMode(struct soap*, const std::vector<enum tt__IrCutFilterMode> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOftt__IrCutFilterMode(struct soap*, const char*, int, const std::vector<enum tt__IrCutFilterMode> *, const char*);
SOAP_FMAC3 std::vector<enum tt__IrCutFilterMode> * SOAP_FMAC4 soap_in_std__vectorTemplateOftt__IrCutFilterMode(struct soap*, const char*, std::vector<enum tt__IrCutFilterMode> *, const char*);
SOAP_FMAC1 std::vector<enum tt__IrCutFilterMode>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOftt__IrCutFilterMode(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<enum tt__IrCutFilterMode>  * soap_new_std__vectorTemplateOftt__IrCutFilterMode(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOftt__IrCutFilterMode(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOftt__PTZPresetTourDirection_DEFINED
#define SOAP_TYPE_std__vectorTemplateOftt__PTZPresetTourDirection_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOftt__PTZPresetTourDirection(struct soap*, std::vector<enum tt__PTZPresetTourDirection> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOftt__PTZPresetTourDirection(struct soap*, const std::vector<enum tt__PTZPresetTourDirection> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOftt__PTZPresetTourDirection(struct soap*, const char*, int, const std::vector<enum tt__PTZPresetTourDirection> *, const char*);
SOAP_FMAC3 std::vector<enum tt__PTZPresetTourDirection> * SOAP_FMAC4 soap_in_std__vectorTemplateOftt__PTZPresetTourDirection(struct soap*, const char*, std::vector<enum tt__PTZPresetTourDirection> *, const char*);
SOAP_FMAC1 std::vector<enum tt__PTZPresetTourDirection>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOftt__PTZPresetTourDirection(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<enum tt__PTZPresetTourDirection>  * soap_new_std__vectorTemplateOftt__PTZPresetTourDirection(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOftt__PTZPresetTourDirection(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__PTZPresetTourSpot_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__PTZPresetTourSpot_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__PTZPresetTourSpot(struct soap*, std::vector<tt__PTZPresetTourSpot *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__PTZPresetTourSpot(struct soap*, const std::vector<tt__PTZPresetTourSpot *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__PTZPresetTourSpot(struct soap*, const char*, int, const std::vector<tt__PTZPresetTourSpot *> *, const char*);
SOAP_FMAC3 std::vector<tt__PTZPresetTourSpot *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__PTZPresetTourSpot(struct soap*, const char*, std::vector<tt__PTZPresetTourSpot *> *, const char*);
SOAP_FMAC1 std::vector<tt__PTZPresetTourSpot *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__PTZPresetTourSpot(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__PTZPresetTourSpot *>  * soap_new_std__vectorTemplateOfPointerTott__PTZPresetTourSpot(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__PTZPresetTourSpot(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__Space1DDescription_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__Space1DDescription_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__Space1DDescription(struct soap*, std::vector<tt__Space1DDescription *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__Space1DDescription(struct soap*, const std::vector<tt__Space1DDescription *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__Space1DDescription(struct soap*, const char*, int, const std::vector<tt__Space1DDescription *> *, const char*);
SOAP_FMAC3 std::vector<tt__Space1DDescription *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__Space1DDescription(struct soap*, const char*, std::vector<tt__Space1DDescription *> *, const char*);
SOAP_FMAC1 std::vector<tt__Space1DDescription *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__Space1DDescription(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__Space1DDescription *>  * soap_new_std__vectorTemplateOfPointerTott__Space1DDescription(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__Space1DDescription(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__Space2DDescription_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__Space2DDescription_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__Space2DDescription(struct soap*, std::vector<tt__Space2DDescription *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__Space2DDescription(struct soap*, const std::vector<tt__Space2DDescription *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__Space2DDescription(struct soap*, const char*, int, const std::vector<tt__Space2DDescription *> *, const char*);
SOAP_FMAC3 std::vector<tt__Space2DDescription *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__Space2DDescription(struct soap*, const char*, std::vector<tt__Space2DDescription *> *, const char*);
SOAP_FMAC1 std::vector<tt__Space2DDescription *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__Space2DDescription(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__Space2DDescription *>  * soap_new_std__vectorTemplateOfPointerTott__Space2DDescription(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__Space2DDescription(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOftt__ReverseMode_DEFINED
#define SOAP_TYPE_std__vectorTemplateOftt__ReverseMode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOftt__ReverseMode(struct soap*, std::vector<enum tt__ReverseMode> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOftt__ReverseMode(struct soap*, const std::vector<enum tt__ReverseMode> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOftt__ReverseMode(struct soap*, const char*, int, const std::vector<enum tt__ReverseMode> *, const char*);
SOAP_FMAC3 std::vector<enum tt__ReverseMode> * SOAP_FMAC4 soap_in_std__vectorTemplateOftt__ReverseMode(struct soap*, const char*, std::vector<enum tt__ReverseMode> *, const char*);
SOAP_FMAC1 std::vector<enum tt__ReverseMode>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOftt__ReverseMode(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<enum tt__ReverseMode>  * soap_new_std__vectorTemplateOftt__ReverseMode(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOftt__ReverseMode(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOftt__EFlipMode_DEFINED
#define SOAP_TYPE_std__vectorTemplateOftt__EFlipMode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOftt__EFlipMode(struct soap*, std::vector<enum tt__EFlipMode> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOftt__EFlipMode(struct soap*, const std::vector<enum tt__EFlipMode> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOftt__EFlipMode(struct soap*, const char*, int, const std::vector<enum tt__EFlipMode> *, const char*);
SOAP_FMAC3 std::vector<enum tt__EFlipMode> * SOAP_FMAC4 soap_in_std__vectorTemplateOftt__EFlipMode(struct soap*, const char*, std::vector<enum tt__EFlipMode> *, const char*);
SOAP_FMAC1 std::vector<enum tt__EFlipMode>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOftt__EFlipMode(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<enum tt__EFlipMode>  * soap_new_std__vectorTemplateOftt__EFlipMode(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOftt__EFlipMode(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOftt__PTZPresetTourOperation_DEFINED
#define SOAP_TYPE_std__vectorTemplateOftt__PTZPresetTourOperation_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOftt__PTZPresetTourOperation(struct soap*, std::vector<enum tt__PTZPresetTourOperation> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOftt__PTZPresetTourOperation(struct soap*, const std::vector<enum tt__PTZPresetTourOperation> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOftt__PTZPresetTourOperation(struct soap*, const char*, int, const std::vector<enum tt__PTZPresetTourOperation> *, const char*);
SOAP_FMAC3 std::vector<enum tt__PTZPresetTourOperation> * SOAP_FMAC4 soap_in_std__vectorTemplateOftt__PTZPresetTourOperation(struct soap*, const char*, std::vector<enum tt__PTZPresetTourOperation> *, const char*);
SOAP_FMAC1 std::vector<enum tt__PTZPresetTourOperation>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOftt__PTZPresetTourOperation(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<enum tt__PTZPresetTourOperation>  * soap_new_std__vectorTemplateOftt__PTZPresetTourOperation(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOftt__PTZPresetTourOperation(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__SystemLogUri_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__SystemLogUri_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__SystemLogUri(struct soap*, std::vector<tt__SystemLogUri *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__SystemLogUri(struct soap*, const std::vector<tt__SystemLogUri *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__SystemLogUri(struct soap*, const char*, int, const std::vector<tt__SystemLogUri *> *, const char*);
SOAP_FMAC3 std::vector<tt__SystemLogUri *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__SystemLogUri(struct soap*, const char*, std::vector<tt__SystemLogUri *> *, const char*);
SOAP_FMAC1 std::vector<tt__SystemLogUri *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__SystemLogUri(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__SystemLogUri *>  * soap_new_std__vectorTemplateOfPointerTott__SystemLogUri(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__SystemLogUri(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__OnvifVersion_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__OnvifVersion_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__OnvifVersion(struct soap*, std::vector<tt__OnvifVersion *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__OnvifVersion(struct soap*, const std::vector<tt__OnvifVersion *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__OnvifVersion(struct soap*, const char*, int, const std::vector<tt__OnvifVersion *> *, const char*);
SOAP_FMAC3 std::vector<tt__OnvifVersion *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__OnvifVersion(struct soap*, const char*, std::vector<tt__OnvifVersion *> *, const char*);
SOAP_FMAC1 std::vector<tt__OnvifVersion *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__OnvifVersion(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__OnvifVersion *>  * soap_new_std__vectorTemplateOfPointerTott__OnvifVersion(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__OnvifVersion(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOftt__AuxiliaryData_DEFINED
#define SOAP_TYPE_std__vectorTemplateOftt__AuxiliaryData_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOftt__AuxiliaryData(struct soap*, std::vector<std::string> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOftt__AuxiliaryData(struct soap*, const std::vector<std::string> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOftt__AuxiliaryData(struct soap*, const char*, int, const std::vector<std::string> *, const char*);
SOAP_FMAC3 std::vector<std::string> * SOAP_FMAC4 soap_in_std__vectorTemplateOftt__AuxiliaryData(struct soap*, const char*, std::vector<std::string> *, const char*);
SOAP_FMAC1 std::vector<std::string>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOftt__AuxiliaryData(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<std::string>  * soap_new_std__vectorTemplateOftt__AuxiliaryData(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOftt__AuxiliaryData(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOftt__Dot11Cipher_DEFINED
#define SOAP_TYPE_std__vectorTemplateOftt__Dot11Cipher_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOftt__Dot11Cipher(struct soap*, std::vector<enum tt__Dot11Cipher> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOftt__Dot11Cipher(struct soap*, const std::vector<enum tt__Dot11Cipher> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOftt__Dot11Cipher(struct soap*, const char*, int, const std::vector<enum tt__Dot11Cipher> *, const char*);
SOAP_FMAC3 std::vector<enum tt__Dot11Cipher> * SOAP_FMAC4 soap_in_std__vectorTemplateOftt__Dot11Cipher(struct soap*, const char*, std::vector<enum tt__Dot11Cipher> *, const char*);
SOAP_FMAC1 std::vector<enum tt__Dot11Cipher>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOftt__Dot11Cipher(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<enum tt__Dot11Cipher>  * soap_new_std__vectorTemplateOftt__Dot11Cipher(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOftt__Dot11Cipher(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOftt__Dot11AuthAndMangementSuite_DEFINED
#define SOAP_TYPE_std__vectorTemplateOftt__Dot11AuthAndMangementSuite_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOftt__Dot11AuthAndMangementSuite(struct soap*, std::vector<enum tt__Dot11AuthAndMangementSuite> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOftt__Dot11AuthAndMangementSuite(struct soap*, const std::vector<enum tt__Dot11AuthAndMangementSuite> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOftt__Dot11AuthAndMangementSuite(struct soap*, const char*, int, const std::vector<enum tt__Dot11AuthAndMangementSuite> *, const char*);
SOAP_FMAC3 std::vector<enum tt__Dot11AuthAndMangementSuite> * SOAP_FMAC4 soap_in_std__vectorTemplateOftt__Dot11AuthAndMangementSuite(struct soap*, const char*, std::vector<enum tt__Dot11AuthAndMangementSuite> *, const char*);
SOAP_FMAC1 std::vector<enum tt__Dot11AuthAndMangementSuite>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOftt__Dot11AuthAndMangementSuite(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<enum tt__Dot11AuthAndMangementSuite>  * soap_new_std__vectorTemplateOftt__Dot11AuthAndMangementSuite(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOftt__Dot11AuthAndMangementSuite(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__NetworkZeroConfiguration_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__NetworkZeroConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__NetworkZeroConfiguration(struct soap*, std::vector<tt__NetworkZeroConfiguration *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__NetworkZeroConfiguration(struct soap*, const std::vector<tt__NetworkZeroConfiguration *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__NetworkZeroConfiguration(struct soap*, const char*, int, const std::vector<tt__NetworkZeroConfiguration *> *, const char*);
SOAP_FMAC3 std::vector<tt__NetworkZeroConfiguration *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__NetworkZeroConfiguration(struct soap*, const char*, std::vector<tt__NetworkZeroConfiguration *> *, const char*);
SOAP_FMAC1 std::vector<tt__NetworkZeroConfiguration *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__NetworkZeroConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__NetworkZeroConfiguration *>  * soap_new_std__vectorTemplateOfPointerTott__NetworkZeroConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__NetworkZeroConfiguration(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__PrefixedIPv6Address_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__PrefixedIPv6Address_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__PrefixedIPv6Address(struct soap*, std::vector<tt__PrefixedIPv6Address *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__PrefixedIPv6Address(struct soap*, const std::vector<tt__PrefixedIPv6Address *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__PrefixedIPv6Address(struct soap*, const char*, int, const std::vector<tt__PrefixedIPv6Address *> *, const char*);
SOAP_FMAC3 std::vector<tt__PrefixedIPv6Address *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__PrefixedIPv6Address(struct soap*, const char*, std::vector<tt__PrefixedIPv6Address *> *, const char*);
SOAP_FMAC1 std::vector<tt__PrefixedIPv6Address *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__PrefixedIPv6Address(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__PrefixedIPv6Address *>  * soap_new_std__vectorTemplateOfPointerTott__PrefixedIPv6Address(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__PrefixedIPv6Address(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__PrefixedIPv4Address_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__PrefixedIPv4Address_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__PrefixedIPv4Address(struct soap*, std::vector<tt__PrefixedIPv4Address *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__PrefixedIPv4Address(struct soap*, const std::vector<tt__PrefixedIPv4Address *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__PrefixedIPv4Address(struct soap*, const char*, int, const std::vector<tt__PrefixedIPv4Address *> *, const char*);
SOAP_FMAC3 std::vector<tt__PrefixedIPv4Address *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__PrefixedIPv4Address(struct soap*, const char*, std::vector<tt__PrefixedIPv4Address *> *, const char*);
SOAP_FMAC1 std::vector<tt__PrefixedIPv4Address *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__PrefixedIPv4Address(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__PrefixedIPv4Address *>  * soap_new_std__vectorTemplateOfPointerTott__PrefixedIPv4Address(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__PrefixedIPv4Address(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__Dot11Configuration_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__Dot11Configuration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__Dot11Configuration(struct soap*, std::vector<tt__Dot11Configuration *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__Dot11Configuration(struct soap*, const std::vector<tt__Dot11Configuration *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__Dot11Configuration(struct soap*, const char*, int, const std::vector<tt__Dot11Configuration *> *, const char*);
SOAP_FMAC3 std::vector<tt__Dot11Configuration *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__Dot11Configuration(struct soap*, const char*, std::vector<tt__Dot11Configuration *> *, const char*);
SOAP_FMAC1 std::vector<tt__Dot11Configuration *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__Dot11Configuration(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__Dot11Configuration *>  * soap_new_std__vectorTemplateOfPointerTott__Dot11Configuration(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__Dot11Configuration(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__Dot3Configuration_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__Dot3Configuration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__Dot3Configuration(struct soap*, std::vector<tt__Dot3Configuration *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__Dot3Configuration(struct soap*, const std::vector<tt__Dot3Configuration *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__Dot3Configuration(struct soap*, const char*, int, const std::vector<tt__Dot3Configuration *> *, const char*);
SOAP_FMAC3 std::vector<tt__Dot3Configuration *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__Dot3Configuration(struct soap*, const char*, std::vector<tt__Dot3Configuration *> *, const char*);
SOAP_FMAC1 std::vector<tt__Dot3Configuration *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__Dot3Configuration(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__Dot3Configuration *>  * soap_new_std__vectorTemplateOfPointerTott__Dot3Configuration(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__Dot3Configuration(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__AudioEncoderConfigurationOption_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__AudioEncoderConfigurationOption_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__AudioEncoderConfigurationOption(struct soap*, std::vector<tt__AudioEncoderConfigurationOption *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__AudioEncoderConfigurationOption(struct soap*, const std::vector<tt__AudioEncoderConfigurationOption *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__AudioEncoderConfigurationOption(struct soap*, const char*, int, const std::vector<tt__AudioEncoderConfigurationOption *> *, const char*);
SOAP_FMAC3 std::vector<tt__AudioEncoderConfigurationOption *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__AudioEncoderConfigurationOption(struct soap*, const char*, std::vector<tt__AudioEncoderConfigurationOption *> *, const char*);
SOAP_FMAC1 std::vector<tt__AudioEncoderConfigurationOption *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__AudioEncoderConfigurationOption(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__AudioEncoderConfigurationOption *>  * soap_new_std__vectorTemplateOfPointerTott__AudioEncoderConfigurationOption(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__AudioEncoderConfigurationOption(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__VideoResolution2_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__VideoResolution2_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__VideoResolution2(struct soap*, std::vector<tt__VideoResolution2 *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__VideoResolution2(struct soap*, const std::vector<tt__VideoResolution2 *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__VideoResolution2(struct soap*, const char*, int, const std::vector<tt__VideoResolution2 *> *, const char*);
SOAP_FMAC3 std::vector<tt__VideoResolution2 *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__VideoResolution2(struct soap*, const char*, std::vector<tt__VideoResolution2 *> *, const char*);
SOAP_FMAC1 std::vector<tt__VideoResolution2 *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__VideoResolution2(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__VideoResolution2 *>  * soap_new_std__vectorTemplateOfPointerTott__VideoResolution2(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__VideoResolution2(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOftt__H264Profile_DEFINED
#define SOAP_TYPE_std__vectorTemplateOftt__H264Profile_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOftt__H264Profile(struct soap*, std::vector<enum tt__H264Profile> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOftt__H264Profile(struct soap*, const std::vector<enum tt__H264Profile> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOftt__H264Profile(struct soap*, const char*, int, const std::vector<enum tt__H264Profile> *, const char*);
SOAP_FMAC3 std::vector<enum tt__H264Profile> * SOAP_FMAC4 soap_in_std__vectorTemplateOftt__H264Profile(struct soap*, const char*, std::vector<enum tt__H264Profile> *, const char*);
SOAP_FMAC1 std::vector<enum tt__H264Profile>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOftt__H264Profile(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<enum tt__H264Profile>  * soap_new_std__vectorTemplateOftt__H264Profile(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOftt__H264Profile(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOftt__Mpeg4Profile_DEFINED
#define SOAP_TYPE_std__vectorTemplateOftt__Mpeg4Profile_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOftt__Mpeg4Profile(struct soap*, std::vector<enum tt__Mpeg4Profile> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOftt__Mpeg4Profile(struct soap*, const std::vector<enum tt__Mpeg4Profile> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOftt__Mpeg4Profile(struct soap*, const char*, int, const std::vector<enum tt__Mpeg4Profile> *, const char*);
SOAP_FMAC3 std::vector<enum tt__Mpeg4Profile> * SOAP_FMAC4 soap_in_std__vectorTemplateOftt__Mpeg4Profile(struct soap*, const char*, std::vector<enum tt__Mpeg4Profile> *, const char*);
SOAP_FMAC1 std::vector<enum tt__Mpeg4Profile>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOftt__Mpeg4Profile(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<enum tt__Mpeg4Profile>  * soap_new_std__vectorTemplateOftt__Mpeg4Profile(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOftt__Mpeg4Profile(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__VideoResolution_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__VideoResolution_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__VideoResolution(struct soap*, std::vector<tt__VideoResolution *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__VideoResolution(struct soap*, const std::vector<tt__VideoResolution *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__VideoResolution(struct soap*, const char*, int, const std::vector<tt__VideoResolution *> *, const char*);
SOAP_FMAC3 std::vector<tt__VideoResolution *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__VideoResolution(struct soap*, const char*, std::vector<tt__VideoResolution *> *, const char*);
SOAP_FMAC1 std::vector<tt__VideoResolution *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__VideoResolution(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__VideoResolution *>  * soap_new_std__vectorTemplateOfPointerTott__VideoResolution(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__VideoResolution(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOftt__RotateMode_DEFINED
#define SOAP_TYPE_std__vectorTemplateOftt__RotateMode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOftt__RotateMode(struct soap*, std::vector<enum tt__RotateMode> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOftt__RotateMode(struct soap*, const std::vector<enum tt__RotateMode> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOftt__RotateMode(struct soap*, const char*, int, const std::vector<enum tt__RotateMode> *, const char*);
SOAP_FMAC3 std::vector<enum tt__RotateMode> * SOAP_FMAC4 soap_in_std__vectorTemplateOftt__RotateMode(struct soap*, const char*, std::vector<enum tt__RotateMode> *, const char*);
SOAP_FMAC1 std::vector<enum tt__RotateMode>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOftt__RotateMode(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<enum tt__RotateMode>  * soap_new_std__vectorTemplateOftt__RotateMode(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOftt__RotateMode(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__LensProjection_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__LensProjection_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__LensProjection(struct soap*, std::vector<tt__LensProjection *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__LensProjection(struct soap*, const std::vector<tt__LensProjection *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__LensProjection(struct soap*, const char*, int, const std::vector<tt__LensProjection *> *, const char*);
SOAP_FMAC3 std::vector<tt__LensProjection *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__LensProjection(struct soap*, const char*, std::vector<tt__LensProjection *> *, const char*);
SOAP_FMAC1 std::vector<tt__LensProjection *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__LensProjection(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__LensProjection *>  * soap_new_std__vectorTemplateOfPointerTott__LensProjection(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__LensProjection(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__LensDescription_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__LensDescription_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__LensDescription(struct soap*, std::vector<tt__LensDescription *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__LensDescription(struct soap*, const std::vector<tt__LensDescription *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__LensDescription(struct soap*, const char*, int, const std::vector<tt__LensDescription *> *, const char*);
SOAP_FMAC3 std::vector<tt__LensDescription *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__LensDescription(struct soap*, const char*, std::vector<tt__LensDescription *> *, const char*);
SOAP_FMAC1 std::vector<tt__LensDescription *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__LensDescription(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__LensDescription *>  * soap_new_std__vectorTemplateOfPointerTott__LensDescription(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__LensDescription(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOffloat_DEFINED
#define SOAP_TYPE_std__vectorTemplateOffloat_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOffloat(struct soap*, std::vector<float> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOffloat(struct soap*, const std::vector<float> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOffloat(struct soap*, const char*, int, const std::vector<float> *, const char*);
SOAP_FMAC3 std::vector<float> * SOAP_FMAC4 soap_in_std__vectorTemplateOffloat(struct soap*, const char*, std::vector<float> *, const char*);
SOAP_FMAC1 std::vector<float>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOffloat(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<float>  * soap_new_std__vectorTemplateOffloat(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOffloat(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfint_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfint_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfint(struct soap*, std::vector<int> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfint(struct soap*, const std::vector<int> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfint(struct soap*, const char*, int, const std::vector<int> *, const char*);
SOAP_FMAC3 std::vector<int> * SOAP_FMAC4 soap_in_std__vectorTemplateOfint(struct soap*, const char*, std::vector<int> *, const char*);
SOAP_FMAC1 std::vector<int>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfint(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<int>  * soap_new_std__vectorTemplateOfint(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfint(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTotds__StorageConfiguration_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTotds__StorageConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTotds__StorageConfiguration(struct soap*, std::vector<tds__StorageConfiguration *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTotds__StorageConfiguration(struct soap*, const std::vector<tds__StorageConfiguration *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTotds__StorageConfiguration(struct soap*, const char*, int, const std::vector<tds__StorageConfiguration *> *, const char*);
SOAP_FMAC3 std::vector<tds__StorageConfiguration *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTotds__StorageConfiguration(struct soap*, const char*, std::vector<tds__StorageConfiguration *> *, const char*);
SOAP_FMAC1 std::vector<tds__StorageConfiguration *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTotds__StorageConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tds__StorageConfiguration *>  * soap_new_std__vectorTemplateOfPointerTotds__StorageConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTotds__StorageConfiguration(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__Dot11AvailableNetworks_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__Dot11AvailableNetworks_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__Dot11AvailableNetworks(struct soap*, std::vector<tt__Dot11AvailableNetworks *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__Dot11AvailableNetworks(struct soap*, const std::vector<tt__Dot11AvailableNetworks *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__Dot11AvailableNetworks(struct soap*, const char*, int, const std::vector<tt__Dot11AvailableNetworks *> *, const char*);
SOAP_FMAC3 std::vector<tt__Dot11AvailableNetworks *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__Dot11AvailableNetworks(struct soap*, const char*, std::vector<tt__Dot11AvailableNetworks *> *, const char*);
SOAP_FMAC1 std::vector<tt__Dot11AvailableNetworks *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__Dot11AvailableNetworks(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__Dot11AvailableNetworks *>  * soap_new_std__vectorTemplateOfPointerTott__Dot11AvailableNetworks(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__Dot11AvailableNetworks(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__RelayOutput_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__RelayOutput_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__RelayOutput(struct soap*, std::vector<tt__RelayOutput *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__RelayOutput(struct soap*, const std::vector<tt__RelayOutput *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__RelayOutput(struct soap*, const char*, int, const std::vector<tt__RelayOutput *> *, const char*);
SOAP_FMAC3 std::vector<tt__RelayOutput *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__RelayOutput(struct soap*, const char*, std::vector<tt__RelayOutput *> *, const char*);
SOAP_FMAC1 std::vector<tt__RelayOutput *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__RelayOutput(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__RelayOutput *>  * soap_new_std__vectorTemplateOfPointerTott__RelayOutput(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__RelayOutput(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOftt__ReferenceToken_DEFINED
#define SOAP_TYPE_std__vectorTemplateOftt__ReferenceToken_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOftt__ReferenceToken(struct soap*, std::vector<std::string> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOftt__ReferenceToken(struct soap*, const std::vector<std::string> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOftt__ReferenceToken(struct soap*, const char*, int, const std::vector<std::string> *, const char*);
SOAP_FMAC3 std::vector<std::string> * SOAP_FMAC4 soap_in_std__vectorTemplateOftt__ReferenceToken(struct soap*, const char*, std::vector<std::string> *, const char*);
SOAP_FMAC1 std::vector<std::string>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOftt__ReferenceToken(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<std::string>  * soap_new_std__vectorTemplateOftt__ReferenceToken(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOftt__ReferenceToken(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__Dot1XConfiguration_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__Dot1XConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__Dot1XConfiguration(struct soap*, std::vector<tt__Dot1XConfiguration *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__Dot1XConfiguration(struct soap*, const std::vector<tt__Dot1XConfiguration *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__Dot1XConfiguration(struct soap*, const char*, int, const std::vector<tt__Dot1XConfiguration *> *, const char*);
SOAP_FMAC3 std::vector<tt__Dot1XConfiguration *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__Dot1XConfiguration(struct soap*, const char*, std::vector<tt__Dot1XConfiguration *> *, const char*);
SOAP_FMAC1 std::vector<tt__Dot1XConfiguration *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__Dot1XConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__Dot1XConfiguration *>  * soap_new_std__vectorTemplateOfPointerTott__Dot1XConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__Dot1XConfiguration(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__CertificateWithPrivateKey_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__CertificateWithPrivateKey_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__CertificateWithPrivateKey(struct soap*, std::vector<tt__CertificateWithPrivateKey *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__CertificateWithPrivateKey(struct soap*, const std::vector<tt__CertificateWithPrivateKey *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__CertificateWithPrivateKey(struct soap*, const char*, int, const std::vector<tt__CertificateWithPrivateKey *> *, const char*);
SOAP_FMAC3 std::vector<tt__CertificateWithPrivateKey *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__CertificateWithPrivateKey(struct soap*, const char*, std::vector<tt__CertificateWithPrivateKey *> *, const char*);
SOAP_FMAC1 std::vector<tt__CertificateWithPrivateKey *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__CertificateWithPrivateKey(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__CertificateWithPrivateKey *>  * soap_new_std__vectorTemplateOfPointerTott__CertificateWithPrivateKey(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__CertificateWithPrivateKey(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__CertificateStatus_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__CertificateStatus_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__CertificateStatus(struct soap*, std::vector<tt__CertificateStatus *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__CertificateStatus(struct soap*, const std::vector<tt__CertificateStatus *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__CertificateStatus(struct soap*, const char*, int, const std::vector<tt__CertificateStatus *> *, const char*);
SOAP_FMAC3 std::vector<tt__CertificateStatus *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__CertificateStatus(struct soap*, const char*, std::vector<tt__CertificateStatus *> *, const char*);
SOAP_FMAC1 std::vector<tt__CertificateStatus *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__CertificateStatus(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__CertificateStatus *>  * soap_new_std__vectorTemplateOfPointerTott__CertificateStatus(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__CertificateStatus(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__Certificate_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__Certificate_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__Certificate(struct soap*, std::vector<tt__Certificate *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__Certificate(struct soap*, const std::vector<tt__Certificate *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__Certificate(struct soap*, const char*, int, const std::vector<tt__Certificate *> *, const char*);
SOAP_FMAC3 std::vector<tt__Certificate *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__Certificate(struct soap*, const char*, std::vector<tt__Certificate *> *, const char*);
SOAP_FMAC1 std::vector<tt__Certificate *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__Certificate(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__Certificate *>  * soap_new_std__vectorTemplateOfPointerTott__Certificate(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__Certificate(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOftt__IPv6Address_DEFINED
#define SOAP_TYPE_std__vectorTemplateOftt__IPv6Address_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOftt__IPv6Address(struct soap*, std::vector<std::string> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOftt__IPv6Address(struct soap*, const std::vector<std::string> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOftt__IPv6Address(struct soap*, const char*, int, const std::vector<std::string> *, const char*);
SOAP_FMAC3 std::vector<std::string> * SOAP_FMAC4 soap_in_std__vectorTemplateOftt__IPv6Address(struct soap*, const char*, std::vector<std::string> *, const char*);
SOAP_FMAC1 std::vector<std::string>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOftt__IPv6Address(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<std::string>  * soap_new_std__vectorTemplateOftt__IPv6Address(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOftt__IPv6Address(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOftt__IPv4Address_DEFINED
#define SOAP_TYPE_std__vectorTemplateOftt__IPv4Address_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOftt__IPv4Address(struct soap*, std::vector<std::string> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOftt__IPv4Address(struct soap*, const std::vector<std::string> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOftt__IPv4Address(struct soap*, const char*, int, const std::vector<std::string> *, const char*);
SOAP_FMAC3 std::vector<std::string> * SOAP_FMAC4 soap_in_std__vectorTemplateOftt__IPv4Address(struct soap*, const char*, std::vector<std::string> *, const char*);
SOAP_FMAC1 std::vector<std::string>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOftt__IPv4Address(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<std::string>  * soap_new_std__vectorTemplateOftt__IPv4Address(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOftt__IPv4Address(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__NetworkProtocol_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__NetworkProtocol_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__NetworkProtocol(struct soap*, std::vector<tt__NetworkProtocol *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__NetworkProtocol(struct soap*, const std::vector<tt__NetworkProtocol *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__NetworkProtocol(struct soap*, const char*, int, const std::vector<tt__NetworkProtocol *> *, const char*);
SOAP_FMAC3 std::vector<tt__NetworkProtocol *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__NetworkProtocol(struct soap*, const char*, std::vector<tt__NetworkProtocol *> *, const char*);
SOAP_FMAC1 std::vector<tt__NetworkProtocol *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__NetworkProtocol(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__NetworkProtocol *>  * soap_new_std__vectorTemplateOfPointerTott__NetworkProtocol(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__NetworkProtocol(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__NetworkInterface_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__NetworkInterface_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__NetworkInterface(struct soap*, std::vector<tt__NetworkInterface *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__NetworkInterface(struct soap*, const std::vector<tt__NetworkInterface *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__NetworkInterface(struct soap*, const char*, int, const std::vector<tt__NetworkInterface *> *, const char*);
SOAP_FMAC3 std::vector<tt__NetworkInterface *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__NetworkInterface(struct soap*, const char*, std::vector<tt__NetworkInterface *> *, const char*);
SOAP_FMAC1 std::vector<tt__NetworkInterface *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__NetworkInterface(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__NetworkInterface *>  * soap_new_std__vectorTemplateOfPointerTott__NetworkInterface(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__NetworkInterface(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__IPAddress_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__IPAddress_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__IPAddress(struct soap*, std::vector<tt__IPAddress *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__IPAddress(struct soap*, const std::vector<tt__IPAddress *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__IPAddress(struct soap*, const char*, int, const std::vector<tt__IPAddress *> *, const char*);
SOAP_FMAC3 std::vector<tt__IPAddress *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__IPAddress(struct soap*, const char*, std::vector<tt__IPAddress *> *, const char*);
SOAP_FMAC1 std::vector<tt__IPAddress *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__IPAddress(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__IPAddress *>  * soap_new_std__vectorTemplateOfPointerTott__IPAddress(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__IPAddress(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfxsd__token_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfxsd__token_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfxsd__token(struct soap*, std::vector<std::string> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfxsd__token(struct soap*, const std::vector<std::string> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfxsd__token(struct soap*, const char*, int, const std::vector<std::string> *, const char*);
SOAP_FMAC3 std::vector<std::string> * SOAP_FMAC4 soap_in_std__vectorTemplateOfxsd__token(struct soap*, const char*, std::vector<std::string> *, const char*);
SOAP_FMAC1 std::vector<std::string>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfxsd__token(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<std::string>  * soap_new_std__vectorTemplateOfxsd__token(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfxsd__token(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOftt__CapabilityCategory_DEFINED
#define SOAP_TYPE_std__vectorTemplateOftt__CapabilityCategory_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOftt__CapabilityCategory(struct soap*, std::vector<enum tt__CapabilityCategory> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOftt__CapabilityCategory(struct soap*, const std::vector<enum tt__CapabilityCategory> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOftt__CapabilityCategory(struct soap*, const char*, int, const std::vector<enum tt__CapabilityCategory> *, const char*);
SOAP_FMAC3 std::vector<enum tt__CapabilityCategory> * SOAP_FMAC4 soap_in_std__vectorTemplateOftt__CapabilityCategory(struct soap*, const char*, std::vector<enum tt__CapabilityCategory> *, const char*);
SOAP_FMAC1 std::vector<enum tt__CapabilityCategory>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOftt__CapabilityCategory(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<enum tt__CapabilityCategory>  * soap_new_std__vectorTemplateOftt__CapabilityCategory(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOftt__CapabilityCategory(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfstd__string_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfstd__string_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfstd__string(struct soap*, std::vector<std::string> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfstd__string(struct soap*, const std::vector<std::string> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfstd__string(struct soap*, const char*, int, const std::vector<std::string> *, const char*);
SOAP_FMAC3 std::vector<std::string> * SOAP_FMAC4 soap_in_std__vectorTemplateOfstd__string(struct soap*, const char*, std::vector<std::string> *, const char*);
SOAP_FMAC1 std::vector<std::string>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfstd__string(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<std::string>  * soap_new_std__vectorTemplateOfstd__string(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfstd__string(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__User_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__User_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__User(struct soap*, std::vector<tt__User *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__User(struct soap*, const std::vector<tt__User *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__User(struct soap*, const char*, int, const std::vector<tt__User *> *, const char*);
SOAP_FMAC3 std::vector<tt__User *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__User(struct soap*, const char*, std::vector<tt__User *> *, const char*);
SOAP_FMAC1 std::vector<tt__User *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__User(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__User *>  * soap_new_std__vectorTemplateOfPointerTott__User(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__User(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__NetworkHost_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__NetworkHost_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__NetworkHost(struct soap*, std::vector<tt__NetworkHost *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__NetworkHost(struct soap*, const std::vector<tt__NetworkHost *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__NetworkHost(struct soap*, const char*, int, const std::vector<tt__NetworkHost *> *, const char*);
SOAP_FMAC3 std::vector<tt__NetworkHost *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__NetworkHost(struct soap*, const char*, std::vector<tt__NetworkHost *> *, const char*);
SOAP_FMAC1 std::vector<tt__NetworkHost *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__NetworkHost(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__NetworkHost *>  * soap_new_std__vectorTemplateOfPointerTott__NetworkHost(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__NetworkHost(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfxsd__anyURI_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfxsd__anyURI_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfxsd__anyURI(struct soap*, std::vector<std::string> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfxsd__anyURI(struct soap*, const std::vector<std::string> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfxsd__anyURI(struct soap*, const char*, int, const std::vector<std::string> *, const char*);
SOAP_FMAC3 std::vector<std::string> * SOAP_FMAC4 soap_in_std__vectorTemplateOfxsd__anyURI(struct soap*, const char*, std::vector<std::string> *, const char*);
SOAP_FMAC1 std::vector<std::string>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfxsd__anyURI(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<std::string>  * soap_new_std__vectorTemplateOfxsd__anyURI(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfxsd__anyURI(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__Scope_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__Scope_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__Scope(struct soap*, std::vector<tt__Scope *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__Scope(struct soap*, const std::vector<tt__Scope *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__Scope(struct soap*, const char*, int, const std::vector<tt__Scope *> *, const char*);
SOAP_FMAC3 std::vector<tt__Scope *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__Scope(struct soap*, const char*, std::vector<tt__Scope *> *, const char*);
SOAP_FMAC1 std::vector<tt__Scope *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__Scope(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__Scope *>  * soap_new_std__vectorTemplateOfPointerTott__Scope(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__Scope(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__BackupFile_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__BackupFile_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__BackupFile(struct soap*, std::vector<tt__BackupFile *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__BackupFile(struct soap*, const std::vector<tt__BackupFile *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__BackupFile(struct soap*, const char*, int, const std::vector<tt__BackupFile *> *, const char*);
SOAP_FMAC3 std::vector<tt__BackupFile *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__BackupFile(struct soap*, const char*, std::vector<tt__BackupFile *> *, const char*);
SOAP_FMAC1 std::vector<tt__BackupFile *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__BackupFile(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__BackupFile *>  * soap_new_std__vectorTemplateOfPointerTott__BackupFile(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__BackupFile(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTotds__Service_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTotds__Service_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTotds__Service(struct soap*, std::vector<tds__Service *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTotds__Service(struct soap*, const std::vector<tds__Service *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTotds__Service(struct soap*, const char*, int, const std::vector<tds__Service *> *, const char*);
SOAP_FMAC3 std::vector<tds__Service *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTotds__Service(struct soap*, const char*, std::vector<tds__Service *> *, const char*);
SOAP_FMAC1 std::vector<tds__Service *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTotds__Service(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tds__Service *>  * soap_new_std__vectorTemplateOfPointerTotds__Service(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTotds__Service(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOf_XML_DEFINED
#define SOAP_TYPE_std__vectorTemplateOf_XML_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_XML(struct soap*, std::vector<char *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_XML(struct soap*, const std::vector<char *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_XML(struct soap*, const char*, int, const std::vector<char *> *, const char*);
SOAP_FMAC3 std::vector<char *> * SOAP_FMAC4 soap_in_std__vectorTemplateOf_XML(struct soap*, const char*, std::vector<char *> *, const char*);
SOAP_FMAC1 std::vector<char *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_XML(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<char *>  * soap_new_std__vectorTemplateOf_XML(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOf_XML(soap, n, NULL, NULL, NULL);
}
#endif

#endif

/* End of soapH.h */
